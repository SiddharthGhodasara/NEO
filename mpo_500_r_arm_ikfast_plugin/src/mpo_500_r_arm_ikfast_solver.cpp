/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2020-07-20 10:25:35.435398
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[1]);
x4=IKsin(j[2]);
x5=IKcos(j[3]);
x6=IKsin(j[3]);
x7=IKsin(j[4]);
x8=IKcos(j[4]);
x9=IKsin(j[0]);
x10=IKsin(j[5]);
x11=IKcos(j[5]);
x12=((0.2683)*x6);
x13=((1.0)*x7);
x14=((1.0)*x0);
x15=((0.2683)*x5);
x16=((1.0)*x9);
x17=((0.425)*x3);
x18=((0.09465)*x9);
x19=((0.09465)*x0);
x20=(x8*x9);
x21=(x3*x4);
x22=(x0*x7);
x23=(x2*x3);
x24=(x0*x1);
x25=(x1*x4);
x26=(x1*x2);
x27=((0.09465)*x26);
x28=((1.0)*x26);
x29=(x25*x9);
x30=(x14*x21);
x31=(x16*x21);
x32=((((-1.0)*x28))+x21);
x33=((((1.0)*x25))+(((1.0)*x23)));
x34=((-1.0)*x33);
x35=(x32*x6);
x36=((((-1.0)*x30))+((x2*x24)));
x37=((((-1.0)*x31))+((x26*x9)));
x38=(x34*x5);
x39=(x14*(((((-1.0)*x23))+(((-1.0)*x25)))));
x40=(x16*(((((-1.0)*x23))+(((-1.0)*x25)))));
x41=(x36*x5);
x42=(x38+x35);
x43=(((x32*x5))+((x33*x6)));
x44=(x41+((x39*x6)));
x45=(((x40*x6))+((x37*x5)));
x46=(((x6*(((((-1.0)*x14*x26))+x30))))+((x39*x5)));
x47=(((x6*(((((-1.0)*x16*x26))+x31))))+((x40*x5)));
x48=(x44*x7);
eerot[0]=(((x44*x8))+(((-1.0)*x13*x9)));
eerot[1]=(((x11*((x48+x20))))+((x10*x46)));
eerot[2]=(((x11*x46))+((x10*(((((-1.0)*x48))+(((-1.0)*x20)))))));
eetrans[0]=((((0.39225)*x24*x4))+((x0*x17))+(((-0.10915)*x9))+(((0.39225)*x0*x23))+((x6*((((x19*x26))+(((-1.0)*x19*x21))))))+((x5*((((x19*x25))+((x19*x23))))))+(((-0.2683)*x7*x9))+((x8*((((x15*x36))+((x12*x39)))))));
eerot[3]=(x22+((x45*x8)));
eerot[4]=(((x10*x47))+((x11*(((((-1.0)*x0*x8))+((x45*x7)))))));
eerot[5]=(((x11*x47))+((x10*((((x14*x8))+(((-1.0)*x13*x45)))))));
eetrans[1]=(((x5*((((x18*x23))+((x18*x25))))))+(((0.2683)*x22))+(((0.10915)*x0))+((x6*((((x18*x26))+(((-1.0)*x18*x21))))))+((x17*x9))+(((0.39225)*x29))+(((0.39225)*x23*x9))+((x8*((((x15*x37))+((x12*x40)))))));
eerot[6]=(x42*x8);
eerot[7]=(((x10*x43))+((x11*x42*x7)));
eerot[8]=(((x11*x43))+((x10*x7*(((((-1.0)*x35))+(((-1.0)*x38)))))));
eetrans[2]=((0.089159)+(((0.425)*x1))+((x8*((((x15*x34))+((x12*x32))))))+((x6*(((((-0.09465)*x23))+(((-0.09465)*x25))))))+(((0.39225)*x26))+(((-0.39225)*x21))+((x5*(((((-0.09465)*x21))+x27)))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j12,cj12,sj12,htj12,j12mul,j13,cj13,sj13,htj13,j13mul,j14,cj14,sj14,htj14,j14mul,j15,cj15,sj15,htj15,j15mul,j16,cj16,sj16,htj16,j16mul,j17,cj17,sj17,htj17,j17mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij12[2], _nj12,_ij13[2], _nj13,_ij14[2], _nj14,_ij15[2], _nj15,_ij16[2], _nj16,_ij17[2], _nj17;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j12=numeric_limits<IkReal>::quiet_NaN(); _ij12[0] = -1; _ij12[1] = -1; _nj12 = -1; j13=numeric_limits<IkReal>::quiet_NaN(); _ij13[0] = -1; _ij13[1] = -1; _nj13 = -1; j14=numeric_limits<IkReal>::quiet_NaN(); _ij14[0] = -1; _ij14[1] = -1; _nj14 = -1; j15=numeric_limits<IkReal>::quiet_NaN(); _ij15[0] = -1; _ij15[1] = -1; _nj15 = -1; j16=numeric_limits<IkReal>::quiet_NaN(); _ij16[0] = -1; _ij16[1] = -1; _nj16 = -1; j17=numeric_limits<IkReal>::quiet_NaN(); _ij17[0] = -1; _ij17[1] = -1; _nj17 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r01;
new_r01=r02;
new_r02=r00;
new_px=(px+(((-0.2683)*r00)));
new_r10=r11;
new_r11=r12;
new_r12=r10;
new_py=(py+(((-0.2683)*r10)));
new_r20=r21;
new_r21=r22;
new_r22=r20;
new_pz=((-0.089159)+(((-0.2683)*r20))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x49=((1.0)*px);
IkReal x50=((1.0)*pz);
IkReal x51=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x51))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x50)));
rxp0_2=((((-1.0)*r10*x49))+((py*r00)));
rxp1_0=((((-1.0)*r21*x51))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x50)));
rxp1_2=((((-1.0)*r11*x49))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x51)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x50)));
rxp2_2=((((-1.0)*r12*x49))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x52=((0.1893)*npx);
IkReal x53=((0.1893)*npy);
IkReal x54=((0.09465)*r22);
IkReal x55=((0.09465)*r21);
IkReal x56=((-0.09465)*r20);
IkReal x57=((-0.09465)*r21);
IkReal x58=((-1.0)*r22);
IkReal x59=((-1.0)*npz);
IkReal x60=((-1.0)*r21);
IkReal x61=((-1.0)*rxp1_2);
IkReal x62=((-1.0)*npx);
IkReal x63=((-0.09465)*r22);
IkReal x64=((-1.0)*npy);
IkReal x65=((-1.0)*rxp0_2);
matrixinvcoeffs[0]=x56;
matrixinvcoeffs[1]=x52;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=r20;
matrixinvcoeffs[9]=0;
matrixinvcoeffs[10]=0;
matrixinvcoeffs[11]=x62;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=rxp0_2;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x56;
matrixinvcoeffs[19]=x52;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=0;
matrixinvcoeffs[25]=npx;
matrixinvcoeffs[26]=((-1.0)*r20);
matrixinvcoeffs[27]=0;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=x65;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x57;
matrixinvcoeffs[33]=x53;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=r21;
matrixinvcoeffs[41]=0;
matrixinvcoeffs[42]=0;
matrixinvcoeffs[43]=x64;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=rxp1_2;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x57;
matrixinvcoeffs[51]=x53;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=0;
matrixinvcoeffs[57]=npy;
matrixinvcoeffs[58]=x60;
matrixinvcoeffs[59]=0;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=x61;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=x58;
matrixinvcoeffs[69]=x59;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=0;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=0;
matrixinvcoeffs[75]=0;
matrixinvcoeffs[76]=rxp2_2;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=x54;
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=x58;
matrixinvcoeffs[87]=x59;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=0;
matrixinvcoeffs[90]=0;
matrixinvcoeffs[91]=0;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=rxp2_2;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=x54;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=0;
matrixinvcoeffs[101]=0;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=0;
matrixinvcoeffs[105]=npy;
matrixinvcoeffs[106]=x60;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=x55;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=x61;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=0;
matrixinvcoeffs[119]=0;
matrixinvcoeffs[120]=x60;
matrixinvcoeffs[121]=0;
matrixinvcoeffs[122]=0;
matrixinvcoeffs[123]=npy;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=x55;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=x61;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=0;
matrixinvcoeffs[133]=0;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=0;
matrixinvcoeffs[137]=x62;
matrixinvcoeffs[138]=r20;
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=x56;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=rxp0_2;
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=0;
matrixinvcoeffs[151]=0;
matrixinvcoeffs[152]=r20;
matrixinvcoeffs[153]=0;
matrixinvcoeffs[154]=0;
matrixinvcoeffs[155]=x62;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=x56;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=rxp0_2;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=0;
matrixinvcoeffs[165]=0;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=0;
matrixinvcoeffs[169]=x59;
matrixinvcoeffs[170]=r22;
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=x63;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=rxp2_2;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=0;
matrixinvcoeffs[183]=0;
matrixinvcoeffs[184]=r22;
matrixinvcoeffs[185]=0;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=x59;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=x63;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=rxp2_2;
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=x60;
matrixinvcoeffs[197]=x64;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=0;
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=0;
matrixinvcoeffs[203]=0;
matrixinvcoeffs[204]=rxp1_2;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=x55;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=x60;
matrixinvcoeffs[215]=x64;
matrixinvcoeffs[216]=0;
matrixinvcoeffs[217]=0;
matrixinvcoeffs[218]=0;
matrixinvcoeffs[219]=0;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=rxp1_2;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=x55;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=r20;
matrixinvcoeffs[229]=npx;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=0;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=0;
matrixinvcoeffs[235]=0;
matrixinvcoeffs[236]=x65;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=x56;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=r20;
matrixinvcoeffs[247]=npx;
matrixinvcoeffs[248]=0;
matrixinvcoeffs[249]=0;
matrixinvcoeffs[250]=0;
matrixinvcoeffs[251]=0;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=x65;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=x56;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_2=matrixinvcoeffs[36], gclwh4_4=matrixinvcoeffs[68], gclwh4_5=matrixinvcoeffs[84], gclwh4_10=matrixinvcoeffs[164], gclwh4_12=matrixinvcoeffs[196], gclwh5_0=matrixinvcoeffs[5], gclwh5_6=matrixinvcoeffs[101], gclwh5_7=matrixinvcoeffs[117], gclwh5_8=matrixinvcoeffs[133], gclwh5_13=matrixinvcoeffs[213], gclwh6_2=matrixinvcoeffs[38], gclwh6_3=matrixinvcoeffs[54], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_9=matrixinvcoeffs[150], gclwh6_10=matrixinvcoeffs[166], gclwh6_12=matrixinvcoeffs[198], gclwh6_14=matrixinvcoeffs[230], gclwh7_0=matrixinvcoeffs[7], gclwh7_1=matrixinvcoeffs[23], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_8=matrixinvcoeffs[135], gclwh7_11=matrixinvcoeffs[183], gclwh7_13=matrixinvcoeffs[215], gclwh7_15=matrixinvcoeffs[247], gclwh8_2=matrixinvcoeffs[40], gclwh8_3=matrixinvcoeffs[56], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_9=matrixinvcoeffs[152], gclwh8_10=matrixinvcoeffs[168], gclwh8_12=matrixinvcoeffs[200], gclwh8_14=matrixinvcoeffs[232], gclwh9_0=matrixinvcoeffs[9], gclwh9_1=matrixinvcoeffs[25], gclwh9_6=matrixinvcoeffs[105], gclwh9_8=matrixinvcoeffs[137], gclwh9_11=matrixinvcoeffs[185], gclwh9_13=matrixinvcoeffs[217], gclwh9_15=matrixinvcoeffs[249], gclwh10_3=matrixinvcoeffs[58], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_9=matrixinvcoeffs[154], gclwh10_10=matrixinvcoeffs[170], gclwh10_14=matrixinvcoeffs[234], gclwh11_0=matrixinvcoeffs[11], gclwh11_1=matrixinvcoeffs[27], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_8=matrixinvcoeffs[139], gclwh11_11=matrixinvcoeffs[187], gclwh11_15=matrixinvcoeffs[251], gclwh12_2=matrixinvcoeffs[44], gclwh12_4=matrixinvcoeffs[76], gclwh12_5=matrixinvcoeffs[92], gclwh12_10=matrixinvcoeffs[172], gclwh12_12=matrixinvcoeffs[204], gclwh13_0=matrixinvcoeffs[13], gclwh13_6=matrixinvcoeffs[109], gclwh13_7=matrixinvcoeffs[125], gclwh13_8=matrixinvcoeffs[141], gclwh13_13=matrixinvcoeffs[221], gclwh14_2=matrixinvcoeffs[46], gclwh14_4=matrixinvcoeffs[78], gclwh14_5=matrixinvcoeffs[94], gclwh14_10=matrixinvcoeffs[174], gclwh14_12=matrixinvcoeffs[206], gclwh15_0=matrixinvcoeffs[15], gclwh15_6=matrixinvcoeffs[111], gclwh15_7=matrixinvcoeffs[127], gclwh15_8=matrixinvcoeffs[143], gclwh15_13=matrixinvcoeffs[223];
IkReal op[72], zeror[48];
int numroots;;
IkReal x66=pz*pz;
IkReal x67=pp*pp;
IkReal x68=((0.1893)*pz);
IkReal x69=(gclwh6_14*r21);
IkReal x70=(npy*pz);
IkReal x71=(pp*r21);
IkReal x72=((2.0)*gclwh6_10);
IkReal x73=(gclwh7_13*rxp1_2);
IkReal x74=((3.60823078949063e-5)*r21);
IkReal x75=(npz*pz);
IkReal x76=((0.3786)*rxp0_2);
IkReal x77=(gclwh7_0*rxp1_2);
IkReal x78=((4.0)*gclwh13_8);
IkReal x79=((0.00076243651125)*rxp2_2);
IkReal x80=(pp*r20);
IkReal x81=(gclwh10_9*rxp2_2);
IkReal x82=(npx*pz);
IkReal x83=((0.000293394886875)*r20);
IkReal x84=(gclwh9_11*rxp0_2);
IkReal x85=((4.0)*gclwh4_10);
IkReal x86=(gclwh6_9*r21);
IkReal x87=(gclwh6_12*rxp1_2);
IkReal x88=((0.0089586225)*pz);
IkReal x89=(gclwh13_0*r21);
IkReal x90=((0.14850585)*rxp0_2);
IkReal x91=((0.08264838)*rxp0_2);
IkReal x92=(pp*r22);
IkReal x93=(gclwh6_2*rxp1_2);
IkReal x94=((0.00702803935125)*r21);
IkReal x95=(gclwh1_3*r20);
IkReal x96=(gclwh8_9*rxp0_2);
IkReal x97=((0.017917245)*r20);
IkReal x98=((2.0)*gclwh8_10);
IkReal x99=((0.2183)*gclwh7_15);
IkReal x100=((2.0)*pp);
IkReal x101=(gclwh12_12*r21);
IkReal x102=((2.0)*gclwh4_10);
IkReal x103=((0.017917245)*r22);
IkReal x104=((0.020662095)*rxp2_2);
IkReal x105=((0.2183)*gclwh9_15);
IkReal x106=(gclwh11_11*rxp2_2);
IkReal x107=((0.000977833645875)*r22);
IkReal x108=(gclwh5_0*r22);
IkReal x109=((0.000977833645875)*r21);
IkReal x110=(gclwh8_14*r20);
IkReal x111=((1.0)*pz);
IkReal x112=((0.160905)*rxp1_2);
IkReal x113=(gclwh9_0*rxp0_2);
IkReal x114=(gclwh8_9*r20);
IkReal x115=(gclwh12_2*r21);
IkReal x116=(gclwh6_10*r21);
IkReal x117=(gclwh4_12*r22);
IkReal x118=((0.000977833645875)*r20);
IkReal x119=(gclwh10_10*rxp2_2);
IkReal x120=((0.007321434238125)*r20);
IkReal x121=((2.0)*gclwh5_8);
IkReal x122=((0.14850585)*rxp2_2);
IkReal x123=(gclwh5_13*r22);
IkReal x124=(gclwh12_2*rxp1_2);
IkReal x125=(gclwh4_10*r22);
IkReal x126=((0.020662095)*rxp0_2);
IkReal x127=((0.08264838)*rxp1_2);
IkReal x128=((2.0)*gclwh13_8);
IkReal x129=((0.00195566729175)*r22);
IkReal x130=((0.00702803935125)*r20);
IkReal x131=(gclwh10_3*r22);
IkReal x132=(gclwh7_8*rxp1_2);
IkReal x133=((2.0)*gclwh10_10);
IkReal x134=(gclwh10_14*rxp2_2);
IkReal x135=((0.020662095)*rxp1_2);
IkReal x136=(gclwh9_1*rxp0_2);
IkReal x137=(gclwh6_9*rxp1_2);
IkReal x138=(gclwh8_2*rxp0_2);
IkReal x139=((4.0)*gclwh14_10);
IkReal x140=((0.00076243651125)*rxp1_2);
IkReal x141=(gclwh14_2*r20);
IkReal x142=((2.0)*gclwh14_10);
IkReal x143=((0.2183)*gclwh8_14);
IkReal x144=((0.007321434238125)*r21);
IkReal x145=((0.2183)*gclwh11_15);
IkReal x146=(gclwh11_0*rxp2_2);
IkReal x147=(gclwh7_1*rxp1_2);
IkReal x148=((0.14850585)*rxp1_2);
IkReal x149=((0.1893)*rxp0_2);
IkReal x150=((2.0)*gclwh15_8);
IkReal x151=(gclwh8_3*r20);
IkReal x152=(gclwh11_8*rxp2_2);
IkReal x153=((4.0)*gclwh12_10);
IkReal x154=(gclwh7_11*rxp1_2);
IkReal x155=(gclwh15_0*r20);
IkReal x156=((0.30941085)*rxp0_2);
IkReal x157=(gclwh4_2*r22);
IkReal x158=((0.007614829125)*r22);
IkReal x159=((0.3786)*rxp1_2);
IkReal x160=((0.000293394886875)*r21);
IkReal x161=(gclwh6_3*r21);
IkReal x162=((0.04132419)*rxp0_2);
IkReal x163=((4.0)*gclwh5_8);
IkReal x164=(gclwh15_13*r20);
IkReal x165=((0.1893)*pp);
IkReal x166=((0.7572)*rxp0_2);
IkReal x167=(gclwh14_2*rxp0_2);
IkReal x168=(gclwh4_2*rxp2_2);
IkReal x169=(gclwh13_13*r21);
IkReal x170=((2.0)*gclwh12_10);
IkReal x171=(gclwh14_10*r20);
IkReal x172=(gclwh5_8*r22);
IkReal x173=(gclwh12_10*r21);
IkReal x174=((0.0089586225)*r20);
IkReal x175=((0.2183)*gclwh10_14);
IkReal x176=((0.04132419)*rxp1_2);
IkReal x177=(gclwh13_8*r21);
IkReal x178=((0.3786)*rxp2_2);
IkReal x179=(gclwh11_15*rxp2_2);
IkReal x180=(gclwh3_3*r21);
IkReal x181=(gclwh8_3*rxp0_2);
IkReal x182=(gclwh6_3*rxp1_2);
IkReal x183=(gclwh14_12*r20);
IkReal x184=((4.0)*gclwh15_8);
IkReal x185=((0.12699240901125)*rxp2_2);
IkReal x186=(gclwh6_10*rxp1_2);
IkReal x187=((0.01239915)*rxp0_2);
IkReal x188=(gclwh10_9*r22);
IkReal x189=(gclwh6_5*x135);
IkReal x190=(gclwh14_5*x118);
IkReal x191=(gclwh6_14*x135);
IkReal x192=(gclwh12_5*x109);
IkReal x193=(gclwh10_5*x104);
IkReal x194=(gclwh4_5*x107);
IkReal x195=(gclwh8_14*x126);
IkReal x196=(gclwh8_5*x126);
IkReal x197=(gclwh10_14*x104);
IkReal x198=((0.0089586225)*x125);
IkReal x199=(gclwh8_10*x149);
IkReal x200=((0.1893)*x119);
IkReal x201=((0.0089586225)*x173);
IkReal x202=((0.0089586225)*x171);
IkReal x203=((0.1893)*x186);
IkReal x204=((0.0089586225)*x172);
IkReal x205=(gclwh9_8*x149);
IkReal x206=((0.1893)*x152);
IkReal x207=((0.0089586225)*x177);
IkReal x208=((0.1893)*x132);
IkReal x209=(gclwh15_8*x174);
IkReal x210=(gclwh7_7*x135);
IkReal x211=(gclwh9_15*x126);
IkReal x212=(gclwh15_7*x118);
IkReal x213=(gclwh11_15*x104);
IkReal x214=(gclwh13_7*x109);
IkReal x215=(gclwh7_15*x135);
IkReal x216=(gclwh11_7*x104);
IkReal x217=(gclwh5_7*x107);
IkReal x218=(gclwh4_5*x104);
IkReal x219=(gclwh12_5*x135);
IkReal x220=((0.000977833645875)*x69);
IkReal x221=(gclwh6_5*x109);
IkReal x222=(gclwh10_14*x107);
IkReal x223=(gclwh8_5*x118);
IkReal x224=((0.000977833645875)*x110);
IkReal x225=(gclwh10_5*x107);
IkReal x226=(gclwh14_5*x126);
IkReal x227=(gclwh14_10*x149);
IkReal x228=(gclwh8_10*x174);
IkReal x229=((0.0089586225)*gclwh10_10*r22);
IkReal x230=((0.1893)*gclwh12_10*rxp1_2);
IkReal x231=((0.1893)*gclwh4_10*rxp2_2);
IkReal x232=((0.0089586225)*x116);
IkReal x233=(gclwh11_15*x107);
IkReal x234=(gclwh9_15*x118);
IkReal x235=(gclwh13_7*x135);
IkReal x236=(gclwh7_7*x109);
IkReal x237=(gclwh5_7*x104);
IkReal x238=(gclwh7_15*x109);
IkReal x239=(gclwh15_7*x126);
IkReal x240=(gclwh11_7*x107);
IkReal x241=(gclwh6_10*x159);
IkReal x242=(gclwh14_10*x97);
IkReal x243=(gclwh8_10*x76);
IkReal x244=((0.017917245)*x173);
IkReal x245=((0.3786)*x119);
IkReal x246=(gclwh4_10*x103);
IkReal x247=(gclwh6_14*x176);
IkReal x248=((0.017917245)*x177);
IkReal x249=(gclwh9_8*x76);
IkReal x250=(gclwh5_8*x103);
IkReal x251=((0.3786)*x152);
IkReal x252=((0.3786)*x132);
IkReal x253=(gclwh15_8*x97);
IkReal x254=(gclwh7_15*x176);
IkReal x255=(rxp2_2*x165);
IkReal x256=((2.0)*x66);
IkReal x257=(r20*x67);
IkReal x258=((0.10915)*gclwh14_5*x80);
IkReal x259=((0.2183)*gclwh4_5*x75);
IkReal x260=((0.2183)*gclwh12_5*x70);
IkReal x261=((0.2183)*gclwh14_5*x82);
IkReal x262=((0.10915)*gclwh4_5*x92);
IkReal x263=((0.10915)*gclwh12_5*x71);
IkReal x264=(x138*x68);
IkReal x265=(x142*x82);
IkReal x266=(x157*x88);
IkReal x267=(x165*x182);
IkReal x268=(x115*x88);
IkReal x269=(gclwh4_2*pz*x92);
IkReal x270=(gclwh12_2*pz*x71);
IkReal x271=(x170*x70);
IkReal x272=(x68*x93);
IkReal x273=(gclwh8_3*pp*x149);
IkReal x274=(x141*x88);
IkReal x275=(gclwh10_3*x255);
IkReal x276=(x102*x75);
IkReal x277=(gclwh5_0*pz*x92);
IkReal x278=(x108*x88);
IkReal x279=(gclwh13_0*pz*x71);
IkReal x280=(x147*x165);
IkReal x281=(x88*x89);
IkReal x282=(x113*x68);
IkReal x283=(x146*x68);
IkReal x284=(x150*x82);
IkReal x285=(x68*x77);
IkReal x286=(gclwh11_1*x255);
IkReal x287=(x136*x165);
IkReal x288=(x128*x70);
IkReal x289=(x121*x75);
IkReal x290=(x155*x88);
IkReal x291=((0.2183)*gclwh5_7*x75);
IkReal x292=((0.2183)*gclwh13_7*x70);
IkReal x293=((0.10915)*gclwh15_7*x80);
IkReal x294=((0.2183)*gclwh15_7*x82);
IkReal x295=((0.10915)*gclwh13_7*x71);
IkReal x296=((0.10915)*gclwh5_7*x92);
IkReal x297=((0.10915)*pp*x69);
IkReal x298=((0.2183)*gclwh10_5*x75);
IkReal x299=((0.2183)*gclwh8_5*x82);
IkReal x300=(x175*x75);
IkReal x301=(x143*x82);
IkReal x302=((0.10915)*gclwh6_5*x71);
IkReal x303=((0.10915)*gclwh10_14*x92);
IkReal x304=((0.2183)*gclwh6_5*x70);
IkReal x305=((0.10915)*gclwh8_5*x80);
IkReal x306=((0.10915)*gclwh8_14*x80);
IkReal x307=((0.10915)*gclwh10_5*x92);
IkReal x308=((0.2183)*gclwh6_14*x70);
IkReal x309=(x70*x72);
IkReal x310=(x161*x67);
IkReal x311=(gclwh8_2*r20*x88);
IkReal x312=(x180*x67);
IkReal x313=(x67*x95);
IkReal x314=(gclwh3_2*r21*x88);
IkReal x315=(x167*x68);
IkReal x316=(gclwh1_2*r20*x88);
IkReal x317=(gclwh8_2*pz*x80);
IkReal x318=(x124*x68);
IkReal x319=(x82*x98);
IkReal x320=(x133*x75);
IkReal x321=(x168*x68);
IkReal x322=(gclwh6_2*r21*x88);
IkReal x323=((0.10915)*gclwh7_7*x71);
IkReal x324=((0.10915)*gclwh9_15*x80);
IkReal x325=((0.2183)*gclwh11_7*x75);
IkReal x326=(x70*x99);
IkReal x327=((0.10915)*gclwh11_15*x92);
IkReal x328=(x105*x82);
IkReal x329=((0.2183)*gclwh7_7*x70);
IkReal x330=(x145*x75);
IkReal x331=((0.10915)*gclwh7_15*x71);
IkReal x332=((0.10915)*gclwh11_7*x92);
IkReal x333=(x142*x80);
IkReal x334=(x153*x70);
IkReal x335=(x75*x85);
IkReal x336=(x170*x71);
IkReal x337=(x139*x82);
IkReal x338=(x102*x92);
IkReal x339=(x128*x71);
IkReal x340=(x184*x82);
IkReal x341=(x121*x92);
IkReal x342=(x70*x78);
IkReal x343=(x150*x80);
IkReal x344=(x163*x75);
IkReal x345=(gclwh14_2*npx*x256);
IkReal x346=(gclwh12_2*npy*x256);
IkReal x347=(gclwh14_2*x111*x80);
IkReal x348=(gclwh4_2*npz*x256);
IkReal x349=(gclwh15_0*npx*x256);
IkReal x350=(gclwh5_0*npz*x256);
IkReal x351=(gclwh13_0*npy*x256);
IkReal x352=(gclwh15_0*x111*x80);
IkReal x353=(gclwh8_3*x100*x82);
IkReal x354=(gclwh3_2*npy*x256);
IkReal x355=(gclwh6_2*npy*x256);
IkReal x356=(gclwh1_2*npx*x256);
IkReal x357=(gclwh10_3*x100*x75);
IkReal x358=((1.0)*x131*x67);
IkReal x359=(gclwh1_2*x111*x80);
IkReal x360=(gclwh6_3*x100*x70);
IkReal x361=(gclwh6_2*x111*x71);
IkReal x362=(gclwh3_3*x100*x70);
IkReal x363=((1.0)*x151*x67);
IkReal x364=(gclwh8_2*npx*x256);
IkReal x365=(gclwh1_3*x100*x82);
IkReal x366=(gclwh3_2*x111*x71);
IkReal x367=(((gclwh8_14*x162))+(((0.04132419)*x134)));
IkReal x368=(((gclwh9_15*x162))+(((0.04132419)*x179)));
IkReal x369=(x197+x195);
IkReal x370=(x211+x213);
IkReal x371=((((-1.0)*x367))+x247);
IkReal x372=((((-1.0)*x368))+x254);
IkReal x373=(x309+x229+x228+x227);
IkReal x374=(x332+x329+x239+x240);
IkReal x375=(x209+x208+x289+x288);
IkReal x376=(x203+x202+x276+x271);
IkReal x377=(x300+x301+x220+x297);
IkReal x378=(x331+x330+x328+x238);
IkReal x379=(x199+x198+x201+x200+x265);
IkReal x380=(x207+x206+x205+x204+x284);
IkReal x381=(x320+x319+x232+x230+x231);
IkReal x382=(x325+x323+x236+x237+x235);
IkReal x383=(x308+x306+x303+x222+x224);
IkReal x384=(x324+x326+x327+x233+x234);
IkReal x385=(x333+x335+x334+x242+x241);
IkReal x386=(x342+x343+x344+x252+x253);
IkReal x387=(x190+x189+x258+x259+x260);
IkReal x388=(x210+x212+x291+x292+x293);
IkReal x389=(x302+x218+x219+x221+x298+x299);
IkReal x390=(x307+x304+x305+x223+x225+x226);
IkReal x391=(x214+x216+x217+x294+x295+x296);
IkReal x392=(x338+x337+x336+x243+x246+x245+x244);
IkReal x393=(x339+x340+x341+x250+x251+x249+x248);
IkReal x394=(x193+x192+x196+x194+x261+x263+x262);
IkReal x395=(x345+x264+x267+x266+x269+x268+x270);
IkReal x396=(x351+x350+x352+x290+x287+x286+x285);
IkReal x397=(x346+x347+x348+x274+x275+x272+x273);
IkReal x398=(x349+x277+x278+x279+x283+x282+x281+x280);
IkReal x399=(x321+x322+x359+x358+x318+x360+x361+x362+x363+x364+x365+x366);
IkReal x400=(x353+x355+x354+x357+x356+x315+x314+x317+x316+x311+x310+x313+x312+x68);
op[0]=((0.178405675)+(((-1.0)*x394))+(((-1.0)*x191))+x387+x369);
op[1]=((((-0.81725)*gclwh4_2*x92))+(((-0.007321434238125)*x157))+(((-1.0)*x397))+(((0.154705425)*x93))+(((-1.0)*x379))+(((0.12699240901125)*x181))+(((0.81725)*gclwh14_2*x80))+((gclwh14_2*x120))+(((-1.0)*gclwh4_10*x92))+x376+x395+(((-0.81725)*gclwh12_2*x71))+((gclwh14_10*x80))+(((-0.154705425)*x138))+(((-0.12699240901125)*x182))+(((1.6345)*gclwh4_2*x75))+(((1.6345)*gclwh12_2*x70))+(((-1.6345)*gclwh14_2*x82))+((gclwh10_3*x185))+(((-0.007321434238125)*x115))+(((0.13678818)*x81))+(((0.13678818)*x96))+(((-0.13678818)*x137))+(((-1.0)*gclwh12_10*x71)));
op[2]=((((-0.00702803935125)*x117))+(((0.160905)*x81))+((gclwh14_12*x130))+(((-1.0)*x392))+(((0.7845)*gclwh14_12*x80))+(((-1.569)*gclwh14_12*x82))+(((-0.7845)*gclwh4_12*x92))+(((-1.0)*gclwh6_9*x112))+(((-0.7845)*gclwh12_12*x71))+(((-1.0)*gclwh12_12*x94))+x385+(((-1.0)*gclwh8_12*x90))+(((1.569)*gclwh12_12*x70))+(((0.14850585)*x87))+(((1.569)*gclwh4_12*x75))+(((0.160905)*x96)));
op[3]=x371;
op[4]=((0.007149325)+(((-1.0)*x394))+(((-1.0)*x369))+x191+x387);
op[5]=(((gclwh10_3*x79))+(((0.0655)*gclwh4_2*x75))+(((-1.0)*x397))+(((-1.0)*x376))+((gclwh12_10*x71))+(((-1.0)*gclwh14_10*x80))+(((-0.03275)*gclwh12_2*x71))+((gclwh4_10*x92))+x379+x395+(((-0.000293394886875)*x115))+(((0.00076243651125)*x181))+(((-0.03275)*gclwh4_2*x92))+(((0.03275)*gclwh14_2*x80))+((gclwh14_2*x83))+(((0.006199575)*x93))+(((-0.000293394886875)*x157))+(((-0.02411682)*x96))+(((-0.006199575)*x138))+(((0.02411682)*x137))+(((-0.02411682)*x81))+(((-1.0)*gclwh6_3*x140))+(((0.0655)*gclwh12_2*x70))+(((-0.0655)*gclwh14_2*x82)));
op[6]=((((-1.6345)*gclwh15_0*x82))+(((-1.0)*gclwh13_8*x71))+(((0.17262267)*x84))+(((-1.0)*x396))+(((0.154705425)*x77))+(((-0.17262267)*x154))+(((1.6345)*gclwh5_0*x75))+(((-0.154705425)*x146))+((gclwh15_0*x120))+(((0.12699240901125)*x136))+(((1.6345)*gclwh13_0*x70))+(((-0.81725)*gclwh5_0*x92))+(((-0.007321434238125)*x89))+(((-0.154705425)*x113))+x375+x398+(((-0.81725)*gclwh13_0*x71))+(((0.81725)*gclwh15_0*x80))+((gclwh11_1*x185))+(((-1.0)*gclwh5_8*x92))+(((-0.007321434238125)*x108))+((gclwh15_8*x80))+(((-1.0)*x380))+(((0.17262267)*x106))+(((-0.12699240901125)*x147)));
op[7]=((0.178405675)+(((-1.0)*x391))+(((-1.0)*x370))+x388+x215);
op[8]=x372;
op[9]=((((-0.160905)*x84))+(((-0.00702803935125)*x123))+(((-0.160905)*x106))+((gclwh7_11*x112))+(((-1.569)*gclwh15_13*x82))+(((0.14850585)*x73))+(((-0.7845)*gclwh5_13*x92))+(((-1.0)*gclwh9_13*x90))+(((-1.0)*gclwh13_13*x94))+(((1.569)*gclwh13_13*x70))+(((-0.7845)*gclwh13_13*x71))+x393+(((-1.0)*x386))+(((0.7845)*gclwh15_13*x80))+((gclwh15_13*x130))+(((1.569)*gclwh5_13*x75)));
op[10]=((((0.00076243651125)*x136))+(((-0.0655)*gclwh15_0*x82))+((gclwh11_1*x79))+(((-1.0)*x396))+(((0.01171767)*x106))+((gclwh15_0*x83))+(((-1.0)*x375))+(((0.01171767)*x84))+(((0.03275)*gclwh15_0*x80))+(((0.0655)*gclwh5_0*x75))+(((0.0655)*gclwh13_0*x70))+(((-0.03275)*gclwh13_0*x71))+(((-0.000293394886875)*x108))+x380+x398+(((-0.000293394886875)*x89))+(((-1.0)*gclwh7_1*x140))+((gclwh5_8*x92))+(((-0.01171767)*x154))+(((-0.006199575)*x113))+(((0.006199575)*x77))+(((-1.0)*gclwh15_8*x80))+(((-0.006199575)*x146))+((gclwh13_8*x71))+(((-0.03275)*gclwh5_0*x92)));
op[11]=((0.007149325)+(((-1.0)*x391))+x388+x370+(((-1.0)*x215)));
op[12]=((((-1.0)*x390))+(((-1.0)*x377))+x383+x389);
op[13]=((-0.65598384)+(((0.00600991575645741)*x95))+(((-0.81725)*gclwh8_2*x80))+(((-0.0064735006185)*x86))+(((1.341705325)*gclwh6_3*x70))+(((0.81725)*gclwh3_2*x71))+(((1.4452)*gclwh6_9*x70))+(((-0.66189404)*gclwh6_3*x71))+(((0.0064735006185)*x114))+(((-1.4452)*gclwh8_9*x82))+(((-1.0)*x399))+(((-1.0)*gclwh8_10*x80))+(((0.00600991575645741)*x151))+(((-0.679811285)*gclwh1_3*x80))+(((0.66189404)*gclwh10_3*x92))+(((0.81725)*gclwh6_2*x71))+(((0.00600991575645741)*x180))+(((-0.00600991575645741)*x161))+(((0.7226)*gclwh10_9*x92))+(((-1.6345)*gclwh6_2*x70))+(((-1.0)*gclwh8_2*x120))+(((-1.0)*x373))+(((0.154705425)*x168))+(((-1.6345)*gclwh3_2*x70))+(((-1.0)*gclwh10_10*x92))+(((-1.6345)*gclwh1_2*x82))+(((-0.154705425)*x167))+(((0.66189404)*gclwh8_3*x80))+(((1.341705325)*gclwh3_3*x70))+x381+(((1.341705325)*gclwh1_3*x82))+(((-1.341705325)*gclwh10_3*x75))+(((0.0064735006185)*x188))+(((1.6345)*gclwh8_2*x82))+((gclwh6_10*x71))+(((-1.0)*gclwh1_2*x120))+x400+(((0.154705425)*x124))+(((-1.341705325)*gclwh8_3*x82))+(((-1.4452)*gclwh10_9*x75))+(((-1.0)*gclwh3_2*x144))+(((-0.7226)*gclwh6_9*x71))+(((0.00600991575645741)*x131))+(((0.81725)*gclwh1_2*x80))+(((0.7226)*gclwh8_9*x80))+(((-0.679811285)*gclwh3_3*x71))+((gclwh6_2*x144)));
op[14]=((-0.02970243)+(((4.0)*gclwh8_10*x82))+(((-1.0)*gclwh14_12*x90))+(((-1.0)*gclwh8_10*x97))+(((4.0)*gclwh10_10*x75))+(((-0.85)*gclwh6_9*x71))+(((-1.0)*gclwh10_10*x103))+(((-1.0)*x80*x98))+(((-1.0)*gclwh8_12*x130))+(((0.007614829125)*x114))+(((-0.007614829125)*x86))+(((1.7)*gclwh6_9*x70))+(((-1.0)*gclwh14_10*x76))+(((0.7845)*gclwh6_12*x71))+(((0.85)*gclwh8_9*x80))+(((-1.0)*x133*x92))+((gclwh10_9*x158))+((gclwh4_10*x178))+(((-1.7)*gclwh8_9*x82))+((gclwh4_12*x122))+((gclwh6_12*x94))+(((-4.0)*gclwh6_10*x70))+(((-1.569)*gclwh6_12*x70))+(((1.569)*gclwh8_12*x82))+(((-0.7845)*gclwh8_12*x80))+(((0.017917245)*x116))+((gclwh12_10*x159))+((gclwh12_12*x148))+(((0.85)*gclwh10_9*x92))+(((-1.7)*gclwh10_9*x75))+((x71*x72)));
op[15]=((((-0.4366)*gclwh6_14*x70))+(((-0.00195566729175)*x110))+(((0.2183)*pp*x69))+(((-1.0)*x143*x80))+(((-1.0)*gclwh10_14*x129))+(((-1.0)*x175*x92))+(((0.4366)*gclwh10_14*x75))+(((0.00195566729175)*x69))+(((0.4366)*gclwh8_14*x82)));
op[16]=((((-1.0)*x390))+x389+x377+(((-1.0)*x383)));
op[17]=((-0.01084116)+(((-1.0)*gclwh6_10*x71))+(((-0.0011413285065)*x114))+((gclwh3_3*x74))+(((0.00493096)*gclwh6_3*x71))+(((-0.012986285)*gclwh3_3*x71))+(((-0.006199575)*x167))+((gclwh6_2*x160))+(((-0.008055325)*gclwh8_3*x82))+(((0.008055325)*gclwh3_3*x70))+(((-0.0011413285065)*x188))+(((3.60823078949063e-5)*x151))+(((-1.0)*x399))+(((-0.0655)*gclwh3_2*x70))+(((-0.00493096)*gclwh8_3*x80))+(((0.2548)*gclwh10_9*x75))+(((0.0011413285065)*x86))+(((-0.03275)*gclwh8_2*x80))+(((-1.0)*gclwh8_2*x83))+((gclwh8_10*x80))+(((0.03275)*gclwh3_2*x71))+(((-1.0)*gclwh1_2*x83))+(((3.60823078949063e-5)*x95))+(((0.03275)*gclwh6_2*x71))+(((0.006199575)*x168))+(((-0.008055325)*gclwh10_3*x75))+x373+(((-0.012986285)*gclwh1_3*x80))+(((0.1274)*gclwh6_9*x71))+(((-0.1274)*gclwh10_9*x92))+(((-0.00493096)*gclwh10_3*x92))+(((0.2548)*gclwh8_9*x82))+(((-1.0)*gclwh3_2*x160))+x400+(((-1.0)*gclwh6_3*x74))+(((-0.0655)*gclwh1_2*x82))+(((0.0655)*gclwh8_2*x82))+(((-0.0655)*gclwh6_2*x70))+(((0.006199575)*x124))+((gclwh10_10*x92))+(((-1.0)*x381))+(((3.60823078949063e-5)*x131))+(((-0.1274)*gclwh8_9*x80))+(((-0.2548)*gclwh6_9*x70))+(((0.03275)*gclwh1_2*x80))+(((0.008055325)*gclwh1_3*x82))+(((0.008055325)*gclwh6_3*x70)));
op[18]=((-0.65598384)+(((2.0)*gclwh2_1*npy*pp*pz))+(((0.66189404)*gclwh11_1*pp*r22))+(((-1.341705325)*gclwh11_1*npz*pz))+(((2.0)*gclwh11_8*npz*pz))+(((2.0)*gclwh0_1*npx*pp*pz))+(((-1.341705325)*gclwh2_1*npy*pz))+(((0.9119)*gclwh11_11*pp*r22))+(((0.00600991575645741)*gclwh11_1*r22))+(((0.154705425)*gclwh5_0*rxp2_2))+(((1.6345)*gclwh11_0*npz*pz))+(((-1.0)*gclwh2_1*r21*(pp*pp)))+(((0.9119)*gclwh9_11*pp*r20))+(((0.00600991575645741)*gclwh9_1*r20))+(((0.66189404)*gclwh9_1*pp*r20))+(((0.00816936785775)*gclwh11_11*r22))+(((-0.1893)*pz))+((gclwh7_8*pp*r21))+((gclwh2_0*pp*pz*r21))+((gclwh0_0*pp*pz*r20))+(((0.679811285)*gclwh2_1*pp*r21))+(((0.0089586225)*gclwh7_8*r21))+(((0.0089586225)*gclwh11_0*pz*r22))+((gclwh7_1*r21*(pp*pp)))+(((-0.81725)*gclwh2_0*pp*r21))+(((0.0089586225)*gclwh9_0*pz*r20))+(((0.1893)*gclwh13_8*rxp1_2))+(((0.007321434238125)*gclwh7_0*r21))+(((-0.007321434238125)*gclwh11_0*r22))+(((-0.00600991575645741)*gclwh0_1*r20))+(((0.154705425)*gclwh13_0*rxp1_2))+(((-1.0)*gclwh11_8*pp*r22))+(((2.0)*gclwh11_1*npz*pp*pz))+(((1.341705325)*gclwh7_1*npy*pz))+(((-0.0089586225)*gclwh11_8*r22))+(((1.6345)*gclwh2_0*npy*pz))+(((-0.1893)*gclwh13_0*pz*rxp1_2))+(((-0.0089586225)*gclwh9_8*r20))+(((-0.0089586225)*gclwh2_0*pz*r21))+(((-1.0)*gclwh7_0*pp*pz*r21))+(((0.81725)*gclwh7_0*pp*r21))+(((-0.0089586225)*gclwh0_0*pz*r20))+(((-2.0)*gclwh2_0*npy*(pz*pz)))+(((-1.341705325)*gclwh0_1*npx*pz))+(((0.1893)*gclwh15_0*pz*rxp0_2))+(((0.00816936785775)*gclwh9_11*r20))+(((2.0)*gclwh9_1*npx*pp*pz))+(((-0.9119)*gclwh7_11*pp*r21))+(((-0.81725)*gclwh11_0*pp*r22))+(((0.007321434238125)*gclwh0_0*r20))+(((-0.007321434238125)*gclwh9_0*r20))+(((-2.0)*gclwh9_0*npx*(pz*pz)))+(((-0.00816936785775)*gclwh7_11*r21))+(((0.1893)*gclwh5_8*rxp2_2))+(((-0.81725)*gclwh9_0*pp*r20))+((gclwh11_0*pp*pz*r22))+(((0.007321434238125)*gclwh2_0*r21))+(((1.6345)*gclwh9_0*npx*pz))+(((-0.00600991575645741)*gclwh7_1*r21))+(((-1.0)*gclwh9_1*r20*(pp*pp)))+(((-1.341705325)*gclwh9_1*npx*pz))+(((-0.81725)*gclwh0_0*pp*r20))+(((-2.0)*gclwh0_0*npx*(pz*pz)))+(((-2.0)*gclwh11_0*npz*(pz*pz)))+(((-1.6345)*gclwh7_0*npy*pz))+(((-0.66189404)*gclwh7_1*pp*r21))+(((2.0)*gclwh9_8*npx*pz))+(((-0.00600991575645741)*gclwh2_1*r21))+(((1.6345)*gclwh0_0*npx*pz))+(((-1.0)*gclwh9_8*pp*r20))+(((0.679811285)*gclwh0_1*pp*r20))+(((-0.0089586225)*gclwh7_0*pz*r21))+(((-2.0)*gclwh7_1*npy*pp*pz))+(((-2.0)*gclwh7_8*npy*pz))+(((1.8238)*gclwh7_11*npy*pz))+(((-1.0)*gclwh11_1*r22*(pp*pp)))+(((-1.8238)*gclwh9_11*npx*pz))+(((2.0)*gclwh7_0*npy*(pz*pz)))+((gclwh9_0*pp*pz*r20))+(((-0.1893)*gclwh5_0*pz*rxp2_2))+(((-0.1893)*gclwh15_8*rxp0_2))+(((-1.0)*gclwh0_1*r20*(pp*pp)))+(((-1.8238)*gclwh11_11*npz*pz))+(((-0.154705425)*gclwh15_0*rxp0_2)));
op[19]=((((-1.0)*x374))+x382+x378+(((-1.0)*x384)));
op[20]=(((x71*x99))+(((-1.0)*gclwh11_15*x129))+(((0.4366)*gclwh9_15*x82))+(((0.4366)*gclwh11_15*x75))+(((-1.0)*x105*x80))+(((-0.4366)*gclwh7_15*x70))+(((0.00195566729175)*gclwh7_15*r21))+(((-1.0)*x145*x92))+(((-0.00195566729175)*gclwh9_15*r20)));
op[21]=((0.02970243)+(((-1.0)*gclwh13_8*x159))+(((-1.7)*gclwh7_11*x70))+(((-2.0)*gclwh7_8*x71))+(((-4.0)*gclwh11_8*x75))+(((-4.0)*gclwh9_8*x82))+((gclwh11_8*x103))+((gclwh13_13*x148))+((gclwh5_13*x122))+(((2.0)*gclwh11_8*x92))+(((-0.017917245)*gclwh7_8*r21))+(((4.0)*gclwh7_8*x70))+(((-0.007614829125)*gclwh9_11*r20))+(((-1.0)*gclwh15_13*x90))+(((-1.569)*gclwh7_13*x70))+(((-0.7845)*gclwh9_13*x80))+(((-1.0)*gclwh9_13*x130))+(((-0.85)*gclwh11_11*x92))+(((-0.85)*gclwh9_11*x80))+((gclwh7_13*x94))+((gclwh15_8*x76))+((gclwh9_8*x97))+(((0.85)*gclwh7_11*x71))+(((1.569)*gclwh9_13*x82))+(((-1.0)*gclwh11_11*x158))+(((0.7845)*gclwh7_13*x71))+(((2.0)*gclwh9_8*x80))+(((1.7)*gclwh11_11*x75))+(((-1.0)*gclwh5_8*x178))+(((1.7)*gclwh9_11*x82))+(((0.007614829125)*gclwh7_11*r21)));
op[22]=((-0.01084116)+(((0.00055453873275)*gclwh11_11*r22))+(((2.0)*gclwh2_1*npy*pp*pz))+(((0.0619)*gclwh9_11*pp*r20))+(((-0.008055325)*gclwh0_1*npx*pz))+(((2.0)*gclwh0_1*npx*pp*pz))+(((-0.03275)*gclwh2_0*pp*r21))+(((-0.000293394886875)*gclwh9_0*r20))+((gclwh11_8*pp*r22))+(((-0.1893)*gclwh5_8*rxp2_2))+(((-0.00055453873275)*gclwh7_11*r21))+(((-1.0)*gclwh2_1*r21*(pp*pp)))+((gclwh9_8*pp*r20))+(((0.0655)*gclwh9_0*npx*pz))+(((-0.006199575)*gclwh15_0*rxp0_2))+(((-0.0619)*gclwh7_11*pp*r21))+(((-0.1893)*pz))+((gclwh2_0*pp*pz*r21))+((gclwh0_0*pp*pz*r20))+(((2.0)*gclwh7_8*npy*pz))+(((0.0089586225)*gclwh11_0*pz*r22))+((gclwh7_1*r21*(pp*pp)))+(((0.0089586225)*gclwh9_0*pz*r20))+(((0.006199575)*gclwh13_0*rxp1_2))+(((-0.03275)*gclwh0_0*pp*r20))+(((2.0)*gclwh11_1*npz*pp*pz))+(((0.0655)*gclwh0_0*npx*pz))+(((-0.000293394886875)*gclwh11_0*r22))+(((-0.1893)*gclwh13_0*pz*rxp1_2))+(((-0.0089586225)*gclwh2_0*pz*r21))+(((-1.0)*gclwh7_0*pp*pz*r21))+(((3.60823078949063e-5)*gclwh11_1*r22))+(((-1.0)*gclwh7_8*pp*r21))+(((-0.1238)*gclwh11_11*npz*pz))+(((-0.0089586225)*gclwh0_0*pz*r20))+(((-2.0)*gclwh2_0*npy*(pz*pz)))+(((0.1893)*gclwh15_0*pz*rxp0_2))+(((2.0)*gclwh9_1*npx*pp*pz))+(((-0.008055325)*gclwh9_1*npx*pz))+(((0.0655)*gclwh2_0*npy*pz))+(((-0.008055325)*gclwh2_1*npy*pz))+(((0.1893)*gclwh15_8*rxp0_2))+(((-2.0)*gclwh9_0*npx*(pz*pz)))+(((0.000293394886875)*gclwh2_0*r21))+(((0.012986285)*gclwh0_1*pp*r20))+(((-0.00493096)*gclwh11_1*pp*r22))+(((-3.60823078949063e-5)*gclwh2_1*r21))+((gclwh11_0*pp*pz*r22))+(((0.000293394886875)*gclwh7_0*r21))+(((0.000293394886875)*gclwh0_0*r20))+(((0.0089586225)*gclwh9_8*r20))+(((-0.0655)*gclwh7_0*npy*pz))+(((-1.0)*gclwh9_1*r20*(pp*pp)))+(((-2.0)*gclwh0_0*npx*(pz*pz)))+(((-0.1238)*gclwh9_11*npx*pz))+(((-0.03275)*gclwh9_0*pp*r20))+(((-2.0)*gclwh11_0*npz*(pz*pz)))+(((-0.008055325)*gclwh11_1*npz*pz))+(((-3.60823078949063e-5)*gclwh7_1*r21))+(((-2.0)*gclwh11_8*npz*pz))+(((0.006199575)*gclwh5_0*rxp2_2))+(((0.03275)*gclwh7_0*pp*r21))+(((-3.60823078949063e-5)*gclwh0_1*r20))+(((0.0089586225)*gclwh11_8*r22))+(((-0.0089586225)*gclwh7_0*pz*r21))+(((-0.03275)*gclwh11_0*pp*r22))+(((-2.0)*gclwh7_1*npy*pp*pz))+(((0.00493096)*gclwh7_1*pp*r21))+(((0.012986285)*gclwh2_1*pp*r21))+(((0.00055453873275)*gclwh9_11*r20))+(((3.60823078949063e-5)*gclwh9_1*r20))+(((-2.0)*gclwh9_8*npx*pz))+(((0.1238)*gclwh7_11*npy*pz))+(((-0.1893)*gclwh13_8*rxp1_2))+(((-1.0)*gclwh11_1*r22*(pp*pp)))+(((0.0655)*gclwh11_0*npz*pz))+(((-0.0089586225)*gclwh7_8*r21))+(((2.0)*gclwh7_0*npy*(pz*pz)))+(((0.008055325)*gclwh7_1*npy*pz))+((gclwh9_0*pp*pz*r20))+(((-0.1893)*gclwh5_0*pz*rxp2_2))+(((-0.00493096)*gclwh9_1*pp*r20))+(((0.0619)*gclwh11_11*pp*r22))+(((-1.0)*gclwh0_1*r20*(pp*pp))));
op[23]=((((-1.0)*x374))+(((-1.0)*x378))+x384+x382);
op[24]=((((-1.0)*x392))+(((0.01464286847625)*x183))+(((-3.269)*gclwh14_12*x82))+(((-0.01464286847625)*x101))+(((-0.01464286847625)*x117))+(((1.6345)*gclwh14_12*x80))+x385+(((0.30941085)*x87))+(((3.269)*gclwh12_12*x70))+(((-1.0)*gclwh8_12*x156))+(((-1.6345)*gclwh12_12*x71))+(((3.269)*gclwh4_12*x75))+(((-1.6345)*gclwh4_12*x92)));
op[25]=x371;
op[26]=((-0.3425127)+((gclwh6_14*x127))+(((-1.0)*gclwh8_14*x91))+(((-0.08264838)*x134)));
op[27]=((((0.03583449)*x173))+(((1.569)*gclwh4_2*x92))+(((-0.2970117)*x93))+(((0.0140560787025)*x115))+(((-3.138)*gclwh4_2*x75))+((x153*x71))+(((0.2970117)*x138))+(((-3.138)*gclwh12_2*x70))+((gclwh8_10*x166))+((x85*x92))+(((1.569)*gclwh12_2*x71))+(((-1.0)*x139*x80))+(((8.0)*gclwh14_10*x82))+(((0.03583449)*x125))+(((-0.03583449)*x171))+(((-8.0)*gclwh4_10*x75))+(((3.138)*gclwh14_2*x82))+(((-1.569)*gclwh14_2*x80))+(((-8.0)*gclwh12_10*x70))+(((-0.7572)*x186))+(((-0.0140560787025)*x141))+(((0.7572)*x119))+(((0.0140560787025)*x157)));
op[28]=((((0.131)*gclwh4_12*x75))+(((-0.00058678977375)*x117))+(((-0.0655)*gclwh12_12*x71))+(((-0.00058678977375)*x101))+(((0.131)*gclwh12_12*x70))+(((0.00058678977375)*x183))+(((-0.131)*gclwh14_12*x82))+(((-0.0655)*gclwh4_12*x92))+(((0.01239915)*x87))+x392+(((0.0655)*gclwh14_12*x80))+(((-1.0)*x385))+(((-1.0)*gclwh8_12*x187)));
op[29]=(x367+(((-1.0)*x247)));
op[30]=x372;
op[31]=((((3.269)*gclwh5_13*x75))+(((0.30941085)*x73))+(((-1.6345)*gclwh13_13*x71))+(((3.269)*gclwh13_13*x70))+(((-1.0)*gclwh9_13*x156))+(((1.6345)*gclwh15_13*x80))+(((0.01464286847625)*x164))+(((-1.6345)*gclwh5_13*x92))+x393+(((-0.01464286847625)*x123))+(((-1.0)*x386))+(((-3.269)*gclwh15_13*x82))+(((-0.01464286847625)*x169)));
op[32]=((((8.0)*gclwh15_8*x82))+(((0.03583449)*x172))+(((0.03583449)*x177))+(((-3.138)*gclwh13_0*x70))+(((0.2970117)*x113))+(((-0.2970117)*x77))+(((3.138)*gclwh15_0*x82))+((x163*x92))+(((-1.569)*gclwh15_0*x80))+(((0.7572)*x152))+((gclwh9_8*x166))+(((1.569)*gclwh5_0*x92))+(((0.0140560787025)*x108))+(((0.2970117)*x146))+(((1.569)*gclwh13_0*x71))+(((-1.0)*x184*x80))+(((-3.138)*gclwh5_0*x75))+(((-0.7572)*x132))+(((-0.03583449)*gclwh15_8*r20))+(((0.0140560787025)*x89))+(((-8.0)*gclwh5_8*x75))+(((-8.0)*gclwh13_8*x70))+(((-0.0140560787025)*x155))+((x71*x78)));
op[33]=((-0.3425127)+(((-1.0)*gclwh7_15*x127))+((gclwh9_15*x91))+(((0.08264838)*x179)));
op[34]=(x368+(((-1.0)*x254)));
op[35]=((((-0.00058678977375)*x169))+(((-0.131)*gclwh15_13*x82))+(((-1.0)*x393))+(((0.00058678977375)*x164))+(((-0.0655)*gclwh13_13*x71))+(((0.0655)*gclwh15_13*x80))+(((-0.00058678977375)*x123))+(((0.131)*gclwh5_13*x75))+(((-1.0)*gclwh9_13*x187))+x386+(((0.01239915)*x73))+(((0.131)*gclwh13_13*x70))+(((-0.0655)*gclwh5_13*x92)));
IkReal x401=pz*pz;
IkReal x402=pp*pp;
IkReal x403=((0.1893)*pz);
IkReal x404=(gclwh6_14*r21);
IkReal x405=(gclwh7_15*rxp1_2);
IkReal x406=(gclwh11_8*r22);
IkReal x407=(npy*pz);
IkReal x408=(pp*r21);
IkReal x409=((2.0)*gclwh6_10);
IkReal x410=((3.60823078949063e-5)*r21);
IkReal x411=(npz*pz);
IkReal x412=((0.4366)*gclwh10_14);
IkReal x413=(gclwh13_13*rxp1_2);
IkReal x414=((0.3786)*rxp0_2);
IkReal x415=((0.2970117)*rxp1_2);
IkReal x416=((0.00076243651125)*rxp2_2);
IkReal x417=(gclwh14_12*rxp0_2);
IkReal x418=(pp*r20);
IkReal x419=(gclwh10_9*rxp2_2);
IkReal x420=(npx*pz);
IkReal x421=((0.000293394886875)*r20);
IkReal x422=(gclwh9_11*rxp0_2);
IkReal x423=((0.7572)*rxp0_2);
IkReal x424=(gclwh6_9*r21);
IkReal x425=((0.14850585)*rxp2_2);
IkReal x426=((0.0089586225)*pz);
IkReal x427=(gclwh13_0*r21);
IkReal x428=((0.14850585)*rxp0_2);
IkReal x429=(gclwh10_3*r22);
IkReal x430=(gclwh7_8*r21);
IkReal x431=((4.0)*gclwh8_10);
IkReal x432=(gclwh8_3*r20);
IkReal x433=((0.00702803935125)*r21);
IkReal x434=(gclwh1_3*r20);
IkReal x435=(gclwh8_9*rxp0_2);
IkReal x436=(pp*r22);
IkReal x437=((0.006199575)*rxp1_2);
IkReal x438=(gclwh11_8*rxp2_2);
IkReal x439=(gclwh8_10*r20);
IkReal x440=((2.0)*gclwh8_10);
IkReal x441=((0.2183)*gclwh7_15);
IkReal x442=((2.0)*pp);
IkReal x443=((2.0)*gclwh4_10);
IkReal x444=((0.4366)*gclwh7_15);
IkReal x445=(gclwh10_10*r22);
IkReal x446=((0.020662095)*rxp2_2);
IkReal x447=(gclwh11_11*rxp2_2);
IkReal x448=((0.000977833645875)*r22);
IkReal x449=(gclwh5_0*r22);
IkReal x450=((4.0)*gclwh9_8);
IkReal x451=((0.000977833645875)*r21);
IkReal x452=((1.0)*pz);
IkReal x453=((0.2183)*gclwh9_15);
IkReal x454=((0.160905)*rxp1_2);
IkReal x455=(gclwh9_0*rxp0_2);
IkReal x456=((0.3786)*rxp1_2);
IkReal x457=((0.0140560787025)*r20);
IkReal x458=(gclwh8_9*r20);
IkReal x459=(gclwh6_10*r21);
IkReal x460=((0.000977833645875)*r20);
IkReal x461=((0.007321434238125)*r20);
IkReal x462=((2.0)*gclwh5_8);
IkReal x463=((0.0039113345835)*r20);
IkReal x464=((0.0089586225)*r22);
IkReal x465=((0.020662095)*rxp0_2);
IkReal x466=(gclwh11_15*r22);
IkReal x467=((2.0)*gclwh13_8);
IkReal x468=(gclwh4_12*rxp2_2);
IkReal x469=((0.00702803935125)*r20);
IkReal x470=((2.0)*gclwh15_8);
IkReal x471=((0.0140560787025)*r21);
IkReal x472=((0.017917245)*r20);
IkReal x473=((2.0)*gclwh10_10);
IkReal x474=((0.7572)*rxp1_2);
IkReal x475=(gclwh6_14*rxp1_2);
IkReal x476=(gclwh9_1*rxp0_2);
IkReal x477=(gclwh6_9*rxp1_2);
IkReal x478=(gclwh8_2*rxp0_2);
IkReal x479=((0.00076243651125)*rxp1_2);
IkReal x480=(gclwh7_13*r21);
IkReal x481=((0.14850585)*rxp1_2);
IkReal x482=((2.0)*gclwh14_10);
IkReal x483=((0.2183)*gclwh8_14);
IkReal x484=((0.007321434238125)*r21);
IkReal x485=(gclwh4_10*rxp2_2);
IkReal x486=((0.2183)*gclwh11_15);
IkReal x487=((0.000293394886875)*r21);
IkReal x488=(gclwh7_1*rxp1_2);
IkReal x489=((0.1893)*rxp0_2);
IkReal x490=((4.0)*gclwh10_10);
IkReal x491=(gclwh10_10*rxp2_2);
IkReal x492=(gclwh10_14*r22);
IkReal x493=((0.4366)*gclwh9_15);
IkReal x494=((0.2970117)*rxp2_2);
IkReal x495=(gclwh7_11*rxp1_2);
IkReal x496=((0.4366)*gclwh11_15);
IkReal x497=((0.006199575)*rxp2_2);
IkReal x498=(gclwh4_2*r22);
IkReal x499=((0.007614829125)*r22);
IkReal x500=((4.0)*gclwh7_8);
IkReal x501=(gclwh6_3*r21);
IkReal x502=(gclwh5_13*rxp2_2);
IkReal x503=(gclwh15_13*rxp0_2);
IkReal x504=((0.04132419)*rxp0_2);
IkReal x505=((0.04132419)*rxp2_2);
IkReal x506=((0.01464286847625)*r20);
IkReal x507=((4.0)*gclwh6_10);
IkReal x508=((0.1893)*pp);
IkReal x509=(gclwh7_15*r21);
IkReal x510=(gclwh6_12*r21);
IkReal x511=((0.2970117)*rxp0_2);
IkReal x512=(gclwh4_2*rxp2_2);
IkReal x513=((2.0)*gclwh12_10);
IkReal x514=(gclwh12_10*r21);
IkReal x515=((0.2183)*gclwh10_14);
IkReal x516=(gclwh12_12*rxp1_2);
IkReal x517=((0.1893)*rxp1_2);
IkReal x518=((0.154705425)*rxp1_2);
IkReal x519=(gclwh13_8*r21);
IkReal x520=(gclwh5_8*rxp2_2);
IkReal x521=(gclwh3_3*r21);
IkReal x522=((0.017917245)*r22);
IkReal x523=(gclwh8_3*rxp0_2);
IkReal x524=(gclwh6_3*rxp1_2);
IkReal x525=((0.4366)*gclwh8_14);
IkReal x526=((0.12699240901125)*rxp2_2);
IkReal x527=(gclwh14_2*rxp0_2);
IkReal x528=((0.020662095)*rxp1_2);
IkReal x529=(gclwh11_0*rxp2_2);
IkReal x530=((0.0089586225)*r20);
IkReal x531=(gclwh10_9*r22);
IkReal x532=((0.00058678977375)*r20);
IkReal x533=((0.00702803935125)*r22);
IkReal x534=((0.00195566729175)*r20);
IkReal x535=((0.017917245)*x445);
IkReal x536=(gclwh14_10*x414);
IkReal x537=((0.017917245)*x439);
IkReal x538=(gclwh12_10*x456);
IkReal x539=((0.017917245)*x459);
IkReal x540=((0.3786)*x485);
IkReal x541=(gclwh13_8*x456);
IkReal x542=((0.3786)*x520);
IkReal x543=((0.017917245)*x430);
IkReal x544=(gclwh9_8*x472);
IkReal x545=((0.017917245)*x406);
IkReal x546=(gclwh15_8*x414);
IkReal x547=(gclwh6_5*x528);
IkReal x548=(gclwh8_14*x465);
IkReal x549=(gclwh14_5*x460);
IkReal x550=(gclwh10_14*x446);
IkReal x551=(gclwh12_5*x451);
IkReal x552=(gclwh10_5*x446);
IkReal x553=(gclwh4_5*x448);
IkReal x554=(gclwh8_5*x465);
IkReal x555=((0.020662095)*x475);
IkReal x556=(gclwh14_10*x530);
IkReal x557=(gclwh6_10*x517);
IkReal x558=(gclwh4_10*x464);
IkReal x559=(gclwh8_10*x489);
IkReal x560=((0.1893)*x491);
IkReal x561=((0.0089586225)*x514);
IkReal x562=(gclwh7_8*x517);
IkReal x563=(gclwh15_8*x530);
IkReal x564=(gclwh5_8*x464);
IkReal x565=(gclwh9_8*x489);
IkReal x566=((0.1893)*x438);
IkReal x567=((0.0089586225)*x519);
IkReal x568=(gclwh7_7*x528);
IkReal x569=((0.020662095)*x405);
IkReal x570=(gclwh15_7*x460);
IkReal x571=(gclwh13_7*x451);
IkReal x572=(gclwh9_15*x465);
IkReal x573=(gclwh11_15*x446);
IkReal x574=(gclwh11_7*x446);
IkReal x575=(gclwh5_7*x448);
IkReal x576=(gclwh10_14*x448);
IkReal x577=(gclwh4_5*x446);
IkReal x578=(gclwh8_14*x460);
IkReal x579=(gclwh12_5*x528);
IkReal x580=(gclwh6_5*x451);
IkReal x581=(gclwh8_5*x460);
IkReal x582=(gclwh10_5*x448);
IkReal x583=((0.000977833645875)*x404);
IkReal x584=(gclwh14_5*x465);
IkReal x585=(gclwh12_10*x517);
IkReal x586=((0.1893)*x485);
IkReal x587=((0.0089586225)*x459);
IkReal x588=(gclwh14_10*x489);
IkReal x589=((0.0089586225)*x439);
IkReal x590=((0.0089586225)*x445);
IkReal x591=(rxp2_2*x508);
IkReal x592=(rxp1_2*x403);
IkReal x593=((2.0)*x401);
IkReal x594=((1.0)*x402);
IkReal x595=(x407*x507);
IkReal x596=(x418*x440);
IkReal x597=(x436*x473);
IkReal x598=(x408*x409);
IkReal x599=(x411*x490);
IkReal x600=(x420*x431);
IkReal x601=(x420*x450);
IkReal x602=((4.0)*gclwh11_8*x411);
IkReal x603=((2.0)*gclwh7_8*x408);
IkReal x604=(x407*x500);
IkReal x605=((2.0)*gclwh9_8*x418);
IkReal x606=(x406*x442);
IkReal x607=((0.10915)*gclwh14_5*x418);
IkReal x608=((0.2183)*gclwh4_5*x411);
IkReal x609=((0.2183)*gclwh12_5*x407);
IkReal x610=((0.2183)*gclwh14_5*x420);
IkReal x611=((0.10915)*gclwh4_5*x436);
IkReal x612=((0.10915)*gclwh12_5*x408);
IkReal x613=(x407*x513);
IkReal x614=(x403*x478);
IkReal x615=(x426*x498);
IkReal x616=(x508*x524);
IkReal x617=(gclwh12_2*r21*x426);
IkReal x618=(gclwh4_2*pz*x436);
IkReal x619=(x411*x443);
IkReal x620=(gclwh12_2*pz*x408);
IkReal x621=(x420*x482);
IkReal x622=(gclwh6_2*x592);
IkReal x623=(gclwh8_3*pp*x489);
IkReal x624=(gclwh14_2*r20*x426);
IkReal x625=(gclwh10_3*x591);
IkReal x626=(x407*x467);
IkReal x627=(gclwh5_0*pz*x436);
IkReal x628=(x426*x449);
IkReal x629=(gclwh13_0*pz*x408);
IkReal x630=(x488*x508);
IkReal x631=(x411*x462);
IkReal x632=(x426*x427);
IkReal x633=(x403*x455);
IkReal x634=(x403*x529);
IkReal x635=(gclwh7_0*x592);
IkReal x636=(gclwh11_1*x591);
IkReal x637=(x476*x508);
IkReal x638=(gclwh15_0*r20*x426);
IkReal x639=(x420*x470);
IkReal x640=((0.2183)*gclwh5_7*x411);
IkReal x641=((0.2183)*gclwh13_7*x407);
IkReal x642=((0.10915)*gclwh15_7*x418);
IkReal x643=((0.2183)*gclwh15_7*x420);
IkReal x644=((0.10915)*gclwh13_7*x408);
IkReal x645=((0.10915)*gclwh5_7*x436);
IkReal x646=((0.10915)*gclwh10_14*x436);
IkReal x647=((0.10915)*gclwh8_14*x418);
IkReal x648=((0.2183)*gclwh10_5*x411);
IkReal x649=((0.2183)*gclwh8_5*x420);
IkReal x650=((0.10915)*gclwh6_5*x408);
IkReal x651=((0.2183)*gclwh6_14*x407);
IkReal x652=((0.2183)*gclwh6_5*x407);
IkReal x653=((0.10915)*gclwh8_5*x418);
IkReal x654=((0.10915)*pp*x404);
IkReal x655=((0.10915)*gclwh10_5*x436);
IkReal x656=(x411*x515);
IkReal x657=(x420*x483);
IkReal x658=(x402*x501);
IkReal x659=(x420*x440);
IkReal x660=(x411*x473);
IkReal x661=(gclwh8_2*r20*x426);
IkReal x662=(x402*x521);
IkReal x663=(x402*x434);
IkReal x664=(gclwh3_2*r21*x426);
IkReal x665=(x403*x527);
IkReal x666=(gclwh1_2*r20*x426);
IkReal x667=(gclwh8_2*pz*x418);
IkReal x668=(gclwh12_2*x592);
IkReal x669=(x407*x409);
IkReal x670=(x403*x512);
IkReal x671=(gclwh6_2*r21*x426);
IkReal x672=(gclwh14_2*npx*x593);
IkReal x673=(gclwh12_2*npy*x593);
IkReal x674=(gclwh14_2*x418*x452);
IkReal x675=(gclwh4_2*npz*x593);
IkReal x676=(gclwh15_0*npx*x593);
IkReal x677=(gclwh5_0*npz*x593);
IkReal x678=(gclwh13_0*npy*x593);
IkReal x679=(gclwh15_0*x418*x452);
IkReal x680=(gclwh8_3*x420*x442);
IkReal x681=(gclwh3_2*npy*x593);
IkReal x682=(gclwh6_2*npy*x593);
IkReal x683=(gclwh1_2*npx*x593);
IkReal x684=(gclwh10_3*x411*x442);
IkReal x685=(x429*x594);
IkReal x686=(gclwh1_2*x418*x452);
IkReal x687=(gclwh6_3*x407*x442);
IkReal x688=(gclwh6_2*x408*x452);
IkReal x689=(gclwh3_3*x407*x442);
IkReal x690=(x432*x594);
IkReal x691=(gclwh8_2*npx*x593);
IkReal x692=(gclwh1_3*x420*x442);
IkReal x693=(gclwh3_2*x408*x452);
IkReal x694=(x550+x548);
IkReal x695=(x573+x572);
IkReal x696=(x588+x589+x590+x669);
IkReal x697=(x562+x563+x626+x631);
IkReal x698=(x557+x556+x619+x613);
IkReal x699=(((x411*x412))+(((0.2183)*pp*x404))+(((0.00195566729175)*x404))+((x420*x525)));
IkReal x700=((((0.00195566729175)*x509))+((x408*x441))+((x420*x493))+((x411*x496)));
IkReal x701=(x583+x654+x656+x657);
IkReal x702=(x559+x558+x560+x561+x621);
IkReal x703=(x566+x567+x564+x565+x639);
IkReal x704=(x585+x586+x587+x659+x660);
IkReal x705=(((x436*x515))+(((0.4366)*gclwh6_14*x407))+((gclwh8_14*x534))+(((0.00195566729175)*x492))+((x418*x483)));
IkReal x706=(((x418*x453))+(((0.00195566729175)*x466))+((x436*x486))+((x407*x444))+((gclwh9_15*x534)));
IkReal x707=(x578+x576+x647+x646+x651);
IkReal x708=(x547+x549+x607+x609+x608);
IkReal x709=(x570+x568+x642+x641+x640);
IkReal x710=(x579+x577+x580+x649+x648+x650);
IkReal x711=(x541+x542+x543+x603+x602+x601);
IkReal x712=(x581+x582+x584+x652+x653+x655);
IkReal x713=(x544+x545+x546+x606+x605+x604);
IkReal x714=(x540+x539+x538+x599+x598+x600);
IkReal x715=(x535+x537+x536+x597+x596+x595);
IkReal x716=(x575+x574+x571+x645+x644+x643);
IkReal x717=(x553+x552+x551+x554+x610+x611+x612);
IkReal x718=(x618+x614+x615+x616+x617+x672+x620);
IkReal x719=(x678+x679+x677+x636+x637+x635+x638);
IkReal x720=(x673+x674+x675+x625+x624+x623+x622);
IkReal x721=((((-1.0)*x699))+x705);
IkReal x722=((((-1.0)*x700))+x706);
IkReal x723=(x676+x627+x629+x628+x634+x632+x633+x630);
IkReal x724=(x668+x670+x671+x689+x688+x687+x686+x685+x690+x691+x692+x693);
IkReal x725=(x403+x658+x661+x663+x662+x665+x664+x667+x666+x683+x682+x681+x680+x684);
op[36]=((1.35962257)+(((1.6345)*gclwh6_12*x408))+(((-0.30941085)*x417))+(((3.269)*gclwh8_12*x420))+(((0.30941085)*x516))+(((-3.269)*gclwh6_12*x407))+(((-1.0)*x715))+(((-1.6345)*gclwh8_12*x418))+x714+(((-1.0)*gclwh8_12*x506))+(((0.01464286847625)*x510))+(((0.30941085)*x468)));
op[37]=((((-1.0)*x705))+x699);
op[38]=((((0.8732)*gclwh8_14*x420))+(((0.8732)*gclwh10_14*x411))+(((0.0039113345835)*x404))+(((-1.0)*gclwh8_14*x463))+(((-0.8732)*gclwh6_14*x407))+(((-0.0039113345835)*x492))+(((0.4366)*pp*x404))+(((-1.0)*x418*x525))+(((-1.0)*x412*x436)));
op[39]=((-0.15471464)+(((-1.569)*gclwh6_2*x408))+(((-1.0)*gclwh6_2*x471))+(((8.0)*gclwh6_10*x407))+(((-1.0)*x408*x507))+(((3.138)*gclwh1_2*x420))+(((-1.0)*gclwh12_2*x415))+((gclwh3_2*x471))+(((3.138)*gclwh3_2*x407))+((gclwh14_10*x423))+(((-8.0)*gclwh8_10*x420))+((gclwh14_2*x511))+(((-1.0)*gclwh4_2*x494))+((gclwh1_2*x457))+((x418*x431))+((x436*x490))+(((1.569)*gclwh8_2*x418))+(((0.03583449)*x439))+(((-1.569)*gclwh3_2*x408))+(((-0.03583449)*x459))+(((-1.569)*gclwh1_2*x418))+(((3.138)*gclwh6_2*x407))+(((0.03583449)*x445))+(((-3.138)*gclwh8_2*x420))+(((-8.0)*gclwh10_10*x411))+(((-0.7572)*x485))+((gclwh8_2*x457))+(((-1.0)*gclwh12_10*x474)));
op[40]=((-0.02597257)+(((0.00058678977375)*x510))+(((0.01239915)*x516))+(((-0.131)*gclwh6_12*x407))+(((0.01239915)*x468))+(((-0.01239915)*x417))+(((-0.0655)*gclwh8_12*x418))+(((0.131)*gclwh8_12*x420))+(((-1.0)*x714))+(((-1.0)*gclwh8_12*x532))+x715+(((0.0655)*gclwh6_12*x408)));
op[41]=x721;
op[42]=((((-1.0)*x706))+x700);
op[43]=((-1.35962257)+(((0.30941085)*x502))+(((-3.269)*gclwh7_13*x407))+(((0.30941085)*x413))+(((-1.6345)*gclwh9_13*x418))+(((3.269)*gclwh9_13*x420))+(((-1.0)*x711))+(((-0.30941085)*x503))+(((-1.0)*gclwh9_13*x506))+(((0.01464286847625)*x480))+(((1.6345)*gclwh7_13*x408))+x713);
op[44]=((-0.15471464)+(((-8.0)*gclwh11_8*x411))+(((-1.0)*gclwh0_0*x457))+(((1.569)*gclwh0_0*x418))+(((-0.03583449)*x430))+(((-3.138)*gclwh2_0*x407))+((x418*x450))+(((-1.0)*gclwh7_0*x471))+(((0.03583449)*gclwh9_8*r20))+(((-1.0)*x408*x500))+(((-8.0)*gclwh9_8*x420))+(((4.0)*pp*x406))+(((-3.138)*gclwh11_0*x411))+(((-3.138)*gclwh0_0*x420))+(((0.0140560787025)*gclwh11_0*r22))+(((-1.0)*gclwh5_0*x494))+(((-1.569)*gclwh7_0*x408))+(((0.03583449)*x406))+(((-1.0)*gclwh13_8*x474))+((gclwh15_0*x511))+(((3.138)*gclwh7_0*x407))+(((-1.0)*gclwh13_0*x415))+(((1.569)*gclwh2_0*x408))+(((-0.7572)*x520))+((gclwh15_8*x423))+(((8.0)*gclwh7_8*x407))+(((1.569)*gclwh11_0*x436))+(((1.569)*gclwh9_0*x418))+(((-3.138)*gclwh9_0*x420))+((gclwh9_0*x457))+(((-1.0)*gclwh2_0*x471)));
op[45]=((((-0.8732)*gclwh9_15*x420))+(((-0.8732)*gclwh11_15*x411))+(((0.8732)*gclwh7_15*x407))+((x436*x496))+(((-1.0)*x408*x444))+(((0.0039113345835)*x466))+((x418*x493))+(((-0.0039113345835)*x509))+((gclwh9_15*x463)));
op[46]=x722;
op[47]=((0.02597257)+(((0.01239915)*x413))+(((0.00058678977375)*x480))+(((0.0655)*gclwh7_13*x408))+(((-0.01239915)*x503))+(((-1.0)*x713))+(((0.01239915)*x502))+x711+(((0.131)*gclwh9_13*x420))+(((-1.0)*gclwh9_13*x532))+(((-0.0655)*gclwh9_13*x418))+(((-0.131)*gclwh7_13*x407)));
op[48]=((-0.178405675)+(((-1.0)*x717))+x555+(((-1.0)*x694))+x708);
op[49]=((((-1.0)*gclwh14_10*x418))+((gclwh12_10*x408))+(((0.12699240901125)*x523))+(((1.6345)*gclwh14_2*x420))+((gclwh4_10*x436))+(((0.13678818)*x419))+(((-1.6345)*gclwh4_2*x411))+(((-1.6345)*gclwh12_2*x407))+(((0.81725)*gclwh4_2*x436))+(((0.154705425)*x478))+(((-0.81725)*gclwh14_2*x418))+(((0.13678818)*x435))+(((-1.0)*x720))+((gclwh12_2*x484))+((gclwh10_3*x526))+(((-1.0)*gclwh14_2*x461))+(((0.007321434238125)*x498))+(((-1.0)*x698))+(((-0.13678818)*x477))+(((-1.0)*gclwh6_2*x518))+x718+x702+(((-0.12699240901125)*x524))+(((0.81725)*gclwh12_2*x408)));
op[50]=(((gclwh12_12*x433))+(((0.7845)*gclwh4_12*x436))+(((-4.0)*gclwh4_10*x411))+(((0.7845)*gclwh12_12*x408))+(((-1.569)*gclwh4_12*x411))+(((0.160905)*x435))+(((-1.0)*x418*x482))+((x408*x513))+((gclwh8_12*x428))+(((-4.0)*gclwh12_10*x407))+(((-0.7845)*gclwh14_12*x418))+(((-1.0)*gclwh6_12*x481))+(((-1.0)*gclwh6_9*x454))+(((0.017917245)*x514))+(((-1.0)*gclwh14_12*x469))+(((-1.0)*gclwh6_10*x456))+(((-1.0)*gclwh14_10*x472))+(((4.0)*gclwh14_10*x420))+((gclwh8_10*x414))+((gclwh4_10*x522))+(((0.3786)*x491))+((gclwh4_12*x533))+(((0.160905)*x419))+(((-1.569)*gclwh12_12*x407))+((x436*x443))+(((1.569)*gclwh14_12*x420)));
op[51]=(((gclwh8_14*x504))+(((-0.04132419)*x475))+((gclwh10_14*x505)));
op[52]=((-0.007149325)+(((-1.0)*x555))+(((-1.0)*x717))+x694+x708);
op[53]=((((0.0655)*gclwh14_2*x420))+(((-0.03275)*gclwh14_2*x418))+(((-0.02411682)*x435))+(((-0.02411682)*x419))+(((0.00076243651125)*x523))+(((-1.0)*gclwh6_2*x437))+(((0.006199575)*x478))+(((0.02411682)*x477))+(((-0.0655)*gclwh12_2*x407))+(((-1.0)*gclwh12_10*x408))+(((-1.0)*x720))+((gclwh12_2*x487))+(((-1.0)*gclwh6_3*x479))+(((0.000293394886875)*x498))+(((-1.0)*x702))+((gclwh14_10*x418))+x698+((gclwh10_3*x416))+x718+(((-1.0)*gclwh4_10*x436))+(((0.03275)*gclwh4_2*x436))+(((-0.0655)*gclwh4_2*x411))+(((-1.0)*gclwh14_2*x421))+(((0.03275)*gclwh12_2*x408)));
op[54]=(((gclwh5_8*x436))+(((1.6345)*gclwh15_0*x420))+(((-1.0)*gclwh15_0*x461))+((gclwh13_8*x408))+(((0.12699240901125)*x476))+(((-0.81725)*gclwh15_0*x418))+(((0.154705425)*x455))+(((0.81725)*gclwh5_0*x436))+(((0.007321434238125)*x427))+(((0.007321434238125)*x449))+(((-1.6345)*gclwh13_0*x407))+(((0.17262267)*x447))+(((-0.17262267)*x495))+(((0.17262267)*x422))+(((-1.0)*x719))+(((-1.6345)*gclwh5_0*x411))+(((-0.12699240901125)*x488))+(((-1.0)*gclwh7_0*x518))+(((-1.0)*x697))+x703+x723+((gclwh11_1*x526))+(((0.154705425)*x529))+(((0.81725)*gclwh13_0*x408))+(((-1.0)*gclwh15_8*x418)));
op[55]=((-0.178405675)+(((-1.0)*x716))+x695+x709+(((-1.0)*x569)));
op[56]=((((-0.04132419)*x405))+((gclwh9_15*x504))+((gclwh11_15*x505)));
op[57]=((((4.0)*gclwh13_8*x407))+(((-0.017917245)*x519))+((gclwh7_8*x456))+(((-1.0)*gclwh5_8*x522))+((gclwh7_11*x454))+(((-1.0)*gclwh7_13*x481))+((gclwh5_13*x533))+(((-0.7845)*gclwh15_13*x418))+((x418*x470))+(((1.569)*gclwh15_13*x420))+(((-1.0)*x408*x467))+((gclwh9_13*x428))+(((-1.569)*gclwh13_13*x407))+(((-1.0)*gclwh9_8*x414))+((gclwh13_13*x433))+(((-0.3786)*x438))+(((-0.160905)*x422))+(((-1.0)*x436*x462))+((gclwh15_8*x472))+(((-4.0)*gclwh15_8*x420))+(((-0.160905)*x447))+(((0.7845)*gclwh5_13*x436))+(((-1.0)*gclwh15_13*x469))+(((0.7845)*gclwh13_13*x408))+(((4.0)*gclwh5_8*x411))+(((-1.569)*gclwh5_13*x411)));
op[58]=((((0.0655)*gclwh15_0*x420))+(((-1.0)*gclwh13_8*x408))+((gclwh15_8*x418))+((gclwh11_0*x497))+(((-0.0655)*gclwh5_0*x411))+(((0.006199575)*x455))+(((-1.0)*gclwh5_8*x436))+(((-1.0)*gclwh7_1*x479))+(((-1.0)*gclwh15_0*x421))+(((0.03275)*gclwh5_0*x436))+(((0.03275)*gclwh13_0*x408))+(((-0.0655)*gclwh13_0*x407))+((gclwh11_1*x416))+(((-1.0)*gclwh7_0*x437))+(((-1.0)*x719))+(((-0.03275)*gclwh15_0*x418))+(((0.01171767)*x447))+(((-1.0)*x703))+x697+(((-0.01171767)*x495))+x723+(((0.01171767)*x422))+(((0.00076243651125)*x476))+(((0.000293394886875)*x427))+(((0.000293394886875)*x449)));
op[59]=((-0.007149325)+(((-1.0)*x716))+x569+(((-1.0)*x695))+x709);
op[60]=((((-1.0)*x712))+(((-1.0)*x707))+x710+x701);
op[61]=((0.65598384)+(((1.4452)*gclwh6_9*x407))+(((-1.4452)*gclwh10_9*x411))+(((-1.341705325)*gclwh10_3*x411))+(((0.0064735006185)*x531))+(((-0.81725)*gclwh3_2*x408))+(((0.81725)*gclwh8_2*x418))+(((-1.6345)*gclwh8_2*x420))+(((-0.679811285)*gclwh3_3*x408))+(((-0.81725)*gclwh6_2*x408))+(((0.66189404)*gclwh8_3*x418))+(((-0.154705425)*x512))+(((1.341705325)*gclwh1_3*x420))+(((-0.7226)*gclwh6_9*x408))+(((1.6345)*gclwh1_2*x420))+(((-1.341705325)*gclwh8_3*x420))+((gclwh1_2*x461))+(((-1.0)*x724))+(((0.7226)*gclwh10_9*x436))+(((1.6345)*gclwh3_2*x407))+(((-0.66189404)*gclwh6_3*x408))+(((0.0064735006185)*x458))+(((0.00600991575645741)*x429))+(((-1.4452)*gclwh8_9*x420))+(((-1.0)*x704))+((gclwh3_2*x484))+(((1.6345)*gclwh6_2*x407))+(((0.7226)*gclwh8_9*x418))+(((0.00600991575645741)*x432))+(((0.00600991575645741)*x434))+x696+(((0.00600991575645741)*x521))+(((-0.0064735006185)*x424))+(((-0.81725)*gclwh1_2*x418))+(((-0.679811285)*gclwh1_3*x418))+(((1.341705325)*gclwh6_3*x407))+(((-0.00600991575645741)*x501))+((gclwh8_10*x418))+x725+(((-1.0)*gclwh6_10*x408))+(((-1.0)*gclwh12_2*x518))+(((0.66189404)*pp*x429))+(((1.341705325)*gclwh3_3*x407))+((gclwh8_2*x461))+((gclwh10_10*x436))+(((0.154705425)*x527))+(((-1.0)*gclwh6_2*x484)));
op[62]=((0.02970243)+(((0.85)*gclwh8_9*x418))+(((0.7845)*gclwh8_12*x418))+(((1.569)*gclwh6_12*x407))+(((-1.0)*gclwh12_12*x481))+(((-1.0)*gclwh4_12*x425))+((gclwh10_9*x499))+(((1.7)*gclwh6_9*x407))+(((0.85)*gclwh10_9*x436))+(((-1.569)*gclwh8_12*x420))+(((-1.7)*gclwh8_9*x420))+(((-1.7)*gclwh10_9*x411))+(((0.007614829125)*x458))+(((-1.0)*gclwh6_12*x433))+(((-0.7845)*gclwh6_12*x408))+(((-0.85)*gclwh6_9*x408))+(((-1.0)*x714))+(((-0.007614829125)*x424))+((gclwh8_12*x469))+x715+(((0.14850585)*x417)));
op[63]=x721;
op[64]=((((-1.0)*x712))+(((-1.0)*x701))+x710+x707);
op[65]=((0.01084116)+(((0.008055325)*gclwh6_3*x407))+(((-0.012986285)*gclwh3_3*x408))+(((0.008055325)*gclwh1_3*x420))+((gclwh3_3*x410))+(((-0.03275)*gclwh3_2*x408))+(((0.0011413285065)*x424))+(((-1.0)*gclwh6_3*x410))+(((0.03275)*gclwh8_2*x418))+(((0.1274)*gclwh6_9*x408))+(((-0.00493096)*gclwh8_3*x418))+(((0.00493096)*gclwh6_3*x408))+((gclwh8_2*x421))+(((-1.0)*gclwh12_2*x437))+(((-1.0)*gclwh8_10*x418))+(((0.008055325)*gclwh3_3*x407))+(((-0.03275)*gclwh6_2*x408))+(((-1.0)*gclwh10_10*x436))+(((3.60823078949063e-5)*x429))+(((0.0655)*gclwh3_2*x407))+(((-0.012986285)*gclwh1_3*x418))+(((-0.0011413285065)*x531))+(((0.2548)*gclwh8_9*x420))+(((-0.008055325)*gclwh8_3*x420))+(((-1.0)*gclwh4_2*x497))+(((-1.0)*x724))+(((3.60823078949063e-5)*x432))+(((3.60823078949063e-5)*x434))+(((0.2548)*gclwh10_9*x411))+(((0.006199575)*x527))+(((0.0655)*gclwh1_2*x420))+((gclwh3_2*x487))+(((-0.1274)*gclwh8_9*x418))+(((-0.008055325)*gclwh10_3*x411))+(((-1.0)*x696))+((gclwh6_10*x408))+(((-0.0011413285065)*x458))+x704+x725+(((-0.2548)*gclwh6_9*x407))+((gclwh1_2*x421))+(((-0.1274)*gclwh10_9*x436))+(((-0.00493096)*pp*x429))+(((0.0655)*gclwh6_2*x407))+(((-0.0655)*gclwh8_2*x420))+(((-1.0)*gclwh6_2*x487))+(((-0.03275)*gclwh1_2*x418)));
op[66]=((0.65598384)+(((2.0)*gclwh2_1*npy*pp*pz))+(((0.66189404)*gclwh11_1*pp*r22))+(((-1.6345)*gclwh9_0*npx*pz))+(((-1.341705325)*gclwh11_1*npz*pz))+(((2.0)*gclwh0_1*npx*pp*pz))+(((-0.81725)*gclwh7_0*pp*r21))+(((-1.341705325)*gclwh2_1*npy*pz))+(((0.9119)*gclwh11_11*pp*r22))+((gclwh11_8*pp*r22))+(((-0.007321434238125)*gclwh0_0*r20))+(((0.00600991575645741)*gclwh11_1*r22))+(((-0.1893)*gclwh5_8*rxp2_2))+(((-1.0)*gclwh2_1*r21*(pp*pp)))+((gclwh9_8*pp*r20))+(((0.9119)*gclwh9_11*pp*r20))+(((0.00600991575645741)*gclwh9_1*r20))+(((0.66189404)*gclwh9_1*pp*r20))+(((0.00816936785775)*gclwh11_11*r22))+(((-0.1893)*pz))+((gclwh2_0*pp*pz*r21))+((gclwh0_0*pp*pz*r20))+(((0.679811285)*gclwh2_1*pp*r21))+(((2.0)*gclwh7_8*npy*pz))+(((0.0089586225)*gclwh11_0*pz*r22))+((gclwh7_1*r21*(pp*pp)))+(((0.0089586225)*gclwh9_0*pz*r20))+(((-0.00600991575645741)*gclwh0_1*r20))+(((2.0)*gclwh11_1*npz*pp*pz))+(((1.341705325)*gclwh7_1*npy*pz))+(((0.81725)*gclwh0_0*pp*r20))+(((-0.1893)*gclwh13_0*pz*rxp1_2))+(((-0.0089586225)*gclwh2_0*pz*r21))+(((-1.0)*gclwh7_0*pp*pz*r21))+(((-1.0)*gclwh7_8*pp*r21))+(((-0.0089586225)*gclwh0_0*pz*r20))+(((-2.0)*gclwh2_0*npy*(pz*pz)))+(((-1.341705325)*gclwh0_1*npx*pz))+(((0.1893)*gclwh15_0*pz*rxp0_2))+(((0.00816936785775)*gclwh9_11*r20))+(((2.0)*gclwh9_1*npx*pp*pz))+(((-0.9119)*gclwh7_11*pp*r21))+(((-0.007321434238125)*gclwh2_0*r21))+(((0.007321434238125)*gclwh11_0*r22))+(((0.1893)*gclwh15_8*rxp0_2))+(((-2.0)*gclwh9_0*npx*(pz*pz)))+(((-1.6345)*gclwh0_0*npx*pz))+(((-0.00816936785775)*gclwh7_11*r21))+((gclwh11_0*pp*pz*r22))+(((0.0089586225)*gclwh9_8*r20))+(((-0.00600991575645741)*gclwh7_1*r21))+(((-1.0)*gclwh9_1*r20*(pp*pp)))+(((-1.341705325)*gclwh9_1*npx*pz))+(((-2.0)*gclwh0_0*npx*(pz*pz)))+(((-2.0)*gclwh11_0*npz*(pz*pz)))+(((-0.66189404)*gclwh7_1*pp*r21))+(((-2.0)*gclwh11_8*npz*pz))+(((-0.154705425)*gclwh13_0*rxp1_2))+(((-0.00600991575645741)*gclwh2_1*r21))+(((0.0089586225)*gclwh11_8*r22))+(((0.679811285)*gclwh0_1*pp*r20))+(((-0.0089586225)*gclwh7_0*pz*r21))+(((-1.6345)*gclwh2_0*npy*pz))+(((-1.6345)*gclwh11_0*npz*pz))+(((-0.154705425)*gclwh5_0*rxp2_2))+(((-2.0)*gclwh7_1*npy*pp*pz))+(((-0.007321434238125)*gclwh7_0*r21))+(((0.81725)*gclwh11_0*pp*r22))+(((1.8238)*gclwh7_11*npy*pz))+(((-2.0)*gclwh9_8*npx*pz))+(((-0.1893)*gclwh13_8*rxp1_2))+(((-1.0)*gclwh11_1*r22*(pp*pp)))+(((-0.0089586225)*gclwh7_8*r21))+(((0.154705425)*gclwh15_0*rxp0_2))+(((-1.8238)*gclwh9_11*npx*pz))+(((2.0)*gclwh7_0*npy*(pz*pz)))+(((0.007321434238125)*gclwh9_0*r20))+(((1.6345)*gclwh7_0*npy*pz))+(((0.81725)*gclwh2_0*pp*r21))+((gclwh9_0*pp*pz*r20))+(((-0.1893)*gclwh5_0*pz*rxp2_2))+(((0.81725)*gclwh9_0*pp*r20))+(((-1.0)*gclwh0_1*r20*(pp*pp)))+(((-1.8238)*gclwh11_11*npz*pz)));
op[67]=(((gclwh7_7*x451))+(((0.10915)*gclwh11_15*x436))+(((-1.0)*gclwh7_15*x451))+((gclwh13_7*x528))+(((-0.2183)*gclwh7_7*x407))+(((-0.10915)*gclwh7_15*x408))+((gclwh5_7*x446))+(((-1.0)*x411*x486))+((gclwh11_15*x448))+(((0.10915)*gclwh9_15*x418))+(((0.2183)*gclwh11_7*x411))+((x407*x441))+(((-1.0)*x420*x453))+(((-0.10915)*gclwh11_7*x436))+(((-1.0)*gclwh15_7*x465))+(((-1.0)*gclwh11_7*x448))+(((0.10915)*gclwh7_7*x408))+((gclwh9_15*x460)));
op[68]=x722;
op[69]=((-0.02970243)+(((0.7845)*gclwh9_13*x418))+((gclwh9_13*x469))+(((-0.85)*gclwh9_11*x418))+(((0.85)*gclwh7_11*x408))+(((-1.569)*gclwh9_13*x420))+(((-1.7)*gclwh7_11*x407))+(((1.569)*gclwh7_13*x407))+(((-0.007614829125)*gclwh9_11*r20))+(((1.7)*gclwh11_11*x411))+(((1.7)*gclwh9_11*x420))+(((-1.0)*gclwh7_13*x433))+((gclwh15_13*x428))+(((-1.0)*x713))+(((-0.7845)*gclwh7_13*x408))+(((-0.14850585)*x413))+(((-1.0)*gclwh11_11*x499))+x711+(((-1.0)*gclwh5_13*x425))+(((-0.85)*gclwh11_11*x436))+(((0.007614829125)*gclwh7_11*r21)));
op[70]=((0.01084116)+(((0.03275)*gclwh11_0*pp*r22))+(((0.00055453873275)*gclwh11_11*r22))+(((2.0)*gclwh2_1*npy*pp*pz))+(((0.000293394886875)*gclwh9_0*r20))+(((0.0619)*gclwh9_11*pp*r20))+(((2.0)*gclwh11_8*npz*pz))+(((-0.008055325)*gclwh0_1*npx*pz))+(((2.0)*gclwh0_1*npx*pp*pz))+(((0.0655)*gclwh7_0*npy*pz))+(((-0.00055453873275)*gclwh7_11*r21))+(((-1.0)*gclwh2_1*r21*(pp*pp)))+(((0.03275)*gclwh2_0*pp*r21))+(((-0.0619)*gclwh7_11*pp*r21))+(((-0.1893)*pz))+((gclwh7_8*pp*r21))+(((-0.006199575)*gclwh13_0*rxp1_2))+((gclwh2_0*pp*pz*r21))+((gclwh0_0*pp*pz*r20))+(((0.0089586225)*gclwh7_8*r21))+(((0.0089586225)*gclwh11_0*pz*r22))+((gclwh7_1*r21*(pp*pp)))+(((0.0089586225)*gclwh9_0*pz*r20))+(((0.1893)*gclwh13_8*rxp1_2))+(((-0.000293394886875)*gclwh2_0*r21))+(((-1.0)*gclwh11_8*pp*r22))+(((2.0)*gclwh11_1*npz*pp*pz))+(((-0.0089586225)*gclwh11_8*r22))+(((0.000293394886875)*gclwh11_0*r22))+(((-0.1893)*gclwh13_0*pz*rxp1_2))+(((-0.0089586225)*gclwh9_8*r20))+(((-0.0089586225)*gclwh2_0*pz*r21))+(((-0.0655)*gclwh9_0*npx*pz))+(((-1.0)*gclwh7_0*pp*pz*r21))+(((3.60823078949063e-5)*gclwh11_1*r22))+(((-0.006199575)*gclwh5_0*rxp2_2))+(((-0.1238)*gclwh11_11*npz*pz))+(((-0.0089586225)*gclwh0_0*pz*r20))+(((-2.0)*gclwh2_0*npy*(pz*pz)))+(((0.03275)*gclwh9_0*pp*r20))+(((0.1893)*gclwh15_0*pz*rxp0_2))+(((2.0)*gclwh9_1*npx*pp*pz))+(((-0.008055325)*gclwh9_1*npx*pz))+(((-0.000293394886875)*gclwh7_0*r21))+(((-0.008055325)*gclwh2_1*npy*pz))+(((-2.0)*gclwh9_0*npx*(pz*pz)))+(((0.1893)*gclwh5_8*rxp2_2))+(((0.012986285)*gclwh0_1*pp*r20))+(((-0.00493096)*gclwh11_1*pp*r22))+(((-3.60823078949063e-5)*gclwh2_1*r21))+((gclwh11_0*pp*pz*r22))+(((-0.0655)*gclwh11_0*npz*pz))+(((-1.0)*gclwh9_1*r20*(pp*pp)))+(((-2.0)*gclwh0_0*npx*(pz*pz)))+(((-0.1238)*gclwh9_11*npx*pz))+(((-2.0)*gclwh11_0*npz*(pz*pz)))+(((-0.0655)*gclwh0_0*npx*pz))+(((-0.0655)*gclwh2_0*npy*pz))+(((0.006199575)*gclwh15_0*rxp0_2))+(((-0.008055325)*gclwh11_1*npz*pz))+(((-0.03275)*gclwh7_0*pp*r21))+(((-3.60823078949063e-5)*gclwh7_1*r21))+(((2.0)*gclwh9_8*npx*pz))+(((0.03275)*gclwh0_0*pp*r20))+(((-3.60823078949063e-5)*gclwh0_1*r20))+(((-1.0)*gclwh9_8*pp*r20))+(((-0.0089586225)*gclwh7_0*pz*r21))+(((-2.0)*gclwh7_1*npy*pp*pz))+(((0.00493096)*gclwh7_1*pp*r21))+(((-2.0)*gclwh7_8*npy*pz))+(((0.012986285)*gclwh2_1*pp*r21))+(((0.00055453873275)*gclwh9_11*r20))+(((3.60823078949063e-5)*gclwh9_1*r20))+(((0.1238)*gclwh7_11*npy*pz))+(((-1.0)*gclwh11_1*r22*(pp*pp)))+(((2.0)*gclwh7_0*npy*(pz*pz)))+(((0.008055325)*gclwh7_1*npy*pz))+((gclwh9_0*pp*pz*r20))+(((-0.1893)*gclwh5_0*pz*rxp2_2))+(((-0.1893)*gclwh15_8*rxp0_2))+(((-0.000293394886875)*gclwh0_0*r20))+(((-0.00493096)*gclwh9_1*pp*r20))+(((0.0619)*gclwh11_11*pp*r22))+(((-1.0)*gclwh0_1*r20*(pp*pp))));
IkReal x726=((0.2183)*pz);
IkReal x727=((0.10915)*pp);
IkReal x728=(gclwh7_15*r21);
IkReal x729=(gclwh11_7*r22);
IkReal x730=(gclwh7_7*r21);
IkReal x731=(gclwh11_15*r22);
IkReal x732=(gclwh9_15*r20);
op[71]=((((-1.0)*gclwh7_15*npy*x726))+((gclwh9_15*npx*x726))+(((-1.0)*x727*x729))+((x727*x730))+(((-1.0)*x727*x731))+(((-1.0)*x727*x732))+((x727*x728))+(((0.000977833645875)*x730))+(((0.000977833645875)*x728))+(((-0.000977833645875)*x729))+(((-0.000977833645875)*x732))+(((-0.000977833645875)*x731))+(((0.020662095)*gclwh13_7*rxp1_2))+(((-0.020662095)*gclwh15_7*rxp0_2))+((gclwh11_7*npz*x726))+(((0.020662095)*gclwh5_7*rxp2_2))+((gclwh11_15*npz*x726))+(((-1.0)*gclwh7_7*npy*x726)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j13array[16], cj13array[16], sj13array[16], j14array[16], cj14array[16], sj14array[16], j15array[16], cj15array[16], sj15array[16];
int numsolutions = 0;
for(int ij13 = 0; ij13 < numroots; ij13 += 3)
{
IkReal htj13 = zeror[ij13+0], htj14 = zeror[ij13+1], htj15 = zeror[ij13+2];
if(isnan(htj13)||isnan(htj14)||isnan(htj15)){
continue;
}
j13array[numsolutions]=((2.0)*(atan(htj13)));
j14array[numsolutions]=((2.0)*(atan(htj14)));
j15array[numsolutions]=((2.0)*(atan(htj15)));
if(isinf(htj13)){
cj13array[numsolutions] = IKcos(j13array[numsolutions]);
sj13array[numsolutions] = IKsin(j13array[numsolutions]);
}
else{
IkReal x733=htj13*htj13;
CheckValue<IkReal> x734=IKPowWithIntegerCheck(((1.0)+x733),-1);
if(!x734.valid){
continue;
}
cj13array[numsolutions]=((x734.value)*(((1.0)+(((-1.0)*x733)))));
CheckValue<IkReal> x735=IKPowWithIntegerCheck(((1.0)+(htj13*htj13)),-1);
if(!x735.valid){
continue;
}
sj13array[numsolutions]=((2.0)*htj13*(x735.value));
}
if(isinf(htj14)){
cj14array[numsolutions] = IKcos(j14array[numsolutions]);
sj14array[numsolutions] = IKsin(j14array[numsolutions]);
}
else{
IkReal x736=htj14*htj14;
CheckValue<IkReal> x737=IKPowWithIntegerCheck(((1.0)+x736),-1);
if(!x737.valid){
continue;
}
cj14array[numsolutions]=((x737.value)*(((1.0)+(((-1.0)*x736)))));
CheckValue<IkReal> x738=IKPowWithIntegerCheck(((1.0)+(htj14*htj14)),-1);
if(!x738.valid){
continue;
}
sj14array[numsolutions]=((2.0)*htj14*(x738.value));
}
if(isinf(htj15)){
cj15array[numsolutions] = IKcos(j15array[numsolutions]);
sj15array[numsolutions] = IKsin(j15array[numsolutions]);
}
else{
IkReal x739=htj15*htj15;
CheckValue<IkReal> x740=IKPowWithIntegerCheck(((1.0)+x739),-1);
if(!x740.valid){
continue;
}
cj15array[numsolutions]=((x740.value)*(((1.0)+(((-1.0)*x739)))));
CheckValue<IkReal> x741=IKPowWithIntegerCheck(((1.0)+(htj15*htj15)),-1);
if(!x741.valid){
continue;
}
sj15array[numsolutions]=((2.0)*htj15*(x741.value));
}
if( j13array[numsolutions] > IKPI )
{
    j13array[numsolutions]-=IK2PI;
}
else if( j13array[numsolutions] < -IKPI )
{
    j13array[numsolutions]+=IK2PI;
}
if( j14array[numsolutions] > IKPI )
{
    j14array[numsolutions]-=IK2PI;
}
else if( j14array[numsolutions] < -IKPI )
{
    j14array[numsolutions]+=IK2PI;
}
if( j15array[numsolutions] > IKPI )
{
    j15array[numsolutions]-=IK2PI;
}
else if( j15array[numsolutions] < -IKPI )
{
    j15array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j13valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj13 = 16;
_nj14 = 1;
_nj15 = 1;
for(int ij13 = 0; ij13 < numsolutions; ++ij13)
    {
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
_ij14[0] = 0; _ij14[1] = -1;
_ij15[0] = 0; _ij15[1] = -1;
for(int iij13 = ij13+1; iij13 < numsolutions; ++iij13)
{
if( !j13valid[iij13] ) { continue; }
if( IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(cj14array[ij13]-cj14array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij13]-sj14array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(cj15array[ij13]-cj15array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij13]-sj15array[iij13]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j13valid[iij13]=false; _ij13[1] = iij13; _ij14[1] = 0; _ij15[1] = 0;  break; 
}
}
    j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

    j14 = j14array[ij13]; cj14 = cj14array[ij13]; sj14 = sj14array[ij13];

    j15 = j15array[ij13]; cj15 = cj15array[ij13]; sj15 = sj15array[ij13];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j17eval[2];
j17eval[0]=((r20*r20)+(r21*r21));
j17eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j17eval[0]) < 0.0000010000000000  || IKabs(j17eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((r20*r20)+(r21*r21));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[2];
IkReal x742=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x742);
rxp1_0=(pz*r11);
rxp1_1=(r01*x742);
j16eval[0]=r22;
j16eval[1]=sj15;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x743=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x743);
rxp1_0=(pz*r11);
rxp1_1=(r01*x743);
j16eval[0]=cj15;
j16eval[1]=r22;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
CheckValue<IkReal> x744=IKPowWithIntegerCheck(cj15,-1);
if(!x744.valid){
continue;
}
CheckValue<IkReal> x745=IKPowWithIntegerCheck(r22,-1);
if(!x745.valid){
continue;
}
cj16array[0]=((x744.value)*(x745.value)*(((((-1.0)*cj13*sj14))+(((-1.0)*cj14*sj13)))));
if( cj16array[0] >= -1-IKFAST_SINCOS_THRESH && cj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKacos(cj16array[0]);
    sj16array[0] = IKsin(j16array[0]);
    cj16array[1] = cj16array[0];
    j16array[1] = -j16array[0];
    sj16array[1] = -sj16array[0];
}
else if( isnan(cj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKsin(j16)));
evalcond[1]=((((-1.0)*cj13*cj14))+(((-1.0)*r22*sj15*(IKcos(j16))))+((sj13*sj14)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j17eval[1];
IkReal x746=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x746);
rxp1_0=(pz*r11);
rxp1_1=(r01*x746);
IkReal x747=((4.0)*cj15);
IkReal x748=(r10*sj16);
IkReal x749=((16.0)*r10);
IkReal x750=(r11*sj15);
IkReal x751=((8.0)*sj16);
IkReal x752=(cj15*r11);
IkReal x753=((4.0)*sj14);
IkReal x754=(cj16*r00);
IkReal x755=((16.0)*sj16);
IkReal x756=(r02*sj16);
IkReal x757=((8.0)*r10);
IkReal x758=(cj13*sj14);
IkReal x759=(cj16*r12);
IkReal x760=(cj13*cj14);
IkReal x761=((4.0)*x750);
IkReal x762=(r11*x747);
IkReal x763=(sj15*x759);
IkReal x764=((16.0)*cj16*r01);
IkReal x765=((8.0)*cj16*r01);
IkReal x766=((12.0)*cj15*x759);
IkReal x767=(x747*x748);
IkReal x768=((12.0)*x763);
IkReal x769=((4.0)*sj15*x748);
IkReal x770=(sj13*x765);
IkReal x771=((12.0)*sj14*x756);
IkReal x772=((4.0)*cj14*x754);
IkReal x773=(cj14*sj13*x756);
IkReal x774=((12.0)*x756*x760);
IkReal x775=(sj13*x753*x754);
IkReal x776=((4.0)*x754*x760);
IkReal x777=(sj13*x771);
IkReal x778=((12.0)*x756*x758);
IkReal x779=((12.0)*x773);
IkReal x780=(cj13*x753*x754);
IkReal x781=(sj13*x772);
IkReal x782=(x776+x761);
IkReal x783=(x775+x767);
IkReal x784=(x774+x766);
IkReal x785=(x779+x778);
IkReal x786=(x769+x762+x780+x781);
j17eval[0]=((((0.5)*(IKabs(((((-1.0)*sj13*sj14*x764))+((x760*x764))+(((-1.0)*sj15*x749))+(((-1.0)*x752*x755)))))))+(((0.5)*(IKabs(((((-1.0)*x785))+x768+x786)))))+(((0.5)*(IKabs(((((-1.0)*x782))+x783+x784+(((-1.0)*x777)))))))+(((0.5)*(IKabs(((((-1.0)*x758*x764))+(((-1.0)*x750*x755))+(((-1.0)*cj14*sj13*x764))+((cj15*x749)))))))+(((0.5)*(IKabs(((((-1.0)*x783))+x782+x784+(((-1.0)*x777)))))))+(IKabs((((x760*x765))+(((-1.0)*sj15*x757))+(((-1.0)*x751*x752))+(((-1.0)*sj14*x770)))))+(((0.5)*(IKabs(((((-1.0)*x786))+(((-1.0)*x785))+x768)))))+(((0.5)*(IKabs((((x747*x759))+(((-1.0)*x783))+(((4.0)*x756*x760))+(((-1.0)*sj13*x753*x756))+x782)))))+(IKabs(((((-1.0)*x758*x765))+(((-1.0)*x750*x751))+((cj15*x757))+(((-1.0)*cj14*x770)))))+(((0.5)*(IKabs(((((-1.0)*x786))+(((-1.0)*cj13*x753*x756))+(((4.0)*x763))+(((-4.0)*x773))))))));
if( IKabs(j17eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j17evalpoly[1];
IkReal x787=(sj13*sj14);
IkReal x788=((4.0)*cj16);
IkReal x789=(r02*sj16);
IkReal x790=(cj13*cj14);
IkReal x791=(cj15*sj16);
IkReal x792=(cj15*r12);
IkReal x793=(r10*sj15);
IkReal x794=((4.0)*r11*sj15);
IkReal x795=((8.0)*cj16*r01);
IkReal x796=((16.0)*cj16*r01);
IkReal x797=((4.0)*r10*x791);
IkReal x798=((12.0)*cj16*x792);
IkReal x799=(x788*x792);
IkReal x800=(r00*x788*x790);
IkReal x801=(r00*x787*x788);
IkReal x802=((12.0)*x789*x790);
IkReal x803=((12.0)*x787*x789);
IkReal x804=((4.0)*x789*x790);
IkReal x805=((4.0)*x787*x789);
IkReal x806=(x794+x800);
IkReal x807=(x797+x801);
IkReal x808=(x798+x802);
IkReal x809=(x799+x804);
IkReal x810=(((x790*x795))+(((-1.0)*x787*x795))+(((-8.0)*x793))+(((-8.0)*r11*x791)));
op[0]=(x809+x806+(((-1.0)*x807))+(((-1.0)*x805)));
op[1]=x810;
op[2]=(x808+x806+(((-1.0)*x803))+(((-1.0)*x807)));
op[3]=(((x790*x796))+(((-16.0)*x793))+(((-16.0)*r11*x791))+(((-1.0)*x787*x796)));
op[4]=(x808+x807+(((-1.0)*x803))+(((-1.0)*x806)));
op[5]=x810;
op[6]=(x809+x807+(((-1.0)*x806))+(((-1.0)*x805)));
polyroots6(op,zeror,numroots);
IkReal j17array[6], cj17array[6], sj17array[6], tempj17array[1];
int numsolutions = 0;
for(int ij17 = 0; ij17 < numroots; ++ij17)
{
IkReal htj17 = zeror[ij17];
tempj17array[0]=((2.0)*(atan(htj17)));
for(int kj17 = 0; kj17 < 1; ++kj17)
{
j17array[numsolutions] = tempj17array[kj17];
if( j17array[numsolutions] > IKPI )
{
    j17array[numsolutions]-=IK2PI;
}
else if( j17array[numsolutions] < -IKPI )
{
    j17array[numsolutions]+=IK2PI;
}
sj17array[numsolutions] = IKsin(j17array[numsolutions]);
cj17array[numsolutions] = IKcos(j17array[numsolutions]);
numsolutions++;
}
}
bool j17valid[6]={true,true,true,true,true,true};
_nj17 = 6;
for(int ij17 = 0; ij17 < numsolutions; ++ij17)
    {
if( !j17valid[ij17] )
{
    continue;
}
    j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
htj17 = IKtan(j17/2);

IkReal x811=(cj14*sj13);
IkReal x812=(cj16*r01);
IkReal x813=(cj13*sj14);
IkReal x814=((4.0)*cj16);
IkReal x815=(r12*sj15);
IkReal x816=(cj15*r10);
IkReal x817=((4.0)*cj15*r11);
IkReal x818=((12.0)*r02*sj16);
IkReal x819=(r11*sj15*sj16);
IkReal x820=((4.0)*r02*sj16);
IkReal x821=((12.0)*cj16*x815);
IkReal x822=((4.0)*r10*sj15*sj16);
IkReal x823=(x814*x815);
IkReal x824=(x813*x818);
IkReal x825=(x811*x818);
IkReal x826=(r00*x813*x814);
IkReal x827=(r00*x811*x814);
IkReal x828=(x813*x820);
IkReal x829=(x811*x820);
IkReal x830=(x825+x824);
IkReal x831=(x829+x828);
IkReal x832=((((8.0)*x816))+(((-8.0)*x819))+(((-8.0)*x811*x812))+(((-8.0)*x812*x813)));
IkReal x833=(x817+x822+x827+x826);
j17evalpoly[0]=(((htj17*x832))+(((htj17*htj17*htj17*htj17)*(((((-1.0)*x830))+(((-1.0)*x833))+x821))))+(((htj17*htj17*htj17*htj17*htj17*htj17)*(((((-1.0)*x833))+(((-1.0)*x831))+x823))))+((x832*(htj17*htj17*htj17*htj17*htj17)))+(((htj17*htj17*htj17)*(((((-16.0)*x812*x813))+(((-16.0)*x819))+(((-16.0)*x811*x812))+(((16.0)*x816))))))+(((-1.0)*x831))+(((htj17*htj17)*(((((-1.0)*x830))+x821+x833))))+x823+x833);
if( IKabs(j17evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < numsolutions; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x834=(cj16*sj17);
IkReal x835=(cj16*cj17);
if( IKabs((((r00*x835))+(((-1.0)*r01*x834))+(((-1.0)*r02*sj16)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r12*sj16))+(((-1.0)*r10*x835))+((r11*x834)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x835))+(((-1.0)*r01*x834))+(((-1.0)*r02*sj16))))+IKsqr((((r12*sj16))+(((-1.0)*r10*x835))+((r11*x834))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2((((r00*x835))+(((-1.0)*r01*x834))+(((-1.0)*r02*sj16))), (((r12*sj16))+(((-1.0)*r10*x835))+((r11*x834))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x836=IKcos(j12);
IkReal x837=IKsin(j12);
IkReal x838=((1.0)*r02);
IkReal x839=(cj16*sj15);
IkReal x840=((1.0)*sj14);
IkReal x841=((1.0)*cj14);
IkReal x842=(cj17*r01);
IkReal x843=((0.09465)*sj17);
IkReal x844=(cj15*cj16);
IkReal x845=((1.0)*r12);
IkReal x846=((1.0)*r11);
IkReal x847=(cj16*sj17);
IkReal x848=(r11*sj15);
IkReal x849=(cj17*r10);
IkReal x850=(cj15*cj17);
IkReal x851=((1.0)*sj16);
IkReal x852=((0.39225)*sj14);
IkReal x853=(r00*sj17);
IkReal x854=((1.0)*cj15);
IkReal x855=(sj16*sj17);
IkReal x856=(r10*sj17);
IkReal x857=(cj17*r00);
IkReal x858=((0.39225)*cj14);
IkReal x859=(cj13*x837);
IkReal x860=(sj13*x836);
IkReal x861=(r01*x855);
IkReal x862=(cj13*x836);
IkReal x863=(sj13*x837);
evalcond[0]=(((cj16*x849))+(((-1.0)*x846*x847))+(((-1.0)*sj16*x845))+x836);
evalcond[1]=(((cj16*x857))+(((-1.0)*r01*x847))+(((-1.0)*sj16*x838))+(((-1.0)*x837)));
evalcond[2]=((((-0.10915)*x837))+(((-1.0)*px))+((x858*x860))+(((-0.09465)*x842))+(((0.425)*x860))+(((-1.0)*r00*x843))+((x852*x862)));
evalcond[3]=((((-0.09465)*cj17*r11))+(((-1.0)*r10*x843))+(((-1.0)*py))+((x858*x863))+(((0.425)*x863))+((x852*x859))+(((0.10915)*x836)));
evalcond[4]=(((sj15*x842))+((cj14*x862))+((sj15*x853))+(((-1.0)*r00*x850*x851))+(((-1.0)*x838*x844))+(((-1.0)*x840*x860))+((cj15*x861)));
evalcond[5]=(((cj15*r11*x855))+(((-1.0)*cj15*x849*x851))+((cj17*x848))+((cj14*x859))+((sj15*x856))+(((-1.0)*x844*x845))+(((-1.0)*x840*x863)));
evalcond[6]=((((-1.0)*x842*x854))+(((-1.0)*x853*x854))+(((-1.0)*x841*x860))+((sj15*x861))+(((-1.0)*x838*x839))+(((-1.0)*x840*x862))+(((-1.0)*sj15*x851*x857)));
evalcond[7]=(((x848*x855))+(((-1.0)*x846*x850))+(((-1.0)*x841*x863))+(((-1.0)*x839*x845))+(((-1.0)*x840*x859))+(((-1.0)*x854*x856))+(((-1.0)*sj15*x849*x851)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
CheckValue<IkReal> x864=IKPowWithIntegerCheck(r22,-1);
if(!x864.valid){
continue;
}
CheckValue<IkReal> x865=IKPowWithIntegerCheck(sj15,-1);
if(!x865.valid){
continue;
}
cj16array[0]=((x864.value)*(x865.value)*(((((-1.0)*cj13*cj14))+((sj13*sj14)))));
if( cj16array[0] >= -1-IKFAST_SINCOS_THRESH && cj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKacos(cj16array[0]);
    sj16array[0] = IKsin(j16array[0]);
    cj16array[1] = cj16array[0];
    j16array[1] = -j16array[0];
    sj16array[1] = -sj16array[0];
}
else if( isnan(cj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKsin(j16)));
evalcond[1]=((((-1.0)*cj15*r22*(IKcos(j16))))+(((-1.0)*cj13*sj14))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j17eval[1];
IkReal x866=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x866);
rxp1_0=(pz*r11);
rxp1_1=(r01*x866);
IkReal x867=((4.0)*cj15);
IkReal x868=(r10*sj16);
IkReal x869=((16.0)*r10);
IkReal x870=(r11*sj15);
IkReal x871=((8.0)*sj16);
IkReal x872=(cj15*r11);
IkReal x873=((4.0)*sj14);
IkReal x874=(cj16*r00);
IkReal x875=((16.0)*sj16);
IkReal x876=(r02*sj16);
IkReal x877=((8.0)*r10);
IkReal x878=(cj13*sj14);
IkReal x879=(cj16*r12);
IkReal x880=(cj13*cj14);
IkReal x881=((4.0)*x870);
IkReal x882=(r11*x867);
IkReal x883=(sj15*x879);
IkReal x884=((16.0)*cj16*r01);
IkReal x885=((8.0)*cj16*r01);
IkReal x886=((12.0)*cj15*x879);
IkReal x887=(x867*x868);
IkReal x888=((12.0)*x883);
IkReal x889=((4.0)*sj15*x868);
IkReal x890=(sj13*x885);
IkReal x891=((12.0)*sj14*x876);
IkReal x892=((4.0)*cj14*x874);
IkReal x893=(cj14*sj13*x876);
IkReal x894=((12.0)*x876*x880);
IkReal x895=(sj13*x873*x874);
IkReal x896=((4.0)*x874*x880);
IkReal x897=(sj13*x891);
IkReal x898=((12.0)*x876*x878);
IkReal x899=((12.0)*x893);
IkReal x900=(cj13*x873*x874);
IkReal x901=(sj13*x892);
IkReal x902=(x881+x896);
IkReal x903=(x887+x895);
IkReal x904=(x886+x894);
IkReal x905=(x898+x899);
IkReal x906=(x882+x889+x900+x901);
j17eval[0]=((((0.5)*(IKabs(((((-1.0)*x872*x875))+((x880*x884))+(((-1.0)*sj15*x869))+(((-1.0)*sj13*sj14*x884)))))))+(((0.5)*(IKabs(((((-1.0)*x870*x875))+(((-1.0)*cj14*sj13*x884))+((cj15*x869))+(((-1.0)*x878*x884)))))))+(((0.5)*(IKabs(((((-1.0)*x902))+(((-1.0)*x897))+x904+x903)))))+(((0.5)*(IKabs(((((-1.0)*x903))+(((-1.0)*x897))+x904+x902)))))+(((0.5)*(IKabs(((((-1.0)*x905))+(((-1.0)*x906))+x888)))))+(IKabs((((x880*x885))+(((-1.0)*x871*x872))+(((-1.0)*sj15*x877))+(((-1.0)*sj14*x890)))))+(((0.5)*(IKabs((((x867*x879))+(((4.0)*x876*x880))+(((-1.0)*x903))+(((-1.0)*sj13*x873*x876))+x902)))))+(IKabs(((((-1.0)*x870*x871))+(((-1.0)*cj14*x890))+((cj15*x877))+(((-1.0)*x878*x885)))))+(((0.5)*(IKabs(((((-1.0)*x906))+(((4.0)*x883))+(((-4.0)*x893))+(((-1.0)*cj13*x873*x876)))))))+(((0.5)*(IKabs(((((-1.0)*x905))+x888+x906))))));
if( IKabs(j17eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j17evalpoly[1];
IkReal x907=(sj13*sj14);
IkReal x908=((4.0)*cj16);
IkReal x909=(r02*sj16);
IkReal x910=(cj13*cj14);
IkReal x911=(cj15*sj16);
IkReal x912=(cj15*r12);
IkReal x913=(r10*sj15);
IkReal x914=((4.0)*r11*sj15);
IkReal x915=((8.0)*cj16*r01);
IkReal x916=((16.0)*cj16*r01);
IkReal x917=((4.0)*r10*x911);
IkReal x918=((12.0)*cj16*x912);
IkReal x919=(x908*x912);
IkReal x920=(r00*x908*x910);
IkReal x921=(r00*x907*x908);
IkReal x922=((12.0)*x909*x910);
IkReal x923=((12.0)*x907*x909);
IkReal x924=((4.0)*x909*x910);
IkReal x925=((4.0)*x907*x909);
IkReal x926=(x920+x914);
IkReal x927=(x921+x917);
IkReal x928=(x922+x918);
IkReal x929=(x924+x919);
IkReal x930=(((x910*x915))+(((-8.0)*r11*x911))+(((-8.0)*x913))+(((-1.0)*x907*x915)));
op[0]=((((-1.0)*x927))+(((-1.0)*x925))+x929+x926);
op[1]=x930;
op[2]=((((-1.0)*x927))+(((-1.0)*x923))+x928+x926);
op[3]=(((x910*x916))+(((-1.0)*x907*x916))+(((-16.0)*x913))+(((-16.0)*r11*x911)));
op[4]=((((-1.0)*x926))+(((-1.0)*x923))+x928+x927);
op[5]=x930;
op[6]=((((-1.0)*x926))+(((-1.0)*x925))+x929+x927);
polyroots6(op,zeror,numroots);
IkReal j17array[6], cj17array[6], sj17array[6], tempj17array[1];
int numsolutions = 0;
for(int ij17 = 0; ij17 < numroots; ++ij17)
{
IkReal htj17 = zeror[ij17];
tempj17array[0]=((2.0)*(atan(htj17)));
for(int kj17 = 0; kj17 < 1; ++kj17)
{
j17array[numsolutions] = tempj17array[kj17];
if( j17array[numsolutions] > IKPI )
{
    j17array[numsolutions]-=IK2PI;
}
else if( j17array[numsolutions] < -IKPI )
{
    j17array[numsolutions]+=IK2PI;
}
sj17array[numsolutions] = IKsin(j17array[numsolutions]);
cj17array[numsolutions] = IKcos(j17array[numsolutions]);
numsolutions++;
}
}
bool j17valid[6]={true,true,true,true,true,true};
_nj17 = 6;
for(int ij17 = 0; ij17 < numsolutions; ++ij17)
    {
if( !j17valid[ij17] )
{
    continue;
}
    j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
htj17 = IKtan(j17/2);

IkReal x931=(cj14*sj13);
IkReal x932=(cj16*r01);
IkReal x933=(cj13*sj14);
IkReal x934=((4.0)*cj16);
IkReal x935=(r12*sj15);
IkReal x936=(cj15*r10);
IkReal x937=((4.0)*cj15*r11);
IkReal x938=((12.0)*r02*sj16);
IkReal x939=(r11*sj15*sj16);
IkReal x940=((4.0)*r02*sj16);
IkReal x941=((12.0)*cj16*x935);
IkReal x942=((4.0)*r10*sj15*sj16);
IkReal x943=(x934*x935);
IkReal x944=(x933*x938);
IkReal x945=(x931*x938);
IkReal x946=(r00*x933*x934);
IkReal x947=(r00*x931*x934);
IkReal x948=(x933*x940);
IkReal x949=(x931*x940);
IkReal x950=(x944+x945);
IkReal x951=(x948+x949);
IkReal x952=((((-8.0)*x932*x933))+(((-8.0)*x939))+(((8.0)*x936))+(((-8.0)*x931*x932)));
IkReal x953=(x937+x942+x946+x947);
j17evalpoly[0]=(((x952*(htj17*htj17*htj17*htj17*htj17)))+(((htj17*htj17)*(((((-1.0)*x950))+x953+x941))))+(((htj17*htj17*htj17*htj17*htj17*htj17)*(((((-1.0)*x953))+(((-1.0)*x951))+x943))))+(((htj17*htj17*htj17*htj17)*(((((-1.0)*x953))+(((-1.0)*x950))+x941))))+((htj17*x952))+(((htj17*htj17*htj17)*(((((-16.0)*x931*x932))+(((-16.0)*x932*x933))+(((16.0)*x936))+(((-16.0)*x939))))))+(((-1.0)*x951))+x953+x943);
if( IKabs(j17evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < numsolutions; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x954=(cj16*sj17);
IkReal x955=(cj16*cj17);
if( IKabs((((r00*x955))+(((-1.0)*r01*x954))+(((-1.0)*r02*sj16)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r12*sj16))+((r11*x954))+(((-1.0)*r10*x955)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x955))+(((-1.0)*r01*x954))+(((-1.0)*r02*sj16))))+IKsqr((((r12*sj16))+((r11*x954))+(((-1.0)*r10*x955))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2((((r00*x955))+(((-1.0)*r01*x954))+(((-1.0)*r02*sj16))), (((r12*sj16))+((r11*x954))+(((-1.0)*r10*x955))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x956=IKcos(j12);
IkReal x957=IKsin(j12);
IkReal x958=((1.0)*r02);
IkReal x959=(cj16*sj15);
IkReal x960=((1.0)*sj14);
IkReal x961=((1.0)*cj14);
IkReal x962=(cj17*r01);
IkReal x963=((0.09465)*sj17);
IkReal x964=(cj15*cj16);
IkReal x965=((1.0)*r12);
IkReal x966=((1.0)*r11);
IkReal x967=(cj16*sj17);
IkReal x968=(r11*sj15);
IkReal x969=(cj17*r10);
IkReal x970=(cj15*cj17);
IkReal x971=((1.0)*sj16);
IkReal x972=((0.39225)*sj14);
IkReal x973=(r00*sj17);
IkReal x974=((1.0)*cj15);
IkReal x975=(sj16*sj17);
IkReal x976=(r10*sj17);
IkReal x977=(cj17*r00);
IkReal x978=((0.39225)*cj14);
IkReal x979=(cj13*x957);
IkReal x980=(sj13*x956);
IkReal x981=(r01*x975);
IkReal x982=(cj13*x956);
IkReal x983=(sj13*x957);
evalcond[0]=(((cj16*x969))+(((-1.0)*x966*x967))+x956+(((-1.0)*sj16*x965)));
evalcond[1]=(((cj16*x977))+(((-1.0)*x957))+(((-1.0)*r01*x967))+(((-1.0)*sj16*x958)));
evalcond[2]=(((x972*x982))+(((-1.0)*r00*x963))+(((-0.10915)*x957))+(((-1.0)*px))+(((0.425)*x980))+(((-0.09465)*x962))+((x978*x980)));
evalcond[3]=((((-1.0)*r10*x963))+(((-0.09465)*cj17*r11))+(((-1.0)*py))+(((0.10915)*x956))+(((0.425)*x983))+((x972*x979))+((x978*x983)));
evalcond[4]=(((cj15*x981))+(((-1.0)*r00*x970*x971))+(((-1.0)*x958*x964))+((cj14*x982))+((sj15*x962))+((sj15*x973))+(((-1.0)*x960*x980)));
evalcond[5]=(((cj17*x968))+(((-1.0)*x964*x965))+(((-1.0)*cj15*x969*x971))+((cj15*r11*x975))+((cj14*x979))+((sj15*x976))+(((-1.0)*x960*x983)));
evalcond[6]=((((-1.0)*x961*x980))+(((-1.0)*x962*x974))+(((-1.0)*x958*x959))+((sj15*x981))+(((-1.0)*x960*x982))+(((-1.0)*x973*x974))+(((-1.0)*sj15*x971*x977)));
evalcond[7]=((((-1.0)*x961*x983))+(((-1.0)*sj15*x969*x971))+(((-1.0)*x966*x970))+((x968*x975))+(((-1.0)*x974*x976))+(((-1.0)*x959*x965))+(((-1.0)*x960*x979)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[2];
IkReal x984=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x984);
rxp1_0=(pz*r11);
rxp1_1=(r01*x984);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j16eval[0]=r22;
j16eval[1]=sj15;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x985=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x985);
rxp1_0=(pz*r11);
rxp1_1=(r01*x985);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j16eval[0]=cj15;
j16eval[1]=r22;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
IkReal x986=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x986);
rxp1_0=(pz*r11);
rxp1_1=(r01*x986);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
j16eval[0]=r22;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
CheckValue<IkReal> x987=IKPowWithIntegerCheck(r22,-1);
if(!x987.valid){
continue;
}
cj16array[0]=((x987.value)*(((((-1.0)*cj13*cj14))+((sj13*sj14)))));
if( cj16array[0] >= -1-IKFAST_SINCOS_THRESH && cj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKacos(cj16array[0]);
    sj16array[0] = IKsin(j16array[0]);
    cj16array[1] = cj16array[0];
    j16array[1] = -j16array[0];
    sj16array[1] = -sj16array[0];
}
else if( isnan(cj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKsin(j16)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j17eval[1];
IkReal x988=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x988);
rxp1_0=(pz*r11);
rxp1_1=(r01*x988);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
j17eval[0]=sj16;
if( IKabs(j17eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j17array[2], cj17array[2], sj17array[2];
bool j17valid[2]={false};
_nj17 = 2;
CheckValue<IkReal> x990 = IKatan2WithCheck(IkReal(((-1.0)*r00*sj16)),IkReal((r01*sj16)),IKFAST_ATAN2_MAGTHRESH);
if(!x990.valid){
continue;
}
IkReal x989=x990.value;
j17array[0]=((-1.0)*x989);
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
j17array[1]=((3.14159265358979)+(((-1.0)*x989)));
sj17array[1]=IKsin(j17array[1]);
cj17array[1]=IKcos(j17array[1]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
if( j17array[1] > IKPI )
{
    j17array[1]-=IK2PI;
}
else if( j17array[1] < -IKPI )
{    j17array[1]+=IK2PI;
}
j17valid[1] = true;
for(int ij17 = 0; ij17 < 2; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 2; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[1];
evalcond[0]=(((r11*sj16*(IKsin(j17))))+(((-1.0)*r10*sj16*(IKcos(j17)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x991=(cj16*cj17);
IkReal x992=(cj16*sj17);
if( IKabs((((r00*x991))+(((-1.0)*r01*x992)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x991))+((r11*x992)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x991))+(((-1.0)*r01*x992))))+IKsqr(((((-1.0)*r10*x991))+((r11*x992))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2((((r00*x991))+(((-1.0)*r01*x992))), ((((-1.0)*r10*x991))+((r11*x992))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x993=IKcos(j12);
IkReal x994=IKsin(j12);
IkReal x995=((0.09465)*cj17);
IkReal x996=(r10*sj17);
IkReal x997=(cj16*cj17);
IkReal x998=(cj13*cj14);
IkReal x999=((1.0)*sj14);
IkReal x1000=(r00*sj17);
IkReal x1001=((1.0)*cj16*sj17);
IkReal x1002=(sj13*x993);
IkReal x1003=(sj13*x994);
evalcond[0]=((((-1.0)*r11*x1001))+((r10*x997))+x993);
evalcond[1]=((((-1.0)*x994))+((r00*x997))+(((-1.0)*r01*x1001)));
evalcond[2]=(((x993*x998))+x1000+(((-1.0)*x1002*x999))+((cj17*r01)));
evalcond[3]=(((x994*x998))+(((-1.0)*x1003*x999))+((cj17*r11))+x996);
evalcond[4]=((((0.425)*x1002))+(((-1.0)*px))+(((-1.0)*r01*x995))+(((-0.10915)*x994))+(((-0.09465)*x1000)));
evalcond[5]=((((0.425)*x1003))+(((-1.0)*r11*x995))+(((0.10915)*x993))+(((-1.0)*py))+(((-0.09465)*x996)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
IkReal x1004=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1004);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1004);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
j16eval[0]=r22;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
CheckValue<IkReal> x1005=IKPowWithIntegerCheck(r22,-1);
if(!x1005.valid){
continue;
}
cj16array[0]=((-1.0)*(x1005.value)*(((((-1.0)*cj13*cj14))+((sj13*sj14)))));
if( cj16array[0] >= -1-IKFAST_SINCOS_THRESH && cj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKacos(cj16array[0]);
    sj16array[0] = IKsin(j16array[0]);
    cj16array[1] = cj16array[0];
    j16array[1] = -j16array[0];
    sj16array[1] = -sj16array[0];
}
else if( isnan(cj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKsin(j16)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j17eval[1];
IkReal x1006=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1006);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1006);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
j17eval[0]=sj16;
if( IKabs(j17eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j17array[2], cj17array[2], sj17array[2];
bool j17valid[2]={false};
_nj17 = 2;
CheckValue<IkReal> x1008 = IKatan2WithCheck(IkReal((r00*sj16)),IkReal(((-1.0)*r01*sj16)),IKFAST_ATAN2_MAGTHRESH);
if(!x1008.valid){
continue;
}
IkReal x1007=x1008.value;
j17array[0]=((-1.0)*x1007);
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
j17array[1]=((3.14159265358979)+(((-1.0)*x1007)));
sj17array[1]=IKsin(j17array[1]);
cj17array[1]=IKcos(j17array[1]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
if( j17array[1] > IKPI )
{
    j17array[1]-=IK2PI;
}
else if( j17array[1] < -IKPI )
{    j17array[1]+=IK2PI;
}
j17valid[1] = true;
for(int ij17 = 0; ij17 < 2; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 2; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[1];
evalcond[0]=(((r10*sj16*(IKcos(j17))))+(((-1.0)*r11*sj16*(IKsin(j17)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x1009=(cj16*cj17);
IkReal x1010=(cj16*sj17);
if( IKabs(((((-1.0)*r01*x1010))+((r00*x1009)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x1009))+((r11*x1010)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x1010))+((r00*x1009))))+IKsqr(((((-1.0)*r10*x1009))+((r11*x1010))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-1.0)*r01*x1010))+((r00*x1009))), ((((-1.0)*r10*x1009))+((r11*x1010))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x1011=IKcos(j12);
IkReal x1012=IKsin(j12);
IkReal x1013=(cj17*r01);
IkReal x1014=(r10*sj17);
IkReal x1015=((1.0)*r11);
IkReal x1016=(cj16*sj17);
IkReal x1017=(cj16*cj17);
IkReal x1018=(cj13*cj14);
IkReal x1019=((1.0)*sj14);
IkReal x1020=(r00*sj17);
IkReal x1021=(sj13*x1011);
IkReal x1022=(sj13*x1012);
evalcond[0]=(x1011+(((-1.0)*x1015*x1016))+((r10*x1017)));
evalcond[1]=((((-1.0)*r01*x1016))+((r00*x1017))+(((-1.0)*x1012)));
evalcond[2]=((((-1.0)*x1020))+(((-1.0)*x1019*x1021))+((x1011*x1018))+(((-1.0)*x1013)));
evalcond[3]=((((-1.0)*x1019*x1022))+((x1012*x1018))+(((-1.0)*cj17*x1015))+(((-1.0)*x1014)));
evalcond[4]=((((-0.10915)*x1012))+(((-1.0)*px))+(((0.425)*x1021))+(((-0.09465)*x1013))+(((-0.09465)*x1020)));
evalcond[5]=((((0.10915)*x1011))+(((-0.09465)*cj17*r11))+(((-1.0)*py))+(((0.425)*x1022))+(((-0.09465)*x1014)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j15))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
IkReal x1023=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1023);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1023);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj15=0;
cj15=1.0;
j15=0;
j16eval[0]=r22;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
CheckValue<IkReal> x1024=IKPowWithIntegerCheck(r22,-1);
if(!x1024.valid){
continue;
}
cj16array[0]=((x1024.value)*(((((-1.0)*cj13*sj14))+(((-1.0)*cj14*sj13)))));
if( cj16array[0] >= -1-IKFAST_SINCOS_THRESH && cj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKacos(cj16array[0]);
    sj16array[0] = IKsin(j16array[0]);
    cj16array[1] = cj16array[0];
    j16array[1] = -j16array[0];
    sj16array[1] = -sj16array[0];
}
else if( isnan(cj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKsin(j16)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j17eval[1];
IkReal x1025=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1025);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1025);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj15=0;
cj15=1.0;
j15=0;
j17eval[0]=sj16;
if( IKabs(j17eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j17array[2], cj17array[2], sj17array[2];
bool j17valid[2]={false};
_nj17 = 2;
CheckValue<IkReal> x1027 = IKatan2WithCheck(IkReal(((-1.0)*r00*sj16)),IkReal((r01*sj16)),IKFAST_ATAN2_MAGTHRESH);
if(!x1027.valid){
continue;
}
IkReal x1026=x1027.value;
j17array[0]=((-1.0)*x1026);
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
j17array[1]=((3.14159265358979)+(((-1.0)*x1026)));
sj17array[1]=IKsin(j17array[1]);
cj17array[1]=IKcos(j17array[1]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
if( j17array[1] > IKPI )
{
    j17array[1]-=IK2PI;
}
else if( j17array[1] < -IKPI )
{    j17array[1]+=IK2PI;
}
j17valid[1] = true;
for(int ij17 = 0; ij17 < 2; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 2; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[1];
evalcond[0]=(((r11*sj16*(IKsin(j17))))+(((-1.0)*r10*sj16*(IKcos(j17)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x1028=(cj16*cj17);
IkReal x1029=(cj16*sj17);
if( IKabs(((((-1.0)*r01*x1029))+((r00*x1028)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x1029))+(((-1.0)*r10*x1028)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x1029))+((r00*x1028))))+IKsqr((((r11*x1029))+(((-1.0)*r10*x1028))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-1.0)*r01*x1029))+((r00*x1028))), (((r11*x1029))+(((-1.0)*r10*x1028))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x1030=IKcos(j12);
IkReal x1031=IKsin(j12);
IkReal x1032=(cj14*sj13);
IkReal x1033=(cj17*r01);
IkReal x1034=(r10*sj17);
IkReal x1035=((1.0)*r11);
IkReal x1036=(cj16*sj17);
IkReal x1037=(cj16*cj17);
IkReal x1038=(cj13*sj14);
IkReal x1039=(r00*sj17);
IkReal x1040=((0.425)*sj13);
IkReal x1041=((1.0)*x1030);
IkReal x1042=((1.0)*x1031);
IkReal x1043=((0.39225)*x1031);
IkReal x1044=((0.39225)*x1030);
evalcond[0]=(((r10*x1037))+x1030+(((-1.0)*x1035*x1036)));
evalcond[1]=(((r00*x1037))+(((-1.0)*r01*x1036))+(((-1.0)*x1042)));
evalcond[2]=((((-1.0)*x1032*x1041))+(((-1.0)*x1033))+(((-1.0)*x1039))+(((-1.0)*x1038*x1041)));
evalcond[3]=((((-1.0)*x1032*x1042))+(((-1.0)*x1034))+(((-1.0)*x1038*x1042))+(((-1.0)*cj17*x1035)));
evalcond[4]=(((x1038*x1044))+(((-0.10915)*x1031))+(((-1.0)*px))+((x1030*x1040))+((x1032*x1044))+(((-0.09465)*x1033))+(((-0.09465)*x1039)));
evalcond[5]=(((x1038*x1043))+(((-0.09465)*cj17*r11))+(((0.10915)*x1030))+((x1031*x1040))+(((-1.0)*py))+((x1032*x1043))+(((-0.09465)*x1034)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
IkReal x1045=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1045);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1045);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
j16eval[0]=r22;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
CheckValue<IkReal> x1046=IKPowWithIntegerCheck(r22,-1);
if(!x1046.valid){
continue;
}
cj16array[0]=((-1.0)*(x1046.value)*(((((-1.0)*cj13*sj14))+(((-1.0)*cj14*sj13)))));
if( cj16array[0] >= -1-IKFAST_SINCOS_THRESH && cj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKacos(cj16array[0]);
    sj16array[0] = IKsin(j16array[0]);
    cj16array[1] = cj16array[0];
    j16array[1] = -j16array[0];
    sj16array[1] = -sj16array[0];
}
else if( isnan(cj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKsin(j16)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j17eval[1];
IkReal x1047=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1047);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1047);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
j17eval[0]=sj16;
if( IKabs(j17eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j17array[2], cj17array[2], sj17array[2];
bool j17valid[2]={false};
_nj17 = 2;
CheckValue<IkReal> x1049 = IKatan2WithCheck(IkReal((r00*sj16)),IkReal(((-1.0)*r01*sj16)),IKFAST_ATAN2_MAGTHRESH);
if(!x1049.valid){
continue;
}
IkReal x1048=x1049.value;
j17array[0]=((-1.0)*x1048);
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
j17array[1]=((3.14159265358979)+(((-1.0)*x1048)));
sj17array[1]=IKsin(j17array[1]);
cj17array[1]=IKcos(j17array[1]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
if( j17array[1] > IKPI )
{
    j17array[1]-=IK2PI;
}
else if( j17array[1] < -IKPI )
{    j17array[1]+=IK2PI;
}
j17valid[1] = true;
for(int ij17 = 0; ij17 < 2; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 2; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[1];
evalcond[0]=(((r10*sj16*(IKcos(j17))))+(((-1.0)*r11*sj16*(IKsin(j17)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x1050=(cj16*cj17);
IkReal x1051=(cj16*sj17);
if( IKabs(((((-1.0)*r01*x1051))+((r00*x1050)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x1051))+(((-1.0)*r10*x1050)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x1051))+((r00*x1050))))+IKsqr((((r11*x1051))+(((-1.0)*r10*x1050))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-1.0)*r01*x1051))+((r00*x1050))), (((r11*x1051))+(((-1.0)*r10*x1050))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x1052=IKcos(j12);
IkReal x1053=IKsin(j12);
IkReal x1054=(cj14*sj13);
IkReal x1055=((0.09465)*cj17);
IkReal x1056=(r10*sj17);
IkReal x1057=(cj16*cj17);
IkReal x1058=(cj13*sj14);
IkReal x1059=(r00*sj17);
IkReal x1060=((0.425)*sj13);
IkReal x1061=((1.0)*x1052);
IkReal x1062=((1.0)*cj16*sj17);
IkReal x1063=((1.0)*x1053);
IkReal x1064=((0.39225)*x1053);
IkReal x1065=((0.39225)*x1052);
evalcond[0]=(x1052+(((-1.0)*r11*x1062))+((r10*x1057)));
evalcond[1]=((((-1.0)*r01*x1062))+((r00*x1057))+(((-1.0)*x1063)));
evalcond[2]=(x1059+(((-1.0)*x1058*x1061))+((cj17*r01))+(((-1.0)*x1054*x1061)));
evalcond[3]=(x1056+(((-1.0)*x1058*x1063))+((cj17*r11))+(((-1.0)*x1054*x1063)));
evalcond[4]=((((-1.0)*r01*x1055))+((x1054*x1065))+(((-0.09465)*x1059))+(((-1.0)*px))+(((-0.10915)*x1053))+((x1052*x1060))+((x1058*x1065)));
evalcond[5]=(((x1054*x1064))+(((-0.09465)*x1056))+(((-1.0)*py))+(((-1.0)*r11*x1055))+((x1053*x1060))+(((0.10915)*x1052))+((x1058*x1064)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12, j16, j17]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
CheckValue<IkReal> x1066=IKPowWithIntegerCheck(cj15,-1);
if(!x1066.valid){
continue;
}
CheckValue<IkReal> x1067=IKPowWithIntegerCheck(r22,-1);
if(!x1067.valid){
continue;
}
cj16array[0]=((x1066.value)*(x1067.value)*(((((-1.0)*cj13*sj14))+(((-1.0)*cj14*sj13)))));
if( cj16array[0] >= -1-IKFAST_SINCOS_THRESH && cj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKacos(cj16array[0]);
    sj16array[0] = IKsin(j16array[0]);
    cj16array[1] = cj16array[0];
    j16array[1] = -j16array[0];
    sj16array[1] = -sj16array[0];
}
else if( isnan(cj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKsin(j16)));
evalcond[1]=((((-1.0)*cj13*cj14))+(((-1.0)*r22*sj15*(IKcos(j16))))+((sj13*sj14)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j17eval[1];
IkReal x1068=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1068);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1068);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x1069=((12.0)*px);
IkReal x1070=((0.3786)*r01);
IkReal x1071=((12.0)*py);
IkReal x1072=((0.3786)*r11);
IkReal x1073=((3.138)*r11);
IkReal x1074=((6.276)*r01);
IkReal x1075=(cj16*sj13);
IkReal x1076=((0.4366)*cj16);
IkReal x1077=((6.276)*r11);
IkReal x1078=((3.138)*r01);
IkReal x1079=(cj16*r11);
IkReal x1080=((1.569)*r00);
IkReal x1081=((1.569)*r10);
IkReal x1082=(cj16*r01);
IkReal x1083=(r00*x1076);
IkReal x1084=(r10*x1076);
IkReal x1085=(cj14*x1075);
IkReal x1086=(cj13*cj16*sj14);
IkReal x1087=((1.7)*r10*x1075);
IkReal x1088=((1.7)*r00*x1075);
IkReal x1089=(x1081*x1086);
IkReal x1090=(x1081*x1085);
IkReal x1091=(x1072+x1084);
IkReal x1092=(x1080*x1085);
IkReal x1093=(x1080*x1086);
IkReal x1094=(x1092+x1093+x1088);
IkReal x1095=(x1070+x1090+x1087+x1083+x1089);
j17eval[0]=((((0.5)*(IKabs(((((-1.0)*x1095))+(((-1.0)*x1069)))))))+(((0.5)*(IKabs((x1091+(((-1.0)*x1094))+(((-4.0)*py)))))))+(((0.5)*(IKabs((x1095+(((-4.0)*px)))))))+(((0.5)*(IKabs((x1094+(((-1.0)*x1091))+(((-1.0)*x1071)))))))+(((0.5)*(IKabs(((((-1.0)*x1074*x1085))+(((-1.0)*x1074*x1086))+(((1.7464)*x1079))+(((-1.5144)*r10))+(((-6.8)*r01*x1075)))))))+(IKabs(((((-1.0)*x1078*x1085))+(((-1.0)*x1078*x1086))+(((-3.4)*r01*x1075))+(((0.8732)*x1079))+(((-0.7572)*r10)))))+(((0.5)*(IKabs(((((1.7464)*x1082))+(((6.8)*r11*x1075))+((x1077*x1085))+((x1077*x1086))+(((-1.5144)*r00)))))))+(IKabs(((((0.8732)*x1082))+((x1073*x1086))+((x1073*x1085))+(((3.4)*r11*x1075))+(((-0.7572)*r00)))))+(((0.5)*(IKabs((x1091+(((-1.0)*x1094))+(((-1.0)*x1071)))))))+(((0.5)*(IKabs((x1095+(((-1.0)*x1069))))))));
if( IKabs(j17eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j12, j17]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j17evalpoly[1];
IkReal x1096=((12.0)*py);
IkReal x1097=((0.3786)*r11);
IkReal x1098=((4.0)*py);
IkReal x1099=(cj16*r11);
IkReal x1100=((1.569)*r00);
IkReal x1101=(cj16*sj13);
IkReal x1102=((0.4366)*cj16*r10);
IkReal x1103=(r01*x1101);
IkReal x1104=(cj13*cj16*sj14);
IkReal x1105=((1.7)*r00*x1101);
IkReal x1106=(x1102+x1097);
IkReal x1107=(cj14*x1100*x1101);
IkReal x1108=(x1100*x1104);
IkReal x1109=(x1107+x1105+x1108);
IkReal x1110=((((0.8732)*x1099))+(((-3.4)*x1103))+(((-3.138)*cj14*x1103))+(((-3.138)*r01*x1104))+(((-0.7572)*r10)));
op[0]=(x1106+(((-1.0)*x1098))+(((-1.0)*x1109)));
op[1]=x1110;
op[2]=(x1106+(((-1.0)*x1096))+(((-1.0)*x1109)));
op[3]=((((1.7464)*x1099))+(((-6.8)*x1103))+(((-6.276)*r01*x1104))+(((-1.5144)*r10))+(((-6.276)*cj14*x1103)));
op[4]=(x1109+(((-1.0)*x1096))+(((-1.0)*x1106)));
op[5]=x1110;
op[6]=(x1109+(((-1.0)*x1098))+(((-1.0)*x1106)));
polyroots6(op,zeror,numroots);
IkReal j17array[6], cj17array[6], sj17array[6], tempj17array[1];
int numsolutions = 0;
for(int ij17 = 0; ij17 < numroots; ++ij17)
{
IkReal htj17 = zeror[ij17];
tempj17array[0]=((2.0)*(atan(htj17)));
for(int kj17 = 0; kj17 < 1; ++kj17)
{
j17array[numsolutions] = tempj17array[kj17];
if( j17array[numsolutions] > IKPI )
{
    j17array[numsolutions]-=IK2PI;
}
else if( j17array[numsolutions] < -IKPI )
{
    j17array[numsolutions]+=IK2PI;
}
sj17array[numsolutions] = IKsin(j17array[numsolutions]);
cj17array[numsolutions] = IKcos(j17array[numsolutions]);
numsolutions++;
}
}
bool j17valid[6]={true,true,true,true,true,true};
_nj17 = 6;
for(int ij17 = 0; ij17 < numsolutions; ++ij17)
    {
if( !j17valid[ij17] )
{
    continue;
}
    j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
htj17 = IKtan(j17/2);

IkReal x1111=((0.3786)*r01);
IkReal x1112=((12.0)*px);
IkReal x1113=((4.0)*px);
IkReal x1114=(cj16*r10);
IkReal x1115=(cj13*sj14);
IkReal x1116=(cj16*r11);
IkReal x1117=(cj14*sj13);
IkReal x1118=(cj16*r01);
IkReal x1119=((0.4366)*cj16*r00);
IkReal x1120=((1.7)*sj13*x1114);
IkReal x1121=((1.569)*x1114*x1115);
IkReal x1122=((1.569)*x1114*x1117);
IkReal x1123=((((3.138)*x1115*x1116))+(((3.4)*sj13*x1116))+(((0.8732)*x1118))+(((-0.7572)*r00))+(((3.138)*x1116*x1117)));
IkReal x1124=(x1111+x1119+x1120+x1121+x1122);
j17evalpoly[0]=((((htj17*htj17*htj17)*(((((1.7464)*x1118))+(((6.8)*sj13*x1116))+(((-1.5144)*r00))+(((6.276)*x1116*x1117))+(((6.276)*x1115*x1116))))))+(((htj17*htj17*htj17*htj17*htj17*htj17)*((x1124+(((-1.0)*x1113))))))+(((htj17*htj17*htj17*htj17)*((x1124+(((-1.0)*x1112))))))+((htj17*x1123))+(((-1.0)*x1124))+((x1123*(htj17*htj17*htj17*htj17*htj17)))+(((htj17*htj17)*(((((-1.0)*x1124))+(((-1.0)*x1112))))))+(((-1.0)*x1113)));
if( IKabs(j17evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < numsolutions; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x1125=(cj16*cj17);
IkReal x1126=(cj16*sj17);
if( IKabs((((r00*x1125))+(((-1.0)*r01*x1126)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x1125))+((r11*x1126)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x1125))+(((-1.0)*r01*x1126))))+IKsqr(((((-1.0)*r10*x1125))+((r11*x1126))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2((((r00*x1125))+(((-1.0)*r01*x1126))), ((((-1.0)*r10*x1125))+((r11*x1126))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x1127=IKcos(j12);
IkReal x1128=IKsin(j12);
IkReal x1129=((1.0)*sj14);
IkReal x1130=((1.0)*cj14);
IkReal x1131=(cj17*r01);
IkReal x1132=((0.09465)*sj17);
IkReal x1133=((1.0)*r11);
IkReal x1134=(cj16*sj17);
IkReal x1135=(cj17*sj15);
IkReal x1136=(cj15*sj16);
IkReal x1137=(cj17*r10);
IkReal x1138=((1.0)*r00);
IkReal x1139=((0.39225)*sj14);
IkReal x1140=(cj15*sj17);
IkReal x1141=(sj15*sj17);
IkReal x1142=((1.0)*r10);
IkReal x1143=((0.39225)*cj14);
IkReal x1144=(sj16*x1141);
IkReal x1145=(cj13*x1128);
IkReal x1146=(sj13*x1127);
IkReal x1147=(cj13*x1127);
IkReal x1148=(sj13*x1128);
evalcond[0]=(x1127+((cj16*x1137))+(((-1.0)*x1133*x1134)));
evalcond[1]=((((-1.0)*r01*x1134))+(((-1.0)*x1128))+((cj16*cj17*r00)));
evalcond[2]=((((-1.0)*x1129*x1146))+((sj15*x1131))+((cj14*x1147))+((r01*sj17*x1136))+((r00*x1141))+(((-1.0)*cj17*x1136*x1138)));
evalcond[3]=((((-1.0)*x1129*x1148))+((cj14*x1145))+((r11*sj17*x1136))+(((-1.0)*x1136*x1137))+((r10*x1141))+((r11*x1135)));
evalcond[4]=((((-1.0)*sj16*x1135*x1138))+(((-1.0)*x1129*x1147))+(((-1.0)*cj15*x1131))+(((-1.0)*x1130*x1146))+((r01*x1144))+(((-1.0)*x1138*x1140)));
evalcond[5]=((((-1.0)*x1140*x1142))+(((-1.0)*cj15*cj17*x1133))+((r11*x1144))+(((-1.0)*x1129*x1145))+(((-1.0)*x1130*x1148))+(((-1.0)*sj16*x1135*x1142)));
evalcond[6]=((((-0.09465)*x1131))+((x1143*x1146))+(((0.425)*x1146))+(((-0.10915)*x1128))+(((-1.0)*px))+((x1139*x1147))+(((-1.0)*r00*x1132)));
evalcond[7]=(((x1143*x1148))+(((-0.09465)*cj17*r11))+(((0.10915)*x1127))+(((-1.0)*r10*x1132))+(((0.425)*x1148))+(((-1.0)*py))+((x1139*x1145)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
CheckValue<IkReal> x1149=IKPowWithIntegerCheck(r22,-1);
if(!x1149.valid){
continue;
}
CheckValue<IkReal> x1150=IKPowWithIntegerCheck(sj15,-1);
if(!x1150.valid){
continue;
}
cj16array[0]=((x1149.value)*(x1150.value)*(((((-1.0)*cj13*cj14))+((sj13*sj14)))));
if( cj16array[0] >= -1-IKFAST_SINCOS_THRESH && cj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKacos(cj16array[0]);
    sj16array[0] = IKsin(j16array[0]);
    cj16array[1] = cj16array[0];
    j16array[1] = -j16array[0];
    sj16array[1] = -sj16array[0];
}
else if( isnan(cj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKsin(j16)));
evalcond[1]=((((-1.0)*cj15*r22*(IKcos(j16))))+(((-1.0)*cj13*sj14))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j17eval[1];
IkReal x1151=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1151);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1151);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x1152=((12.0)*px);
IkReal x1153=((0.3786)*r01);
IkReal x1154=((12.0)*py);
IkReal x1155=((0.3786)*r11);
IkReal x1156=((3.138)*r11);
IkReal x1157=((6.276)*r01);
IkReal x1158=(cj16*sj13);
IkReal x1159=((0.4366)*cj16);
IkReal x1160=((6.276)*r11);
IkReal x1161=((3.138)*r01);
IkReal x1162=(cj16*r11);
IkReal x1163=((1.569)*r00);
IkReal x1164=((1.569)*r10);
IkReal x1165=(cj16*r01);
IkReal x1166=(r00*x1159);
IkReal x1167=(r10*x1159);
IkReal x1168=(cj14*x1158);
IkReal x1169=(cj13*cj16*sj14);
IkReal x1170=((1.7)*r10*x1158);
IkReal x1171=((1.7)*r00*x1158);
IkReal x1172=(x1164*x1169);
IkReal x1173=(x1164*x1168);
IkReal x1174=(x1155+x1167);
IkReal x1175=(x1163*x1168);
IkReal x1176=(x1163*x1169);
IkReal x1177=(x1176+x1175+x1171);
IkReal x1178=(x1153+x1166+x1173+x1172+x1170);
j17eval[0]=((IKabs(((((0.8732)*x1165))+(((3.4)*r11*x1158))+((x1156*x1168))+((x1156*x1169))+(((-0.7572)*r00)))))+(((0.5)*(IKabs(((((-1.0)*x1152))+(((-1.0)*x1178)))))))+(((0.5)*(IKabs((x1178+(((-4.0)*px)))))))+(((0.5)*(IKabs((x1174+(((-1.0)*x1177))+(((-4.0)*py)))))))+(((0.5)*(IKabs((x1177+(((-1.0)*x1154))+(((-1.0)*x1174)))))))+(((0.5)*(IKabs((x1174+(((-1.0)*x1154))+(((-1.0)*x1177)))))))+(((0.5)*(IKabs((x1178+(((-1.0)*x1152)))))))+(IKabs(((((-3.4)*r01*x1158))+(((0.8732)*x1162))+(((-0.7572)*r10))+(((-1.0)*x1161*x1169))+(((-1.0)*x1161*x1168)))))+(((0.5)*(IKabs(((((1.7464)*x1162))+(((-6.8)*r01*x1158))+(((-1.5144)*r10))+(((-1.0)*x1157*x1168))+(((-1.0)*x1157*x1169)))))))+(((0.5)*(IKabs(((((6.8)*r11*x1158))+(((1.7464)*x1165))+(((-1.5144)*r00))+((x1160*x1169))+((x1160*x1168))))))));
if( IKabs(j17eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j12, j17]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j17evalpoly[1];
IkReal x1179=((12.0)*py);
IkReal x1180=((0.3786)*r11);
IkReal x1181=((4.0)*py);
IkReal x1182=(cj16*r11);
IkReal x1183=((1.569)*r00);
IkReal x1184=(cj16*sj13);
IkReal x1185=((0.4366)*cj16*r10);
IkReal x1186=(r01*x1184);
IkReal x1187=(cj13*cj16*sj14);
IkReal x1188=((1.7)*r00*x1184);
IkReal x1189=(x1185+x1180);
IkReal x1190=(cj14*x1183*x1184);
IkReal x1191=(x1183*x1187);
IkReal x1192=(x1188+x1191+x1190);
IkReal x1193=((((-3.4)*x1186))+(((-3.138)*r01*x1187))+(((0.8732)*x1182))+(((-0.7572)*r10))+(((-3.138)*cj14*x1186)));
op[0]=(x1189+(((-1.0)*x1192))+(((-1.0)*x1181)));
op[1]=x1193;
op[2]=(x1189+(((-1.0)*x1192))+(((-1.0)*x1179)));
op[3]=((((1.7464)*x1182))+(((-6.276)*cj14*x1186))+(((-6.8)*x1186))+(((-6.276)*r01*x1187))+(((-1.5144)*r10)));
op[4]=(x1192+(((-1.0)*x1189))+(((-1.0)*x1179)));
op[5]=x1193;
op[6]=(x1192+(((-1.0)*x1189))+(((-1.0)*x1181)));
polyroots6(op,zeror,numroots);
IkReal j17array[6], cj17array[6], sj17array[6], tempj17array[1];
int numsolutions = 0;
for(int ij17 = 0; ij17 < numroots; ++ij17)
{
IkReal htj17 = zeror[ij17];
tempj17array[0]=((2.0)*(atan(htj17)));
for(int kj17 = 0; kj17 < 1; ++kj17)
{
j17array[numsolutions] = tempj17array[kj17];
if( j17array[numsolutions] > IKPI )
{
    j17array[numsolutions]-=IK2PI;
}
else if( j17array[numsolutions] < -IKPI )
{
    j17array[numsolutions]+=IK2PI;
}
sj17array[numsolutions] = IKsin(j17array[numsolutions]);
cj17array[numsolutions] = IKcos(j17array[numsolutions]);
numsolutions++;
}
}
bool j17valid[6]={true,true,true,true,true,true};
_nj17 = 6;
for(int ij17 = 0; ij17 < numsolutions; ++ij17)
    {
if( !j17valid[ij17] )
{
    continue;
}
    j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
htj17 = IKtan(j17/2);

IkReal x1194=((0.3786)*r01);
IkReal x1195=((12.0)*px);
IkReal x1196=((4.0)*px);
IkReal x1197=(cj16*r10);
IkReal x1198=(cj13*sj14);
IkReal x1199=(cj16*r11);
IkReal x1200=(cj14*sj13);
IkReal x1201=(cj16*r01);
IkReal x1202=((0.4366)*cj16*r00);
IkReal x1203=((1.7)*sj13*x1197);
IkReal x1204=((1.569)*x1197*x1198);
IkReal x1205=((1.569)*x1197*x1200);
IkReal x1206=((((3.138)*x1198*x1199))+(((0.8732)*x1201))+(((3.138)*x1199*x1200))+(((-0.7572)*r00))+(((3.4)*sj13*x1199)));
IkReal x1207=(x1194+x1205+x1204+x1203+x1202);
j17evalpoly[0]=((((htj17*htj17*htj17*htj17*htj17*htj17)*((x1207+(((-1.0)*x1196))))))+(((-1.0)*x1196))+((htj17*x1206))+(((-1.0)*x1207))+(((htj17*htj17*htj17*htj17)*((x1207+(((-1.0)*x1195))))))+(((htj17*htj17)*(((((-1.0)*x1195))+(((-1.0)*x1207))))))+((x1206*(htj17*htj17*htj17*htj17*htj17)))+(((htj17*htj17*htj17)*(((((6.8)*sj13*x1199))+(((6.276)*x1198*x1199))+(((6.276)*x1199*x1200))+(((1.7464)*x1201))+(((-1.5144)*r00)))))));
if( IKabs(j17evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < numsolutions; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x1208=(cj16*cj17);
IkReal x1209=(cj16*sj17);
if( IKabs((((r00*x1208))+(((-1.0)*r01*x1209)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x1208))+((r11*x1209)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x1208))+(((-1.0)*r01*x1209))))+IKsqr(((((-1.0)*r10*x1208))+((r11*x1209))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2((((r00*x1208))+(((-1.0)*r01*x1209))), ((((-1.0)*r10*x1208))+((r11*x1209))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x1210=IKcos(j12);
IkReal x1211=IKsin(j12);
IkReal x1212=((1.0)*sj14);
IkReal x1213=((1.0)*cj14);
IkReal x1214=(cj17*r01);
IkReal x1215=((0.09465)*sj17);
IkReal x1216=((1.0)*r11);
IkReal x1217=(cj16*sj17);
IkReal x1218=(cj17*sj15);
IkReal x1219=(cj15*sj16);
IkReal x1220=(cj17*r10);
IkReal x1221=((1.0)*r00);
IkReal x1222=((0.39225)*sj14);
IkReal x1223=(cj15*sj17);
IkReal x1224=(sj15*sj17);
IkReal x1225=((1.0)*r10);
IkReal x1226=((0.39225)*cj14);
IkReal x1227=(sj16*x1224);
IkReal x1228=(cj13*x1211);
IkReal x1229=(sj13*x1210);
IkReal x1230=(cj13*x1210);
IkReal x1231=(sj13*x1211);
evalcond[0]=(x1210+((cj16*x1220))+(((-1.0)*x1216*x1217)));
evalcond[1]=(((cj16*cj17*r00))+(((-1.0)*r01*x1217))+(((-1.0)*x1211)));
evalcond[2]=(((r01*sj17*x1219))+((cj14*x1230))+(((-1.0)*x1212*x1229))+((sj15*x1214))+(((-1.0)*cj17*x1219*x1221))+((r00*x1224)));
evalcond[3]=(((r11*x1218))+((cj14*x1228))+((r11*sj17*x1219))+(((-1.0)*x1219*x1220))+((r10*x1224))+(((-1.0)*x1212*x1231)));
evalcond[4]=((((-1.0)*x1213*x1229))+((r01*x1227))+(((-1.0)*sj16*x1218*x1221))+(((-1.0)*cj15*x1214))+(((-1.0)*x1221*x1223))+(((-1.0)*x1212*x1230)));
evalcond[5]=((((-1.0)*x1212*x1228))+(((-1.0)*x1213*x1231))+(((-1.0)*sj16*x1218*x1225))+(((-1.0)*cj15*cj17*x1216))+((r11*x1227))+(((-1.0)*x1223*x1225)));
evalcond[6]=((((-0.10915)*x1211))+(((-0.09465)*x1214))+(((-1.0)*r00*x1215))+(((-1.0)*px))+((x1222*x1230))+(((0.425)*x1229))+((x1226*x1229)));
evalcond[7]=((((-0.09465)*cj17*r11))+(((-1.0)*py))+((x1226*x1231))+(((-1.0)*r10*x1215))+(((0.10915)*x1210))+(((0.425)*x1231))+((x1222*x1228)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12, j16, j17]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j17array[2], cj17array[2], sj17array[2];
bool j17valid[2]={false};
_nj17 = 2;
CheckValue<IkReal> x1234 = IKatan2WithCheck(IkReal(((-0.09465)*r21)),IkReal(((-0.09465)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1234.valid){
continue;
}
IkReal x1232=((1.0)*(x1234.value));
if((((((0.0089586225)*(r21*r21)))+(((0.0089586225)*(r20*r20))))) < -0.00001)
continue;
CheckValue<IkReal> x1235=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.0089586225)*(r21*r21)))+(((0.0089586225)*(r20*r20)))))),-1);
if(!x1235.valid){
continue;
}
if( (((x1235.value)*(((((0.425)*cj13))+(((0.39225)*cj13*cj14))+(((-1.0)*pz))+(((-0.39225)*sj13*sj14)))))) < -1-IKFAST_SINCOS_THRESH || (((x1235.value)*(((((0.425)*cj13))+(((0.39225)*cj13*cj14))+(((-1.0)*pz))+(((-0.39225)*sj13*sj14)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1233=IKasin(((x1235.value)*(((((0.425)*cj13))+(((0.39225)*cj13*cj14))+(((-1.0)*pz))+(((-0.39225)*sj13*sj14))))));
j17array[0]=((((-1.0)*x1233))+(((-1.0)*x1232)));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
j17array[1]=((3.14159265358979)+x1233+(((-1.0)*x1232)));
sj17array[1]=IKsin(j17array[1]);
cj17array[1]=IKcos(j17array[1]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
if( j17array[1] > IKPI )
{
    j17array[1]-=IK2PI;
}
else if( j17array[1] < -IKPI )
{    j17array[1]+=IK2PI;
}
j17valid[1] = true;
for(int ij17 = 0; ij17 < 2; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 2; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];

{
IkReal j16eval[2];
IkReal x1236=cj17*cj17;
IkReal x1237=r21*r21;
IkReal x1238=(cj15*x1237);
IkReal x1239=(x1238+(((-2.0)*cj15*cj17*r20*r21*sj17))+((cj15*x1236*(r20*r20)))+(((-1.0)*x1236*x1238))+((cj15*(r22*r22))));
j16eval[0]=x1239;
j16eval[1]=IKsign(x1239);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x1240=cj17*cj17;
IkReal x1241=r21*r21;
IkReal x1242=(sj15*x1241);
IkReal x1243=(x1242+((sj15*x1240*(r20*r20)))+(((-1.0)*x1240*x1242))+(((-2.0)*cj17*r20*r21*sj15*sj17))+((sj15*(r22*r22))));
j16eval[0]=x1243;
j16eval[1]=IKsign(x1243);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j12eval[2];
IkReal x1244=cj13*cj13;
IkReal x1245=cj14*cj14;
IkReal x1246=((133365000.0)*cj14);
IkReal x1247=((12.4570625281677)*cj14);
IkReal x1248=(cj13*sj13*sj14);
IkReal x1249=(x1244*x1245);
j12eval[0]=((7.19369221392727)+x1247+(((-1.0)*x1244*x1247))+(((-1.0)*x1244))+(((5.74856797255738)*x1245))+(((11.4971359451148)*cj14*x1248))+(((12.4570625281677)*x1248))+(((-11.4971359451148)*x1249)));
j12eval[1]=IKsign(((77015489.0)+(((-123088050.0)*x1249))+(((133365000.0)*x1248))+x1246+(((-1.0)*x1244*x1246))+(((123088050.0)*cj14*x1248))+(((61544025.0)*x1245))+(((-10705975.0)*x1244))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j15))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[3];
sj15=0;
cj15=1.0;
j15=0;
IkReal x1250=((((-1.0)*cj13*sj14))+(((-1.0)*cj14*sj13)));
j12eval[0]=x1250;
j12eval[1]=((IKabs((((r00*sj17))+((cj17*r01)))))+(IKabs((((cj17*r11))+((r10*sj17))))));
j12eval[2]=IKsign(x1250);
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=0;
cj15=1.0;
j15=0;
IkReal x1251=cj17*cj17;
IkReal x1252=r21*r21;
IkReal x1253=(cj17*r20);
IkReal x1254=(r21*sj17);
IkReal x1255=(cj13*sj14);
IkReal x1256=((1.0)*cj14*sj13);
IkReal x1257=(x1252+(r22*r22)+((x1251*(r20*r20)))+(((-1.0)*x1251*x1252))+(((-2.0)*x1253*x1254)));
j16eval[0]=x1257;
j16eval[1]=((IKabs(((((-1.0)*r22*x1256))+(((-1.0)*r22*x1255)))))+(IKabs(((((-1.0)*x1253*x1256))+((x1254*x1255))+((cj14*sj13*x1254))+(((-1.0)*x1253*x1255))))));
j16eval[2]=IKsign(x1257);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j12eval[1];
sj15=0;
cj15=1.0;
j15=0;
j12eval[0]=((((-1.0)*cj13*sj14))+(((-1.0)*cj14*sj13)));
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j13), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j14), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j12))))+(((-1.0)*px)));
evalcond[1]=((((0.10915)*(IKcos(j12))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j16eval[3];
sj15=0;
cj15=1.0;
j15=0;
j13=0;
sj13=0;
cj13=1.0;
j14=0;
sj14=0;
cj14=1.0;
IkReal x1258=(((r00*sj17))+((cj17*r01)));
j16eval[0]=x1258;
j16eval[1]=((IKabs(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))))+(IKabs((cj12*r22))));
j16eval[2]=IKsign(x1258);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=0;
cj15=1.0;
j15=0;
j13=0;
sj13=0;
cj13=1.0;
j14=0;
sj14=0;
cj14=1.0;
IkReal x1259=(((cj17*r11))+((r10*sj17)));
j16eval[0]=x1259;
j16eval[1]=((IKabs((r22*sj12)))+(IKabs(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12))))));
j16eval[2]=IKsign(x1259);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=0;
cj15=1.0;
j15=0;
j13=0;
sj13=0;
cj13=1.0;
j14=0;
sj14=0;
cj14=1.0;
IkReal x1260=cj17*cj17;
IkReal x1261=((1.0)*r11);
IkReal x1262=(cj17*r20);
IkReal x1263=(r21*sj17);
IkReal x1264=(((r11*r21))+((r10*r20*x1260))+((r12*r22))+(((-1.0)*r21*x1260*x1261))+(((-1.0)*cj17*r10*x1263))+(((-1.0)*sj17*x1261*x1262)));
j16eval[0]=x1264;
j16eval[1]=IKsign(x1264);
j16eval[2]=((IKabs((((cj12*x1263))+(((-1.0)*cj12*x1262)))))+(IKabs((cj12*r22))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x1265=cj17*cj17;
IkReal x1266=((1.0)*r11);
IkReal x1267=(cj17*r20);
IkReal x1268=(r21*sj17);
CheckValue<IkReal> x1269 = IKatan2WithCheck(IkReal((cj12*r22)),IkReal((((cj12*x1268))+(((-1.0)*cj12*x1267)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1269.valid){
continue;
}
CheckValue<IkReal> x1270=IKPowWithIntegerCheck(IKsign((((r11*r21))+((r10*r20*x1265))+(((-1.0)*r21*x1265*x1266))+((r12*r22))+(((-1.0)*sj17*x1266*x1267))+(((-1.0)*cj17*r10*x1268)))),-1);
if(!x1270.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x1269.value)+(((1.5707963267949)*(x1270.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x1271=IKcos(j16);
IkReal x1272=IKsin(j16);
CheckValue<IkReal> x1282=IKPowWithIntegerCheck(cj17,-1);
if(!x1282.valid){
continue;
}
IkReal x1273=x1282.value;
IkReal x1274=sj17*sj17;
IkReal x1275=(cj17*r20);
IkReal x1276=(cj17*r00);
IkReal x1277=(r21*sj17);
IkReal x1278=(cj17*r10);
IkReal x1279=((1.0)*x1272);
IkReal x1280=((1.0)*x1271);
IkReal x1281=(x1273*x1274);
evalcond[0]=((((-1.0)*r22*x1279))+(((-1.0)*x1277*x1280))+((x1271*x1275)));
evalcond[1]=((((-1.0)*r22*x1280))+((x1272*x1277))+(((-1.0)*x1275*x1279)));
evalcond[2]=((((-1.0)*r11*sj17*x1280))+(((-1.0)*r12*x1279))+cj12+((x1271*x1278)));
evalcond[3]=((((-1.0)*r01*sj17*x1280))+(((-1.0)*r02*x1279))+(((-1.0)*sj12))+((x1271*x1276)));
evalcond[4]=((((-1.0)*r00*x1279*x1281))+(((-1.0)*r02*x1280))+(((-1.0)*x1276*x1279))+cj12);
evalcond[5]=(sj12+(((-1.0)*r10*x1279*x1281))+(((-1.0)*x1278*x1279))+(((-1.0)*r12*x1280)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x1283=IKPowWithIntegerCheck(IKsign((((cj17*r11))+((r10*sj17)))),-1);
if(!x1283.valid){
continue;
}
CheckValue<IkReal> x1284 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x1284.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1283.value)))+(x1284.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x1285=IKcos(j16);
IkReal x1286=IKsin(j16);
CheckValue<IkReal> x1296=IKPowWithIntegerCheck(cj17,-1);
if(!x1296.valid){
continue;
}
IkReal x1287=x1296.value;
IkReal x1288=sj17*sj17;
IkReal x1289=(cj17*r20);
IkReal x1290=(cj17*r00);
IkReal x1291=(r21*sj17);
IkReal x1292=(cj17*r10);
IkReal x1293=((1.0)*x1286);
IkReal x1294=((1.0)*x1285);
IkReal x1295=(x1287*x1288);
evalcond[0]=(((x1285*x1289))+(((-1.0)*r22*x1293))+(((-1.0)*x1291*x1294)));
evalcond[1]=(((x1286*x1291))+(((-1.0)*x1289*x1293))+(((-1.0)*r22*x1294)));
evalcond[2]=((((-1.0)*r12*x1293))+((x1285*x1292))+cj12+(((-1.0)*r11*sj17*x1294)));
evalcond[3]=(((x1285*x1290))+(((-1.0)*r01*sj17*x1294))+(((-1.0)*sj12))+(((-1.0)*r02*x1293)));
evalcond[4]=((((-1.0)*r00*x1293*x1295))+cj12+(((-1.0)*x1290*x1293))+(((-1.0)*r02*x1294)));
evalcond[5]=((((-1.0)*r10*x1293*x1295))+(((-1.0)*r12*x1294))+sj12+(((-1.0)*x1292*x1293)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x1297 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1297.valid){
continue;
}
CheckValue<IkReal> x1298=IKPowWithIntegerCheck(IKsign((((r00*sj17))+((cj17*r01)))),-1);
if(!x1298.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x1297.value)+(((1.5707963267949)*(x1298.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x1299=IKcos(j16);
IkReal x1300=IKsin(j16);
CheckValue<IkReal> x1310=IKPowWithIntegerCheck(cj17,-1);
if(!x1310.valid){
continue;
}
IkReal x1301=x1310.value;
IkReal x1302=sj17*sj17;
IkReal x1303=(cj17*r20);
IkReal x1304=(cj17*r00);
IkReal x1305=(r21*sj17);
IkReal x1306=(cj17*r10);
IkReal x1307=((1.0)*x1300);
IkReal x1308=((1.0)*x1299);
IkReal x1309=(x1301*x1302);
evalcond[0]=(((x1299*x1303))+(((-1.0)*r22*x1307))+(((-1.0)*x1305*x1308)));
evalcond[1]=((((-1.0)*r22*x1308))+((x1300*x1305))+(((-1.0)*x1303*x1307)));
evalcond[2]=(((x1299*x1306))+(((-1.0)*r11*sj17*x1308))+cj12+(((-1.0)*r12*x1307)));
evalcond[3]=(((x1299*x1304))+(((-1.0)*r01*sj17*x1308))+(((-1.0)*r02*x1307))+(((-1.0)*sj12)));
evalcond[4]=((((-1.0)*r02*x1308))+cj12+(((-1.0)*r00*x1307*x1309))+(((-1.0)*x1304*x1307)));
evalcond[5]=((((-1.0)*x1306*x1307))+(((-1.0)*r10*x1307*x1309))+sj12+(((-1.0)*r12*x1308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j13), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j14, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j12))))+(((-1.0)*px)));
evalcond[1]=((((0.10915)*(IKcos(j12))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j16eval[3];
sj15=0;
cj15=1.0;
j15=0;
j13=0;
sj13=0;
cj13=1.0;
j14=3.14159265358979;
sj14=0;
cj14=-1.0;
IkReal x1311=(((r00*sj17))+((cj17*r01)));
j16eval[0]=x1311;
j16eval[1]=((IKabs(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))))+(IKabs((cj12*r22))));
j16eval[2]=IKsign(x1311);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=0;
cj15=1.0;
j15=0;
j13=0;
sj13=0;
cj13=1.0;
j14=3.14159265358979;
sj14=0;
cj14=-1.0;
IkReal x1312=(((cj17*r11))+((r10*sj17)));
j16eval[0]=x1312;
j16eval[1]=((IKabs((r22*sj12)))+(IKabs(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12))))));
j16eval[2]=IKsign(x1312);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=0;
cj15=1.0;
j15=0;
j13=0;
sj13=0;
cj13=1.0;
j14=3.14159265358979;
sj14=0;
cj14=-1.0;
IkReal x1313=cj17*cj17;
IkReal x1314=((1.0)*r11);
IkReal x1315=(cj17*r20);
IkReal x1316=(r21*sj17);
IkReal x1317=((((-1.0)*sj17*x1314*x1315))+((r11*r21))+((r12*r22))+(((-1.0)*cj17*r10*x1316))+(((-1.0)*r21*x1313*x1314))+((r10*r20*x1313)));
j16eval[0]=x1317;
j16eval[1]=IKsign(x1317);
j16eval[2]=((IKabs((((cj12*x1316))+(((-1.0)*cj12*x1315)))))+(IKabs((cj12*r22))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x1318=cj17*cj17;
IkReal x1319=((1.0)*r11);
IkReal x1320=(cj17*r20);
IkReal x1321=(r21*sj17);
CheckValue<IkReal> x1322=IKPowWithIntegerCheck(IKsign((((r11*r21))+((r12*r22))+(((-1.0)*r21*x1318*x1319))+(((-1.0)*cj17*r10*x1321))+(((-1.0)*sj17*x1319*x1320))+((r10*r20*x1318)))),-1);
if(!x1322.valid){
continue;
}
CheckValue<IkReal> x1323 = IKatan2WithCheck(IkReal((cj12*r22)),IkReal(((((-1.0)*cj12*x1320))+((cj12*x1321)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1323.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1322.value)))+(x1323.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x1324=IKcos(j16);
IkReal x1325=IKsin(j16);
IkReal x1326=((1.0)*sj12);
CheckValue<IkReal> x1336=IKPowWithIntegerCheck(cj17,-1);
if(!x1336.valid){
continue;
}
IkReal x1327=x1336.value;
IkReal x1328=sj17*sj17;
IkReal x1329=(cj17*r20);
IkReal x1330=(cj17*r00);
IkReal x1331=(r21*sj17);
IkReal x1332=(cj17*r10);
IkReal x1333=((1.0)*x1325);
IkReal x1334=((1.0)*x1324);
IkReal x1335=(x1327*x1328);
evalcond[0]=((((-1.0)*r22*x1333))+((x1324*x1329))+(((-1.0)*x1331*x1334)));
evalcond[1]=((((-1.0)*r22*x1334))+((x1325*x1331))+(((-1.0)*x1329*x1333)));
evalcond[2]=(cj12+((x1324*x1332))+(((-1.0)*r12*x1333))+(((-1.0)*r11*sj17*x1334)));
evalcond[3]=((((-1.0)*x1326))+(((-1.0)*r01*sj17*x1334))+(((-1.0)*r02*x1333))+((x1324*x1330)));
evalcond[4]=((((-1.0)*r00*x1333*x1335))+(((-1.0)*x1330*x1333))+(((-1.0)*r02*x1334))+(((-1.0)*cj12)));
evalcond[5]=((((-1.0)*x1326))+(((-1.0)*r10*x1333*x1335))+(((-1.0)*x1332*x1333))+(((-1.0)*r12*x1334)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x1337=IKPowWithIntegerCheck(IKsign((((cj17*r11))+((r10*sj17)))),-1);
if(!x1337.valid){
continue;
}
CheckValue<IkReal> x1338 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x1338.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1337.value)))+(x1338.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x1339=IKcos(j16);
IkReal x1340=IKsin(j16);
IkReal x1341=((1.0)*sj12);
CheckValue<IkReal> x1351=IKPowWithIntegerCheck(cj17,-1);
if(!x1351.valid){
continue;
}
IkReal x1342=x1351.value;
IkReal x1343=sj17*sj17;
IkReal x1344=(cj17*r20);
IkReal x1345=(cj17*r00);
IkReal x1346=(r21*sj17);
IkReal x1347=(cj17*r10);
IkReal x1348=((1.0)*x1340);
IkReal x1349=((1.0)*x1339);
IkReal x1350=(x1342*x1343);
evalcond[0]=((((-1.0)*x1346*x1349))+((x1339*x1344))+(((-1.0)*r22*x1348)));
evalcond[1]=(((x1340*x1346))+(((-1.0)*r22*x1349))+(((-1.0)*x1344*x1348)));
evalcond[2]=(((x1339*x1347))+(((-1.0)*r12*x1348))+cj12+(((-1.0)*r11*sj17*x1349)));
evalcond[3]=((((-1.0)*r02*x1348))+((x1339*x1345))+(((-1.0)*x1341))+(((-1.0)*r01*sj17*x1349)));
evalcond[4]=((((-1.0)*r00*x1348*x1350))+(((-1.0)*r02*x1349))+(((-1.0)*cj12))+(((-1.0)*x1345*x1348)));
evalcond[5]=((((-1.0)*x1347*x1348))+(((-1.0)*x1341))+(((-1.0)*r12*x1349))+(((-1.0)*r10*x1348*x1350)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x1352 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1352.valid){
continue;
}
CheckValue<IkReal> x1353=IKPowWithIntegerCheck(IKsign((((r00*sj17))+((cj17*r01)))),-1);
if(!x1353.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x1352.value)+(((1.5707963267949)*(x1353.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x1354=IKcos(j16);
IkReal x1355=IKsin(j16);
IkReal x1356=((1.0)*sj12);
CheckValue<IkReal> x1366=IKPowWithIntegerCheck(cj17,-1);
if(!x1366.valid){
continue;
}
IkReal x1357=x1366.value;
IkReal x1358=sj17*sj17;
IkReal x1359=(cj17*r20);
IkReal x1360=(cj17*r00);
IkReal x1361=(r21*sj17);
IkReal x1362=(cj17*r10);
IkReal x1363=((1.0)*x1355);
IkReal x1364=((1.0)*x1354);
IkReal x1365=(x1357*x1358);
evalcond[0]=(((x1354*x1359))+(((-1.0)*r22*x1363))+(((-1.0)*x1361*x1364)));
evalcond[1]=(((x1355*x1361))+(((-1.0)*x1359*x1363))+(((-1.0)*r22*x1364)));
evalcond[2]=((((-1.0)*r12*x1363))+((x1354*x1362))+cj12+(((-1.0)*r11*sj17*x1364)));
evalcond[3]=((((-1.0)*x1356))+(((-1.0)*r02*x1363))+((x1354*x1360))+(((-1.0)*r01*sj17*x1364)));
evalcond[4]=((((-1.0)*r00*x1363*x1365))+(((-1.0)*r02*x1364))+(((-1.0)*cj12))+(((-1.0)*x1360*x1363)));
evalcond[5]=((((-1.0)*x1356))+(((-1.0)*r12*x1364))+(((-1.0)*x1362*x1363))+(((-1.0)*r10*x1363*x1365)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j14), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j13), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
if( IKabs(((((2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.20734818680435)*px))+(((0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((2.20734818680435)*px))+(((0.566898951975751)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((2.20734818680435)*px))+(((0.566898951975751)*py))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[2];
IkReal x1367=IKcos(j12);
IkReal x1368=IKsin(j12);
evalcond[0]=((((-1.0)*px))+(((-0.10915)*x1368))+(((0.425)*x1367)));
evalcond[1]=((((0.10915)*x1367))+(((-1.0)*py))+(((0.425)*x1368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j16eval[3];
sj15=0;
cj15=1.0;
j15=0;
j13=1.5707963267949;
sj13=1.0;
cj13=0;
j14=1.5707963267949;
sj14=1.0;
cj14=0;
IkReal x1369=(((r00*sj17))+((cj17*r01)));
j16eval[0]=x1369;
j16eval[1]=((IKabs(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))))+(IKabs((cj12*r22))));
j16eval[2]=IKsign(x1369);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=0;
cj15=1.0;
j15=0;
j13=1.5707963267949;
sj13=1.0;
cj13=0;
j14=1.5707963267949;
sj14=1.0;
cj14=0;
IkReal x1370=(((cj17*r11))+((r10*sj17)));
j16eval[0]=x1370;
j16eval[1]=((IKabs((r22*sj12)))+(IKabs(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12))))));
j16eval[2]=IKsign(x1370);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=0;
cj15=1.0;
j15=0;
j13=1.5707963267949;
sj13=1.0;
cj13=0;
j14=1.5707963267949;
sj14=1.0;
cj14=0;
IkReal x1371=cj17*cj17;
IkReal x1372=((1.0)*r11);
IkReal x1373=(cj17*r20);
IkReal x1374=(r21*sj17);
IkReal x1375=((((-1.0)*r21*x1371*x1372))+((r10*r20*x1371))+((r11*r21))+(((-1.0)*cj17*r10*x1374))+(((-1.0)*sj17*x1372*x1373))+((r12*r22)));
j16eval[0]=x1375;
j16eval[1]=IKsign(x1375);
j16eval[2]=((IKabs((((cj12*x1374))+(((-1.0)*cj12*x1373)))))+(IKabs((cj12*r22))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x1376=cj17*cj17;
IkReal x1377=((1.0)*r11);
IkReal x1378=(cj17*r20);
IkReal x1379=(r21*sj17);
CheckValue<IkReal> x1380 = IKatan2WithCheck(IkReal((cj12*r22)),IkReal((((cj12*x1379))+(((-1.0)*cj12*x1378)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1380.valid){
continue;
}
CheckValue<IkReal> x1381=IKPowWithIntegerCheck(IKsign((((r10*r20*x1376))+((r11*r21))+(((-1.0)*cj17*r10*x1379))+((r12*r22))+(((-1.0)*sj17*x1377*x1378))+(((-1.0)*r21*x1376*x1377)))),-1);
if(!x1381.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x1380.value)+(((1.5707963267949)*(x1381.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x1382=IKcos(j16);
IkReal x1383=IKsin(j16);
IkReal x1384=((1.0)*sj12);
CheckValue<IkReal> x1394=IKPowWithIntegerCheck(cj17,-1);
if(!x1394.valid){
continue;
}
IkReal x1385=x1394.value;
IkReal x1386=sj17*sj17;
IkReal x1387=(cj17*r20);
IkReal x1388=(cj17*r00);
IkReal x1389=(r21*sj17);
IkReal x1390=(cj17*r10);
IkReal x1391=((1.0)*x1383);
IkReal x1392=((1.0)*x1382);
IkReal x1393=(x1385*x1386);
evalcond[0]=((((-1.0)*x1389*x1392))+(((-1.0)*r22*x1391))+((x1382*x1387)));
evalcond[1]=((((-1.0)*r22*x1392))+(((-1.0)*x1387*x1391))+((x1383*x1389)));
evalcond[2]=(((x1382*x1390))+(((-1.0)*r12*x1391))+cj12+(((-1.0)*r11*sj17*x1392)));
evalcond[3]=((((-1.0)*x1384))+(((-1.0)*r02*x1391))+(((-1.0)*r01*sj17*x1392))+((x1382*x1388)));
evalcond[4]=((((-1.0)*r02*x1392))+(((-1.0)*r00*x1391*x1393))+(((-1.0)*x1388*x1391))+(((-1.0)*cj12)));
evalcond[5]=((((-1.0)*x1384))+(((-1.0)*r10*x1391*x1393))+(((-1.0)*r12*x1392))+(((-1.0)*x1390*x1391)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x1395=IKPowWithIntegerCheck(IKsign((((cj17*r11))+((r10*sj17)))),-1);
if(!x1395.valid){
continue;
}
CheckValue<IkReal> x1396 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x1396.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1395.value)))+(x1396.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x1397=IKcos(j16);
IkReal x1398=IKsin(j16);
IkReal x1399=((1.0)*sj12);
CheckValue<IkReal> x1409=IKPowWithIntegerCheck(cj17,-1);
if(!x1409.valid){
continue;
}
IkReal x1400=x1409.value;
IkReal x1401=sj17*sj17;
IkReal x1402=(cj17*r20);
IkReal x1403=(cj17*r00);
IkReal x1404=(r21*sj17);
IkReal x1405=(cj17*r10);
IkReal x1406=((1.0)*x1398);
IkReal x1407=((1.0)*x1397);
IkReal x1408=(x1400*x1401);
evalcond[0]=(((x1397*x1402))+(((-1.0)*r22*x1406))+(((-1.0)*x1404*x1407)));
evalcond[1]=((((-1.0)*r22*x1407))+(((-1.0)*x1402*x1406))+((x1398*x1404)));
evalcond[2]=((((-1.0)*r12*x1406))+((x1397*x1405))+(((-1.0)*r11*sj17*x1407))+cj12);
evalcond[3]=(((x1397*x1403))+(((-1.0)*r01*sj17*x1407))+(((-1.0)*r02*x1406))+(((-1.0)*x1399)));
evalcond[4]=((((-1.0)*r00*x1406*x1408))+(((-1.0)*r02*x1407))+(((-1.0)*cj12))+(((-1.0)*x1403*x1406)));
evalcond[5]=((((-1.0)*r12*x1407))+(((-1.0)*x1405*x1406))+(((-1.0)*r10*x1406*x1408))+(((-1.0)*x1399)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x1410 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1410.valid){
continue;
}
CheckValue<IkReal> x1411=IKPowWithIntegerCheck(IKsign((((r00*sj17))+((cj17*r01)))),-1);
if(!x1411.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x1410.value)+(((1.5707963267949)*(x1411.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x1412=IKcos(j16);
IkReal x1413=IKsin(j16);
IkReal x1414=((1.0)*sj12);
CheckValue<IkReal> x1424=IKPowWithIntegerCheck(cj17,-1);
if(!x1424.valid){
continue;
}
IkReal x1415=x1424.value;
IkReal x1416=sj17*sj17;
IkReal x1417=(cj17*r20);
IkReal x1418=(cj17*r00);
IkReal x1419=(r21*sj17);
IkReal x1420=(cj17*r10);
IkReal x1421=((1.0)*x1413);
IkReal x1422=((1.0)*x1412);
IkReal x1423=(x1415*x1416);
evalcond[0]=(((x1412*x1417))+(((-1.0)*x1419*x1422))+(((-1.0)*r22*x1421)));
evalcond[1]=(((x1413*x1419))+(((-1.0)*x1417*x1421))+(((-1.0)*r22*x1422)));
evalcond[2]=((((-1.0)*r11*sj17*x1422))+cj12+(((-1.0)*r12*x1421))+((x1412*x1420)));
evalcond[3]=((((-1.0)*r01*sj17*x1422))+(((-1.0)*x1414))+((x1412*x1418))+(((-1.0)*r02*x1421)));
evalcond[4]=((((-1.0)*x1418*x1421))+(((-1.0)*cj12))+(((-1.0)*r02*x1422))+(((-1.0)*r00*x1421*x1423)));
evalcond[5]=((((-1.0)*x1414))+(((-1.0)*r10*x1421*x1423))+(((-1.0)*x1420*x1421))+(((-1.0)*r12*x1422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j14), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j13), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
if( IKabs(((((2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.20734818680435)*px))+(((0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((2.20734818680435)*px))+(((0.566898951975751)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((2.20734818680435)*px))+(((0.566898951975751)*py))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[2];
IkReal x1425=IKcos(j12);
IkReal x1426=IKsin(j12);
evalcond[0]=((((0.425)*x1425))+(((-1.0)*px))+(((-0.10915)*x1426)));
evalcond[1]=((((0.425)*x1426))+(((-1.0)*py))+(((0.10915)*x1425)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j16eval[3];
sj15=0;
cj15=1.0;
j15=0;
j13=1.5707963267949;
sj13=1.0;
cj13=0;
j14=-1.5707963267949;
sj14=-1.0;
cj14=0;
IkReal x1427=(((r00*sj17))+((cj17*r01)));
j16eval[0]=x1427;
j16eval[1]=((IKabs(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))))+(IKabs((cj12*r22))));
j16eval[2]=IKsign(x1427);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=0;
cj15=1.0;
j15=0;
j13=1.5707963267949;
sj13=1.0;
cj13=0;
j14=-1.5707963267949;
sj14=-1.0;
cj14=0;
IkReal x1428=(((cj17*r11))+((r10*sj17)));
j16eval[0]=x1428;
j16eval[1]=((IKabs((r22*sj12)))+(IKabs(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12))))));
j16eval[2]=IKsign(x1428);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=0;
cj15=1.0;
j15=0;
j13=1.5707963267949;
sj13=1.0;
cj13=0;
j14=-1.5707963267949;
sj14=-1.0;
cj14=0;
IkReal x1429=cj17*cj17;
IkReal x1430=((1.0)*r11);
IkReal x1431=(cj17*r20);
IkReal x1432=(r21*sj17);
IkReal x1433=((((-1.0)*sj17*x1430*x1431))+((r11*r21))+(((-1.0)*cj17*r10*x1432))+((r12*r22))+(((-1.0)*r21*x1429*x1430))+((r10*r20*x1429)));
j16eval[0]=x1433;
j16eval[1]=IKsign(x1433);
j16eval[2]=((IKabs((cj12*r22)))+(IKabs(((((-1.0)*cj12*x1431))+((cj12*x1432))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x1434=cj17*cj17;
IkReal x1435=((1.0)*r11);
IkReal x1436=(cj17*r20);
IkReal x1437=(r21*sj17);
CheckValue<IkReal> x1438=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1434*x1435))+((r10*r20*x1434))+((r11*r21))+(((-1.0)*cj17*r10*x1437))+((r12*r22))+(((-1.0)*sj17*x1435*x1436)))),-1);
if(!x1438.valid){
continue;
}
CheckValue<IkReal> x1439 = IKatan2WithCheck(IkReal((cj12*r22)),IkReal(((((-1.0)*cj12*x1436))+((cj12*x1437)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1439.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1438.value)))+(x1439.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x1440=IKcos(j16);
IkReal x1441=IKsin(j16);
CheckValue<IkReal> x1451=IKPowWithIntegerCheck(cj17,-1);
if(!x1451.valid){
continue;
}
IkReal x1442=x1451.value;
IkReal x1443=sj17*sj17;
IkReal x1444=(cj17*r20);
IkReal x1445=(cj17*r00);
IkReal x1446=(r21*sj17);
IkReal x1447=(cj17*r10);
IkReal x1448=((1.0)*x1441);
IkReal x1449=((1.0)*x1440);
IkReal x1450=(x1442*x1443);
evalcond[0]=((((-1.0)*x1446*x1449))+(((-1.0)*r22*x1448))+((x1440*x1444)));
evalcond[1]=((((-1.0)*r22*x1449))+((x1441*x1446))+(((-1.0)*x1444*x1448)));
evalcond[2]=(((x1440*x1447))+(((-1.0)*r12*x1448))+cj12+(((-1.0)*r11*sj17*x1449)));
evalcond[3]=((((-1.0)*r01*sj17*x1449))+((x1440*x1445))+(((-1.0)*sj12))+(((-1.0)*r02*x1448)));
evalcond[4]=((((-1.0)*x1445*x1448))+cj12+(((-1.0)*r02*x1449))+(((-1.0)*r00*x1448*x1450)));
evalcond[5]=((((-1.0)*r12*x1449))+(((-1.0)*x1447*x1448))+sj12+(((-1.0)*r10*x1448*x1450)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x1452=IKPowWithIntegerCheck(IKsign((((cj17*r11))+((r10*sj17)))),-1);
if(!x1452.valid){
continue;
}
CheckValue<IkReal> x1453 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x1453.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1452.value)))+(x1453.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x1454=IKcos(j16);
IkReal x1455=IKsin(j16);
CheckValue<IkReal> x1465=IKPowWithIntegerCheck(cj17,-1);
if(!x1465.valid){
continue;
}
IkReal x1456=x1465.value;
IkReal x1457=sj17*sj17;
IkReal x1458=(cj17*r20);
IkReal x1459=(cj17*r00);
IkReal x1460=(r21*sj17);
IkReal x1461=(cj17*r10);
IkReal x1462=((1.0)*x1455);
IkReal x1463=((1.0)*x1454);
IkReal x1464=(x1456*x1457);
evalcond[0]=(((x1454*x1458))+(((-1.0)*r22*x1462))+(((-1.0)*x1460*x1463)));
evalcond[1]=((((-1.0)*x1458*x1462))+(((-1.0)*r22*x1463))+((x1455*x1460)));
evalcond[2]=(((x1454*x1461))+cj12+(((-1.0)*r11*sj17*x1463))+(((-1.0)*r12*x1462)));
evalcond[3]=((((-1.0)*r02*x1462))+((x1454*x1459))+(((-1.0)*sj12))+(((-1.0)*r01*sj17*x1463)));
evalcond[4]=((((-1.0)*r02*x1463))+(((-1.0)*x1459*x1462))+cj12+(((-1.0)*r00*x1462*x1464)));
evalcond[5]=(sj12+(((-1.0)*r10*x1462*x1464))+(((-1.0)*x1461*x1462))+(((-1.0)*r12*x1463)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x1466 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1466.valid){
continue;
}
CheckValue<IkReal> x1467=IKPowWithIntegerCheck(IKsign((((r00*sj17))+((cj17*r01)))),-1);
if(!x1467.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x1466.value)+(((1.5707963267949)*(x1467.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x1468=IKcos(j16);
IkReal x1469=IKsin(j16);
CheckValue<IkReal> x1479=IKPowWithIntegerCheck(cj17,-1);
if(!x1479.valid){
continue;
}
IkReal x1470=x1479.value;
IkReal x1471=sj17*sj17;
IkReal x1472=(cj17*r20);
IkReal x1473=(cj17*r00);
IkReal x1474=(r21*sj17);
IkReal x1475=(cj17*r10);
IkReal x1476=((1.0)*x1469);
IkReal x1477=((1.0)*x1468);
IkReal x1478=(x1470*x1471);
evalcond[0]=((((-1.0)*r22*x1476))+(((-1.0)*x1474*x1477))+((x1468*x1472)));
evalcond[1]=((((-1.0)*r22*x1477))+(((-1.0)*x1472*x1476))+((x1469*x1474)));
evalcond[2]=((((-1.0)*r11*sj17*x1477))+(((-1.0)*r12*x1476))+cj12+((x1468*x1475)));
evalcond[3]=((((-1.0)*r01*sj17*x1477))+(((-1.0)*sj12))+(((-1.0)*r02*x1476))+((x1468*x1473)));
evalcond[4]=(cj12+(((-1.0)*r02*x1477))+(((-1.0)*r00*x1476*x1478))+(((-1.0)*x1473*x1476)));
evalcond[5]=((((-1.0)*r12*x1477))+(((-1.0)*r10*x1476*x1478))+sj12+(((-1.0)*x1475*x1476)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j13, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j14), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j12))))+(((-1.0)*px)));
evalcond[1]=((((0.10915)*(IKcos(j12))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j16eval[3];
sj15=0;
cj15=1.0;
j15=0;
j13=3.14159265358979;
sj13=0;
cj13=-1.0;
j14=0;
sj14=0;
cj14=1.0;
IkReal x1480=(((r00*sj17))+((cj17*r01)));
j16eval[0]=x1480;
j16eval[1]=((IKabs(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))))+(IKabs((cj12*r22))));
j16eval[2]=IKsign(x1480);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=0;
cj15=1.0;
j15=0;
j13=3.14159265358979;
sj13=0;
cj13=-1.0;
j14=0;
sj14=0;
cj14=1.0;
IkReal x1481=(((cj17*r11))+((r10*sj17)));
j16eval[0]=x1481;
j16eval[1]=((IKabs((r22*sj12)))+(IKabs(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12))))));
j16eval[2]=IKsign(x1481);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=0;
cj15=1.0;
j15=0;
j13=3.14159265358979;
sj13=0;
cj13=-1.0;
j14=0;
sj14=0;
cj14=1.0;
IkReal x1482=cj17*cj17;
IkReal x1483=((1.0)*r11);
IkReal x1484=(cj17*r20);
IkReal x1485=(r21*sj17);
IkReal x1486=(((r11*r21))+((r12*r22))+(((-1.0)*sj17*x1483*x1484))+(((-1.0)*r21*x1482*x1483))+(((-1.0)*cj17*r10*x1485))+((r10*r20*x1482)));
j16eval[0]=x1486;
j16eval[1]=IKsign(x1486);
j16eval[2]=((IKabs((cj12*r22)))+(IKabs(((((-1.0)*cj12*x1484))+((cj12*x1485))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x1487=cj17*cj17;
IkReal x1488=((1.0)*r11);
IkReal x1489=(cj17*r20);
IkReal x1490=(r21*sj17);
CheckValue<IkReal> x1491 = IKatan2WithCheck(IkReal((cj12*r22)),IkReal(((((-1.0)*cj12*x1489))+((cj12*x1490)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1491.valid){
continue;
}
CheckValue<IkReal> x1492=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1487*x1488))+((r11*r21))+(((-1.0)*sj17*x1488*x1489))+((r12*r22))+(((-1.0)*cj17*r10*x1490))+((r10*r20*x1487)))),-1);
if(!x1492.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x1491.value)+(((1.5707963267949)*(x1492.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x1493=IKcos(j16);
IkReal x1494=IKsin(j16);
IkReal x1495=((1.0)*sj12);
CheckValue<IkReal> x1505=IKPowWithIntegerCheck(cj17,-1);
if(!x1505.valid){
continue;
}
IkReal x1496=x1505.value;
IkReal x1497=sj17*sj17;
IkReal x1498=(cj17*r20);
IkReal x1499=(cj17*r00);
IkReal x1500=(r21*sj17);
IkReal x1501=(cj17*r10);
IkReal x1502=((1.0)*x1494);
IkReal x1503=((1.0)*x1493);
IkReal x1504=(x1496*x1497);
evalcond[0]=((((-1.0)*r22*x1502))+((x1493*x1498))+(((-1.0)*x1500*x1503)));
evalcond[1]=(((x1494*x1500))+(((-1.0)*x1498*x1502))+(((-1.0)*r22*x1503)));
evalcond[2]=((((-1.0)*r11*sj17*x1503))+cj12+((x1493*x1501))+(((-1.0)*r12*x1502)));
evalcond[3]=((((-1.0)*x1495))+(((-1.0)*r02*x1502))+((x1493*x1499))+(((-1.0)*r01*sj17*x1503)));
evalcond[4]=((((-1.0)*x1499*x1502))+(((-1.0)*r00*x1502*x1504))+(((-1.0)*r02*x1503))+(((-1.0)*cj12)));
evalcond[5]=((((-1.0)*x1495))+(((-1.0)*x1501*x1502))+(((-1.0)*r10*x1502*x1504))+(((-1.0)*r12*x1503)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x1506=IKPowWithIntegerCheck(IKsign((((cj17*r11))+((r10*sj17)))),-1);
if(!x1506.valid){
continue;
}
CheckValue<IkReal> x1507 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x1507.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1506.value)))+(x1507.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x1508=IKcos(j16);
IkReal x1509=IKsin(j16);
IkReal x1510=((1.0)*sj12);
CheckValue<IkReal> x1520=IKPowWithIntegerCheck(cj17,-1);
if(!x1520.valid){
continue;
}
IkReal x1511=x1520.value;
IkReal x1512=sj17*sj17;
IkReal x1513=(cj17*r20);
IkReal x1514=(cj17*r00);
IkReal x1515=(r21*sj17);
IkReal x1516=(cj17*r10);
IkReal x1517=((1.0)*x1509);
IkReal x1518=((1.0)*x1508);
IkReal x1519=(x1511*x1512);
evalcond[0]=((((-1.0)*x1515*x1518))+((x1508*x1513))+(((-1.0)*r22*x1517)));
evalcond[1]=(((x1509*x1515))+(((-1.0)*r22*x1518))+(((-1.0)*x1513*x1517)));
evalcond[2]=(((x1508*x1516))+cj12+(((-1.0)*r11*sj17*x1518))+(((-1.0)*r12*x1517)));
evalcond[3]=(((x1508*x1514))+(((-1.0)*x1510))+(((-1.0)*r02*x1517))+(((-1.0)*r01*sj17*x1518)));
evalcond[4]=((((-1.0)*r02*x1518))+(((-1.0)*x1514*x1517))+(((-1.0)*r00*x1517*x1519))+(((-1.0)*cj12)));
evalcond[5]=((((-1.0)*x1516*x1517))+(((-1.0)*x1510))+(((-1.0)*r10*x1517*x1519))+(((-1.0)*r12*x1518)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x1521 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1521.valid){
continue;
}
CheckValue<IkReal> x1522=IKPowWithIntegerCheck(IKsign((((r00*sj17))+((cj17*r01)))),-1);
if(!x1522.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x1521.value)+(((1.5707963267949)*(x1522.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x1523=IKcos(j16);
IkReal x1524=IKsin(j16);
IkReal x1525=((1.0)*sj12);
CheckValue<IkReal> x1535=IKPowWithIntegerCheck(cj17,-1);
if(!x1535.valid){
continue;
}
IkReal x1526=x1535.value;
IkReal x1527=sj17*sj17;
IkReal x1528=(cj17*r20);
IkReal x1529=(cj17*r00);
IkReal x1530=(r21*sj17);
IkReal x1531=(cj17*r10);
IkReal x1532=((1.0)*x1524);
IkReal x1533=((1.0)*x1523);
IkReal x1534=(x1526*x1527);
evalcond[0]=((((-1.0)*x1530*x1533))+(((-1.0)*r22*x1532))+((x1523*x1528)));
evalcond[1]=(((x1524*x1530))+(((-1.0)*r22*x1533))+(((-1.0)*x1528*x1532)));
evalcond[2]=((((-1.0)*r12*x1532))+((x1523*x1531))+(((-1.0)*r11*sj17*x1533))+cj12);
evalcond[3]=((((-1.0)*x1525))+((x1523*x1529))+(((-1.0)*r02*x1532))+(((-1.0)*r01*sj17*x1533)));
evalcond[4]=((((-1.0)*x1529*x1532))+(((-1.0)*r02*x1533))+(((-1.0)*cj12))+(((-1.0)*r00*x1532*x1534)));
evalcond[5]=((((-1.0)*r12*x1533))+(((-1.0)*x1531*x1532))+(((-1.0)*x1525))+(((-1.0)*r10*x1532*x1534)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j13, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j14, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j12))))+(((-1.0)*px)));
evalcond[1]=((((0.10915)*(IKcos(j12))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j16eval[3];
sj15=0;
cj15=1.0;
j15=0;
j13=3.14159265358979;
sj13=0;
cj13=-1.0;
j14=3.14159265358979;
sj14=0;
cj14=-1.0;
IkReal x1536=(((r00*sj17))+((cj17*r01)));
j16eval[0]=x1536;
j16eval[1]=((IKabs(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))))+(IKabs((cj12*r22))));
j16eval[2]=IKsign(x1536);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=0;
cj15=1.0;
j15=0;
j13=3.14159265358979;
sj13=0;
cj13=-1.0;
j14=3.14159265358979;
sj14=0;
cj14=-1.0;
IkReal x1537=(((cj17*r11))+((r10*sj17)));
j16eval[0]=x1537;
j16eval[1]=((IKabs((r22*sj12)))+(IKabs(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12))))));
j16eval[2]=IKsign(x1537);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=0;
cj15=1.0;
j15=0;
j13=3.14159265358979;
sj13=0;
cj13=-1.0;
j14=3.14159265358979;
sj14=0;
cj14=-1.0;
IkReal x1538=cj17*cj17;
IkReal x1539=((1.0)*r11);
IkReal x1540=(cj17*r20);
IkReal x1541=(r21*sj17);
IkReal x1542=((((-1.0)*sj17*x1539*x1540))+((r11*r21))+((r12*r22))+(((-1.0)*r21*x1538*x1539))+(((-1.0)*cj17*r10*x1541))+((r10*r20*x1538)));
j16eval[0]=x1542;
j16eval[1]=IKsign(x1542);
j16eval[2]=((IKabs(((((-1.0)*cj12*x1540))+((cj12*x1541)))))+(IKabs((cj12*r22))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x1543=cj17*cj17;
IkReal x1544=((1.0)*r11);
IkReal x1545=(cj17*r20);
IkReal x1546=(r21*sj17);
CheckValue<IkReal> x1547 = IKatan2WithCheck(IkReal((cj12*r22)),IkReal(((((-1.0)*cj12*x1545))+((cj12*x1546)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1547.valid){
continue;
}
CheckValue<IkReal> x1548=IKPowWithIntegerCheck(IKsign((((r11*r21))+((r12*r22))+(((-1.0)*sj17*x1544*x1545))+(((-1.0)*cj17*r10*x1546))+(((-1.0)*r21*x1543*x1544))+((r10*r20*x1543)))),-1);
if(!x1548.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x1547.value)+(((1.5707963267949)*(x1548.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x1549=IKcos(j16);
IkReal x1550=IKsin(j16);
CheckValue<IkReal> x1560=IKPowWithIntegerCheck(cj17,-1);
if(!x1560.valid){
continue;
}
IkReal x1551=x1560.value;
IkReal x1552=sj17*sj17;
IkReal x1553=(cj17*r20);
IkReal x1554=(cj17*r00);
IkReal x1555=(r21*sj17);
IkReal x1556=(cj17*r10);
IkReal x1557=((1.0)*x1550);
IkReal x1558=((1.0)*x1549);
IkReal x1559=(x1551*x1552);
evalcond[0]=((((-1.0)*r22*x1557))+(((-1.0)*x1555*x1558))+((x1549*x1553)));
evalcond[1]=((((-1.0)*r22*x1558))+((x1550*x1555))+(((-1.0)*x1553*x1557)));
evalcond[2]=(cj12+((x1549*x1556))+(((-1.0)*r12*x1557))+(((-1.0)*r11*sj17*x1558)));
evalcond[3]=((((-1.0)*r01*sj17*x1558))+(((-1.0)*r02*x1557))+((x1549*x1554))+(((-1.0)*sj12)));
evalcond[4]=((((-1.0)*r02*x1558))+cj12+(((-1.0)*r00*x1557*x1559))+(((-1.0)*x1554*x1557)));
evalcond[5]=((((-1.0)*r10*x1557*x1559))+sj12+(((-1.0)*r12*x1558))+(((-1.0)*x1556*x1557)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x1561=IKPowWithIntegerCheck(IKsign((((cj17*r11))+((r10*sj17)))),-1);
if(!x1561.valid){
continue;
}
CheckValue<IkReal> x1562 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x1562.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1561.value)))+(x1562.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x1563=IKcos(j16);
IkReal x1564=IKsin(j16);
CheckValue<IkReal> x1574=IKPowWithIntegerCheck(cj17,-1);
if(!x1574.valid){
continue;
}
IkReal x1565=x1574.value;
IkReal x1566=sj17*sj17;
IkReal x1567=(cj17*r20);
IkReal x1568=(cj17*r00);
IkReal x1569=(r21*sj17);
IkReal x1570=(cj17*r10);
IkReal x1571=((1.0)*x1564);
IkReal x1572=((1.0)*x1563);
IkReal x1573=(x1565*x1566);
evalcond[0]=((((-1.0)*r22*x1571))+(((-1.0)*x1569*x1572))+((x1563*x1567)));
evalcond[1]=((((-1.0)*x1567*x1571))+(((-1.0)*r22*x1572))+((x1564*x1569)));
evalcond[2]=(cj12+(((-1.0)*r11*sj17*x1572))+((x1563*x1570))+(((-1.0)*r12*x1571)));
evalcond[3]=((((-1.0)*r02*x1571))+(((-1.0)*sj12))+((x1563*x1568))+(((-1.0)*r01*sj17*x1572)));
evalcond[4]=((((-1.0)*r02*x1572))+cj12+(((-1.0)*x1568*x1571))+(((-1.0)*r00*x1571*x1573)));
evalcond[5]=((((-1.0)*x1570*x1571))+(((-1.0)*r10*x1571*x1573))+sj12+(((-1.0)*r12*x1572)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x1575 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1575.valid){
continue;
}
CheckValue<IkReal> x1576=IKPowWithIntegerCheck(IKsign((((r00*sj17))+((cj17*r01)))),-1);
if(!x1576.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x1575.value)+(((1.5707963267949)*(x1576.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x1577=IKcos(j16);
IkReal x1578=IKsin(j16);
CheckValue<IkReal> x1588=IKPowWithIntegerCheck(cj17,-1);
if(!x1588.valid){
continue;
}
IkReal x1579=x1588.value;
IkReal x1580=sj17*sj17;
IkReal x1581=(cj17*r20);
IkReal x1582=(cj17*r00);
IkReal x1583=(r21*sj17);
IkReal x1584=(cj17*r10);
IkReal x1585=((1.0)*x1578);
IkReal x1586=((1.0)*x1577);
IkReal x1587=(x1579*x1580);
evalcond[0]=((((-1.0)*r22*x1585))+((x1577*x1581))+(((-1.0)*x1583*x1586)));
evalcond[1]=((((-1.0)*r22*x1586))+(((-1.0)*x1581*x1585))+((x1578*x1583)));
evalcond[2]=((((-1.0)*r11*sj17*x1586))+cj12+((x1577*x1584))+(((-1.0)*r12*x1585)));
evalcond[3]=((((-1.0)*r02*x1585))+(((-1.0)*r01*sj17*x1586))+(((-1.0)*sj12))+((x1577*x1582)));
evalcond[4]=((((-1.0)*r00*x1585*x1587))+(((-1.0)*r02*x1586))+cj12+(((-1.0)*x1582*x1585)));
evalcond[5]=((((-1.0)*x1584*x1585))+sj12+(((-1.0)*r10*x1585*x1587))+(((-1.0)*r12*x1586)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j14), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j13), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
if( IKabs(((((-2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.566898951975751)*py))+(((-2.20734818680435)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((0.566898951975751)*py))+(((-2.20734818680435)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((0.566898951975751)*py))+(((-2.20734818680435)*px))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[2];
IkReal x1589=IKcos(j12);
IkReal x1590=IKsin(j12);
evalcond[0]=((((-0.425)*x1589))+(((-1.0)*px))+(((-0.10915)*x1590)));
evalcond[1]=((((-0.425)*x1590))+(((-1.0)*py))+(((0.10915)*x1589)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j16eval[3];
sj15=0;
cj15=1.0;
j15=0;
j13=-1.5707963267949;
sj13=-1.0;
cj13=0;
j14=1.5707963267949;
sj14=1.0;
cj14=0;
IkReal x1591=(((r00*sj17))+((cj17*r01)));
j16eval[0]=x1591;
j16eval[1]=((IKabs(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))))+(IKabs((cj12*r22))));
j16eval[2]=IKsign(x1591);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=0;
cj15=1.0;
j15=0;
j13=-1.5707963267949;
sj13=-1.0;
cj13=0;
j14=1.5707963267949;
sj14=1.0;
cj14=0;
IkReal x1592=(((cj17*r11))+((r10*sj17)));
j16eval[0]=x1592;
j16eval[1]=((IKabs((r22*sj12)))+(IKabs(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12))))));
j16eval[2]=IKsign(x1592);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=0;
cj15=1.0;
j15=0;
j13=-1.5707963267949;
sj13=-1.0;
cj13=0;
j14=1.5707963267949;
sj14=1.0;
cj14=0;
IkReal x1593=cj17*cj17;
IkReal x1594=((1.0)*r11);
IkReal x1595=(cj17*r20);
IkReal x1596=(r21*sj17);
IkReal x1597=(((r10*r20*x1593))+(((-1.0)*sj17*x1594*x1595))+((r11*r21))+((r12*r22))+(((-1.0)*cj17*r10*x1596))+(((-1.0)*r21*x1593*x1594)));
j16eval[0]=x1597;
j16eval[1]=IKsign(x1597);
j16eval[2]=((IKabs((((cj12*x1596))+(((-1.0)*cj12*x1595)))))+(IKabs((cj12*r22))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x1598=cj17*cj17;
IkReal x1599=((1.0)*r11);
IkReal x1600=(cj17*r20);
IkReal x1601=(r21*sj17);
CheckValue<IkReal> x1602=IKPowWithIntegerCheck(IKsign((((r10*r20*x1598))+((r11*r21))+(((-1.0)*sj17*x1599*x1600))+((r12*r22))+(((-1.0)*cj17*r10*x1601))+(((-1.0)*r21*x1598*x1599)))),-1);
if(!x1602.valid){
continue;
}
CheckValue<IkReal> x1603 = IKatan2WithCheck(IkReal((cj12*r22)),IkReal(((((-1.0)*cj12*x1600))+((cj12*x1601)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1603.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1602.value)))+(x1603.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x1604=IKcos(j16);
IkReal x1605=IKsin(j16);
CheckValue<IkReal> x1615=IKPowWithIntegerCheck(cj17,-1);
if(!x1615.valid){
continue;
}
IkReal x1606=x1615.value;
IkReal x1607=sj17*sj17;
IkReal x1608=(cj17*r20);
IkReal x1609=(cj17*r00);
IkReal x1610=(r21*sj17);
IkReal x1611=(cj17*r10);
IkReal x1612=((1.0)*x1605);
IkReal x1613=((1.0)*x1604);
IkReal x1614=(x1606*x1607);
evalcond[0]=((((-1.0)*x1610*x1613))+(((-1.0)*r22*x1612))+((x1604*x1608)));
evalcond[1]=((((-1.0)*r22*x1613))+(((-1.0)*x1608*x1612))+((x1605*x1610)));
evalcond[2]=((((-1.0)*r12*x1612))+cj12+(((-1.0)*r11*sj17*x1613))+((x1604*x1611)));
evalcond[3]=((((-1.0)*r01*sj17*x1613))+(((-1.0)*r02*x1612))+(((-1.0)*sj12))+((x1604*x1609)));
evalcond[4]=((((-1.0)*r02*x1613))+cj12+(((-1.0)*x1609*x1612))+(((-1.0)*r00*x1612*x1614)));
evalcond[5]=((((-1.0)*r12*x1613))+(((-1.0)*x1611*x1612))+(((-1.0)*r10*x1612*x1614))+sj12);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x1616=IKPowWithIntegerCheck(IKsign((((cj17*r11))+((r10*sj17)))),-1);
if(!x1616.valid){
continue;
}
CheckValue<IkReal> x1617 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x1617.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1616.value)))+(x1617.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x1618=IKcos(j16);
IkReal x1619=IKsin(j16);
CheckValue<IkReal> x1629=IKPowWithIntegerCheck(cj17,-1);
if(!x1629.valid){
continue;
}
IkReal x1620=x1629.value;
IkReal x1621=sj17*sj17;
IkReal x1622=(cj17*r20);
IkReal x1623=(cj17*r00);
IkReal x1624=(r21*sj17);
IkReal x1625=(cj17*r10);
IkReal x1626=((1.0)*x1619);
IkReal x1627=((1.0)*x1618);
IkReal x1628=(x1620*x1621);
evalcond[0]=((((-1.0)*r22*x1626))+(((-1.0)*x1624*x1627))+((x1618*x1622)));
evalcond[1]=((((-1.0)*x1622*x1626))+(((-1.0)*r22*x1627))+((x1619*x1624)));
evalcond[2]=((((-1.0)*r12*x1626))+cj12+(((-1.0)*r11*sj17*x1627))+((x1618*x1625)));
evalcond[3]=((((-1.0)*r01*sj17*x1627))+(((-1.0)*r02*x1626))+(((-1.0)*sj12))+((x1618*x1623)));
evalcond[4]=((((-1.0)*r00*x1626*x1628))+(((-1.0)*r02*x1627))+cj12+(((-1.0)*x1623*x1626)));
evalcond[5]=((((-1.0)*r12*x1627))+(((-1.0)*r10*x1626*x1628))+sj12+(((-1.0)*x1625*x1626)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x1630 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1630.valid){
continue;
}
CheckValue<IkReal> x1631=IKPowWithIntegerCheck(IKsign((((r00*sj17))+((cj17*r01)))),-1);
if(!x1631.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x1630.value)+(((1.5707963267949)*(x1631.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x1632=IKcos(j16);
IkReal x1633=IKsin(j16);
CheckValue<IkReal> x1643=IKPowWithIntegerCheck(cj17,-1);
if(!x1643.valid){
continue;
}
IkReal x1634=x1643.value;
IkReal x1635=sj17*sj17;
IkReal x1636=(cj17*r20);
IkReal x1637=(cj17*r00);
IkReal x1638=(r21*sj17);
IkReal x1639=(cj17*r10);
IkReal x1640=((1.0)*x1633);
IkReal x1641=((1.0)*x1632);
IkReal x1642=(x1634*x1635);
evalcond[0]=((((-1.0)*r22*x1640))+(((-1.0)*x1638*x1641))+((x1632*x1636)));
evalcond[1]=((((-1.0)*r22*x1641))+(((-1.0)*x1636*x1640))+((x1633*x1638)));
evalcond[2]=((((-1.0)*r12*x1640))+(((-1.0)*r11*sj17*x1641))+cj12+((x1632*x1639)));
evalcond[3]=((((-1.0)*r01*sj17*x1641))+(((-1.0)*sj12))+((x1632*x1637))+(((-1.0)*r02*x1640)));
evalcond[4]=((((-1.0)*r00*x1640*x1642))+cj12+(((-1.0)*x1637*x1640))+(((-1.0)*r02*x1641)));
evalcond[5]=((((-1.0)*r12*x1641))+(((-1.0)*x1639*x1640))+(((-1.0)*r10*x1640*x1642))+sj12);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j14), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j13), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
if( IKabs(((((-2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.566898951975751)*py))+(((-2.20734818680435)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((0.566898951975751)*py))+(((-2.20734818680435)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((0.566898951975751)*py))+(((-2.20734818680435)*px))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[2];
IkReal x1644=IKcos(j12);
IkReal x1645=IKsin(j12);
evalcond[0]=((((-1.0)*px))+(((-0.425)*x1644))+(((-0.10915)*x1645)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*x1644))+(((-0.425)*x1645)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j16eval[3];
sj15=0;
cj15=1.0;
j15=0;
j13=-1.5707963267949;
sj13=-1.0;
cj13=0;
j14=-1.5707963267949;
sj14=-1.0;
cj14=0;
IkReal x1646=(((r00*sj17))+((cj17*r01)));
j16eval[0]=x1646;
j16eval[1]=((IKabs(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))))+(IKabs((cj12*r22))));
j16eval[2]=IKsign(x1646);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=0;
cj15=1.0;
j15=0;
j13=-1.5707963267949;
sj13=-1.0;
cj13=0;
j14=-1.5707963267949;
sj14=-1.0;
cj14=0;
IkReal x1647=(((cj17*r11))+((r10*sj17)));
j16eval[0]=x1647;
j16eval[1]=((IKabs((r22*sj12)))+(IKabs(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12))))));
j16eval[2]=IKsign(x1647);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=0;
cj15=1.0;
j15=0;
j13=-1.5707963267949;
sj13=-1.0;
cj13=0;
j14=-1.5707963267949;
sj14=-1.0;
cj14=0;
IkReal x1648=cj17*cj17;
IkReal x1649=((1.0)*r11);
IkReal x1650=(cj17*r20);
IkReal x1651=(r21*sj17);
IkReal x1652=((((-1.0)*cj17*r10*x1651))+(((-1.0)*r21*x1648*x1649))+((r11*r21))+((r12*r22))+(((-1.0)*sj17*x1649*x1650))+((r10*r20*x1648)));
j16eval[0]=x1652;
j16eval[1]=IKsign(x1652);
j16eval[2]=((IKabs(((((-1.0)*cj12*x1650))+((cj12*x1651)))))+(IKabs((cj12*r22))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x1653=cj17*cj17;
IkReal x1654=((1.0)*r11);
IkReal x1655=(cj17*r20);
IkReal x1656=(r21*sj17);
CheckValue<IkReal> x1657=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1653*x1654))+(((-1.0)*cj17*r10*x1656))+((r11*r21))+(((-1.0)*sj17*x1654*x1655))+((r12*r22))+((r10*r20*x1653)))),-1);
if(!x1657.valid){
continue;
}
CheckValue<IkReal> x1658 = IKatan2WithCheck(IkReal((cj12*r22)),IkReal(((((-1.0)*cj12*x1655))+((cj12*x1656)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1658.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1657.value)))+(x1658.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x1659=IKcos(j16);
IkReal x1660=IKsin(j16);
IkReal x1661=((1.0)*sj12);
CheckValue<IkReal> x1671=IKPowWithIntegerCheck(cj17,-1);
if(!x1671.valid){
continue;
}
IkReal x1662=x1671.value;
IkReal x1663=sj17*sj17;
IkReal x1664=(cj17*r20);
IkReal x1665=(cj17*r00);
IkReal x1666=(r21*sj17);
IkReal x1667=(cj17*r10);
IkReal x1668=((1.0)*x1660);
IkReal x1669=((1.0)*x1659);
IkReal x1670=(x1662*x1663);
evalcond[0]=((((-1.0)*r22*x1668))+((x1659*x1664))+(((-1.0)*x1666*x1669)));
evalcond[1]=(((x1660*x1666))+(((-1.0)*r22*x1669))+(((-1.0)*x1664*x1668)));
evalcond[2]=((((-1.0)*r11*sj17*x1669))+(((-1.0)*r12*x1668))+cj12+((x1659*x1667)));
evalcond[3]=((((-1.0)*x1661))+((x1659*x1665))+(((-1.0)*r02*x1668))+(((-1.0)*r01*sj17*x1669)));
evalcond[4]=((((-1.0)*r00*x1668*x1670))+(((-1.0)*cj12))+(((-1.0)*r02*x1669))+(((-1.0)*x1665*x1668)));
evalcond[5]=((((-1.0)*x1667*x1668))+(((-1.0)*r12*x1669))+(((-1.0)*r10*x1668*x1670))+(((-1.0)*x1661)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x1672=IKPowWithIntegerCheck(IKsign((((cj17*r11))+((r10*sj17)))),-1);
if(!x1672.valid){
continue;
}
CheckValue<IkReal> x1673 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x1673.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1672.value)))+(x1673.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x1674=IKcos(j16);
IkReal x1675=IKsin(j16);
IkReal x1676=((1.0)*sj12);
CheckValue<IkReal> x1686=IKPowWithIntegerCheck(cj17,-1);
if(!x1686.valid){
continue;
}
IkReal x1677=x1686.value;
IkReal x1678=sj17*sj17;
IkReal x1679=(cj17*r20);
IkReal x1680=(cj17*r00);
IkReal x1681=(r21*sj17);
IkReal x1682=(cj17*r10);
IkReal x1683=((1.0)*x1675);
IkReal x1684=((1.0)*x1674);
IkReal x1685=(x1677*x1678);
evalcond[0]=((((-1.0)*x1681*x1684))+((x1674*x1679))+(((-1.0)*r22*x1683)));
evalcond[1]=(((x1675*x1681))+(((-1.0)*x1679*x1683))+(((-1.0)*r22*x1684)));
evalcond[2]=((((-1.0)*r12*x1683))+(((-1.0)*r11*sj17*x1684))+cj12+((x1674*x1682)));
evalcond[3]=(((x1674*x1680))+(((-1.0)*r01*sj17*x1684))+(((-1.0)*r02*x1683))+(((-1.0)*x1676)));
evalcond[4]=((((-1.0)*x1680*x1683))+(((-1.0)*r00*x1683*x1685))+(((-1.0)*cj12))+(((-1.0)*r02*x1684)));
evalcond[5]=((((-1.0)*r12*x1684))+(((-1.0)*r10*x1683*x1685))+(((-1.0)*x1682*x1683))+(((-1.0)*x1676)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x1687 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1687.valid){
continue;
}
CheckValue<IkReal> x1688=IKPowWithIntegerCheck(IKsign((((r00*sj17))+((cj17*r01)))),-1);
if(!x1688.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x1687.value)+(((1.5707963267949)*(x1688.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x1689=IKcos(j16);
IkReal x1690=IKsin(j16);
IkReal x1691=((1.0)*sj12);
CheckValue<IkReal> x1701=IKPowWithIntegerCheck(cj17,-1);
if(!x1701.valid){
continue;
}
IkReal x1692=x1701.value;
IkReal x1693=sj17*sj17;
IkReal x1694=(cj17*r20);
IkReal x1695=(cj17*r00);
IkReal x1696=(r21*sj17);
IkReal x1697=(cj17*r10);
IkReal x1698=((1.0)*x1690);
IkReal x1699=((1.0)*x1689);
IkReal x1700=(x1692*x1693);
evalcond[0]=((((-1.0)*x1696*x1699))+((x1689*x1694))+(((-1.0)*r22*x1698)));
evalcond[1]=(((x1690*x1696))+(((-1.0)*x1694*x1698))+(((-1.0)*r22*x1699)));
evalcond[2]=((((-1.0)*r11*sj17*x1699))+(((-1.0)*r12*x1698))+((x1689*x1697))+cj12);
evalcond[3]=((((-1.0)*x1691))+((x1689*x1695))+(((-1.0)*r02*x1698))+(((-1.0)*r01*sj17*x1699)));
evalcond[4]=((((-1.0)*r00*x1698*x1700))+(((-1.0)*r02*x1699))+(((-1.0)*cj12))+(((-1.0)*x1695*x1698)));
evalcond[5]=((((-1.0)*x1691))+(((-1.0)*r12*x1699))+(((-1.0)*x1697*x1698))+(((-1.0)*r10*x1698*x1700)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12, j16]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x1702=(cj13*sj14);
IkReal x1703=(cj14*sj13);
IkReal x1704=((20000.0)*px);
IkReal x1705=(cj17*r01);
IkReal x1706=((8500.0)*sj13);
IkReal x1707=(r00*sj17);
CheckValue<IkReal> x1708=IKPowWithIntegerCheck(((((-2183.0)*x1703))+(((-2183.0)*x1702))),-1);
if(!x1708.valid){
continue;
}
CheckValue<IkReal> x1709=IKPowWithIntegerCheck(((((-1.0)*x1703))+(((-1.0)*x1702))),-1);
if(!x1709.valid){
continue;
}
if( IKabs(((x1708.value)*(((((9738.0)*x1703*x1707))+(((9738.0)*x1703*x1705))+((x1703*x1704))+((x1706*x1707))+((x1705*x1706))+((x1702*x1704))+(((9738.0)*x1702*x1705))+(((9738.0)*x1702*x1707)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1709.value)*((x1705+x1707)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1708.value)*(((((9738.0)*x1703*x1707))+(((9738.0)*x1703*x1705))+((x1703*x1704))+((x1706*x1707))+((x1705*x1706))+((x1702*x1704))+(((9738.0)*x1702*x1705))+(((9738.0)*x1702*x1707))))))+IKsqr(((x1709.value)*((x1705+x1707))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((x1708.value)*(((((9738.0)*x1703*x1707))+(((9738.0)*x1703*x1705))+((x1703*x1704))+((x1706*x1707))+((x1705*x1706))+((x1702*x1704))+(((9738.0)*x1702*x1705))+(((9738.0)*x1702*x1707))))), ((x1709.value)*((x1705+x1707))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[4];
IkReal x1710=IKcos(j12);
IkReal x1711=IKsin(j12);
IkReal x1712=(cj14*sj13);
IkReal x1713=(r10*sj17);
IkReal x1714=(cj17*r01);
IkReal x1715=(r00*sj17);
IkReal x1716=(cj17*r11);
IkReal x1717=(cj13*sj14);
IkReal x1718=((0.425)*sj13);
IkReal x1719=((1.0)*x1710);
IkReal x1720=((0.39225)*x1710);
IkReal x1721=(x1711*x1717);
evalcond[0]=((((-1.0)*x1712*x1719))+(((-1.0)*x1715))+(((-1.0)*x1714))+(((-1.0)*x1717*x1719)));
evalcond[1]=((((-1.0)*x1716))+(((-1.0)*x1713))+(((-1.0)*x1721))+(((-1.0)*x1711*x1712)));
evalcond[2]=(((x1710*x1718))+(((-0.10915)*x1711))+((x1717*x1720))+(((-0.09465)*x1715))+(((-0.09465)*x1714))+(((-1.0)*px))+((x1712*x1720)));
evalcond[3]=((((0.39225)*x1721))+(((-0.09465)*x1713))+(((-0.09465)*x1716))+(((-1.0)*py))+(((0.39225)*x1711*x1712))+((x1711*x1718))+(((0.10915)*x1710)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j16eval[3];
sj15=0;
cj15=1.0;
j15=0;
IkReal x1722=(((r00*sj17))+((cj17*r01)));
j16eval[0]=x1722;
j16eval[1]=((IKabs(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))))+(IKabs((cj12*r22))));
j16eval[2]=IKsign(x1722);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=0;
cj15=1.0;
j15=0;
IkReal x1723=(((cj17*r11))+((r10*sj17)));
j16eval[0]=x1723;
j16eval[1]=((IKabs((r22*sj12)))+(IKabs(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12))))));
j16eval[2]=IKsign(x1723);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=0;
cj15=1.0;
j15=0;
IkReal x1724=((1.0)*cj12);
IkReal x1725=((1.0)*sj12);
IkReal x1726=(((r20*sj17))+((cj17*r21)));
j16eval[0]=x1726;
j16eval[1]=IKsign(x1726);
j16eval[2]=((IKabs(((((-1.0)*r12*x1725))+(((-1.0)*r02*x1724)))))+(IKabs(((((-1.0)*cj17*r00*x1724))+((cj12*r01*sj17))+((r11*sj12*sj17))+(((-1.0)*cj17*r10*x1725))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1728 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1728)==0){
continue;
}
IkReal x1727=pow(x1728,-0.5);
CheckValue<IkReal> x1729 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1729.valid){
continue;
}
IkReal gconst78=((-1.0)*(x1729.value));
IkReal gconst79=((-1.0)*r21*x1727);
IkReal gconst80=(r20*x1727);
CheckValue<IkReal> x1730 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1730.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j17+(x1730.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x1733 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1733.valid){
continue;
}
IkReal x1731=((-1.0)*(x1733.value));
IkReal x1732=x1727;
sj15=0;
cj15=1.0;
j15=0;
sj17=gconst79;
cj17=gconst80;
j17=x1731;
IkReal gconst78=x1731;
IkReal gconst79=((-1.0)*r21*x1732);
IkReal gconst80=(r20*x1732);
j16eval[0]=cj12;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x1736 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1736.valid){
continue;
}
IkReal x1734=((-1.0)*(x1736.value));
IkReal x1735=x1727;
sj15=0;
cj15=1.0;
j15=0;
sj17=gconst79;
cj17=gconst80;
j17=x1734;
IkReal gconst78=x1734;
IkReal gconst79=((-1.0)*r21*x1735);
IkReal gconst80=(r20*x1735);
j16eval[0]=sj12;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
CheckValue<IkReal> x1739 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1739.valid){
continue;
}
IkReal x1737=((-1.0)*(x1739.value));
IkReal x1738=x1727;
sj15=0;
cj15=1.0;
j15=0;
sj17=gconst79;
cj17=gconst80;
j17=x1737;
IkReal gconst78=x1737;
IkReal gconst79=((-1.0)*r21*x1738);
IkReal gconst80=(r20*x1738);
IkReal x1740=r22*r22;
CheckValue<IkReal> x1743=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x1740))),-1);
if(!x1743.valid){
continue;
}
IkReal x1741=x1743.value;
IkReal x1742=(x1740+(((2.0)*x1741*(r20*r20)*(r21*r21)))+((x1741*(r20*r20*r20*r20)))+((x1741*(r21*r21*r21*r21))));
j16eval[0]=x1742;
j16eval[1]=IKsign(x1742);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x1744=(gconst80*r20);
IkReal x1745=(cj14*sj13);
IkReal x1746=(gconst79*r21);
IkReal x1747=((1.0)*cj13*sj14);
CheckValue<IkReal> x1748=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x1744*x1746))+(x1744*x1744)+(x1746*x1746))),-1);
if(!x1748.valid){
continue;
}
CheckValue<IkReal> x1749 = IKatan2WithCheck(IkReal((((x1745*x1746))+(((-1.0)*x1744*x1747))+((cj13*sj14*x1746))+(((-1.0)*x1744*x1745)))),IkReal(((((-1.0)*r22*x1747))+(((-1.0)*r22*x1745)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1749.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1748.value)))+(x1749.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x1750=IKcos(j16);
IkReal x1751=IKsin(j16);
IkReal x1752=(gconst80*r10);
IkReal x1753=((1.0)*sj12);
IkReal x1754=(gconst80*r20);
IkReal x1755=(gconst80*r21);
IkReal x1756=(gconst80*r00);
IkReal x1757=((1.0)*x1751);
IkReal x1758=((1.0)*gconst79*r20);
IkReal x1759=(gconst79*x1751);
IkReal x1760=((1.0)*x1750);
evalcond[0]=((((-1.0)*r22*x1757))+((x1750*x1754))+(((-1.0)*gconst79*r21*x1760)));
evalcond[1]=((((-1.0)*r12*x1757))+((x1750*x1752))+cj12+(((-1.0)*gconst79*r11*x1760)));
evalcond[2]=(((x1750*x1756))+(((-1.0)*x1753))+(((-1.0)*gconst79*r01*x1760))+(((-1.0)*r02*x1757)));
evalcond[3]=((((-1.0)*cj13*sj14))+((r21*x1759))+(((-1.0)*r22*x1760))+(((-1.0)*x1754*x1757))+(((-1.0)*cj14*sj13)));
evalcond[4]=((((-1.0)*cj12*x1755))+(((-1.0)*cj12*x1758))+(((-1.0)*x1756*x1757))+(((-1.0)*r02*x1760))+((r01*x1759)));
evalcond[5]=((((-1.0)*r12*x1760))+(((-1.0)*gconst79*r20*x1753))+(((-1.0)*x1752*x1757))+(((-1.0)*x1753*x1755))+((r11*x1759)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x1761=IKPowWithIntegerCheck(IKsign((((gconst80*r11))+((gconst79*r10)))),-1);
if(!x1761.valid){
continue;
}
CheckValue<IkReal> x1762 = IKatan2WithCheck(IkReal(((((-1.0)*gconst79*r21*sj12))+((gconst80*r20*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x1762.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1761.value)))+(x1762.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x1763=IKcos(j16);
IkReal x1764=IKsin(j16);
IkReal x1765=(gconst80*r10);
IkReal x1766=((1.0)*sj12);
IkReal x1767=(gconst80*r20);
IkReal x1768=(gconst80*r21);
IkReal x1769=(gconst80*r00);
IkReal x1770=((1.0)*x1764);
IkReal x1771=((1.0)*gconst79*r20);
IkReal x1772=(gconst79*x1764);
IkReal x1773=((1.0)*x1763);
evalcond[0]=((((-1.0)*gconst79*r21*x1773))+(((-1.0)*r22*x1770))+((x1763*x1767)));
evalcond[1]=((((-1.0)*gconst79*r11*x1773))+cj12+(((-1.0)*r12*x1770))+((x1763*x1765)));
evalcond[2]=((((-1.0)*gconst79*r01*x1773))+(((-1.0)*x1766))+(((-1.0)*r02*x1770))+((x1763*x1769)));
evalcond[3]=((((-1.0)*cj13*sj14))+(((-1.0)*x1767*x1770))+((r21*x1772))+(((-1.0)*r22*x1773))+(((-1.0)*cj14*sj13)));
evalcond[4]=(((r01*x1772))+(((-1.0)*r02*x1773))+(((-1.0)*cj12*x1768))+(((-1.0)*cj12*x1771))+(((-1.0)*x1769*x1770)));
evalcond[5]=((((-1.0)*gconst79*r20*x1766))+((r11*x1772))+(((-1.0)*x1766*x1768))+(((-1.0)*x1765*x1770))+(((-1.0)*r12*x1773)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x1774=IKPowWithIntegerCheck(IKsign((((gconst79*r00))+((gconst80*r01)))),-1);
if(!x1774.valid){
continue;
}
CheckValue<IkReal> x1775 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*gconst79*r21))+((cj12*gconst80*r20)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1775.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1774.value)))+(x1775.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x1776=IKcos(j16);
IkReal x1777=IKsin(j16);
IkReal x1778=(gconst80*r10);
IkReal x1779=((1.0)*sj12);
IkReal x1780=(gconst80*r20);
IkReal x1781=(gconst80*r21);
IkReal x1782=(gconst80*r00);
IkReal x1783=((1.0)*x1777);
IkReal x1784=((1.0)*gconst79*r20);
IkReal x1785=(gconst79*x1777);
IkReal x1786=((1.0)*x1776);
evalcond[0]=((((-1.0)*r22*x1783))+(((-1.0)*gconst79*r21*x1786))+((x1776*x1780)));
evalcond[1]=(((x1776*x1778))+(((-1.0)*r12*x1783))+cj12+(((-1.0)*gconst79*r11*x1786)));
evalcond[2]=((((-1.0)*x1779))+(((-1.0)*gconst79*r01*x1786))+((x1776*x1782))+(((-1.0)*r02*x1783)));
evalcond[3]=((((-1.0)*r22*x1786))+((r21*x1785))+(((-1.0)*cj13*sj14))+(((-1.0)*x1780*x1783))+(((-1.0)*cj14*sj13)));
evalcond[4]=((((-1.0)*cj12*x1781))+(((-1.0)*cj12*x1784))+(((-1.0)*x1782*x1783))+(((-1.0)*r02*x1786))+((r01*x1785)));
evalcond[5]=((((-1.0)*r12*x1786))+(((-1.0)*gconst79*r20*x1779))+(((-1.0)*x1779*x1781))+((r11*x1785))+(((-1.0)*x1778*x1783)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1788 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1788)==0){
continue;
}
IkReal x1787=pow(x1788,-0.5);
CheckValue<IkReal> x1789 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1789.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x1789.value))));
IkReal gconst82=((1.0)*r21*x1787);
IkReal gconst83=((-1.0)*r20*x1787);
CheckValue<IkReal> x1790 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1790.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j17+(x1790.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x1793 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1793.valid){
continue;
}
IkReal x1791=((1.0)*(x1793.value));
IkReal x1792=x1787;
sj15=0;
cj15=1.0;
j15=0;
sj17=gconst82;
cj17=gconst83;
j17=((3.14159265)+(((-1.0)*x1791)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1791)));
IkReal gconst82=((1.0)*r21*x1792);
IkReal gconst83=((-1.0)*r20*x1792);
IkReal x1794=r22*r22;
IkReal x1795=((1.0)*x1794);
CheckValue<IkReal> x1799=IKPowWithIntegerCheck(((-1.0)+x1794),-1);
if(!x1799.valid){
continue;
}
IkReal x1796=x1799.value;
if((((1.0)+(((-1.0)*x1795)))) < -0.00001)
continue;
IkReal x1797=IKsqrt(((1.0)+(((-1.0)*x1795))));
IkReal x1798=(cj12*x1796*x1797);
j16eval[0]=((IKabs(((((-1.0)*x1795*x1798))+x1798)))+(IKabs((cj12*r22))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x1802 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1802.valid){
continue;
}
IkReal x1800=((1.0)*(x1802.value));
IkReal x1801=x1787;
sj15=0;
cj15=1.0;
j15=0;
sj17=gconst82;
cj17=gconst83;
j17=((3.14159265)+(((-1.0)*x1800)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1800)));
IkReal gconst82=((1.0)*r21*x1801);
IkReal gconst83=((-1.0)*r20*x1801);
IkReal x1803=r22*r22;
IkReal x1804=((1.0)*x1803);
CheckValue<IkReal> x1808=IKPowWithIntegerCheck(((-1.0)+x1803),-1);
if(!x1808.valid){
continue;
}
IkReal x1805=x1808.value;
if((((1.0)+(((-1.0)*x1804)))) < -0.00001)
continue;
IkReal x1806=IKsqrt(((1.0)+(((-1.0)*x1804))));
IkReal x1807=(sj12*x1805*x1806);
j16eval[0]=((IKabs((r22*sj12)))+(IKabs(((((-1.0)*x1804*x1807))+x1807))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
CheckValue<IkReal> x1811 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1811.valid){
continue;
}
IkReal x1809=((1.0)*(x1811.value));
IkReal x1810=x1787;
sj15=0;
cj15=1.0;
j15=0;
sj17=gconst82;
cj17=gconst83;
j17=((3.14159265)+(((-1.0)*x1809)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1809)));
IkReal gconst82=((1.0)*r21*x1810);
IkReal gconst83=((-1.0)*r20*x1810);
IkReal x1812=r22*r22;
IkReal x1813=(cj12*r02);
IkReal x1814=(r12*sj12);
CheckValue<IkReal> x1818=IKPowWithIntegerCheck(((-1.0)+x1812),-1);
if(!x1818.valid){
continue;
}
IkReal x1815=x1818.value;
if((((1.0)+(((-1.0)*x1812)))) < -0.00001)
continue;
IkReal x1816=IKsqrt(((1.0)+(((-1.0)*x1812))));
IkReal x1817=(r22*x1815*x1816);
j16eval[0]=0;
j16eval[1]=((IKabs(((((-1.0)*x1814))+(((-1.0)*x1813)))))+(IKabs((((x1813*x1817))+((x1814*x1817))))));
j16eval[2]=0;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x1819=((1.0)*cj12);
IkReal x1820=((1.0)*sj12);
CheckValue<IkReal> x1821 = IKatan2WithCheck(IkReal(((((-1.0)*gconst83*r10*x1820))+((gconst82*r11*sj12))+((cj12*gconst82*r01))+(((-1.0)*gconst83*r00*x1819)))),IkReal(((((-1.0)*r02*x1819))+(((-1.0)*r12*x1820)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1821.valid){
continue;
}
CheckValue<IkReal> x1822=IKPowWithIntegerCheck(IKsign((((gconst83*r21))+((gconst82*r20)))),-1);
if(!x1822.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x1821.value)+(((1.5707963267949)*(x1822.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x1823=IKcos(j16);
IkReal x1824=IKsin(j16);
IkReal x1825=((1.0)*gconst83);
IkReal x1826=((1.0)*gconst82);
IkReal x1827=(gconst83*x1823);
IkReal x1828=(gconst82*x1824);
IkReal x1829=((1.0)*x1823);
IkReal x1830=((1.0)*x1824);
evalcond[0]=((((-1.0)*r21*x1823*x1826))+(((-1.0)*r22*x1830))+((r20*x1827)));
evalcond[1]=(((r10*x1827))+cj12+(((-1.0)*r12*x1830))+(((-1.0)*r11*x1823*x1826)));
evalcond[2]=(((r00*x1827))+(((-1.0)*r01*x1823*x1826))+(((-1.0)*sj12))+(((-1.0)*r02*x1830)));
evalcond[3]=((((-1.0)*cj13*sj14))+(((-1.0)*r22*x1829))+((r21*x1828))+(((-1.0)*cj14*sj13))+(((-1.0)*r20*x1824*x1825)));
evalcond[4]=((((-1.0)*cj12*r20*x1826))+((r01*x1828))+(((-1.0)*r02*x1829))+(((-1.0)*r00*x1824*x1825))+(((-1.0)*cj12*r21*x1825)));
evalcond[5]=((((-1.0)*r10*x1824*x1825))+(((-1.0)*r21*sj12*x1825))+(((-1.0)*r12*x1829))+(((-1.0)*r20*sj12*x1826))+((r11*x1828)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x1831 = IKatan2WithCheck(IkReal(((((-1.0)*gconst82*r21*sj12))+((gconst83*r20*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x1831.valid){
continue;
}
CheckValue<IkReal> x1832=IKPowWithIntegerCheck(IKsign((((gconst83*r11))+((gconst82*r10)))),-1);
if(!x1832.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x1831.value)+(((1.5707963267949)*(x1832.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x1833=IKcos(j16);
IkReal x1834=IKsin(j16);
IkReal x1835=((1.0)*gconst83);
IkReal x1836=((1.0)*gconst82);
IkReal x1837=(gconst83*x1833);
IkReal x1838=(gconst82*x1834);
IkReal x1839=((1.0)*x1833);
IkReal x1840=((1.0)*x1834);
evalcond[0]=((((-1.0)*r22*x1840))+(((-1.0)*r21*x1833*x1836))+((r20*x1837)));
evalcond[1]=(((r10*x1837))+cj12+(((-1.0)*r12*x1840))+(((-1.0)*r11*x1833*x1836)));
evalcond[2]=((((-1.0)*r01*x1833*x1836))+(((-1.0)*r02*x1840))+(((-1.0)*sj12))+((r00*x1837)));
evalcond[3]=((((-1.0)*r20*x1834*x1835))+(((-1.0)*cj13*sj14))+((r21*x1838))+(((-1.0)*r22*x1839))+(((-1.0)*cj14*sj13)));
evalcond[4]=(((r01*x1838))+(((-1.0)*cj12*r21*x1835))+(((-1.0)*cj12*r20*x1836))+(((-1.0)*r02*x1839))+(((-1.0)*r00*x1834*x1835)));
evalcond[5]=((((-1.0)*r20*sj12*x1836))+(((-1.0)*r10*x1834*x1835))+((r11*x1838))+(((-1.0)*r21*sj12*x1835))+(((-1.0)*r12*x1839)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x1841 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*gconst82*r21))+((cj12*gconst83*r20)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1841.valid){
continue;
}
CheckValue<IkReal> x1842=IKPowWithIntegerCheck(IKsign((((gconst83*r01))+((gconst82*r00)))),-1);
if(!x1842.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x1841.value)+(((1.5707963267949)*(x1842.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x1843=IKcos(j16);
IkReal x1844=IKsin(j16);
IkReal x1845=((1.0)*gconst83);
IkReal x1846=((1.0)*gconst82);
IkReal x1847=(gconst83*x1843);
IkReal x1848=(gconst82*x1844);
IkReal x1849=((1.0)*x1843);
IkReal x1850=((1.0)*x1844);
evalcond[0]=((((-1.0)*r22*x1850))+(((-1.0)*r21*x1843*x1846))+((r20*x1847)));
evalcond[1]=((((-1.0)*r11*x1843*x1846))+cj12+((r10*x1847))+(((-1.0)*r12*x1850)));
evalcond[2]=(((r00*x1847))+(((-1.0)*sj12))+(((-1.0)*r02*x1850))+(((-1.0)*r01*x1843*x1846)));
evalcond[3]=((((-1.0)*r22*x1849))+(((-1.0)*cj13*sj14))+((r21*x1848))+(((-1.0)*r20*x1844*x1845))+(((-1.0)*cj14*sj13)));
evalcond[4]=((((-1.0)*cj12*r21*x1845))+(((-1.0)*r02*x1849))+(((-1.0)*r00*x1844*x1845))+((r01*x1848))+(((-1.0)*cj12*r20*x1846)));
evalcond[5]=((((-1.0)*r21*sj12*x1845))+(((-1.0)*r20*sj12*x1846))+(((-1.0)*r12*x1849))+((r11*x1848))+(((-1.0)*r10*x1844*x1845)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1852 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x1852)==0){
continue;
}
IkReal x1851=pow(x1852,-0.5);
CheckValue<IkReal> x1853 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1853.valid){
continue;
}
IkReal gconst84=((-1.0)*(x1853.value));
IkReal gconst85=((-1.0)*r11*x1851);
IkReal gconst86=(r10*x1851);
CheckValue<IkReal> x1854 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1854.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1854.value)+j17)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
CheckValue<IkReal> x1857 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1857.valid){
continue;
}
IkReal x1855=((-1.0)*(x1857.value));
IkReal x1856=x1851;
sj15=0;
cj15=1.0;
j15=0;
sj17=gconst85;
cj17=gconst86;
j17=x1855;
IkReal gconst84=x1855;
IkReal gconst85=((-1.0)*r11*x1856);
IkReal gconst86=(r10*x1856);
j16eval[0]=cj12;
j16eval[1]=r22;
j16eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x1858=((1.0)*cj12);
IkReal x1859=((1.0)*sj12);
CheckValue<IkReal> x1860 = IKatan2WithCheck(IkReal(((((-1.0)*gconst86*r00*x1858))+((cj12*gconst85*r01))+((gconst85*r11*sj12))+(((-1.0)*gconst86*r10*x1859)))),IkReal(((((-1.0)*r02*x1858))+(((-1.0)*r12*x1859)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1860.valid){
continue;
}
CheckValue<IkReal> x1861=IKPowWithIntegerCheck(IKsign((((gconst86*r21))+((gconst85*r20)))),-1);
if(!x1861.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x1860.value)+(((1.5707963267949)*(x1861.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x1862=IKcos(j16);
IkReal x1863=IKsin(j16);
IkReal x1864=((1.0)*sj12);
IkReal x1865=(gconst86*r21);
IkReal x1866=(gconst85*r20);
IkReal x1867=((1.0)*cj12);
IkReal x1868=(gconst86*x1862);
IkReal x1869=((1.0)*x1862);
IkReal x1870=((1.0)*x1863);
IkReal x1871=(gconst85*x1863);
IkReal x1872=(gconst85*x1869);
evalcond[0]=((((-1.0)*r22*x1870))+(((-1.0)*r21*x1872))+((r20*x1868)));
evalcond[1]=(cj12+(((-1.0)*r11*x1872))+(((-1.0)*r12*x1870))+((r10*x1868)));
evalcond[2]=((((-1.0)*r02*x1870))+(((-1.0)*r01*x1872))+(((-1.0)*x1864))+((r00*x1868)));
evalcond[3]=((((-1.0)*cj13*sj14))+((r21*x1871))+(((-1.0)*cj14*sj13))+(((-1.0)*r22*x1869))+(((-1.0)*gconst86*r20*x1870)));
evalcond[4]=((((-1.0)*r02*x1869))+(((-1.0)*x1866*x1867))+(((-1.0)*x1865*x1867))+((r01*x1871))+(((-1.0)*gconst86*r00*x1870)));
evalcond[5]=((((-1.0)*x1864*x1866))+(((-1.0)*x1864*x1865))+(((-1.0)*gconst86*r10*x1870))+(((-1.0)*r12*x1869))+((r11*x1871)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x1873=IKPowWithIntegerCheck(IKsign((((gconst85*r00))+((gconst86*r01)))),-1);
if(!x1873.valid){
continue;
}
CheckValue<IkReal> x1874 = IKatan2WithCheck(IkReal((((cj12*gconst86*r20))+(((-1.0)*cj12*gconst85*r21)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1874.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1873.value)))+(x1874.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x1875=IKcos(j16);
IkReal x1876=IKsin(j16);
IkReal x1877=((1.0)*sj12);
IkReal x1878=(gconst86*r21);
IkReal x1879=(gconst85*r20);
IkReal x1880=((1.0)*cj12);
IkReal x1881=(gconst86*x1875);
IkReal x1882=((1.0)*x1875);
IkReal x1883=((1.0)*x1876);
IkReal x1884=(gconst85*x1876);
IkReal x1885=(gconst85*x1882);
evalcond[0]=(((r20*x1881))+(((-1.0)*r22*x1883))+(((-1.0)*r21*x1885)));
evalcond[1]=((((-1.0)*r12*x1883))+(((-1.0)*r11*x1885))+((r10*x1881))+cj12);
evalcond[2]=((((-1.0)*x1877))+(((-1.0)*r02*x1883))+((r00*x1881))+(((-1.0)*r01*x1885)));
evalcond[3]=(((r21*x1884))+(((-1.0)*cj13*sj14))+(((-1.0)*gconst86*r20*x1883))+(((-1.0)*r22*x1882))+(((-1.0)*cj14*sj13)));
evalcond[4]=((((-1.0)*x1879*x1880))+(((-1.0)*r02*x1882))+(((-1.0)*x1878*x1880))+((r01*x1884))+(((-1.0)*gconst86*r00*x1883)));
evalcond[5]=((((-1.0)*x1877*x1879))+(((-1.0)*x1877*x1878))+(((-1.0)*r12*x1882))+(((-1.0)*gconst86*r10*x1883))+((r11*x1884)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1887 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x1887)==0){
continue;
}
IkReal x1886=pow(x1887,-0.5);
CheckValue<IkReal> x1888 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1888.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x1888.value))));
IkReal gconst88=((1.0)*r11*x1886);
IkReal gconst89=((-1.0)*r10*x1886);
CheckValue<IkReal> x1889 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1889.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1889.value)+j17)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
CheckValue<IkReal> x1892 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1892.valid){
continue;
}
IkReal x1890=((1.0)*(x1892.value));
IkReal x1891=x1886;
sj15=0;
cj15=1.0;
j15=0;
sj17=gconst88;
cj17=gconst89;
j17=((3.14159265)+(((-1.0)*x1890)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x1890)));
IkReal gconst88=((1.0)*r11*x1891);
IkReal gconst89=((-1.0)*r10*x1891);
j16eval[0]=cj12;
j16eval[1]=r22;
j16eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[5];
CheckValue<IkReal> x1895 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1895.valid){
continue;
}
IkReal x1893=((1.0)*(x1895.value));
IkReal x1894=x1886;
sj15=0;
cj15=1.0;
j15=0;
sj17=gconst88;
cj17=gconst89;
j17=((3.14159265)+(((-1.0)*x1893)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x1893)));
IkReal gconst88=((1.0)*r11*x1894);
IkReal gconst89=((-1.0)*r10*x1894);
j16eval[0]=0;
j16eval[1]=r22;
j16eval[2]=sj12;
j16eval[3]=((1.0)+(((-1.0)*(r12*r12))));
j16eval[4]=0;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  || IKabs(j16eval[3]) < 0.0000010000000000  || IKabs(j16eval[4]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x1898 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1898.valid){
continue;
}
IkReal x1896=((1.0)*(x1898.value));
IkReal x1897=x1886;
sj15=0;
cj15=1.0;
j15=0;
sj17=gconst88;
cj17=gconst89;
j17=((3.14159265)+(((-1.0)*x1896)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x1896)));
IkReal gconst88=((1.0)*r11*x1897);
IkReal gconst89=((-1.0)*r10*x1897);
IkReal x1899=r12*r12;
IkReal x1900=(cj12*r02);
IkReal x1901=x1886;
IkReal x1902=(sj12*x1901);
j16eval[0]=((IKabs((((r12*x1900*x1901))+(((-1.0)*x1902))+((x1899*x1902)))))+(IKabs(((((-1.0)*x1900))+(((-1.0)*r12*sj12))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x1903=((1.0)*cj12);
IkReal x1904=((1.0)*sj12);
CheckValue<IkReal> x1905 = IKatan2WithCheck(IkReal(((((-1.0)*gconst89*r10*x1904))+((gconst88*r11*sj12))+((cj12*gconst88*r01))+(((-1.0)*gconst89*r00*x1903)))),IkReal(((((-1.0)*r12*x1904))+(((-1.0)*r02*x1903)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1905.valid){
continue;
}
CheckValue<IkReal> x1906=IKPowWithIntegerCheck(IKsign((((gconst89*r21))+((gconst88*r20)))),-1);
if(!x1906.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x1905.value)+(((1.5707963267949)*(x1906.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x1907=IKcos(j16);
IkReal x1908=IKsin(j16);
IkReal x1909=(gconst89*r10);
IkReal x1910=(gconst89*r20);
IkReal x1911=((1.0)*gconst88);
IkReal x1912=((1.0)*sj12);
IkReal x1913=(gconst89*r00);
IkReal x1914=(gconst89*r21);
IkReal x1915=((1.0)*x1908);
IkReal x1916=((1.0)*x1907);
IkReal x1917=(gconst88*x1908);
evalcond[0]=(((x1907*x1910))+(((-1.0)*r22*x1915))+(((-1.0)*r21*x1907*x1911)));
evalcond[1]=((((-1.0)*r12*x1915))+cj12+(((-1.0)*r11*x1907*x1911))+((x1907*x1909)));
evalcond[2]=((((-1.0)*r02*x1915))+((x1907*x1913))+(((-1.0)*r01*x1907*x1911))+(((-1.0)*x1912)));
evalcond[3]=((((-1.0)*x1910*x1915))+(((-1.0)*cj13*sj14))+(((-1.0)*r22*x1916))+((r21*x1917))+(((-1.0)*cj14*sj13)));
evalcond[4]=((((-1.0)*r02*x1916))+(((-1.0)*cj12*r20*x1911))+((r01*x1917))+(((-1.0)*cj12*x1914))+(((-1.0)*x1913*x1915)));
evalcond[5]=((((-1.0)*r12*x1916))+((r11*x1917))+(((-1.0)*x1909*x1915))+(((-1.0)*r20*sj12*x1911))+(((-1.0)*x1912*x1914)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x1918 = IKatan2WithCheck(IkReal((((gconst89*r20*sj12))+(((-1.0)*gconst88*r21*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x1918.valid){
continue;
}
CheckValue<IkReal> x1919=IKPowWithIntegerCheck(IKsign((((gconst88*r10))+((gconst89*r11)))),-1);
if(!x1919.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x1918.value)+(((1.5707963267949)*(x1919.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x1920=IKcos(j16);
IkReal x1921=IKsin(j16);
IkReal x1922=(gconst89*r10);
IkReal x1923=(gconst89*r20);
IkReal x1924=((1.0)*gconst88);
IkReal x1925=((1.0)*sj12);
IkReal x1926=(gconst89*r00);
IkReal x1927=(gconst89*r21);
IkReal x1928=((1.0)*x1921);
IkReal x1929=((1.0)*x1920);
IkReal x1930=(gconst88*x1921);
evalcond[0]=((((-1.0)*r21*x1920*x1924))+(((-1.0)*r22*x1928))+((x1920*x1923)));
evalcond[1]=((((-1.0)*r12*x1928))+(((-1.0)*r11*x1920*x1924))+cj12+((x1920*x1922)));
evalcond[2]=((((-1.0)*x1925))+(((-1.0)*r01*x1920*x1924))+(((-1.0)*r02*x1928))+((x1920*x1926)));
evalcond[3]=((((-1.0)*cj13*sj14))+((r21*x1930))+(((-1.0)*r22*x1929))+(((-1.0)*cj14*sj13))+(((-1.0)*x1923*x1928)));
evalcond[4]=(((r01*x1930))+(((-1.0)*cj12*r20*x1924))+(((-1.0)*x1926*x1928))+(((-1.0)*r02*x1929))+(((-1.0)*cj12*x1927)));
evalcond[5]=((((-1.0)*r12*x1929))+(((-1.0)*x1922*x1928))+((r11*x1930))+(((-1.0)*x1925*x1927))+(((-1.0)*r20*sj12*x1924)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x1931 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*gconst88*r21))+((cj12*gconst89*r20)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1931.valid){
continue;
}
CheckValue<IkReal> x1932=IKPowWithIntegerCheck(IKsign((((gconst88*r00))+((gconst89*r01)))),-1);
if(!x1932.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x1931.value)+(((1.5707963267949)*(x1932.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x1933=IKcos(j16);
IkReal x1934=IKsin(j16);
IkReal x1935=(gconst89*r10);
IkReal x1936=(gconst89*r20);
IkReal x1937=((1.0)*gconst88);
IkReal x1938=((1.0)*sj12);
IkReal x1939=(gconst89*r00);
IkReal x1940=(gconst89*r21);
IkReal x1941=((1.0)*x1934);
IkReal x1942=((1.0)*x1933);
IkReal x1943=(gconst88*x1934);
evalcond[0]=((((-1.0)*r22*x1941))+((x1933*x1936))+(((-1.0)*r21*x1933*x1937)));
evalcond[1]=((((-1.0)*r11*x1933*x1937))+cj12+(((-1.0)*r12*x1941))+((x1933*x1935)));
evalcond[2]=((((-1.0)*r01*x1933*x1937))+(((-1.0)*r02*x1941))+((x1933*x1939))+(((-1.0)*x1938)));
evalcond[3]=((((-1.0)*r22*x1942))+(((-1.0)*cj13*sj14))+((r21*x1943))+(((-1.0)*x1936*x1941))+(((-1.0)*cj14*sj13)));
evalcond[4]=((((-1.0)*cj12*r20*x1937))+(((-1.0)*r02*x1942))+(((-1.0)*cj12*x1940))+((r01*x1943))+(((-1.0)*x1939*x1941)));
evalcond[5]=(((r11*x1943))+(((-1.0)*x1935*x1941))+(((-1.0)*r20*sj12*x1937))+(((-1.0)*x1938*x1940))+(((-1.0)*r12*x1942)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j12))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
sj15=0;
cj15=1.0;
j15=0;
sj12=0;
cj12=1.0;
j12=0;
IkReal x1944=(((r00*sj17))+((cj17*r01)));
j16eval[0]=x1944;
j16eval[1]=IKsign(x1944);
j16eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*r21*sj17))+((cj17*r20))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=0;
cj15=1.0;
j15=0;
sj12=0;
cj12=1.0;
j12=0;
IkReal x1945=((1.0)*sj17);
IkReal x1946=((((-1.0)*cj17*r21))+(((-1.0)*r20*x1945)));
j16eval[0]=x1946;
j16eval[1]=IKsign(x1946);
j16eval[2]=((IKabs((((cj17*r00))+(((-1.0)*r01*x1945)))))+(IKabs(r02)));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=0;
cj15=1.0;
j15=0;
sj12=0;
cj12=1.0;
j12=0;
IkReal x1947=cj17*cj17;
IkReal x1948=r11*r11;
IkReal x1949=(r11*sj17);
IkReal x1950=(cj17*r10);
IkReal x1951=((r12*r12)+(((-1.0)*x1947*x1948))+(((-2.0)*x1949*x1950))+((x1947*(r10*r10)))+x1948);
j16eval[0]=x1951;
j16eval[1]=((IKabs((x1949+(((-1.0)*x1950)))))+(IKabs(r12)));
j16eval[2]=IKsign(x1951);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x1952=cj17*cj17;
IkReal x1953=r11*r11;
IkReal x1954=(r11*sj17);
IkReal x1955=(cj17*r10);
CheckValue<IkReal> x1956=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x1954*x1955))+x1953+((x1952*(r10*r10)))+(((-1.0)*x1952*x1953)))),-1);
if(!x1956.valid){
continue;
}
CheckValue<IkReal> x1957 = IKatan2WithCheck(IkReal(r12),IkReal((x1954+(((-1.0)*x1955)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1957.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1956.value)))+(x1957.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x1958=IKcos(j16);
IkReal x1959=IKsin(j16);
IkReal x1960=((1.0)*cj17);
IkReal x1961=(r11*sj17);
IkReal x1962=(cj17*x1958);
IkReal x1963=((1.0)*x1958);
IkReal x1964=((1.0)*x1959);
IkReal x1965=(sj17*x1959);
evalcond[0]=((((-1.0)*r21*sj17*x1963))+((r20*x1962))+(((-1.0)*r22*x1964)));
evalcond[1]=((((-1.0)*r01*sj17*x1963))+(((-1.0)*r02*x1964))+((r00*x1962)));
evalcond[2]=(((x1959*x1961))+(((-1.0)*r10*x1959*x1960))+(((-1.0)*r12*x1963)));
evalcond[3]=((1.0)+((r10*x1962))+(((-1.0)*x1961*x1963))+(((-1.0)*r12*x1964)));
evalcond[4]=((((-1.0)*cj13*sj14))+(((-1.0)*r20*x1959*x1960))+(((-1.0)*r22*x1963))+((r21*x1965))+(((-1.0)*cj14*sj13)));
evalcond[5]=((((-1.0)*r02*x1963))+(((-1.0)*r00*x1959*x1960))+(((-1.0)*r20*sj17))+((r01*x1965))+(((-1.0)*r21*x1960)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x1966=((1.0)*sj17);
CheckValue<IkReal> x1967 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x1966))+((cj17*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x1967.valid){
continue;
}
CheckValue<IkReal> x1968=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj17*r21))+(((-1.0)*r20*x1966)))),-1);
if(!x1968.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x1967.value)+(((1.5707963267949)*(x1968.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x1969=IKcos(j16);
IkReal x1970=IKsin(j16);
IkReal x1971=((1.0)*cj17);
IkReal x1972=(r11*sj17);
IkReal x1973=(cj17*x1969);
IkReal x1974=((1.0)*x1969);
IkReal x1975=((1.0)*x1970);
IkReal x1976=(sj17*x1970);
evalcond[0]=((((-1.0)*r21*sj17*x1974))+((r20*x1973))+(((-1.0)*r22*x1975)));
evalcond[1]=((((-1.0)*r01*sj17*x1974))+(((-1.0)*r02*x1975))+((r00*x1973)));
evalcond[2]=((((-1.0)*r10*x1970*x1971))+((x1970*x1972))+(((-1.0)*r12*x1974)));
evalcond[3]=((1.0)+((r10*x1973))+(((-1.0)*x1972*x1974))+(((-1.0)*r12*x1975)));
evalcond[4]=((((-1.0)*cj13*sj14))+(((-1.0)*r22*x1974))+((r21*x1976))+(((-1.0)*cj14*sj13))+(((-1.0)*r20*x1970*x1971)));
evalcond[5]=((((-1.0)*r02*x1974))+((r01*x1976))+(((-1.0)*r20*sj17))+(((-1.0)*r00*x1970*x1971))+(((-1.0)*r21*x1971)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x1977 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj17))+((cj17*r20)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x1977.valid){
continue;
}
CheckValue<IkReal> x1978=IKPowWithIntegerCheck(IKsign((((r00*sj17))+((cj17*r01)))),-1);
if(!x1978.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x1977.value)+(((1.5707963267949)*(x1978.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x1979=IKcos(j16);
IkReal x1980=IKsin(j16);
IkReal x1981=((1.0)*cj17);
IkReal x1982=(r11*sj17);
IkReal x1983=(cj17*x1979);
IkReal x1984=((1.0)*x1979);
IkReal x1985=((1.0)*x1980);
IkReal x1986=(sj17*x1980);
evalcond[0]=((((-1.0)*r21*sj17*x1984))+(((-1.0)*r22*x1985))+((r20*x1983)));
evalcond[1]=((((-1.0)*r02*x1985))+((r00*x1983))+(((-1.0)*r01*sj17*x1984)));
evalcond[2]=((((-1.0)*r10*x1980*x1981))+((x1980*x1982))+(((-1.0)*r12*x1984)));
evalcond[3]=((1.0)+((r10*x1983))+(((-1.0)*r12*x1985))+(((-1.0)*x1982*x1984)));
evalcond[4]=((((-1.0)*r20*x1980*x1981))+(((-1.0)*cj13*sj14))+((r21*x1986))+(((-1.0)*cj14*sj13))+(((-1.0)*r22*x1984)));
evalcond[5]=((((-1.0)*r02*x1984))+((r01*x1986))+(((-1.0)*r20*sj17))+(((-1.0)*r00*x1980*x1981))+(((-1.0)*r21*x1981)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
sj15=0;
cj15=1.0;
j15=0;
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
IkReal x1987=(((r20*sj17))+((cj17*r21)));
j16eval[0]=x1987;
j16eval[1]=IKsign(x1987);
j16eval[2]=((IKabs(r02))+(IKabs((((cj17*r00))+(((-1.0)*r01*sj17))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=0;
cj15=1.0;
j15=0;
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
IkReal x1988=((1.0)*sj17);
IkReal x1989=((((-1.0)*cj17*r01))+(((-1.0)*r00*x1988)));
j16eval[0]=x1989;
j16eval[1]=IKsign(x1989);
j16eval[2]=((IKabs(r22))+(IKabs((((cj17*r20))+(((-1.0)*r21*x1988))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=0;
cj15=1.0;
j15=0;
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
IkReal x1990=cj17*cj17;
IkReal x1991=r11*r11;
IkReal x1992=(r11*sj17);
IkReal x1993=(cj17*r10);
IkReal x1994=((((-1.0)*x1990*(r10*r10)))+(((-1.0)*(r12*r12)))+(((2.0)*x1992*x1993))+((x1990*x1991))+(((-1.0)*x1991)));
j16eval[0]=x1994;
j16eval[1]=((IKabs(r12))+(IKabs((x1992+(((-1.0)*x1993))))));
j16eval[2]=IKsign(x1994);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x1995=cj17*cj17;
IkReal x1996=r11*r11;
IkReal x1997=(r11*sj17);
IkReal x1998=(cj17*r10);
CheckValue<IkReal> x1999 = IKatan2WithCheck(IkReal(r12),IkReal((x1997+(((-1.0)*x1998)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1999.valid){
continue;
}
CheckValue<IkReal> x2000=IKPowWithIntegerCheck(IKsign(((((2.0)*x1997*x1998))+((x1995*x1996))+(((-1.0)*(r12*r12)))+(((-1.0)*x1995*(r10*r10)))+(((-1.0)*x1996)))),-1);
if(!x2000.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x1999.value)+(((1.5707963267949)*(x2000.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x2001=IKcos(j16);
IkReal x2002=IKsin(j16);
IkReal x2003=(r11*sj17);
IkReal x2004=(cj17*x2001);
IkReal x2005=((1.0)*x2001);
IkReal x2006=((1.0)*x2002);
IkReal x2007=(sj17*x2002);
IkReal x2008=(cj17*x2006);
evalcond[0]=((((-1.0)*r22*x2006))+(((-1.0)*r21*sj17*x2005))+((r20*x2004)));
evalcond[1]=(((r00*x2004))+(((-1.0)*r01*sj17*x2005))+(((-1.0)*r02*x2006)));
evalcond[2]=(((x2002*x2003))+(((-1.0)*r12*x2005))+(((-1.0)*r10*x2008)));
evalcond[3]=((-1.0)+((r10*x2004))+(((-1.0)*x2003*x2005))+(((-1.0)*r12*x2006)));
evalcond[4]=(((r01*x2007))+((r20*sj17))+(((-1.0)*r00*x2008))+((cj17*r21))+(((-1.0)*r02*x2005)));
evalcond[5]=(((r21*x2007))+(((-1.0)*r22*x2005))+(((-1.0)*cj13*sj14))+(((-1.0)*cj14*sj13))+(((-1.0)*r20*x2008)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x2009=((1.0)*sj17);
CheckValue<IkReal> x2010=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj17*r01))+(((-1.0)*r00*x2009)))),-1);
if(!x2010.valid){
continue;
}
CheckValue<IkReal> x2011 = IKatan2WithCheck(IkReal((((cj17*r20))+(((-1.0)*r21*x2009)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x2011.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2010.value)))+(x2011.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x2012=IKcos(j16);
IkReal x2013=IKsin(j16);
IkReal x2014=(r11*sj17);
IkReal x2015=(cj17*x2012);
IkReal x2016=((1.0)*x2012);
IkReal x2017=((1.0)*x2013);
IkReal x2018=(sj17*x2013);
IkReal x2019=(cj17*x2017);
evalcond[0]=(((r20*x2015))+(((-1.0)*r21*sj17*x2016))+(((-1.0)*r22*x2017)));
evalcond[1]=(((r00*x2015))+(((-1.0)*r01*sj17*x2016))+(((-1.0)*r02*x2017)));
evalcond[2]=((((-1.0)*r12*x2016))+(((-1.0)*r10*x2019))+((x2013*x2014)));
evalcond[3]=((-1.0)+((r10*x2015))+(((-1.0)*x2014*x2016))+(((-1.0)*r12*x2017)));
evalcond[4]=(((r20*sj17))+((r01*x2018))+((cj17*r21))+(((-1.0)*r02*x2016))+(((-1.0)*r00*x2019)));
evalcond[5]=((((-1.0)*r20*x2019))+(((-1.0)*cj13*sj14))+((r21*x2018))+(((-1.0)*cj14*sj13))+(((-1.0)*r22*x2016)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x2020 = IKatan2WithCheck(IkReal((((cj17*r00))+(((-1.0)*r01*sj17)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2020.valid){
continue;
}
CheckValue<IkReal> x2021=IKPowWithIntegerCheck(IKsign((((r20*sj17))+((cj17*r21)))),-1);
if(!x2021.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x2020.value)+(((1.5707963267949)*(x2021.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x2022=IKcos(j16);
IkReal x2023=IKsin(j16);
IkReal x2024=(r11*sj17);
IkReal x2025=(cj17*x2022);
IkReal x2026=((1.0)*x2022);
IkReal x2027=((1.0)*x2023);
IkReal x2028=(sj17*x2023);
IkReal x2029=(cj17*x2027);
evalcond[0]=((((-1.0)*r22*x2027))+(((-1.0)*r21*sj17*x2026))+((r20*x2025)));
evalcond[1]=(((r00*x2025))+(((-1.0)*r01*sj17*x2026))+(((-1.0)*r02*x2027)));
evalcond[2]=((((-1.0)*r10*x2029))+((x2023*x2024))+(((-1.0)*r12*x2026)));
evalcond[3]=((-1.0)+((r10*x2025))+(((-1.0)*r12*x2027))+(((-1.0)*x2024*x2026)));
evalcond[4]=(((r01*x2028))+(((-1.0)*r00*x2029))+((r20*sj17))+(((-1.0)*r02*x2026))+((cj17*r21)));
evalcond[5]=((((-1.0)*r22*x2026))+(((-1.0)*cj13*sj14))+(((-1.0)*r20*x2029))+(((-1.0)*cj14*sj13))+((r21*x2028)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2031 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2031)==0){
continue;
}
IkReal x2030=pow(x2031,-0.5);
CheckValue<IkReal> x2032 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2032.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2032.value));
IkReal gconst91=((-1.0)*r01*x2030);
IkReal gconst92=(r00*x2030);
CheckValue<IkReal> x2033 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2033.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2033.value)+j17)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
CheckValue<IkReal> x2036 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2036.valid){
continue;
}
IkReal x2034=((-1.0)*(x2036.value));
IkReal x2035=x2030;
sj15=0;
cj15=1.0;
j15=0;
sj17=gconst91;
cj17=gconst92;
j17=x2034;
IkReal gconst90=x2034;
IkReal gconst91=((-1.0)*r01*x2035);
IkReal gconst92=(r00*x2035);
j16eval[0]=r22;
j16eval[1]=sj12;
j16eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x2037=((1.0)*gconst92);
CheckValue<IkReal> x2038=IKPowWithIntegerCheck(IKsign((((gconst91*r20))+((gconst92*r21)))),-1);
if(!x2038.valid){
continue;
}
CheckValue<IkReal> x2039 = IKatan2WithCheck(IkReal((((cj12*gconst91*r01))+(((-1.0)*cj12*r00*x2037))+(((-1.0)*r10*sj12*x2037))+((gconst91*r11*sj12)))),IkReal(((((-1.0)*cj12*r02))+(((-1.0)*r12*sj12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2039.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2038.value)))+(x2039.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x2040=IKcos(j16);
IkReal x2041=IKsin(j16);
IkReal x2042=(gconst92*r00);
IkReal x2043=((1.0)*gconst91);
IkReal x2044=((1.0)*sj12);
IkReal x2045=(gconst92*r20);
IkReal x2046=(gconst92*r21);
IkReal x2047=(gconst92*r10);
IkReal x2048=(gconst91*x2041);
IkReal x2049=((1.0)*x2041);
IkReal x2050=((1.0)*x2040);
evalcond[0]=(((x2040*x2045))+(((-1.0)*r22*x2049))+(((-1.0)*r21*x2040*x2043)));
evalcond[1]=((((-1.0)*r11*x2040*x2043))+((x2040*x2047))+cj12+(((-1.0)*r12*x2049)));
evalcond[2]=(((x2040*x2042))+(((-1.0)*x2044))+(((-1.0)*r02*x2049))+(((-1.0)*r01*x2040*x2043)));
evalcond[3]=(((r21*x2048))+(((-1.0)*cj13*sj14))+(((-1.0)*x2045*x2049))+(((-1.0)*r22*x2050))+(((-1.0)*cj14*sj13)));
evalcond[4]=((((-1.0)*r02*x2050))+(((-1.0)*cj12*r20*x2043))+((r01*x2048))+(((-1.0)*x2042*x2049))+(((-1.0)*cj12*x2046)));
evalcond[5]=((((-1.0)*r20*sj12*x2043))+((r11*x2048))+(((-1.0)*r12*x2050))+(((-1.0)*x2044*x2046))+(((-1.0)*x2047*x2049)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x2051 = IKatan2WithCheck(IkReal((((gconst92*r20*sj12))+(((-1.0)*gconst91*r21*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x2051.valid){
continue;
}
CheckValue<IkReal> x2052=IKPowWithIntegerCheck(IKsign((((gconst91*r10))+((gconst92*r11)))),-1);
if(!x2052.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x2051.value)+(((1.5707963267949)*(x2052.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x2053=IKcos(j16);
IkReal x2054=IKsin(j16);
IkReal x2055=(gconst92*r00);
IkReal x2056=((1.0)*gconst91);
IkReal x2057=((1.0)*sj12);
IkReal x2058=(gconst92*r20);
IkReal x2059=(gconst92*r21);
IkReal x2060=(gconst92*r10);
IkReal x2061=(gconst91*x2054);
IkReal x2062=((1.0)*x2054);
IkReal x2063=((1.0)*x2053);
evalcond[0]=(((x2053*x2058))+(((-1.0)*r22*x2062))+(((-1.0)*r21*x2053*x2056)));
evalcond[1]=((((-1.0)*r12*x2062))+cj12+(((-1.0)*r11*x2053*x2056))+((x2053*x2060)));
evalcond[2]=(((x2053*x2055))+(((-1.0)*r02*x2062))+(((-1.0)*x2057))+(((-1.0)*r01*x2053*x2056)));
evalcond[3]=(((r21*x2061))+(((-1.0)*x2058*x2062))+(((-1.0)*cj13*sj14))+(((-1.0)*r22*x2063))+(((-1.0)*cj14*sj13)));
evalcond[4]=((((-1.0)*r02*x2063))+(((-1.0)*cj12*x2059))+(((-1.0)*x2055*x2062))+(((-1.0)*cj12*r20*x2056))+((r01*x2061)));
evalcond[5]=((((-1.0)*r12*x2063))+((r11*x2061))+(((-1.0)*x2057*x2059))+(((-1.0)*r20*sj12*x2056))+(((-1.0)*x2060*x2062)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2065 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2065)==0){
continue;
}
IkReal x2064=pow(x2065,-0.5);
CheckValue<IkReal> x2066 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2066.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2066.value))));
IkReal gconst94=((1.0)*r01*x2064);
IkReal gconst95=((-1.0)*r00*x2064);
CheckValue<IkReal> x2067 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2067.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2067.value)+j17)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[5];
CheckValue<IkReal> x2070 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2070.valid){
continue;
}
IkReal x2068=((1.0)*(x2070.value));
IkReal x2069=x2064;
sj15=0;
cj15=1.0;
j15=0;
sj17=gconst94;
cj17=gconst95;
j17=((3.14159265)+(((-1.0)*x2068)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2068)));
IkReal gconst94=((1.0)*r01*x2069);
IkReal gconst95=((-1.0)*r00*x2069);
j16eval[0]=0;
j16eval[1]=0;
j16eval[2]=cj12;
j16eval[3]=r22;
j16eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  || IKabs(j16eval[3]) < 0.0000010000000000  || IKabs(j16eval[4]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
CheckValue<IkReal> x2073 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2073.valid){
continue;
}
IkReal x2071=((1.0)*(x2073.value));
IkReal x2072=x2064;
sj15=0;
cj15=1.0;
j15=0;
sj17=gconst94;
cj17=gconst95;
j17=((3.14159265)+(((-1.0)*x2071)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2071)));
IkReal gconst94=((1.0)*r01*x2072);
IkReal gconst95=((-1.0)*r00*x2072);
j16eval[0]=r22;
j16eval[1]=sj12;
j16eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x2076 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2076.valid){
continue;
}
IkReal x2074=((1.0)*(x2076.value));
IkReal x2075=x2064;
sj15=0;
cj15=1.0;
j15=0;
sj17=gconst94;
cj17=gconst95;
j17=((3.14159265)+(((-1.0)*x2074)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2074)));
IkReal gconst94=((1.0)*r01*x2075);
IkReal gconst95=((-1.0)*r00*x2075);
IkReal x2077=r02*r02;
IkReal x2078=(r12*sj12);
IkReal x2079=x2064;
IkReal x2080=(cj12*x2079);
j16eval[0]=((IKabs(((((-1.0)*cj12*r02))+(((-1.0)*x2078)))))+(IKabs(((((-1.0)*x2080))+((x2077*x2080))+((r02*x2078*x2079))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x2081=((1.0)*cj12);
IkReal x2082=((1.0)*sj12);
CheckValue<IkReal> x2083=IKPowWithIntegerCheck(IKsign((((gconst95*r21))+((gconst94*r20)))),-1);
if(!x2083.valid){
continue;
}
CheckValue<IkReal> x2084 = IKatan2WithCheck(IkReal(((((-1.0)*gconst95*r00*x2081))+((cj12*gconst94*r01))+(((-1.0)*gconst95*r10*x2082))+((gconst94*r11*sj12)))),IkReal(((((-1.0)*r02*x2081))+(((-1.0)*r12*x2082)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2084.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2083.value)))+(x2084.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x2085=IKcos(j16);
IkReal x2086=IKsin(j16);
IkReal x2087=((1.0)*gconst95);
IkReal x2088=(gconst94*r11);
IkReal x2089=(gconst94*r21);
IkReal x2090=((1.0)*sj12);
IkReal x2091=(gconst94*r20);
IkReal x2092=(gconst94*r01);
IkReal x2093=(gconst95*x2085);
IkReal x2094=((1.0)*x2085);
IkReal x2095=((1.0)*x2086);
evalcond[0]=(((r20*x2093))+(((-1.0)*x2089*x2094))+(((-1.0)*r22*x2095)));
evalcond[1]=(((r10*x2093))+cj12+(((-1.0)*x2088*x2094))+(((-1.0)*r12*x2095)));
evalcond[2]=((((-1.0)*x2090))+((r00*x2093))+(((-1.0)*x2092*x2094))+(((-1.0)*r02*x2095)));
evalcond[3]=((((-1.0)*r20*x2086*x2087))+(((-1.0)*cj13*sj14))+((x2086*x2089))+(((-1.0)*cj14*sj13))+(((-1.0)*r22*x2094)));
evalcond[4]=((((-1.0)*cj12*r21*x2087))+(((-1.0)*r00*x2086*x2087))+(((-1.0)*r02*x2094))+(((-1.0)*cj12*x2091))+((x2086*x2092)));
evalcond[5]=((((-1.0)*x2090*x2091))+((x2086*x2088))+(((-1.0)*r10*x2086*x2087))+(((-1.0)*r21*sj12*x2087))+(((-1.0)*r12*x2094)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x2096=IKPowWithIntegerCheck(IKsign((((gconst95*r11))+((gconst94*r10)))),-1);
if(!x2096.valid){
continue;
}
CheckValue<IkReal> x2097 = IKatan2WithCheck(IkReal((((gconst95*r20*sj12))+(((-1.0)*gconst94*r21*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x2097.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2096.value)))+(x2097.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x2098=IKcos(j16);
IkReal x2099=IKsin(j16);
IkReal x2100=((1.0)*gconst95);
IkReal x2101=(gconst94*r11);
IkReal x2102=(gconst94*r21);
IkReal x2103=((1.0)*sj12);
IkReal x2104=(gconst94*r20);
IkReal x2105=(gconst94*r01);
IkReal x2106=(gconst95*x2098);
IkReal x2107=((1.0)*x2098);
IkReal x2108=((1.0)*x2099);
evalcond[0]=(((r20*x2106))+(((-1.0)*r22*x2108))+(((-1.0)*x2102*x2107)));
evalcond[1]=((((-1.0)*r12*x2108))+(((-1.0)*x2101*x2107))+((r10*x2106))+cj12);
evalcond[2]=((((-1.0)*r02*x2108))+(((-1.0)*x2103))+((r00*x2106))+(((-1.0)*x2105*x2107)));
evalcond[3]=(((x2099*x2102))+(((-1.0)*r22*x2107))+(((-1.0)*cj13*sj14))+(((-1.0)*r20*x2099*x2100))+(((-1.0)*cj14*sj13)));
evalcond[4]=((((-1.0)*cj12*x2104))+(((-1.0)*r02*x2107))+(((-1.0)*r00*x2099*x2100))+((x2099*x2105))+(((-1.0)*cj12*r21*x2100)));
evalcond[5]=(((x2099*x2101))+(((-1.0)*x2103*x2104))+(((-1.0)*r10*x2099*x2100))+(((-1.0)*r12*x2107))+(((-1.0)*r21*sj12*x2100)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x2109 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*gconst94*r21))+((cj12*gconst95*r20)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2109.valid){
continue;
}
CheckValue<IkReal> x2110=IKPowWithIntegerCheck(IKsign((((gconst95*r01))+((gconst94*r00)))),-1);
if(!x2110.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x2109.value)+(((1.5707963267949)*(x2110.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x2111=IKcos(j16);
IkReal x2112=IKsin(j16);
IkReal x2113=((1.0)*gconst95);
IkReal x2114=(gconst94*r11);
IkReal x2115=(gconst94*r21);
IkReal x2116=((1.0)*sj12);
IkReal x2117=(gconst94*r20);
IkReal x2118=(gconst94*r01);
IkReal x2119=(gconst95*x2111);
IkReal x2120=((1.0)*x2111);
IkReal x2121=((1.0)*x2112);
evalcond[0]=((((-1.0)*r22*x2121))+((r20*x2119))+(((-1.0)*x2115*x2120)));
evalcond[1]=((((-1.0)*x2114*x2120))+cj12+(((-1.0)*r12*x2121))+((r10*x2119)));
evalcond[2]=((((-1.0)*x2118*x2120))+((r00*x2119))+(((-1.0)*r02*x2121))+(((-1.0)*x2116)));
evalcond[3]=((((-1.0)*r20*x2112*x2113))+(((-1.0)*r22*x2120))+(((-1.0)*cj13*sj14))+(((-1.0)*cj14*sj13))+((x2112*x2115)));
evalcond[4]=((((-1.0)*r02*x2120))+(((-1.0)*r00*x2112*x2113))+(((-1.0)*cj12*x2117))+(((-1.0)*cj12*r21*x2113))+((x2112*x2118)));
evalcond[5]=((((-1.0)*r21*sj12*x2113))+(((-1.0)*r10*x2112*x2113))+(((-1.0)*x2116*x2117))+(((-1.0)*r12*x2120))+((x2112*x2114)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
sj15=0;
cj15=1.0;
j15=0;
sj12=1.0;
cj12=0;
j12=1.5707963267949;
IkReal x2122=(((cj17*r11))+((r10*sj17)));
j16eval[0]=x2122;
j16eval[1]=IKsign(x2122);
j16eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*r21*sj17))+((cj17*r20))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=0;
cj15=1.0;
j15=0;
sj12=1.0;
cj12=0;
j12=1.5707963267949;
IkReal x2123=((1.0)*sj17);
IkReal x2124=((((-1.0)*cj17*r21))+(((-1.0)*r20*x2123)));
j16eval[0]=x2124;
j16eval[1]=IKsign(x2124);
j16eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*r11*x2123))+((cj17*r10))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=0;
cj15=1.0;
j15=0;
sj12=1.0;
cj12=0;
j12=1.5707963267949;
IkReal x2125=cj17*cj17;
IkReal x2126=r01*r01;
IkReal x2127=(r01*sj17);
IkReal x2128=(cj17*r00);
IkReal x2129=(((x2125*x2126))+(((2.0)*x2127*x2128))+(((-1.0)*(r02*r02)))+(((-1.0)*x2126))+(((-1.0)*x2125*(r00*r00))));
j16eval[0]=x2129;
j16eval[1]=IKsign(x2129);
j16eval[2]=((IKabs(r02))+(IKabs((x2127+(((-1.0)*x2128))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x2130=cj17*cj17;
IkReal x2131=r01*r01;
IkReal x2132=(r01*sj17);
IkReal x2133=(cj17*r00);
CheckValue<IkReal> x2134=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*x2130*(r00*r00)))+(((-1.0)*x2131))+(((2.0)*x2132*x2133))+((x2130*x2131)))),-1);
if(!x2134.valid){
continue;
}
CheckValue<IkReal> x2135 = IKatan2WithCheck(IkReal(r02),IkReal((x2132+(((-1.0)*x2133)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2135.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2134.value)))+(x2135.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x2136=IKcos(j16);
IkReal x2137=IKsin(j16);
IkReal x2138=((1.0)*cj17);
IkReal x2139=(r11*sj17);
IkReal x2140=(cj17*x2136);
IkReal x2141=((1.0)*x2136);
IkReal x2142=((1.0)*x2137);
IkReal x2143=(sj17*x2137);
evalcond[0]=((((-1.0)*r21*sj17*x2141))+((r20*x2140))+(((-1.0)*r22*x2142)));
evalcond[1]=((((-1.0)*r12*x2142))+((r10*x2140))+(((-1.0)*x2139*x2141)));
evalcond[2]=((((-1.0)*r02*x2141))+((r01*x2143))+(((-1.0)*r00*x2137*x2138)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x2142))+((r00*x2140))+(((-1.0)*r01*sj17*x2141)));
evalcond[4]=((((-1.0)*r20*x2137*x2138))+(((-1.0)*cj13*sj14))+(((-1.0)*r22*x2141))+((r21*x2143))+(((-1.0)*cj14*sj13)));
evalcond[5]=((((-1.0)*r12*x2141))+(((-1.0)*r21*x2138))+(((-1.0)*r20*sj17))+((x2137*x2139))+(((-1.0)*r10*x2137*x2138)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x2144=((1.0)*sj17);
CheckValue<IkReal> x2145=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj17*r21))+(((-1.0)*r20*x2144)))),-1);
if(!x2145.valid){
continue;
}
CheckValue<IkReal> x2146 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x2144))+((cj17*r10)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2146.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2145.value)))+(x2146.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x2147=IKcos(j16);
IkReal x2148=IKsin(j16);
IkReal x2149=((1.0)*cj17);
IkReal x2150=(r11*sj17);
IkReal x2151=(cj17*x2147);
IkReal x2152=((1.0)*x2147);
IkReal x2153=((1.0)*x2148);
IkReal x2154=(sj17*x2148);
evalcond[0]=((((-1.0)*r21*sj17*x2152))+((r20*x2151))+(((-1.0)*r22*x2153)));
evalcond[1]=((((-1.0)*r12*x2153))+((r10*x2151))+(((-1.0)*x2150*x2152)));
evalcond[2]=((((-1.0)*r00*x2148*x2149))+(((-1.0)*r02*x2152))+((r01*x2154)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x2153))+((r00*x2151))+(((-1.0)*r01*sj17*x2152)));
evalcond[4]=((((-1.0)*r20*x2148*x2149))+(((-1.0)*cj13*sj14))+(((-1.0)*r22*x2152))+(((-1.0)*cj14*sj13))+((r21*x2154)));
evalcond[5]=((((-1.0)*r10*x2148*x2149))+(((-1.0)*r12*x2152))+(((-1.0)*r20*sj17))+((x2148*x2150))+(((-1.0)*r21*x2149)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x2155 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj17))+((cj17*r20)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x2155.valid){
continue;
}
CheckValue<IkReal> x2156=IKPowWithIntegerCheck(IKsign((((cj17*r11))+((r10*sj17)))),-1);
if(!x2156.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x2155.value)+(((1.5707963267949)*(x2156.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x2157=IKcos(j16);
IkReal x2158=IKsin(j16);
IkReal x2159=((1.0)*cj17);
IkReal x2160=(r11*sj17);
IkReal x2161=(cj17*x2157);
IkReal x2162=((1.0)*x2157);
IkReal x2163=((1.0)*x2158);
IkReal x2164=(sj17*x2158);
evalcond[0]=(((r20*x2161))+(((-1.0)*r21*sj17*x2162))+(((-1.0)*r22*x2163)));
evalcond[1]=((((-1.0)*x2160*x2162))+((r10*x2161))+(((-1.0)*r12*x2163)));
evalcond[2]=(((r01*x2164))+(((-1.0)*r00*x2158*x2159))+(((-1.0)*r02*x2162)));
evalcond[3]=((-1.0)+((r00*x2161))+(((-1.0)*r01*sj17*x2162))+(((-1.0)*r02*x2163)));
evalcond[4]=((((-1.0)*cj13*sj14))+((r21*x2164))+(((-1.0)*r20*x2158*x2159))+(((-1.0)*r22*x2162))+(((-1.0)*cj14*sj13)));
evalcond[5]=((((-1.0)*r20*sj17))+(((-1.0)*r10*x2158*x2159))+(((-1.0)*r12*x2162))+((x2158*x2160))+(((-1.0)*r21*x2159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
sj15=0;
cj15=1.0;
j15=0;
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
IkReal x2165=(((r20*sj17))+((cj17*r21)));
j16eval[0]=x2165;
j16eval[1]=IKsign(x2165);
j16eval[2]=((IKabs(r12))+(IKabs((((cj17*r10))+(((-1.0)*r11*sj17))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=0;
cj15=1.0;
j15=0;
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
IkReal x2166=((1.0)*sj17);
IkReal x2167=((((-1.0)*r10*x2166))+(((-1.0)*cj17*r11)));
j16eval[0]=x2167;
j16eval[1]=IKsign(x2167);
j16eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*r21*x2166))+((cj17*r20))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=0;
cj15=1.0;
j15=0;
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
IkReal x2168=cj17*cj17;
IkReal x2169=r01*r01;
IkReal x2170=(cj17*r00);
IkReal x2171=(r01*sj17);
IkReal x2172=(((x2168*(r00*r00)))+(((-1.0)*x2168*x2169))+x2169+(r02*r02)+(((-2.0)*x2170*x2171)));
j16eval[0]=x2172;
j16eval[1]=IKsign(x2172);
j16eval[2]=((IKabs(r02))+(IKabs((x2171+(((-1.0)*x2170))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x2173=cj17*cj17;
IkReal x2174=r01*r01;
IkReal x2175=(r01*sj17);
IkReal x2176=(cj17*r00);
CheckValue<IkReal> x2177 = IKatan2WithCheck(IkReal(r02),IkReal((x2175+(((-1.0)*x2176)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2177.valid){
continue;
}
CheckValue<IkReal> x2178=IKPowWithIntegerCheck(IKsign((x2174+(((-1.0)*x2173*x2174))+(((-2.0)*x2175*x2176))+(r02*r02)+((x2173*(r00*r00))))),-1);
if(!x2178.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x2177.value)+(((1.5707963267949)*(x2178.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x2179=IKcos(j16);
IkReal x2180=IKsin(j16);
IkReal x2181=(r11*sj17);
IkReal x2182=(cj17*x2179);
IkReal x2183=((1.0)*x2179);
IkReal x2184=((1.0)*x2180);
IkReal x2185=(sj17*x2180);
IkReal x2186=(cj17*x2184);
evalcond[0]=(((r20*x2182))+(((-1.0)*r21*sj17*x2183))+(((-1.0)*r22*x2184)));
evalcond[1]=((((-1.0)*x2181*x2183))+(((-1.0)*r12*x2184))+((r10*x2182)));
evalcond[2]=((((-1.0)*r02*x2183))+((r01*x2185))+(((-1.0)*r00*x2186)));
evalcond[3]=((1.0)+(((-1.0)*r02*x2184))+(((-1.0)*r01*sj17*x2183))+((r00*x2182)));
evalcond[4]=(((x2180*x2181))+(((-1.0)*r10*x2186))+((r20*sj17))+((cj17*r21))+(((-1.0)*r12*x2183)));
evalcond[5]=((((-1.0)*r20*x2186))+(((-1.0)*cj13*sj14))+((r21*x2185))+(((-1.0)*r22*x2183))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x2187=((1.0)*sj17);
CheckValue<IkReal> x2188=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj17*r11))+(((-1.0)*r10*x2187)))),-1);
if(!x2188.valid){
continue;
}
CheckValue<IkReal> x2189 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x2187))+((cj17*r20)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x2189.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2188.value)))+(x2189.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x2190=IKcos(j16);
IkReal x2191=IKsin(j16);
IkReal x2192=(r11*sj17);
IkReal x2193=(cj17*x2190);
IkReal x2194=((1.0)*x2190);
IkReal x2195=((1.0)*x2191);
IkReal x2196=(sj17*x2191);
IkReal x2197=(cj17*x2195);
evalcond[0]=((((-1.0)*r21*sj17*x2194))+((r20*x2193))+(((-1.0)*r22*x2195)));
evalcond[1]=((((-1.0)*x2192*x2194))+(((-1.0)*r12*x2195))+((r10*x2193)));
evalcond[2]=((((-1.0)*r02*x2194))+((r01*x2196))+(((-1.0)*r00*x2197)));
evalcond[3]=((1.0)+(((-1.0)*r01*sj17*x2194))+(((-1.0)*r02*x2195))+((r00*x2193)));
evalcond[4]=(((x2191*x2192))+((r20*sj17))+(((-1.0)*r10*x2197))+((cj17*r21))+(((-1.0)*r12*x2194)));
evalcond[5]=((((-1.0)*r20*x2197))+(((-1.0)*cj13*sj14))+((r21*x2196))+(((-1.0)*r22*x2194))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x2198 = IKatan2WithCheck(IkReal((((cj17*r10))+(((-1.0)*r11*sj17)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2198.valid){
continue;
}
CheckValue<IkReal> x2199=IKPowWithIntegerCheck(IKsign((((r20*sj17))+((cj17*r21)))),-1);
if(!x2199.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x2198.value)+(((1.5707963267949)*(x2199.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x2200=IKcos(j16);
IkReal x2201=IKsin(j16);
IkReal x2202=(r11*sj17);
IkReal x2203=(cj17*x2200);
IkReal x2204=((1.0)*x2200);
IkReal x2205=((1.0)*x2201);
IkReal x2206=(sj17*x2201);
IkReal x2207=(cj17*x2205);
evalcond[0]=(((r20*x2203))+(((-1.0)*r21*sj17*x2204))+(((-1.0)*r22*x2205)));
evalcond[1]=((((-1.0)*r12*x2205))+(((-1.0)*x2202*x2204))+((r10*x2203)));
evalcond[2]=(((r01*x2206))+(((-1.0)*r00*x2207))+(((-1.0)*r02*x2204)));
evalcond[3]=((1.0)+((r00*x2203))+(((-1.0)*r01*sj17*x2204))+(((-1.0)*r02*x2205)));
evalcond[4]=((((-1.0)*r10*x2207))+(((-1.0)*r12*x2204))+((r20*sj17))+((x2201*x2202))+((cj17*r21)));
evalcond[5]=((((-1.0)*cj13*sj14))+(((-1.0)*r22*x2204))+(((-1.0)*r20*x2207))+((r21*x2206))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
IkReal x2208=((-1.0)*px);
sj15=0;
cj15=1.0;
j15=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2208);
rxp1_1=(px*r21);
rxp1_2=(r11*x2208);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j16eval[0]=r02;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
IkReal x2209=((-1.0)*px);
sj15=0;
cj15=1.0;
j15=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2209);
rxp1_1=(px*r21);
rxp1_2=(r11*x2209);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j16eval[0]=((((-1.0)*cj17*r20))+((r21*sj17)));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
CheckValue<IkReal> x2211=IKPowWithIntegerCheck(((((-1.0)*cj17*r20))+((r21*sj17))),-1);
if(!x2211.valid){
continue;
}
IkReal x2210=x2211.value;
sj16array[0]=(((cj14*sj13*x2210))+((cj13*sj14*x2210)));
if( sj16array[0] >= -1-IKFAST_SINCOS_THRESH && sj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKasin(sj16array[0]);
    cj16array[0] = IKcos(j16array[0]);
    sj16array[1] = sj16array[0];
    j16array[1] = j16array[0] > 0 ? (IKPI-j16array[0]) : (-IKPI-j16array[0]);
    cj16array[1] = -cj16array[0];
}
else if( isnan(sj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x2212=IKcos(j16);
IkReal x2213=(cj17*x2212);
IkReal x2214=((1.0)*sj17*x2212);
evalcond[0]=((-1.0)*r02*x2212);
evalcond[1]=((((-1.0)*r02*(IKsin(j16))))+(((-1.0)*sj12)));
evalcond[2]=(((r20*x2213))+(((-1.0)*r21*x2214)));
evalcond[3]=((((-1.0)*r11*x2214))+((r10*x2213)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
CheckValue<IkReal> x2215=IKPowWithIntegerCheck(r02,-1);
if(!x2215.valid){
continue;
}
sj16array[0]=((-1.0)*sj12*(x2215.value));
if( sj16array[0] >= -1-IKFAST_SINCOS_THRESH && sj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKasin(sj16array[0]);
    cj16array[0] = IKcos(j16array[0]);
    sj16array[1] = sj16array[0];
    j16array[1] = j16array[0] > 0 ? (IKPI-j16array[0]) : (-IKPI-j16array[0]);
    cj16array[1] = -cj16array[0];
}
else if( isnan(sj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x2216=IKcos(j16);
IkReal x2217=IKsin(j16);
IkReal x2218=(cj17*r20);
IkReal x2219=(r21*sj17);
IkReal x2220=((1.0)*x2216);
evalcond[0]=((-1.0)*r02*x2216);
evalcond[1]=((((-1.0)*x2219*x2220))+((x2216*x2218)));
evalcond[2]=((((-1.0)*r11*sj17*x2220))+((cj17*r10*x2216)));
evalcond[3]=((((-1.0)*x2217*x2218))+(((-1.0)*cj13*sj14))+((x2217*x2219))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j16]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x2221=((1.0)*cj12);
IkReal x2222=((1.0)*sj12);
CheckValue<IkReal> x2223 = IKatan2WithCheck(IkReal((((cj12*r01*sj17))+((r11*sj12*sj17))+(((-1.0)*cj17*r00*x2221))+(((-1.0)*cj17*r10*x2222)))),IkReal(((((-1.0)*r02*x2221))+(((-1.0)*r12*x2222)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2223.valid){
continue;
}
CheckValue<IkReal> x2224=IKPowWithIntegerCheck(IKsign((((r20*sj17))+((cj17*r21)))),-1);
if(!x2224.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x2223.value)+(((1.5707963267949)*(x2224.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x2225=IKcos(j16);
IkReal x2226=IKsin(j16);
IkReal x2227=((1.0)*cj17);
IkReal x2228=(r11*sj17);
IkReal x2229=(cj17*x2225);
IkReal x2230=((1.0)*x2225);
IkReal x2231=((1.0)*r20*sj17);
IkReal x2232=((1.0)*x2226);
IkReal x2233=(sj17*x2226);
evalcond[0]=((((-1.0)*r22*x2232))+(((-1.0)*r21*sj17*x2230))+((r20*x2229)));
evalcond[1]=(((r10*x2229))+(((-1.0)*x2228*x2230))+cj12+(((-1.0)*r12*x2232)));
evalcond[2]=((((-1.0)*r01*sj17*x2230))+(((-1.0)*r02*x2232))+(((-1.0)*sj12))+((r00*x2229)));
evalcond[3]=((((-1.0)*cj13*sj14))+(((-1.0)*r20*x2226*x2227))+((r21*x2233))+(((-1.0)*r22*x2230))+(((-1.0)*cj14*sj13)));
evalcond[4]=((((-1.0)*r02*x2230))+(((-1.0)*r00*x2226*x2227))+(((-1.0)*cj12*x2231))+((r01*x2233))+(((-1.0)*cj12*r21*x2227)));
evalcond[5]=((((-1.0)*sj12*x2231))+((x2226*x2228))+(((-1.0)*r10*x2226*x2227))+(((-1.0)*r12*x2230))+(((-1.0)*r21*sj12*x2227)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x2234=IKPowWithIntegerCheck(IKsign((((cj17*r11))+((r10*sj17)))),-1);
if(!x2234.valid){
continue;
}
CheckValue<IkReal> x2235 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x2235.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2234.value)))+(x2235.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x2236=IKcos(j16);
IkReal x2237=IKsin(j16);
IkReal x2238=((1.0)*cj17);
IkReal x2239=(r11*sj17);
IkReal x2240=(cj17*x2236);
IkReal x2241=((1.0)*x2236);
IkReal x2242=((1.0)*r20*sj17);
IkReal x2243=((1.0)*x2237);
IkReal x2244=(sj17*x2237);
evalcond[0]=((((-1.0)*r21*sj17*x2241))+(((-1.0)*r22*x2243))+((r20*x2240)));
evalcond[1]=(((r10*x2240))+cj12+(((-1.0)*r12*x2243))+(((-1.0)*x2239*x2241)));
evalcond[2]=((((-1.0)*r01*sj17*x2241))+(((-1.0)*r02*x2243))+(((-1.0)*sj12))+((r00*x2240)));
evalcond[3]=((((-1.0)*r22*x2241))+(((-1.0)*cj13*sj14))+(((-1.0)*r20*x2237*x2238))+((r21*x2244))+(((-1.0)*cj14*sj13)));
evalcond[4]=((((-1.0)*cj12*x2242))+(((-1.0)*r02*x2241))+((r01*x2244))+(((-1.0)*r00*x2237*x2238))+(((-1.0)*cj12*r21*x2238)));
evalcond[5]=((((-1.0)*sj12*x2242))+((x2237*x2239))+(((-1.0)*r12*x2241))+(((-1.0)*r21*sj12*x2238))+(((-1.0)*r10*x2237*x2238)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x2245 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2245.valid){
continue;
}
CheckValue<IkReal> x2246=IKPowWithIntegerCheck(IKsign((((r00*sj17))+((cj17*r01)))),-1);
if(!x2246.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x2245.value)+(((1.5707963267949)*(x2246.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x2247=IKcos(j16);
IkReal x2248=IKsin(j16);
IkReal x2249=((1.0)*cj17);
IkReal x2250=(r11*sj17);
IkReal x2251=(cj17*x2247);
IkReal x2252=((1.0)*x2247);
IkReal x2253=((1.0)*r20*sj17);
IkReal x2254=((1.0)*x2248);
IkReal x2255=(sj17*x2248);
evalcond[0]=((((-1.0)*r22*x2254))+((r20*x2251))+(((-1.0)*r21*sj17*x2252)));
evalcond[1]=(((r10*x2251))+(((-1.0)*r12*x2254))+cj12+(((-1.0)*x2250*x2252)));
evalcond[2]=((((-1.0)*r01*sj17*x2252))+(((-1.0)*r02*x2254))+(((-1.0)*sj12))+((r00*x2251)));
evalcond[3]=((((-1.0)*r22*x2252))+(((-1.0)*cj13*sj14))+(((-1.0)*r20*x2248*x2249))+(((-1.0)*cj14*sj13))+((r21*x2255)));
evalcond[4]=((((-1.0)*cj12*r21*x2249))+(((-1.0)*r02*x2252))+(((-1.0)*cj12*x2253))+((r01*x2255))+(((-1.0)*r00*x2248*x2249)));
evalcond[5]=((((-1.0)*sj12*x2253))+(((-1.0)*r12*x2252))+(((-1.0)*r10*x2248*x2249))+((x2248*x2250))+(((-1.0)*r21*sj12*x2249)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x2256=cj17*cj17;
IkReal x2257=r21*r21;
IkReal x2258=(cj17*r20);
IkReal x2259=(r21*sj17);
IkReal x2260=(cj13*sj14);
IkReal x2261=((1.0)*cj14*sj13);
CheckValue<IkReal> x2262 = IKatan2WithCheck(IkReal((((x2259*x2260))+(((-1.0)*x2258*x2261))+(((-1.0)*x2258*x2260))+((cj14*sj13*x2259)))),IkReal(((((-1.0)*r22*x2260))+(((-1.0)*r22*x2261)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2262.valid){
continue;
}
CheckValue<IkReal> x2263=IKPowWithIntegerCheck(IKsign((x2257+(r22*r22)+(((-2.0)*x2258*x2259))+(((-1.0)*x2256*x2257))+((x2256*(r20*r20))))),-1);
if(!x2263.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x2262.value)+(((1.5707963267949)*(x2263.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[2];
IkReal x2264=IKcos(j16);
IkReal x2265=IKsin(j16);
IkReal x2266=(cj17*r20);
IkReal x2267=(r21*sj17);
IkReal x2268=((1.0)*x2265);
IkReal x2269=((1.0)*x2264);
evalcond[0]=((((-1.0)*r22*x2268))+((x2264*x2266))+(((-1.0)*x2267*x2269)));
evalcond[1]=((((-1.0)*cj13*sj14))+(((-1.0)*r22*x2269))+((x2265*x2267))+(((-1.0)*cj14*sj13))+(((-1.0)*x2266*x2268)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x2270=(cj16*sj17);
IkReal x2271=(cj16*cj17);
if( IKabs((((r00*x2271))+(((-1.0)*r01*x2270))+(((-1.0)*r02*sj16)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x2271))+((r12*sj16))+((r11*x2270)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x2271))+(((-1.0)*r01*x2270))+(((-1.0)*r02*sj16))))+IKsqr(((((-1.0)*r10*x2271))+((r12*sj16))+((r11*x2270))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2((((r00*x2271))+(((-1.0)*r01*x2270))+(((-1.0)*r02*sj16))), ((((-1.0)*r10*x2271))+((r12*sj16))+((r11*x2270))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x2272=IKcos(j12);
IkReal x2273=IKsin(j12);
IkReal x2274=((1.0)*sj16);
IkReal x2275=(cj14*sj13);
IkReal x2276=(cj17*r01);
IkReal x2277=(r10*sj17);
IkReal x2278=(cj17*r10);
IkReal x2279=((1.0)*cj16);
IkReal x2280=(r11*sj17);
IkReal x2281=(cj17*r00);
IkReal x2282=(cj17*r21);
IkReal x2283=(cj13*sj14);
IkReal x2284=(r00*sj17);
IkReal x2285=(cj17*r11);
IkReal x2286=(r01*sj17);
IkReal x2287=((0.425)*sj13);
IkReal x2288=(r20*sj17);
IkReal x2289=((1.0)*x2272);
IkReal x2290=((1.0)*x2273);
IkReal x2291=((0.39225)*x2273);
IkReal x2292=((0.39225)*x2272);
evalcond[0]=(x2272+((cj16*x2278))+(((-1.0)*x2279*x2280))+(((-1.0)*r12*x2274)));
evalcond[1]=((((-1.0)*x2279*x2286))+(((-1.0)*r02*x2274))+(((-1.0)*x2290))+((cj16*x2281)));
evalcond[2]=((((-1.0)*x2284))+(((-1.0)*x2275*x2289))+(((-1.0)*x2276))+(((-1.0)*x2283*x2289)));
evalcond[3]=((((-1.0)*x2283*x2290))+(((-1.0)*x2285))+(((-1.0)*x2275*x2290))+(((-1.0)*x2277)));
evalcond[4]=((((-1.0)*x2288*x2289))+(((-1.0)*x2282*x2289))+((sj16*x2286))+(((-1.0)*r02*x2279))+(((-1.0)*x2274*x2281)));
evalcond[5]=((((-1.0)*x2282*x2290))+(((-1.0)*x2274*x2278))+((sj16*x2280))+(((-1.0)*x2288*x2290))+(((-1.0)*r12*x2279)));
evalcond[6]=(((x2272*x2287))+((x2283*x2292))+(((-0.10915)*x2273))+(((-0.09465)*x2276))+(((-1.0)*px))+(((-0.09465)*x2284))+((x2275*x2292)));
evalcond[7]=(((x2283*x2291))+(((-0.09465)*x2277))+(((-1.0)*py))+((x2273*x2287))+(((-0.09465)*x2285))+((x2275*x2291))+(((0.10915)*x2272)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x2293 = IKatan2WithCheck(IkReal((((cj17*r11))+((r10*sj17)))),IkReal((((r00*sj17))+((cj17*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2293.valid){
continue;
}
CheckValue<IkReal> x2294=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj13*sj14))+(((-1.0)*cj14*sj13)))),-1);
if(!x2294.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x2293.value)+(((1.5707963267949)*(x2294.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[4];
IkReal x2295=IKcos(j12);
IkReal x2296=IKsin(j12);
IkReal x2297=(cj14*sj13);
IkReal x2298=(r10*sj17);
IkReal x2299=(cj17*r01);
IkReal x2300=(r00*sj17);
IkReal x2301=(cj17*r11);
IkReal x2302=(cj13*sj14);
IkReal x2303=((0.425)*sj13);
IkReal x2304=((1.0)*x2295);
IkReal x2305=((0.39225)*x2295);
IkReal x2306=(x2296*x2302);
evalcond[0]=((((-1.0)*x2300))+(((-1.0)*x2297*x2304))+(((-1.0)*x2299))+(((-1.0)*x2302*x2304)));
evalcond[1]=((((-1.0)*x2301))+(((-1.0)*x2306))+(((-1.0)*x2298))+(((-1.0)*x2296*x2297)));
evalcond[2]=(((x2295*x2303))+((x2297*x2305))+(((-1.0)*px))+(((-0.10915)*x2296))+(((-0.09465)*x2300))+(((-0.09465)*x2299))+((x2302*x2305)));
evalcond[3]=((((0.39225)*x2306))+(((0.39225)*x2296*x2297))+((x2296*x2303))+(((-1.0)*py))+(((0.10915)*x2295))+(((-0.09465)*x2301))+(((-0.09465)*x2298)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j16eval[3];
sj15=0;
cj15=1.0;
j15=0;
IkReal x2307=(((r00*sj17))+((cj17*r01)));
j16eval[0]=x2307;
j16eval[1]=((IKabs(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))))+(IKabs((cj12*r22))));
j16eval[2]=IKsign(x2307);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=0;
cj15=1.0;
j15=0;
IkReal x2308=(((cj17*r11))+((r10*sj17)));
j16eval[0]=x2308;
j16eval[1]=((IKabs((r22*sj12)))+(IKabs(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12))))));
j16eval[2]=IKsign(x2308);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=0;
cj15=1.0;
j15=0;
IkReal x2309=((1.0)*cj12);
IkReal x2310=((1.0)*sj12);
IkReal x2311=(((r20*sj17))+((cj17*r21)));
j16eval[0]=x2311;
j16eval[1]=IKsign(x2311);
j16eval[2]=((IKabs(((((-1.0)*r12*x2310))+(((-1.0)*r02*x2309)))))+(IKabs((((cj12*r01*sj17))+(((-1.0)*cj17*r00*x2309))+((r11*sj12*sj17))+(((-1.0)*cj17*r10*x2310))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x2313 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2313)==0){
continue;
}
IkReal x2312=pow(x2313,-0.5);
CheckValue<IkReal> x2314 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2314.valid){
continue;
}
IkReal gconst78=((-1.0)*(x2314.value));
IkReal gconst79=((-1.0)*r21*x2312);
IkReal gconst80=(r20*x2312);
CheckValue<IkReal> x2315 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2315.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j17+(x2315.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x2318 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2318.valid){
continue;
}
IkReal x2316=((-1.0)*(x2318.value));
IkReal x2317=x2312;
sj15=0;
cj15=1.0;
j15=0;
sj17=gconst79;
cj17=gconst80;
j17=x2316;
IkReal gconst78=x2316;
IkReal gconst79=((-1.0)*r21*x2317);
IkReal gconst80=(r20*x2317);
j16eval[0]=cj12;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x2321 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2321.valid){
continue;
}
IkReal x2319=((-1.0)*(x2321.value));
IkReal x2320=x2312;
sj15=0;
cj15=1.0;
j15=0;
sj17=gconst79;
cj17=gconst80;
j17=x2319;
IkReal gconst78=x2319;
IkReal gconst79=((-1.0)*r21*x2320);
IkReal gconst80=(r20*x2320);
j16eval[0]=sj12;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
CheckValue<IkReal> x2324 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2324.valid){
continue;
}
IkReal x2322=((-1.0)*(x2324.value));
IkReal x2323=x2312;
sj15=0;
cj15=1.0;
j15=0;
sj17=gconst79;
cj17=gconst80;
j17=x2322;
IkReal gconst78=x2322;
IkReal gconst79=((-1.0)*r21*x2323);
IkReal gconst80=(r20*x2323);
IkReal x2325=r22*r22;
CheckValue<IkReal> x2328=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x2325))),-1);
if(!x2328.valid){
continue;
}
IkReal x2326=x2328.value;
IkReal x2327=(((x2326*(r21*r21*r21*r21)))+x2325+(((2.0)*x2326*(r20*r20)*(r21*r21)))+((x2326*(r20*r20*r20*r20))));
j16eval[0]=x2327;
j16eval[1]=IKsign(x2327);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x2329=(gconst80*r20);
IkReal x2330=(cj14*sj13);
IkReal x2331=(gconst79*r21);
IkReal x2332=((1.0)*cj13*sj14);
CheckValue<IkReal> x2333=IKPowWithIntegerCheck(IKsign(((((-2.0)*x2329*x2331))+(r22*r22)+(x2331*x2331)+(x2329*x2329))),-1);
if(!x2333.valid){
continue;
}
CheckValue<IkReal> x2334 = IKatan2WithCheck(IkReal((((cj13*sj14*x2331))+(((-1.0)*x2329*x2330))+(((-1.0)*x2329*x2332))+((x2330*x2331)))),IkReal(((((-1.0)*r22*x2332))+(((-1.0)*r22*x2330)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2334.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2333.value)))+(x2334.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x2335=IKcos(j16);
IkReal x2336=IKsin(j16);
IkReal x2337=(gconst80*r10);
IkReal x2338=((1.0)*sj12);
IkReal x2339=(gconst80*r20);
IkReal x2340=(gconst80*r21);
IkReal x2341=(gconst80*r00);
IkReal x2342=((1.0)*x2336);
IkReal x2343=((1.0)*gconst79*r20);
IkReal x2344=(gconst79*x2336);
IkReal x2345=((1.0)*x2335);
evalcond[0]=(((x2335*x2339))+(((-1.0)*r22*x2342))+(((-1.0)*gconst79*r21*x2345)));
evalcond[1]=(((x2335*x2337))+cj12+(((-1.0)*gconst79*r11*x2345))+(((-1.0)*r12*x2342)));
evalcond[2]=(((x2335*x2341))+(((-1.0)*gconst79*r01*x2345))+(((-1.0)*x2338))+(((-1.0)*r02*x2342)));
evalcond[3]=((((-1.0)*x2339*x2342))+(((-1.0)*cj13*sj14))+(((-1.0)*r22*x2345))+((r21*x2344))+(((-1.0)*cj14*sj13)));
evalcond[4]=(((r01*x2344))+(((-1.0)*x2341*x2342))+(((-1.0)*cj12*x2343))+(((-1.0)*r02*x2345))+(((-1.0)*cj12*x2340)));
evalcond[5]=((((-1.0)*x2337*x2342))+(((-1.0)*gconst79*r20*x2338))+((r11*x2344))+(((-1.0)*r12*x2345))+(((-1.0)*x2338*x2340)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x2346=IKPowWithIntegerCheck(IKsign((((gconst80*r11))+((gconst79*r10)))),-1);
if(!x2346.valid){
continue;
}
CheckValue<IkReal> x2347 = IKatan2WithCheck(IkReal(((((-1.0)*gconst79*r21*sj12))+((gconst80*r20*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x2347.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2346.value)))+(x2347.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x2348=IKcos(j16);
IkReal x2349=IKsin(j16);
IkReal x2350=(gconst80*r10);
IkReal x2351=((1.0)*sj12);
IkReal x2352=(gconst80*r20);
IkReal x2353=(gconst80*r21);
IkReal x2354=(gconst80*r00);
IkReal x2355=((1.0)*x2349);
IkReal x2356=((1.0)*gconst79*r20);
IkReal x2357=(gconst79*x2349);
IkReal x2358=((1.0)*x2348);
evalcond[0]=(((x2348*x2352))+(((-1.0)*gconst79*r21*x2358))+(((-1.0)*r22*x2355)));
evalcond[1]=(((x2348*x2350))+cj12+(((-1.0)*r12*x2355))+(((-1.0)*gconst79*r11*x2358)));
evalcond[2]=((((-1.0)*gconst79*r01*x2358))+((x2348*x2354))+(((-1.0)*r02*x2355))+(((-1.0)*x2351)));
evalcond[3]=((((-1.0)*cj13*sj14))+(((-1.0)*x2352*x2355))+(((-1.0)*r22*x2358))+(((-1.0)*cj14*sj13))+((r21*x2357)));
evalcond[4]=((((-1.0)*x2354*x2355))+((r01*x2357))+(((-1.0)*cj12*x2356))+(((-1.0)*cj12*x2353))+(((-1.0)*r02*x2358)));
evalcond[5]=((((-1.0)*gconst79*r20*x2351))+((r11*x2357))+(((-1.0)*x2350*x2355))+(((-1.0)*r12*x2358))+(((-1.0)*x2351*x2353)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x2359=IKPowWithIntegerCheck(IKsign((((gconst79*r00))+((gconst80*r01)))),-1);
if(!x2359.valid){
continue;
}
CheckValue<IkReal> x2360 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*gconst79*r21))+((cj12*gconst80*r20)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2360.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2359.value)))+(x2360.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x2361=IKcos(j16);
IkReal x2362=IKsin(j16);
IkReal x2363=(gconst80*r10);
IkReal x2364=((1.0)*sj12);
IkReal x2365=(gconst80*r20);
IkReal x2366=(gconst80*r21);
IkReal x2367=(gconst80*r00);
IkReal x2368=((1.0)*x2362);
IkReal x2369=((1.0)*gconst79*r20);
IkReal x2370=(gconst79*x2362);
IkReal x2371=((1.0)*x2361);
evalcond[0]=((((-1.0)*gconst79*r21*x2371))+((x2361*x2365))+(((-1.0)*r22*x2368)));
evalcond[1]=(cj12+((x2361*x2363))+(((-1.0)*gconst79*r11*x2371))+(((-1.0)*r12*x2368)));
evalcond[2]=((((-1.0)*x2364))+(((-1.0)*gconst79*r01*x2371))+((x2361*x2367))+(((-1.0)*r02*x2368)));
evalcond[3]=((((-1.0)*cj13*sj14))+(((-1.0)*x2365*x2368))+(((-1.0)*r22*x2371))+(((-1.0)*cj14*sj13))+((r21*x2370)));
evalcond[4]=((((-1.0)*r02*x2371))+(((-1.0)*cj12*x2366))+(((-1.0)*x2367*x2368))+(((-1.0)*cj12*x2369))+((r01*x2370)));
evalcond[5]=((((-1.0)*gconst79*r20*x2364))+(((-1.0)*x2364*x2366))+(((-1.0)*r12*x2371))+(((-1.0)*x2363*x2368))+((r11*x2370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2373 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2373)==0){
continue;
}
IkReal x2372=pow(x2373,-0.5);
CheckValue<IkReal> x2374 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2374.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x2374.value))));
IkReal gconst82=((1.0)*r21*x2372);
IkReal gconst83=((-1.0)*r20*x2372);
CheckValue<IkReal> x2375 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2375.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j17+(x2375.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x2378 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2378.valid){
continue;
}
IkReal x2376=((1.0)*(x2378.value));
IkReal x2377=x2372;
sj15=0;
cj15=1.0;
j15=0;
sj17=gconst82;
cj17=gconst83;
j17=((3.14159265)+(((-1.0)*x2376)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2376)));
IkReal gconst82=((1.0)*r21*x2377);
IkReal gconst83=((-1.0)*r20*x2377);
IkReal x2379=r22*r22;
IkReal x2380=((1.0)*x2379);
CheckValue<IkReal> x2384=IKPowWithIntegerCheck(((-1.0)+x2379),-1);
if(!x2384.valid){
continue;
}
IkReal x2381=x2384.value;
if((((1.0)+(((-1.0)*x2380)))) < -0.00001)
continue;
IkReal x2382=IKsqrt(((1.0)+(((-1.0)*x2380))));
IkReal x2383=(cj12*x2381*x2382);
j16eval[0]=((IKabs(((((-1.0)*x2380*x2383))+x2383)))+(IKabs((cj12*r22))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x2387 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2387.valid){
continue;
}
IkReal x2385=((1.0)*(x2387.value));
IkReal x2386=x2372;
sj15=0;
cj15=1.0;
j15=0;
sj17=gconst82;
cj17=gconst83;
j17=((3.14159265)+(((-1.0)*x2385)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2385)));
IkReal gconst82=((1.0)*r21*x2386);
IkReal gconst83=((-1.0)*r20*x2386);
IkReal x2388=r22*r22;
IkReal x2389=((1.0)*x2388);
CheckValue<IkReal> x2393=IKPowWithIntegerCheck(((-1.0)+x2388),-1);
if(!x2393.valid){
continue;
}
IkReal x2390=x2393.value;
if((((1.0)+(((-1.0)*x2389)))) < -0.00001)
continue;
IkReal x2391=IKsqrt(((1.0)+(((-1.0)*x2389))));
IkReal x2392=(sj12*x2390*x2391);
j16eval[0]=((IKabs((r22*sj12)))+(IKabs((x2392+(((-1.0)*x2389*x2392))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
CheckValue<IkReal> x2396 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2396.valid){
continue;
}
IkReal x2394=((1.0)*(x2396.value));
IkReal x2395=x2372;
sj15=0;
cj15=1.0;
j15=0;
sj17=gconst82;
cj17=gconst83;
j17=((3.14159265)+(((-1.0)*x2394)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2394)));
IkReal gconst82=((1.0)*r21*x2395);
IkReal gconst83=((-1.0)*r20*x2395);
IkReal x2397=r22*r22;
IkReal x2398=(cj12*r02);
IkReal x2399=(r12*sj12);
CheckValue<IkReal> x2403=IKPowWithIntegerCheck(((-1.0)+x2397),-1);
if(!x2403.valid){
continue;
}
IkReal x2400=x2403.value;
if((((1.0)+(((-1.0)*x2397)))) < -0.00001)
continue;
IkReal x2401=IKsqrt(((1.0)+(((-1.0)*x2397))));
IkReal x2402=(r22*x2400*x2401);
j16eval[0]=0;
j16eval[1]=((IKabs(((((-1.0)*x2398))+(((-1.0)*x2399)))))+(IKabs((((x2399*x2402))+((x2398*x2402))))));
j16eval[2]=0;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x2404=((1.0)*cj12);
IkReal x2405=((1.0)*sj12);
CheckValue<IkReal> x2406=IKPowWithIntegerCheck(IKsign((((gconst83*r21))+((gconst82*r20)))),-1);
if(!x2406.valid){
continue;
}
CheckValue<IkReal> x2407 = IKatan2WithCheck(IkReal((((gconst82*r11*sj12))+((cj12*gconst82*r01))+(((-1.0)*gconst83*r10*x2405))+(((-1.0)*gconst83*r00*x2404)))),IkReal(((((-1.0)*r02*x2404))+(((-1.0)*r12*x2405)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2407.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2406.value)))+(x2407.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x2408=IKcos(j16);
IkReal x2409=IKsin(j16);
IkReal x2410=((1.0)*gconst83);
IkReal x2411=((1.0)*gconst82);
IkReal x2412=(gconst83*x2408);
IkReal x2413=(gconst82*x2409);
IkReal x2414=((1.0)*x2408);
IkReal x2415=((1.0)*x2409);
evalcond[0]=(((r20*x2412))+(((-1.0)*r21*x2408*x2411))+(((-1.0)*r22*x2415)));
evalcond[1]=(((r10*x2412))+(((-1.0)*r12*x2415))+(((-1.0)*r11*x2408*x2411))+cj12);
evalcond[2]=((((-1.0)*r01*x2408*x2411))+((r00*x2412))+(((-1.0)*r02*x2415))+(((-1.0)*sj12)));
evalcond[3]=(((r21*x2413))+(((-1.0)*cj13*sj14))+(((-1.0)*r22*x2414))+(((-1.0)*cj14*sj13))+(((-1.0)*r20*x2409*x2410)));
evalcond[4]=(((r01*x2413))+(((-1.0)*cj12*r21*x2410))+(((-1.0)*cj12*r20*x2411))+(((-1.0)*r02*x2414))+(((-1.0)*r00*x2409*x2410)));
evalcond[5]=((((-1.0)*r10*x2409*x2410))+(((-1.0)*r20*sj12*x2411))+((r11*x2413))+(((-1.0)*r12*x2414))+(((-1.0)*r21*sj12*x2410)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x2416 = IKatan2WithCheck(IkReal(((((-1.0)*gconst82*r21*sj12))+((gconst83*r20*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x2416.valid){
continue;
}
CheckValue<IkReal> x2417=IKPowWithIntegerCheck(IKsign((((gconst83*r11))+((gconst82*r10)))),-1);
if(!x2417.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x2416.value)+(((1.5707963267949)*(x2417.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x2418=IKcos(j16);
IkReal x2419=IKsin(j16);
IkReal x2420=((1.0)*gconst83);
IkReal x2421=((1.0)*gconst82);
IkReal x2422=(gconst83*x2418);
IkReal x2423=(gconst82*x2419);
IkReal x2424=((1.0)*x2418);
IkReal x2425=((1.0)*x2419);
evalcond[0]=((((-1.0)*r22*x2425))+((r20*x2422))+(((-1.0)*r21*x2418*x2421)));
evalcond[1]=((((-1.0)*r11*x2418*x2421))+((r10*x2422))+(((-1.0)*r12*x2425))+cj12);
evalcond[2]=((((-1.0)*r02*x2425))+((r00*x2422))+(((-1.0)*sj12))+(((-1.0)*r01*x2418*x2421)));
evalcond[3]=(((r21*x2423))+(((-1.0)*cj13*sj14))+(((-1.0)*r20*x2419*x2420))+(((-1.0)*r22*x2424))+(((-1.0)*cj14*sj13)));
evalcond[4]=((((-1.0)*r02*x2424))+(((-1.0)*cj12*r20*x2421))+(((-1.0)*cj12*r21*x2420))+(((-1.0)*r00*x2419*x2420))+((r01*x2423)));
evalcond[5]=((((-1.0)*r10*x2419*x2420))+(((-1.0)*r20*sj12*x2421))+(((-1.0)*r12*x2424))+((r11*x2423))+(((-1.0)*r21*sj12*x2420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x2426 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*gconst82*r21))+((cj12*gconst83*r20)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2426.valid){
continue;
}
CheckValue<IkReal> x2427=IKPowWithIntegerCheck(IKsign((((gconst83*r01))+((gconst82*r00)))),-1);
if(!x2427.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x2426.value)+(((1.5707963267949)*(x2427.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x2428=IKcos(j16);
IkReal x2429=IKsin(j16);
IkReal x2430=((1.0)*gconst83);
IkReal x2431=((1.0)*gconst82);
IkReal x2432=(gconst83*x2428);
IkReal x2433=(gconst82*x2429);
IkReal x2434=((1.0)*x2428);
IkReal x2435=((1.0)*x2429);
evalcond[0]=((((-1.0)*r22*x2435))+((r20*x2432))+(((-1.0)*r21*x2428*x2431)));
evalcond[1]=(cj12+(((-1.0)*r11*x2428*x2431))+(((-1.0)*r12*x2435))+((r10*x2432)));
evalcond[2]=(((r00*x2432))+(((-1.0)*r02*x2435))+(((-1.0)*sj12))+(((-1.0)*r01*x2428*x2431)));
evalcond[3]=((((-1.0)*r22*x2434))+(((-1.0)*cj13*sj14))+(((-1.0)*r20*x2429*x2430))+((r21*x2433))+(((-1.0)*cj14*sj13)));
evalcond[4]=(((r01*x2433))+(((-1.0)*r02*x2434))+(((-1.0)*cj12*r20*x2431))+(((-1.0)*r00*x2429*x2430))+(((-1.0)*cj12*r21*x2430)));
evalcond[5]=(((r11*x2433))+(((-1.0)*r21*sj12*x2430))+(((-1.0)*r20*sj12*x2431))+(((-1.0)*r12*x2434))+(((-1.0)*r10*x2429*x2430)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2437 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2437)==0){
continue;
}
IkReal x2436=pow(x2437,-0.5);
CheckValue<IkReal> x2438 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2438.valid){
continue;
}
IkReal gconst84=((-1.0)*(x2438.value));
IkReal gconst85=((-1.0)*r11*x2436);
IkReal gconst86=(r10*x2436);
CheckValue<IkReal> x2439 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2439.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2439.value)+j17)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
CheckValue<IkReal> x2442 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2442.valid){
continue;
}
IkReal x2440=((-1.0)*(x2442.value));
IkReal x2441=x2436;
sj15=0;
cj15=1.0;
j15=0;
sj17=gconst85;
cj17=gconst86;
j17=x2440;
IkReal gconst84=x2440;
IkReal gconst85=((-1.0)*r11*x2441);
IkReal gconst86=(r10*x2441);
j16eval[0]=cj12;
j16eval[1]=r22;
j16eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x2443=((1.0)*cj12);
IkReal x2444=((1.0)*sj12);
CheckValue<IkReal> x2445 = IKatan2WithCheck(IkReal(((((-1.0)*gconst86*r00*x2443))+(((-1.0)*gconst86*r10*x2444))+((cj12*gconst85*r01))+((gconst85*r11*sj12)))),IkReal(((((-1.0)*r12*x2444))+(((-1.0)*r02*x2443)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2445.valid){
continue;
}
CheckValue<IkReal> x2446=IKPowWithIntegerCheck(IKsign((((gconst86*r21))+((gconst85*r20)))),-1);
if(!x2446.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x2445.value)+(((1.5707963267949)*(x2446.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x2447=IKcos(j16);
IkReal x2448=IKsin(j16);
IkReal x2449=((1.0)*sj12);
IkReal x2450=(gconst86*r21);
IkReal x2451=(gconst85*r20);
IkReal x2452=((1.0)*cj12);
IkReal x2453=(gconst86*x2447);
IkReal x2454=((1.0)*x2447);
IkReal x2455=((1.0)*x2448);
IkReal x2456=(gconst85*x2448);
IkReal x2457=(gconst85*x2454);
evalcond[0]=((((-1.0)*r21*x2457))+(((-1.0)*r22*x2455))+((r20*x2453)));
evalcond[1]=(((r10*x2453))+cj12+(((-1.0)*r11*x2457))+(((-1.0)*r12*x2455)));
evalcond[2]=(((r00*x2453))+(((-1.0)*r01*x2457))+(((-1.0)*x2449))+(((-1.0)*r02*x2455)));
evalcond[3]=((((-1.0)*gconst86*r20*x2455))+(((-1.0)*cj13*sj14))+(((-1.0)*r22*x2454))+(((-1.0)*cj14*sj13))+((r21*x2456)));
evalcond[4]=((((-1.0)*x2450*x2452))+(((-1.0)*gconst86*r00*x2455))+((r01*x2456))+(((-1.0)*x2451*x2452))+(((-1.0)*r02*x2454)));
evalcond[5]=((((-1.0)*gconst86*r10*x2455))+(((-1.0)*x2449*x2450))+(((-1.0)*x2449*x2451))+(((-1.0)*r12*x2454))+((r11*x2456)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x2458=IKPowWithIntegerCheck(IKsign((((gconst85*r00))+((gconst86*r01)))),-1);
if(!x2458.valid){
continue;
}
CheckValue<IkReal> x2459 = IKatan2WithCheck(IkReal((((cj12*gconst86*r20))+(((-1.0)*cj12*gconst85*r21)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2459.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2458.value)))+(x2459.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x2460=IKcos(j16);
IkReal x2461=IKsin(j16);
IkReal x2462=((1.0)*sj12);
IkReal x2463=(gconst86*r21);
IkReal x2464=(gconst85*r20);
IkReal x2465=((1.0)*cj12);
IkReal x2466=(gconst86*x2460);
IkReal x2467=((1.0)*x2460);
IkReal x2468=((1.0)*x2461);
IkReal x2469=(gconst85*x2461);
IkReal x2470=(gconst85*x2467);
evalcond[0]=((((-1.0)*r22*x2468))+(((-1.0)*r21*x2470))+((r20*x2466)));
evalcond[1]=((((-1.0)*r11*x2470))+(((-1.0)*r12*x2468))+cj12+((r10*x2466)));
evalcond[2]=((((-1.0)*r01*x2470))+(((-1.0)*x2462))+(((-1.0)*r02*x2468))+((r00*x2466)));
evalcond[3]=((((-1.0)*r22*x2467))+(((-1.0)*cj13*sj14))+((r21*x2469))+(((-1.0)*cj14*sj13))+(((-1.0)*gconst86*r20*x2468)));
evalcond[4]=((((-1.0)*x2464*x2465))+((r01*x2469))+(((-1.0)*x2463*x2465))+(((-1.0)*gconst86*r00*x2468))+(((-1.0)*r02*x2467)));
evalcond[5]=((((-1.0)*gconst86*r10*x2468))+(((-1.0)*r12*x2467))+((r11*x2469))+(((-1.0)*x2462*x2464))+(((-1.0)*x2462*x2463)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2472 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2472)==0){
continue;
}
IkReal x2471=pow(x2472,-0.5);
CheckValue<IkReal> x2473 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2473.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2473.value))));
IkReal gconst88=((1.0)*r11*x2471);
IkReal gconst89=((-1.0)*r10*x2471);
CheckValue<IkReal> x2474 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2474.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2474.value)+j17)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
CheckValue<IkReal> x2477 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2477.valid){
continue;
}
IkReal x2475=((1.0)*(x2477.value));
IkReal x2476=x2471;
sj15=0;
cj15=1.0;
j15=0;
sj17=gconst88;
cj17=gconst89;
j17=((3.14159265)+(((-1.0)*x2475)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2475)));
IkReal gconst88=((1.0)*r11*x2476);
IkReal gconst89=((-1.0)*r10*x2476);
j16eval[0]=cj12;
j16eval[1]=r22;
j16eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[5];
CheckValue<IkReal> x2480 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2480.valid){
continue;
}
IkReal x2478=((1.0)*(x2480.value));
IkReal x2479=x2471;
sj15=0;
cj15=1.0;
j15=0;
sj17=gconst88;
cj17=gconst89;
j17=((3.14159265)+(((-1.0)*x2478)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2478)));
IkReal gconst88=((1.0)*r11*x2479);
IkReal gconst89=((-1.0)*r10*x2479);
j16eval[0]=0;
j16eval[1]=r22;
j16eval[2]=sj12;
j16eval[3]=((1.0)+(((-1.0)*(r12*r12))));
j16eval[4]=0;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  || IKabs(j16eval[3]) < 0.0000010000000000  || IKabs(j16eval[4]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x2483 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2483.valid){
continue;
}
IkReal x2481=((1.0)*(x2483.value));
IkReal x2482=x2471;
sj15=0;
cj15=1.0;
j15=0;
sj17=gconst88;
cj17=gconst89;
j17=((3.14159265)+(((-1.0)*x2481)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2481)));
IkReal gconst88=((1.0)*r11*x2482);
IkReal gconst89=((-1.0)*r10*x2482);
IkReal x2484=r12*r12;
IkReal x2485=(cj12*r02);
IkReal x2486=x2471;
IkReal x2487=(sj12*x2486);
j16eval[0]=((IKabs((((r12*x2485*x2486))+(((-1.0)*x2487))+((x2484*x2487)))))+(IKabs(((((-1.0)*x2485))+(((-1.0)*r12*sj12))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x2488=((1.0)*cj12);
IkReal x2489=((1.0)*sj12);
CheckValue<IkReal> x2490 = IKatan2WithCheck(IkReal((((gconst88*r11*sj12))+((cj12*gconst88*r01))+(((-1.0)*gconst89*r10*x2489))+(((-1.0)*gconst89*r00*x2488)))),IkReal(((((-1.0)*r02*x2488))+(((-1.0)*r12*x2489)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2490.valid){
continue;
}
CheckValue<IkReal> x2491=IKPowWithIntegerCheck(IKsign((((gconst89*r21))+((gconst88*r20)))),-1);
if(!x2491.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x2490.value)+(((1.5707963267949)*(x2491.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x2492=IKcos(j16);
IkReal x2493=IKsin(j16);
IkReal x2494=(gconst89*r10);
IkReal x2495=(gconst89*r20);
IkReal x2496=((1.0)*gconst88);
IkReal x2497=((1.0)*sj12);
IkReal x2498=(gconst89*r00);
IkReal x2499=(gconst89*r21);
IkReal x2500=((1.0)*x2493);
IkReal x2501=((1.0)*x2492);
IkReal x2502=(gconst88*x2493);
evalcond[0]=(((x2492*x2495))+(((-1.0)*r21*x2492*x2496))+(((-1.0)*r22*x2500)));
evalcond[1]=(((x2492*x2494))+(((-1.0)*r12*x2500))+cj12+(((-1.0)*r11*x2492*x2496)));
evalcond[2]=(((x2492*x2498))+(((-1.0)*r02*x2500))+(((-1.0)*x2497))+(((-1.0)*r01*x2492*x2496)));
evalcond[3]=((((-1.0)*cj13*sj14))+(((-1.0)*x2495*x2500))+(((-1.0)*r22*x2501))+((r21*x2502))+(((-1.0)*cj14*sj13)));
evalcond[4]=((((-1.0)*x2498*x2500))+(((-1.0)*r02*x2501))+(((-1.0)*cj12*r20*x2496))+(((-1.0)*cj12*x2499))+((r01*x2502)));
evalcond[5]=((((-1.0)*x2497*x2499))+(((-1.0)*r12*x2501))+(((-1.0)*x2494*x2500))+(((-1.0)*r20*sj12*x2496))+((r11*x2502)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x2503 = IKatan2WithCheck(IkReal((((gconst89*r20*sj12))+(((-1.0)*gconst88*r21*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x2503.valid){
continue;
}
CheckValue<IkReal> x2504=IKPowWithIntegerCheck(IKsign((((gconst88*r10))+((gconst89*r11)))),-1);
if(!x2504.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x2503.value)+(((1.5707963267949)*(x2504.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x2505=IKcos(j16);
IkReal x2506=IKsin(j16);
IkReal x2507=(gconst89*r10);
IkReal x2508=(gconst89*r20);
IkReal x2509=((1.0)*gconst88);
IkReal x2510=((1.0)*sj12);
IkReal x2511=(gconst89*r00);
IkReal x2512=(gconst89*r21);
IkReal x2513=((1.0)*x2506);
IkReal x2514=((1.0)*x2505);
IkReal x2515=(gconst88*x2506);
evalcond[0]=(((x2505*x2508))+(((-1.0)*r22*x2513))+(((-1.0)*r21*x2505*x2509)));
evalcond[1]=(((x2505*x2507))+cj12+(((-1.0)*r12*x2513))+(((-1.0)*r11*x2505*x2509)));
evalcond[2]=((((-1.0)*x2510))+(((-1.0)*r01*x2505*x2509))+((x2505*x2511))+(((-1.0)*r02*x2513)));
evalcond[3]=((((-1.0)*x2508*x2513))+(((-1.0)*cj13*sj14))+(((-1.0)*r22*x2514))+((r21*x2515))+(((-1.0)*cj14*sj13)));
evalcond[4]=((((-1.0)*cj12*r20*x2509))+(((-1.0)*cj12*x2512))+((r01*x2515))+(((-1.0)*x2511*x2513))+(((-1.0)*r02*x2514)));
evalcond[5]=(((r11*x2515))+(((-1.0)*x2510*x2512))+(((-1.0)*r12*x2514))+(((-1.0)*r20*sj12*x2509))+(((-1.0)*x2507*x2513)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x2516 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*gconst88*r21))+((cj12*gconst89*r20)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2516.valid){
continue;
}
CheckValue<IkReal> x2517=IKPowWithIntegerCheck(IKsign((((gconst88*r00))+((gconst89*r01)))),-1);
if(!x2517.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x2516.value)+(((1.5707963267949)*(x2517.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x2518=IKcos(j16);
IkReal x2519=IKsin(j16);
IkReal x2520=(gconst89*r10);
IkReal x2521=(gconst89*r20);
IkReal x2522=((1.0)*gconst88);
IkReal x2523=((1.0)*sj12);
IkReal x2524=(gconst89*r00);
IkReal x2525=(gconst89*r21);
IkReal x2526=((1.0)*x2519);
IkReal x2527=((1.0)*x2518);
IkReal x2528=(gconst88*x2519);
evalcond[0]=(((x2518*x2521))+(((-1.0)*r21*x2518*x2522))+(((-1.0)*r22*x2526)));
evalcond[1]=((((-1.0)*r11*x2518*x2522))+(((-1.0)*r12*x2526))+cj12+((x2518*x2520)));
evalcond[2]=((((-1.0)*r02*x2526))+((x2518*x2524))+(((-1.0)*x2523))+(((-1.0)*r01*x2518*x2522)));
evalcond[3]=((((-1.0)*cj13*sj14))+(((-1.0)*cj14*sj13))+(((-1.0)*x2521*x2526))+((r21*x2528))+(((-1.0)*r22*x2527)));
evalcond[4]=((((-1.0)*x2524*x2526))+(((-1.0)*cj12*x2525))+((r01*x2528))+(((-1.0)*cj12*r20*x2522))+(((-1.0)*r02*x2527)));
evalcond[5]=((((-1.0)*x2520*x2526))+(((-1.0)*x2523*x2525))+(((-1.0)*r12*x2527))+((r11*x2528))+(((-1.0)*r20*sj12*x2522)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j12))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
sj15=0;
cj15=1.0;
j15=0;
sj12=0;
cj12=1.0;
j12=0;
IkReal x2529=(((r00*sj17))+((cj17*r01)));
j16eval[0]=x2529;
j16eval[1]=IKsign(x2529);
j16eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*r21*sj17))+((cj17*r20))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=0;
cj15=1.0;
j15=0;
sj12=0;
cj12=1.0;
j12=0;
IkReal x2530=((1.0)*sj17);
IkReal x2531=((((-1.0)*r20*x2530))+(((-1.0)*cj17*r21)));
j16eval[0]=x2531;
j16eval[1]=IKsign(x2531);
j16eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x2530))+((cj17*r00))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=0;
cj15=1.0;
j15=0;
sj12=0;
cj12=1.0;
j12=0;
IkReal x2532=cj17*cj17;
IkReal x2533=r11*r11;
IkReal x2534=(r11*sj17);
IkReal x2535=(cj17*r10);
IkReal x2536=((((-2.0)*x2534*x2535))+(r12*r12)+x2533+(((-1.0)*x2532*x2533))+((x2532*(r10*r10))));
j16eval[0]=x2536;
j16eval[1]=((IKabs(r12))+(IKabs((x2534+(((-1.0)*x2535))))));
j16eval[2]=IKsign(x2536);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x2537=cj17*cj17;
IkReal x2538=r11*r11;
IkReal x2539=(r11*sj17);
IkReal x2540=(cj17*r10);
CheckValue<IkReal> x2541 = IKatan2WithCheck(IkReal(r12),IkReal((x2539+(((-1.0)*x2540)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2541.valid){
continue;
}
CheckValue<IkReal> x2542=IKPowWithIntegerCheck(IKsign(((r12*r12)+x2538+(((-2.0)*x2539*x2540))+(((-1.0)*x2537*x2538))+((x2537*(r10*r10))))),-1);
if(!x2542.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x2541.value)+(((1.5707963267949)*(x2542.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x2543=IKcos(j16);
IkReal x2544=IKsin(j16);
IkReal x2545=((1.0)*cj17);
IkReal x2546=(r11*sj17);
IkReal x2547=(cj17*x2543);
IkReal x2548=((1.0)*x2543);
IkReal x2549=((1.0)*x2544);
IkReal x2550=(sj17*x2544);
evalcond[0]=(((r20*x2547))+(((-1.0)*r22*x2549))+(((-1.0)*r21*sj17*x2548)));
evalcond[1]=(((r00*x2547))+(((-1.0)*r02*x2549))+(((-1.0)*r01*sj17*x2548)));
evalcond[2]=((((-1.0)*r12*x2548))+(((-1.0)*r10*x2544*x2545))+((x2544*x2546)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2549))+(((-1.0)*x2546*x2548))+((r10*x2547)));
evalcond[4]=((((-1.0)*cj13*sj14))+(((-1.0)*r22*x2548))+(((-1.0)*cj14*sj13))+(((-1.0)*r20*x2544*x2545))+((r21*x2550)));
evalcond[5]=(((r01*x2550))+(((-1.0)*r20*sj17))+(((-1.0)*r21*x2545))+(((-1.0)*r02*x2548))+(((-1.0)*r00*x2544*x2545)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x2551=((1.0)*sj17);
CheckValue<IkReal> x2552=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj17*r21))+(((-1.0)*r20*x2551)))),-1);
if(!x2552.valid){
continue;
}
CheckValue<IkReal> x2553 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x2551))+((cj17*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2553.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2552.value)))+(x2553.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x2554=IKcos(j16);
IkReal x2555=IKsin(j16);
IkReal x2556=((1.0)*cj17);
IkReal x2557=(r11*sj17);
IkReal x2558=(cj17*x2554);
IkReal x2559=((1.0)*x2554);
IkReal x2560=((1.0)*x2555);
IkReal x2561=(sj17*x2555);
evalcond[0]=((((-1.0)*r22*x2560))+(((-1.0)*r21*sj17*x2559))+((r20*x2558)));
evalcond[1]=((((-1.0)*r02*x2560))+((r00*x2558))+(((-1.0)*r01*sj17*x2559)));
evalcond[2]=((((-1.0)*r12*x2559))+((x2555*x2557))+(((-1.0)*r10*x2555*x2556)));
evalcond[3]=((1.0)+(((-1.0)*x2557*x2559))+(((-1.0)*r12*x2560))+((r10*x2558)));
evalcond[4]=((((-1.0)*r20*x2555*x2556))+(((-1.0)*cj13*sj14))+(((-1.0)*cj14*sj13))+(((-1.0)*r22*x2559))+((r21*x2561)));
evalcond[5]=((((-1.0)*r00*x2555*x2556))+((r01*x2561))+(((-1.0)*r21*x2556))+(((-1.0)*r20*sj17))+(((-1.0)*r02*x2559)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x2562 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj17))+((cj17*r20)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x2562.valid){
continue;
}
CheckValue<IkReal> x2563=IKPowWithIntegerCheck(IKsign((((r00*sj17))+((cj17*r01)))),-1);
if(!x2563.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x2562.value)+(((1.5707963267949)*(x2563.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x2564=IKcos(j16);
IkReal x2565=IKsin(j16);
IkReal x2566=((1.0)*cj17);
IkReal x2567=(r11*sj17);
IkReal x2568=(cj17*x2564);
IkReal x2569=((1.0)*x2564);
IkReal x2570=((1.0)*x2565);
IkReal x2571=(sj17*x2565);
evalcond[0]=((((-1.0)*r21*sj17*x2569))+((r20*x2568))+(((-1.0)*r22*x2570)));
evalcond[1]=(((r00*x2568))+(((-1.0)*r02*x2570))+(((-1.0)*r01*sj17*x2569)));
evalcond[2]=(((x2565*x2567))+(((-1.0)*r10*x2565*x2566))+(((-1.0)*r12*x2569)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2570))+((r10*x2568))+(((-1.0)*x2567*x2569)));
evalcond[4]=((((-1.0)*r20*x2565*x2566))+((r21*x2571))+(((-1.0)*r22*x2569))+(((-1.0)*cj13*sj14))+(((-1.0)*cj14*sj13)));
evalcond[5]=((((-1.0)*r00*x2565*x2566))+(((-1.0)*r21*x2566))+(((-1.0)*r02*x2569))+(((-1.0)*r20*sj17))+((r01*x2571)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
sj15=0;
cj15=1.0;
j15=0;
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
IkReal x2572=(((r20*sj17))+((cj17*r21)));
j16eval[0]=x2572;
j16eval[1]=IKsign(x2572);
j16eval[2]=((IKabs(r02))+(IKabs((((cj17*r00))+(((-1.0)*r01*sj17))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=0;
cj15=1.0;
j15=0;
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
IkReal x2573=((1.0)*sj17);
IkReal x2574=((((-1.0)*cj17*r01))+(((-1.0)*r00*x2573)));
j16eval[0]=x2574;
j16eval[1]=IKsign(x2574);
j16eval[2]=((IKabs((((cj17*r20))+(((-1.0)*r21*x2573)))))+(IKabs(r22)));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=0;
cj15=1.0;
j15=0;
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
IkReal x2575=cj17*cj17;
IkReal x2576=r11*r11;
IkReal x2577=(r11*sj17);
IkReal x2578=(cj17*r10);
IkReal x2579=(((x2575*x2576))+(((2.0)*x2577*x2578))+(((-1.0)*x2576))+(((-1.0)*(r12*r12)))+(((-1.0)*x2575*(r10*r10))));
j16eval[0]=x2579;
j16eval[1]=((IKabs(r12))+(IKabs((x2577+(((-1.0)*x2578))))));
j16eval[2]=IKsign(x2579);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x2580=cj17*cj17;
IkReal x2581=r11*r11;
IkReal x2582=(r11*sj17);
IkReal x2583=(cj17*r10);
CheckValue<IkReal> x2584=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2581))+(((2.0)*x2582*x2583))+((x2580*x2581))+(((-1.0)*(r12*r12)))+(((-1.0)*x2580*(r10*r10))))),-1);
if(!x2584.valid){
continue;
}
CheckValue<IkReal> x2585 = IKatan2WithCheck(IkReal(r12),IkReal((x2582+(((-1.0)*x2583)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2585.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2584.value)))+(x2585.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x2586=IKcos(j16);
IkReal x2587=IKsin(j16);
IkReal x2588=(r11*sj17);
IkReal x2589=(cj17*x2586);
IkReal x2590=((1.0)*x2586);
IkReal x2591=((1.0)*x2587);
IkReal x2592=(sj17*x2587);
IkReal x2593=(cj17*x2591);
evalcond[0]=((((-1.0)*r22*x2591))+(((-1.0)*r21*sj17*x2590))+((r20*x2589)));
evalcond[1]=(((r00*x2589))+(((-1.0)*r02*x2591))+(((-1.0)*r01*sj17*x2590)));
evalcond[2]=((((-1.0)*r12*x2590))+((x2587*x2588))+(((-1.0)*r10*x2593)));
evalcond[3]=((-1.0)+((r10*x2589))+(((-1.0)*x2588*x2590))+(((-1.0)*r12*x2591)));
evalcond[4]=((((-1.0)*r00*x2593))+((r01*x2592))+(((-1.0)*r02*x2590))+((r20*sj17))+((cj17*r21)));
evalcond[5]=((((-1.0)*r22*x2590))+(((-1.0)*r20*x2593))+(((-1.0)*cj13*sj14))+(((-1.0)*cj14*sj13))+((r21*x2592)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x2594=((1.0)*sj17);
CheckValue<IkReal> x2595 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x2594))+((cj17*r20)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x2595.valid){
continue;
}
CheckValue<IkReal> x2596=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x2594))+(((-1.0)*cj17*r01)))),-1);
if(!x2596.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x2595.value)+(((1.5707963267949)*(x2596.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x2597=IKcos(j16);
IkReal x2598=IKsin(j16);
IkReal x2599=(r11*sj17);
IkReal x2600=(cj17*x2597);
IkReal x2601=((1.0)*x2597);
IkReal x2602=((1.0)*x2598);
IkReal x2603=(sj17*x2598);
IkReal x2604=(cj17*x2602);
evalcond[0]=(((r20*x2600))+(((-1.0)*r21*sj17*x2601))+(((-1.0)*r22*x2602)));
evalcond[1]=((((-1.0)*r02*x2602))+(((-1.0)*r01*sj17*x2601))+((r00*x2600)));
evalcond[2]=(((x2598*x2599))+(((-1.0)*r10*x2604))+(((-1.0)*r12*x2601)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2602))+((r10*x2600))+(((-1.0)*x2599*x2601)));
evalcond[4]=(((r20*sj17))+((cj17*r21))+(((-1.0)*r02*x2601))+((r01*x2603))+(((-1.0)*r00*x2604)));
evalcond[5]=((((-1.0)*cj13*sj14))+(((-1.0)*r22*x2601))+((r21*x2603))+(((-1.0)*r20*x2604))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x2605 = IKatan2WithCheck(IkReal((((cj17*r00))+(((-1.0)*r01*sj17)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2605.valid){
continue;
}
CheckValue<IkReal> x2606=IKPowWithIntegerCheck(IKsign((((r20*sj17))+((cj17*r21)))),-1);
if(!x2606.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x2605.value)+(((1.5707963267949)*(x2606.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x2607=IKcos(j16);
IkReal x2608=IKsin(j16);
IkReal x2609=(r11*sj17);
IkReal x2610=(cj17*x2607);
IkReal x2611=((1.0)*x2607);
IkReal x2612=((1.0)*x2608);
IkReal x2613=(sj17*x2608);
IkReal x2614=(cj17*x2612);
evalcond[0]=(((r20*x2610))+(((-1.0)*r21*sj17*x2611))+(((-1.0)*r22*x2612)));
evalcond[1]=(((r00*x2610))+(((-1.0)*r01*sj17*x2611))+(((-1.0)*r02*x2612)));
evalcond[2]=((((-1.0)*r12*x2611))+(((-1.0)*r10*x2614))+((x2608*x2609)));
evalcond[3]=((-1.0)+(((-1.0)*x2609*x2611))+(((-1.0)*r12*x2612))+((r10*x2610)));
evalcond[4]=((((-1.0)*r00*x2614))+((r01*x2613))+((r20*sj17))+((cj17*r21))+(((-1.0)*r02*x2611)));
evalcond[5]=((((-1.0)*cj13*sj14))+(((-1.0)*r22*x2611))+(((-1.0)*cj14*sj13))+(((-1.0)*r20*x2614))+((r21*x2613)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2616 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2616)==0){
continue;
}
IkReal x2615=pow(x2616,-0.5);
CheckValue<IkReal> x2617 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2617.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2617.value));
IkReal gconst91=((-1.0)*r01*x2615);
IkReal gconst92=(r00*x2615);
CheckValue<IkReal> x2618 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2618.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2618.value)+j17)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
CheckValue<IkReal> x2621 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2621.valid){
continue;
}
IkReal x2619=((-1.0)*(x2621.value));
IkReal x2620=x2615;
sj15=0;
cj15=1.0;
j15=0;
sj17=gconst91;
cj17=gconst92;
j17=x2619;
IkReal gconst90=x2619;
IkReal gconst91=((-1.0)*r01*x2620);
IkReal gconst92=(r00*x2620);
j16eval[0]=r22;
j16eval[1]=sj12;
j16eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x2622=((1.0)*gconst92);
CheckValue<IkReal> x2623 = IKatan2WithCheck(IkReal((((cj12*gconst91*r01))+(((-1.0)*cj12*r00*x2622))+((gconst91*r11*sj12))+(((-1.0)*r10*sj12*x2622)))),IkReal(((((-1.0)*cj12*r02))+(((-1.0)*r12*sj12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2623.valid){
continue;
}
CheckValue<IkReal> x2624=IKPowWithIntegerCheck(IKsign((((gconst91*r20))+((gconst92*r21)))),-1);
if(!x2624.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x2623.value)+(((1.5707963267949)*(x2624.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x2625=IKcos(j16);
IkReal x2626=IKsin(j16);
IkReal x2627=(gconst92*r00);
IkReal x2628=((1.0)*gconst91);
IkReal x2629=((1.0)*sj12);
IkReal x2630=(gconst92*r20);
IkReal x2631=(gconst92*r21);
IkReal x2632=(gconst92*r10);
IkReal x2633=(gconst91*x2626);
IkReal x2634=((1.0)*x2626);
IkReal x2635=((1.0)*x2625);
evalcond[0]=(((x2625*x2630))+(((-1.0)*r21*x2625*x2628))+(((-1.0)*r22*x2634)));
evalcond[1]=((((-1.0)*r11*x2625*x2628))+((x2625*x2632))+cj12+(((-1.0)*r12*x2634)));
evalcond[2]=((((-1.0)*r01*x2625*x2628))+(((-1.0)*r02*x2634))+(((-1.0)*x2629))+((x2625*x2627)));
evalcond[3]=((((-1.0)*cj13*sj14))+((r21*x2633))+(((-1.0)*x2630*x2634))+(((-1.0)*cj14*sj13))+(((-1.0)*r22*x2635)));
evalcond[4]=((((-1.0)*r02*x2635))+((r01*x2633))+(((-1.0)*cj12*r20*x2628))+(((-1.0)*cj12*x2631))+(((-1.0)*x2627*x2634)));
evalcond[5]=((((-1.0)*r20*sj12*x2628))+((r11*x2633))+(((-1.0)*x2632*x2634))+(((-1.0)*x2629*x2631))+(((-1.0)*r12*x2635)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x2636 = IKatan2WithCheck(IkReal((((gconst92*r20*sj12))+(((-1.0)*gconst91*r21*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x2636.valid){
continue;
}
CheckValue<IkReal> x2637=IKPowWithIntegerCheck(IKsign((((gconst91*r10))+((gconst92*r11)))),-1);
if(!x2637.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x2636.value)+(((1.5707963267949)*(x2637.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x2638=IKcos(j16);
IkReal x2639=IKsin(j16);
IkReal x2640=(gconst92*r00);
IkReal x2641=((1.0)*gconst91);
IkReal x2642=((1.0)*sj12);
IkReal x2643=(gconst92*r20);
IkReal x2644=(gconst92*r21);
IkReal x2645=(gconst92*r10);
IkReal x2646=(gconst91*x2639);
IkReal x2647=((1.0)*x2639);
IkReal x2648=((1.0)*x2638);
evalcond[0]=((((-1.0)*r22*x2647))+(((-1.0)*r21*x2638*x2641))+((x2638*x2643)));
evalcond[1]=((((-1.0)*r11*x2638*x2641))+(((-1.0)*r12*x2647))+((x2638*x2645))+cj12);
evalcond[2]=(((x2638*x2640))+(((-1.0)*r02*x2647))+(((-1.0)*x2642))+(((-1.0)*r01*x2638*x2641)));
evalcond[3]=((((-1.0)*r22*x2648))+((r21*x2646))+(((-1.0)*cj13*sj14))+(((-1.0)*x2643*x2647))+(((-1.0)*cj14*sj13)));
evalcond[4]=((((-1.0)*cj12*r20*x2641))+(((-1.0)*r02*x2648))+(((-1.0)*x2640*x2647))+((r01*x2646))+(((-1.0)*cj12*x2644)));
evalcond[5]=(((r11*x2646))+(((-1.0)*r12*x2648))+(((-1.0)*x2645*x2647))+(((-1.0)*r20*sj12*x2641))+(((-1.0)*x2642*x2644)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2650 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2650)==0){
continue;
}
IkReal x2649=pow(x2650,-0.5);
CheckValue<IkReal> x2651 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2651.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2651.value))));
IkReal gconst94=((1.0)*r01*x2649);
IkReal gconst95=((-1.0)*r00*x2649);
CheckValue<IkReal> x2652 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2652.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2652.value)+j17)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[5];
CheckValue<IkReal> x2655 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2655.valid){
continue;
}
IkReal x2653=((1.0)*(x2655.value));
IkReal x2654=x2649;
sj15=0;
cj15=1.0;
j15=0;
sj17=gconst94;
cj17=gconst95;
j17=((3.14159265)+(((-1.0)*x2653)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2653)));
IkReal gconst94=((1.0)*r01*x2654);
IkReal gconst95=((-1.0)*r00*x2654);
j16eval[0]=0;
j16eval[1]=0;
j16eval[2]=cj12;
j16eval[3]=r22;
j16eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  || IKabs(j16eval[3]) < 0.0000010000000000  || IKabs(j16eval[4]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
CheckValue<IkReal> x2658 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2658.valid){
continue;
}
IkReal x2656=((1.0)*(x2658.value));
IkReal x2657=x2649;
sj15=0;
cj15=1.0;
j15=0;
sj17=gconst94;
cj17=gconst95;
j17=((3.14159265)+(((-1.0)*x2656)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2656)));
IkReal gconst94=((1.0)*r01*x2657);
IkReal gconst95=((-1.0)*r00*x2657);
j16eval[0]=r22;
j16eval[1]=sj12;
j16eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x2661 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2661.valid){
continue;
}
IkReal x2659=((1.0)*(x2661.value));
IkReal x2660=x2649;
sj15=0;
cj15=1.0;
j15=0;
sj17=gconst94;
cj17=gconst95;
j17=((3.14159265)+(((-1.0)*x2659)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2659)));
IkReal gconst94=((1.0)*r01*x2660);
IkReal gconst95=((-1.0)*r00*x2660);
IkReal x2662=r02*r02;
IkReal x2663=(r12*sj12);
IkReal x2664=x2649;
IkReal x2665=(cj12*x2664);
j16eval[0]=((IKabs(((((-1.0)*x2663))+(((-1.0)*cj12*r02)))))+(IKabs(((((-1.0)*x2665))+((x2662*x2665))+((r02*x2663*x2664))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x2666=((1.0)*cj12);
IkReal x2667=((1.0)*sj12);
CheckValue<IkReal> x2668=IKPowWithIntegerCheck(IKsign((((gconst95*r21))+((gconst94*r20)))),-1);
if(!x2668.valid){
continue;
}
CheckValue<IkReal> x2669 = IKatan2WithCheck(IkReal((((cj12*gconst94*r01))+(((-1.0)*gconst95*r10*x2667))+(((-1.0)*gconst95*r00*x2666))+((gconst94*r11*sj12)))),IkReal(((((-1.0)*r12*x2667))+(((-1.0)*r02*x2666)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2669.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2668.value)))+(x2669.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x2670=IKcos(j16);
IkReal x2671=IKsin(j16);
IkReal x2672=((1.0)*gconst95);
IkReal x2673=(gconst94*r11);
IkReal x2674=(gconst94*r21);
IkReal x2675=((1.0)*sj12);
IkReal x2676=(gconst94*r20);
IkReal x2677=(gconst94*r01);
IkReal x2678=(gconst95*x2670);
IkReal x2679=((1.0)*x2670);
IkReal x2680=((1.0)*x2671);
evalcond[0]=((((-1.0)*x2674*x2679))+(((-1.0)*r22*x2680))+((r20*x2678)));
evalcond[1]=((((-1.0)*r12*x2680))+(((-1.0)*x2673*x2679))+cj12+((r10*x2678)));
evalcond[2]=((((-1.0)*r02*x2680))+(((-1.0)*x2677*x2679))+(((-1.0)*x2675))+((r00*x2678)));
evalcond[3]=((((-1.0)*cj13*sj14))+(((-1.0)*r20*x2671*x2672))+((x2671*x2674))+(((-1.0)*cj14*sj13))+(((-1.0)*r22*x2679)));
evalcond[4]=((((-1.0)*r00*x2671*x2672))+(((-1.0)*r02*x2679))+((x2671*x2677))+(((-1.0)*cj12*x2676))+(((-1.0)*cj12*r21*x2672)));
evalcond[5]=((((-1.0)*r12*x2679))+(((-1.0)*r21*sj12*x2672))+(((-1.0)*x2675*x2676))+(((-1.0)*r10*x2671*x2672))+((x2671*x2673)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x2681=IKPowWithIntegerCheck(IKsign((((gconst95*r11))+((gconst94*r10)))),-1);
if(!x2681.valid){
continue;
}
CheckValue<IkReal> x2682 = IKatan2WithCheck(IkReal((((gconst95*r20*sj12))+(((-1.0)*gconst94*r21*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x2682.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2681.value)))+(x2682.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x2683=IKcos(j16);
IkReal x2684=IKsin(j16);
IkReal x2685=((1.0)*gconst95);
IkReal x2686=(gconst94*r11);
IkReal x2687=(gconst94*r21);
IkReal x2688=((1.0)*sj12);
IkReal x2689=(gconst94*r20);
IkReal x2690=(gconst94*r01);
IkReal x2691=(gconst95*x2683);
IkReal x2692=((1.0)*x2683);
IkReal x2693=((1.0)*x2684);
evalcond[0]=((((-1.0)*r22*x2693))+(((-1.0)*x2687*x2692))+((r20*x2691)));
evalcond[1]=(((r10*x2691))+cj12+(((-1.0)*x2686*x2692))+(((-1.0)*r12*x2693)));
evalcond[2]=((((-1.0)*r02*x2693))+((r00*x2691))+(((-1.0)*x2688))+(((-1.0)*x2690*x2692)));
evalcond[3]=((((-1.0)*cj13*sj14))+((x2684*x2687))+(((-1.0)*r22*x2692))+(((-1.0)*r20*x2684*x2685))+(((-1.0)*cj14*sj13)));
evalcond[4]=((((-1.0)*r00*x2684*x2685))+(((-1.0)*r02*x2692))+((x2684*x2690))+(((-1.0)*cj12*r21*x2685))+(((-1.0)*cj12*x2689)));
evalcond[5]=((((-1.0)*r10*x2684*x2685))+(((-1.0)*x2688*x2689))+((x2684*x2686))+(((-1.0)*r12*x2692))+(((-1.0)*r21*sj12*x2685)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x2694 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*gconst94*r21))+((cj12*gconst95*r20)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2694.valid){
continue;
}
CheckValue<IkReal> x2695=IKPowWithIntegerCheck(IKsign((((gconst95*r01))+((gconst94*r00)))),-1);
if(!x2695.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x2694.value)+(((1.5707963267949)*(x2695.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x2696=IKcos(j16);
IkReal x2697=IKsin(j16);
IkReal x2698=((1.0)*gconst95);
IkReal x2699=(gconst94*r11);
IkReal x2700=(gconst94*r21);
IkReal x2701=((1.0)*sj12);
IkReal x2702=(gconst94*r20);
IkReal x2703=(gconst94*r01);
IkReal x2704=(gconst95*x2696);
IkReal x2705=((1.0)*x2696);
IkReal x2706=((1.0)*x2697);
evalcond[0]=((((-1.0)*r22*x2706))+((r20*x2704))+(((-1.0)*x2700*x2705)));
evalcond[1]=((((-1.0)*r12*x2706))+((r10*x2704))+cj12+(((-1.0)*x2699*x2705)));
evalcond[2]=(((r00*x2704))+(((-1.0)*r02*x2706))+(((-1.0)*x2701))+(((-1.0)*x2703*x2705)));
evalcond[3]=((((-1.0)*r22*x2705))+(((-1.0)*cj13*sj14))+((x2697*x2700))+(((-1.0)*r20*x2697*x2698))+(((-1.0)*cj14*sj13)));
evalcond[4]=((((-1.0)*cj12*r21*x2698))+(((-1.0)*r02*x2705))+((x2697*x2703))+(((-1.0)*cj12*x2702))+(((-1.0)*r00*x2697*x2698)));
evalcond[5]=((((-1.0)*r12*x2705))+(((-1.0)*r10*x2697*x2698))+((x2697*x2699))+(((-1.0)*x2701*x2702))+(((-1.0)*r21*sj12*x2698)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
sj15=0;
cj15=1.0;
j15=0;
sj12=1.0;
cj12=0;
j12=1.5707963267949;
IkReal x2707=(((cj17*r11))+((r10*sj17)));
j16eval[0]=x2707;
j16eval[1]=IKsign(x2707);
j16eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*r21*sj17))+((cj17*r20))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=0;
cj15=1.0;
j15=0;
sj12=1.0;
cj12=0;
j12=1.5707963267949;
IkReal x2708=((1.0)*sj17);
IkReal x2709=((((-1.0)*cj17*r21))+(((-1.0)*r20*x2708)));
j16eval[0]=x2709;
j16eval[1]=IKsign(x2709);
j16eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*r11*x2708))+((cj17*r10))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=0;
cj15=1.0;
j15=0;
sj12=1.0;
cj12=0;
j12=1.5707963267949;
IkReal x2710=cj17*cj17;
IkReal x2711=r01*r01;
IkReal x2712=(r01*sj17);
IkReal x2713=(cj17*r00);
IkReal x2714=((((-1.0)*x2711))+(((-1.0)*(r02*r02)))+(((-1.0)*x2710*(r00*r00)))+((x2710*x2711))+(((2.0)*x2712*x2713)));
j16eval[0]=x2714;
j16eval[1]=IKsign(x2714);
j16eval[2]=((IKabs(r02))+(IKabs((x2712+(((-1.0)*x2713))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x2715=cj17*cj17;
IkReal x2716=r01*r01;
IkReal x2717=(r01*sj17);
IkReal x2718=(cj17*r00);
CheckValue<IkReal> x2719=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2716))+(((-1.0)*(r02*r02)))+(((-1.0)*x2715*(r00*r00)))+(((2.0)*x2717*x2718))+((x2715*x2716)))),-1);
if(!x2719.valid){
continue;
}
CheckValue<IkReal> x2720 = IKatan2WithCheck(IkReal(r02),IkReal((x2717+(((-1.0)*x2718)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2720.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2719.value)))+(x2720.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x2721=IKcos(j16);
IkReal x2722=IKsin(j16);
IkReal x2723=((1.0)*cj17);
IkReal x2724=(r11*sj17);
IkReal x2725=(cj17*x2721);
IkReal x2726=((1.0)*x2721);
IkReal x2727=((1.0)*x2722);
IkReal x2728=(sj17*x2722);
evalcond[0]=((((-1.0)*r21*sj17*x2726))+(((-1.0)*r22*x2727))+((r20*x2725)));
evalcond[1]=((((-1.0)*x2724*x2726))+(((-1.0)*r12*x2727))+((r10*x2725)));
evalcond[2]=((((-1.0)*r00*x2722*x2723))+((r01*x2728))+(((-1.0)*r02*x2726)));
evalcond[3]=((-1.0)+(((-1.0)*r01*sj17*x2726))+((r00*x2725))+(((-1.0)*r02*x2727)));
evalcond[4]=((((-1.0)*r20*x2722*x2723))+(((-1.0)*cj13*sj14))+((r21*x2728))+(((-1.0)*r22*x2726))+(((-1.0)*cj14*sj13)));
evalcond[5]=((((-1.0)*r21*x2723))+(((-1.0)*r10*x2722*x2723))+(((-1.0)*r12*x2726))+(((-1.0)*r20*sj17))+((x2722*x2724)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x2729=((1.0)*sj17);
CheckValue<IkReal> x2730=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj17*r21))+(((-1.0)*r20*x2729)))),-1);
if(!x2730.valid){
continue;
}
CheckValue<IkReal> x2731 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x2729))+((cj17*r10)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2731.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2730.value)))+(x2731.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x2732=IKcos(j16);
IkReal x2733=IKsin(j16);
IkReal x2734=((1.0)*cj17);
IkReal x2735=(r11*sj17);
IkReal x2736=(cj17*x2732);
IkReal x2737=((1.0)*x2732);
IkReal x2738=((1.0)*x2733);
IkReal x2739=(sj17*x2733);
evalcond[0]=((((-1.0)*r21*sj17*x2737))+(((-1.0)*r22*x2738))+((r20*x2736)));
evalcond[1]=((((-1.0)*x2735*x2737))+(((-1.0)*r12*x2738))+((r10*x2736)));
evalcond[2]=((((-1.0)*r00*x2733*x2734))+((r01*x2739))+(((-1.0)*r02*x2737)));
evalcond[3]=((-1.0)+(((-1.0)*r01*sj17*x2737))+((r00*x2736))+(((-1.0)*r02*x2738)));
evalcond[4]=((((-1.0)*cj13*sj14))+((r21*x2739))+(((-1.0)*r22*x2737))+(((-1.0)*cj14*sj13))+(((-1.0)*r20*x2733*x2734)));
evalcond[5]=((((-1.0)*r10*x2733*x2734))+(((-1.0)*r20*sj17))+(((-1.0)*r12*x2737))+(((-1.0)*r21*x2734))+((x2733*x2735)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x2740 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj17))+((cj17*r20)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x2740.valid){
continue;
}
CheckValue<IkReal> x2741=IKPowWithIntegerCheck(IKsign((((cj17*r11))+((r10*sj17)))),-1);
if(!x2741.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x2740.value)+(((1.5707963267949)*(x2741.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x2742=IKcos(j16);
IkReal x2743=IKsin(j16);
IkReal x2744=((1.0)*cj17);
IkReal x2745=(r11*sj17);
IkReal x2746=(cj17*x2742);
IkReal x2747=((1.0)*x2742);
IkReal x2748=((1.0)*x2743);
IkReal x2749=(sj17*x2743);
evalcond[0]=(((r20*x2746))+(((-1.0)*r21*sj17*x2747))+(((-1.0)*r22*x2748)));
evalcond[1]=((((-1.0)*x2745*x2747))+((r10*x2746))+(((-1.0)*r12*x2748)));
evalcond[2]=((((-1.0)*r00*x2743*x2744))+((r01*x2749))+(((-1.0)*r02*x2747)));
evalcond[3]=((-1.0)+(((-1.0)*r01*sj17*x2747))+((r00*x2746))+(((-1.0)*r02*x2748)));
evalcond[4]=(((r21*x2749))+(((-1.0)*cj13*sj14))+(((-1.0)*r20*x2743*x2744))+(((-1.0)*cj14*sj13))+(((-1.0)*r22*x2747)));
evalcond[5]=(((x2743*x2745))+(((-1.0)*r20*sj17))+(((-1.0)*r12*x2747))+(((-1.0)*r10*x2743*x2744))+(((-1.0)*r21*x2744)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
sj15=0;
cj15=1.0;
j15=0;
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
IkReal x2750=(((r20*sj17))+((cj17*r21)));
j16eval[0]=x2750;
j16eval[1]=IKsign(x2750);
j16eval[2]=((IKabs(r12))+(IKabs((((cj17*r10))+(((-1.0)*r11*sj17))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=0;
cj15=1.0;
j15=0;
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
IkReal x2751=((1.0)*sj17);
IkReal x2752=((((-1.0)*cj17*r11))+(((-1.0)*r10*x2751)));
j16eval[0]=x2752;
j16eval[1]=IKsign(x2752);
j16eval[2]=((IKabs(r22))+(IKabs((((cj17*r20))+(((-1.0)*r21*x2751))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=0;
cj15=1.0;
j15=0;
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
IkReal x2753=cj17*cj17;
IkReal x2754=r01*r01;
IkReal x2755=(cj17*r00);
IkReal x2756=(r01*sj17);
IkReal x2757=(x2754+(((-2.0)*x2755*x2756))+((x2753*(r00*r00)))+(((-1.0)*x2753*x2754))+(r02*r02));
j16eval[0]=x2757;
j16eval[1]=IKsign(x2757);
j16eval[2]=((IKabs(r02))+(IKabs((x2756+(((-1.0)*x2755))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x2758=cj17*cj17;
IkReal x2759=r01*r01;
IkReal x2760=(r01*sj17);
IkReal x2761=(cj17*r00);
CheckValue<IkReal> x2762 = IKatan2WithCheck(IkReal(r02),IkReal((x2760+(((-1.0)*x2761)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2762.valid){
continue;
}
CheckValue<IkReal> x2763=IKPowWithIntegerCheck(IKsign((x2759+(((-2.0)*x2760*x2761))+(((-1.0)*x2758*x2759))+(r02*r02)+((x2758*(r00*r00))))),-1);
if(!x2763.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x2762.value)+(((1.5707963267949)*(x2763.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x2764=IKcos(j16);
IkReal x2765=IKsin(j16);
IkReal x2766=(r11*sj17);
IkReal x2767=(cj17*x2764);
IkReal x2768=((1.0)*x2764);
IkReal x2769=((1.0)*x2765);
IkReal x2770=(sj17*x2765);
IkReal x2771=(cj17*x2769);
evalcond[0]=((((-1.0)*r21*sj17*x2768))+((r20*x2767))+(((-1.0)*r22*x2769)));
evalcond[1]=((((-1.0)*r12*x2769))+((r10*x2767))+(((-1.0)*x2766*x2768)));
evalcond[2]=(((r01*x2770))+(((-1.0)*r00*x2771))+(((-1.0)*r02*x2768)));
evalcond[3]=((1.0)+((r00*x2767))+(((-1.0)*r02*x2769))+(((-1.0)*r01*sj17*x2768)));
evalcond[4]=((((-1.0)*r10*x2771))+(((-1.0)*r12*x2768))+((r20*sj17))+((cj17*r21))+((x2765*x2766)));
evalcond[5]=((((-1.0)*cj13*sj14))+((r21*x2770))+(((-1.0)*r20*x2771))+(((-1.0)*cj14*sj13))+(((-1.0)*r22*x2768)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x2772=((1.0)*sj17);
CheckValue<IkReal> x2773=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x2772))+(((-1.0)*cj17*r11)))),-1);
if(!x2773.valid){
continue;
}
CheckValue<IkReal> x2774 = IKatan2WithCheck(IkReal((((cj17*r20))+(((-1.0)*r21*x2772)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x2774.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2773.value)))+(x2774.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x2775=IKcos(j16);
IkReal x2776=IKsin(j16);
IkReal x2777=(r11*sj17);
IkReal x2778=(cj17*x2775);
IkReal x2779=((1.0)*x2775);
IkReal x2780=((1.0)*x2776);
IkReal x2781=(sj17*x2776);
IkReal x2782=(cj17*x2780);
evalcond[0]=((((-1.0)*r21*sj17*x2779))+((r20*x2778))+(((-1.0)*r22*x2780)));
evalcond[1]=((((-1.0)*r12*x2780))+(((-1.0)*x2777*x2779))+((r10*x2778)));
evalcond[2]=((((-1.0)*r02*x2779))+((r01*x2781))+(((-1.0)*r00*x2782)));
evalcond[3]=((1.0)+((r00*x2778))+(((-1.0)*r01*sj17*x2779))+(((-1.0)*r02*x2780)));
evalcond[4]=(((r20*sj17))+(((-1.0)*r12*x2779))+(((-1.0)*r10*x2782))+((cj17*r21))+((x2776*x2777)));
evalcond[5]=(((r21*x2781))+(((-1.0)*r20*x2782))+(((-1.0)*cj13*sj14))+(((-1.0)*cj14*sj13))+(((-1.0)*r22*x2779)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x2783 = IKatan2WithCheck(IkReal((((cj17*r10))+(((-1.0)*r11*sj17)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2783.valid){
continue;
}
CheckValue<IkReal> x2784=IKPowWithIntegerCheck(IKsign((((r20*sj17))+((cj17*r21)))),-1);
if(!x2784.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x2783.value)+(((1.5707963267949)*(x2784.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x2785=IKcos(j16);
IkReal x2786=IKsin(j16);
IkReal x2787=(r11*sj17);
IkReal x2788=(cj17*x2785);
IkReal x2789=((1.0)*x2785);
IkReal x2790=((1.0)*x2786);
IkReal x2791=(sj17*x2786);
IkReal x2792=(cj17*x2790);
evalcond[0]=((((-1.0)*r22*x2790))+((r20*x2788))+(((-1.0)*r21*sj17*x2789)));
evalcond[1]=((((-1.0)*x2787*x2789))+((r10*x2788))+(((-1.0)*r12*x2790)));
evalcond[2]=(((r01*x2791))+(((-1.0)*r00*x2792))+(((-1.0)*r02*x2789)));
evalcond[3]=((1.0)+((r00*x2788))+(((-1.0)*r01*sj17*x2789))+(((-1.0)*r02*x2790)));
evalcond[4]=((((-1.0)*r12*x2789))+((r20*sj17))+((cj17*r21))+(((-1.0)*r10*x2792))+((x2786*x2787)));
evalcond[5]=(((r21*x2791))+(((-1.0)*r20*x2792))+(((-1.0)*cj13*sj14))+(((-1.0)*r22*x2789))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
IkReal x2793=((-1.0)*px);
sj15=0;
cj15=1.0;
j15=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2793);
rxp1_1=(px*r21);
rxp1_2=(r11*x2793);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j16eval[0]=r02;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
IkReal x2794=((-1.0)*px);
sj15=0;
cj15=1.0;
j15=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2794);
rxp1_1=(px*r21);
rxp1_2=(r11*x2794);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j16eval[0]=((((-1.0)*cj17*r20))+((r21*sj17)));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
CheckValue<IkReal> x2796=IKPowWithIntegerCheck(((((-1.0)*cj17*r20))+((r21*sj17))),-1);
if(!x2796.valid){
continue;
}
IkReal x2795=x2796.value;
sj16array[0]=(((cj13*sj14*x2795))+((cj14*sj13*x2795)));
if( sj16array[0] >= -1-IKFAST_SINCOS_THRESH && sj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKasin(sj16array[0]);
    cj16array[0] = IKcos(j16array[0]);
    sj16array[1] = sj16array[0];
    j16array[1] = j16array[0] > 0 ? (IKPI-j16array[0]) : (-IKPI-j16array[0]);
    cj16array[1] = -cj16array[0];
}
else if( isnan(sj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x2797=IKcos(j16);
IkReal x2798=(cj17*x2797);
IkReal x2799=((1.0)*sj17*x2797);
evalcond[0]=((-1.0)*r02*x2797);
evalcond[1]=((((-1.0)*r02*(IKsin(j16))))+(((-1.0)*sj12)));
evalcond[2]=((((-1.0)*r21*x2799))+((r20*x2798)));
evalcond[3]=(((r10*x2798))+(((-1.0)*r11*x2799)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
CheckValue<IkReal> x2800=IKPowWithIntegerCheck(r02,-1);
if(!x2800.valid){
continue;
}
sj16array[0]=((-1.0)*sj12*(x2800.value));
if( sj16array[0] >= -1-IKFAST_SINCOS_THRESH && sj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKasin(sj16array[0]);
    cj16array[0] = IKcos(j16array[0]);
    sj16array[1] = sj16array[0];
    j16array[1] = j16array[0] > 0 ? (IKPI-j16array[0]) : (-IKPI-j16array[0]);
    cj16array[1] = -cj16array[0];
}
else if( isnan(sj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x2801=IKcos(j16);
IkReal x2802=IKsin(j16);
IkReal x2803=(cj17*r20);
IkReal x2804=(r21*sj17);
IkReal x2805=((1.0)*x2801);
evalcond[0]=((-1.0)*r02*x2801);
evalcond[1]=(((x2801*x2803))+(((-1.0)*x2804*x2805)));
evalcond[2]=(((cj17*r10*x2801))+(((-1.0)*r11*sj17*x2805)));
evalcond[3]=((((-1.0)*cj13*sj14))+((x2802*x2804))+(((-1.0)*x2802*x2803))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j16]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x2806=((1.0)*cj12);
IkReal x2807=((1.0)*sj12);
CheckValue<IkReal> x2808 = IKatan2WithCheck(IkReal((((cj12*r01*sj17))+(((-1.0)*cj17*r10*x2807))+((r11*sj12*sj17))+(((-1.0)*cj17*r00*x2806)))),IkReal(((((-1.0)*r12*x2807))+(((-1.0)*r02*x2806)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2808.valid){
continue;
}
CheckValue<IkReal> x2809=IKPowWithIntegerCheck(IKsign((((r20*sj17))+((cj17*r21)))),-1);
if(!x2809.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x2808.value)+(((1.5707963267949)*(x2809.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x2810=IKcos(j16);
IkReal x2811=IKsin(j16);
IkReal x2812=((1.0)*cj17);
IkReal x2813=(r11*sj17);
IkReal x2814=(cj17*x2810);
IkReal x2815=((1.0)*x2810);
IkReal x2816=((1.0)*r20*sj17);
IkReal x2817=((1.0)*x2811);
IkReal x2818=(sj17*x2811);
evalcond[0]=((((-1.0)*r22*x2817))+(((-1.0)*r21*sj17*x2815))+((r20*x2814)));
evalcond[1]=((((-1.0)*r12*x2817))+((r10*x2814))+(((-1.0)*x2813*x2815))+cj12);
evalcond[2]=(((r00*x2814))+(((-1.0)*r02*x2817))+(((-1.0)*sj12))+(((-1.0)*r01*sj17*x2815)));
evalcond[3]=((((-1.0)*cj13*sj14))+((r21*x2818))+(((-1.0)*r22*x2815))+(((-1.0)*cj14*sj13))+(((-1.0)*r20*x2811*x2812)));
evalcond[4]=((((-1.0)*cj12*x2816))+((r01*x2818))+(((-1.0)*r02*x2815))+(((-1.0)*cj12*r21*x2812))+(((-1.0)*r00*x2811*x2812)));
evalcond[5]=((((-1.0)*r12*x2815))+(((-1.0)*sj12*x2816))+(((-1.0)*r21*sj12*x2812))+(((-1.0)*r10*x2811*x2812))+((x2811*x2813)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x2819=IKPowWithIntegerCheck(IKsign((((cj17*r11))+((r10*sj17)))),-1);
if(!x2819.valid){
continue;
}
CheckValue<IkReal> x2820 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x2820.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2819.value)))+(x2820.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x2821=IKcos(j16);
IkReal x2822=IKsin(j16);
IkReal x2823=((1.0)*cj17);
IkReal x2824=(r11*sj17);
IkReal x2825=(cj17*x2821);
IkReal x2826=((1.0)*x2821);
IkReal x2827=((1.0)*r20*sj17);
IkReal x2828=((1.0)*x2822);
IkReal x2829=(sj17*x2822);
evalcond[0]=(((r20*x2825))+(((-1.0)*r21*sj17*x2826))+(((-1.0)*r22*x2828)));
evalcond[1]=((((-1.0)*r12*x2828))+(((-1.0)*x2824*x2826))+((r10*x2825))+cj12);
evalcond[2]=(((r00*x2825))+(((-1.0)*r02*x2828))+(((-1.0)*sj12))+(((-1.0)*r01*sj17*x2826)));
evalcond[3]=((((-1.0)*cj13*sj14))+((r21*x2829))+(((-1.0)*r22*x2826))+(((-1.0)*cj14*sj13))+(((-1.0)*r20*x2822*x2823)));
evalcond[4]=((((-1.0)*r00*x2822*x2823))+(((-1.0)*cj12*x2827))+(((-1.0)*r02*x2826))+(((-1.0)*cj12*r21*x2823))+((r01*x2829)));
evalcond[5]=(((x2822*x2824))+(((-1.0)*r12*x2826))+(((-1.0)*r10*x2822*x2823))+(((-1.0)*r21*sj12*x2823))+(((-1.0)*sj12*x2827)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x2830 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2830.valid){
continue;
}
CheckValue<IkReal> x2831=IKPowWithIntegerCheck(IKsign((((r00*sj17))+((cj17*r01)))),-1);
if(!x2831.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x2830.value)+(((1.5707963267949)*(x2831.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x2832=IKcos(j16);
IkReal x2833=IKsin(j16);
IkReal x2834=((1.0)*cj17);
IkReal x2835=(r11*sj17);
IkReal x2836=(cj17*x2832);
IkReal x2837=((1.0)*x2832);
IkReal x2838=((1.0)*r20*sj17);
IkReal x2839=((1.0)*x2833);
IkReal x2840=(sj17*x2833);
evalcond[0]=((((-1.0)*r21*sj17*x2837))+((r20*x2836))+(((-1.0)*r22*x2839)));
evalcond[1]=(((r10*x2836))+cj12+(((-1.0)*r12*x2839))+(((-1.0)*x2835*x2837)));
evalcond[2]=((((-1.0)*r01*sj17*x2837))+(((-1.0)*sj12))+((r00*x2836))+(((-1.0)*r02*x2839)));
evalcond[3]=(((r21*x2840))+(((-1.0)*cj13*sj14))+(((-1.0)*r22*x2837))+(((-1.0)*r20*x2833*x2834))+(((-1.0)*cj14*sj13)));
evalcond[4]=((((-1.0)*r00*x2833*x2834))+(((-1.0)*cj12*r21*x2834))+((r01*x2840))+(((-1.0)*cj12*x2838))+(((-1.0)*r02*x2837)));
evalcond[5]=((((-1.0)*r21*sj12*x2834))+(((-1.0)*r12*x2837))+(((-1.0)*r10*x2833*x2834))+(((-1.0)*sj12*x2838))+((x2833*x2835)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[3];
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
IkReal x2841=((1.0)*cj17);
IkReal x2842=((1.0)*sj17);
IkReal x2843=((((-1.0)*cj13*sj14))+(((-1.0)*cj14*sj13)));
j12eval[0]=x2843;
j12eval[1]=IKsign(x2843);
j12eval[2]=((IKabs(((((-1.0)*r00*x2842))+(((-1.0)*r01*x2841)))))+(IKabs(((((-1.0)*r11*x2841))+(((-1.0)*r10*x2842))))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
IkReal x2844=cj17*cj17;
IkReal x2845=r21*r21;
IkReal x2846=(cj17*r20);
IkReal x2847=(r21*sj17);
IkReal x2848=(cj13*sj14);
IkReal x2849=((1.0)*cj14*sj13);
IkReal x2850=(((x2844*x2845))+(((2.0)*x2846*x2847))+(((-1.0)*(r22*r22)))+(((-1.0)*x2845))+(((-1.0)*x2844*(r20*r20))));
j16eval[0]=x2850;
j16eval[1]=IKsign(x2850);
j16eval[2]=((IKabs(((((-1.0)*x2846*x2849))+((cj14*sj13*x2847))+((x2847*x2848))+(((-1.0)*x2846*x2848)))))+(IKabs(((((-1.0)*r22*x2848))+(((-1.0)*r22*x2849))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j12eval[1];
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
j12eval[0]=((((-1.0)*cj13*sj14))+(((-1.0)*cj14*sj13)));
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j13), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j14), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j12))))+(((-1.0)*px)));
evalcond[1]=((((0.10915)*(IKcos(j12))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j16eval[3];
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
j13=0;
sj13=0;
cj13=1.0;
j14=0;
sj14=0;
cj14=1.0;
IkReal x2851=(((r00*sj17))+((cj17*r01)));
j16eval[0]=x2851;
j16eval[1]=((IKabs(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))))+(IKabs((cj12*r22))));
j16eval[2]=IKsign(x2851);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
j13=0;
sj13=0;
cj13=1.0;
j14=0;
sj14=0;
cj14=1.0;
IkReal x2852=(((cj17*r11))+((r10*sj17)));
j16eval[0]=x2852;
j16eval[1]=((IKabs((r22*sj12)))+(IKabs(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12))))));
j16eval[2]=IKsign(x2852);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
j13=0;
sj13=0;
cj13=1.0;
j14=0;
sj14=0;
cj14=1.0;
IkReal x2853=cj17*cj17;
IkReal x2854=((1.0)*r11);
IkReal x2855=(cj17*r20);
IkReal x2856=(r21*sj17);
IkReal x2857=((((-1.0)*cj17*r10*x2856))+((r11*r21))+((r10*r20*x2853))+((r12*r22))+(((-1.0)*r21*x2853*x2854))+(((-1.0)*sj17*x2854*x2855)));
j16eval[0]=x2857;
j16eval[1]=IKsign(x2857);
j16eval[2]=((IKabs((cj12*r22)))+(IKabs((((cj12*x2856))+(((-1.0)*cj12*x2855))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x2858=cj17*cj17;
IkReal x2859=((1.0)*r11);
IkReal x2860=(cj17*r20);
IkReal x2861=(r21*sj17);
CheckValue<IkReal> x2862 = IKatan2WithCheck(IkReal((cj12*r22)),IkReal(((((-1.0)*cj12*x2860))+((cj12*x2861)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2862.valid){
continue;
}
CheckValue<IkReal> x2863=IKPowWithIntegerCheck(IKsign((((r11*r21))+(((-1.0)*sj17*x2859*x2860))+((r10*r20*x2858))+((r12*r22))+(((-1.0)*cj17*r10*x2861))+(((-1.0)*r21*x2858*x2859)))),-1);
if(!x2863.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x2862.value)+(((1.5707963267949)*(x2863.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x2864=IKsin(j16);
IkReal x2865=IKcos(j16);
CheckValue<IkReal> x2875=IKPowWithIntegerCheck(cj17,-1);
if(!x2875.valid){
continue;
}
IkReal x2866=x2875.value;
IkReal x2867=sj17*sj17;
IkReal x2868=(r21*sj17);
IkReal x2869=(r00*x2864);
IkReal x2870=(x2866*x2867);
IkReal x2871=((1.0)*x2864);
IkReal x2872=(cj17*x2865);
IkReal x2873=(cj17*x2864);
IkReal x2874=((1.0)*x2865);
evalcond[0]=(((r22*x2865))+(((-1.0)*x2868*x2871))+((r20*x2873)));
evalcond[1]=((((-1.0)*r22*x2871))+(((-1.0)*x2868*x2874))+((r20*x2872)));
evalcond[2]=(((r10*x2872))+(((-1.0)*r11*sj17*x2874))+cj12+(((-1.0)*r12*x2871)));
evalcond[3]=((((-1.0)*r01*sj17*x2874))+((r00*x2872))+(((-1.0)*r02*x2871))+(((-1.0)*sj12)));
evalcond[4]=(((x2869*x2870))+((cj17*x2869))+cj12+((r02*x2865)));
evalcond[5]=(((r10*x2864*x2870))+((r10*x2873))+sj12+((r12*x2865)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x2876=IKPowWithIntegerCheck(IKsign((((cj17*r11))+((r10*sj17)))),-1);
if(!x2876.valid){
continue;
}
CheckValue<IkReal> x2877 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x2877.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2876.value)))+(x2877.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x2878=IKsin(j16);
IkReal x2879=IKcos(j16);
CheckValue<IkReal> x2889=IKPowWithIntegerCheck(cj17,-1);
if(!x2889.valid){
continue;
}
IkReal x2880=x2889.value;
IkReal x2881=sj17*sj17;
IkReal x2882=(r21*sj17);
IkReal x2883=(r00*x2878);
IkReal x2884=(x2880*x2881);
IkReal x2885=((1.0)*x2878);
IkReal x2886=(cj17*x2879);
IkReal x2887=(cj17*x2878);
IkReal x2888=((1.0)*x2879);
evalcond[0]=(((r20*x2887))+((r22*x2879))+(((-1.0)*x2882*x2885)));
evalcond[1]=(((r20*x2886))+(((-1.0)*r22*x2885))+(((-1.0)*x2882*x2888)));
evalcond[2]=((((-1.0)*r11*sj17*x2888))+cj12+((r10*x2886))+(((-1.0)*r12*x2885)));
evalcond[3]=((((-1.0)*r01*sj17*x2888))+(((-1.0)*r02*x2885))+((r00*x2886))+(((-1.0)*sj12)));
evalcond[4]=(((cj17*x2883))+cj12+((r02*x2879))+((x2883*x2884)));
evalcond[5]=(((r10*x2878*x2884))+sj12+((r10*x2887))+((r12*x2879)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x2890 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2890.valid){
continue;
}
CheckValue<IkReal> x2891=IKPowWithIntegerCheck(IKsign((((r00*sj17))+((cj17*r01)))),-1);
if(!x2891.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x2890.value)+(((1.5707963267949)*(x2891.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x2892=IKsin(j16);
IkReal x2893=IKcos(j16);
CheckValue<IkReal> x2903=IKPowWithIntegerCheck(cj17,-1);
if(!x2903.valid){
continue;
}
IkReal x2894=x2903.value;
IkReal x2895=sj17*sj17;
IkReal x2896=(r21*sj17);
IkReal x2897=(r00*x2892);
IkReal x2898=(x2894*x2895);
IkReal x2899=((1.0)*x2892);
IkReal x2900=(cj17*x2893);
IkReal x2901=(cj17*x2892);
IkReal x2902=((1.0)*x2893);
evalcond[0]=(((r22*x2893))+(((-1.0)*x2896*x2899))+((r20*x2901)));
evalcond[1]=((((-1.0)*r22*x2899))+(((-1.0)*x2896*x2902))+((r20*x2900)));
evalcond[2]=((((-1.0)*r11*sj17*x2902))+((r10*x2900))+cj12+(((-1.0)*r12*x2899)));
evalcond[3]=((((-1.0)*r02*x2899))+((r00*x2900))+(((-1.0)*sj12))+(((-1.0)*r01*sj17*x2902)));
evalcond[4]=(((cj17*x2897))+cj12+((r02*x2893))+((x2897*x2898)));
evalcond[5]=(((r10*x2901))+((r10*x2892*x2898))+sj12+((r12*x2893)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j13), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j14, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j12))))+(((-1.0)*px)));
evalcond[1]=((((0.10915)*(IKcos(j12))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j16eval[3];
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
j13=0;
sj13=0;
cj13=1.0;
j14=3.14159265358979;
sj14=0;
cj14=-1.0;
IkReal x2904=(((r00*sj17))+((cj17*r01)));
j16eval[0]=x2904;
j16eval[1]=((IKabs(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))))+(IKabs((cj12*r22))));
j16eval[2]=IKsign(x2904);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
j13=0;
sj13=0;
cj13=1.0;
j14=3.14159265358979;
sj14=0;
cj14=-1.0;
IkReal x2905=(((cj17*r11))+((r10*sj17)));
j16eval[0]=x2905;
j16eval[1]=((IKabs((r22*sj12)))+(IKabs(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12))))));
j16eval[2]=IKsign(x2905);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
j13=0;
sj13=0;
cj13=1.0;
j14=3.14159265358979;
sj14=0;
cj14=-1.0;
IkReal x2906=cj17*cj17;
IkReal x2907=((1.0)*r11);
IkReal x2908=(cj17*r20);
IkReal x2909=(r21*sj17);
IkReal x2910=(((r11*r21))+((r12*r22))+((r10*r20*x2906))+(((-1.0)*cj17*r10*x2909))+(((-1.0)*sj17*x2907*x2908))+(((-1.0)*r21*x2906*x2907)));
j16eval[0]=x2910;
j16eval[1]=IKsign(x2910);
j16eval[2]=((IKabs(((((-1.0)*cj12*x2908))+((cj12*x2909)))))+(IKabs((cj12*r22))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x2911=cj17*cj17;
IkReal x2912=((1.0)*r11);
IkReal x2913=(cj17*r20);
IkReal x2914=(r21*sj17);
CheckValue<IkReal> x2915=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj17*r10*x2914))+((r11*r21))+(((-1.0)*sj17*x2912*x2913))+((r12*r22))+(((-1.0)*r21*x2911*x2912))+((r10*r20*x2911)))),-1);
if(!x2915.valid){
continue;
}
CheckValue<IkReal> x2916 = IKatan2WithCheck(IkReal((cj12*r22)),IkReal(((((-1.0)*cj12*x2913))+((cj12*x2914)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2916.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2915.value)))+(x2916.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x2917=IKsin(j16);
IkReal x2918=IKcos(j16);
CheckValue<IkReal> x2929=IKPowWithIntegerCheck(cj17,-1);
if(!x2929.valid){
continue;
}
IkReal x2919=x2929.value;
IkReal x2920=sj17*sj17;
IkReal x2921=((1.0)*sj12);
IkReal x2922=(r21*sj17);
IkReal x2923=(r00*x2917);
IkReal x2924=(x2919*x2920);
IkReal x2925=((1.0)*x2917);
IkReal x2926=(cj17*x2918);
IkReal x2927=(cj17*x2917);
IkReal x2928=((1.0)*x2918);
evalcond[0]=(((r20*x2927))+((r22*x2918))+(((-1.0)*x2922*x2925)));
evalcond[1]=(((r20*x2926))+(((-1.0)*r22*x2925))+(((-1.0)*x2922*x2928)));
evalcond[2]=((((-1.0)*r11*sj17*x2928))+((r10*x2926))+cj12+(((-1.0)*r12*x2925)));
evalcond[3]=((((-1.0)*r02*x2925))+(((-1.0)*x2921))+((r00*x2926))+(((-1.0)*r01*sj17*x2928)));
evalcond[4]=(((r02*x2918))+(((-1.0)*cj12))+((x2923*x2924))+((cj17*x2923)));
evalcond[5]=(((r12*x2918))+((r10*x2927))+(((-1.0)*x2921))+((r10*x2917*x2924)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x2930=IKPowWithIntegerCheck(IKsign((((cj17*r11))+((r10*sj17)))),-1);
if(!x2930.valid){
continue;
}
CheckValue<IkReal> x2931 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x2931.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2930.value)))+(x2931.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x2932=IKsin(j16);
IkReal x2933=IKcos(j16);
CheckValue<IkReal> x2944=IKPowWithIntegerCheck(cj17,-1);
if(!x2944.valid){
continue;
}
IkReal x2934=x2944.value;
IkReal x2935=sj17*sj17;
IkReal x2936=((1.0)*sj12);
IkReal x2937=(r21*sj17);
IkReal x2938=(r00*x2932);
IkReal x2939=(x2934*x2935);
IkReal x2940=((1.0)*x2932);
IkReal x2941=(cj17*x2933);
IkReal x2942=(cj17*x2932);
IkReal x2943=((1.0)*x2933);
evalcond[0]=(((r22*x2933))+((r20*x2942))+(((-1.0)*x2937*x2940)));
evalcond[1]=((((-1.0)*r22*x2940))+((r20*x2941))+(((-1.0)*x2937*x2943)));
evalcond[2]=((((-1.0)*r12*x2940))+((r10*x2941))+cj12+(((-1.0)*r11*sj17*x2943)));
evalcond[3]=((((-1.0)*r02*x2940))+(((-1.0)*x2936))+(((-1.0)*r01*sj17*x2943))+((r00*x2941)));
evalcond[4]=(((r02*x2933))+((x2938*x2939))+(((-1.0)*cj12))+((cj17*x2938)));
evalcond[5]=(((r10*x2942))+(((-1.0)*x2936))+((r10*x2932*x2939))+((r12*x2933)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x2945 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2945.valid){
continue;
}
CheckValue<IkReal> x2946=IKPowWithIntegerCheck(IKsign((((r00*sj17))+((cj17*r01)))),-1);
if(!x2946.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x2945.value)+(((1.5707963267949)*(x2946.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x2947=IKsin(j16);
IkReal x2948=IKcos(j16);
CheckValue<IkReal> x2959=IKPowWithIntegerCheck(cj17,-1);
if(!x2959.valid){
continue;
}
IkReal x2949=x2959.value;
IkReal x2950=sj17*sj17;
IkReal x2951=((1.0)*sj12);
IkReal x2952=(r21*sj17);
IkReal x2953=(r00*x2947);
IkReal x2954=(x2949*x2950);
IkReal x2955=((1.0)*x2947);
IkReal x2956=(cj17*x2948);
IkReal x2957=(cj17*x2947);
IkReal x2958=((1.0)*x2948);
evalcond[0]=((((-1.0)*x2952*x2955))+((r22*x2948))+((r20*x2957)));
evalcond[1]=((((-1.0)*x2952*x2958))+((r20*x2956))+(((-1.0)*r22*x2955)));
evalcond[2]=(((r10*x2956))+(((-1.0)*r11*sj17*x2958))+cj12+(((-1.0)*r12*x2955)));
evalcond[3]=((((-1.0)*r02*x2955))+(((-1.0)*x2951))+((r00*x2956))+(((-1.0)*r01*sj17*x2958)));
evalcond[4]=(((cj17*x2953))+((r02*x2948))+((x2953*x2954))+(((-1.0)*cj12)));
evalcond[5]=((((-1.0)*x2951))+((r10*x2947*x2954))+((r10*x2957))+((r12*x2948)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j14), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j13), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
if( IKabs(((((2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.20734818680435)*px))+(((0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((2.20734818680435)*px))+(((0.566898951975751)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((2.20734818680435)*px))+(((0.566898951975751)*py))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[2];
IkReal x2960=IKcos(j12);
IkReal x2961=IKsin(j12);
evalcond[0]=((((-1.0)*px))+(((-0.10915)*x2961))+(((0.425)*x2960)));
evalcond[1]=((((0.10915)*x2960))+(((-1.0)*py))+(((0.425)*x2961)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j16eval[3];
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
j13=1.5707963267949;
sj13=1.0;
cj13=0;
j14=1.5707963267949;
sj14=1.0;
cj14=0;
IkReal x2962=(((r00*sj17))+((cj17*r01)));
j16eval[0]=x2962;
j16eval[1]=((IKabs(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))))+(IKabs((cj12*r22))));
j16eval[2]=IKsign(x2962);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
j13=1.5707963267949;
sj13=1.0;
cj13=0;
j14=1.5707963267949;
sj14=1.0;
cj14=0;
IkReal x2963=(((cj17*r11))+((r10*sj17)));
j16eval[0]=x2963;
j16eval[1]=((IKabs((r22*sj12)))+(IKabs(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12))))));
j16eval[2]=IKsign(x2963);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
j13=1.5707963267949;
sj13=1.0;
cj13=0;
j14=1.5707963267949;
sj14=1.0;
cj14=0;
IkReal x2964=cj17*cj17;
IkReal x2965=((1.0)*r11);
IkReal x2966=(cj17*r20);
IkReal x2967=(r21*sj17);
IkReal x2968=(((r10*r20*x2964))+(((-1.0)*r21*x2964*x2965))+((r11*r21))+((r12*r22))+(((-1.0)*sj17*x2965*x2966))+(((-1.0)*cj17*r10*x2967)));
j16eval[0]=x2968;
j16eval[1]=IKsign(x2968);
j16eval[2]=((IKabs((cj12*r22)))+(IKabs((((cj12*x2967))+(((-1.0)*cj12*x2966))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x2969=cj17*cj17;
IkReal x2970=((1.0)*r11);
IkReal x2971=(cj17*r20);
IkReal x2972=(r21*sj17);
CheckValue<IkReal> x2973=IKPowWithIntegerCheck(IKsign((((r10*r20*x2969))+((r11*r21))+(((-1.0)*r21*x2969*x2970))+((r12*r22))+(((-1.0)*sj17*x2970*x2971))+(((-1.0)*cj17*r10*x2972)))),-1);
if(!x2973.valid){
continue;
}
CheckValue<IkReal> x2974 = IKatan2WithCheck(IkReal((cj12*r22)),IkReal((((cj12*x2972))+(((-1.0)*cj12*x2971)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2974.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2973.value)))+(x2974.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x2975=IKsin(j16);
IkReal x2976=IKcos(j16);
CheckValue<IkReal> x2987=IKPowWithIntegerCheck(cj17,-1);
if(!x2987.valid){
continue;
}
IkReal x2977=x2987.value;
IkReal x2978=sj17*sj17;
IkReal x2979=((1.0)*sj12);
IkReal x2980=(r21*sj17);
IkReal x2981=(r00*x2975);
IkReal x2982=(x2977*x2978);
IkReal x2983=((1.0)*x2975);
IkReal x2984=(cj17*x2976);
IkReal x2985=(cj17*x2975);
IkReal x2986=((1.0)*x2976);
evalcond[0]=(((r20*x2985))+((r22*x2976))+(((-1.0)*x2980*x2983)));
evalcond[1]=(((r20*x2984))+(((-1.0)*x2980*x2986))+(((-1.0)*r22*x2983)));
evalcond[2]=((((-1.0)*r11*sj17*x2986))+(((-1.0)*r12*x2983))+cj12+((r10*x2984)));
evalcond[3]=(((r00*x2984))+(((-1.0)*x2979))+(((-1.0)*r01*sj17*x2986))+(((-1.0)*r02*x2983)));
evalcond[4]=(((r02*x2976))+((cj17*x2981))+((x2981*x2982))+(((-1.0)*cj12)));
evalcond[5]=(((r12*x2976))+(((-1.0)*x2979))+((r10*x2975*x2982))+((r10*x2985)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x2988=IKPowWithIntegerCheck(IKsign((((cj17*r11))+((r10*sj17)))),-1);
if(!x2988.valid){
continue;
}
CheckValue<IkReal> x2989 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x2989.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2988.value)))+(x2989.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x2990=IKsin(j16);
IkReal x2991=IKcos(j16);
CheckValue<IkReal> x3002=IKPowWithIntegerCheck(cj17,-1);
if(!x3002.valid){
continue;
}
IkReal x2992=x3002.value;
IkReal x2993=sj17*sj17;
IkReal x2994=((1.0)*sj12);
IkReal x2995=(r21*sj17);
IkReal x2996=(r00*x2990);
IkReal x2997=(x2992*x2993);
IkReal x2998=((1.0)*x2990);
IkReal x2999=(cj17*x2991);
IkReal x3000=(cj17*x2990);
IkReal x3001=((1.0)*x2991);
evalcond[0]=((((-1.0)*x2995*x2998))+((r20*x3000))+((r22*x2991)));
evalcond[1]=((((-1.0)*r22*x2998))+((r20*x2999))+(((-1.0)*x2995*x3001)));
evalcond[2]=((((-1.0)*r12*x2998))+cj12+(((-1.0)*r11*sj17*x3001))+((r10*x2999)));
evalcond[3]=((((-1.0)*x2994))+((r00*x2999))+(((-1.0)*r01*sj17*x3001))+(((-1.0)*r02*x2998)));
evalcond[4]=(((x2996*x2997))+((cj17*x2996))+((r02*x2991))+(((-1.0)*cj12)));
evalcond[5]=((((-1.0)*x2994))+((r10*x2990*x2997))+((r12*x2991))+((r10*x3000)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x3003 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3003.valid){
continue;
}
CheckValue<IkReal> x3004=IKPowWithIntegerCheck(IKsign((((r00*sj17))+((cj17*r01)))),-1);
if(!x3004.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x3003.value)+(((1.5707963267949)*(x3004.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x3005=IKsin(j16);
IkReal x3006=IKcos(j16);
CheckValue<IkReal> x3017=IKPowWithIntegerCheck(cj17,-1);
if(!x3017.valid){
continue;
}
IkReal x3007=x3017.value;
IkReal x3008=sj17*sj17;
IkReal x3009=((1.0)*sj12);
IkReal x3010=(r21*sj17);
IkReal x3011=(r00*x3005);
IkReal x3012=(x3007*x3008);
IkReal x3013=((1.0)*x3005);
IkReal x3014=(cj17*x3006);
IkReal x3015=(cj17*x3005);
IkReal x3016=((1.0)*x3006);
evalcond[0]=(((r22*x3006))+(((-1.0)*x3010*x3013))+((r20*x3015)));
evalcond[1]=((((-1.0)*r22*x3013))+(((-1.0)*x3010*x3016))+((r20*x3014)));
evalcond[2]=(((r10*x3014))+(((-1.0)*r12*x3013))+(((-1.0)*r11*sj17*x3016))+cj12);
evalcond[3]=(((r00*x3014))+(((-1.0)*r02*x3013))+(((-1.0)*r01*sj17*x3016))+(((-1.0)*x3009)));
evalcond[4]=(((x3011*x3012))+((cj17*x3011))+(((-1.0)*cj12))+((r02*x3006)));
evalcond[5]=(((r10*x3015))+(((-1.0)*x3009))+((r12*x3006))+((r10*x3005*x3012)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j14), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j13), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
if( IKabs(((((2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.20734818680435)*px))+(((0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((2.20734818680435)*px))+(((0.566898951975751)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((2.20734818680435)*px))+(((0.566898951975751)*py))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[2];
IkReal x3018=IKcos(j12);
IkReal x3019=IKsin(j12);
evalcond[0]=((((0.425)*x3018))+(((-0.10915)*x3019))+(((-1.0)*px)));
evalcond[1]=((((0.425)*x3019))+(((-1.0)*py))+(((0.10915)*x3018)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j16eval[3];
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
j13=1.5707963267949;
sj13=1.0;
cj13=0;
j14=-1.5707963267949;
sj14=-1.0;
cj14=0;
IkReal x3020=(((r00*sj17))+((cj17*r01)));
j16eval[0]=x3020;
j16eval[1]=((IKabs(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))))+(IKabs((cj12*r22))));
j16eval[2]=IKsign(x3020);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
j13=1.5707963267949;
sj13=1.0;
cj13=0;
j14=-1.5707963267949;
sj14=-1.0;
cj14=0;
IkReal x3021=(((cj17*r11))+((r10*sj17)));
j16eval[0]=x3021;
j16eval[1]=((IKabs((r22*sj12)))+(IKabs(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12))))));
j16eval[2]=IKsign(x3021);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
j13=1.5707963267949;
sj13=1.0;
cj13=0;
j14=-1.5707963267949;
sj14=-1.0;
cj14=0;
IkReal x3022=cj17*cj17;
IkReal x3023=((1.0)*r11);
IkReal x3024=(cj17*r20);
IkReal x3025=(r21*sj17);
IkReal x3026=(((r11*r21))+(((-1.0)*cj17*r10*x3025))+((r12*r22))+(((-1.0)*r21*x3022*x3023))+((r10*r20*x3022))+(((-1.0)*sj17*x3023*x3024)));
j16eval[0]=x3026;
j16eval[1]=IKsign(x3026);
j16eval[2]=((IKabs(((((-1.0)*cj12*x3024))+((cj12*x3025)))))+(IKabs((cj12*r22))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x3027=cj17*cj17;
IkReal x3028=((1.0)*r11);
IkReal x3029=(cj17*r20);
IkReal x3030=(r21*sj17);
CheckValue<IkReal> x3031 = IKatan2WithCheck(IkReal((cj12*r22)),IkReal((((cj12*x3030))+(((-1.0)*cj12*x3029)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3031.valid){
continue;
}
CheckValue<IkReal> x3032=IKPowWithIntegerCheck(IKsign((((r11*r21))+((r12*r22))+(((-1.0)*sj17*x3028*x3029))+(((-1.0)*cj17*r10*x3030))+(((-1.0)*r21*x3027*x3028))+((r10*r20*x3027)))),-1);
if(!x3032.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x3031.value)+(((1.5707963267949)*(x3032.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x3033=IKsin(j16);
IkReal x3034=IKcos(j16);
CheckValue<IkReal> x3044=IKPowWithIntegerCheck(cj17,-1);
if(!x3044.valid){
continue;
}
IkReal x3035=x3044.value;
IkReal x3036=sj17*sj17;
IkReal x3037=(r21*sj17);
IkReal x3038=(r00*x3033);
IkReal x3039=(x3035*x3036);
IkReal x3040=((1.0)*x3033);
IkReal x3041=(cj17*x3034);
IkReal x3042=(cj17*x3033);
IkReal x3043=((1.0)*x3034);
evalcond[0]=(((r22*x3034))+((r20*x3042))+(((-1.0)*x3037*x3040)));
evalcond[1]=((((-1.0)*r22*x3040))+((r20*x3041))+(((-1.0)*x3037*x3043)));
evalcond[2]=(((r10*x3041))+(((-1.0)*r12*x3040))+cj12+(((-1.0)*r11*sj17*x3043)));
evalcond[3]=((((-1.0)*sj12))+(((-1.0)*r01*sj17*x3043))+((r00*x3041))+(((-1.0)*r02*x3040)));
evalcond[4]=(((r02*x3034))+((x3038*x3039))+((cj17*x3038))+cj12);
evalcond[5]=(((r10*x3042))+((r12*x3034))+sj12+((r10*x3033*x3039)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x3045=IKPowWithIntegerCheck(IKsign((((cj17*r11))+((r10*sj17)))),-1);
if(!x3045.valid){
continue;
}
CheckValue<IkReal> x3046 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3046.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3045.value)))+(x3046.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x3047=IKsin(j16);
IkReal x3048=IKcos(j16);
CheckValue<IkReal> x3058=IKPowWithIntegerCheck(cj17,-1);
if(!x3058.valid){
continue;
}
IkReal x3049=x3058.value;
IkReal x3050=sj17*sj17;
IkReal x3051=(r21*sj17);
IkReal x3052=(r00*x3047);
IkReal x3053=(x3049*x3050);
IkReal x3054=((1.0)*x3047);
IkReal x3055=(cj17*x3048);
IkReal x3056=(cj17*x3047);
IkReal x3057=((1.0)*x3048);
evalcond[0]=(((r22*x3048))+(((-1.0)*x3051*x3054))+((r20*x3056)));
evalcond[1]=((((-1.0)*x3051*x3057))+(((-1.0)*r22*x3054))+((r20*x3055)));
evalcond[2]=((((-1.0)*r11*sj17*x3057))+cj12+((r10*x3055))+(((-1.0)*r12*x3054)));
evalcond[3]=((((-1.0)*r01*sj17*x3057))+((r00*x3055))+(((-1.0)*r02*x3054))+(((-1.0)*sj12)));
evalcond[4]=(cj12+((x3052*x3053))+((r02*x3048))+((cj17*x3052)));
evalcond[5]=(((r10*x3047*x3053))+sj12+((r10*x3056))+((r12*x3048)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x3059 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3059.valid){
continue;
}
CheckValue<IkReal> x3060=IKPowWithIntegerCheck(IKsign((((r00*sj17))+((cj17*r01)))),-1);
if(!x3060.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x3059.value)+(((1.5707963267949)*(x3060.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x3061=IKsin(j16);
IkReal x3062=IKcos(j16);
CheckValue<IkReal> x3072=IKPowWithIntegerCheck(cj17,-1);
if(!x3072.valid){
continue;
}
IkReal x3063=x3072.value;
IkReal x3064=sj17*sj17;
IkReal x3065=(r21*sj17);
IkReal x3066=(r00*x3061);
IkReal x3067=(x3063*x3064);
IkReal x3068=((1.0)*x3061);
IkReal x3069=(cj17*x3062);
IkReal x3070=(cj17*x3061);
IkReal x3071=((1.0)*x3062);
evalcond[0]=(((r22*x3062))+((r20*x3070))+(((-1.0)*x3065*x3068)));
evalcond[1]=((((-1.0)*r22*x3068))+((r20*x3069))+(((-1.0)*x3065*x3071)));
evalcond[2]=((((-1.0)*r12*x3068))+cj12+((r10*x3069))+(((-1.0)*r11*sj17*x3071)));
evalcond[3]=(((r00*x3069))+(((-1.0)*r02*x3068))+(((-1.0)*r01*sj17*x3071))+(((-1.0)*sj12)));
evalcond[4]=(((cj17*x3066))+cj12+((x3066*x3067))+((r02*x3062)));
evalcond[5]=(((r10*x3070))+sj12+((r12*x3062))+((r10*x3061*x3067)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j13, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j14), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j12))))+(((-1.0)*px)));
evalcond[1]=((((0.10915)*(IKcos(j12))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j16eval[3];
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
j13=3.14159265358979;
sj13=0;
cj13=-1.0;
j14=0;
sj14=0;
cj14=1.0;
IkReal x3073=(((r00*sj17))+((cj17*r01)));
j16eval[0]=x3073;
j16eval[1]=((IKabs(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))))+(IKabs((cj12*r22))));
j16eval[2]=IKsign(x3073);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
j13=3.14159265358979;
sj13=0;
cj13=-1.0;
j14=0;
sj14=0;
cj14=1.0;
IkReal x3074=(((cj17*r11))+((r10*sj17)));
j16eval[0]=x3074;
j16eval[1]=((IKabs((r22*sj12)))+(IKabs(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12))))));
j16eval[2]=IKsign(x3074);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
j13=3.14159265358979;
sj13=0;
cj13=-1.0;
j14=0;
sj14=0;
cj14=1.0;
IkReal x3075=cj17*cj17;
IkReal x3076=((1.0)*r11);
IkReal x3077=(cj17*r20);
IkReal x3078=(r21*sj17);
IkReal x3079=(((r10*r20*x3075))+((r11*r21))+(((-1.0)*r21*x3075*x3076))+((r12*r22))+(((-1.0)*sj17*x3076*x3077))+(((-1.0)*cj17*r10*x3078)));
j16eval[0]=x3079;
j16eval[1]=IKsign(x3079);
j16eval[2]=((IKabs((cj12*r22)))+(IKabs((((cj12*x3078))+(((-1.0)*cj12*x3077))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x3080=cj17*cj17;
IkReal x3081=((1.0)*r11);
IkReal x3082=(cj17*r20);
IkReal x3083=(r21*sj17);
CheckValue<IkReal> x3084 = IKatan2WithCheck(IkReal((cj12*r22)),IkReal(((((-1.0)*cj12*x3082))+((cj12*x3083)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3084.valid){
continue;
}
CheckValue<IkReal> x3085=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj17*x3081*x3082))+(((-1.0)*cj17*r10*x3083))+((r11*r21))+(((-1.0)*r21*x3080*x3081))+((r12*r22))+((r10*r20*x3080)))),-1);
if(!x3085.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x3084.value)+(((1.5707963267949)*(x3085.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x3086=IKsin(j16);
IkReal x3087=IKcos(j16);
CheckValue<IkReal> x3098=IKPowWithIntegerCheck(cj17,-1);
if(!x3098.valid){
continue;
}
IkReal x3088=x3098.value;
IkReal x3089=sj17*sj17;
IkReal x3090=((1.0)*sj12);
IkReal x3091=(r21*sj17);
IkReal x3092=(r00*x3086);
IkReal x3093=(x3088*x3089);
IkReal x3094=((1.0)*x3086);
IkReal x3095=(cj17*x3087);
IkReal x3096=(cj17*x3086);
IkReal x3097=((1.0)*x3087);
evalcond[0]=(((r20*x3096))+(((-1.0)*x3091*x3094))+((r22*x3087)));
evalcond[1]=((((-1.0)*r22*x3094))+((r20*x3095))+(((-1.0)*x3091*x3097)));
evalcond[2]=((((-1.0)*r11*sj17*x3097))+(((-1.0)*r12*x3094))+((r10*x3095))+cj12);
evalcond[3]=((((-1.0)*r02*x3094))+((r00*x3095))+(((-1.0)*x3090))+(((-1.0)*r01*sj17*x3097)));
evalcond[4]=(((x3092*x3093))+((r02*x3087))+((cj17*x3092))+(((-1.0)*cj12)));
evalcond[5]=(((r12*x3087))+(((-1.0)*x3090))+((r10*x3096))+((r10*x3086*x3093)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x3099=IKPowWithIntegerCheck(IKsign((((cj17*r11))+((r10*sj17)))),-1);
if(!x3099.valid){
continue;
}
CheckValue<IkReal> x3100 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3100.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3099.value)))+(x3100.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x3101=IKsin(j16);
IkReal x3102=IKcos(j16);
CheckValue<IkReal> x3113=IKPowWithIntegerCheck(cj17,-1);
if(!x3113.valid){
continue;
}
IkReal x3103=x3113.value;
IkReal x3104=sj17*sj17;
IkReal x3105=((1.0)*sj12);
IkReal x3106=(r21*sj17);
IkReal x3107=(r00*x3101);
IkReal x3108=(x3103*x3104);
IkReal x3109=((1.0)*x3101);
IkReal x3110=(cj17*x3102);
IkReal x3111=(cj17*x3101);
IkReal x3112=((1.0)*x3102);
evalcond[0]=(((r22*x3102))+(((-1.0)*x3106*x3109))+((r20*x3111)));
evalcond[1]=((((-1.0)*x3106*x3112))+((r20*x3110))+(((-1.0)*r22*x3109)));
evalcond[2]=(((r10*x3110))+(((-1.0)*r12*x3109))+cj12+(((-1.0)*r11*sj17*x3112)));
evalcond[3]=((((-1.0)*r01*sj17*x3112))+(((-1.0)*x3105))+((r00*x3110))+(((-1.0)*r02*x3109)));
evalcond[4]=(((x3107*x3108))+((r02*x3102))+((cj17*x3107))+(((-1.0)*cj12)));
evalcond[5]=((((-1.0)*x3105))+((r10*x3111))+((r10*x3101*x3108))+((r12*x3102)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x3114 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3114.valid){
continue;
}
CheckValue<IkReal> x3115=IKPowWithIntegerCheck(IKsign((((r00*sj17))+((cj17*r01)))),-1);
if(!x3115.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x3114.value)+(((1.5707963267949)*(x3115.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x3116=IKsin(j16);
IkReal x3117=IKcos(j16);
CheckValue<IkReal> x3128=IKPowWithIntegerCheck(cj17,-1);
if(!x3128.valid){
continue;
}
IkReal x3118=x3128.value;
IkReal x3119=sj17*sj17;
IkReal x3120=((1.0)*sj12);
IkReal x3121=(r21*sj17);
IkReal x3122=(r00*x3116);
IkReal x3123=(x3118*x3119);
IkReal x3124=((1.0)*x3116);
IkReal x3125=(cj17*x3117);
IkReal x3126=(cj17*x3116);
IkReal x3127=((1.0)*x3117);
evalcond[0]=(((r20*x3126))+((r22*x3117))+(((-1.0)*x3121*x3124)));
evalcond[1]=(((r20*x3125))+(((-1.0)*x3121*x3127))+(((-1.0)*r22*x3124)));
evalcond[2]=((((-1.0)*r11*sj17*x3127))+cj12+((r10*x3125))+(((-1.0)*r12*x3124)));
evalcond[3]=(((r00*x3125))+(((-1.0)*r02*x3124))+(((-1.0)*x3120))+(((-1.0)*r01*sj17*x3127)));
evalcond[4]=(((cj17*x3122))+((r02*x3117))+(((-1.0)*cj12))+((x3122*x3123)));
evalcond[5]=(((r12*x3117))+((r10*x3116*x3123))+((r10*x3126))+(((-1.0)*x3120)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j13, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j14, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j12))))+(((-1.0)*px)));
evalcond[1]=((((0.10915)*(IKcos(j12))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j16eval[3];
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
j13=3.14159265358979;
sj13=0;
cj13=-1.0;
j14=3.14159265358979;
sj14=0;
cj14=-1.0;
IkReal x3129=(((r00*sj17))+((cj17*r01)));
j16eval[0]=x3129;
j16eval[1]=((IKabs(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))))+(IKabs((cj12*r22))));
j16eval[2]=IKsign(x3129);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
j13=3.14159265358979;
sj13=0;
cj13=-1.0;
j14=3.14159265358979;
sj14=0;
cj14=-1.0;
IkReal x3130=(((cj17*r11))+((r10*sj17)));
j16eval[0]=x3130;
j16eval[1]=((IKabs((r22*sj12)))+(IKabs(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12))))));
j16eval[2]=IKsign(x3130);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
j13=3.14159265358979;
sj13=0;
cj13=-1.0;
j14=3.14159265358979;
sj14=0;
cj14=-1.0;
IkReal x3131=cj17*cj17;
IkReal x3132=((1.0)*r11);
IkReal x3133=(cj17*r20);
IkReal x3134=(r21*sj17);
IkReal x3135=(((r11*r21))+((r10*r20*x3131))+((r12*r22))+(((-1.0)*r21*x3131*x3132))+(((-1.0)*sj17*x3132*x3133))+(((-1.0)*cj17*r10*x3134)));
j16eval[0]=x3135;
j16eval[1]=IKsign(x3135);
j16eval[2]=((IKabs((((cj12*x3134))+(((-1.0)*cj12*x3133)))))+(IKabs((cj12*r22))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x3136=cj17*cj17;
IkReal x3137=((1.0)*r11);
IkReal x3138=(cj17*r20);
IkReal x3139=(r21*sj17);
CheckValue<IkReal> x3140 = IKatan2WithCheck(IkReal((cj12*r22)),IkReal((((cj12*x3139))+(((-1.0)*cj12*x3138)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3140.valid){
continue;
}
CheckValue<IkReal> x3141=IKPowWithIntegerCheck(IKsign((((r11*r21))+((r10*r20*x3136))+((r12*r22))+(((-1.0)*sj17*x3137*x3138))+(((-1.0)*r21*x3136*x3137))+(((-1.0)*cj17*r10*x3139)))),-1);
if(!x3141.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x3140.value)+(((1.5707963267949)*(x3141.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x3142=IKsin(j16);
IkReal x3143=IKcos(j16);
CheckValue<IkReal> x3153=IKPowWithIntegerCheck(cj17,-1);
if(!x3153.valid){
continue;
}
IkReal x3144=x3153.value;
IkReal x3145=sj17*sj17;
IkReal x3146=(r21*sj17);
IkReal x3147=(r00*x3142);
IkReal x3148=(x3144*x3145);
IkReal x3149=((1.0)*x3142);
IkReal x3150=(cj17*x3143);
IkReal x3151=(cj17*x3142);
IkReal x3152=((1.0)*x3143);
evalcond[0]=((((-1.0)*x3146*x3149))+((r22*x3143))+((r20*x3151)));
evalcond[1]=((((-1.0)*r22*x3149))+(((-1.0)*x3146*x3152))+((r20*x3150)));
evalcond[2]=((((-1.0)*r12*x3149))+((r10*x3150))+cj12+(((-1.0)*r11*sj17*x3152)));
evalcond[3]=(((r00*x3150))+(((-1.0)*r02*x3149))+(((-1.0)*sj12))+(((-1.0)*r01*sj17*x3152)));
evalcond[4]=(((cj17*x3147))+((x3147*x3148))+((r02*x3143))+cj12);
evalcond[5]=(((r10*x3151))+((r12*x3143))+((r10*x3142*x3148))+sj12);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x3154=IKPowWithIntegerCheck(IKsign((((cj17*r11))+((r10*sj17)))),-1);
if(!x3154.valid){
continue;
}
CheckValue<IkReal> x3155 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3155.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3154.value)))+(x3155.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x3156=IKsin(j16);
IkReal x3157=IKcos(j16);
CheckValue<IkReal> x3167=IKPowWithIntegerCheck(cj17,-1);
if(!x3167.valid){
continue;
}
IkReal x3158=x3167.value;
IkReal x3159=sj17*sj17;
IkReal x3160=(r21*sj17);
IkReal x3161=(r00*x3156);
IkReal x3162=(x3158*x3159);
IkReal x3163=((1.0)*x3156);
IkReal x3164=(cj17*x3157);
IkReal x3165=(cj17*x3156);
IkReal x3166=((1.0)*x3157);
evalcond[0]=(((r22*x3157))+(((-1.0)*x3160*x3163))+((r20*x3165)));
evalcond[1]=((((-1.0)*x3160*x3166))+((r20*x3164))+(((-1.0)*r22*x3163)));
evalcond[2]=((((-1.0)*r12*x3163))+(((-1.0)*r11*sj17*x3166))+((r10*x3164))+cj12);
evalcond[3]=((((-1.0)*sj12))+((r00*x3164))+(((-1.0)*r01*sj17*x3166))+(((-1.0)*r02*x3163)));
evalcond[4]=(((r02*x3157))+((cj17*x3161))+cj12+((x3161*x3162)));
evalcond[5]=(((r10*x3165))+((r12*x3157))+((r10*x3156*x3162))+sj12);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x3168 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3168.valid){
continue;
}
CheckValue<IkReal> x3169=IKPowWithIntegerCheck(IKsign((((r00*sj17))+((cj17*r01)))),-1);
if(!x3169.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x3168.value)+(((1.5707963267949)*(x3169.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x3170=IKsin(j16);
IkReal x3171=IKcos(j16);
CheckValue<IkReal> x3181=IKPowWithIntegerCheck(cj17,-1);
if(!x3181.valid){
continue;
}
IkReal x3172=x3181.value;
IkReal x3173=sj17*sj17;
IkReal x3174=(r21*sj17);
IkReal x3175=(r00*x3170);
IkReal x3176=(x3172*x3173);
IkReal x3177=((1.0)*x3170);
IkReal x3178=(cj17*x3171);
IkReal x3179=(cj17*x3170);
IkReal x3180=((1.0)*x3171);
evalcond[0]=((((-1.0)*x3174*x3177))+((r22*x3171))+((r20*x3179)));
evalcond[1]=((((-1.0)*x3174*x3180))+((r20*x3178))+(((-1.0)*r22*x3177)));
evalcond[2]=((((-1.0)*r11*sj17*x3180))+((r10*x3178))+(((-1.0)*r12*x3177))+cj12);
evalcond[3]=((((-1.0)*sj12))+((r00*x3178))+(((-1.0)*r01*sj17*x3180))+(((-1.0)*r02*x3177)));
evalcond[4]=(cj12+((r02*x3171))+((cj17*x3175))+((x3175*x3176)));
evalcond[5]=(((r10*x3170*x3176))+((r10*x3179))+sj12+((r12*x3171)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j14), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j13), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
if( IKabs(((((-2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.566898951975751)*py))+(((-2.20734818680435)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((0.566898951975751)*py))+(((-2.20734818680435)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((0.566898951975751)*py))+(((-2.20734818680435)*px))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[2];
IkReal x3182=IKcos(j12);
IkReal x3183=IKsin(j12);
evalcond[0]=((((-0.10915)*x3183))+(((-1.0)*px))+(((-0.425)*x3182)));
evalcond[1]=((((-1.0)*py))+(((-0.425)*x3183))+(((0.10915)*x3182)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j16eval[3];
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
j13=-1.5707963267949;
sj13=-1.0;
cj13=0;
j14=1.5707963267949;
sj14=1.0;
cj14=0;
IkReal x3184=(((r00*sj17))+((cj17*r01)));
j16eval[0]=x3184;
j16eval[1]=((IKabs(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))))+(IKabs((cj12*r22))));
j16eval[2]=IKsign(x3184);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
j13=-1.5707963267949;
sj13=-1.0;
cj13=0;
j14=1.5707963267949;
sj14=1.0;
cj14=0;
IkReal x3185=(((cj17*r11))+((r10*sj17)));
j16eval[0]=x3185;
j16eval[1]=((IKabs((r22*sj12)))+(IKabs(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12))))));
j16eval[2]=IKsign(x3185);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
j13=-1.5707963267949;
sj13=-1.0;
cj13=0;
j14=1.5707963267949;
sj14=1.0;
cj14=0;
IkReal x3186=cj17*cj17;
IkReal x3187=((1.0)*r11);
IkReal x3188=(cj17*r20);
IkReal x3189=(r21*sj17);
IkReal x3190=(((r11*r21))+((r12*r22))+(((-1.0)*cj17*r10*x3189))+(((-1.0)*sj17*x3187*x3188))+((r10*r20*x3186))+(((-1.0)*r21*x3186*x3187)));
j16eval[0]=x3190;
j16eval[1]=IKsign(x3190);
j16eval[2]=((IKabs((cj12*r22)))+(IKabs(((((-1.0)*cj12*x3188))+((cj12*x3189))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x3191=cj17*cj17;
IkReal x3192=((1.0)*r11);
IkReal x3193=(cj17*r20);
IkReal x3194=(r21*sj17);
CheckValue<IkReal> x3195=IKPowWithIntegerCheck(IKsign((((r11*r21))+((r12*r22))+(((-1.0)*cj17*r10*x3194))+(((-1.0)*sj17*x3192*x3193))+(((-1.0)*r21*x3191*x3192))+((r10*r20*x3191)))),-1);
if(!x3195.valid){
continue;
}
CheckValue<IkReal> x3196 = IKatan2WithCheck(IkReal((cj12*r22)),IkReal(((((-1.0)*cj12*x3193))+((cj12*x3194)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3196.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3195.value)))+(x3196.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x3197=IKsin(j16);
IkReal x3198=IKcos(j16);
CheckValue<IkReal> x3208=IKPowWithIntegerCheck(cj17,-1);
if(!x3208.valid){
continue;
}
IkReal x3199=x3208.value;
IkReal x3200=sj17*sj17;
IkReal x3201=(r21*sj17);
IkReal x3202=(r00*x3197);
IkReal x3203=(x3199*x3200);
IkReal x3204=((1.0)*x3197);
IkReal x3205=(cj17*x3198);
IkReal x3206=(cj17*x3197);
IkReal x3207=((1.0)*x3198);
evalcond[0]=(((r20*x3206))+(((-1.0)*x3201*x3204))+((r22*x3198)));
evalcond[1]=(((r20*x3205))+(((-1.0)*x3201*x3207))+(((-1.0)*r22*x3204)));
evalcond[2]=((((-1.0)*r12*x3204))+cj12+((r10*x3205))+(((-1.0)*r11*sj17*x3207)));
evalcond[3]=((((-1.0)*r02*x3204))+((r00*x3205))+(((-1.0)*r01*sj17*x3207))+(((-1.0)*sj12)));
evalcond[4]=(((x3202*x3203))+cj12+((cj17*x3202))+((r02*x3198)));
evalcond[5]=(((r10*x3197*x3203))+sj12+((r12*x3198))+((r10*x3206)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x3209=IKPowWithIntegerCheck(IKsign((((cj17*r11))+((r10*sj17)))),-1);
if(!x3209.valid){
continue;
}
CheckValue<IkReal> x3210 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3210.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3209.value)))+(x3210.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x3211=IKsin(j16);
IkReal x3212=IKcos(j16);
CheckValue<IkReal> x3222=IKPowWithIntegerCheck(cj17,-1);
if(!x3222.valid){
continue;
}
IkReal x3213=x3222.value;
IkReal x3214=sj17*sj17;
IkReal x3215=(r21*sj17);
IkReal x3216=(r00*x3211);
IkReal x3217=(x3213*x3214);
IkReal x3218=((1.0)*x3211);
IkReal x3219=(cj17*x3212);
IkReal x3220=(cj17*x3211);
IkReal x3221=((1.0)*x3212);
evalcond[0]=((((-1.0)*x3215*x3218))+((r22*x3212))+((r20*x3220)));
evalcond[1]=((((-1.0)*x3215*x3221))+((r20*x3219))+(((-1.0)*r22*x3218)));
evalcond[2]=(cj12+(((-1.0)*r11*sj17*x3221))+(((-1.0)*r12*x3218))+((r10*x3219)));
evalcond[3]=(((r00*x3219))+(((-1.0)*sj12))+(((-1.0)*r02*x3218))+(((-1.0)*r01*sj17*x3221)));
evalcond[4]=(((x3216*x3217))+((cj17*x3216))+cj12+((r02*x3212)));
evalcond[5]=(((r10*x3220))+((r10*x3211*x3217))+((r12*x3212))+sj12);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x3223 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3223.valid){
continue;
}
CheckValue<IkReal> x3224=IKPowWithIntegerCheck(IKsign((((r00*sj17))+((cj17*r01)))),-1);
if(!x3224.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x3223.value)+(((1.5707963267949)*(x3224.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x3225=IKsin(j16);
IkReal x3226=IKcos(j16);
CheckValue<IkReal> x3236=IKPowWithIntegerCheck(cj17,-1);
if(!x3236.valid){
continue;
}
IkReal x3227=x3236.value;
IkReal x3228=sj17*sj17;
IkReal x3229=(r21*sj17);
IkReal x3230=(r00*x3225);
IkReal x3231=(x3227*x3228);
IkReal x3232=((1.0)*x3225);
IkReal x3233=(cj17*x3226);
IkReal x3234=(cj17*x3225);
IkReal x3235=((1.0)*x3226);
evalcond[0]=((((-1.0)*x3229*x3232))+((r20*x3234))+((r22*x3226)));
evalcond[1]=((((-1.0)*x3229*x3235))+((r20*x3233))+(((-1.0)*r22*x3232)));
evalcond[2]=((((-1.0)*r11*sj17*x3235))+(((-1.0)*r12*x3232))+cj12+((r10*x3233)));
evalcond[3]=((((-1.0)*r02*x3232))+((r00*x3233))+(((-1.0)*r01*sj17*x3235))+(((-1.0)*sj12)));
evalcond[4]=(((r02*x3226))+cj12+((cj17*x3230))+((x3230*x3231)));
evalcond[5]=(((r12*x3226))+((r10*x3225*x3231))+sj12+((r10*x3234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j14), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j13), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
if( IKabs(((((-2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.566898951975751)*py))+(((-2.20734818680435)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((0.566898951975751)*py))+(((-2.20734818680435)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((0.566898951975751)*py))+(((-2.20734818680435)*px))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[2];
IkReal x3237=IKcos(j12);
IkReal x3238=IKsin(j12);
evalcond[0]=((((-1.0)*px))+(((-0.425)*x3237))+(((-0.10915)*x3238)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*x3237))+(((-0.425)*x3238)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j16eval[3];
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
j13=-1.5707963267949;
sj13=-1.0;
cj13=0;
j14=-1.5707963267949;
sj14=-1.0;
cj14=0;
IkReal x3239=(((r00*sj17))+((cj17*r01)));
j16eval[0]=x3239;
j16eval[1]=((IKabs(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))))+(IKabs((cj12*r22))));
j16eval[2]=IKsign(x3239);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
j13=-1.5707963267949;
sj13=-1.0;
cj13=0;
j14=-1.5707963267949;
sj14=-1.0;
cj14=0;
IkReal x3240=(((cj17*r11))+((r10*sj17)));
j16eval[0]=x3240;
j16eval[1]=((IKabs((r22*sj12)))+(IKabs(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12))))));
j16eval[2]=IKsign(x3240);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
j13=-1.5707963267949;
sj13=-1.0;
cj13=0;
j14=-1.5707963267949;
sj14=-1.0;
cj14=0;
IkReal x3241=cj17*cj17;
IkReal x3242=((1.0)*r11);
IkReal x3243=(cj17*r20);
IkReal x3244=(r21*sj17);
IkReal x3245=((((-1.0)*sj17*x3242*x3243))+((r11*r21))+(((-1.0)*r21*x3241*x3242))+((r12*r22))+(((-1.0)*cj17*r10*x3244))+((r10*r20*x3241)));
j16eval[0]=x3245;
j16eval[1]=IKsign(x3245);
j16eval[2]=((IKabs((((cj12*x3244))+(((-1.0)*cj12*x3243)))))+(IKabs((cj12*r22))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x3246=cj17*cj17;
IkReal x3247=((1.0)*r11);
IkReal x3248=(cj17*r20);
IkReal x3249=(r21*sj17);
CheckValue<IkReal> x3250=IKPowWithIntegerCheck(IKsign((((r11*r21))+((r12*r22))+(((-1.0)*cj17*r10*x3249))+(((-1.0)*sj17*x3247*x3248))+((r10*r20*x3246))+(((-1.0)*r21*x3246*x3247)))),-1);
if(!x3250.valid){
continue;
}
CheckValue<IkReal> x3251 = IKatan2WithCheck(IkReal((cj12*r22)),IkReal((((cj12*x3249))+(((-1.0)*cj12*x3248)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3251.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3250.value)))+(x3251.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x3252=IKsin(j16);
IkReal x3253=IKcos(j16);
CheckValue<IkReal> x3264=IKPowWithIntegerCheck(cj17,-1);
if(!x3264.valid){
continue;
}
IkReal x3254=x3264.value;
IkReal x3255=sj17*sj17;
IkReal x3256=((1.0)*sj12);
IkReal x3257=(r21*sj17);
IkReal x3258=(r00*x3252);
IkReal x3259=(x3254*x3255);
IkReal x3260=((1.0)*x3252);
IkReal x3261=(cj17*x3253);
IkReal x3262=(cj17*x3252);
IkReal x3263=((1.0)*x3253);
evalcond[0]=((((-1.0)*x3257*x3260))+((r20*x3262))+((r22*x3253)));
evalcond[1]=((((-1.0)*x3257*x3263))+((r20*x3261))+(((-1.0)*r22*x3260)));
evalcond[2]=((((-1.0)*r12*x3260))+(((-1.0)*r11*sj17*x3263))+cj12+((r10*x3261)));
evalcond[3]=(((r00*x3261))+(((-1.0)*r02*x3260))+(((-1.0)*r01*sj17*x3263))+(((-1.0)*x3256)));
evalcond[4]=(((cj17*x3258))+((x3258*x3259))+((r02*x3253))+(((-1.0)*cj12)));
evalcond[5]=(((r12*x3253))+((r10*x3252*x3259))+((r10*x3262))+(((-1.0)*x3256)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x3265=IKPowWithIntegerCheck(IKsign((((cj17*r11))+((r10*sj17)))),-1);
if(!x3265.valid){
continue;
}
CheckValue<IkReal> x3266 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3266.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3265.value)))+(x3266.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x3267=IKsin(j16);
IkReal x3268=IKcos(j16);
CheckValue<IkReal> x3279=IKPowWithIntegerCheck(cj17,-1);
if(!x3279.valid){
continue;
}
IkReal x3269=x3279.value;
IkReal x3270=sj17*sj17;
IkReal x3271=((1.0)*sj12);
IkReal x3272=(r21*sj17);
IkReal x3273=(r00*x3267);
IkReal x3274=(x3269*x3270);
IkReal x3275=((1.0)*x3267);
IkReal x3276=(cj17*x3268);
IkReal x3277=(cj17*x3267);
IkReal x3278=((1.0)*x3268);
evalcond[0]=((((-1.0)*x3272*x3275))+((r20*x3277))+((r22*x3268)));
evalcond[1]=((((-1.0)*x3272*x3278))+((r20*x3276))+(((-1.0)*r22*x3275)));
evalcond[2]=((((-1.0)*r12*x3275))+(((-1.0)*r11*sj17*x3278))+cj12+((r10*x3276)));
evalcond[3]=(((r00*x3276))+(((-1.0)*x3271))+(((-1.0)*r01*sj17*x3278))+(((-1.0)*r02*x3275)));
evalcond[4]=(((x3273*x3274))+((r02*x3268))+((cj17*x3273))+(((-1.0)*cj12)));
evalcond[5]=(((r10*x3267*x3274))+(((-1.0)*x3271))+((r10*x3277))+((r12*x3268)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x3280 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3280.valid){
continue;
}
CheckValue<IkReal> x3281=IKPowWithIntegerCheck(IKsign((((r00*sj17))+((cj17*r01)))),-1);
if(!x3281.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x3280.value)+(((1.5707963267949)*(x3281.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x3282=IKsin(j16);
IkReal x3283=IKcos(j16);
CheckValue<IkReal> x3294=IKPowWithIntegerCheck(cj17,-1);
if(!x3294.valid){
continue;
}
IkReal x3284=x3294.value;
IkReal x3285=sj17*sj17;
IkReal x3286=((1.0)*sj12);
IkReal x3287=(r21*sj17);
IkReal x3288=(r00*x3282);
IkReal x3289=(x3284*x3285);
IkReal x3290=((1.0)*x3282);
IkReal x3291=(cj17*x3283);
IkReal x3292=(cj17*x3282);
IkReal x3293=((1.0)*x3283);
evalcond[0]=(((r20*x3292))+(((-1.0)*x3287*x3290))+((r22*x3283)));
evalcond[1]=(((r20*x3291))+(((-1.0)*r22*x3290))+(((-1.0)*x3287*x3293)));
evalcond[2]=((((-1.0)*r12*x3290))+(((-1.0)*r11*sj17*x3293))+cj12+((r10*x3291)));
evalcond[3]=(((r00*x3291))+(((-1.0)*x3286))+(((-1.0)*r02*x3290))+(((-1.0)*r01*sj17*x3293)));
evalcond[4]=(((x3288*x3289))+((r02*x3283))+(((-1.0)*cj12))+((cj17*x3288)));
evalcond[5]=((((-1.0)*x3286))+((r10*x3282*x3289))+((r10*x3292))+((r12*x3283)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12, j16]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x3295=(cj13*sj14);
IkReal x3296=(cj14*sj13);
IkReal x3297=((20000.0)*px);
IkReal x3298=(cj17*r01);
IkReal x3299=(r00*sj17);
IkReal x3300=((8500.0)*sj13);
CheckValue<IkReal> x3301=IKPowWithIntegerCheck(((((-2183.0)*x3296))+(((-2183.0)*x3295))),-1);
if(!x3301.valid){
continue;
}
CheckValue<IkReal> x3302=IKPowWithIntegerCheck(((((-1.0)*x3295))+(((-1.0)*x3296))),-1);
if(!x3302.valid){
continue;
}
if( IKabs(((x3301.value)*((((x3296*x3297))+(((-1.0)*x3298*x3300))+((x3295*x3297))+(((-5952.0)*x3296*x3298))+(((-5952.0)*x3296*x3299))+(((-5952.0)*x3295*x3298))+(((-5952.0)*x3295*x3299))+(((-1.0)*x3299*x3300)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3302.value)*(((((-1.0)*x3299))+(((-1.0)*x3298)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3301.value)*((((x3296*x3297))+(((-1.0)*x3298*x3300))+((x3295*x3297))+(((-5952.0)*x3296*x3298))+(((-5952.0)*x3296*x3299))+(((-5952.0)*x3295*x3298))+(((-5952.0)*x3295*x3299))+(((-1.0)*x3299*x3300))))))+IKsqr(((x3302.value)*(((((-1.0)*x3299))+(((-1.0)*x3298))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((x3301.value)*((((x3296*x3297))+(((-1.0)*x3298*x3300))+((x3295*x3297))+(((-5952.0)*x3296*x3298))+(((-5952.0)*x3296*x3299))+(((-5952.0)*x3295*x3298))+(((-5952.0)*x3295*x3299))+(((-1.0)*x3299*x3300))))), ((x3302.value)*(((((-1.0)*x3299))+(((-1.0)*x3298))))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[4];
IkReal x3303=IKcos(j12);
IkReal x3304=IKsin(j12);
IkReal x3305=(cj14*sj13);
IkReal x3306=((0.09465)*cj17);
IkReal x3307=(r10*sj17);
IkReal x3308=(cj13*sj14);
IkReal x3309=(r00*sj17);
IkReal x3310=((0.425)*sj13);
IkReal x3311=((1.0)*x3303);
IkReal x3312=((1.0)*x3304);
IkReal x3313=((0.39225)*x3304);
IkReal x3314=((0.39225)*x3303);
evalcond[0]=((((-1.0)*x3305*x3311))+x3309+((cj17*r01))+(((-1.0)*x3308*x3311)));
evalcond[1]=((((-1.0)*x3305*x3312))+x3307+(((-1.0)*x3308*x3312))+((cj17*r11)));
evalcond[2]=((((-0.10915)*x3304))+(((-0.09465)*x3309))+(((-1.0)*px))+(((-1.0)*r01*x3306))+((x3308*x3314))+((x3303*x3310))+((x3305*x3314)));
evalcond[3]=((((0.10915)*x3303))+(((-0.09465)*x3307))+(((-1.0)*py))+((x3304*x3310))+(((-1.0)*r11*x3306))+((x3308*x3313))+((x3305*x3313)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j16eval[3];
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
IkReal x3315=(((r00*sj17))+((cj17*r01)));
j16eval[0]=x3315;
j16eval[1]=((IKabs(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))))+(IKabs((cj12*r22))));
j16eval[2]=IKsign(x3315);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
IkReal x3316=(((cj17*r11))+((r10*sj17)));
j16eval[0]=x3316;
j16eval[1]=((IKabs((r22*sj12)))+(IKabs(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12))))));
j16eval[2]=IKsign(x3316);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
IkReal x3317=((1.0)*cj12);
IkReal x3318=((1.0)*sj12);
IkReal x3319=(((r20*sj17))+((cj17*r21)));
j16eval[0]=x3319;
j16eval[1]=IKsign(x3319);
j16eval[2]=((IKabs((((cj12*r01*sj17))+((r11*sj12*sj17))+(((-1.0)*cj17*r00*x3317))+(((-1.0)*cj17*r10*x3318)))))+(IKabs(((((-1.0)*r02*x3317))+(((-1.0)*r12*x3318))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x3321 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3321)==0){
continue;
}
IkReal x3320=pow(x3321,-0.5);
CheckValue<IkReal> x3322 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3322.valid){
continue;
}
IkReal gconst96=((-1.0)*(x3322.value));
IkReal gconst97=((-1.0)*r21*x3320);
IkReal gconst98=(r20*x3320);
CheckValue<IkReal> x3323 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3323.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j17+(x3323.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x3326 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3326.valid){
continue;
}
IkReal x3324=((-1.0)*(x3326.value));
IkReal x3325=x3320;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
sj17=gconst97;
cj17=gconst98;
j17=x3324;
IkReal gconst96=x3324;
IkReal gconst97=((-1.0)*r21*x3325);
IkReal gconst98=(r20*x3325);
j16eval[0]=cj12;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x3329 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3329.valid){
continue;
}
IkReal x3327=((-1.0)*(x3329.value));
IkReal x3328=x3320;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
sj17=gconst97;
cj17=gconst98;
j17=x3327;
IkReal gconst96=x3327;
IkReal gconst97=((-1.0)*r21*x3328);
IkReal gconst98=(r20*x3328);
j16eval[0]=sj12;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
CheckValue<IkReal> x3332 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3332.valid){
continue;
}
IkReal x3330=((-1.0)*(x3332.value));
IkReal x3331=x3320;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
sj17=gconst97;
cj17=gconst98;
j17=x3330;
IkReal gconst96=x3330;
IkReal gconst97=((-1.0)*r21*x3331);
IkReal gconst98=(r20*x3331);
IkReal x3333=((1.0)*(r22*r22));
CheckValue<IkReal> x3337=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x3333))),-1);
if(!x3337.valid){
continue;
}
IkReal x3334=x3337.value;
IkReal x3335=((1.0)*x3334);
IkReal x3336=((((-1.0)*x3335*(r20*r20*r20*r20)))+(((-1.0)*x3335*(r21*r21*r21*r21)))+(((-1.0)*x3333))+(((-2.0)*x3334*(r20*r20)*(r21*r21))));
j16eval[0]=x3336;
j16eval[1]=IKsign(x3336);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x3338=(cj14*sj13);
IkReal x3339=(gconst97*r21);
IkReal x3340=(gconst98*r20);
IkReal x3341=((1.0)*cj13*sj14);
CheckValue<IkReal> x3342 = IKatan2WithCheck(IkReal(((((-1.0)*x3340*x3341))+((cj13*sj14*x3339))+(((-1.0)*x3338*x3340))+((x3338*x3339)))),IkReal(((((-1.0)*r22*x3338))+(((-1.0)*r22*x3341)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3342.valid){
continue;
}
CheckValue<IkReal> x3343=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x3340*x3340)))+(((-1.0)*(r22*r22)))+(((2.0)*x3339*x3340))+(((-1.0)*(x3339*x3339))))),-1);
if(!x3343.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x3342.value)+(((1.5707963267949)*(x3343.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x3344=IKcos(j16);
IkReal x3345=IKsin(j16);
IkReal x3346=(gconst97*r20);
IkReal x3347=(gconst98*r00);
IkReal x3348=(gconst97*r11);
IkReal x3349=(gconst98*r21);
IkReal x3350=(gconst97*r21);
IkReal x3351=((1.0)*gconst97*r01);
IkReal x3352=((1.0)*x3345);
IkReal x3353=(gconst98*x3344);
IkReal x3354=((1.0)*x3344);
IkReal x3355=(gconst98*x3345);
evalcond[0]=(((r20*x3353))+(((-1.0)*x3350*x3354))+(((-1.0)*r22*x3352)));
evalcond[1]=((((-1.0)*x3348*x3354))+cj12+(((-1.0)*r12*x3352))+((r10*x3353)));
evalcond[2]=(((x3344*x3347))+(((-1.0)*r02*x3352))+(((-1.0)*x3344*x3351))+(((-1.0)*sj12)));
evalcond[3]=((((-1.0)*cj13*sj14))+((r22*x3344))+((r20*x3355))+(((-1.0)*x3350*x3352))+(((-1.0)*cj14*sj13)));
evalcond[4]=(((cj12*x3346))+((cj12*x3349))+((r02*x3344))+((x3345*x3347))+(((-1.0)*x3345*x3351)));
evalcond[5]=((((-1.0)*x3348*x3352))+((sj12*x3349))+((sj12*x3346))+((r10*x3355))+((r12*x3344)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x3356 = IKatan2WithCheck(IkReal(((((-1.0)*gconst97*r21*sj12))+((gconst98*r20*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3356.valid){
continue;
}
CheckValue<IkReal> x3357=IKPowWithIntegerCheck(IKsign((((gconst98*r11))+((gconst97*r10)))),-1);
if(!x3357.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x3356.value)+(((1.5707963267949)*(x3357.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x3358=IKcos(j16);
IkReal x3359=IKsin(j16);
IkReal x3360=(gconst97*r20);
IkReal x3361=(gconst98*r00);
IkReal x3362=(gconst97*r11);
IkReal x3363=(gconst98*r21);
IkReal x3364=(gconst97*r21);
IkReal x3365=((1.0)*gconst97*r01);
IkReal x3366=((1.0)*x3359);
IkReal x3367=(gconst98*x3358);
IkReal x3368=((1.0)*x3358);
IkReal x3369=(gconst98*x3359);
evalcond[0]=((((-1.0)*r22*x3366))+(((-1.0)*x3364*x3368))+((r20*x3367)));
evalcond[1]=((((-1.0)*r12*x3366))+(((-1.0)*x3362*x3368))+((r10*x3367))+cj12);
evalcond[2]=(((x3358*x3361))+(((-1.0)*r02*x3366))+(((-1.0)*sj12))+(((-1.0)*x3358*x3365)));
evalcond[3]=((((-1.0)*cj13*sj14))+(((-1.0)*x3364*x3366))+((r20*x3369))+(((-1.0)*cj14*sj13))+((r22*x3358)));
evalcond[4]=((((-1.0)*x3359*x3365))+((cj12*x3360))+((cj12*x3363))+((x3359*x3361))+((r02*x3358)));
evalcond[5]=(((r12*x3358))+(((-1.0)*x3362*x3366))+((r10*x3369))+((sj12*x3363))+((sj12*x3360)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x3370 = IKatan2WithCheck(IkReal((((cj12*gconst98*r20))+(((-1.0)*cj12*gconst97*r21)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3370.valid){
continue;
}
CheckValue<IkReal> x3371=IKPowWithIntegerCheck(IKsign((((gconst98*r01))+((gconst97*r00)))),-1);
if(!x3371.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x3370.value)+(((1.5707963267949)*(x3371.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x3372=IKcos(j16);
IkReal x3373=IKsin(j16);
IkReal x3374=(gconst97*r20);
IkReal x3375=(gconst98*r00);
IkReal x3376=(gconst97*r11);
IkReal x3377=(gconst98*r21);
IkReal x3378=(gconst97*r21);
IkReal x3379=((1.0)*gconst97*r01);
IkReal x3380=((1.0)*x3373);
IkReal x3381=(gconst98*x3372);
IkReal x3382=((1.0)*x3372);
IkReal x3383=(gconst98*x3373);
evalcond[0]=((((-1.0)*x3378*x3382))+(((-1.0)*r22*x3380))+((r20*x3381)));
evalcond[1]=((((-1.0)*x3376*x3382))+((r10*x3381))+cj12+(((-1.0)*r12*x3380)));
evalcond[2]=(((x3372*x3375))+(((-1.0)*r02*x3380))+(((-1.0)*sj12))+(((-1.0)*x3372*x3379)));
evalcond[3]=((((-1.0)*x3378*x3380))+((r20*x3383))+((r22*x3372))+(((-1.0)*cj13*sj14))+(((-1.0)*cj14*sj13)));
evalcond[4]=((((-1.0)*x3373*x3379))+((cj12*x3377))+((cj12*x3374))+((x3373*x3375))+((r02*x3372)));
evalcond[5]=(((r12*x3372))+(((-1.0)*x3376*x3380))+((r10*x3383))+((sj12*x3374))+((sj12*x3377)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3385 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3385)==0){
continue;
}
IkReal x3384=pow(x3385,-0.5);
CheckValue<IkReal> x3386 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3386.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x3386.value))));
IkReal gconst100=((1.0)*r21*x3384);
IkReal gconst101=((-1.0)*r20*x3384);
CheckValue<IkReal> x3387 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3387.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j17+(x3387.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x3390 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3390.valid){
continue;
}
IkReal x3388=((1.0)*(x3390.value));
IkReal x3389=x3384;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
sj17=gconst100;
cj17=gconst101;
j17=((3.14159265)+(((-1.0)*x3388)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3388)));
IkReal gconst100=((1.0)*r21*x3389);
IkReal gconst101=((-1.0)*r20*x3389);
IkReal x3391=r22*r22;
IkReal x3392=((1.0)*x3391);
CheckValue<IkReal> x3396=IKPowWithIntegerCheck(((-1.0)+x3391),-1);
if(!x3396.valid){
continue;
}
IkReal x3393=x3396.value;
if((((1.0)+(((-1.0)*x3392)))) < -0.00001)
continue;
IkReal x3394=IKsqrt(((1.0)+(((-1.0)*x3392))));
IkReal x3395=(cj12*x3393*x3394);
j16eval[0]=((IKabs((cj12*r22)))+(IKabs(((((-1.0)*x3392*x3395))+x3395))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x3399 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3399.valid){
continue;
}
IkReal x3397=((1.0)*(x3399.value));
IkReal x3398=x3384;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
sj17=gconst100;
cj17=gconst101;
j17=((3.14159265)+(((-1.0)*x3397)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3397)));
IkReal gconst100=((1.0)*r21*x3398);
IkReal gconst101=((-1.0)*r20*x3398);
IkReal x3400=r22*r22;
IkReal x3401=((1.0)*x3400);
CheckValue<IkReal> x3405=IKPowWithIntegerCheck(((-1.0)+x3400),-1);
if(!x3405.valid){
continue;
}
IkReal x3402=x3405.value;
if((((1.0)+(((-1.0)*x3401)))) < -0.00001)
continue;
IkReal x3403=IKsqrt(((1.0)+(((-1.0)*x3401))));
IkReal x3404=(sj12*x3402*x3403);
j16eval[0]=((IKabs(((((-1.0)*x3401*x3404))+x3404)))+(IKabs((r22*sj12))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
CheckValue<IkReal> x3408 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3408.valid){
continue;
}
IkReal x3406=((1.0)*(x3408.value));
IkReal x3407=x3384;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
sj17=gconst100;
cj17=gconst101;
j17=((3.14159265)+(((-1.0)*x3406)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3406)));
IkReal gconst100=((1.0)*r21*x3407);
IkReal gconst101=((-1.0)*r20*x3407);
IkReal x3409=r22*r22;
IkReal x3410=(cj12*r02);
IkReal x3411=(r12*sj12);
CheckValue<IkReal> x3415=IKPowWithIntegerCheck(((-1.0)+x3409),-1);
if(!x3415.valid){
continue;
}
IkReal x3412=x3415.value;
if((((1.0)+(((-1.0)*x3409)))) < -0.00001)
continue;
IkReal x3413=IKsqrt(((1.0)+(((-1.0)*x3409))));
IkReal x3414=(r22*x3412*x3413);
j16eval[0]=0;
j16eval[1]=0;
j16eval[2]=((IKabs((((x3411*x3414))+((x3410*x3414)))))+(IKabs(((((-1.0)*x3411))+(((-1.0)*x3410))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x3416=((1.0)*sj12);
IkReal x3417=((1.0)*cj12);
CheckValue<IkReal> x3418=IKPowWithIntegerCheck(IKsign((((gconst100*r20))+((gconst101*r21)))),-1);
if(!x3418.valid){
continue;
}
CheckValue<IkReal> x3419 = IKatan2WithCheck(IkReal(((((-1.0)*gconst101*r00*x3417))+((cj12*gconst100*r01))+(((-1.0)*gconst101*r10*x3416))+((gconst100*r11*sj12)))),IkReal(((((-1.0)*r02*x3417))+(((-1.0)*r12*x3416)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3419.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3418.value)))+(x3419.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x3420=IKcos(j16);
IkReal x3421=IKsin(j16);
IkReal x3422=((1.0)*gconst100);
IkReal x3423=(gconst101*r10);
IkReal x3424=(gconst101*r21);
IkReal x3425=(gconst100*r20);
IkReal x3426=(gconst101*x3420);
IkReal x3427=((1.0)*x3421);
IkReal x3428=(gconst101*x3421);
evalcond[0]=(((r20*x3426))+(((-1.0)*r22*x3427))+(((-1.0)*r21*x3420*x3422)));
evalcond[1]=((((-1.0)*r12*x3427))+((x3420*x3423))+(((-1.0)*r11*x3420*x3422))+cj12);
evalcond[2]=(((r00*x3426))+(((-1.0)*r01*x3420*x3422))+(((-1.0)*sj12))+(((-1.0)*r02*x3427)));
evalcond[3]=(((r20*x3428))+(((-1.0)*cj13*sj14))+(((-1.0)*r21*x3421*x3422))+(((-1.0)*cj14*sj13))+((r22*x3420)));
evalcond[4]=(((r00*x3428))+((cj12*x3424))+((cj12*x3425))+((r02*x3420))+(((-1.0)*r01*x3421*x3422)));
evalcond[5]=(((sj12*x3424))+((sj12*x3425))+(((-1.0)*r11*x3421*x3422))+((x3421*x3423))+((r12*x3420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x3429=IKPowWithIntegerCheck(IKsign((((gconst100*r10))+((gconst101*r11)))),-1);
if(!x3429.valid){
continue;
}
CheckValue<IkReal> x3430 = IKatan2WithCheck(IkReal(((((-1.0)*gconst100*r21*sj12))+((gconst101*r20*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3430.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3429.value)))+(x3430.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x3431=IKcos(j16);
IkReal x3432=IKsin(j16);
IkReal x3433=((1.0)*gconst100);
IkReal x3434=(gconst101*r10);
IkReal x3435=(gconst101*r21);
IkReal x3436=(gconst100*r20);
IkReal x3437=(gconst101*x3431);
IkReal x3438=((1.0)*x3432);
IkReal x3439=(gconst101*x3432);
evalcond[0]=((((-1.0)*r21*x3431*x3433))+((r20*x3437))+(((-1.0)*r22*x3438)));
evalcond[1]=((((-1.0)*r12*x3438))+cj12+(((-1.0)*r11*x3431*x3433))+((x3431*x3434)));
evalcond[2]=((((-1.0)*r01*x3431*x3433))+(((-1.0)*sj12))+((r00*x3437))+(((-1.0)*r02*x3438)));
evalcond[3]=(((r20*x3439))+(((-1.0)*cj13*sj14))+(((-1.0)*r21*x3432*x3433))+((r22*x3431))+(((-1.0)*cj14*sj13)));
evalcond[4]=(((cj12*x3435))+((cj12*x3436))+(((-1.0)*r01*x3432*x3433))+((r02*x3431))+((r00*x3439)));
evalcond[5]=(((sj12*x3436))+((sj12*x3435))+((x3432*x3434))+((r12*x3431))+(((-1.0)*r11*x3432*x3433)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x3440=IKPowWithIntegerCheck(IKsign((((gconst100*r00))+((gconst101*r01)))),-1);
if(!x3440.valid){
continue;
}
CheckValue<IkReal> x3441 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*gconst100*r21))+((cj12*gconst101*r20)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3441.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3440.value)))+(x3441.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x3442=IKcos(j16);
IkReal x3443=IKsin(j16);
IkReal x3444=((1.0)*gconst100);
IkReal x3445=(gconst101*r10);
IkReal x3446=(gconst101*r21);
IkReal x3447=(gconst100*r20);
IkReal x3448=(gconst101*x3442);
IkReal x3449=((1.0)*x3443);
IkReal x3450=(gconst101*x3443);
evalcond[0]=(((r20*x3448))+(((-1.0)*r22*x3449))+(((-1.0)*r21*x3442*x3444)));
evalcond[1]=(((x3442*x3445))+cj12+(((-1.0)*r12*x3449))+(((-1.0)*r11*x3442*x3444)));
evalcond[2]=((((-1.0)*sj12))+(((-1.0)*r02*x3449))+((r00*x3448))+(((-1.0)*r01*x3442*x3444)));
evalcond[3]=((((-1.0)*cj13*sj14))+((r22*x3442))+((r20*x3450))+(((-1.0)*r21*x3443*x3444))+(((-1.0)*cj14*sj13)));
evalcond[4]=(((r02*x3442))+(((-1.0)*r01*x3443*x3444))+((r00*x3450))+((cj12*x3446))+((cj12*x3447)));
evalcond[5]=(((r12*x3442))+(((-1.0)*r11*x3443*x3444))+((sj12*x3446))+((sj12*x3447))+((x3443*x3445)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3452 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3452)==0){
continue;
}
IkReal x3451=pow(x3452,-0.5);
CheckValue<IkReal> x3453 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3453.valid){
continue;
}
IkReal gconst102=((-1.0)*(x3453.value));
IkReal gconst103=((-1.0)*r11*x3451);
IkReal gconst104=(r10*x3451);
CheckValue<IkReal> x3454 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3454.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3454.value)+j17)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
CheckValue<IkReal> x3457 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3457.valid){
continue;
}
IkReal x3455=((-1.0)*(x3457.value));
IkReal x3456=x3451;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
sj17=gconst103;
cj17=gconst104;
j17=x3455;
IkReal gconst102=x3455;
IkReal gconst103=((-1.0)*r11*x3456);
IkReal gconst104=(r10*x3456);
j16eval[0]=cj12;
j16eval[1]=r22;
j16eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x3458=((1.0)*gconst104);
CheckValue<IkReal> x3459 = IKatan2WithCheck(IkReal(((((-1.0)*r10*sj12*x3458))+((gconst103*r11*sj12))+((cj12*gconst103*r01))+(((-1.0)*cj12*r00*x3458)))),IkReal(((((-1.0)*cj12*r02))+(((-1.0)*r12*sj12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3459.valid){
continue;
}
CheckValue<IkReal> x3460=IKPowWithIntegerCheck(IKsign((((gconst104*r21))+((gconst103*r20)))),-1);
if(!x3460.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x3459.value)+(((1.5707963267949)*(x3460.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x3461=IKcos(j16);
IkReal x3462=IKsin(j16);
IkReal x3463=(gconst103*r20);
IkReal x3464=(gconst104*r20);
IkReal x3465=(gconst104*r00);
IkReal x3466=(gconst103*r11);
IkReal x3467=(gconst104*r10);
IkReal x3468=(gconst103*r21);
IkReal x3469=(gconst103*r01);
IkReal x3470=(gconst104*r21);
IkReal x3471=((1.0)*x3462);
IkReal x3472=((1.0)*x3461);
evalcond[0]=(((x3461*x3464))+(((-1.0)*r22*x3471))+(((-1.0)*x3468*x3472)));
evalcond[1]=(((x3461*x3467))+(((-1.0)*r12*x3471))+cj12+(((-1.0)*x3466*x3472)));
evalcond[2]=(((x3461*x3465))+(((-1.0)*r02*x3471))+(((-1.0)*x3469*x3472))+(((-1.0)*sj12)));
evalcond[3]=(((x3462*x3464))+(((-1.0)*cj13*sj14))+(((-1.0)*x3468*x3471))+(((-1.0)*cj14*sj13))+((r22*x3461)));
evalcond[4]=(((x3462*x3465))+((cj12*x3470))+((cj12*x3463))+(((-1.0)*x3469*x3471))+((r02*x3461)));
evalcond[5]=(((x3462*x3467))+((sj12*x3463))+((sj12*x3470))+((r12*x3461))+(((-1.0)*x3466*x3471)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x3473=IKPowWithIntegerCheck(IKsign((((gconst103*r00))+((gconst104*r01)))),-1);
if(!x3473.valid){
continue;
}
CheckValue<IkReal> x3474 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*gconst103*r21))+((cj12*gconst104*r20)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3474.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3473.value)))+(x3474.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x3475=IKcos(j16);
IkReal x3476=IKsin(j16);
IkReal x3477=(gconst103*r20);
IkReal x3478=(gconst104*r20);
IkReal x3479=(gconst104*r00);
IkReal x3480=(gconst103*r11);
IkReal x3481=(gconst104*r10);
IkReal x3482=(gconst103*r21);
IkReal x3483=(gconst103*r01);
IkReal x3484=(gconst104*r21);
IkReal x3485=((1.0)*x3476);
IkReal x3486=((1.0)*x3475);
evalcond[0]=(((x3475*x3478))+(((-1.0)*x3482*x3486))+(((-1.0)*r22*x3485)));
evalcond[1]=(((x3475*x3481))+(((-1.0)*r12*x3485))+cj12+(((-1.0)*x3480*x3486)));
evalcond[2]=((((-1.0)*x3483*x3486))+((x3475*x3479))+(((-1.0)*r02*x3485))+(((-1.0)*sj12)));
evalcond[3]=((((-1.0)*x3482*x3485))+((x3476*x3478))+(((-1.0)*cj13*sj14))+(((-1.0)*cj14*sj13))+((r22*x3475)));
evalcond[4]=((((-1.0)*x3483*x3485))+((x3476*x3479))+((cj12*x3477))+((cj12*x3484))+((r02*x3475)));
evalcond[5]=(((x3476*x3481))+((sj12*x3477))+((sj12*x3484))+((r12*x3475))+(((-1.0)*x3480*x3485)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3488 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3488)==0){
continue;
}
IkReal x3487=pow(x3488,-0.5);
CheckValue<IkReal> x3489 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3489.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x3489.value))));
IkReal gconst106=((1.0)*r11*x3487);
IkReal gconst107=((-1.0)*r10*x3487);
CheckValue<IkReal> x3490 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3490.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3490.value)+j17)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
CheckValue<IkReal> x3493 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3493.valid){
continue;
}
IkReal x3491=((1.0)*(x3493.value));
IkReal x3492=x3487;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
sj17=gconst106;
cj17=gconst107;
j17=((3.14159265)+(((-1.0)*x3491)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3491)));
IkReal gconst106=((1.0)*r11*x3492);
IkReal gconst107=((-1.0)*r10*x3492);
j16eval[0]=cj12;
j16eval[1]=r22;
j16eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[5];
CheckValue<IkReal> x3496 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3496.valid){
continue;
}
IkReal x3494=((1.0)*(x3496.value));
IkReal x3495=x3487;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
sj17=gconst106;
cj17=gconst107;
j17=((3.14159265)+(((-1.0)*x3494)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3494)));
IkReal gconst106=((1.0)*r11*x3495);
IkReal gconst107=((-1.0)*r10*x3495);
j16eval[0]=0;
j16eval[1]=0;
j16eval[2]=r22;
j16eval[3]=sj12;
j16eval[4]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  || IKabs(j16eval[3]) < 0.0000010000000000  || IKabs(j16eval[4]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x3499 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3499.valid){
continue;
}
IkReal x3497=((1.0)*(x3499.value));
IkReal x3498=x3487;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
sj17=gconst106;
cj17=gconst107;
j17=((3.14159265)+(((-1.0)*x3497)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3497)));
IkReal gconst106=((1.0)*r11*x3498);
IkReal gconst107=((-1.0)*r10*x3498);
IkReal x3500=r12*r12;
IkReal x3501=(cj12*r02);
IkReal x3502=x3487;
IkReal x3503=(sj12*x3502);
j16eval[0]=((IKabs(((((-1.0)*r12*sj12))+(((-1.0)*x3501)))))+(IKabs((((x3500*x3503))+(((-1.0)*x3503))+((r12*x3501*x3502))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x3504=((1.0)*gconst107);
CheckValue<IkReal> x3505 = IKatan2WithCheck(IkReal((((gconst106*r11*sj12))+((cj12*gconst106*r01))+(((-1.0)*r10*sj12*x3504))+(((-1.0)*cj12*r00*x3504)))),IkReal(((((-1.0)*cj12*r02))+(((-1.0)*r12*sj12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3505.valid){
continue;
}
CheckValue<IkReal> x3506=IKPowWithIntegerCheck(IKsign((((gconst107*r21))+((gconst106*r20)))),-1);
if(!x3506.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x3505.value)+(((1.5707963267949)*(x3506.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x3507=IKcos(j16);
IkReal x3508=IKsin(j16);
IkReal x3509=(gconst106*r20);
IkReal x3510=((1.0)*gconst106);
IkReal x3511=(gconst107*r00);
IkReal x3512=(gconst107*r21);
IkReal x3513=((1.0)*x3508);
IkReal x3514=(gconst107*x3508);
IkReal x3515=(gconst107*x3507);
evalcond[0]=((((-1.0)*r21*x3507*x3510))+((r20*x3515))+(((-1.0)*r22*x3513)));
evalcond[1]=(((r10*x3515))+cj12+(((-1.0)*r12*x3513))+(((-1.0)*r11*x3507*x3510)));
evalcond[2]=(((x3507*x3511))+(((-1.0)*r02*x3513))+(((-1.0)*r01*x3507*x3510))+(((-1.0)*sj12)));
evalcond[3]=((((-1.0)*cj13*sj14))+((r20*x3514))+((r22*x3507))+(((-1.0)*cj14*sj13))+(((-1.0)*r21*x3508*x3510)));
evalcond[4]=(((cj12*x3509))+((x3508*x3511))+((r02*x3507))+(((-1.0)*r01*x3508*x3510))+((cj12*x3512)));
evalcond[5]=(((sj12*x3512))+((r10*x3514))+((sj12*x3509))+((r12*x3507))+(((-1.0)*r11*x3508*x3510)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x3516=IKPowWithIntegerCheck(IKsign((((gconst107*r11))+((gconst106*r10)))),-1);
if(!x3516.valid){
continue;
}
CheckValue<IkReal> x3517 = IKatan2WithCheck(IkReal(((((-1.0)*gconst106*r21*sj12))+((gconst107*r20*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3517.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3516.value)))+(x3517.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x3518=IKcos(j16);
IkReal x3519=IKsin(j16);
IkReal x3520=(gconst106*r20);
IkReal x3521=((1.0)*gconst106);
IkReal x3522=(gconst107*r00);
IkReal x3523=(gconst107*r21);
IkReal x3524=((1.0)*x3519);
IkReal x3525=(gconst107*x3519);
IkReal x3526=(gconst107*x3518);
evalcond[0]=(((r20*x3526))+(((-1.0)*r22*x3524))+(((-1.0)*r21*x3518*x3521)));
evalcond[1]=(((r10*x3526))+(((-1.0)*r11*x3518*x3521))+cj12+(((-1.0)*r12*x3524)));
evalcond[2]=((((-1.0)*r02*x3524))+(((-1.0)*r01*x3518*x3521))+(((-1.0)*sj12))+((x3518*x3522)));
evalcond[3]=(((r20*x3525))+(((-1.0)*cj13*sj14))+((r22*x3518))+(((-1.0)*r21*x3519*x3521))+(((-1.0)*cj14*sj13)));
evalcond[4]=((((-1.0)*r01*x3519*x3521))+((r02*x3518))+((cj12*x3520))+((cj12*x3523))+((x3519*x3522)));
evalcond[5]=(((sj12*x3520))+((sj12*x3523))+((r10*x3525))+(((-1.0)*r11*x3519*x3521))+((r12*x3518)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x3527=IKPowWithIntegerCheck(IKsign((((gconst107*r01))+((gconst106*r00)))),-1);
if(!x3527.valid){
continue;
}
CheckValue<IkReal> x3528 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*gconst106*r21))+((cj12*gconst107*r20)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3528.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3527.value)))+(x3528.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x3529=IKcos(j16);
IkReal x3530=IKsin(j16);
IkReal x3531=(gconst106*r20);
IkReal x3532=((1.0)*gconst106);
IkReal x3533=(gconst107*r00);
IkReal x3534=(gconst107*r21);
IkReal x3535=((1.0)*x3530);
IkReal x3536=(gconst107*x3530);
IkReal x3537=(gconst107*x3529);
evalcond[0]=(((r20*x3537))+(((-1.0)*r21*x3529*x3532))+(((-1.0)*r22*x3535)));
evalcond[1]=((((-1.0)*r11*x3529*x3532))+(((-1.0)*r12*x3535))+cj12+((r10*x3537)));
evalcond[2]=((((-1.0)*r01*x3529*x3532))+(((-1.0)*r02*x3535))+(((-1.0)*sj12))+((x3529*x3533)));
evalcond[3]=((((-1.0)*cj13*sj14))+(((-1.0)*r21*x3530*x3532))+((r20*x3536))+((r22*x3529))+(((-1.0)*cj14*sj13)));
evalcond[4]=((((-1.0)*r01*x3530*x3532))+((r02*x3529))+((cj12*x3534))+((cj12*x3531))+((x3530*x3533)));
evalcond[5]=(((r12*x3529))+((sj12*x3534))+((sj12*x3531))+((r10*x3536))+(((-1.0)*r11*x3530*x3532)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j12))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
sj12=0;
cj12=1.0;
j12=0;
IkReal x3538=(((r00*sj17))+((cj17*r01)));
j16eval[0]=x3538;
j16eval[1]=IKsign(x3538);
j16eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*r21*sj17))+((cj17*r20))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
sj12=0;
cj12=1.0;
j12=0;
IkReal x3539=((1.0)*sj17);
IkReal x3540=((((-1.0)*cj17*r21))+(((-1.0)*r20*x3539)));
j16eval[0]=x3540;
j16eval[1]=IKsign(x3540);
j16eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x3539))+((cj17*r00))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
sj12=0;
cj12=1.0;
j12=0;
IkReal x3541=cj17*cj17;
IkReal x3542=r11*r11;
IkReal x3543=(r11*sj17);
IkReal x3544=(cj17*r10);
IkReal x3545=((r12*r12)+((x3541*(r10*r10)))+x3542+(((-2.0)*x3543*x3544))+(((-1.0)*x3541*x3542)));
j16eval[0]=x3545;
j16eval[1]=((IKabs(r12))+(IKabs((x3543+(((-1.0)*x3544))))));
j16eval[2]=IKsign(x3545);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x3546=cj17*cj17;
IkReal x3547=r11*r11;
IkReal x3548=(r11*sj17);
IkReal x3549=(cj17*r10);
CheckValue<IkReal> x3550=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x3546*x3547))+x3547+((x3546*(r10*r10)))+(((-2.0)*x3548*x3549)))),-1);
if(!x3550.valid){
continue;
}
CheckValue<IkReal> x3551 = IKatan2WithCheck(IkReal(r12),IkReal((x3548+(((-1.0)*x3549)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3551.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3550.value)))+(x3551.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x3552=IKsin(j16);
IkReal x3553=IKcos(j16);
IkReal x3554=((1.0)*sj17);
IkReal x3555=(cj17*x3552);
IkReal x3556=(cj17*x3553);
IkReal x3557=((1.0)*x3552);
evalcond[0]=(((r12*x3553))+(((-1.0)*r11*x3552*x3554))+((r10*x3555)));
evalcond[1]=(((r20*x3556))+(((-1.0)*r22*x3557))+(((-1.0)*r21*x3553*x3554)));
evalcond[2]=(((r00*x3556))+(((-1.0)*r01*x3553*x3554))+(((-1.0)*r02*x3557)));
evalcond[3]=((1.0)+(((-1.0)*r11*x3553*x3554))+(((-1.0)*r12*x3557))+((r10*x3556)));
evalcond[4]=(((r00*x3555))+((r20*sj17))+((cj17*r21))+(((-1.0)*r01*x3552*x3554))+((r02*x3553)));
evalcond[5]=(((r20*x3555))+(((-1.0)*cj13*sj14))+((r22*x3553))+(((-1.0)*cj14*sj13))+(((-1.0)*r21*x3552*x3554)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x3558=((1.0)*sj17);
CheckValue<IkReal> x3559 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x3558))+((cj17*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x3559.valid){
continue;
}
CheckValue<IkReal> x3560=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj17*r21))+(((-1.0)*r20*x3558)))),-1);
if(!x3560.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x3559.value)+(((1.5707963267949)*(x3560.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x3561=IKsin(j16);
IkReal x3562=IKcos(j16);
IkReal x3563=((1.0)*sj17);
IkReal x3564=(cj17*x3561);
IkReal x3565=(cj17*x3562);
IkReal x3566=((1.0)*x3561);
evalcond[0]=(((r10*x3564))+((r12*x3562))+(((-1.0)*r11*x3561*x3563)));
evalcond[1]=((((-1.0)*r22*x3566))+(((-1.0)*r21*x3562*x3563))+((r20*x3565)));
evalcond[2]=((((-1.0)*r02*x3566))+((r00*x3565))+(((-1.0)*r01*x3562*x3563)));
evalcond[3]=((1.0)+((r10*x3565))+(((-1.0)*r11*x3562*x3563))+(((-1.0)*r12*x3566)));
evalcond[4]=(((r20*sj17))+((r00*x3564))+(((-1.0)*r01*x3561*x3563))+((cj17*r21))+((r02*x3562)));
evalcond[5]=((((-1.0)*cj13*sj14))+(((-1.0)*r21*x3561*x3563))+((r22*x3562))+(((-1.0)*cj14*sj13))+((r20*x3564)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x3567 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj17))+((cj17*r20)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x3567.valid){
continue;
}
CheckValue<IkReal> x3568=IKPowWithIntegerCheck(IKsign((((r00*sj17))+((cj17*r01)))),-1);
if(!x3568.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x3567.value)+(((1.5707963267949)*(x3568.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x3569=IKsin(j16);
IkReal x3570=IKcos(j16);
IkReal x3571=((1.0)*sj17);
IkReal x3572=(cj17*x3569);
IkReal x3573=(cj17*x3570);
IkReal x3574=((1.0)*x3569);
evalcond[0]=(((r10*x3572))+(((-1.0)*r11*x3569*x3571))+((r12*x3570)));
evalcond[1]=(((r20*x3573))+(((-1.0)*r21*x3570*x3571))+(((-1.0)*r22*x3574)));
evalcond[2]=(((r00*x3573))+(((-1.0)*r01*x3570*x3571))+(((-1.0)*r02*x3574)));
evalcond[3]=((1.0)+((r10*x3573))+(((-1.0)*r11*x3570*x3571))+(((-1.0)*r12*x3574)));
evalcond[4]=(((r00*x3572))+((r20*sj17))+(((-1.0)*r01*x3569*x3571))+((cj17*r21))+((r02*x3570)));
evalcond[5]=((((-1.0)*cj13*sj14))+((r20*x3572))+(((-1.0)*r21*x3569*x3571))+((r22*x3570))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
IkReal x3575=(((r20*sj17))+((cj17*r21)));
j16eval[0]=x3575;
j16eval[1]=IKsign(x3575);
j16eval[2]=((IKabs(r02))+(IKabs((((cj17*r00))+(((-1.0)*r01*sj17))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
IkReal x3576=((1.0)*sj17);
IkReal x3577=((((-1.0)*cj17*r01))+(((-1.0)*r00*x3576)));
j16eval[0]=x3577;
j16eval[1]=IKsign(x3577);
j16eval[2]=((IKabs(r22))+(IKabs((((cj17*r20))+(((-1.0)*r21*x3576))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
IkReal x3578=cj17*cj17;
IkReal x3579=r11*r11;
IkReal x3580=(r11*sj17);
IkReal x3581=(cj17*r10);
IkReal x3582=((((2.0)*x3580*x3581))+((x3578*x3579))+(((-1.0)*(r12*r12)))+(((-1.0)*x3579))+(((-1.0)*x3578*(r10*r10))));
j16eval[0]=x3582;
j16eval[1]=((IKabs((x3580+(((-1.0)*x3581)))))+(IKabs(r12)));
j16eval[2]=IKsign(x3582);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x3583=cj17*cj17;
IkReal x3584=r11*r11;
IkReal x3585=(r11*sj17);
IkReal x3586=(cj17*r10);
CheckValue<IkReal> x3587=IKPowWithIntegerCheck(IKsign((((x3583*x3584))+(((-1.0)*x3583*(r10*r10)))+(((-1.0)*(r12*r12)))+(((-1.0)*x3584))+(((2.0)*x3585*x3586)))),-1);
if(!x3587.valid){
continue;
}
CheckValue<IkReal> x3588 = IKatan2WithCheck(IkReal(r12),IkReal((x3585+(((-1.0)*x3586)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3588.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3587.value)))+(x3588.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x3589=IKsin(j16);
IkReal x3590=IKcos(j16);
IkReal x3591=((1.0)*r21);
IkReal x3592=((1.0)*r01);
IkReal x3593=(cj17*x3589);
IkReal x3594=(cj17*x3590);
IkReal x3595=((1.0)*r11*sj17);
IkReal x3596=(sj17*x3589);
IkReal x3597=((1.0)*x3589);
IkReal x3598=(sj17*x3590);
evalcond[0]=((((-1.0)*x3589*x3595))+((r10*x3593))+((r12*x3590)));
evalcond[1]=((((-1.0)*r22*x3597))+((r20*x3594))+(((-1.0)*x3591*x3598)));
evalcond[2]=((((-1.0)*r02*x3597))+((r00*x3594))+(((-1.0)*x3592*x3598)));
evalcond[3]=((-1.0)+((r10*x3594))+(((-1.0)*x3590*x3595))+(((-1.0)*r12*x3597)));
evalcond[4]=((((-1.0)*cj13*sj14))+((r20*x3593))+(((-1.0)*x3591*x3596))+((r22*x3590))+(((-1.0)*cj14*sj13)));
evalcond[5]=(((r02*x3590))+(((-1.0)*cj17*x3591))+(((-1.0)*r20*sj17))+((r00*x3593))+(((-1.0)*x3592*x3596)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x3599=((1.0)*sj17);
CheckValue<IkReal> x3600=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj17*r01))+(((-1.0)*r00*x3599)))),-1);
if(!x3600.valid){
continue;
}
CheckValue<IkReal> x3601 = IKatan2WithCheck(IkReal((((cj17*r20))+(((-1.0)*r21*x3599)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x3601.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3600.value)))+(x3601.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x3602=IKsin(j16);
IkReal x3603=IKcos(j16);
IkReal x3604=((1.0)*r21);
IkReal x3605=((1.0)*r01);
IkReal x3606=(cj17*x3602);
IkReal x3607=(cj17*x3603);
IkReal x3608=((1.0)*r11*sj17);
IkReal x3609=(sj17*x3602);
IkReal x3610=((1.0)*x3602);
IkReal x3611=(sj17*x3603);
evalcond[0]=((((-1.0)*x3602*x3608))+((r10*x3606))+((r12*x3603)));
evalcond[1]=((((-1.0)*r22*x3610))+(((-1.0)*x3604*x3611))+((r20*x3607)));
evalcond[2]=((((-1.0)*x3605*x3611))+(((-1.0)*r02*x3610))+((r00*x3607)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x3610))+(((-1.0)*x3603*x3608))+((r10*x3607)));
evalcond[4]=((((-1.0)*cj13*sj14))+((r22*x3603))+(((-1.0)*cj14*sj13))+((r20*x3606))+(((-1.0)*x3604*x3609)));
evalcond[5]=(((r02*x3603))+(((-1.0)*cj17*x3604))+(((-1.0)*r20*sj17))+((r00*x3606))+(((-1.0)*x3605*x3609)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x3612 = IKatan2WithCheck(IkReal((((cj17*r00))+(((-1.0)*r01*sj17)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x3612.valid){
continue;
}
CheckValue<IkReal> x3613=IKPowWithIntegerCheck(IKsign((((r20*sj17))+((cj17*r21)))),-1);
if(!x3613.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x3612.value)+(((1.5707963267949)*(x3613.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x3614=IKsin(j16);
IkReal x3615=IKcos(j16);
IkReal x3616=((1.0)*r21);
IkReal x3617=((1.0)*r01);
IkReal x3618=(cj17*x3614);
IkReal x3619=(cj17*x3615);
IkReal x3620=((1.0)*r11*sj17);
IkReal x3621=(sj17*x3614);
IkReal x3622=((1.0)*x3614);
IkReal x3623=(sj17*x3615);
evalcond[0]=((((-1.0)*x3614*x3620))+((r10*x3618))+((r12*x3615)));
evalcond[1]=((((-1.0)*r22*x3622))+(((-1.0)*x3616*x3623))+((r20*x3619)));
evalcond[2]=(((r00*x3619))+(((-1.0)*x3617*x3623))+(((-1.0)*r02*x3622)));
evalcond[3]=((-1.0)+((r10*x3619))+(((-1.0)*r12*x3622))+(((-1.0)*x3615*x3620)));
evalcond[4]=((((-1.0)*cj13*sj14))+((r22*x3615))+(((-1.0)*cj14*sj13))+(((-1.0)*x3616*x3621))+((r20*x3618)));
evalcond[5]=(((r02*x3615))+(((-1.0)*cj17*x3616))+((r00*x3618))+(((-1.0)*r20*sj17))+(((-1.0)*x3617*x3621)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3625 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3625)==0){
continue;
}
IkReal x3624=pow(x3625,-0.5);
CheckValue<IkReal> x3626 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3626.valid){
continue;
}
IkReal gconst108=((-1.0)*(x3626.value));
IkReal gconst109=((-1.0)*r01*x3624);
IkReal gconst110=(r00*x3624);
CheckValue<IkReal> x3627 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3627.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3627.value)+j17)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
CheckValue<IkReal> x3630 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3630.valid){
continue;
}
IkReal x3628=((-1.0)*(x3630.value));
IkReal x3629=x3624;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
sj17=gconst109;
cj17=gconst110;
j17=x3628;
IkReal gconst108=x3628;
IkReal gconst109=((-1.0)*r01*x3629);
IkReal gconst110=(r00*x3629);
j16eval[0]=r22;
j16eval[1]=sj12;
j16eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x3631=((1.0)*gconst110);
CheckValue<IkReal> x3632=IKPowWithIntegerCheck(IKsign((((gconst109*r20))+((gconst110*r21)))),-1);
if(!x3632.valid){
continue;
}
CheckValue<IkReal> x3633 = IKatan2WithCheck(IkReal(((((-1.0)*r10*sj12*x3631))+(((-1.0)*cj12*r00*x3631))+((gconst109*r11*sj12))+((cj12*gconst109*r01)))),IkReal(((((-1.0)*cj12*r02))+(((-1.0)*r12*sj12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3633.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3632.value)))+(x3633.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x3634=IKcos(j16);
IkReal x3635=IKsin(j16);
IkReal x3636=(gconst110*r20);
IkReal x3637=(gconst110*r21);
IkReal x3638=((1.0)*gconst109);
IkReal x3639=(gconst109*r20);
IkReal x3640=(gconst110*x3634);
IkReal x3641=((1.0)*x3635);
IkReal x3642=(gconst110*x3635);
evalcond[0]=((((-1.0)*r21*x3634*x3638))+((x3634*x3636))+(((-1.0)*r22*x3641)));
evalcond[1]=((((-1.0)*r12*x3641))+cj12+((r10*x3640))+(((-1.0)*r11*x3634*x3638)));
evalcond[2]=((((-1.0)*r01*x3634*x3638))+((r00*x3640))+(((-1.0)*sj12))+(((-1.0)*r02*x3641)));
evalcond[3]=((((-1.0)*r21*x3635*x3638))+(((-1.0)*cj13*sj14))+((r22*x3634))+((x3635*x3636))+(((-1.0)*cj14*sj13)));
evalcond[4]=(((r02*x3634))+((r00*x3642))+(((-1.0)*r01*x3635*x3638))+((cj12*x3637))+((cj12*x3639)));
evalcond[5]=(((r12*x3634))+(((-1.0)*r11*x3635*x3638))+((r10*x3642))+((sj12*x3637))+((sj12*x3639)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x3643=IKPowWithIntegerCheck(IKsign((((gconst109*r10))+((gconst110*r11)))),-1);
if(!x3643.valid){
continue;
}
CheckValue<IkReal> x3644 = IKatan2WithCheck(IkReal((((gconst110*r20*sj12))+(((-1.0)*gconst109*r21*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3644.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3643.value)))+(x3644.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x3645=IKcos(j16);
IkReal x3646=IKsin(j16);
IkReal x3647=(gconst110*r20);
IkReal x3648=(gconst110*r21);
IkReal x3649=((1.0)*gconst109);
IkReal x3650=(gconst109*r20);
IkReal x3651=(gconst110*x3645);
IkReal x3652=((1.0)*x3646);
IkReal x3653=(gconst110*x3646);
evalcond[0]=((((-1.0)*r21*x3645*x3649))+(((-1.0)*r22*x3652))+((x3645*x3647)));
evalcond[1]=(cj12+((r10*x3651))+(((-1.0)*r12*x3652))+(((-1.0)*r11*x3645*x3649)));
evalcond[2]=(((r00*x3651))+(((-1.0)*sj12))+(((-1.0)*r01*x3645*x3649))+(((-1.0)*r02*x3652)));
evalcond[3]=((((-1.0)*cj13*sj14))+(((-1.0)*r21*x3646*x3649))+((r22*x3645))+(((-1.0)*cj14*sj13))+((x3646*x3647)));
evalcond[4]=(((r00*x3653))+((cj12*x3648))+((cj12*x3650))+(((-1.0)*r01*x3646*x3649))+((r02*x3645)));
evalcond[5]=(((r12*x3645))+((r10*x3653))+((sj12*x3648))+(((-1.0)*r11*x3646*x3649))+((sj12*x3650)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3655 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3655)==0){
continue;
}
IkReal x3654=pow(x3655,-0.5);
CheckValue<IkReal> x3656 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3656.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x3656.value))));
IkReal gconst112=((1.0)*r01*x3654);
IkReal gconst113=((-1.0)*r00*x3654);
CheckValue<IkReal> x3657 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3657.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3657.value)+j17)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[5];
CheckValue<IkReal> x3660 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3660.valid){
continue;
}
IkReal x3658=((1.0)*(x3660.value));
IkReal x3659=x3654;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
sj17=gconst112;
cj17=gconst113;
j17=((3.14159265)+(((-1.0)*x3658)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3658)));
IkReal gconst112=((1.0)*r01*x3659);
IkReal gconst113=((-1.0)*r00*x3659);
j16eval[0]=0;
j16eval[1]=cj12;
j16eval[2]=r22;
j16eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j16eval[4]=0;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  || IKabs(j16eval[3]) < 0.0000010000000000  || IKabs(j16eval[4]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
CheckValue<IkReal> x3663 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3663.valid){
continue;
}
IkReal x3661=((1.0)*(x3663.value));
IkReal x3662=x3654;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
sj17=gconst112;
cj17=gconst113;
j17=((3.14159265)+(((-1.0)*x3661)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3661)));
IkReal gconst112=((1.0)*r01*x3662);
IkReal gconst113=((-1.0)*r00*x3662);
j16eval[0]=r22;
j16eval[1]=sj12;
j16eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x3666 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3666.valid){
continue;
}
IkReal x3664=((1.0)*(x3666.value));
IkReal x3665=x3654;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
sj17=gconst112;
cj17=gconst113;
j17=((3.14159265)+(((-1.0)*x3664)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3664)));
IkReal gconst112=((1.0)*r01*x3665);
IkReal gconst113=((-1.0)*r00*x3665);
IkReal x3667=r02*r02;
IkReal x3668=(r12*sj12);
IkReal x3669=x3654;
IkReal x3670=(cj12*x3669);
j16eval[0]=((IKabs((((x3667*x3670))+((r02*x3668*x3669))+(((-1.0)*x3670)))))+(IKabs(((((-1.0)*cj12*r02))+(((-1.0)*x3668))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x3671=((1.0)*gconst113);
CheckValue<IkReal> x3672=IKPowWithIntegerCheck(IKsign((((gconst112*r20))+((gconst113*r21)))),-1);
if(!x3672.valid){
continue;
}
CheckValue<IkReal> x3673 = IKatan2WithCheck(IkReal(((((-1.0)*r10*sj12*x3671))+((gconst112*r11*sj12))+((cj12*gconst112*r01))+(((-1.0)*cj12*r00*x3671)))),IkReal(((((-1.0)*cj12*r02))+(((-1.0)*r12*sj12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3673.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3672.value)))+(x3673.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x3674=IKcos(j16);
IkReal x3675=IKsin(j16);
IkReal x3676=(gconst112*r20);
IkReal x3677=(gconst113*r21);
IkReal x3678=((1.0)*gconst112*r11);
IkReal x3679=(gconst113*x3674);
IkReal x3680=(gconst113*x3675);
IkReal x3681=((1.0)*x3675);
IkReal x3682=(gconst112*x3681);
IkReal x3683=((1.0)*gconst112*x3674);
evalcond[0]=((((-1.0)*r22*x3681))+(((-1.0)*r21*x3683))+((r20*x3679)));
evalcond[1]=(cj12+(((-1.0)*r12*x3681))+((r10*x3679))+(((-1.0)*x3674*x3678)));
evalcond[2]=(((r00*x3679))+(((-1.0)*r01*x3683))+(((-1.0)*sj12))+(((-1.0)*r02*x3681)));
evalcond[3]=((((-1.0)*r21*x3682))+(((-1.0)*cj13*sj14))+((r20*x3680))+((r22*x3674))+(((-1.0)*cj14*sj13)));
evalcond[4]=(((r00*x3680))+((cj12*x3677))+((cj12*x3676))+((r02*x3674))+(((-1.0)*r01*x3682)));
evalcond[5]=(((r10*x3680))+((r12*x3674))+((sj12*x3677))+((sj12*x3676))+(((-1.0)*x3675*x3678)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x3684 = IKatan2WithCheck(IkReal(((((-1.0)*gconst112*r21*sj12))+((gconst113*r20*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3684.valid){
continue;
}
CheckValue<IkReal> x3685=IKPowWithIntegerCheck(IKsign((((gconst113*r11))+((gconst112*r10)))),-1);
if(!x3685.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x3684.value)+(((1.5707963267949)*(x3685.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x3686=IKcos(j16);
IkReal x3687=IKsin(j16);
IkReal x3688=(gconst112*r20);
IkReal x3689=(gconst113*r21);
IkReal x3690=((1.0)*gconst112*r11);
IkReal x3691=(gconst113*x3686);
IkReal x3692=(gconst113*x3687);
IkReal x3693=((1.0)*x3687);
IkReal x3694=(gconst112*x3693);
IkReal x3695=((1.0)*gconst112*x3686);
evalcond[0]=(((r20*x3691))+(((-1.0)*r22*x3693))+(((-1.0)*r21*x3695)));
evalcond[1]=((((-1.0)*x3686*x3690))+(((-1.0)*r12*x3693))+cj12+((r10*x3691)));
evalcond[2]=(((r00*x3691))+(((-1.0)*sj12))+(((-1.0)*r02*x3693))+(((-1.0)*r01*x3695)));
evalcond[3]=(((r20*x3692))+(((-1.0)*cj13*sj14))+((r22*x3686))+(((-1.0)*cj14*sj13))+(((-1.0)*r21*x3694)));
evalcond[4]=(((r00*x3692))+((cj12*x3688))+((cj12*x3689))+((r02*x3686))+(((-1.0)*r01*x3694)));
evalcond[5]=((((-1.0)*x3687*x3690))+((r12*x3686))+((sj12*x3688))+((sj12*x3689))+((r10*x3692)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x3696 = IKatan2WithCheck(IkReal((((cj12*gconst113*r20))+(((-1.0)*cj12*gconst112*r21)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3696.valid){
continue;
}
CheckValue<IkReal> x3697=IKPowWithIntegerCheck(IKsign((((gconst112*r00))+((gconst113*r01)))),-1);
if(!x3697.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x3696.value)+(((1.5707963267949)*(x3697.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x3698=IKcos(j16);
IkReal x3699=IKsin(j16);
IkReal x3700=(gconst112*r20);
IkReal x3701=(gconst113*r21);
IkReal x3702=((1.0)*gconst112*r11);
IkReal x3703=(gconst113*x3698);
IkReal x3704=(gconst113*x3699);
IkReal x3705=((1.0)*x3699);
IkReal x3706=(gconst112*x3705);
IkReal x3707=((1.0)*gconst112*x3698);
evalcond[0]=(((r20*x3703))+(((-1.0)*r21*x3707))+(((-1.0)*r22*x3705)));
evalcond[1]=((((-1.0)*x3698*x3702))+cj12+((r10*x3703))+(((-1.0)*r12*x3705)));
evalcond[2]=((((-1.0)*r02*x3705))+(((-1.0)*r01*x3707))+((r00*x3703))+(((-1.0)*sj12)));
evalcond[3]=((((-1.0)*cj13*sj14))+((r20*x3704))+((r22*x3698))+(((-1.0)*r21*x3706))+(((-1.0)*cj14*sj13)));
evalcond[4]=((((-1.0)*r01*x3706))+((r02*x3698))+((r00*x3704))+((cj12*x3700))+((cj12*x3701)));
evalcond[5]=(((sj12*x3701))+((sj12*x3700))+(((-1.0)*x3699*x3702))+((r10*x3704))+((r12*x3698)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
sj12=1.0;
cj12=0;
j12=1.5707963267949;
IkReal x3708=(((cj17*r11))+((r10*sj17)));
j16eval[0]=x3708;
j16eval[1]=IKsign(x3708);
j16eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*r21*sj17))+((cj17*r20))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
sj12=1.0;
cj12=0;
j12=1.5707963267949;
IkReal x3709=((1.0)*sj17);
IkReal x3710=((((-1.0)*cj17*r21))+(((-1.0)*r20*x3709)));
j16eval[0]=x3710;
j16eval[1]=IKsign(x3710);
j16eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*r11*x3709))+((cj17*r10))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
sj12=1.0;
cj12=0;
j12=1.5707963267949;
IkReal x3711=cj17*cj17;
IkReal x3712=r01*r01;
IkReal x3713=(r01*sj17);
IkReal x3714=(cj17*r00);
IkReal x3715=(((x3711*x3712))+(((-1.0)*(r02*r02)))+(((-1.0)*x3711*(r00*r00)))+(((2.0)*x3713*x3714))+(((-1.0)*x3712)));
j16eval[0]=x3715;
j16eval[1]=IKsign(x3715);
j16eval[2]=((IKabs(r02))+(IKabs((x3713+(((-1.0)*x3714))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x3716=cj17*cj17;
IkReal x3717=r01*r01;
IkReal x3718=(r01*sj17);
IkReal x3719=(cj17*r00);
CheckValue<IkReal> x3720 = IKatan2WithCheck(IkReal(r02),IkReal((x3718+(((-1.0)*x3719)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3720.valid){
continue;
}
CheckValue<IkReal> x3721=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3716*(r00*r00)))+(((-1.0)*(r02*r02)))+((x3716*x3717))+(((-1.0)*x3717))+(((2.0)*x3718*x3719)))),-1);
if(!x3721.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x3720.value)+(((1.5707963267949)*(x3721.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x3722=IKsin(j16);
IkReal x3723=IKcos(j16);
IkReal x3724=((1.0)*sj17);
IkReal x3725=(cj17*x3722);
IkReal x3726=(cj17*x3723);
IkReal x3727=((1.0)*x3722);
evalcond[0]=(((r00*x3725))+((r02*x3723))+(((-1.0)*r01*x3722*x3724)));
evalcond[1]=((((-1.0)*r22*x3727))+((r20*x3726))+(((-1.0)*r21*x3723*x3724)));
evalcond[2]=((((-1.0)*r11*x3723*x3724))+(((-1.0)*r12*x3727))+((r10*x3726)));
evalcond[3]=((-1.0)+((r00*x3726))+(((-1.0)*r02*x3727))+(((-1.0)*r01*x3723*x3724)));
evalcond[4]=((((-1.0)*r11*x3722*x3724))+((r20*sj17))+((cj17*r21))+((r12*x3723))+((r10*x3725)));
evalcond[5]=(((r20*x3725))+(((-1.0)*cj13*sj14))+((r22*x3723))+(((-1.0)*r21*x3722*x3724))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x3728=((1.0)*sj17);
CheckValue<IkReal> x3729 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x3728))+((cj17*r10)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x3729.valid){
continue;
}
CheckValue<IkReal> x3730=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj17*r21))+(((-1.0)*r20*x3728)))),-1);
if(!x3730.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x3729.value)+(((1.5707963267949)*(x3730.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x3731=IKsin(j16);
IkReal x3732=IKcos(j16);
IkReal x3733=((1.0)*sj17);
IkReal x3734=(cj17*x3731);
IkReal x3735=(cj17*x3732);
IkReal x3736=((1.0)*x3731);
evalcond[0]=(((r00*x3734))+((r02*x3732))+(((-1.0)*r01*x3731*x3733)));
evalcond[1]=((((-1.0)*r21*x3732*x3733))+(((-1.0)*r22*x3736))+((r20*x3735)));
evalcond[2]=((((-1.0)*r11*x3732*x3733))+(((-1.0)*r12*x3736))+((r10*x3735)));
evalcond[3]=((-1.0)+((r00*x3735))+(((-1.0)*r01*x3732*x3733))+(((-1.0)*r02*x3736)));
evalcond[4]=(((r20*sj17))+((r12*x3732))+((cj17*r21))+((r10*x3734))+(((-1.0)*r11*x3731*x3733)));
evalcond[5]=((((-1.0)*cj13*sj14))+((r22*x3732))+(((-1.0)*cj14*sj13))+(((-1.0)*r21*x3731*x3733))+((r20*x3734)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x3737 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj17))+((cj17*r20)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x3737.valid){
continue;
}
CheckValue<IkReal> x3738=IKPowWithIntegerCheck(IKsign((((cj17*r11))+((r10*sj17)))),-1);
if(!x3738.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x3737.value)+(((1.5707963267949)*(x3738.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x3739=IKsin(j16);
IkReal x3740=IKcos(j16);
IkReal x3741=((1.0)*sj17);
IkReal x3742=(cj17*x3739);
IkReal x3743=(cj17*x3740);
IkReal x3744=((1.0)*x3739);
evalcond[0]=(((r00*x3742))+(((-1.0)*r01*x3739*x3741))+((r02*x3740)));
evalcond[1]=((((-1.0)*r22*x3744))+((r20*x3743))+(((-1.0)*r21*x3740*x3741)));
evalcond[2]=((((-1.0)*r11*x3740*x3741))+(((-1.0)*r12*x3744))+((r10*x3743)));
evalcond[3]=((-1.0)+((r00*x3743))+(((-1.0)*r01*x3740*x3741))+(((-1.0)*r02*x3744)));
evalcond[4]=((((-1.0)*r11*x3739*x3741))+((r12*x3740))+((r20*sj17))+((r10*x3742))+((cj17*r21)));
evalcond[5]=((((-1.0)*r21*x3739*x3741))+((r20*x3742))+(((-1.0)*cj13*sj14))+((r22*x3740))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
IkReal x3745=(((r20*sj17))+((cj17*r21)));
j16eval[0]=x3745;
j16eval[1]=IKsign(x3745);
j16eval[2]=((IKabs(r12))+(IKabs((((cj17*r10))+(((-1.0)*r11*sj17))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
IkReal x3746=((1.0)*sj17);
IkReal x3747=((((-1.0)*cj17*r11))+(((-1.0)*r10*x3746)));
j16eval[0]=x3747;
j16eval[1]=IKsign(x3747);
j16eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*r21*x3746))+((cj17*r20))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
IkReal x3748=cj17*cj17;
IkReal x3749=r01*r01;
IkReal x3750=(cj17*r00);
IkReal x3751=(r01*sj17);
IkReal x3752=(x3749+(((-1.0)*x3748*x3749))+((x3748*(r00*r00)))+(((-2.0)*x3750*x3751))+(r02*r02));
j16eval[0]=x3752;
j16eval[1]=IKsign(x3752);
j16eval[2]=((IKabs(r02))+(IKabs((x3751+(((-1.0)*x3750))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x3753=cj17*cj17;
IkReal x3754=r01*r01;
IkReal x3755=(r01*sj17);
IkReal x3756=(cj17*r00);
CheckValue<IkReal> x3757 = IKatan2WithCheck(IkReal(r02),IkReal((x3755+(((-1.0)*x3756)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3757.valid){
continue;
}
CheckValue<IkReal> x3758=IKPowWithIntegerCheck(IKsign(((((-2.0)*x3755*x3756))+x3754+(((-1.0)*x3753*x3754))+((x3753*(r00*r00)))+(r02*r02))),-1);
if(!x3758.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x3757.value)+(((1.5707963267949)*(x3758.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x3759=IKsin(j16);
IkReal x3760=IKcos(j16);
IkReal x3761=((1.0)*r21);
IkReal x3762=((1.0)*r01);
IkReal x3763=(cj17*x3759);
IkReal x3764=(cj17*x3760);
IkReal x3765=((1.0)*r11*sj17);
IkReal x3766=(sj17*x3759);
IkReal x3767=((1.0)*x3759);
IkReal x3768=(sj17*x3760);
evalcond[0]=((((-1.0)*x3762*x3766))+((r02*x3760))+((r00*x3763)));
evalcond[1]=((((-1.0)*x3761*x3768))+(((-1.0)*r22*x3767))+((r20*x3764)));
evalcond[2]=(((r10*x3764))+(((-1.0)*x3760*x3765))+(((-1.0)*r12*x3767)));
evalcond[3]=((1.0)+(((-1.0)*x3762*x3768))+(((-1.0)*r02*x3767))+((r00*x3764)));
evalcond[4]=(((r22*x3760))+(((-1.0)*x3761*x3766))+(((-1.0)*cj13*sj14))+((r20*x3763))+(((-1.0)*cj14*sj13)));
evalcond[5]=((((-1.0)*cj17*x3761))+((r10*x3763))+(((-1.0)*x3759*x3765))+(((-1.0)*r20*sj17))+((r12*x3760)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x3769=((1.0)*sj17);
CheckValue<IkReal> x3770=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x3769))+(((-1.0)*cj17*r11)))),-1);
if(!x3770.valid){
continue;
}
CheckValue<IkReal> x3771 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x3769))+((cj17*r20)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x3771.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3770.value)))+(x3771.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x3772=IKsin(j16);
IkReal x3773=IKcos(j16);
IkReal x3774=((1.0)*r21);
IkReal x3775=((1.0)*r01);
IkReal x3776=(cj17*x3772);
IkReal x3777=(cj17*x3773);
IkReal x3778=((1.0)*r11*sj17);
IkReal x3779=(sj17*x3772);
IkReal x3780=((1.0)*x3772);
IkReal x3781=(sj17*x3773);
evalcond[0]=(((r02*x3773))+(((-1.0)*x3775*x3779))+((r00*x3776)));
evalcond[1]=((((-1.0)*r22*x3780))+(((-1.0)*x3774*x3781))+((r20*x3777)));
evalcond[2]=(((r10*x3777))+(((-1.0)*x3773*x3778))+(((-1.0)*r12*x3780)));
evalcond[3]=((1.0)+(((-1.0)*r02*x3780))+(((-1.0)*x3775*x3781))+((r00*x3777)));
evalcond[4]=(((r22*x3773))+(((-1.0)*cj13*sj14))+(((-1.0)*x3774*x3779))+((r20*x3776))+(((-1.0)*cj14*sj13)));
evalcond[5]=((((-1.0)*cj17*x3774))+((r10*x3776))+(((-1.0)*r20*sj17))+((r12*x3773))+(((-1.0)*x3772*x3778)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x3782 = IKatan2WithCheck(IkReal((((cj17*r10))+(((-1.0)*r11*sj17)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x3782.valid){
continue;
}
CheckValue<IkReal> x3783=IKPowWithIntegerCheck(IKsign((((r20*sj17))+((cj17*r21)))),-1);
if(!x3783.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x3782.value)+(((1.5707963267949)*(x3783.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x3784=IKsin(j16);
IkReal x3785=IKcos(j16);
IkReal x3786=((1.0)*r21);
IkReal x3787=((1.0)*r01);
IkReal x3788=(cj17*x3784);
IkReal x3789=(cj17*x3785);
IkReal x3790=((1.0)*r11*sj17);
IkReal x3791=(sj17*x3784);
IkReal x3792=((1.0)*x3784);
IkReal x3793=(sj17*x3785);
evalcond[0]=(((r02*x3785))+((r00*x3788))+(((-1.0)*x3787*x3791)));
evalcond[1]=((((-1.0)*x3786*x3793))+((r20*x3789))+(((-1.0)*r22*x3792)));
evalcond[2]=((((-1.0)*r12*x3792))+(((-1.0)*x3785*x3790))+((r10*x3789)));
evalcond[3]=((1.0)+(((-1.0)*r02*x3792))+((r00*x3789))+(((-1.0)*x3787*x3793)));
evalcond[4]=(((r22*x3785))+(((-1.0)*cj13*sj14))+(((-1.0)*x3786*x3791))+((r20*x3788))+(((-1.0)*cj14*sj13)));
evalcond[5]=(((r12*x3785))+(((-1.0)*r20*sj17))+(((-1.0)*x3784*x3790))+(((-1.0)*cj17*x3786))+((r10*x3788)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
IkReal x3794=((-1.0)*px);
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3794);
rxp1_1=(px*r21);
rxp1_2=(r11*x3794);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j16eval[0]=r02;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
IkReal x3795=((-1.0)*px);
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3795);
rxp1_1=(px*r21);
rxp1_2=(r11*x3795);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j16eval[0]=((((-1.0)*r21*sj17))+((cj17*r20)));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
CheckValue<IkReal> x3797=IKPowWithIntegerCheck(((((-1.0)*r21*sj17))+((cj17*r20))),-1);
if(!x3797.valid){
continue;
}
IkReal x3796=x3797.value;
sj16array[0]=(((cj13*sj14*x3796))+((cj14*sj13*x3796)));
if( sj16array[0] >= -1-IKFAST_SINCOS_THRESH && sj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKasin(sj16array[0]);
    cj16array[0] = IKcos(j16array[0]);
    sj16array[1] = sj16array[0];
    j16array[1] = j16array[0] > 0 ? (IKPI-j16array[0]) : (-IKPI-j16array[0]);
    cj16array[1] = -cj16array[0];
}
else if( isnan(sj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x3798=IKcos(j16);
IkReal x3799=(cj17*x3798);
IkReal x3800=((1.0)*sj17*x3798);
evalcond[0]=(r02*x3798);
evalcond[1]=((((-1.0)*r02*(IKsin(j16))))+(((-1.0)*sj12)));
evalcond[2]=((((-1.0)*r21*x3800))+((r20*x3799)));
evalcond[3]=(((r10*x3799))+(((-1.0)*r11*x3800)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
CheckValue<IkReal> x3801=IKPowWithIntegerCheck(r02,-1);
if(!x3801.valid){
continue;
}
sj16array[0]=((-1.0)*sj12*(x3801.value));
if( sj16array[0] >= -1-IKFAST_SINCOS_THRESH && sj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKasin(sj16array[0]);
    cj16array[0] = IKcos(j16array[0]);
    sj16array[1] = sj16array[0];
    j16array[1] = j16array[0] > 0 ? (IKPI-j16array[0]) : (-IKPI-j16array[0]);
    cj16array[1] = -cj16array[0];
}
else if( isnan(sj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x3802=IKcos(j16);
IkReal x3803=IKsin(j16);
IkReal x3804=((1.0)*r21*sj17);
IkReal x3805=(cj17*x3802);
evalcond[0]=(r02*x3802);
evalcond[1]=((((-1.0)*x3802*x3804))+((r20*x3805)));
evalcond[2]=((((-1.0)*r11*sj17*x3802))+((r10*x3805)));
evalcond[3]=((((-1.0)*cj13*sj14))+((cj17*r20*x3803))+(((-1.0)*x3803*x3804))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j16]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x3806=((1.0)*cj12);
IkReal x3807=((1.0)*sj12);
CheckValue<IkReal> x3808 = IKatan2WithCheck(IkReal((((cj12*r01*sj17))+(((-1.0)*cj17*r00*x3806))+((r11*sj12*sj17))+(((-1.0)*cj17*r10*x3807)))),IkReal(((((-1.0)*r02*x3806))+(((-1.0)*r12*x3807)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3808.valid){
continue;
}
CheckValue<IkReal> x3809=IKPowWithIntegerCheck(IKsign((((r20*sj17))+((cj17*r21)))),-1);
if(!x3809.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x3808.value)+(((1.5707963267949)*(x3809.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x3810=IKcos(j16);
IkReal x3811=IKsin(j16);
IkReal x3812=(cj17*r21);
IkReal x3813=(r20*sj17);
IkReal x3814=(r21*sj17);
IkReal x3815=(r11*sj17);
IkReal x3816=(r01*sj17);
IkReal x3817=(cj17*x3811);
IkReal x3818=(cj17*x3810);
IkReal x3819=((1.0)*x3811);
IkReal x3820=((1.0)*x3810);
evalcond[0]=((((-1.0)*r22*x3819))+(((-1.0)*x3814*x3820))+((r20*x3818)));
evalcond[1]=((((-1.0)*r12*x3819))+(((-1.0)*x3815*x3820))+cj12+((r10*x3818)));
evalcond[2]=((((-1.0)*r02*x3819))+(((-1.0)*sj12))+(((-1.0)*x3816*x3820))+((r00*x3818)));
evalcond[3]=((((-1.0)*cj13*sj14))+(((-1.0)*x3814*x3819))+((r22*x3810))+((r20*x3817))+(((-1.0)*cj14*sj13)));
evalcond[4]=(((r02*x3810))+(((-1.0)*x3816*x3819))+((cj12*x3813))+((cj12*x3812))+((r00*x3817)));
evalcond[5]=(((r12*x3810))+(((-1.0)*x3815*x3819))+((r10*x3817))+((sj12*x3813))+((sj12*x3812)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x3821=IKPowWithIntegerCheck(IKsign((((cj17*r11))+((r10*sj17)))),-1);
if(!x3821.valid){
continue;
}
CheckValue<IkReal> x3822 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3822.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3821.value)))+(x3822.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x3823=IKcos(j16);
IkReal x3824=IKsin(j16);
IkReal x3825=(cj17*r21);
IkReal x3826=(r20*sj17);
IkReal x3827=(r21*sj17);
IkReal x3828=(r11*sj17);
IkReal x3829=(r01*sj17);
IkReal x3830=(cj17*x3824);
IkReal x3831=(cj17*x3823);
IkReal x3832=((1.0)*x3824);
IkReal x3833=((1.0)*x3823);
evalcond[0]=(((r20*x3831))+(((-1.0)*r22*x3832))+(((-1.0)*x3827*x3833)));
evalcond[1]=((((-1.0)*x3828*x3833))+cj12+(((-1.0)*r12*x3832))+((r10*x3831)));
evalcond[2]=((((-1.0)*x3829*x3833))+((r00*x3831))+(((-1.0)*sj12))+(((-1.0)*r02*x3832)));
evalcond[3]=((((-1.0)*cj13*sj14))+((r20*x3830))+((r22*x3823))+(((-1.0)*x3827*x3832))+(((-1.0)*cj14*sj13)));
evalcond[4]=((((-1.0)*x3829*x3832))+((r00*x3830))+((r02*x3823))+((cj12*x3825))+((cj12*x3826)));
evalcond[5]=(((r12*x3823))+(((-1.0)*x3828*x3832))+((sj12*x3825))+((sj12*x3826))+((r10*x3830)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x3834 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3834.valid){
continue;
}
CheckValue<IkReal> x3835=IKPowWithIntegerCheck(IKsign((((r00*sj17))+((cj17*r01)))),-1);
if(!x3835.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x3834.value)+(((1.5707963267949)*(x3835.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x3836=IKcos(j16);
IkReal x3837=IKsin(j16);
IkReal x3838=(cj17*r21);
IkReal x3839=(r20*sj17);
IkReal x3840=(r21*sj17);
IkReal x3841=(r11*sj17);
IkReal x3842=(r01*sj17);
IkReal x3843=(cj17*x3837);
IkReal x3844=(cj17*x3836);
IkReal x3845=((1.0)*x3837);
IkReal x3846=((1.0)*x3836);
evalcond[0]=((((-1.0)*x3840*x3846))+((r20*x3844))+(((-1.0)*r22*x3845)));
evalcond[1]=(cj12+(((-1.0)*x3841*x3846))+(((-1.0)*r12*x3845))+((r10*x3844)));
evalcond[2]=((((-1.0)*r02*x3845))+(((-1.0)*x3842*x3846))+(((-1.0)*sj12))+((r00*x3844)));
evalcond[3]=((((-1.0)*cj13*sj14))+(((-1.0)*x3840*x3845))+((r20*x3843))+(((-1.0)*cj14*sj13))+((r22*x3836)));
evalcond[4]=((((-1.0)*x3842*x3845))+((r02*x3836))+((cj12*x3839))+((cj12*x3838))+((r00*x3843)));
evalcond[5]=(((sj12*x3839))+((sj12*x3838))+(((-1.0)*x3841*x3845))+((r12*x3836))+((r10*x3843)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x3847=cj17*cj17;
IkReal x3848=r21*r21;
IkReal x3849=(cj17*r20);
IkReal x3850=(r21*sj17);
IkReal x3851=(cj13*sj14);
IkReal x3852=((1.0)*cj14*sj13);
CheckValue<IkReal> x3853=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3847*(r20*r20)))+((x3847*x3848))+(((2.0)*x3849*x3850))+(((-1.0)*(r22*r22)))+(((-1.0)*x3848)))),-1);
if(!x3853.valid){
continue;
}
CheckValue<IkReal> x3854 = IKatan2WithCheck(IkReal((((x3850*x3851))+((cj14*sj13*x3850))+(((-1.0)*x3849*x3851))+(((-1.0)*x3849*x3852)))),IkReal(((((-1.0)*r22*x3851))+(((-1.0)*r22*x3852)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3854.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3853.value)))+(x3854.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[2];
IkReal x3855=IKcos(j16);
IkReal x3856=IKsin(j16);
IkReal x3857=(r21*sj17);
IkReal x3858=(cj17*r20);
IkReal x3859=((1.0)*x3856);
evalcond[0]=((((-1.0)*x3855*x3857))+((x3855*x3858))+(((-1.0)*r22*x3859)));
evalcond[1]=((((-1.0)*cj13*sj14))+((x3856*x3858))+(((-1.0)*x3857*x3859))+(((-1.0)*cj14*sj13))+((r22*x3855)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x3860=(cj16*sj17);
IkReal x3861=(cj16*cj17);
if( IKabs(((((-1.0)*r01*x3860))+((r00*x3861))+(((-1.0)*r02*sj16)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x3860))+((r12*sj16))+(((-1.0)*r10*x3861)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x3860))+((r00*x3861))+(((-1.0)*r02*sj16))))+IKsqr((((r11*x3860))+((r12*sj16))+(((-1.0)*r10*x3861))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-1.0)*r01*x3860))+((r00*x3861))+(((-1.0)*r02*sj16))), (((r11*x3860))+((r12*sj16))+(((-1.0)*r10*x3861))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x3862=IKcos(j12);
IkReal x3863=IKsin(j12);
IkReal x3864=((1.0)*sj16);
IkReal x3865=(cj13*sj14);
IkReal x3866=(r10*sj17);
IkReal x3867=(r11*sj17);
IkReal x3868=((1.0)*cj16);
IkReal x3869=(r20*sj17);
IkReal x3870=(cj17*r11);
IkReal x3871=(cj17*r01);
IkReal x3872=(r01*sj17);
IkReal x3873=(r00*sj17);
IkReal x3874=(cj17*r21);
IkReal x3875=(cj17*r10);
IkReal x3876=(cj14*sj13);
IkReal x3877=(cj17*r00);
IkReal x3878=((1.0)*x3863);
IkReal x3879=(sj13*x3862);
IkReal x3880=((0.39225)*x3863);
evalcond[0]=((((-1.0)*x3867*x3868))+x3862+(((-1.0)*r12*x3864))+((cj16*x3875)));
evalcond[1]=((((-1.0)*r02*x3864))+(((-1.0)*x3878))+(((-1.0)*x3868*x3872))+((cj16*x3877)));
evalcond[2]=(x3871+x3873+(((-1.0)*x3862*x3876))+(((-1.0)*x3862*x3865)));
evalcond[3]=((((-1.0)*x3865*x3878))+(((-1.0)*x3876*x3878))+x3866+x3870);
evalcond[4]=(((x3862*x3874))+((sj16*x3877))+((cj16*r02))+((x3862*x3869))+(((-1.0)*x3864*x3872)));
evalcond[5]=(((x3863*x3874))+(((-1.0)*x3864*x3867))+((sj16*x3875))+((cj16*r12))+((x3863*x3869)));
evalcond[6]=((((-0.10915)*x3863))+(((0.39225)*x3862*x3876))+(((-1.0)*px))+(((-0.09465)*x3871))+(((-0.09465)*x3873))+(((0.39225)*x3862*x3865))+(((0.425)*x3879)));
evalcond[7]=(((x3876*x3880))+(((-0.09465)*x3866))+(((-1.0)*py))+(((-0.09465)*x3870))+(((0.425)*sj13*x3863))+(((0.10915)*x3862))+((x3865*x3880)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x3881=((1.0)*cj17);
IkReal x3882=((1.0)*sj17);
CheckValue<IkReal> x3883=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj13*sj14))+(((-1.0)*cj14*sj13)))),-1);
if(!x3883.valid){
continue;
}
CheckValue<IkReal> x3884 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x3882))+(((-1.0)*r11*x3881)))),IkReal(((((-1.0)*r00*x3882))+(((-1.0)*r01*x3881)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3884.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3883.value)))+(x3884.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[4];
IkReal x3885=IKcos(j12);
IkReal x3886=IKsin(j12);
IkReal x3887=(cj14*sj13);
IkReal x3888=((0.09465)*cj17);
IkReal x3889=(r10*sj17);
IkReal x3890=(cj13*sj14);
IkReal x3891=(r00*sj17);
IkReal x3892=((0.425)*sj13);
IkReal x3893=((1.0)*x3885);
IkReal x3894=((1.0)*x3886);
IkReal x3895=((0.39225)*x3886);
IkReal x3896=((0.39225)*x3885);
evalcond[0]=((((-1.0)*x3887*x3893))+((cj17*r01))+x3891+(((-1.0)*x3890*x3893)));
evalcond[1]=((((-1.0)*x3887*x3894))+x3889+((cj17*r11))+(((-1.0)*x3890*x3894)));
evalcond[2]=(((x3890*x3896))+((x3885*x3892))+(((-1.0)*r01*x3888))+(((-1.0)*px))+((x3887*x3896))+(((-0.10915)*x3886))+(((-0.09465)*x3891)));
evalcond[3]=(((x3890*x3895))+(((-0.09465)*x3889))+(((-1.0)*py))+((x3886*x3892))+((x3887*x3895))+(((0.10915)*x3885))+(((-1.0)*r11*x3888)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j16eval[3];
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
IkReal x3897=(((r00*sj17))+((cj17*r01)));
j16eval[0]=x3897;
j16eval[1]=((IKabs(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))))+(IKabs((cj12*r22))));
j16eval[2]=IKsign(x3897);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
IkReal x3898=(((cj17*r11))+((r10*sj17)));
j16eval[0]=x3898;
j16eval[1]=((IKabs((r22*sj12)))+(IKabs(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12))))));
j16eval[2]=IKsign(x3898);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
IkReal x3899=((1.0)*cj12);
IkReal x3900=((1.0)*sj12);
IkReal x3901=(((r20*sj17))+((cj17*r21)));
j16eval[0]=x3901;
j16eval[1]=IKsign(x3901);
j16eval[2]=((IKabs((((cj12*r01*sj17))+((r11*sj12*sj17))+(((-1.0)*cj17*r10*x3900))+(((-1.0)*cj17*r00*x3899)))))+(IKabs(((((-1.0)*r12*x3900))+(((-1.0)*r02*x3899))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x3903 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3903)==0){
continue;
}
IkReal x3902=pow(x3903,-0.5);
CheckValue<IkReal> x3904 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3904.valid){
continue;
}
IkReal gconst96=((-1.0)*(x3904.value));
IkReal gconst97=((-1.0)*r21*x3902);
IkReal gconst98=(r20*x3902);
CheckValue<IkReal> x3905 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3905.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j17+(x3905.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x3908 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3908.valid){
continue;
}
IkReal x3906=((-1.0)*(x3908.value));
IkReal x3907=x3902;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
sj17=gconst97;
cj17=gconst98;
j17=x3906;
IkReal gconst96=x3906;
IkReal gconst97=((-1.0)*r21*x3907);
IkReal gconst98=(r20*x3907);
j16eval[0]=cj12;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x3911 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3911.valid){
continue;
}
IkReal x3909=((-1.0)*(x3911.value));
IkReal x3910=x3902;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
sj17=gconst97;
cj17=gconst98;
j17=x3909;
IkReal gconst96=x3909;
IkReal gconst97=((-1.0)*r21*x3910);
IkReal gconst98=(r20*x3910);
j16eval[0]=sj12;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
CheckValue<IkReal> x3914 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3914.valid){
continue;
}
IkReal x3912=((-1.0)*(x3914.value));
IkReal x3913=x3902;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
sj17=gconst97;
cj17=gconst98;
j17=x3912;
IkReal gconst96=x3912;
IkReal gconst97=((-1.0)*r21*x3913);
IkReal gconst98=(r20*x3913);
IkReal x3915=((1.0)*(r22*r22));
CheckValue<IkReal> x3919=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x3915))),-1);
if(!x3919.valid){
continue;
}
IkReal x3916=x3919.value;
IkReal x3917=((1.0)*x3916);
IkReal x3918=((((-1.0)*x3915))+(((-1.0)*x3917*(r20*r20*r20*r20)))+(((-1.0)*x3917*(r21*r21*r21*r21)))+(((-2.0)*x3916*(r20*r20)*(r21*r21))));
j16eval[0]=x3918;
j16eval[1]=IKsign(x3918);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x3920=(cj14*sj13);
IkReal x3921=(gconst97*r21);
IkReal x3922=(gconst98*r20);
IkReal x3923=((1.0)*cj13*sj14);
CheckValue<IkReal> x3924 = IKatan2WithCheck(IkReal((((cj13*sj14*x3921))+((x3920*x3921))+(((-1.0)*x3922*x3923))+(((-1.0)*x3920*x3922)))),IkReal(((((-1.0)*r22*x3923))+(((-1.0)*r22*x3920)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3924.valid){
continue;
}
CheckValue<IkReal> x3925=IKPowWithIntegerCheck(IKsign(((((2.0)*x3921*x3922))+(((-1.0)*(x3921*x3921)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x3922*x3922))))),-1);
if(!x3925.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x3924.value)+(((1.5707963267949)*(x3925.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x3926=IKcos(j16);
IkReal x3927=IKsin(j16);
IkReal x3928=(gconst97*r20);
IkReal x3929=(gconst98*r00);
IkReal x3930=(gconst97*r11);
IkReal x3931=(gconst98*r21);
IkReal x3932=(gconst97*r21);
IkReal x3933=((1.0)*gconst97*r01);
IkReal x3934=((1.0)*x3927);
IkReal x3935=(gconst98*x3926);
IkReal x3936=((1.0)*x3926);
IkReal x3937=(gconst98*x3927);
evalcond[0]=((((-1.0)*x3932*x3936))+((r20*x3935))+(((-1.0)*r22*x3934)));
evalcond[1]=(cj12+(((-1.0)*x3930*x3936))+(((-1.0)*r12*x3934))+((r10*x3935)));
evalcond[2]=((((-1.0)*x3926*x3933))+(((-1.0)*sj12))+(((-1.0)*r02*x3934))+((x3926*x3929)));
evalcond[3]=((((-1.0)*cj13*sj14))+(((-1.0)*x3932*x3934))+((r20*x3937))+((r22*x3926))+(((-1.0)*cj14*sj13)));
evalcond[4]=(((cj12*x3928))+((r02*x3926))+(((-1.0)*x3927*x3933))+((cj12*x3931))+((x3927*x3929)));
evalcond[5]=(((r12*x3926))+((sj12*x3928))+(((-1.0)*x3930*x3934))+((r10*x3937))+((sj12*x3931)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x3938 = IKatan2WithCheck(IkReal(((((-1.0)*gconst97*r21*sj12))+((gconst98*r20*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3938.valid){
continue;
}
CheckValue<IkReal> x3939=IKPowWithIntegerCheck(IKsign((((gconst98*r11))+((gconst97*r10)))),-1);
if(!x3939.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x3938.value)+(((1.5707963267949)*(x3939.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x3940=IKcos(j16);
IkReal x3941=IKsin(j16);
IkReal x3942=(gconst97*r20);
IkReal x3943=(gconst98*r00);
IkReal x3944=(gconst97*r11);
IkReal x3945=(gconst98*r21);
IkReal x3946=(gconst97*r21);
IkReal x3947=((1.0)*gconst97*r01);
IkReal x3948=((1.0)*x3941);
IkReal x3949=(gconst98*x3940);
IkReal x3950=((1.0)*x3940);
IkReal x3951=(gconst98*x3941);
evalcond[0]=((((-1.0)*x3946*x3950))+((r20*x3949))+(((-1.0)*r22*x3948)));
evalcond[1]=(cj12+(((-1.0)*r12*x3948))+(((-1.0)*x3944*x3950))+((r10*x3949)));
evalcond[2]=(((x3940*x3943))+(((-1.0)*r02*x3948))+(((-1.0)*sj12))+(((-1.0)*x3940*x3947)));
evalcond[3]=(((r22*x3940))+(((-1.0)*cj13*sj14))+(((-1.0)*x3946*x3948))+((r20*x3951))+(((-1.0)*cj14*sj13)));
evalcond[4]=(((x3941*x3943))+(((-1.0)*x3941*x3947))+((cj12*x3945))+((cj12*x3942))+((r02*x3940)));
evalcond[5]=(((sj12*x3945))+((sj12*x3942))+((r12*x3940))+((r10*x3951))+(((-1.0)*x3944*x3948)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x3952 = IKatan2WithCheck(IkReal((((cj12*gconst98*r20))+(((-1.0)*cj12*gconst97*r21)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3952.valid){
continue;
}
CheckValue<IkReal> x3953=IKPowWithIntegerCheck(IKsign((((gconst98*r01))+((gconst97*r00)))),-1);
if(!x3953.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x3952.value)+(((1.5707963267949)*(x3953.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x3954=IKcos(j16);
IkReal x3955=IKsin(j16);
IkReal x3956=(gconst97*r20);
IkReal x3957=(gconst98*r00);
IkReal x3958=(gconst97*r11);
IkReal x3959=(gconst98*r21);
IkReal x3960=(gconst97*r21);
IkReal x3961=((1.0)*gconst97*r01);
IkReal x3962=((1.0)*x3955);
IkReal x3963=(gconst98*x3954);
IkReal x3964=((1.0)*x3954);
IkReal x3965=(gconst98*x3955);
evalcond[0]=((((-1.0)*x3960*x3964))+(((-1.0)*r22*x3962))+((r20*x3963)));
evalcond[1]=(((r10*x3963))+cj12+(((-1.0)*x3958*x3964))+(((-1.0)*r12*x3962)));
evalcond[2]=((((-1.0)*r02*x3962))+(((-1.0)*x3954*x3961))+(((-1.0)*sj12))+((x3954*x3957)));
evalcond[3]=((((-1.0)*cj13*sj14))+(((-1.0)*x3960*x3962))+(((-1.0)*cj14*sj13))+((r20*x3965))+((r22*x3954)));
evalcond[4]=((((-1.0)*x3955*x3961))+((cj12*x3959))+((cj12*x3956))+((r02*x3954))+((x3955*x3957)));
evalcond[5]=(((r10*x3965))+(((-1.0)*x3958*x3962))+((sj12*x3956))+((sj12*x3959))+((r12*x3954)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3967 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3967)==0){
continue;
}
IkReal x3966=pow(x3967,-0.5);
CheckValue<IkReal> x3968 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3968.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x3968.value))));
IkReal gconst100=((1.0)*r21*x3966);
IkReal gconst101=((-1.0)*r20*x3966);
CheckValue<IkReal> x3969 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3969.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j17+(x3969.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x3972 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3972.valid){
continue;
}
IkReal x3970=((1.0)*(x3972.value));
IkReal x3971=x3966;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
sj17=gconst100;
cj17=gconst101;
j17=((3.14159265)+(((-1.0)*x3970)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3970)));
IkReal gconst100=((1.0)*r21*x3971);
IkReal gconst101=((-1.0)*r20*x3971);
IkReal x3973=r22*r22;
IkReal x3974=((1.0)*x3973);
CheckValue<IkReal> x3978=IKPowWithIntegerCheck(((-1.0)+x3973),-1);
if(!x3978.valid){
continue;
}
IkReal x3975=x3978.value;
if((((1.0)+(((-1.0)*x3974)))) < -0.00001)
continue;
IkReal x3976=IKsqrt(((1.0)+(((-1.0)*x3974))));
IkReal x3977=(cj12*x3975*x3976);
j16eval[0]=((IKabs((x3977+(((-1.0)*x3974*x3977)))))+(IKabs((cj12*r22))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x3981 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3981.valid){
continue;
}
IkReal x3979=((1.0)*(x3981.value));
IkReal x3980=x3966;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
sj17=gconst100;
cj17=gconst101;
j17=((3.14159265)+(((-1.0)*x3979)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3979)));
IkReal gconst100=((1.0)*r21*x3980);
IkReal gconst101=((-1.0)*r20*x3980);
IkReal x3982=r22*r22;
IkReal x3983=((1.0)*x3982);
CheckValue<IkReal> x3987=IKPowWithIntegerCheck(((-1.0)+x3982),-1);
if(!x3987.valid){
continue;
}
IkReal x3984=x3987.value;
if((((1.0)+(((-1.0)*x3983)))) < -0.00001)
continue;
IkReal x3985=IKsqrt(((1.0)+(((-1.0)*x3983))));
IkReal x3986=(sj12*x3984*x3985);
j16eval[0]=((IKabs((r22*sj12)))+(IKabs(((((-1.0)*x3983*x3986))+x3986))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
CheckValue<IkReal> x3990 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3990.valid){
continue;
}
IkReal x3988=((1.0)*(x3990.value));
IkReal x3989=x3966;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
sj17=gconst100;
cj17=gconst101;
j17=((3.14159265)+(((-1.0)*x3988)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3988)));
IkReal gconst100=((1.0)*r21*x3989);
IkReal gconst101=((-1.0)*r20*x3989);
IkReal x3991=r22*r22;
IkReal x3992=(cj12*r02);
IkReal x3993=(r12*sj12);
CheckValue<IkReal> x3997=IKPowWithIntegerCheck(((-1.0)+x3991),-1);
if(!x3997.valid){
continue;
}
IkReal x3994=x3997.value;
if((((1.0)+(((-1.0)*x3991)))) < -0.00001)
continue;
IkReal x3995=IKsqrt(((1.0)+(((-1.0)*x3991))));
IkReal x3996=(r22*x3994*x3995);
j16eval[0]=0;
j16eval[1]=0;
j16eval[2]=((IKabs((((x3993*x3996))+((x3992*x3996)))))+(IKabs(((((-1.0)*x3993))+(((-1.0)*x3992))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x3998=((1.0)*sj12);
IkReal x3999=((1.0)*cj12);
CheckValue<IkReal> x4000=IKPowWithIntegerCheck(IKsign((((gconst100*r20))+((gconst101*r21)))),-1);
if(!x4000.valid){
continue;
}
CheckValue<IkReal> x4001 = IKatan2WithCheck(IkReal((((cj12*gconst100*r01))+(((-1.0)*gconst101*r00*x3999))+(((-1.0)*gconst101*r10*x3998))+((gconst100*r11*sj12)))),IkReal(((((-1.0)*r02*x3999))+(((-1.0)*r12*x3998)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4001.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4000.value)))+(x4001.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x4002=IKcos(j16);
IkReal x4003=IKsin(j16);
IkReal x4004=((1.0)*gconst100);
IkReal x4005=(gconst101*r10);
IkReal x4006=(gconst101*r21);
IkReal x4007=(gconst100*r20);
IkReal x4008=(gconst101*x4002);
IkReal x4009=((1.0)*x4003);
IkReal x4010=(gconst101*x4003);
evalcond[0]=((((-1.0)*r22*x4009))+(((-1.0)*r21*x4002*x4004))+((r20*x4008)));
evalcond[1]=(cj12+(((-1.0)*r12*x4009))+(((-1.0)*r11*x4002*x4004))+((x4002*x4005)));
evalcond[2]=((((-1.0)*r02*x4009))+(((-1.0)*r01*x4002*x4004))+((r00*x4008))+(((-1.0)*sj12)));
evalcond[3]=((((-1.0)*cj13*sj14))+((r20*x4010))+((r22*x4002))+(((-1.0)*r21*x4003*x4004))+(((-1.0)*cj14*sj13)));
evalcond[4]=((((-1.0)*r01*x4003*x4004))+((r00*x4010))+((r02*x4002))+((cj12*x4007))+((cj12*x4006)));
evalcond[5]=((((-1.0)*r11*x4003*x4004))+((r12*x4002))+((sj12*x4007))+((sj12*x4006))+((x4003*x4005)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x4011=IKPowWithIntegerCheck(IKsign((((gconst100*r10))+((gconst101*r11)))),-1);
if(!x4011.valid){
continue;
}
CheckValue<IkReal> x4012 = IKatan2WithCheck(IkReal(((((-1.0)*gconst100*r21*sj12))+((gconst101*r20*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4012.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4011.value)))+(x4012.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x4013=IKcos(j16);
IkReal x4014=IKsin(j16);
IkReal x4015=((1.0)*gconst100);
IkReal x4016=(gconst101*r10);
IkReal x4017=(gconst101*r21);
IkReal x4018=(gconst100*r20);
IkReal x4019=(gconst101*x4013);
IkReal x4020=((1.0)*x4014);
IkReal x4021=(gconst101*x4014);
evalcond[0]=((((-1.0)*r22*x4020))+(((-1.0)*r21*x4013*x4015))+((r20*x4019)));
evalcond[1]=((((-1.0)*r12*x4020))+((x4013*x4016))+cj12+(((-1.0)*r11*x4013*x4015)));
evalcond[2]=((((-1.0)*r02*x4020))+((r00*x4019))+(((-1.0)*r01*x4013*x4015))+(((-1.0)*sj12)));
evalcond[3]=((((-1.0)*cj13*sj14))+((r20*x4021))+(((-1.0)*r21*x4014*x4015))+((r22*x4013))+(((-1.0)*cj14*sj13)));
evalcond[4]=(((r02*x4013))+((cj12*x4018))+((cj12*x4017))+((r00*x4021))+(((-1.0)*r01*x4014*x4015)));
evalcond[5]=((((-1.0)*r11*x4014*x4015))+((sj12*x4017))+((sj12*x4018))+((r12*x4013))+((x4014*x4016)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x4022=IKPowWithIntegerCheck(IKsign((((gconst100*r00))+((gconst101*r01)))),-1);
if(!x4022.valid){
continue;
}
CheckValue<IkReal> x4023 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*gconst100*r21))+((cj12*gconst101*r20)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4023.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4022.value)))+(x4023.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x4024=IKcos(j16);
IkReal x4025=IKsin(j16);
IkReal x4026=((1.0)*gconst100);
IkReal x4027=(gconst101*r10);
IkReal x4028=(gconst101*r21);
IkReal x4029=(gconst100*r20);
IkReal x4030=(gconst101*x4024);
IkReal x4031=((1.0)*x4025);
IkReal x4032=(gconst101*x4025);
evalcond[0]=((((-1.0)*r22*x4031))+((r20*x4030))+(((-1.0)*r21*x4024*x4026)));
evalcond[1]=(cj12+(((-1.0)*r12*x4031))+((x4024*x4027))+(((-1.0)*r11*x4024*x4026)));
evalcond[2]=(((r00*x4030))+(((-1.0)*sj12))+(((-1.0)*r02*x4031))+(((-1.0)*r01*x4024*x4026)));
evalcond[3]=((((-1.0)*cj13*sj14))+((r20*x4032))+(((-1.0)*r21*x4025*x4026))+((r22*x4024))+(((-1.0)*cj14*sj13)));
evalcond[4]=(((cj12*x4028))+((cj12*x4029))+((r00*x4032))+((r02*x4024))+(((-1.0)*r01*x4025*x4026)));
evalcond[5]=(((sj12*x4029))+((sj12*x4028))+((x4025*x4027))+((r12*x4024))+(((-1.0)*r11*x4025*x4026)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4034 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4034)==0){
continue;
}
IkReal x4033=pow(x4034,-0.5);
CheckValue<IkReal> x4035 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4035.valid){
continue;
}
IkReal gconst102=((-1.0)*(x4035.value));
IkReal gconst103=((-1.0)*r11*x4033);
IkReal gconst104=(r10*x4033);
CheckValue<IkReal> x4036 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4036.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4036.value)+j17)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
CheckValue<IkReal> x4039 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4039.valid){
continue;
}
IkReal x4037=((-1.0)*(x4039.value));
IkReal x4038=x4033;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
sj17=gconst103;
cj17=gconst104;
j17=x4037;
IkReal gconst102=x4037;
IkReal gconst103=((-1.0)*r11*x4038);
IkReal gconst104=(r10*x4038);
j16eval[0]=cj12;
j16eval[1]=r22;
j16eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x4040=((1.0)*gconst104);
CheckValue<IkReal> x4041=IKPowWithIntegerCheck(IKsign((((gconst104*r21))+((gconst103*r20)))),-1);
if(!x4041.valid){
continue;
}
CheckValue<IkReal> x4042 = IKatan2WithCheck(IkReal((((gconst103*r11*sj12))+(((-1.0)*cj12*r00*x4040))+((cj12*gconst103*r01))+(((-1.0)*r10*sj12*x4040)))),IkReal(((((-1.0)*cj12*r02))+(((-1.0)*r12*sj12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4042.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4041.value)))+(x4042.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x4043=IKcos(j16);
IkReal x4044=IKsin(j16);
IkReal x4045=(gconst103*r20);
IkReal x4046=(gconst104*r20);
IkReal x4047=(gconst104*r00);
IkReal x4048=(gconst103*r11);
IkReal x4049=(gconst104*r10);
IkReal x4050=(gconst103*r21);
IkReal x4051=(gconst103*r01);
IkReal x4052=(gconst104*r21);
IkReal x4053=((1.0)*x4044);
IkReal x4054=((1.0)*x4043);
evalcond[0]=((((-1.0)*x4050*x4054))+((x4043*x4046))+(((-1.0)*r22*x4053)));
evalcond[1]=((((-1.0)*r12*x4053))+((x4043*x4049))+cj12+(((-1.0)*x4048*x4054)));
evalcond[2]=((((-1.0)*x4051*x4054))+((x4043*x4047))+(((-1.0)*sj12))+(((-1.0)*r02*x4053)));
evalcond[3]=(((r22*x4043))+(((-1.0)*x4050*x4053))+(((-1.0)*cj13*sj14))+((x4044*x4046))+(((-1.0)*cj14*sj13)));
evalcond[4]=((((-1.0)*x4051*x4053))+((r02*x4043))+((cj12*x4052))+((cj12*x4045))+((x4044*x4047)));
evalcond[5]=(((r12*x4043))+((x4044*x4049))+((sj12*x4052))+((sj12*x4045))+(((-1.0)*x4048*x4053)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x4055=IKPowWithIntegerCheck(IKsign((((gconst103*r00))+((gconst104*r01)))),-1);
if(!x4055.valid){
continue;
}
CheckValue<IkReal> x4056 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*gconst103*r21))+((cj12*gconst104*r20)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4056.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4055.value)))+(x4056.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x4057=IKcos(j16);
IkReal x4058=IKsin(j16);
IkReal x4059=(gconst103*r20);
IkReal x4060=(gconst104*r20);
IkReal x4061=(gconst104*r00);
IkReal x4062=(gconst103*r11);
IkReal x4063=(gconst104*r10);
IkReal x4064=(gconst103*r21);
IkReal x4065=(gconst103*r01);
IkReal x4066=(gconst104*r21);
IkReal x4067=((1.0)*x4058);
IkReal x4068=((1.0)*x4057);
evalcond[0]=((((-1.0)*x4064*x4068))+((x4057*x4060))+(((-1.0)*r22*x4067)));
evalcond[1]=((((-1.0)*r12*x4067))+cj12+(((-1.0)*x4062*x4068))+((x4057*x4063)));
evalcond[2]=((((-1.0)*x4065*x4068))+(((-1.0)*sj12))+((x4057*x4061))+(((-1.0)*r02*x4067)));
evalcond[3]=((((-1.0)*cj13*sj14))+(((-1.0)*x4064*x4067))+(((-1.0)*cj14*sj13))+((r22*x4057))+((x4058*x4060)));
evalcond[4]=((((-1.0)*x4065*x4067))+((r02*x4057))+((cj12*x4059))+((cj12*x4066))+((x4058*x4061)));
evalcond[5]=(((r12*x4057))+(((-1.0)*x4062*x4067))+((sj12*x4066))+((sj12*x4059))+((x4058*x4063)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4070 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4070)==0){
continue;
}
IkReal x4069=pow(x4070,-0.5);
CheckValue<IkReal> x4071 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4071.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x4071.value))));
IkReal gconst106=((1.0)*r11*x4069);
IkReal gconst107=((-1.0)*r10*x4069);
CheckValue<IkReal> x4072 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4072.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4072.value)+j17)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
CheckValue<IkReal> x4075 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4075.valid){
continue;
}
IkReal x4073=((1.0)*(x4075.value));
IkReal x4074=x4069;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
sj17=gconst106;
cj17=gconst107;
j17=((3.14159265)+(((-1.0)*x4073)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4073)));
IkReal gconst106=((1.0)*r11*x4074);
IkReal gconst107=((-1.0)*r10*x4074);
j16eval[0]=cj12;
j16eval[1]=r22;
j16eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[5];
CheckValue<IkReal> x4078 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4078.valid){
continue;
}
IkReal x4076=((1.0)*(x4078.value));
IkReal x4077=x4069;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
sj17=gconst106;
cj17=gconst107;
j17=((3.14159265)+(((-1.0)*x4076)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4076)));
IkReal gconst106=((1.0)*r11*x4077);
IkReal gconst107=((-1.0)*r10*x4077);
j16eval[0]=0;
j16eval[1]=0;
j16eval[2]=r22;
j16eval[3]=sj12;
j16eval[4]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  || IKabs(j16eval[3]) < 0.0000010000000000  || IKabs(j16eval[4]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x4081 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4081.valid){
continue;
}
IkReal x4079=((1.0)*(x4081.value));
IkReal x4080=x4069;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
sj17=gconst106;
cj17=gconst107;
j17=((3.14159265)+(((-1.0)*x4079)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4079)));
IkReal gconst106=((1.0)*r11*x4080);
IkReal gconst107=((-1.0)*r10*x4080);
IkReal x4082=r12*r12;
IkReal x4083=(cj12*r02);
IkReal x4084=x4069;
IkReal x4085=(sj12*x4084);
j16eval[0]=((IKabs((((x4082*x4085))+(((-1.0)*x4085))+((r12*x4083*x4084)))))+(IKabs(((((-1.0)*x4083))+(((-1.0)*r12*sj12))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x4086=((1.0)*gconst107);
CheckValue<IkReal> x4087=IKPowWithIntegerCheck(IKsign((((gconst107*r21))+((gconst106*r20)))),-1);
if(!x4087.valid){
continue;
}
CheckValue<IkReal> x4088 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*r00*x4086))+((gconst106*r11*sj12))+((cj12*gconst106*r01))+(((-1.0)*r10*sj12*x4086)))),IkReal(((((-1.0)*cj12*r02))+(((-1.0)*r12*sj12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4088.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4087.value)))+(x4088.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x4089=IKcos(j16);
IkReal x4090=IKsin(j16);
IkReal x4091=(gconst106*r20);
IkReal x4092=((1.0)*gconst106);
IkReal x4093=(gconst107*r00);
IkReal x4094=(gconst107*r21);
IkReal x4095=((1.0)*x4090);
IkReal x4096=(gconst107*x4090);
IkReal x4097=(gconst107*x4089);
evalcond[0]=(((r20*x4097))+(((-1.0)*r22*x4095))+(((-1.0)*r21*x4089*x4092)));
evalcond[1]=((((-1.0)*r12*x4095))+(((-1.0)*r11*x4089*x4092))+((r10*x4097))+cj12);
evalcond[2]=((((-1.0)*r01*x4089*x4092))+((x4089*x4093))+(((-1.0)*sj12))+(((-1.0)*r02*x4095)));
evalcond[3]=(((r20*x4096))+(((-1.0)*cj13*sj14))+(((-1.0)*r21*x4090*x4092))+((r22*x4089))+(((-1.0)*cj14*sj13)));
evalcond[4]=(((cj12*x4094))+((cj12*x4091))+(((-1.0)*r01*x4090*x4092))+((x4090*x4093))+((r02*x4089)));
evalcond[5]=((((-1.0)*r11*x4090*x4092))+((r10*x4096))+((r12*x4089))+((sj12*x4094))+((sj12*x4091)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x4098=IKPowWithIntegerCheck(IKsign((((gconst107*r11))+((gconst106*r10)))),-1);
if(!x4098.valid){
continue;
}
CheckValue<IkReal> x4099 = IKatan2WithCheck(IkReal(((((-1.0)*gconst106*r21*sj12))+((gconst107*r20*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4099.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4098.value)))+(x4099.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x4100=IKcos(j16);
IkReal x4101=IKsin(j16);
IkReal x4102=(gconst106*r20);
IkReal x4103=((1.0)*gconst106);
IkReal x4104=(gconst107*r00);
IkReal x4105=(gconst107*r21);
IkReal x4106=((1.0)*x4101);
IkReal x4107=(gconst107*x4101);
IkReal x4108=(gconst107*x4100);
evalcond[0]=((((-1.0)*r22*x4106))+(((-1.0)*r21*x4100*x4103))+((r20*x4108)));
evalcond[1]=((((-1.0)*r11*x4100*x4103))+(((-1.0)*r12*x4106))+cj12+((r10*x4108)));
evalcond[2]=((((-1.0)*r01*x4100*x4103))+((x4100*x4104))+(((-1.0)*sj12))+(((-1.0)*r02*x4106)));
evalcond[3]=(((r22*x4100))+(((-1.0)*cj13*sj14))+((r20*x4107))+(((-1.0)*r21*x4101*x4103))+(((-1.0)*cj14*sj13)));
evalcond[4]=(((cj12*x4105))+((cj12*x4102))+(((-1.0)*r01*x4101*x4103))+((x4101*x4104))+((r02*x4100)));
evalcond[5]=((((-1.0)*r11*x4101*x4103))+((r12*x4100))+((sj12*x4105))+((sj12*x4102))+((r10*x4107)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x4109=IKPowWithIntegerCheck(IKsign((((gconst107*r01))+((gconst106*r00)))),-1);
if(!x4109.valid){
continue;
}
CheckValue<IkReal> x4110 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*gconst106*r21))+((cj12*gconst107*r20)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4110.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4109.value)))+(x4110.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x4111=IKcos(j16);
IkReal x4112=IKsin(j16);
IkReal x4113=(gconst106*r20);
IkReal x4114=((1.0)*gconst106);
IkReal x4115=(gconst107*r00);
IkReal x4116=(gconst107*r21);
IkReal x4117=((1.0)*x4112);
IkReal x4118=(gconst107*x4112);
IkReal x4119=(gconst107*x4111);
evalcond[0]=((((-1.0)*r22*x4117))+((r20*x4119))+(((-1.0)*r21*x4111*x4114)));
evalcond[1]=((((-1.0)*r12*x4117))+(((-1.0)*r11*x4111*x4114))+cj12+((r10*x4119)));
evalcond[2]=((((-1.0)*r01*x4111*x4114))+(((-1.0)*sj12))+((x4111*x4115))+(((-1.0)*r02*x4117)));
evalcond[3]=(((r20*x4118))+(((-1.0)*cj13*sj14))+((r22*x4111))+(((-1.0)*cj14*sj13))+(((-1.0)*r21*x4112*x4114)));
evalcond[4]=((((-1.0)*r01*x4112*x4114))+((x4112*x4115))+((r02*x4111))+((cj12*x4113))+((cj12*x4116)));
evalcond[5]=(((r12*x4111))+(((-1.0)*r11*x4112*x4114))+((sj12*x4113))+((sj12*x4116))+((r10*x4118)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j12))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
sj12=0;
cj12=1.0;
j12=0;
IkReal x4120=(((r00*sj17))+((cj17*r01)));
j16eval[0]=x4120;
j16eval[1]=IKsign(x4120);
j16eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*r21*sj17))+((cj17*r20))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
sj12=0;
cj12=1.0;
j12=0;
IkReal x4121=((1.0)*sj17);
IkReal x4122=((((-1.0)*cj17*r21))+(((-1.0)*r20*x4121)));
j16eval[0]=x4122;
j16eval[1]=IKsign(x4122);
j16eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x4121))+((cj17*r00))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
sj12=0;
cj12=1.0;
j12=0;
IkReal x4123=cj17*cj17;
IkReal x4124=r11*r11;
IkReal x4125=(r11*sj17);
IkReal x4126=(cj17*r10);
IkReal x4127=((r12*r12)+((x4123*(r10*r10)))+(((-1.0)*x4123*x4124))+x4124+(((-2.0)*x4125*x4126)));
j16eval[0]=x4127;
j16eval[1]=((IKabs((x4125+(((-1.0)*x4126)))))+(IKabs(r12)));
j16eval[2]=IKsign(x4127);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x4128=cj17*cj17;
IkReal x4129=r11*r11;
IkReal x4130=(r11*sj17);
IkReal x4131=(cj17*r10);
CheckValue<IkReal> x4132 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x4131))+x4130)),IKFAST_ATAN2_MAGTHRESH);
if(!x4132.valid){
continue;
}
CheckValue<IkReal> x4133=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x4128*x4129))+x4129+((x4128*(r10*r10)))+(((-2.0)*x4130*x4131)))),-1);
if(!x4133.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x4132.value)+(((1.5707963267949)*(x4133.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x4134=IKsin(j16);
IkReal x4135=IKcos(j16);
IkReal x4136=((1.0)*sj17);
IkReal x4137=(cj17*x4134);
IkReal x4138=(cj17*x4135);
IkReal x4139=((1.0)*x4134);
evalcond[0]=(((r10*x4137))+((r12*x4135))+(((-1.0)*r11*x4134*x4136)));
evalcond[1]=((((-1.0)*r21*x4135*x4136))+((r20*x4138))+(((-1.0)*r22*x4139)));
evalcond[2]=(((r00*x4138))+(((-1.0)*r02*x4139))+(((-1.0)*r01*x4135*x4136)));
evalcond[3]=((1.0)+((r10*x4138))+(((-1.0)*r12*x4139))+(((-1.0)*r11*x4135*x4136)));
evalcond[4]=(((r00*x4137))+((r20*sj17))+(((-1.0)*r01*x4134*x4136))+((cj17*r21))+((r02*x4135)));
evalcond[5]=(((r22*x4135))+(((-1.0)*cj13*sj14))+(((-1.0)*r21*x4134*x4136))+((r20*x4137))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x4140=((1.0)*sj17);
CheckValue<IkReal> x4141 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x4140))+((cj17*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x4141.valid){
continue;
}
CheckValue<IkReal> x4142=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj17*r21))+(((-1.0)*r20*x4140)))),-1);
if(!x4142.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x4141.value)+(((1.5707963267949)*(x4142.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x4143=IKsin(j16);
IkReal x4144=IKcos(j16);
IkReal x4145=((1.0)*sj17);
IkReal x4146=(cj17*x4143);
IkReal x4147=(cj17*x4144);
IkReal x4148=((1.0)*x4143);
evalcond[0]=(((r10*x4146))+((r12*x4144))+(((-1.0)*r11*x4143*x4145)));
evalcond[1]=((((-1.0)*r21*x4144*x4145))+((r20*x4147))+(((-1.0)*r22*x4148)));
evalcond[2]=((((-1.0)*r01*x4144*x4145))+(((-1.0)*r02*x4148))+((r00*x4147)));
evalcond[3]=((1.0)+(((-1.0)*r11*x4144*x4145))+((r10*x4147))+(((-1.0)*r12*x4148)));
evalcond[4]=(((r02*x4144))+((r00*x4146))+((r20*sj17))+((cj17*r21))+(((-1.0)*r01*x4143*x4145)));
evalcond[5]=((((-1.0)*r21*x4143*x4145))+(((-1.0)*cj13*sj14))+((r22*x4144))+((r20*x4146))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x4149 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj17))+((cj17*r20)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x4149.valid){
continue;
}
CheckValue<IkReal> x4150=IKPowWithIntegerCheck(IKsign((((r00*sj17))+((cj17*r01)))),-1);
if(!x4150.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x4149.value)+(((1.5707963267949)*(x4150.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x4151=IKsin(j16);
IkReal x4152=IKcos(j16);
IkReal x4153=((1.0)*sj17);
IkReal x4154=(cj17*x4151);
IkReal x4155=(cj17*x4152);
IkReal x4156=((1.0)*x4151);
evalcond[0]=(((r10*x4154))+((r12*x4152))+(((-1.0)*r11*x4151*x4153)));
evalcond[1]=((((-1.0)*r21*x4152*x4153))+((r20*x4155))+(((-1.0)*r22*x4156)));
evalcond[2]=(((r00*x4155))+(((-1.0)*r02*x4156))+(((-1.0)*r01*x4152*x4153)));
evalcond[3]=((1.0)+((r10*x4155))+(((-1.0)*r11*x4152*x4153))+(((-1.0)*r12*x4156)));
evalcond[4]=(((r02*x4152))+(((-1.0)*r01*x4151*x4153))+((r00*x4154))+((r20*sj17))+((cj17*r21)));
evalcond[5]=((((-1.0)*cj13*sj14))+((r22*x4152))+((r20*x4154))+(((-1.0)*cj14*sj13))+(((-1.0)*r21*x4151*x4153)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
IkReal x4157=(((r20*sj17))+((cj17*r21)));
j16eval[0]=x4157;
j16eval[1]=IKsign(x4157);
j16eval[2]=((IKabs(r02))+(IKabs((((cj17*r00))+(((-1.0)*r01*sj17))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
IkReal x4158=((1.0)*sj17);
IkReal x4159=((((-1.0)*cj17*r01))+(((-1.0)*r00*x4158)));
j16eval[0]=x4159;
j16eval[1]=IKsign(x4159);
j16eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*r21*x4158))+((cj17*r20))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
IkReal x4160=cj17*cj17;
IkReal x4161=r11*r11;
IkReal x4162=(r11*sj17);
IkReal x4163=(cj17*r10);
IkReal x4164=((((-1.0)*x4161))+(((-1.0)*x4160*(r10*r10)))+((x4160*x4161))+(((-1.0)*(r12*r12)))+(((2.0)*x4162*x4163)));
j16eval[0]=x4164;
j16eval[1]=((IKabs(((((-1.0)*x4163))+x4162)))+(IKabs(r12)));
j16eval[2]=IKsign(x4164);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x4165=cj17*cj17;
IkReal x4166=r11*r11;
IkReal x4167=(r11*sj17);
IkReal x4168=(cj17*r10);
CheckValue<IkReal> x4169 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x4168))+x4167)),IKFAST_ATAN2_MAGTHRESH);
if(!x4169.valid){
continue;
}
CheckValue<IkReal> x4170=IKPowWithIntegerCheck(IKsign((((x4165*x4166))+(((-1.0)*x4166))+(((-1.0)*(r12*r12)))+(((2.0)*x4167*x4168))+(((-1.0)*x4165*(r10*r10))))),-1);
if(!x4170.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x4169.value)+(((1.5707963267949)*(x4170.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x4171=IKsin(j16);
IkReal x4172=IKcos(j16);
IkReal x4173=((1.0)*r21);
IkReal x4174=((1.0)*r01);
IkReal x4175=(cj17*x4171);
IkReal x4176=(cj17*x4172);
IkReal x4177=((1.0)*r11*sj17);
IkReal x4178=(sj17*x4171);
IkReal x4179=((1.0)*x4171);
IkReal x4180=(sj17*x4172);
evalcond[0]=((((-1.0)*x4171*x4177))+((r12*x4172))+((r10*x4175)));
evalcond[1]=((((-1.0)*r22*x4179))+(((-1.0)*x4173*x4180))+((r20*x4176)));
evalcond[2]=((((-1.0)*x4174*x4180))+((r00*x4176))+(((-1.0)*r02*x4179)));
evalcond[3]=((-1.0)+(((-1.0)*x4172*x4177))+((r10*x4176))+(((-1.0)*r12*x4179)));
evalcond[4]=(((r22*x4172))+(((-1.0)*cj13*sj14))+(((-1.0)*x4173*x4178))+(((-1.0)*cj14*sj13))+((r20*x4175)));
evalcond[5]=((((-1.0)*x4174*x4178))+(((-1.0)*r20*sj17))+((r00*x4175))+(((-1.0)*cj17*x4173))+((r02*x4172)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x4181=((1.0)*sj17);
CheckValue<IkReal> x4182 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x4181))+((cj17*r20)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x4182.valid){
continue;
}
CheckValue<IkReal> x4183=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj17*r01))+(((-1.0)*r00*x4181)))),-1);
if(!x4183.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x4182.value)+(((1.5707963267949)*(x4183.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x4184=IKsin(j16);
IkReal x4185=IKcos(j16);
IkReal x4186=((1.0)*r21);
IkReal x4187=((1.0)*r01);
IkReal x4188=(cj17*x4184);
IkReal x4189=(cj17*x4185);
IkReal x4190=((1.0)*r11*sj17);
IkReal x4191=(sj17*x4184);
IkReal x4192=((1.0)*x4184);
IkReal x4193=(sj17*x4185);
evalcond[0]=(((r12*x4185))+((r10*x4188))+(((-1.0)*x4184*x4190)));
evalcond[1]=(((r20*x4189))+(((-1.0)*x4186*x4193))+(((-1.0)*r22*x4192)));
evalcond[2]=((((-1.0)*x4187*x4193))+(((-1.0)*r02*x4192))+((r00*x4189)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x4192))+((r10*x4189))+(((-1.0)*x4185*x4190)));
evalcond[4]=(((r20*x4188))+(((-1.0)*cj13*sj14))+((r22*x4185))+(((-1.0)*x4186*x4191))+(((-1.0)*cj14*sj13)));
evalcond[5]=(((r02*x4185))+(((-1.0)*x4187*x4191))+(((-1.0)*r20*sj17))+((r00*x4188))+(((-1.0)*cj17*x4186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x4194 = IKatan2WithCheck(IkReal((((cj17*r00))+(((-1.0)*r01*sj17)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x4194.valid){
continue;
}
CheckValue<IkReal> x4195=IKPowWithIntegerCheck(IKsign((((r20*sj17))+((cj17*r21)))),-1);
if(!x4195.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x4194.value)+(((1.5707963267949)*(x4195.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x4196=IKsin(j16);
IkReal x4197=IKcos(j16);
IkReal x4198=((1.0)*r21);
IkReal x4199=((1.0)*r01);
IkReal x4200=(cj17*x4196);
IkReal x4201=(cj17*x4197);
IkReal x4202=((1.0)*r11*sj17);
IkReal x4203=(sj17*x4196);
IkReal x4204=((1.0)*x4196);
IkReal x4205=(sj17*x4197);
evalcond[0]=(((r12*x4197))+((r10*x4200))+(((-1.0)*x4196*x4202)));
evalcond[1]=((((-1.0)*r22*x4204))+(((-1.0)*x4198*x4205))+((r20*x4201)));
evalcond[2]=((((-1.0)*r02*x4204))+((r00*x4201))+(((-1.0)*x4199*x4205)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x4204))+(((-1.0)*x4197*x4202))+((r10*x4201)));
evalcond[4]=((((-1.0)*cj13*sj14))+((r22*x4197))+(((-1.0)*x4198*x4203))+((r20*x4200))+(((-1.0)*cj14*sj13)));
evalcond[5]=(((r02*x4197))+((r00*x4200))+(((-1.0)*r20*sj17))+(((-1.0)*x4199*x4203))+(((-1.0)*cj17*x4198)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4207 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4207)==0){
continue;
}
IkReal x4206=pow(x4207,-0.5);
CheckValue<IkReal> x4208 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4208.valid){
continue;
}
IkReal gconst108=((-1.0)*(x4208.value));
IkReal gconst109=((-1.0)*r01*x4206);
IkReal gconst110=(r00*x4206);
CheckValue<IkReal> x4209 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4209.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4209.value)+j17)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
CheckValue<IkReal> x4212 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4212.valid){
continue;
}
IkReal x4210=((-1.0)*(x4212.value));
IkReal x4211=x4206;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
sj17=gconst109;
cj17=gconst110;
j17=x4210;
IkReal gconst108=x4210;
IkReal gconst109=((-1.0)*r01*x4211);
IkReal gconst110=(r00*x4211);
j16eval[0]=r22;
j16eval[1]=sj12;
j16eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x4213=((1.0)*gconst110);
CheckValue<IkReal> x4214 = IKatan2WithCheck(IkReal((((gconst109*r11*sj12))+(((-1.0)*r10*sj12*x4213))+((cj12*gconst109*r01))+(((-1.0)*cj12*r00*x4213)))),IkReal(((((-1.0)*cj12*r02))+(((-1.0)*r12*sj12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4214.valid){
continue;
}
CheckValue<IkReal> x4215=IKPowWithIntegerCheck(IKsign((((gconst109*r20))+((gconst110*r21)))),-1);
if(!x4215.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x4214.value)+(((1.5707963267949)*(x4215.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x4216=IKcos(j16);
IkReal x4217=IKsin(j16);
IkReal x4218=(gconst110*r20);
IkReal x4219=(gconst110*r21);
IkReal x4220=((1.0)*gconst109);
IkReal x4221=(gconst109*r20);
IkReal x4222=(gconst110*x4216);
IkReal x4223=((1.0)*x4217);
IkReal x4224=(gconst110*x4217);
evalcond[0]=((((-1.0)*r21*x4216*x4220))+(((-1.0)*r22*x4223))+((x4216*x4218)));
evalcond[1]=(((r10*x4222))+(((-1.0)*r12*x4223))+(((-1.0)*r11*x4216*x4220))+cj12);
evalcond[2]=(((r00*x4222))+(((-1.0)*r01*x4216*x4220))+(((-1.0)*r02*x4223))+(((-1.0)*sj12)));
evalcond[3]=(((r22*x4216))+(((-1.0)*cj13*sj14))+((x4217*x4218))+(((-1.0)*cj14*sj13))+(((-1.0)*r21*x4217*x4220)));
evalcond[4]=(((r00*x4224))+((r02*x4216))+(((-1.0)*r01*x4217*x4220))+((cj12*x4219))+((cj12*x4221)));
evalcond[5]=(((r12*x4216))+((sj12*x4219))+((r10*x4224))+((sj12*x4221))+(((-1.0)*r11*x4217*x4220)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x4225=IKPowWithIntegerCheck(IKsign((((gconst109*r10))+((gconst110*r11)))),-1);
if(!x4225.valid){
continue;
}
CheckValue<IkReal> x4226 = IKatan2WithCheck(IkReal((((gconst110*r20*sj12))+(((-1.0)*gconst109*r21*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4226.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4225.value)))+(x4226.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x4227=IKcos(j16);
IkReal x4228=IKsin(j16);
IkReal x4229=(gconst110*r20);
IkReal x4230=(gconst110*r21);
IkReal x4231=((1.0)*gconst109);
IkReal x4232=(gconst109*r20);
IkReal x4233=(gconst110*x4227);
IkReal x4234=((1.0)*x4228);
IkReal x4235=(gconst110*x4228);
evalcond[0]=(((x4227*x4229))+(((-1.0)*r22*x4234))+(((-1.0)*r21*x4227*x4231)));
evalcond[1]=(((r10*x4233))+(((-1.0)*r12*x4234))+(((-1.0)*r11*x4227*x4231))+cj12);
evalcond[2]=(((r00*x4233))+(((-1.0)*r01*x4227*x4231))+(((-1.0)*r02*x4234))+(((-1.0)*sj12)));
evalcond[3]=((((-1.0)*cj13*sj14))+((r22*x4227))+((x4228*x4229))+(((-1.0)*r21*x4228*x4231))+(((-1.0)*cj14*sj13)));
evalcond[4]=(((r00*x4235))+(((-1.0)*r01*x4228*x4231))+((r02*x4227))+((cj12*x4232))+((cj12*x4230)));
evalcond[5]=(((sj12*x4230))+((sj12*x4232))+((r10*x4235))+(((-1.0)*r11*x4228*x4231))+((r12*x4227)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4237 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4237)==0){
continue;
}
IkReal x4236=pow(x4237,-0.5);
CheckValue<IkReal> x4238 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4238.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x4238.value))));
IkReal gconst112=((1.0)*r01*x4236);
IkReal gconst113=((-1.0)*r00*x4236);
CheckValue<IkReal> x4239 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4239.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4239.value)+j17)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[5];
CheckValue<IkReal> x4242 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4242.valid){
continue;
}
IkReal x4240=((1.0)*(x4242.value));
IkReal x4241=x4236;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
sj17=gconst112;
cj17=gconst113;
j17=((3.14159265)+(((-1.0)*x4240)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4240)));
IkReal gconst112=((1.0)*r01*x4241);
IkReal gconst113=((-1.0)*r00*x4241);
j16eval[0]=0;
j16eval[1]=cj12;
j16eval[2]=r22;
j16eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j16eval[4]=0;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  || IKabs(j16eval[3]) < 0.0000010000000000  || IKabs(j16eval[4]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
CheckValue<IkReal> x4245 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4245.valid){
continue;
}
IkReal x4243=((1.0)*(x4245.value));
IkReal x4244=x4236;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
sj17=gconst112;
cj17=gconst113;
j17=((3.14159265)+(((-1.0)*x4243)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4243)));
IkReal gconst112=((1.0)*r01*x4244);
IkReal gconst113=((-1.0)*r00*x4244);
j16eval[0]=r22;
j16eval[1]=sj12;
j16eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x4248 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4248.valid){
continue;
}
IkReal x4246=((1.0)*(x4248.value));
IkReal x4247=x4236;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
sj17=gconst112;
cj17=gconst113;
j17=((3.14159265)+(((-1.0)*x4246)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4246)));
IkReal gconst112=((1.0)*r01*x4247);
IkReal gconst113=((-1.0)*r00*x4247);
IkReal x4249=r02*r02;
IkReal x4250=(r12*sj12);
IkReal x4251=x4236;
IkReal x4252=(cj12*x4251);
j16eval[0]=((IKabs((((x4249*x4252))+((r02*x4250*x4251))+(((-1.0)*x4252)))))+(IKabs(((((-1.0)*cj12*r02))+(((-1.0)*x4250))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x4253=((1.0)*gconst113);
CheckValue<IkReal> x4254 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*r00*x4253))+((gconst112*r11*sj12))+((cj12*gconst112*r01))+(((-1.0)*r10*sj12*x4253)))),IkReal(((((-1.0)*cj12*r02))+(((-1.0)*r12*sj12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4254.valid){
continue;
}
CheckValue<IkReal> x4255=IKPowWithIntegerCheck(IKsign((((gconst112*r20))+((gconst113*r21)))),-1);
if(!x4255.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x4254.value)+(((1.5707963267949)*(x4255.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x4256=IKcos(j16);
IkReal x4257=IKsin(j16);
IkReal x4258=(gconst112*r20);
IkReal x4259=(gconst113*r21);
IkReal x4260=((1.0)*gconst112*r11);
IkReal x4261=(gconst113*x4256);
IkReal x4262=(gconst113*x4257);
IkReal x4263=((1.0)*x4257);
IkReal x4264=(gconst112*x4263);
IkReal x4265=((1.0)*gconst112*x4256);
evalcond[0]=((((-1.0)*r21*x4265))+(((-1.0)*r22*x4263))+((r20*x4261)));
evalcond[1]=((((-1.0)*r12*x4263))+(((-1.0)*x4256*x4260))+cj12+((r10*x4261)));
evalcond[2]=((((-1.0)*r01*x4265))+(((-1.0)*r02*x4263))+(((-1.0)*sj12))+((r00*x4261)));
evalcond[3]=(((r22*x4256))+(((-1.0)*cj13*sj14))+(((-1.0)*r21*x4264))+((r20*x4262))+(((-1.0)*cj14*sj13)));
evalcond[4]=(((r02*x4256))+(((-1.0)*r01*x4264))+((cj12*x4258))+((cj12*x4259))+((r00*x4262)));
evalcond[5]=(((r12*x4256))+(((-1.0)*x4257*x4260))+((r10*x4262))+((sj12*x4258))+((sj12*x4259)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x4266 = IKatan2WithCheck(IkReal(((((-1.0)*gconst112*r21*sj12))+((gconst113*r20*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4266.valid){
continue;
}
CheckValue<IkReal> x4267=IKPowWithIntegerCheck(IKsign((((gconst113*r11))+((gconst112*r10)))),-1);
if(!x4267.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x4266.value)+(((1.5707963267949)*(x4267.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x4268=IKcos(j16);
IkReal x4269=IKsin(j16);
IkReal x4270=(gconst112*r20);
IkReal x4271=(gconst113*r21);
IkReal x4272=((1.0)*gconst112*r11);
IkReal x4273=(gconst113*x4268);
IkReal x4274=(gconst113*x4269);
IkReal x4275=((1.0)*x4269);
IkReal x4276=(gconst112*x4275);
IkReal x4277=((1.0)*gconst112*x4268);
evalcond[0]=((((-1.0)*r21*x4277))+(((-1.0)*r22*x4275))+((r20*x4273)));
evalcond[1]=((((-1.0)*r12*x4275))+cj12+(((-1.0)*x4268*x4272))+((r10*x4273)));
evalcond[2]=(((r00*x4273))+(((-1.0)*r01*x4277))+(((-1.0)*r02*x4275))+(((-1.0)*sj12)));
evalcond[3]=((((-1.0)*cj13*sj14))+(((-1.0)*r21*x4276))+((r20*x4274))+(((-1.0)*cj14*sj13))+((r22*x4268)));
evalcond[4]=(((r00*x4274))+((r02*x4268))+(((-1.0)*r01*x4276))+((cj12*x4270))+((cj12*x4271)));
evalcond[5]=(((r12*x4268))+(((-1.0)*x4269*x4272))+((r10*x4274))+((sj12*x4270))+((sj12*x4271)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x4278 = IKatan2WithCheck(IkReal((((cj12*gconst113*r20))+(((-1.0)*cj12*gconst112*r21)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4278.valid){
continue;
}
CheckValue<IkReal> x4279=IKPowWithIntegerCheck(IKsign((((gconst112*r00))+((gconst113*r01)))),-1);
if(!x4279.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x4278.value)+(((1.5707963267949)*(x4279.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x4280=IKcos(j16);
IkReal x4281=IKsin(j16);
IkReal x4282=(gconst112*r20);
IkReal x4283=(gconst113*r21);
IkReal x4284=((1.0)*gconst112*r11);
IkReal x4285=(gconst113*x4280);
IkReal x4286=(gconst113*x4281);
IkReal x4287=((1.0)*x4281);
IkReal x4288=(gconst112*x4287);
IkReal x4289=((1.0)*gconst112*x4280);
evalcond[0]=((((-1.0)*r21*x4289))+(((-1.0)*r22*x4287))+((r20*x4285)));
evalcond[1]=((((-1.0)*x4280*x4284))+(((-1.0)*r12*x4287))+cj12+((r10*x4285)));
evalcond[2]=((((-1.0)*r01*x4289))+(((-1.0)*r02*x4287))+(((-1.0)*sj12))+((r00*x4285)));
evalcond[3]=(((r22*x4280))+(((-1.0)*r21*x4288))+(((-1.0)*cj13*sj14))+((r20*x4286))+(((-1.0)*cj14*sj13)));
evalcond[4]=((((-1.0)*r01*x4288))+((r02*x4280))+((cj12*x4282))+((cj12*x4283))+((r00*x4286)));
evalcond[5]=(((r12*x4280))+((sj12*x4283))+((sj12*x4282))+((r10*x4286))+(((-1.0)*x4281*x4284)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
sj12=1.0;
cj12=0;
j12=1.5707963267949;
IkReal x4290=(((cj17*r11))+((r10*sj17)));
j16eval[0]=x4290;
j16eval[1]=IKsign(x4290);
j16eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*r21*sj17))+((cj17*r20))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
sj12=1.0;
cj12=0;
j12=1.5707963267949;
IkReal x4291=((1.0)*sj17);
IkReal x4292=((((-1.0)*cj17*r21))+(((-1.0)*r20*x4291)));
j16eval[0]=x4292;
j16eval[1]=IKsign(x4292);
j16eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*r11*x4291))+((cj17*r10))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
sj12=1.0;
cj12=0;
j12=1.5707963267949;
IkReal x4293=cj17*cj17;
IkReal x4294=r01*r01;
IkReal x4295=(r01*sj17);
IkReal x4296=(cj17*r00);
IkReal x4297=(((x4293*x4294))+(((-1.0)*x4293*(r00*r00)))+(((-1.0)*(r02*r02)))+(((-1.0)*x4294))+(((2.0)*x4295*x4296)));
j16eval[0]=x4297;
j16eval[1]=IKsign(x4297);
j16eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x4296))+x4295))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x4298=cj17*cj17;
IkReal x4299=r01*r01;
IkReal x4300=(r01*sj17);
IkReal x4301=(cj17*r00);
CheckValue<IkReal> x4302 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x4301))+x4300)),IKFAST_ATAN2_MAGTHRESH);
if(!x4302.valid){
continue;
}
CheckValue<IkReal> x4303=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4298*(r00*r00)))+((x4298*x4299))+(((-1.0)*(r02*r02)))+(((-1.0)*x4299))+(((2.0)*x4300*x4301)))),-1);
if(!x4303.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x4302.value)+(((1.5707963267949)*(x4303.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x4304=IKsin(j16);
IkReal x4305=IKcos(j16);
IkReal x4306=((1.0)*sj17);
IkReal x4307=(cj17*x4304);
IkReal x4308=(cj17*x4305);
IkReal x4309=((1.0)*x4304);
evalcond[0]=(((r02*x4305))+(((-1.0)*r01*x4304*x4306))+((r00*x4307)));
evalcond[1]=((((-1.0)*r22*x4309))+(((-1.0)*r21*x4305*x4306))+((r20*x4308)));
evalcond[2]=((((-1.0)*r12*x4309))+((r10*x4308))+(((-1.0)*r11*x4305*x4306)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x4305*x4306))+((r00*x4308))+(((-1.0)*r02*x4309)));
evalcond[4]=(((r12*x4305))+((r20*sj17))+((cj17*r21))+((r10*x4307))+(((-1.0)*r11*x4304*x4306)));
evalcond[5]=(((r22*x4305))+(((-1.0)*cj13*sj14))+(((-1.0)*r21*x4304*x4306))+((r20*x4307))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x4310=((1.0)*sj17);
CheckValue<IkReal> x4311=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj17*r21))+(((-1.0)*r20*x4310)))),-1);
if(!x4311.valid){
continue;
}
CheckValue<IkReal> x4312 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x4310))+((cj17*r10)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x4312.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4311.value)))+(x4312.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x4313=IKsin(j16);
IkReal x4314=IKcos(j16);
IkReal x4315=((1.0)*sj17);
IkReal x4316=(cj17*x4313);
IkReal x4317=(cj17*x4314);
IkReal x4318=((1.0)*x4313);
evalcond[0]=(((r00*x4316))+(((-1.0)*r01*x4313*x4315))+((r02*x4314)));
evalcond[1]=((((-1.0)*r22*x4318))+(((-1.0)*r21*x4314*x4315))+((r20*x4317)));
evalcond[2]=(((r10*x4317))+(((-1.0)*r12*x4318))+(((-1.0)*r11*x4314*x4315)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x4314*x4315))+((r00*x4317))+(((-1.0)*r02*x4318)));
evalcond[4]=(((r20*sj17))+((r12*x4314))+((r10*x4316))+(((-1.0)*r11*x4313*x4315))+((cj17*r21)));
evalcond[5]=(((r20*x4316))+(((-1.0)*cj13*sj14))+(((-1.0)*r21*x4313*x4315))+(((-1.0)*cj14*sj13))+((r22*x4314)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x4319 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj17))+((cj17*r20)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x4319.valid){
continue;
}
CheckValue<IkReal> x4320=IKPowWithIntegerCheck(IKsign((((cj17*r11))+((r10*sj17)))),-1);
if(!x4320.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x4319.value)+(((1.5707963267949)*(x4320.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x4321=IKsin(j16);
IkReal x4322=IKcos(j16);
IkReal x4323=((1.0)*sj17);
IkReal x4324=(cj17*x4321);
IkReal x4325=(cj17*x4322);
IkReal x4326=((1.0)*x4321);
evalcond[0]=((((-1.0)*r01*x4321*x4323))+((r00*x4324))+((r02*x4322)));
evalcond[1]=(((r20*x4325))+(((-1.0)*r22*x4326))+(((-1.0)*r21*x4322*x4323)));
evalcond[2]=((((-1.0)*r12*x4326))+(((-1.0)*r11*x4322*x4323))+((r10*x4325)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x4322*x4323))+((r00*x4325))+(((-1.0)*r02*x4326)));
evalcond[4]=(((r20*sj17))+((r12*x4322))+(((-1.0)*r11*x4321*x4323))+((cj17*r21))+((r10*x4324)));
evalcond[5]=(((r20*x4324))+(((-1.0)*cj13*sj14))+(((-1.0)*r21*x4321*x4323))+((r22*x4322))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
IkReal x4327=(((r20*sj17))+((cj17*r21)));
j16eval[0]=x4327;
j16eval[1]=IKsign(x4327);
j16eval[2]=((IKabs(r12))+(IKabs((((cj17*r10))+(((-1.0)*r11*sj17))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
IkReal x4328=((1.0)*sj17);
IkReal x4329=((((-1.0)*r10*x4328))+(((-1.0)*cj17*r11)));
j16eval[0]=x4329;
j16eval[1]=IKsign(x4329);
j16eval[2]=((IKabs(((((-1.0)*r21*x4328))+((cj17*r20)))))+(IKabs(r22)));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
IkReal x4330=cj17*cj17;
IkReal x4331=r01*r01;
IkReal x4332=(cj17*r00);
IkReal x4333=(r01*sj17);
IkReal x4334=(((x4330*(r00*r00)))+(((-2.0)*x4332*x4333))+(((-1.0)*x4330*x4331))+x4331+(r02*r02));
j16eval[0]=x4334;
j16eval[1]=IKsign(x4334);
j16eval[2]=((IKabs(((((-1.0)*x4332))+x4333)))+(IKabs(r02)));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x4335=cj17*cj17;
IkReal x4336=r01*r01;
IkReal x4337=(r01*sj17);
IkReal x4338=(cj17*r00);
CheckValue<IkReal> x4339=IKPowWithIntegerCheck(IKsign(((((-2.0)*x4337*x4338))+((x4335*(r00*r00)))+(((-1.0)*x4335*x4336))+x4336+(r02*r02))),-1);
if(!x4339.valid){
continue;
}
CheckValue<IkReal> x4340 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x4338))+x4337)),IKFAST_ATAN2_MAGTHRESH);
if(!x4340.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4339.value)))+(x4340.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x4341=IKsin(j16);
IkReal x4342=IKcos(j16);
IkReal x4343=((1.0)*r21);
IkReal x4344=((1.0)*r01);
IkReal x4345=(cj17*x4341);
IkReal x4346=(cj17*x4342);
IkReal x4347=((1.0)*r11*sj17);
IkReal x4348=(sj17*x4341);
IkReal x4349=((1.0)*x4341);
IkReal x4350=(sj17*x4342);
evalcond[0]=(((r00*x4345))+(((-1.0)*x4344*x4348))+((r02*x4342)));
evalcond[1]=((((-1.0)*x4343*x4350))+(((-1.0)*r22*x4349))+((r20*x4346)));
evalcond[2]=((((-1.0)*x4342*x4347))+(((-1.0)*r12*x4349))+((r10*x4346)));
evalcond[3]=((1.0)+((r00*x4346))+(((-1.0)*r02*x4349))+(((-1.0)*x4344*x4350)));
evalcond[4]=((((-1.0)*cj13*sj14))+(((-1.0)*x4343*x4348))+((r22*x4342))+(((-1.0)*cj14*sj13))+((r20*x4345)));
evalcond[5]=((((-1.0)*cj17*x4343))+(((-1.0)*x4341*x4347))+(((-1.0)*r20*sj17))+((r12*x4342))+((r10*x4345)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x4351=((1.0)*sj17);
CheckValue<IkReal> x4352 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x4351))+((cj17*r20)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x4352.valid){
continue;
}
CheckValue<IkReal> x4353=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj17*r11))+(((-1.0)*r10*x4351)))),-1);
if(!x4353.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x4352.value)+(((1.5707963267949)*(x4353.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x4354=IKsin(j16);
IkReal x4355=IKcos(j16);
IkReal x4356=((1.0)*r21);
IkReal x4357=((1.0)*r01);
IkReal x4358=(cj17*x4354);
IkReal x4359=(cj17*x4355);
IkReal x4360=((1.0)*r11*sj17);
IkReal x4361=(sj17*x4354);
IkReal x4362=((1.0)*x4354);
IkReal x4363=(sj17*x4355);
evalcond[0]=((((-1.0)*x4357*x4361))+((r02*x4355))+((r00*x4358)));
evalcond[1]=(((r20*x4359))+(((-1.0)*r22*x4362))+(((-1.0)*x4356*x4363)));
evalcond[2]=((((-1.0)*x4355*x4360))+(((-1.0)*r12*x4362))+((r10*x4359)));
evalcond[3]=((1.0)+(((-1.0)*x4357*x4363))+(((-1.0)*r02*x4362))+((r00*x4359)));
evalcond[4]=(((r20*x4358))+(((-1.0)*cj13*sj14))+((r22*x4355))+(((-1.0)*cj14*sj13))+(((-1.0)*x4356*x4361)));
evalcond[5]=((((-1.0)*cj17*x4356))+(((-1.0)*x4354*x4360))+(((-1.0)*r20*sj17))+((r12*x4355))+((r10*x4358)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x4364 = IKatan2WithCheck(IkReal((((cj17*r10))+(((-1.0)*r11*sj17)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x4364.valid){
continue;
}
CheckValue<IkReal> x4365=IKPowWithIntegerCheck(IKsign((((r20*sj17))+((cj17*r21)))),-1);
if(!x4365.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x4364.value)+(((1.5707963267949)*(x4365.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x4366=IKsin(j16);
IkReal x4367=IKcos(j16);
IkReal x4368=((1.0)*r21);
IkReal x4369=((1.0)*r01);
IkReal x4370=(cj17*x4366);
IkReal x4371=(cj17*x4367);
IkReal x4372=((1.0)*r11*sj17);
IkReal x4373=(sj17*x4366);
IkReal x4374=((1.0)*x4366);
IkReal x4375=(sj17*x4367);
evalcond[0]=(((r00*x4370))+(((-1.0)*x4369*x4373))+((r02*x4367)));
evalcond[1]=((((-1.0)*r22*x4374))+((r20*x4371))+(((-1.0)*x4368*x4375)));
evalcond[2]=(((r10*x4371))+(((-1.0)*x4367*x4372))+(((-1.0)*r12*x4374)));
evalcond[3]=((1.0)+((r00*x4371))+(((-1.0)*r02*x4374))+(((-1.0)*x4369*x4375)));
evalcond[4]=((((-1.0)*cj13*sj14))+((r20*x4370))+((r22*x4367))+(((-1.0)*cj14*sj13))+(((-1.0)*x4368*x4373)));
evalcond[5]=((((-1.0)*x4366*x4372))+((r10*x4370))+((r12*x4367))+(((-1.0)*r20*sj17))+(((-1.0)*cj17*x4368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
IkReal x4376=((-1.0)*px);
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4376);
rxp1_1=(px*r21);
rxp1_2=(r11*x4376);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j16eval[0]=r02;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
IkReal x4377=((-1.0)*px);
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4377);
rxp1_1=(px*r21);
rxp1_2=(r11*x4377);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j16eval[0]=((((-1.0)*r21*sj17))+((cj17*r20)));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
CheckValue<IkReal> x4379=IKPowWithIntegerCheck(((((-1.0)*r21*sj17))+((cj17*r20))),-1);
if(!x4379.valid){
continue;
}
IkReal x4378=x4379.value;
sj16array[0]=(((cj14*sj13*x4378))+((cj13*sj14*x4378)));
if( sj16array[0] >= -1-IKFAST_SINCOS_THRESH && sj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKasin(sj16array[0]);
    cj16array[0] = IKcos(j16array[0]);
    sj16array[1] = sj16array[0];
    j16array[1] = j16array[0] > 0 ? (IKPI-j16array[0]) : (-IKPI-j16array[0]);
    cj16array[1] = -cj16array[0];
}
else if( isnan(sj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x4380=IKcos(j16);
IkReal x4381=(cj17*x4380);
IkReal x4382=((1.0)*sj17*x4380);
evalcond[0]=(r02*x4380);
evalcond[1]=((((-1.0)*r02*(IKsin(j16))))+(((-1.0)*sj12)));
evalcond[2]=(((r20*x4381))+(((-1.0)*r21*x4382)));
evalcond[3]=((((-1.0)*r11*x4382))+((r10*x4381)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
CheckValue<IkReal> x4383=IKPowWithIntegerCheck(r02,-1);
if(!x4383.valid){
continue;
}
sj16array[0]=((-1.0)*sj12*(x4383.value));
if( sj16array[0] >= -1-IKFAST_SINCOS_THRESH && sj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKasin(sj16array[0]);
    cj16array[0] = IKcos(j16array[0]);
    sj16array[1] = sj16array[0];
    j16array[1] = j16array[0] > 0 ? (IKPI-j16array[0]) : (-IKPI-j16array[0]);
    cj16array[1] = -cj16array[0];
}
else if( isnan(sj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x4384=IKcos(j16);
IkReal x4385=IKsin(j16);
IkReal x4386=((1.0)*r21*sj17);
IkReal x4387=(cj17*x4384);
evalcond[0]=(r02*x4384);
evalcond[1]=((((-1.0)*x4384*x4386))+((r20*x4387)));
evalcond[2]=((((-1.0)*r11*sj17*x4384))+((r10*x4387)));
evalcond[3]=((((-1.0)*cj13*sj14))+((cj17*r20*x4385))+(((-1.0)*cj14*sj13))+(((-1.0)*x4385*x4386)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j16]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x4388=((1.0)*cj12);
IkReal x4389=((1.0)*sj12);
CheckValue<IkReal> x4390 = IKatan2WithCheck(IkReal((((cj12*r01*sj17))+(((-1.0)*cj17*r10*x4389))+((r11*sj12*sj17))+(((-1.0)*cj17*r00*x4388)))),IkReal(((((-1.0)*r02*x4388))+(((-1.0)*r12*x4389)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4390.valid){
continue;
}
CheckValue<IkReal> x4391=IKPowWithIntegerCheck(IKsign((((r20*sj17))+((cj17*r21)))),-1);
if(!x4391.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x4390.value)+(((1.5707963267949)*(x4391.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x4392=IKcos(j16);
IkReal x4393=IKsin(j16);
IkReal x4394=(cj17*r21);
IkReal x4395=(r20*sj17);
IkReal x4396=(r21*sj17);
IkReal x4397=(r11*sj17);
IkReal x4398=(r01*sj17);
IkReal x4399=(cj17*x4393);
IkReal x4400=(cj17*x4392);
IkReal x4401=((1.0)*x4393);
IkReal x4402=((1.0)*x4392);
evalcond[0]=((((-1.0)*x4396*x4402))+((r20*x4400))+(((-1.0)*r22*x4401)));
evalcond[1]=((((-1.0)*r12*x4401))+cj12+(((-1.0)*x4397*x4402))+((r10*x4400)));
evalcond[2]=(((r00*x4400))+(((-1.0)*x4398*x4402))+(((-1.0)*r02*x4401))+(((-1.0)*sj12)));
evalcond[3]=((((-1.0)*cj13*sj14))+((r22*x4392))+(((-1.0)*x4396*x4401))+((r20*x4399))+(((-1.0)*cj14*sj13)));
evalcond[4]=(((cj12*x4395))+((cj12*x4394))+((r02*x4392))+(((-1.0)*x4398*x4401))+((r00*x4399)));
evalcond[5]=(((sj12*x4394))+((sj12*x4395))+(((-1.0)*x4397*x4401))+((r10*x4399))+((r12*x4392)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x4403=IKPowWithIntegerCheck(IKsign((((cj17*r11))+((r10*sj17)))),-1);
if(!x4403.valid){
continue;
}
CheckValue<IkReal> x4404 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4404.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4403.value)))+(x4404.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x4405=IKcos(j16);
IkReal x4406=IKsin(j16);
IkReal x4407=(cj17*r21);
IkReal x4408=(r20*sj17);
IkReal x4409=(r21*sj17);
IkReal x4410=(r11*sj17);
IkReal x4411=(r01*sj17);
IkReal x4412=(cj17*x4406);
IkReal x4413=(cj17*x4405);
IkReal x4414=((1.0)*x4406);
IkReal x4415=((1.0)*x4405);
evalcond[0]=((((-1.0)*x4409*x4415))+((r20*x4413))+(((-1.0)*r22*x4414)));
evalcond[1]=((((-1.0)*x4410*x4415))+cj12+(((-1.0)*r12*x4414))+((r10*x4413)));
evalcond[2]=((((-1.0)*x4411*x4415))+(((-1.0)*r02*x4414))+((r00*x4413))+(((-1.0)*sj12)));
evalcond[3]=(((r22*x4405))+(((-1.0)*x4409*x4414))+(((-1.0)*cj13*sj14))+((r20*x4412))+(((-1.0)*cj14*sj13)));
evalcond[4]=((((-1.0)*x4411*x4414))+((r00*x4412))+((r02*x4405))+((cj12*x4407))+((cj12*x4408)));
evalcond[5]=((((-1.0)*x4410*x4414))+((r12*x4405))+((r10*x4412))+((sj12*x4407))+((sj12*x4408)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x4416 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4416.valid){
continue;
}
CheckValue<IkReal> x4417=IKPowWithIntegerCheck(IKsign((((r00*sj17))+((cj17*r01)))),-1);
if(!x4417.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x4416.value)+(((1.5707963267949)*(x4417.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x4418=IKcos(j16);
IkReal x4419=IKsin(j16);
IkReal x4420=(cj17*r21);
IkReal x4421=(r20*sj17);
IkReal x4422=(r21*sj17);
IkReal x4423=(r11*sj17);
IkReal x4424=(r01*sj17);
IkReal x4425=(cj17*x4419);
IkReal x4426=(cj17*x4418);
IkReal x4427=((1.0)*x4419);
IkReal x4428=((1.0)*x4418);
evalcond[0]=(((r20*x4426))+(((-1.0)*x4422*x4428))+(((-1.0)*r22*x4427)));
evalcond[1]=((((-1.0)*x4423*x4428))+cj12+(((-1.0)*r12*x4427))+((r10*x4426)));
evalcond[2]=((((-1.0)*x4424*x4428))+((r00*x4426))+(((-1.0)*sj12))+(((-1.0)*r02*x4427)));
evalcond[3]=(((r20*x4425))+(((-1.0)*x4422*x4427))+((r22*x4418))+(((-1.0)*cj13*sj14))+(((-1.0)*cj14*sj13)));
evalcond[4]=(((cj12*x4420))+((cj12*x4421))+(((-1.0)*x4424*x4427))+((r00*x4425))+((r02*x4418)));
evalcond[5]=((((-1.0)*x4423*x4427))+((r12*x4418))+((sj12*x4421))+((sj12*x4420))+((r10*x4425)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[3];
sj15=1.0;
cj15=0;
j15=1.5707963267949;
IkReal x4429=((1.0)*cj17);
IkReal x4430=((1.0)*sj17);
IkReal x4431=((((-1.0)*sj13*sj14))+((cj13*cj14)));
j12eval[0]=x4431;
j12eval[1]=IKsign(x4431);
j12eval[2]=((IKabs(((((-1.0)*r01*x4429))+(((-1.0)*r00*x4430)))))+(IKabs(((((-1.0)*r10*x4430))+(((-1.0)*r11*x4429))))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=1.0;
cj15=0;
j15=1.5707963267949;
IkReal x4432=cj17*cj17;
IkReal x4433=r21*r21;
IkReal x4434=(r21*sj17);
IkReal x4435=(sj13*sj14);
IkReal x4436=(cj13*cj14);
IkReal x4437=(cj17*r20);
IkReal x4438=(x4433+(r22*r22)+((x4432*(r20*r20)))+(((-1.0)*x4432*x4433))+(((-2.0)*x4434*x4437)));
j16eval[0]=x4438;
j16eval[1]=((IKabs((((r22*x4435))+(((-1.0)*r22*x4436)))))+(IKabs(((((-1.0)*x4436*x4437))+(((-1.0)*x4434*x4435))+((x4435*x4437))+((x4434*x4436))))));
j16eval[2]=IKsign(x4438);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j12eval[1];
sj15=1.0;
cj15=0;
j15=1.5707963267949;
j12eval[0]=((((-1.0)*sj13*sj14))+((cj13*cj14)));
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j13), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j14), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
if( IKabs(((((2.36617629259053)*py))+(((-0.658427386453172)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.36617629259053)*py))+(((-0.658427386453172)*px))))+IKsqr(((((0.658427386453172)*py))+(((2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((2.36617629259053)*py))+(((-0.658427386453172)*px))), ((((0.658427386453172)*py))+(((2.36617629259053)*px))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[2];
IkReal x4439=IKcos(j12);
IkReal x4440=IKsin(j12);
evalcond[0]=((((-0.10915)*x4440))+(((0.39225)*x4439))+(((-1.0)*px)));
evalcond[1]=((((0.39225)*x4440))+(((0.10915)*x4439))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j16eval[3];
sj15=1.0;
cj15=0;
j15=1.5707963267949;
j13=0;
sj13=0;
cj13=1.0;
j14=1.5707963267949;
sj14=1.0;
cj14=0;
IkReal x4441=(((r00*sj17))+((cj17*r01)));
j16eval[0]=x4441;
j16eval[1]=((IKabs(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))))+(IKabs((cj12*r22))));
j16eval[2]=IKsign(x4441);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=1.0;
cj15=0;
j15=1.5707963267949;
j13=0;
sj13=0;
cj13=1.0;
j14=1.5707963267949;
sj14=1.0;
cj14=0;
IkReal x4442=(((cj17*r11))+((r10*sj17)));
j16eval[0]=x4442;
j16eval[1]=((IKabs((r22*sj12)))+(IKabs(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12))))));
j16eval[2]=IKsign(x4442);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=1.0;
cj15=0;
j15=1.5707963267949;
j13=0;
sj13=0;
cj13=1.0;
j14=1.5707963267949;
sj14=1.0;
cj14=0;
IkReal x4443=cj17*cj17;
IkReal x4444=((1.0)*r11);
IkReal x4445=(cj17*r20);
IkReal x4446=(r21*sj17);
IkReal x4447=((((-1.0)*cj17*r10*x4446))+((r11*r21))+((r12*r22))+((r10*r20*x4443))+(((-1.0)*sj17*x4444*x4445))+(((-1.0)*r21*x4443*x4444)));
j16eval[0]=x4447;
j16eval[1]=IKsign(x4447);
j16eval[2]=((IKabs((cj12*r22)))+(IKabs(((((-1.0)*cj12*x4445))+((cj12*x4446))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x4448=cj17*cj17;
IkReal x4449=((1.0)*r11);
IkReal x4450=(cj17*r20);
IkReal x4451=(r21*sj17);
CheckValue<IkReal> x4452=IKPowWithIntegerCheck(IKsign((((r11*r21))+(((-1.0)*cj17*r10*x4451))+((r12*r22))+(((-1.0)*sj17*x4449*x4450))+((r10*r20*x4448))+(((-1.0)*r21*x4448*x4449)))),-1);
if(!x4452.valid){
continue;
}
CheckValue<IkReal> x4453 = IKatan2WithCheck(IkReal((cj12*r22)),IkReal(((((-1.0)*cj12*x4450))+((cj12*x4451)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4453.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4452.value)))+(x4453.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x4454=IKcos(j16);
IkReal x4455=IKsin(j16);
IkReal x4456=((1.0)*sj12);
CheckValue<IkReal> x4466=IKPowWithIntegerCheck(cj17,-1);
if(!x4466.valid){
continue;
}
IkReal x4457=x4466.value;
IkReal x4458=sj17*sj17;
IkReal x4459=(cj17*r20);
IkReal x4460=(cj17*r00);
IkReal x4461=(r21*sj17);
IkReal x4462=(cj17*r10);
IkReal x4463=((1.0)*x4455);
IkReal x4464=((1.0)*x4454);
IkReal x4465=(x4457*x4458);
evalcond[0]=((((-1.0)*r22*x4463))+(((-1.0)*x4461*x4464))+((x4454*x4459)));
evalcond[1]=(((x4455*x4461))+(((-1.0)*r22*x4464))+(((-1.0)*x4459*x4463)));
evalcond[2]=(cj12+((x4454*x4462))+(((-1.0)*r12*x4463))+(((-1.0)*r11*sj17*x4464)));
evalcond[3]=((((-1.0)*x4456))+(((-1.0)*r02*x4463))+(((-1.0)*r01*sj17*x4464))+((x4454*x4460)));
evalcond[4]=((((-1.0)*r02*x4464))+(((-1.0)*cj12))+(((-1.0)*x4460*x4463))+(((-1.0)*r00*x4463*x4465)));
evalcond[5]=((((-1.0)*x4456))+(((-1.0)*x4462*x4463))+(((-1.0)*r10*x4463*x4465))+(((-1.0)*r12*x4464)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x4467=IKPowWithIntegerCheck(IKsign((((cj17*r11))+((r10*sj17)))),-1);
if(!x4467.valid){
continue;
}
CheckValue<IkReal> x4468 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4468.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4467.value)))+(x4468.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x4469=IKcos(j16);
IkReal x4470=IKsin(j16);
IkReal x4471=((1.0)*sj12);
CheckValue<IkReal> x4481=IKPowWithIntegerCheck(cj17,-1);
if(!x4481.valid){
continue;
}
IkReal x4472=x4481.value;
IkReal x4473=sj17*sj17;
IkReal x4474=(cj17*r20);
IkReal x4475=(cj17*r00);
IkReal x4476=(r21*sj17);
IkReal x4477=(cj17*r10);
IkReal x4478=((1.0)*x4470);
IkReal x4479=((1.0)*x4469);
IkReal x4480=(x4472*x4473);
evalcond[0]=((((-1.0)*x4476*x4479))+(((-1.0)*r22*x4478))+((x4469*x4474)));
evalcond[1]=(((x4470*x4476))+(((-1.0)*x4474*x4478))+(((-1.0)*r22*x4479)));
evalcond[2]=((((-1.0)*r12*x4478))+cj12+(((-1.0)*r11*sj17*x4479))+((x4469*x4477)));
evalcond[3]=((((-1.0)*x4471))+(((-1.0)*r01*sj17*x4479))+(((-1.0)*r02*x4478))+((x4469*x4475)));
evalcond[4]=((((-1.0)*r00*x4478*x4480))+(((-1.0)*x4475*x4478))+(((-1.0)*cj12))+(((-1.0)*r02*x4479)));
evalcond[5]=((((-1.0)*x4471))+(((-1.0)*r12*x4479))+(((-1.0)*x4477*x4478))+(((-1.0)*r10*x4478*x4480)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x4482 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4482.valid){
continue;
}
CheckValue<IkReal> x4483=IKPowWithIntegerCheck(IKsign((((r00*sj17))+((cj17*r01)))),-1);
if(!x4483.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x4482.value)+(((1.5707963267949)*(x4483.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x4484=IKcos(j16);
IkReal x4485=IKsin(j16);
IkReal x4486=((1.0)*sj12);
CheckValue<IkReal> x4496=IKPowWithIntegerCheck(cj17,-1);
if(!x4496.valid){
continue;
}
IkReal x4487=x4496.value;
IkReal x4488=sj17*sj17;
IkReal x4489=(cj17*r20);
IkReal x4490=(cj17*r00);
IkReal x4491=(r21*sj17);
IkReal x4492=(cj17*r10);
IkReal x4493=((1.0)*x4485);
IkReal x4494=((1.0)*x4484);
IkReal x4495=(x4487*x4488);
evalcond[0]=(((x4484*x4489))+(((-1.0)*r22*x4493))+(((-1.0)*x4491*x4494)));
evalcond[1]=((((-1.0)*x4489*x4493))+((x4485*x4491))+(((-1.0)*r22*x4494)));
evalcond[2]=(((x4484*x4492))+cj12+(((-1.0)*r11*sj17*x4494))+(((-1.0)*r12*x4493)));
evalcond[3]=((((-1.0)*r02*x4493))+(((-1.0)*r01*sj17*x4494))+((x4484*x4490))+(((-1.0)*x4486)));
evalcond[4]=((((-1.0)*r00*x4493*x4495))+(((-1.0)*r02*x4494))+(((-1.0)*x4490*x4493))+(((-1.0)*cj12)));
evalcond[5]=((((-1.0)*x4492*x4493))+(((-1.0)*r10*x4493*x4495))+(((-1.0)*x4486))+(((-1.0)*r12*x4494)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j13), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j14), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
if( IKabs(((((-0.658427386453172)*px))+(((-2.36617629259053)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((-2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))))+IKsqr(((((0.658427386453172)*py))+(((-2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))), ((((0.658427386453172)*py))+(((-2.36617629259053)*px))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[2];
IkReal x4497=IKcos(j12);
IkReal x4498=IKsin(j12);
evalcond[0]=((((-0.39225)*x4497))+(((-0.10915)*x4498))+(((-1.0)*px)));
evalcond[1]=((((0.10915)*x4497))+(((-0.39225)*x4498))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j16eval[3];
sj15=1.0;
cj15=0;
j15=1.5707963267949;
j13=0;
sj13=0;
cj13=1.0;
j14=-1.5707963267949;
sj14=-1.0;
cj14=0;
IkReal x4499=(((r00*sj17))+((cj17*r01)));
j16eval[0]=x4499;
j16eval[1]=((IKabs(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))))+(IKabs((cj12*r22))));
j16eval[2]=IKsign(x4499);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=1.0;
cj15=0;
j15=1.5707963267949;
j13=0;
sj13=0;
cj13=1.0;
j14=-1.5707963267949;
sj14=-1.0;
cj14=0;
IkReal x4500=(((cj17*r11))+((r10*sj17)));
j16eval[0]=x4500;
j16eval[1]=((IKabs((r22*sj12)))+(IKabs(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12))))));
j16eval[2]=IKsign(x4500);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=1.0;
cj15=0;
j15=1.5707963267949;
j13=0;
sj13=0;
cj13=1.0;
j14=-1.5707963267949;
sj14=-1.0;
cj14=0;
IkReal x4501=cj17*cj17;
IkReal x4502=((1.0)*r11);
IkReal x4503=(cj17*r20);
IkReal x4504=(r21*sj17);
IkReal x4505=((((-1.0)*cj17*r10*x4504))+((r10*r20*x4501))+((r11*r21))+((r12*r22))+(((-1.0)*sj17*x4502*x4503))+(((-1.0)*r21*x4501*x4502)));
j16eval[0]=x4505;
j16eval[1]=IKsign(x4505);
j16eval[2]=((IKabs(((((-1.0)*cj12*x4503))+((cj12*x4504)))))+(IKabs((cj12*r22))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x4506=cj17*cj17;
IkReal x4507=((1.0)*r11);
IkReal x4508=(cj17*r20);
IkReal x4509=(r21*sj17);
CheckValue<IkReal> x4510 = IKatan2WithCheck(IkReal((cj12*r22)),IkReal(((((-1.0)*cj12*x4508))+((cj12*x4509)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4510.valid){
continue;
}
CheckValue<IkReal> x4511=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4506*x4507))+(((-1.0)*cj17*r10*x4509))+((r10*r20*x4506))+((r11*r21))+(((-1.0)*sj17*x4507*x4508))+((r12*r22)))),-1);
if(!x4511.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x4510.value)+(((1.5707963267949)*(x4511.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x4512=IKcos(j16);
IkReal x4513=IKsin(j16);
CheckValue<IkReal> x4523=IKPowWithIntegerCheck(cj17,-1);
if(!x4523.valid){
continue;
}
IkReal x4514=x4523.value;
IkReal x4515=sj17*sj17;
IkReal x4516=(cj17*r20);
IkReal x4517=(cj17*r00);
IkReal x4518=(r21*sj17);
IkReal x4519=(cj17*r10);
IkReal x4520=((1.0)*x4513);
IkReal x4521=((1.0)*x4512);
IkReal x4522=(x4514*x4515);
evalcond[0]=(((x4512*x4516))+(((-1.0)*r22*x4520))+(((-1.0)*x4518*x4521)));
evalcond[1]=(((x4513*x4518))+(((-1.0)*r22*x4521))+(((-1.0)*x4516*x4520)));
evalcond[2]=((((-1.0)*r12*x4520))+((x4512*x4519))+cj12+(((-1.0)*r11*sj17*x4521)));
evalcond[3]=(((x4512*x4517))+(((-1.0)*r01*sj17*x4521))+(((-1.0)*sj12))+(((-1.0)*r02*x4520)));
evalcond[4]=((((-1.0)*r00*x4520*x4522))+cj12+(((-1.0)*x4517*x4520))+(((-1.0)*r02*x4521)));
evalcond[5]=((((-1.0)*r12*x4521))+sj12+(((-1.0)*r10*x4520*x4522))+(((-1.0)*x4519*x4520)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x4524=IKPowWithIntegerCheck(IKsign((((cj17*r11))+((r10*sj17)))),-1);
if(!x4524.valid){
continue;
}
CheckValue<IkReal> x4525 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4525.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4524.value)))+(x4525.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x4526=IKcos(j16);
IkReal x4527=IKsin(j16);
CheckValue<IkReal> x4537=IKPowWithIntegerCheck(cj17,-1);
if(!x4537.valid){
continue;
}
IkReal x4528=x4537.value;
IkReal x4529=sj17*sj17;
IkReal x4530=(cj17*r20);
IkReal x4531=(cj17*r00);
IkReal x4532=(r21*sj17);
IkReal x4533=(cj17*r10);
IkReal x4534=((1.0)*x4527);
IkReal x4535=((1.0)*x4526);
IkReal x4536=(x4528*x4529);
evalcond[0]=(((x4526*x4530))+(((-1.0)*r22*x4534))+(((-1.0)*x4532*x4535)));
evalcond[1]=((((-1.0)*x4530*x4534))+((x4527*x4532))+(((-1.0)*r22*x4535)));
evalcond[2]=(((x4526*x4533))+cj12+(((-1.0)*r11*sj17*x4535))+(((-1.0)*r12*x4534)));
evalcond[3]=(((x4526*x4531))+(((-1.0)*r01*sj17*x4535))+(((-1.0)*sj12))+(((-1.0)*r02*x4534)));
evalcond[4]=((((-1.0)*x4531*x4534))+cj12+(((-1.0)*r00*x4534*x4536))+(((-1.0)*r02*x4535)));
evalcond[5]=((((-1.0)*r10*x4534*x4536))+sj12+(((-1.0)*x4533*x4534))+(((-1.0)*r12*x4535)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x4538 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4538.valid){
continue;
}
CheckValue<IkReal> x4539=IKPowWithIntegerCheck(IKsign((((r00*sj17))+((cj17*r01)))),-1);
if(!x4539.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x4538.value)+(((1.5707963267949)*(x4539.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x4540=IKcos(j16);
IkReal x4541=IKsin(j16);
CheckValue<IkReal> x4551=IKPowWithIntegerCheck(cj17,-1);
if(!x4551.valid){
continue;
}
IkReal x4542=x4551.value;
IkReal x4543=sj17*sj17;
IkReal x4544=(cj17*r20);
IkReal x4545=(cj17*r00);
IkReal x4546=(r21*sj17);
IkReal x4547=(cj17*r10);
IkReal x4548=((1.0)*x4541);
IkReal x4549=((1.0)*x4540);
IkReal x4550=(x4542*x4543);
evalcond[0]=((((-1.0)*x4546*x4549))+(((-1.0)*r22*x4548))+((x4540*x4544)));
evalcond[1]=((((-1.0)*r22*x4549))+(((-1.0)*x4544*x4548))+((x4541*x4546)));
evalcond[2]=((((-1.0)*r11*sj17*x4549))+(((-1.0)*r12*x4548))+cj12+((x4540*x4547)));
evalcond[3]=((((-1.0)*r02*x4548))+(((-1.0)*sj12))+((x4540*x4545))+(((-1.0)*r01*sj17*x4549)));
evalcond[4]=((((-1.0)*r02*x4549))+(((-1.0)*r00*x4548*x4550))+(((-1.0)*x4545*x4548))+cj12);
evalcond[5]=((((-1.0)*x4547*x4548))+(((-1.0)*r10*x4548*x4550))+(((-1.0)*r12*x4549))+sj12);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j14), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j13), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
if( IKabs(((((-0.160559264620033)*px))+(((1.20217186450501)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.160559264620033)*py))+(((1.20217186450501)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.160559264620033)*px))+(((1.20217186450501)*py))))+IKsqr(((((0.160559264620033)*py))+(((1.20217186450501)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-0.160559264620033)*px))+(((1.20217186450501)*py))), ((((0.160559264620033)*py))+(((1.20217186450501)*px))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[2];
IkReal x4552=IKsin(j12);
IkReal x4553=IKcos(j12);
evalcond[0]=((((-0.10915)*x4552))+(((0.81725)*x4553))+(((-1.0)*px)));
evalcond[1]=((((0.10915)*x4553))+(((0.81725)*x4552))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j16eval[3];
sj15=1.0;
cj15=0;
j15=1.5707963267949;
j13=1.5707963267949;
sj13=1.0;
cj13=0;
j14=0;
sj14=0;
cj14=1.0;
IkReal x4554=(((r00*sj17))+((cj17*r01)));
j16eval[0]=x4554;
j16eval[1]=((IKabs(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))))+(IKabs((cj12*r22))));
j16eval[2]=IKsign(x4554);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=1.0;
cj15=0;
j15=1.5707963267949;
j13=1.5707963267949;
sj13=1.0;
cj13=0;
j14=0;
sj14=0;
cj14=1.0;
IkReal x4555=(((cj17*r11))+((r10*sj17)));
j16eval[0]=x4555;
j16eval[1]=((IKabs((r22*sj12)))+(IKabs(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12))))));
j16eval[2]=IKsign(x4555);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=1.0;
cj15=0;
j15=1.5707963267949;
j13=1.5707963267949;
sj13=1.0;
cj13=0;
j14=0;
sj14=0;
cj14=1.0;
IkReal x4556=cj17*cj17;
IkReal x4557=((1.0)*r11);
IkReal x4558=(cj17*r20);
IkReal x4559=(r21*sj17);
IkReal x4560=(((r10*r20*x4556))+(((-1.0)*sj17*x4557*x4558))+(((-1.0)*r21*x4556*x4557))+((r11*r21))+((r12*r22))+(((-1.0)*cj17*r10*x4559)));
j16eval[0]=x4560;
j16eval[1]=IKsign(x4560);
j16eval[2]=((IKabs((((cj12*x4559))+(((-1.0)*cj12*x4558)))))+(IKabs((cj12*r22))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x4561=cj17*cj17;
IkReal x4562=((1.0)*r11);
IkReal x4563=(cj17*r20);
IkReal x4564=(r21*sj17);
CheckValue<IkReal> x4565 = IKatan2WithCheck(IkReal((cj12*r22)),IkReal((((cj12*x4564))+(((-1.0)*cj12*x4563)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4565.valid){
continue;
}
CheckValue<IkReal> x4566=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj17*x4562*x4563))+((r11*r21))+((r12*r22))+(((-1.0)*cj17*r10*x4564))+(((-1.0)*r21*x4561*x4562))+((r10*r20*x4561)))),-1);
if(!x4566.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x4565.value)+(((1.5707963267949)*(x4566.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x4567=IKcos(j16);
IkReal x4568=IKsin(j16);
IkReal x4569=((1.0)*sj12);
CheckValue<IkReal> x4579=IKPowWithIntegerCheck(cj17,-1);
if(!x4579.valid){
continue;
}
IkReal x4570=x4579.value;
IkReal x4571=sj17*sj17;
IkReal x4572=(cj17*r20);
IkReal x4573=(cj17*r00);
IkReal x4574=(r21*sj17);
IkReal x4575=(cj17*r10);
IkReal x4576=((1.0)*x4568);
IkReal x4577=((1.0)*x4567);
IkReal x4578=(x4570*x4571);
evalcond[0]=(((x4567*x4572))+(((-1.0)*x4574*x4577))+(((-1.0)*r22*x4576)));
evalcond[1]=(((x4568*x4574))+(((-1.0)*x4572*x4576))+(((-1.0)*r22*x4577)));
evalcond[2]=(((x4567*x4575))+(((-1.0)*r11*sj17*x4577))+cj12+(((-1.0)*r12*x4576)));
evalcond[3]=(((x4567*x4573))+(((-1.0)*r02*x4576))+(((-1.0)*r01*sj17*x4577))+(((-1.0)*x4569)));
evalcond[4]=((((-1.0)*r00*x4576*x4578))+(((-1.0)*r02*x4577))+(((-1.0)*cj12))+(((-1.0)*x4573*x4576)));
evalcond[5]=((((-1.0)*x4575*x4576))+(((-1.0)*r12*x4577))+(((-1.0)*r10*x4576*x4578))+(((-1.0)*x4569)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x4580=IKPowWithIntegerCheck(IKsign((((cj17*r11))+((r10*sj17)))),-1);
if(!x4580.valid){
continue;
}
CheckValue<IkReal> x4581 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4581.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4580.value)))+(x4581.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x4582=IKcos(j16);
IkReal x4583=IKsin(j16);
IkReal x4584=((1.0)*sj12);
CheckValue<IkReal> x4594=IKPowWithIntegerCheck(cj17,-1);
if(!x4594.valid){
continue;
}
IkReal x4585=x4594.value;
IkReal x4586=sj17*sj17;
IkReal x4587=(cj17*r20);
IkReal x4588=(cj17*r00);
IkReal x4589=(r21*sj17);
IkReal x4590=(cj17*r10);
IkReal x4591=((1.0)*x4583);
IkReal x4592=((1.0)*x4582);
IkReal x4593=(x4585*x4586);
evalcond[0]=((((-1.0)*r22*x4591))+(((-1.0)*x4589*x4592))+((x4582*x4587)));
evalcond[1]=((((-1.0)*r22*x4592))+(((-1.0)*x4587*x4591))+((x4583*x4589)));
evalcond[2]=((((-1.0)*r11*sj17*x4592))+((x4582*x4590))+cj12+(((-1.0)*r12*x4591)));
evalcond[3]=((((-1.0)*x4584))+((x4582*x4588))+(((-1.0)*r02*x4591))+(((-1.0)*r01*sj17*x4592)));
evalcond[4]=((((-1.0)*r00*x4591*x4593))+(((-1.0)*r02*x4592))+(((-1.0)*x4588*x4591))+(((-1.0)*cj12)));
evalcond[5]=((((-1.0)*x4584))+(((-1.0)*r10*x4591*x4593))+(((-1.0)*r12*x4592))+(((-1.0)*x4590*x4591)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x4595 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4595.valid){
continue;
}
CheckValue<IkReal> x4596=IKPowWithIntegerCheck(IKsign((((r00*sj17))+((cj17*r01)))),-1);
if(!x4596.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x4595.value)+(((1.5707963267949)*(x4596.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x4597=IKcos(j16);
IkReal x4598=IKsin(j16);
IkReal x4599=((1.0)*sj12);
CheckValue<IkReal> x4609=IKPowWithIntegerCheck(cj17,-1);
if(!x4609.valid){
continue;
}
IkReal x4600=x4609.value;
IkReal x4601=sj17*sj17;
IkReal x4602=(cj17*r20);
IkReal x4603=(cj17*r00);
IkReal x4604=(r21*sj17);
IkReal x4605=(cj17*r10);
IkReal x4606=((1.0)*x4598);
IkReal x4607=((1.0)*x4597);
IkReal x4608=(x4600*x4601);
evalcond[0]=(((x4597*x4602))+(((-1.0)*x4604*x4607))+(((-1.0)*r22*x4606)));
evalcond[1]=((((-1.0)*x4602*x4606))+((x4598*x4604))+(((-1.0)*r22*x4607)));
evalcond[2]=(((x4597*x4605))+(((-1.0)*r11*sj17*x4607))+cj12+(((-1.0)*r12*x4606)));
evalcond[3]=((((-1.0)*x4599))+((x4597*x4603))+(((-1.0)*r02*x4606))+(((-1.0)*r01*sj17*x4607)));
evalcond[4]=((((-1.0)*r00*x4606*x4608))+(((-1.0)*x4603*x4606))+(((-1.0)*r02*x4607))+(((-1.0)*cj12)));
evalcond[5]=((((-1.0)*x4599))+(((-1.0)*r12*x4607))+(((-1.0)*r10*x4606*x4608))+(((-1.0)*x4605*x4606)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j14, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j13), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
if( IKabs(((((2.52189136462044)*py))+(((-8.4050211434602)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((8.4050211434602)*py))+(((2.52189136462044)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.52189136462044)*py))+(((-8.4050211434602)*px))))+IKsqr(((((8.4050211434602)*py))+(((2.52189136462044)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((2.52189136462044)*py))+(((-8.4050211434602)*px))), ((((8.4050211434602)*py))+(((2.52189136462044)*px))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[2];
IkReal x4610=IKcos(j12);
IkReal x4611=IKsin(j12);
evalcond[0]=((((0.03275)*x4610))+(((-1.0)*px))+(((-0.10915)*x4611)));
evalcond[1]=((((0.03275)*x4611))+(((-1.0)*py))+(((0.10915)*x4610)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j16eval[3];
sj15=1.0;
cj15=0;
j15=1.5707963267949;
j13=1.5707963267949;
sj13=1.0;
cj13=0;
j14=3.14159265358979;
sj14=0;
cj14=-1.0;
IkReal x4612=(((r00*sj17))+((cj17*r01)));
j16eval[0]=x4612;
j16eval[1]=((IKabs(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))))+(IKabs((cj12*r22))));
j16eval[2]=IKsign(x4612);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=1.0;
cj15=0;
j15=1.5707963267949;
j13=1.5707963267949;
sj13=1.0;
cj13=0;
j14=3.14159265358979;
sj14=0;
cj14=-1.0;
IkReal x4613=(((cj17*r11))+((r10*sj17)));
j16eval[0]=x4613;
j16eval[1]=((IKabs((r22*sj12)))+(IKabs(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12))))));
j16eval[2]=IKsign(x4613);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=1.0;
cj15=0;
j15=1.5707963267949;
j13=1.5707963267949;
sj13=1.0;
cj13=0;
j14=3.14159265358979;
sj14=0;
cj14=-1.0;
IkReal x4614=cj17*cj17;
IkReal x4615=((1.0)*r11);
IkReal x4616=(cj17*r20);
IkReal x4617=(r21*sj17);
IkReal x4618=((((-1.0)*sj17*x4615*x4616))+(((-1.0)*r21*x4614*x4615))+((r10*r20*x4614))+(((-1.0)*cj17*r10*x4617))+((r11*r21))+((r12*r22)));
j16eval[0]=x4618;
j16eval[1]=IKsign(x4618);
j16eval[2]=((IKabs(((((-1.0)*cj12*x4616))+((cj12*x4617)))))+(IKabs((cj12*r22))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x4619=cj17*cj17;
IkReal x4620=((1.0)*r11);
IkReal x4621=(cj17*r20);
IkReal x4622=(r21*sj17);
CheckValue<IkReal> x4623 = IKatan2WithCheck(IkReal((cj12*r22)),IkReal((((cj12*x4622))+(((-1.0)*cj12*x4621)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4623.valid){
continue;
}
CheckValue<IkReal> x4624=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj17*x4620*x4621))+((r10*r20*x4619))+((r11*r21))+((r12*r22))+(((-1.0)*r21*x4619*x4620))+(((-1.0)*cj17*r10*x4622)))),-1);
if(!x4624.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x4623.value)+(((1.5707963267949)*(x4624.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x4625=IKcos(j16);
IkReal x4626=IKsin(j16);
CheckValue<IkReal> x4636=IKPowWithIntegerCheck(cj17,-1);
if(!x4636.valid){
continue;
}
IkReal x4627=x4636.value;
IkReal x4628=sj17*sj17;
IkReal x4629=(cj17*r20);
IkReal x4630=(cj17*r00);
IkReal x4631=(r21*sj17);
IkReal x4632=(cj17*r10);
IkReal x4633=((1.0)*x4626);
IkReal x4634=((1.0)*x4625);
IkReal x4635=(x4627*x4628);
evalcond[0]=((((-1.0)*x4631*x4634))+((x4625*x4629))+(((-1.0)*r22*x4633)));
evalcond[1]=(((x4626*x4631))+(((-1.0)*x4629*x4633))+(((-1.0)*r22*x4634)));
evalcond[2]=(((x4625*x4632))+(((-1.0)*r11*sj17*x4634))+cj12+(((-1.0)*r12*x4633)));
evalcond[3]=((((-1.0)*r02*x4633))+((x4625*x4630))+(((-1.0)*r01*sj17*x4634))+(((-1.0)*sj12)));
evalcond[4]=((((-1.0)*r02*x4634))+(((-1.0)*r00*x4633*x4635))+(((-1.0)*x4630*x4633))+cj12);
evalcond[5]=((((-1.0)*r10*x4633*x4635))+sj12+(((-1.0)*r12*x4634))+(((-1.0)*x4632*x4633)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x4637=IKPowWithIntegerCheck(IKsign((((cj17*r11))+((r10*sj17)))),-1);
if(!x4637.valid){
continue;
}
CheckValue<IkReal> x4638 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4638.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4637.value)))+(x4638.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x4639=IKcos(j16);
IkReal x4640=IKsin(j16);
CheckValue<IkReal> x4650=IKPowWithIntegerCheck(cj17,-1);
if(!x4650.valid){
continue;
}
IkReal x4641=x4650.value;
IkReal x4642=sj17*sj17;
IkReal x4643=(cj17*r20);
IkReal x4644=(cj17*r00);
IkReal x4645=(r21*sj17);
IkReal x4646=(cj17*r10);
IkReal x4647=((1.0)*x4640);
IkReal x4648=((1.0)*x4639);
IkReal x4649=(x4641*x4642);
evalcond[0]=((((-1.0)*x4645*x4648))+(((-1.0)*r22*x4647))+((x4639*x4643)));
evalcond[1]=((((-1.0)*r22*x4648))+(((-1.0)*x4643*x4647))+((x4640*x4645)));
evalcond[2]=((((-1.0)*r11*sj17*x4648))+(((-1.0)*r12*x4647))+cj12+((x4639*x4646)));
evalcond[3]=((((-1.0)*r02*x4647))+(((-1.0)*r01*sj17*x4648))+(((-1.0)*sj12))+((x4639*x4644)));
evalcond[4]=((((-1.0)*r02*x4648))+cj12+(((-1.0)*x4644*x4647))+(((-1.0)*r00*x4647*x4649)));
evalcond[5]=((((-1.0)*r12*x4648))+sj12+(((-1.0)*x4646*x4647))+(((-1.0)*r10*x4647*x4649)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x4651 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4651.valid){
continue;
}
CheckValue<IkReal> x4652=IKPowWithIntegerCheck(IKsign((((r00*sj17))+((cj17*r01)))),-1);
if(!x4652.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x4651.value)+(((1.5707963267949)*(x4652.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x4653=IKcos(j16);
IkReal x4654=IKsin(j16);
CheckValue<IkReal> x4664=IKPowWithIntegerCheck(cj17,-1);
if(!x4664.valid){
continue;
}
IkReal x4655=x4664.value;
IkReal x4656=sj17*sj17;
IkReal x4657=(cj17*r20);
IkReal x4658=(cj17*r00);
IkReal x4659=(r21*sj17);
IkReal x4660=(cj17*r10);
IkReal x4661=((1.0)*x4654);
IkReal x4662=((1.0)*x4653);
IkReal x4663=(x4655*x4656);
evalcond[0]=((((-1.0)*x4659*x4662))+((x4653*x4657))+(((-1.0)*r22*x4661)));
evalcond[1]=(((x4654*x4659))+(((-1.0)*r22*x4662))+(((-1.0)*x4657*x4661)));
evalcond[2]=((((-1.0)*r11*sj17*x4662))+cj12+(((-1.0)*r12*x4661))+((x4653*x4660)));
evalcond[3]=(((x4653*x4658))+(((-1.0)*r01*sj17*x4662))+(((-1.0)*sj12))+(((-1.0)*r02*x4661)));
evalcond[4]=((((-1.0)*x4658*x4661))+cj12+(((-1.0)*r00*x4661*x4663))+(((-1.0)*r02*x4662)));
evalcond[5]=((((-1.0)*x4660*x4661))+(((-1.0)*r10*x4661*x4663))+sj12+(((-1.0)*r12*x4662)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j13, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j14), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
if( IKabs(((((-0.658427386453172)*px))+(((-2.36617629259053)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((-2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))))+IKsqr(((((0.658427386453172)*py))+(((-2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))), ((((0.658427386453172)*py))+(((-2.36617629259053)*px))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[2];
IkReal x4665=IKcos(j12);
IkReal x4666=IKsin(j12);
evalcond[0]=((((-1.0)*px))+(((-0.10915)*x4666))+(((-0.39225)*x4665)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*x4665))+(((-0.39225)*x4666)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j16eval[3];
sj15=1.0;
cj15=0;
j15=1.5707963267949;
j13=3.14159265358979;
sj13=0;
cj13=-1.0;
j14=1.5707963267949;
sj14=1.0;
cj14=0;
IkReal x4667=(((r00*sj17))+((cj17*r01)));
j16eval[0]=x4667;
j16eval[1]=((IKabs(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))))+(IKabs((cj12*r22))));
j16eval[2]=IKsign(x4667);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=1.0;
cj15=0;
j15=1.5707963267949;
j13=3.14159265358979;
sj13=0;
cj13=-1.0;
j14=1.5707963267949;
sj14=1.0;
cj14=0;
IkReal x4668=(((cj17*r11))+((r10*sj17)));
j16eval[0]=x4668;
j16eval[1]=((IKabs((r22*sj12)))+(IKabs(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12))))));
j16eval[2]=IKsign(x4668);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=1.0;
cj15=0;
j15=1.5707963267949;
j13=3.14159265358979;
sj13=0;
cj13=-1.0;
j14=1.5707963267949;
sj14=1.0;
cj14=0;
IkReal x4669=cj17*cj17;
IkReal x4670=((1.0)*r11);
IkReal x4671=(cj17*r20);
IkReal x4672=(r21*sj17);
IkReal x4673=(((r10*r20*x4669))+((r11*r21))+(((-1.0)*sj17*x4670*x4671))+((r12*r22))+(((-1.0)*cj17*r10*x4672))+(((-1.0)*r21*x4669*x4670)));
j16eval[0]=x4673;
j16eval[1]=IKsign(x4673);
j16eval[2]=((IKabs((((cj12*x4672))+(((-1.0)*cj12*x4671)))))+(IKabs((cj12*r22))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x4674=cj17*cj17;
IkReal x4675=((1.0)*r11);
IkReal x4676=(cj17*r20);
IkReal x4677=(r21*sj17);
CheckValue<IkReal> x4678=IKPowWithIntegerCheck(IKsign((((r11*r21))+(((-1.0)*r21*x4674*x4675))+((r12*r22))+(((-1.0)*cj17*r10*x4677))+(((-1.0)*sj17*x4675*x4676))+((r10*r20*x4674)))),-1);
if(!x4678.valid){
continue;
}
CheckValue<IkReal> x4679 = IKatan2WithCheck(IkReal((cj12*r22)),IkReal((((cj12*x4677))+(((-1.0)*cj12*x4676)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4679.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4678.value)))+(x4679.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x4680=IKcos(j16);
IkReal x4681=IKsin(j16);
CheckValue<IkReal> x4691=IKPowWithIntegerCheck(cj17,-1);
if(!x4691.valid){
continue;
}
IkReal x4682=x4691.value;
IkReal x4683=sj17*sj17;
IkReal x4684=(cj17*r20);
IkReal x4685=(cj17*r00);
IkReal x4686=(r21*sj17);
IkReal x4687=(cj17*r10);
IkReal x4688=((1.0)*x4681);
IkReal x4689=((1.0)*x4680);
IkReal x4690=(x4682*x4683);
evalcond[0]=((((-1.0)*x4686*x4689))+((x4680*x4684))+(((-1.0)*r22*x4688)));
evalcond[1]=((((-1.0)*x4684*x4688))+((x4681*x4686))+(((-1.0)*r22*x4689)));
evalcond[2]=(((x4680*x4687))+(((-1.0)*r11*sj17*x4689))+cj12+(((-1.0)*r12*x4688)));
evalcond[3]=(((x4680*x4685))+(((-1.0)*r02*x4688))+(((-1.0)*r01*sj17*x4689))+(((-1.0)*sj12)));
evalcond[4]=((((-1.0)*r00*x4688*x4690))+cj12+(((-1.0)*r02*x4689))+(((-1.0)*x4685*x4688)));
evalcond[5]=((((-1.0)*x4687*x4688))+sj12+(((-1.0)*r10*x4688*x4690))+(((-1.0)*r12*x4689)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x4692=IKPowWithIntegerCheck(IKsign((((cj17*r11))+((r10*sj17)))),-1);
if(!x4692.valid){
continue;
}
CheckValue<IkReal> x4693 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4693.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4692.value)))+(x4693.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x4694=IKcos(j16);
IkReal x4695=IKsin(j16);
CheckValue<IkReal> x4705=IKPowWithIntegerCheck(cj17,-1);
if(!x4705.valid){
continue;
}
IkReal x4696=x4705.value;
IkReal x4697=sj17*sj17;
IkReal x4698=(cj17*r20);
IkReal x4699=(cj17*r00);
IkReal x4700=(r21*sj17);
IkReal x4701=(cj17*r10);
IkReal x4702=((1.0)*x4695);
IkReal x4703=((1.0)*x4694);
IkReal x4704=(x4696*x4697);
evalcond[0]=((((-1.0)*x4700*x4703))+(((-1.0)*r22*x4702))+((x4694*x4698)));
evalcond[1]=((((-1.0)*r22*x4703))+(((-1.0)*x4698*x4702))+((x4695*x4700)));
evalcond[2]=((((-1.0)*r12*x4702))+cj12+((x4694*x4701))+(((-1.0)*r11*sj17*x4703)));
evalcond[3]=((((-1.0)*r02*x4702))+((x4694*x4699))+(((-1.0)*sj12))+(((-1.0)*r01*sj17*x4703)));
evalcond[4]=((((-1.0)*r00*x4702*x4704))+(((-1.0)*r02*x4703))+cj12+(((-1.0)*x4699*x4702)));
evalcond[5]=((((-1.0)*r12*x4703))+sj12+(((-1.0)*x4701*x4702))+(((-1.0)*r10*x4702*x4704)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x4706 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4706.valid){
continue;
}
CheckValue<IkReal> x4707=IKPowWithIntegerCheck(IKsign((((r00*sj17))+((cj17*r01)))),-1);
if(!x4707.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x4706.value)+(((1.5707963267949)*(x4707.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x4708=IKcos(j16);
IkReal x4709=IKsin(j16);
CheckValue<IkReal> x4719=IKPowWithIntegerCheck(cj17,-1);
if(!x4719.valid){
continue;
}
IkReal x4710=x4719.value;
IkReal x4711=sj17*sj17;
IkReal x4712=(cj17*r20);
IkReal x4713=(cj17*r00);
IkReal x4714=(r21*sj17);
IkReal x4715=(cj17*r10);
IkReal x4716=((1.0)*x4709);
IkReal x4717=((1.0)*x4708);
IkReal x4718=(x4710*x4711);
evalcond[0]=((((-1.0)*x4714*x4717))+(((-1.0)*r22*x4716))+((x4708*x4712)));
evalcond[1]=((((-1.0)*x4712*x4716))+(((-1.0)*r22*x4717))+((x4709*x4714)));
evalcond[2]=(cj12+((x4708*x4715))+(((-1.0)*r12*x4716))+(((-1.0)*r11*sj17*x4717)));
evalcond[3]=((((-1.0)*r02*x4716))+(((-1.0)*sj12))+((x4708*x4713))+(((-1.0)*r01*sj17*x4717)));
evalcond[4]=((((-1.0)*r02*x4717))+cj12+(((-1.0)*r00*x4716*x4718))+(((-1.0)*x4713*x4716)));
evalcond[5]=((((-1.0)*r10*x4716*x4718))+sj12+(((-1.0)*r12*x4717))+(((-1.0)*x4715*x4716)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j13, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j14), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
if( IKabs(((((2.36617629259053)*py))+(((-0.658427386453172)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.36617629259053)*py))+(((-0.658427386453172)*px))))+IKsqr(((((0.658427386453172)*py))+(((2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((2.36617629259053)*py))+(((-0.658427386453172)*px))), ((((0.658427386453172)*py))+(((2.36617629259053)*px))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[2];
IkReal x4720=IKcos(j12);
IkReal x4721=IKsin(j12);
evalcond[0]=((((0.39225)*x4720))+(((-0.10915)*x4721))+(((-1.0)*px)));
evalcond[1]=((((0.39225)*x4721))+(((-1.0)*py))+(((0.10915)*x4720)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j16eval[3];
sj15=1.0;
cj15=0;
j15=1.5707963267949;
j13=3.14159265358979;
sj13=0;
cj13=-1.0;
j14=-1.5707963267949;
sj14=-1.0;
cj14=0;
IkReal x4722=(((r00*sj17))+((cj17*r01)));
j16eval[0]=x4722;
j16eval[1]=((IKabs(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))))+(IKabs((cj12*r22))));
j16eval[2]=IKsign(x4722);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=1.0;
cj15=0;
j15=1.5707963267949;
j13=3.14159265358979;
sj13=0;
cj13=-1.0;
j14=-1.5707963267949;
sj14=-1.0;
cj14=0;
IkReal x4723=(((cj17*r11))+((r10*sj17)));
j16eval[0]=x4723;
j16eval[1]=((IKabs((r22*sj12)))+(IKabs(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12))))));
j16eval[2]=IKsign(x4723);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=1.0;
cj15=0;
j15=1.5707963267949;
j13=3.14159265358979;
sj13=0;
cj13=-1.0;
j14=-1.5707963267949;
sj14=-1.0;
cj14=0;
IkReal x4724=cj17*cj17;
IkReal x4725=((1.0)*r11);
IkReal x4726=(cj17*r20);
IkReal x4727=(r21*sj17);
IkReal x4728=((((-1.0)*sj17*x4725*x4726))+((r11*r21))+((r10*r20*x4724))+((r12*r22))+(((-1.0)*r21*x4724*x4725))+(((-1.0)*cj17*r10*x4727)));
j16eval[0]=x4728;
j16eval[1]=IKsign(x4728);
j16eval[2]=((IKabs((((cj12*x4727))+(((-1.0)*cj12*x4726)))))+(IKabs((cj12*r22))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x4729=cj17*cj17;
IkReal x4730=((1.0)*r11);
IkReal x4731=(cj17*r20);
IkReal x4732=(r21*sj17);
CheckValue<IkReal> x4733=IKPowWithIntegerCheck(IKsign((((r11*r21))+(((-1.0)*r21*x4729*x4730))+((r10*r20*x4729))+((r12*r22))+(((-1.0)*sj17*x4730*x4731))+(((-1.0)*cj17*r10*x4732)))),-1);
if(!x4733.valid){
continue;
}
CheckValue<IkReal> x4734 = IKatan2WithCheck(IkReal((cj12*r22)),IkReal((((cj12*x4732))+(((-1.0)*cj12*x4731)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4734.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4733.value)))+(x4734.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x4735=IKcos(j16);
IkReal x4736=IKsin(j16);
IkReal x4737=((1.0)*sj12);
CheckValue<IkReal> x4747=IKPowWithIntegerCheck(cj17,-1);
if(!x4747.valid){
continue;
}
IkReal x4738=x4747.value;
IkReal x4739=sj17*sj17;
IkReal x4740=(cj17*r20);
IkReal x4741=(cj17*r00);
IkReal x4742=(r21*sj17);
IkReal x4743=(cj17*r10);
IkReal x4744=((1.0)*x4736);
IkReal x4745=((1.0)*x4735);
IkReal x4746=(x4738*x4739);
evalcond[0]=(((x4735*x4740))+(((-1.0)*r22*x4744))+(((-1.0)*x4742*x4745)));
evalcond[1]=((((-1.0)*r22*x4745))+((x4736*x4742))+(((-1.0)*x4740*x4744)));
evalcond[2]=((((-1.0)*r12*x4744))+(((-1.0)*r11*sj17*x4745))+((x4735*x4743))+cj12);
evalcond[3]=((((-1.0)*r01*sj17*x4745))+((x4735*x4741))+(((-1.0)*x4737))+(((-1.0)*r02*x4744)));
evalcond[4]=((((-1.0)*r00*x4744*x4746))+(((-1.0)*x4741*x4744))+(((-1.0)*cj12))+(((-1.0)*r02*x4745)));
evalcond[5]=((((-1.0)*r12*x4745))+(((-1.0)*r10*x4744*x4746))+(((-1.0)*x4737))+(((-1.0)*x4743*x4744)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x4748=IKPowWithIntegerCheck(IKsign((((cj17*r11))+((r10*sj17)))),-1);
if(!x4748.valid){
continue;
}
CheckValue<IkReal> x4749 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4749.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4748.value)))+(x4749.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x4750=IKcos(j16);
IkReal x4751=IKsin(j16);
IkReal x4752=((1.0)*sj12);
CheckValue<IkReal> x4762=IKPowWithIntegerCheck(cj17,-1);
if(!x4762.valid){
continue;
}
IkReal x4753=x4762.value;
IkReal x4754=sj17*sj17;
IkReal x4755=(cj17*r20);
IkReal x4756=(cj17*r00);
IkReal x4757=(r21*sj17);
IkReal x4758=(cj17*r10);
IkReal x4759=((1.0)*x4751);
IkReal x4760=((1.0)*x4750);
IkReal x4761=(x4753*x4754);
evalcond[0]=((((-1.0)*x4757*x4760))+((x4750*x4755))+(((-1.0)*r22*x4759)));
evalcond[1]=((((-1.0)*x4755*x4759))+(((-1.0)*r22*x4760))+((x4751*x4757)));
evalcond[2]=((((-1.0)*r12*x4759))+((x4750*x4758))+cj12+(((-1.0)*r11*sj17*x4760)));
evalcond[3]=(((x4750*x4756))+(((-1.0)*x4752))+(((-1.0)*r01*sj17*x4760))+(((-1.0)*r02*x4759)));
evalcond[4]=((((-1.0)*r02*x4760))+(((-1.0)*r00*x4759*x4761))+(((-1.0)*x4756*x4759))+(((-1.0)*cj12)));
evalcond[5]=((((-1.0)*r10*x4759*x4761))+(((-1.0)*r12*x4760))+(((-1.0)*x4752))+(((-1.0)*x4758*x4759)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x4763 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4763.valid){
continue;
}
CheckValue<IkReal> x4764=IKPowWithIntegerCheck(IKsign((((r00*sj17))+((cj17*r01)))),-1);
if(!x4764.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x4763.value)+(((1.5707963267949)*(x4764.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x4765=IKcos(j16);
IkReal x4766=IKsin(j16);
IkReal x4767=((1.0)*sj12);
CheckValue<IkReal> x4777=IKPowWithIntegerCheck(cj17,-1);
if(!x4777.valid){
continue;
}
IkReal x4768=x4777.value;
IkReal x4769=sj17*sj17;
IkReal x4770=(cj17*r20);
IkReal x4771=(cj17*r00);
IkReal x4772=(r21*sj17);
IkReal x4773=(cj17*r10);
IkReal x4774=((1.0)*x4766);
IkReal x4775=((1.0)*x4765);
IkReal x4776=(x4768*x4769);
evalcond[0]=((((-1.0)*r22*x4774))+((x4765*x4770))+(((-1.0)*x4772*x4775)));
evalcond[1]=((((-1.0)*r22*x4775))+((x4766*x4772))+(((-1.0)*x4770*x4774)));
evalcond[2]=((((-1.0)*r12*x4774))+(((-1.0)*r11*sj17*x4775))+((x4765*x4773))+cj12);
evalcond[3]=((((-1.0)*x4767))+(((-1.0)*r01*sj17*x4775))+((x4765*x4771))+(((-1.0)*r02*x4774)));
evalcond[4]=((((-1.0)*x4771*x4774))+(((-1.0)*cj12))+(((-1.0)*r00*x4774*x4776))+(((-1.0)*r02*x4775)));
evalcond[5]=((((-1.0)*x4767))+(((-1.0)*r12*x4775))+(((-1.0)*x4773*x4774))+(((-1.0)*r10*x4774*x4776)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j14), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j13), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
if( IKabs(((((-0.160559264620033)*px))+(((-1.20217186450501)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.160559264620033)*py))+(((-1.20217186450501)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.160559264620033)*px))+(((-1.20217186450501)*py))))+IKsqr(((((0.160559264620033)*py))+(((-1.20217186450501)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-0.160559264620033)*px))+(((-1.20217186450501)*py))), ((((0.160559264620033)*py))+(((-1.20217186450501)*px))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[2];
IkReal x4778=IKcos(j12);
IkReal x4779=IKsin(j12);
evalcond[0]=((((-0.10915)*x4779))+(((-1.0)*px))+(((-0.81725)*x4778)));
evalcond[1]=((((0.10915)*x4778))+(((-1.0)*py))+(((-0.81725)*x4779)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j16eval[3];
sj15=1.0;
cj15=0;
j15=1.5707963267949;
j13=-1.5707963267949;
sj13=-1.0;
cj13=0;
j14=0;
sj14=0;
cj14=1.0;
IkReal x4780=(((r00*sj17))+((cj17*r01)));
j16eval[0]=x4780;
j16eval[1]=((IKabs(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))))+(IKabs((cj12*r22))));
j16eval[2]=IKsign(x4780);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=1.0;
cj15=0;
j15=1.5707963267949;
j13=-1.5707963267949;
sj13=-1.0;
cj13=0;
j14=0;
sj14=0;
cj14=1.0;
IkReal x4781=(((cj17*r11))+((r10*sj17)));
j16eval[0]=x4781;
j16eval[1]=((IKabs((r22*sj12)))+(IKabs(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12))))));
j16eval[2]=IKsign(x4781);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=1.0;
cj15=0;
j15=1.5707963267949;
j13=-1.5707963267949;
sj13=-1.0;
cj13=0;
j14=0;
sj14=0;
cj14=1.0;
IkReal x4782=cj17*cj17;
IkReal x4783=((1.0)*r11);
IkReal x4784=(cj17*r20);
IkReal x4785=(r21*sj17);
IkReal x4786=((((-1.0)*sj17*x4783*x4784))+(((-1.0)*cj17*r10*x4785))+((r11*r21))+(((-1.0)*r21*x4782*x4783))+((r12*r22))+((r10*r20*x4782)));
j16eval[0]=x4786;
j16eval[1]=IKsign(x4786);
j16eval[2]=((IKabs(((((-1.0)*cj12*x4784))+((cj12*x4785)))))+(IKabs((cj12*r22))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x4787=cj17*cj17;
IkReal x4788=((1.0)*r11);
IkReal x4789=(cj17*r20);
IkReal x4790=(r21*sj17);
CheckValue<IkReal> x4791 = IKatan2WithCheck(IkReal((cj12*r22)),IkReal(((((-1.0)*cj12*x4789))+((cj12*x4790)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4791.valid){
continue;
}
CheckValue<IkReal> x4792=IKPowWithIntegerCheck(IKsign((((r11*r21))+((r12*r22))+(((-1.0)*sj17*x4788*x4789))+(((-1.0)*r21*x4787*x4788))+(((-1.0)*cj17*r10*x4790))+((r10*r20*x4787)))),-1);
if(!x4792.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x4791.value)+(((1.5707963267949)*(x4792.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x4793=IKcos(j16);
IkReal x4794=IKsin(j16);
CheckValue<IkReal> x4804=IKPowWithIntegerCheck(cj17,-1);
if(!x4804.valid){
continue;
}
IkReal x4795=x4804.value;
IkReal x4796=sj17*sj17;
IkReal x4797=(cj17*r20);
IkReal x4798=(cj17*r00);
IkReal x4799=(r21*sj17);
IkReal x4800=(cj17*r10);
IkReal x4801=((1.0)*x4794);
IkReal x4802=((1.0)*x4793);
IkReal x4803=(x4795*x4796);
evalcond[0]=((((-1.0)*r22*x4801))+((x4793*x4797))+(((-1.0)*x4799*x4802)));
evalcond[1]=((((-1.0)*r22*x4802))+(((-1.0)*x4797*x4801))+((x4794*x4799)));
evalcond[2]=((((-1.0)*r11*sj17*x4802))+cj12+(((-1.0)*r12*x4801))+((x4793*x4800)));
evalcond[3]=(((x4793*x4798))+(((-1.0)*sj12))+(((-1.0)*r02*x4801))+(((-1.0)*r01*sj17*x4802)));
evalcond[4]=(cj12+(((-1.0)*x4798*x4801))+(((-1.0)*r02*x4802))+(((-1.0)*r00*x4801*x4803)));
evalcond[5]=((((-1.0)*x4800*x4801))+(((-1.0)*r10*x4801*x4803))+sj12+(((-1.0)*r12*x4802)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x4805=IKPowWithIntegerCheck(IKsign((((cj17*r11))+((r10*sj17)))),-1);
if(!x4805.valid){
continue;
}
CheckValue<IkReal> x4806 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4806.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4805.value)))+(x4806.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x4807=IKcos(j16);
IkReal x4808=IKsin(j16);
CheckValue<IkReal> x4818=IKPowWithIntegerCheck(cj17,-1);
if(!x4818.valid){
continue;
}
IkReal x4809=x4818.value;
IkReal x4810=sj17*sj17;
IkReal x4811=(cj17*r20);
IkReal x4812=(cj17*r00);
IkReal x4813=(r21*sj17);
IkReal x4814=(cj17*r10);
IkReal x4815=((1.0)*x4808);
IkReal x4816=((1.0)*x4807);
IkReal x4817=(x4809*x4810);
evalcond[0]=(((x4807*x4811))+(((-1.0)*r22*x4815))+(((-1.0)*x4813*x4816)));
evalcond[1]=((((-1.0)*x4811*x4815))+((x4808*x4813))+(((-1.0)*r22*x4816)));
evalcond[2]=(((x4807*x4814))+cj12+(((-1.0)*r11*sj17*x4816))+(((-1.0)*r12*x4815)));
evalcond[3]=(((x4807*x4812))+(((-1.0)*r02*x4815))+(((-1.0)*r01*sj17*x4816))+(((-1.0)*sj12)));
evalcond[4]=((((-1.0)*r02*x4816))+cj12+(((-1.0)*r00*x4815*x4817))+(((-1.0)*x4812*x4815)));
evalcond[5]=((((-1.0)*x4814*x4815))+sj12+(((-1.0)*r12*x4816))+(((-1.0)*r10*x4815*x4817)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x4819 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4819.valid){
continue;
}
CheckValue<IkReal> x4820=IKPowWithIntegerCheck(IKsign((((r00*sj17))+((cj17*r01)))),-1);
if(!x4820.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x4819.value)+(((1.5707963267949)*(x4820.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x4821=IKcos(j16);
IkReal x4822=IKsin(j16);
CheckValue<IkReal> x4832=IKPowWithIntegerCheck(cj17,-1);
if(!x4832.valid){
continue;
}
IkReal x4823=x4832.value;
IkReal x4824=sj17*sj17;
IkReal x4825=(cj17*r20);
IkReal x4826=(cj17*r00);
IkReal x4827=(r21*sj17);
IkReal x4828=(cj17*r10);
IkReal x4829=((1.0)*x4822);
IkReal x4830=((1.0)*x4821);
IkReal x4831=(x4823*x4824);
evalcond[0]=(((x4821*x4825))+(((-1.0)*r22*x4829))+(((-1.0)*x4827*x4830)));
evalcond[1]=(((x4822*x4827))+(((-1.0)*x4825*x4829))+(((-1.0)*r22*x4830)));
evalcond[2]=(((x4821*x4828))+(((-1.0)*r11*sj17*x4830))+cj12+(((-1.0)*r12*x4829)));
evalcond[3]=((((-1.0)*r01*sj17*x4830))+((x4821*x4826))+(((-1.0)*r02*x4829))+(((-1.0)*sj12)));
evalcond[4]=((((-1.0)*x4826*x4829))+(((-1.0)*r00*x4829*x4831))+(((-1.0)*r02*x4830))+cj12);
evalcond[5]=((((-1.0)*r12*x4830))+sj12+(((-1.0)*x4828*x4829))+(((-1.0)*r10*x4829*x4831)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j14, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j13), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
if( IKabs(((((-2.52189136462044)*py))+(((-8.4050211434602)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((8.4050211434602)*py))+(((-2.52189136462044)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.52189136462044)*py))+(((-8.4050211434602)*px))))+IKsqr(((((8.4050211434602)*py))+(((-2.52189136462044)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-2.52189136462044)*py))+(((-8.4050211434602)*px))), ((((8.4050211434602)*py))+(((-2.52189136462044)*px))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[2];
IkReal x4833=IKcos(j12);
IkReal x4834=IKsin(j12);
evalcond[0]=((((-0.10915)*x4834))+(((-1.0)*px))+(((-0.03275)*x4833)));
evalcond[1]=((((-1.0)*py))+(((-0.03275)*x4834))+(((0.10915)*x4833)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j16eval[3];
sj15=1.0;
cj15=0;
j15=1.5707963267949;
j13=-1.5707963267949;
sj13=-1.0;
cj13=0;
j14=3.14159265358979;
sj14=0;
cj14=-1.0;
IkReal x4835=(((r00*sj17))+((cj17*r01)));
j16eval[0]=x4835;
j16eval[1]=((IKabs(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))))+(IKabs((cj12*r22))));
j16eval[2]=IKsign(x4835);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=1.0;
cj15=0;
j15=1.5707963267949;
j13=-1.5707963267949;
sj13=-1.0;
cj13=0;
j14=3.14159265358979;
sj14=0;
cj14=-1.0;
IkReal x4836=(((cj17*r11))+((r10*sj17)));
j16eval[0]=x4836;
j16eval[1]=((IKabs((r22*sj12)))+(IKabs(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12))))));
j16eval[2]=IKsign(x4836);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=1.0;
cj15=0;
j15=1.5707963267949;
j13=-1.5707963267949;
sj13=-1.0;
cj13=0;
j14=3.14159265358979;
sj14=0;
cj14=-1.0;
IkReal x4837=cj17*cj17;
IkReal x4838=((1.0)*r11);
IkReal x4839=(cj17*r20);
IkReal x4840=(r21*sj17);
IkReal x4841=((((-1.0)*cj17*r10*x4840))+((r10*r20*x4837))+((r11*r21))+((r12*r22))+(((-1.0)*sj17*x4838*x4839))+(((-1.0)*r21*x4837*x4838)));
j16eval[0]=x4841;
j16eval[1]=IKsign(x4841);
j16eval[2]=((IKabs((cj12*r22)))+(IKabs((((cj12*x4840))+(((-1.0)*cj12*x4839))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x4842=cj17*cj17;
IkReal x4843=((1.0)*r11);
IkReal x4844=(cj17*r20);
IkReal x4845=(r21*sj17);
CheckValue<IkReal> x4846=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj17*r10*x4845))+(((-1.0)*r21*x4842*x4843))+((r11*r21))+(((-1.0)*sj17*x4843*x4844))+((r12*r22))+((r10*r20*x4842)))),-1);
if(!x4846.valid){
continue;
}
CheckValue<IkReal> x4847 = IKatan2WithCheck(IkReal((cj12*r22)),IkReal((((cj12*x4845))+(((-1.0)*cj12*x4844)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4847.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4846.value)))+(x4847.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x4848=IKcos(j16);
IkReal x4849=IKsin(j16);
IkReal x4850=((1.0)*sj12);
CheckValue<IkReal> x4860=IKPowWithIntegerCheck(cj17,-1);
if(!x4860.valid){
continue;
}
IkReal x4851=x4860.value;
IkReal x4852=sj17*sj17;
IkReal x4853=(cj17*r20);
IkReal x4854=(cj17*r00);
IkReal x4855=(r21*sj17);
IkReal x4856=(cj17*r10);
IkReal x4857=((1.0)*x4849);
IkReal x4858=((1.0)*x4848);
IkReal x4859=(x4851*x4852);
evalcond[0]=(((x4848*x4853))+(((-1.0)*r22*x4857))+(((-1.0)*x4855*x4858)));
evalcond[1]=((((-1.0)*x4853*x4857))+((x4849*x4855))+(((-1.0)*r22*x4858)));
evalcond[2]=((((-1.0)*r12*x4857))+((x4848*x4856))+(((-1.0)*r11*sj17*x4858))+cj12);
evalcond[3]=((((-1.0)*r01*sj17*x4858))+((x4848*x4854))+(((-1.0)*x4850))+(((-1.0)*r02*x4857)));
evalcond[4]=((((-1.0)*r02*x4858))+(((-1.0)*cj12))+(((-1.0)*r00*x4857*x4859))+(((-1.0)*x4854*x4857)));
evalcond[5]=((((-1.0)*x4856*x4857))+(((-1.0)*r10*x4857*x4859))+(((-1.0)*r12*x4858))+(((-1.0)*x4850)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x4861=IKPowWithIntegerCheck(IKsign((((cj17*r11))+((r10*sj17)))),-1);
if(!x4861.valid){
continue;
}
CheckValue<IkReal> x4862 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4862.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4861.value)))+(x4862.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x4863=IKcos(j16);
IkReal x4864=IKsin(j16);
IkReal x4865=((1.0)*sj12);
CheckValue<IkReal> x4875=IKPowWithIntegerCheck(cj17,-1);
if(!x4875.valid){
continue;
}
IkReal x4866=x4875.value;
IkReal x4867=sj17*sj17;
IkReal x4868=(cj17*r20);
IkReal x4869=(cj17*r00);
IkReal x4870=(r21*sj17);
IkReal x4871=(cj17*r10);
IkReal x4872=((1.0)*x4864);
IkReal x4873=((1.0)*x4863);
IkReal x4874=(x4866*x4867);
evalcond[0]=((((-1.0)*r22*x4872))+((x4863*x4868))+(((-1.0)*x4870*x4873)));
evalcond[1]=((((-1.0)*x4868*x4872))+(((-1.0)*r22*x4873))+((x4864*x4870)));
evalcond[2]=(((x4863*x4871))+cj12+(((-1.0)*r12*x4872))+(((-1.0)*r11*sj17*x4873)));
evalcond[3]=((((-1.0)*x4865))+((x4863*x4869))+(((-1.0)*r01*sj17*x4873))+(((-1.0)*r02*x4872)));
evalcond[4]=((((-1.0)*x4869*x4872))+(((-1.0)*r00*x4872*x4874))+(((-1.0)*cj12))+(((-1.0)*r02*x4873)));
evalcond[5]=((((-1.0)*x4865))+(((-1.0)*x4871*x4872))+(((-1.0)*r12*x4873))+(((-1.0)*r10*x4872*x4874)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x4876 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4876.valid){
continue;
}
CheckValue<IkReal> x4877=IKPowWithIntegerCheck(IKsign((((r00*sj17))+((cj17*r01)))),-1);
if(!x4877.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x4876.value)+(((1.5707963267949)*(x4877.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x4878=IKcos(j16);
IkReal x4879=IKsin(j16);
IkReal x4880=((1.0)*sj12);
CheckValue<IkReal> x4890=IKPowWithIntegerCheck(cj17,-1);
if(!x4890.valid){
continue;
}
IkReal x4881=x4890.value;
IkReal x4882=sj17*sj17;
IkReal x4883=(cj17*r20);
IkReal x4884=(cj17*r00);
IkReal x4885=(r21*sj17);
IkReal x4886=(cj17*r10);
IkReal x4887=((1.0)*x4879);
IkReal x4888=((1.0)*x4878);
IkReal x4889=(x4881*x4882);
evalcond[0]=((((-1.0)*x4885*x4888))+((x4878*x4883))+(((-1.0)*r22*x4887)));
evalcond[1]=((((-1.0)*x4883*x4887))+((x4879*x4885))+(((-1.0)*r22*x4888)));
evalcond[2]=((((-1.0)*r12*x4887))+cj12+((x4878*x4886))+(((-1.0)*r11*sj17*x4888)));
evalcond[3]=((((-1.0)*x4880))+(((-1.0)*r02*x4887))+((x4878*x4884))+(((-1.0)*r01*sj17*x4888)));
evalcond[4]=((((-1.0)*r00*x4887*x4889))+(((-1.0)*r02*x4888))+(((-1.0)*x4884*x4887))+(((-1.0)*cj12)));
evalcond[5]=((((-1.0)*r12*x4888))+(((-1.0)*x4880))+(((-1.0)*r10*x4887*x4889))+(((-1.0)*x4886*x4887)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12, j16]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x4891=(r00*sj17);
IkReal x4892=(cj13*cj14);
IkReal x4893=(cj17*r01);
IkReal x4894=(sj13*sj14);
IkReal x4895=((8500.0)*sj13);
IkReal x4896=((20000.0)*px);
IkReal x4897=((7845.0)*cj13*sj14);
IkReal x4898=((7845.0)*cj14*sj13);
CheckValue<IkReal> x4899=IKPowWithIntegerCheck(((((-2183.0)*x4894))+(((2183.0)*x4892))),-1);
if(!x4899.valid){
continue;
}
CheckValue<IkReal> x4900=IKPowWithIntegerCheck(((((-1.0)*x4894))+x4892),-1);
if(!x4900.valid){
continue;
}
if( IKabs(((x4899.value)*(((((-1893.0)*x4892*x4893))+(((-1893.0)*x4891*x4892))+(((-1.0)*x4893*x4898))+(((-1.0)*x4893*x4895))+(((-1.0)*x4893*x4897))+(((1893.0)*x4893*x4894))+(((-1.0)*x4891*x4897))+(((-1.0)*x4891*x4895))+(((-1.0)*x4891*x4898))+(((-1.0)*x4892*x4896))+(((1893.0)*x4891*x4894))+((x4894*x4896)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x4900.value)*(((((-1.0)*x4891))+(((-1.0)*x4893)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x4899.value)*(((((-1893.0)*x4892*x4893))+(((-1893.0)*x4891*x4892))+(((-1.0)*x4893*x4898))+(((-1.0)*x4893*x4895))+(((-1.0)*x4893*x4897))+(((1893.0)*x4893*x4894))+(((-1.0)*x4891*x4897))+(((-1.0)*x4891*x4895))+(((-1.0)*x4891*x4898))+(((-1.0)*x4892*x4896))+(((1893.0)*x4891*x4894))+((x4894*x4896))))))+IKsqr(((x4900.value)*(((((-1.0)*x4891))+(((-1.0)*x4893))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((x4899.value)*(((((-1893.0)*x4892*x4893))+(((-1893.0)*x4891*x4892))+(((-1.0)*x4893*x4898))+(((-1.0)*x4893*x4895))+(((-1.0)*x4893*x4897))+(((1893.0)*x4893*x4894))+(((-1.0)*x4891*x4897))+(((-1.0)*x4891*x4895))+(((-1.0)*x4891*x4898))+(((-1.0)*x4892*x4896))+(((1893.0)*x4891*x4894))+((x4894*x4896))))), ((x4900.value)*(((((-1.0)*x4891))+(((-1.0)*x4893))))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[4];
IkReal x4901=IKcos(j12);
IkReal x4902=IKsin(j12);
IkReal x4903=((0.09465)*cj17);
IkReal x4904=(r10*sj17);
IkReal x4905=((1.0)*sj13);
IkReal x4906=(r00*sj17);
IkReal x4907=((0.425)*sj13);
IkReal x4908=((0.39225)*sj13);
IkReal x4909=(cj13*x4902);
IkReal x4910=(sj14*x4901);
IkReal x4911=(cj14*x4901);
evalcond[0]=(x4906+(((-1.0)*x4905*x4910))+((cj17*r01))+((cj13*x4911)));
evalcond[1]=(x4904+((cj14*x4909))+((cj17*r11))+(((-1.0)*sj14*x4902*x4905)));
evalcond[2]=((((-1.0)*r01*x4903))+(((-0.09465)*x4906))+(((0.39225)*cj13*x4910))+((x4901*x4907))+((x4908*x4911))+(((-1.0)*px))+(((-0.10915)*x4902)));
evalcond[3]=((((-1.0)*r11*x4903))+(((-0.09465)*x4904))+(((0.10915)*x4901))+((x4902*x4907))+(((0.39225)*sj14*x4909))+(((-1.0)*py))+((cj14*x4902*x4908)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j16eval[3];
sj15=1.0;
cj15=0;
j15=1.5707963267949;
IkReal x4912=(((r00*sj17))+((cj17*r01)));
j16eval[0]=x4912;
j16eval[1]=((IKabs(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))))+(IKabs((cj12*r22))));
j16eval[2]=IKsign(x4912);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=1.0;
cj15=0;
j15=1.5707963267949;
IkReal x4913=(((cj17*r11))+((r10*sj17)));
j16eval[0]=x4913;
j16eval[1]=((IKabs((r22*sj12)))+(IKabs(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12))))));
j16eval[2]=IKsign(x4913);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=1.0;
cj15=0;
j15=1.5707963267949;
IkReal x4914=((1.0)*cj12);
IkReal x4915=((1.0)*sj12);
IkReal x4916=(((r20*sj17))+((cj17*r21)));
j16eval[0]=x4916;
j16eval[1]=IKsign(x4916);
j16eval[2]=((IKabs(((((-1.0)*cj17*r10*x4915))+(((-1.0)*cj17*r00*x4914))+((cj12*r01*sj17))+((r11*sj12*sj17)))))+(IKabs(((((-1.0)*r02*x4914))+(((-1.0)*r12*x4915))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x4918 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4918)==0){
continue;
}
IkReal x4917=pow(x4918,-0.5);
CheckValue<IkReal> x4919 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x4919.valid){
continue;
}
IkReal gconst114=((-1.0)*(x4919.value));
IkReal gconst115=((-1.0)*r21*x4917);
IkReal gconst116=(r20*x4917);
CheckValue<IkReal> x4920 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x4920.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j17+(x4920.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x4923 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x4923.valid){
continue;
}
IkReal x4921=((-1.0)*(x4923.value));
IkReal x4922=x4917;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
sj17=gconst115;
cj17=gconst116;
j17=x4921;
IkReal gconst114=x4921;
IkReal gconst115=((-1.0)*r21*x4922);
IkReal gconst116=(r20*x4922);
j16eval[0]=cj12;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x4926 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x4926.valid){
continue;
}
IkReal x4924=((-1.0)*(x4926.value));
IkReal x4925=x4917;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
sj17=gconst115;
cj17=gconst116;
j17=x4924;
IkReal gconst114=x4924;
IkReal gconst115=((-1.0)*r21*x4925);
IkReal gconst116=(r20*x4925);
j16eval[0]=sj12;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
CheckValue<IkReal> x4929 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x4929.valid){
continue;
}
IkReal x4927=((-1.0)*(x4929.value));
IkReal x4928=x4917;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
sj17=gconst115;
cj17=gconst116;
j17=x4927;
IkReal gconst114=x4927;
IkReal gconst115=((-1.0)*r21*x4928);
IkReal gconst116=(r20*x4928);
IkReal x4930=r22*r22;
CheckValue<IkReal> x4933=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x4930))),-1);
if(!x4933.valid){
continue;
}
IkReal x4931=x4933.value;
IkReal x4932=(x4930+((x4931*(r21*r21*r21*r21)))+((x4931*(r20*r20*r20*r20)))+(((2.0)*x4931*(r20*r20)*(r21*r21))));
j16eval[0]=x4932;
j16eval[1]=IKsign(x4932);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x4934=(gconst115*r21);
IkReal x4935=(gconst116*r20);
IkReal x4936=(cj13*cj14);
IkReal x4937=(sj13*sj14);
CheckValue<IkReal> x4938=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x4934*x4934)+(x4935*x4935)+(((-2.0)*x4934*x4935)))),-1);
if(!x4938.valid){
continue;
}
CheckValue<IkReal> x4939 = IKatan2WithCheck(IkReal((((x4935*x4937))+((x4934*x4936))+(((-1.0)*x4934*x4937))+(((-1.0)*x4935*x4936)))),IkReal((((r22*x4937))+(((-1.0)*r22*x4936)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4939.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4938.value)))+(x4939.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x4940=IKcos(j16);
IkReal x4941=IKsin(j16);
IkReal x4942=((1.0)*sj12);
IkReal x4943=((1.0)*cj12);
IkReal x4944=(gconst115*r20);
IkReal x4945=(gconst116*r21);
IkReal x4946=(gconst115*x4941);
IkReal x4947=((1.0)*x4940);
IkReal x4948=(gconst116*x4940);
IkReal x4949=((1.0)*x4941);
evalcond[0]=((((-1.0)*gconst115*r21*x4947))+(((-1.0)*r22*x4949))+((r20*x4948)));
evalcond[1]=((((-1.0)*r12*x4949))+(((-1.0)*gconst115*r11*x4947))+((r10*x4948))+cj12);
evalcond[2]=(((r00*x4948))+(((-1.0)*gconst115*r01*x4947))+(((-1.0)*x4942))+(((-1.0)*r02*x4949)));
evalcond[3]=((((-1.0)*cj13*cj14))+((r21*x4946))+(((-1.0)*r22*x4947))+((sj13*sj14))+(((-1.0)*gconst116*r20*x4949)));
evalcond[4]=((((-1.0)*x4943*x4945))+(((-1.0)*x4943*x4944))+((r01*x4946))+(((-1.0)*gconst116*r00*x4949))+(((-1.0)*r02*x4947)));
evalcond[5]=((((-1.0)*x4942*x4944))+(((-1.0)*x4942*x4945))+((r11*x4946))+(((-1.0)*r12*x4947))+(((-1.0)*gconst116*r10*x4949)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x4950 = IKatan2WithCheck(IkReal((((gconst116*r20*sj12))+(((-1.0)*gconst115*r21*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4950.valid){
continue;
}
CheckValue<IkReal> x4951=IKPowWithIntegerCheck(IKsign((((gconst115*r10))+((gconst116*r11)))),-1);
if(!x4951.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x4950.value)+(((1.5707963267949)*(x4951.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x4952=IKcos(j16);
IkReal x4953=IKsin(j16);
IkReal x4954=((1.0)*sj12);
IkReal x4955=((1.0)*cj12);
IkReal x4956=(gconst115*r20);
IkReal x4957=(gconst116*r21);
IkReal x4958=(gconst115*x4953);
IkReal x4959=((1.0)*x4952);
IkReal x4960=(gconst116*x4952);
IkReal x4961=((1.0)*x4953);
evalcond[0]=((((-1.0)*r22*x4961))+((r20*x4960))+(((-1.0)*gconst115*r21*x4959)));
evalcond[1]=(((r10*x4960))+(((-1.0)*gconst115*r11*x4959))+cj12+(((-1.0)*r12*x4961)));
evalcond[2]=((((-1.0)*x4954))+(((-1.0)*r02*x4961))+((r00*x4960))+(((-1.0)*gconst115*r01*x4959)));
evalcond[3]=((((-1.0)*cj13*cj14))+(((-1.0)*r22*x4959))+(((-1.0)*gconst116*r20*x4961))+((sj13*sj14))+((r21*x4958)));
evalcond[4]=((((-1.0)*x4955*x4957))+(((-1.0)*x4955*x4956))+(((-1.0)*r02*x4959))+((r01*x4958))+(((-1.0)*gconst116*r00*x4961)));
evalcond[5]=(((r11*x4958))+(((-1.0)*gconst116*r10*x4961))+(((-1.0)*r12*x4959))+(((-1.0)*x4954*x4956))+(((-1.0)*x4954*x4957)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x4962 = IKatan2WithCheck(IkReal((((cj12*gconst116*r20))+(((-1.0)*cj12*gconst115*r21)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4962.valid){
continue;
}
CheckValue<IkReal> x4963=IKPowWithIntegerCheck(IKsign((((gconst115*r00))+((gconst116*r01)))),-1);
if(!x4963.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x4962.value)+(((1.5707963267949)*(x4963.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x4964=IKcos(j16);
IkReal x4965=IKsin(j16);
IkReal x4966=((1.0)*sj12);
IkReal x4967=((1.0)*cj12);
IkReal x4968=(gconst115*r20);
IkReal x4969=(gconst116*r21);
IkReal x4970=(gconst115*x4965);
IkReal x4971=((1.0)*x4964);
IkReal x4972=(gconst116*x4964);
IkReal x4973=((1.0)*x4965);
evalcond[0]=((((-1.0)*r22*x4973))+((r20*x4972))+(((-1.0)*gconst115*r21*x4971)));
evalcond[1]=(((r10*x4972))+(((-1.0)*r12*x4973))+cj12+(((-1.0)*gconst115*r11*x4971)));
evalcond[2]=((((-1.0)*x4966))+(((-1.0)*r02*x4973))+((r00*x4972))+(((-1.0)*gconst115*r01*x4971)));
evalcond[3]=((((-1.0)*cj13*cj14))+(((-1.0)*r22*x4971))+((sj13*sj14))+(((-1.0)*gconst116*r20*x4973))+((r21*x4970)));
evalcond[4]=((((-1.0)*r02*x4971))+(((-1.0)*x4967*x4969))+(((-1.0)*x4967*x4968))+(((-1.0)*gconst116*r00*x4973))+((r01*x4970)));
evalcond[5]=(((r11*x4970))+(((-1.0)*r12*x4971))+(((-1.0)*gconst116*r10*x4973))+(((-1.0)*x4966*x4968))+(((-1.0)*x4966*x4969)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4975 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4975)==0){
continue;
}
IkReal x4974=pow(x4975,-0.5);
CheckValue<IkReal> x4976 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x4976.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x4976.value))));
IkReal gconst118=((1.0)*r21*x4974);
IkReal gconst119=((-1.0)*r20*x4974);
CheckValue<IkReal> x4977 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x4977.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j17+(x4977.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x4980 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x4980.valid){
continue;
}
IkReal x4978=((1.0)*(x4980.value));
IkReal x4979=x4974;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
sj17=gconst118;
cj17=gconst119;
j17=((3.14159265)+(((-1.0)*x4978)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x4978)));
IkReal gconst118=((1.0)*r21*x4979);
IkReal gconst119=((-1.0)*r20*x4979);
IkReal x4981=r22*r22;
IkReal x4982=((1.0)*x4981);
CheckValue<IkReal> x4986=IKPowWithIntegerCheck(((-1.0)+x4981),-1);
if(!x4986.valid){
continue;
}
IkReal x4983=x4986.value;
if((((1.0)+(((-1.0)*x4982)))) < -0.00001)
continue;
IkReal x4984=IKsqrt(((1.0)+(((-1.0)*x4982))));
IkReal x4985=(cj12*x4983*x4984);
j16eval[0]=((IKabs((x4985+(((-1.0)*x4982*x4985)))))+(IKabs((cj12*r22))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x4989 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x4989.valid){
continue;
}
IkReal x4987=((1.0)*(x4989.value));
IkReal x4988=x4974;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
sj17=gconst118;
cj17=gconst119;
j17=((3.14159265)+(((-1.0)*x4987)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x4987)));
IkReal gconst118=((1.0)*r21*x4988);
IkReal gconst119=((-1.0)*r20*x4988);
IkReal x4990=r22*r22;
IkReal x4991=((1.0)*x4990);
CheckValue<IkReal> x4995=IKPowWithIntegerCheck(((-1.0)+x4990),-1);
if(!x4995.valid){
continue;
}
IkReal x4992=x4995.value;
if((((1.0)+(((-1.0)*x4991)))) < -0.00001)
continue;
IkReal x4993=IKsqrt(((1.0)+(((-1.0)*x4991))));
IkReal x4994=(sj12*x4992*x4993);
j16eval[0]=((IKabs((r22*sj12)))+(IKabs((x4994+(((-1.0)*x4991*x4994))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
CheckValue<IkReal> x4998 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x4998.valid){
continue;
}
IkReal x4996=((1.0)*(x4998.value));
IkReal x4997=x4974;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
sj17=gconst118;
cj17=gconst119;
j17=((3.14159265)+(((-1.0)*x4996)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x4996)));
IkReal gconst118=((1.0)*r21*x4997);
IkReal gconst119=((-1.0)*r20*x4997);
IkReal x4999=r22*r22;
IkReal x5000=(cj12*r02);
IkReal x5001=(r12*sj12);
CheckValue<IkReal> x5005=IKPowWithIntegerCheck(((-1.0)+x4999),-1);
if(!x5005.valid){
continue;
}
IkReal x5002=x5005.value;
if((((1.0)+(((-1.0)*x4999)))) < -0.00001)
continue;
IkReal x5003=IKsqrt(((1.0)+(((-1.0)*x4999))));
IkReal x5004=(r22*x5002*x5003);
j16eval[0]=0;
j16eval[1]=((IKabs((((x5001*x5004))+((x5000*x5004)))))+(IKabs(((((-1.0)*x5001))+(((-1.0)*x5000))))));
j16eval[2]=0;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x5006=((1.0)*gconst119);
CheckValue<IkReal> x5007=IKPowWithIntegerCheck(IKsign((((gconst119*r21))+((gconst118*r20)))),-1);
if(!x5007.valid){
continue;
}
CheckValue<IkReal> x5008 = IKatan2WithCheck(IkReal((((cj12*gconst118*r01))+((gconst118*r11*sj12))+(((-1.0)*r10*sj12*x5006))+(((-1.0)*cj12*r00*x5006)))),IkReal(((((-1.0)*cj12*r02))+(((-1.0)*r12*sj12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5008.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5007.value)))+(x5008.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x5009=IKcos(j16);
IkReal x5010=IKsin(j16);
IkReal x5011=(gconst118*r11);
IkReal x5012=(gconst118*r01);
IkReal x5013=(gconst118*r21);
IkReal x5014=((1.0)*sj12);
IkReal x5015=(gconst119*r21);
IkReal x5016=((1.0)*cj12);
IkReal x5017=(gconst118*r20);
IkReal x5018=((1.0)*x5009);
IkReal x5019=((1.0)*x5010);
IkReal x5020=(gconst119*x5009);
IkReal x5021=(gconst119*x5019);
evalcond[0]=(((r20*x5020))+(((-1.0)*r22*x5019))+(((-1.0)*x5013*x5018)));
evalcond[1]=(cj12+((r10*x5020))+(((-1.0)*x5011*x5018))+(((-1.0)*r12*x5019)));
evalcond[2]=((((-1.0)*r02*x5019))+((r00*x5020))+(((-1.0)*x5012*x5018))+(((-1.0)*x5014)));
evalcond[3]=((((-1.0)*cj13*cj14))+(((-1.0)*r20*x5021))+((x5010*x5013))+(((-1.0)*r22*x5018))+((sj13*sj14)));
evalcond[4]=((((-1.0)*r00*x5021))+((x5010*x5012))+(((-1.0)*r02*x5018))+(((-1.0)*x5016*x5017))+(((-1.0)*x5015*x5016)));
evalcond[5]=(((x5010*x5011))+(((-1.0)*x5014*x5015))+(((-1.0)*x5014*x5017))+(((-1.0)*r12*x5018))+(((-1.0)*r10*x5021)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x5022=IKPowWithIntegerCheck(IKsign((((gconst118*r10))+((gconst119*r11)))),-1);
if(!x5022.valid){
continue;
}
CheckValue<IkReal> x5023 = IKatan2WithCheck(IkReal(((((-1.0)*gconst118*r21*sj12))+((gconst119*r20*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5023.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5022.value)))+(x5023.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x5024=IKcos(j16);
IkReal x5025=IKsin(j16);
IkReal x5026=(gconst118*r11);
IkReal x5027=(gconst118*r01);
IkReal x5028=(gconst118*r21);
IkReal x5029=((1.0)*sj12);
IkReal x5030=(gconst119*r21);
IkReal x5031=((1.0)*cj12);
IkReal x5032=(gconst118*r20);
IkReal x5033=((1.0)*x5024);
IkReal x5034=((1.0)*x5025);
IkReal x5035=(gconst119*x5024);
IkReal x5036=(gconst119*x5034);
evalcond[0]=((((-1.0)*x5028*x5033))+((r20*x5035))+(((-1.0)*r22*x5034)));
evalcond[1]=(((r10*x5035))+(((-1.0)*r12*x5034))+cj12+(((-1.0)*x5026*x5033)));
evalcond[2]=((((-1.0)*x5027*x5033))+((r00*x5035))+(((-1.0)*r02*x5034))+(((-1.0)*x5029)));
evalcond[3]=((((-1.0)*cj13*cj14))+((x5025*x5028))+((sj13*sj14))+(((-1.0)*r22*x5033))+(((-1.0)*r20*x5036)));
evalcond[4]=((((-1.0)*x5030*x5031))+(((-1.0)*x5031*x5032))+((x5025*x5027))+(((-1.0)*r02*x5033))+(((-1.0)*r00*x5036)));
evalcond[5]=((((-1.0)*x5029*x5030))+(((-1.0)*x5029*x5032))+(((-1.0)*r12*x5033))+((x5025*x5026))+(((-1.0)*r10*x5036)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x5037=IKPowWithIntegerCheck(IKsign((((gconst118*r00))+((gconst119*r01)))),-1);
if(!x5037.valid){
continue;
}
CheckValue<IkReal> x5038 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*gconst118*r21))+((cj12*gconst119*r20)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5038.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5037.value)))+(x5038.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x5039=IKcos(j16);
IkReal x5040=IKsin(j16);
IkReal x5041=(gconst118*r11);
IkReal x5042=(gconst118*r01);
IkReal x5043=(gconst118*r21);
IkReal x5044=((1.0)*sj12);
IkReal x5045=(gconst119*r21);
IkReal x5046=((1.0)*cj12);
IkReal x5047=(gconst118*r20);
IkReal x5048=((1.0)*x5039);
IkReal x5049=((1.0)*x5040);
IkReal x5050=(gconst119*x5039);
IkReal x5051=(gconst119*x5049);
evalcond[0]=(((r20*x5050))+(((-1.0)*x5043*x5048))+(((-1.0)*r22*x5049)));
evalcond[1]=(((r10*x5050))+(((-1.0)*x5041*x5048))+cj12+(((-1.0)*r12*x5049)));
evalcond[2]=((((-1.0)*x5044))+(((-1.0)*r02*x5049))+(((-1.0)*x5042*x5048))+((r00*x5050)));
evalcond[3]=((((-1.0)*cj13*cj14))+((x5040*x5043))+((sj13*sj14))+(((-1.0)*r22*x5048))+(((-1.0)*r20*x5051)));
evalcond[4]=((((-1.0)*r02*x5048))+((x5040*x5042))+(((-1.0)*x5045*x5046))+(((-1.0)*x5046*x5047))+(((-1.0)*r00*x5051)));
evalcond[5]=((((-1.0)*r10*x5051))+((x5040*x5041))+(((-1.0)*r12*x5048))+(((-1.0)*x5044*x5047))+(((-1.0)*x5044*x5045)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5053 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5053)==0){
continue;
}
IkReal x5052=pow(x5053,-0.5);
CheckValue<IkReal> x5054 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5054.valid){
continue;
}
IkReal gconst120=((-1.0)*(x5054.value));
IkReal gconst121=((-1.0)*r11*x5052);
IkReal gconst122=(r10*x5052);
CheckValue<IkReal> x5055 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5055.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5055.value)+j17)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
CheckValue<IkReal> x5058 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5058.valid){
continue;
}
IkReal x5056=((-1.0)*(x5058.value));
IkReal x5057=x5052;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
sj17=gconst121;
cj17=gconst122;
j17=x5056;
IkReal gconst120=x5056;
IkReal gconst121=((-1.0)*r11*x5057);
IkReal gconst122=(r10*x5057);
j16eval[0]=cj12;
j16eval[1]=r22;
j16eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x5059=((1.0)*gconst122);
CheckValue<IkReal> x5060=IKPowWithIntegerCheck(IKsign((((gconst122*r21))+((gconst121*r20)))),-1);
if(!x5060.valid){
continue;
}
CheckValue<IkReal> x5061 = IKatan2WithCheck(IkReal(((((-1.0)*r10*sj12*x5059))+(((-1.0)*cj12*r00*x5059))+((cj12*gconst121*r01))+((gconst121*r11*sj12)))),IkReal(((((-1.0)*cj12*r02))+(((-1.0)*r12*sj12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5061.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5060.value)))+(x5061.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x5062=IKcos(j16);
IkReal x5063=IKsin(j16);
IkReal x5064=(gconst122*r00);
IkReal x5065=((1.0)*sj12);
IkReal x5066=(gconst121*r20);
IkReal x5067=(gconst122*r20);
IkReal x5068=(gconst122*r10);
IkReal x5069=((1.0)*gconst122*r21);
IkReal x5070=(gconst121*x5063);
IkReal x5071=((1.0)*x5063);
IkReal x5072=((1.0)*x5062);
evalcond[0]=((((-1.0)*gconst121*r21*x5072))+((x5062*x5067))+(((-1.0)*r22*x5071)));
evalcond[1]=(((x5062*x5068))+cj12+(((-1.0)*gconst121*r11*x5072))+(((-1.0)*r12*x5071)));
evalcond[2]=((((-1.0)*x5065))+(((-1.0)*r02*x5071))+(((-1.0)*gconst121*r01*x5072))+((x5062*x5064)));
evalcond[3]=((((-1.0)*cj13*cj14))+(((-1.0)*x5067*x5071))+((r21*x5070))+((sj13*sj14))+(((-1.0)*r22*x5072)));
evalcond[4]=((((-1.0)*cj12*x5069))+(((-1.0)*x5064*x5071))+(((-1.0)*r02*x5072))+((r01*x5070))+(((-1.0)*cj12*x5066)));
evalcond[5]=((((-1.0)*x5065*x5066))+(((-1.0)*r12*x5072))+(((-1.0)*gconst122*r21*x5065))+(((-1.0)*x5068*x5071))+((r11*x5070)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x5073 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*gconst121*r21))+((cj12*gconst122*r20)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5073.valid){
continue;
}
CheckValue<IkReal> x5074=IKPowWithIntegerCheck(IKsign((((gconst122*r01))+((gconst121*r00)))),-1);
if(!x5074.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x5073.value)+(((1.5707963267949)*(x5074.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x5075=IKcos(j16);
IkReal x5076=IKsin(j16);
IkReal x5077=(gconst122*r00);
IkReal x5078=((1.0)*sj12);
IkReal x5079=(gconst121*r20);
IkReal x5080=(gconst122*r20);
IkReal x5081=(gconst122*r10);
IkReal x5082=((1.0)*gconst122*r21);
IkReal x5083=(gconst121*x5076);
IkReal x5084=((1.0)*x5076);
IkReal x5085=((1.0)*x5075);
evalcond[0]=((((-1.0)*gconst121*r21*x5085))+(((-1.0)*r22*x5084))+((x5075*x5080)));
evalcond[1]=((((-1.0)*r12*x5084))+cj12+(((-1.0)*gconst121*r11*x5085))+((x5075*x5081)));
evalcond[2]=((((-1.0)*x5078))+(((-1.0)*gconst121*r01*x5085))+((x5075*x5077))+(((-1.0)*r02*x5084)));
evalcond[3]=((((-1.0)*cj13*cj14))+((r21*x5083))+(((-1.0)*x5080*x5084))+((sj13*sj14))+(((-1.0)*r22*x5085)));
evalcond[4]=((((-1.0)*x5077*x5084))+((r01*x5083))+(((-1.0)*cj12*x5082))+(((-1.0)*r02*x5085))+(((-1.0)*cj12*x5079)));
evalcond[5]=((((-1.0)*r12*x5085))+(((-1.0)*x5078*x5079))+((r11*x5083))+(((-1.0)*x5081*x5084))+(((-1.0)*gconst122*r21*x5078)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5087 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5087)==0){
continue;
}
IkReal x5086=pow(x5087,-0.5);
CheckValue<IkReal> x5088 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5088.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x5088.value))));
IkReal gconst124=((1.0)*r11*x5086);
IkReal gconst125=((-1.0)*r10*x5086);
CheckValue<IkReal> x5089 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5089.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5089.value)+j17)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
CheckValue<IkReal> x5092 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5092.valid){
continue;
}
IkReal x5090=((1.0)*(x5092.value));
IkReal x5091=x5086;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
sj17=gconst124;
cj17=gconst125;
j17=((3.14159265)+(((-1.0)*x5090)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5090)));
IkReal gconst124=((1.0)*r11*x5091);
IkReal gconst125=((-1.0)*r10*x5091);
j16eval[0]=cj12;
j16eval[1]=r22;
j16eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[5];
CheckValue<IkReal> x5095 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5095.valid){
continue;
}
IkReal x5093=((1.0)*(x5095.value));
IkReal x5094=x5086;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
sj17=gconst124;
cj17=gconst125;
j17=((3.14159265)+(((-1.0)*x5093)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5093)));
IkReal gconst124=((1.0)*r11*x5094);
IkReal gconst125=((-1.0)*r10*x5094);
j16eval[0]=0;
j16eval[1]=0;
j16eval[2]=r22;
j16eval[3]=sj12;
j16eval[4]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  || IKabs(j16eval[3]) < 0.0000010000000000  || IKabs(j16eval[4]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x5098 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5098.valid){
continue;
}
IkReal x5096=((1.0)*(x5098.value));
IkReal x5097=x5086;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
sj17=gconst124;
cj17=gconst125;
j17=((3.14159265)+(((-1.0)*x5096)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5096)));
IkReal gconst124=((1.0)*r11*x5097);
IkReal gconst125=((-1.0)*r10*x5097);
IkReal x5099=r12*r12;
IkReal x5100=(cj12*r02);
IkReal x5101=x5086;
IkReal x5102=(sj12*x5101);
j16eval[0]=((IKabs(((((-1.0)*x5102))+((x5099*x5102))+((r12*x5100*x5101)))))+(IKabs(((((-1.0)*x5100))+(((-1.0)*r12*sj12))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x5103=((1.0)*cj12);
IkReal x5104=((1.0)*sj12);
CheckValue<IkReal> x5105 = IKatan2WithCheck(IkReal((((gconst124*r11*sj12))+((cj12*gconst124*r01))+(((-1.0)*gconst125*r10*x5104))+(((-1.0)*gconst125*r00*x5103)))),IkReal(((((-1.0)*r02*x5103))+(((-1.0)*r12*x5104)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5105.valid){
continue;
}
CheckValue<IkReal> x5106=IKPowWithIntegerCheck(IKsign((((gconst124*r20))+((gconst125*r21)))),-1);
if(!x5106.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x5105.value)+(((1.5707963267949)*(x5106.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x5107=IKcos(j16);
IkReal x5108=IKsin(j16);
IkReal x5109=((1.0)*gconst125);
IkReal x5110=((1.0)*sj12);
IkReal x5111=(gconst124*r20);
IkReal x5112=(gconst124*x5108);
IkReal x5113=((1.0)*x5107);
IkReal x5114=((1.0)*x5108);
IkReal x5115=(gconst125*x5107);
evalcond[0]=(((r20*x5115))+(((-1.0)*r22*x5114))+(((-1.0)*gconst124*r21*x5113)));
evalcond[1]=(((r10*x5115))+(((-1.0)*gconst124*r11*x5113))+cj12+(((-1.0)*r12*x5114)));
evalcond[2]=(((r00*x5115))+(((-1.0)*r02*x5114))+(((-1.0)*gconst124*r01*x5113))+(((-1.0)*x5110)));
evalcond[3]=((((-1.0)*cj13*cj14))+(((-1.0)*r20*x5108*x5109))+(((-1.0)*r22*x5113))+((r21*x5112))+((sj13*sj14)));
evalcond[4]=(((r01*x5112))+(((-1.0)*r02*x5113))+(((-1.0)*cj12*x5111))+(((-1.0)*cj12*r21*x5109))+(((-1.0)*r00*x5108*x5109)));
evalcond[5]=((((-1.0)*r21*sj12*x5109))+(((-1.0)*x5110*x5111))+((r11*x5112))+(((-1.0)*r12*x5113))+(((-1.0)*r10*x5108*x5109)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x5116=IKPowWithIntegerCheck(IKsign((((gconst125*r11))+((gconst124*r10)))),-1);
if(!x5116.valid){
continue;
}
CheckValue<IkReal> x5117 = IKatan2WithCheck(IkReal((((gconst125*r20*sj12))+(((-1.0)*gconst124*r21*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5117.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5116.value)))+(x5117.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x5118=IKcos(j16);
IkReal x5119=IKsin(j16);
IkReal x5120=((1.0)*gconst125);
IkReal x5121=((1.0)*sj12);
IkReal x5122=(gconst124*r20);
IkReal x5123=(gconst124*x5119);
IkReal x5124=((1.0)*x5118);
IkReal x5125=((1.0)*x5119);
IkReal x5126=(gconst125*x5118);
evalcond[0]=((((-1.0)*gconst124*r21*x5124))+((r20*x5126))+(((-1.0)*r22*x5125)));
evalcond[1]=(((r10*x5126))+cj12+(((-1.0)*r12*x5125))+(((-1.0)*gconst124*r11*x5124)));
evalcond[2]=(((r00*x5126))+(((-1.0)*x5121))+(((-1.0)*r02*x5125))+(((-1.0)*gconst124*r01*x5124)));
evalcond[3]=((((-1.0)*cj13*cj14))+(((-1.0)*r20*x5119*x5120))+((sj13*sj14))+((r21*x5123))+(((-1.0)*r22*x5124)));
evalcond[4]=((((-1.0)*cj12*r21*x5120))+((r01*x5123))+(((-1.0)*r02*x5124))+(((-1.0)*cj12*x5122))+(((-1.0)*r00*x5119*x5120)));
evalcond[5]=(((r11*x5123))+(((-1.0)*r10*x5119*x5120))+(((-1.0)*r21*sj12*x5120))+(((-1.0)*x5121*x5122))+(((-1.0)*r12*x5124)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x5127=IKPowWithIntegerCheck(IKsign((((gconst124*r00))+((gconst125*r01)))),-1);
if(!x5127.valid){
continue;
}
CheckValue<IkReal> x5128 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*gconst124*r21))+((cj12*gconst125*r20)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5128.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5127.value)))+(x5128.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x5129=IKcos(j16);
IkReal x5130=IKsin(j16);
IkReal x5131=((1.0)*gconst125);
IkReal x5132=((1.0)*sj12);
IkReal x5133=(gconst124*r20);
IkReal x5134=(gconst124*x5130);
IkReal x5135=((1.0)*x5129);
IkReal x5136=((1.0)*x5130);
IkReal x5137=(gconst125*x5129);
evalcond[0]=((((-1.0)*gconst124*r21*x5135))+((r20*x5137))+(((-1.0)*r22*x5136)));
evalcond[1]=(((r10*x5137))+cj12+(((-1.0)*r12*x5136))+(((-1.0)*gconst124*r11*x5135)));
evalcond[2]=(((r00*x5137))+(((-1.0)*x5132))+(((-1.0)*r02*x5136))+(((-1.0)*gconst124*r01*x5135)));
evalcond[3]=((((-1.0)*cj13*cj14))+(((-1.0)*r20*x5130*x5131))+((sj13*sj14))+((r21*x5134))+(((-1.0)*r22*x5135)));
evalcond[4]=((((-1.0)*cj12*r21*x5131))+((r01*x5134))+(((-1.0)*r02*x5135))+(((-1.0)*r00*x5130*x5131))+(((-1.0)*cj12*x5133)));
evalcond[5]=((((-1.0)*x5132*x5133))+(((-1.0)*r10*x5130*x5131))+((r11*x5134))+(((-1.0)*r21*sj12*x5131))+(((-1.0)*r12*x5135)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j12))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
sj15=1.0;
cj15=0;
j15=1.5707963267949;
sj12=0;
cj12=1.0;
j12=0;
IkReal x5138=(((r00*sj17))+((cj17*r01)));
j16eval[0]=x5138;
j16eval[1]=IKsign(x5138);
j16eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*r21*sj17))+((cj17*r20))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=1.0;
cj15=0;
j15=1.5707963267949;
sj12=0;
cj12=1.0;
j12=0;
IkReal x5139=((1.0)*sj17);
IkReal x5140=((((-1.0)*cj17*r21))+(((-1.0)*r20*x5139)));
j16eval[0]=x5140;
j16eval[1]=IKsign(x5140);
j16eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x5139))+((cj17*r00))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=1.0;
cj15=0;
j15=1.5707963267949;
sj12=0;
cj12=1.0;
j12=0;
IkReal x5141=cj17*cj17;
IkReal x5142=r11*r11;
IkReal x5143=(r11*sj17);
IkReal x5144=(cj17*r10);
IkReal x5145=((((-2.0)*x5143*x5144))+(r12*r12)+(((-1.0)*x5141*x5142))+((x5141*(r10*r10)))+x5142);
j16eval[0]=x5145;
j16eval[1]=((IKabs(r12))+(IKabs((x5143+(((-1.0)*x5144))))));
j16eval[2]=IKsign(x5145);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x5146=cj17*cj17;
IkReal x5147=r11*r11;
IkReal x5148=(r11*sj17);
IkReal x5149=(cj17*r10);
CheckValue<IkReal> x5150 = IKatan2WithCheck(IkReal(r12),IkReal((x5148+(((-1.0)*x5149)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5150.valid){
continue;
}
CheckValue<IkReal> x5151=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x5148*x5149))+x5147+(((-1.0)*x5146*x5147))+((x5146*(r10*r10))))),-1);
if(!x5151.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x5150.value)+(((1.5707963267949)*(x5151.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x5152=IKcos(j16);
IkReal x5153=IKsin(j16);
IkReal x5154=((1.0)*cj17);
IkReal x5155=(r11*sj17);
IkReal x5156=(cj17*x5152);
IkReal x5157=((1.0)*x5152);
IkReal x5158=((1.0)*x5153);
IkReal x5159=(sj17*x5153);
evalcond[0]=(((r20*x5156))+(((-1.0)*r22*x5158))+(((-1.0)*r21*sj17*x5157)));
evalcond[1]=(((r00*x5156))+(((-1.0)*r01*sj17*x5157))+(((-1.0)*r02*x5158)));
evalcond[2]=(((x5153*x5155))+(((-1.0)*r12*x5157))+(((-1.0)*r10*x5153*x5154)));
evalcond[3]=((1.0)+(((-1.0)*r12*x5158))+((r10*x5156))+(((-1.0)*x5155*x5157)));
evalcond[4]=((((-1.0)*cj13*cj14))+((r21*x5159))+(((-1.0)*r22*x5157))+(((-1.0)*r20*x5153*x5154))+((sj13*sj14)));
evalcond[5]=(((r01*x5159))+(((-1.0)*r00*x5153*x5154))+(((-1.0)*r20*sj17))+(((-1.0)*r21*x5154))+(((-1.0)*r02*x5157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x5160=((1.0)*sj17);
CheckValue<IkReal> x5161=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x5160))+(((-1.0)*cj17*r21)))),-1);
if(!x5161.valid){
continue;
}
CheckValue<IkReal> x5162 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x5160))+((cj17*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x5162.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5161.value)))+(x5162.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x5163=IKcos(j16);
IkReal x5164=IKsin(j16);
IkReal x5165=((1.0)*cj17);
IkReal x5166=(r11*sj17);
IkReal x5167=(cj17*x5163);
IkReal x5168=((1.0)*x5163);
IkReal x5169=((1.0)*x5164);
IkReal x5170=(sj17*x5164);
evalcond[0]=((((-1.0)*r22*x5169))+(((-1.0)*r21*sj17*x5168))+((r20*x5167)));
evalcond[1]=(((r00*x5167))+(((-1.0)*r01*sj17*x5168))+(((-1.0)*r02*x5169)));
evalcond[2]=(((x5164*x5166))+(((-1.0)*r10*x5164*x5165))+(((-1.0)*r12*x5168)));
evalcond[3]=((1.0)+((r10*x5167))+(((-1.0)*r12*x5169))+(((-1.0)*x5166*x5168)));
evalcond[4]=((((-1.0)*cj13*cj14))+(((-1.0)*r22*x5168))+(((-1.0)*r20*x5164*x5165))+((sj13*sj14))+((r21*x5170)));
evalcond[5]=((((-1.0)*r00*x5164*x5165))+(((-1.0)*r21*x5165))+((r01*x5170))+(((-1.0)*r02*x5168))+(((-1.0)*r20*sj17)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x5171 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj17))+((cj17*r20)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x5171.valid){
continue;
}
CheckValue<IkReal> x5172=IKPowWithIntegerCheck(IKsign((((r00*sj17))+((cj17*r01)))),-1);
if(!x5172.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x5171.value)+(((1.5707963267949)*(x5172.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x5173=IKcos(j16);
IkReal x5174=IKsin(j16);
IkReal x5175=((1.0)*cj17);
IkReal x5176=(r11*sj17);
IkReal x5177=(cj17*x5173);
IkReal x5178=((1.0)*x5173);
IkReal x5179=((1.0)*x5174);
IkReal x5180=(sj17*x5174);
evalcond[0]=(((r20*x5177))+(((-1.0)*r21*sj17*x5178))+(((-1.0)*r22*x5179)));
evalcond[1]=(((r00*x5177))+(((-1.0)*r01*sj17*x5178))+(((-1.0)*r02*x5179)));
evalcond[2]=((((-1.0)*r12*x5178))+(((-1.0)*r10*x5174*x5175))+((x5174*x5176)));
evalcond[3]=((1.0)+(((-1.0)*x5176*x5178))+((r10*x5177))+(((-1.0)*r12*x5179)));
evalcond[4]=((((-1.0)*cj13*cj14))+(((-1.0)*r20*x5174*x5175))+((sj13*sj14))+((r21*x5180))+(((-1.0)*r22*x5178)));
evalcond[5]=((((-1.0)*r21*x5175))+((r01*x5180))+(((-1.0)*r02*x5178))+(((-1.0)*r00*x5174*x5175))+(((-1.0)*r20*sj17)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
sj15=1.0;
cj15=0;
j15=1.5707963267949;
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
IkReal x5181=(((r20*sj17))+((cj17*r21)));
j16eval[0]=x5181;
j16eval[1]=IKsign(x5181);
j16eval[2]=((IKabs(r02))+(IKabs((((cj17*r00))+(((-1.0)*r01*sj17))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=1.0;
cj15=0;
j15=1.5707963267949;
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
IkReal x5182=((1.0)*sj17);
IkReal x5183=((((-1.0)*cj17*r01))+(((-1.0)*r00*x5182)));
j16eval[0]=x5183;
j16eval[1]=IKsign(x5183);
j16eval[2]=((IKabs(((((-1.0)*r21*x5182))+((cj17*r20)))))+(IKabs(r22)));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=1.0;
cj15=0;
j15=1.5707963267949;
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
IkReal x5184=cj17*cj17;
IkReal x5185=r11*r11;
IkReal x5186=(r11*sj17);
IkReal x5187=(cj17*r10);
IkReal x5188=((((-1.0)*x5184*(r10*r10)))+((x5184*x5185))+(((2.0)*x5186*x5187))+(((-1.0)*(r12*r12)))+(((-1.0)*x5185)));
j16eval[0]=x5188;
j16eval[1]=((IKabs(r12))+(IKabs((x5186+(((-1.0)*x5187))))));
j16eval[2]=IKsign(x5188);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x5189=cj17*cj17;
IkReal x5190=r11*r11;
IkReal x5191=(r11*sj17);
IkReal x5192=(cj17*r10);
CheckValue<IkReal> x5193=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5190))+(((-1.0)*(r12*r12)))+(((2.0)*x5191*x5192))+(((-1.0)*x5189*(r10*r10)))+((x5189*x5190)))),-1);
if(!x5193.valid){
continue;
}
CheckValue<IkReal> x5194 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x5192))+x5191)),IKFAST_ATAN2_MAGTHRESH);
if(!x5194.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5193.value)))+(x5194.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x5195=IKcos(j16);
IkReal x5196=IKsin(j16);
IkReal x5197=(r11*sj17);
IkReal x5198=(cj17*x5195);
IkReal x5199=((1.0)*x5195);
IkReal x5200=((1.0)*x5196);
IkReal x5201=(sj17*x5196);
IkReal x5202=(cj17*x5200);
evalcond[0]=((((-1.0)*r22*x5200))+(((-1.0)*r21*sj17*x5199))+((r20*x5198)));
evalcond[1]=((((-1.0)*r02*x5200))+(((-1.0)*r01*sj17*x5199))+((r00*x5198)));
evalcond[2]=((((-1.0)*r12*x5199))+(((-1.0)*r10*x5202))+((x5196*x5197)));
evalcond[3]=((-1.0)+((r10*x5198))+(((-1.0)*x5197*x5199))+(((-1.0)*r12*x5200)));
evalcond[4]=(((r01*x5201))+((r20*sj17))+((cj17*r21))+(((-1.0)*r00*x5202))+(((-1.0)*r02*x5199)));
evalcond[5]=((((-1.0)*cj13*cj14))+(((-1.0)*r22*x5199))+((sj13*sj14))+(((-1.0)*r20*x5202))+((r21*x5201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x5203=((1.0)*sj17);
CheckValue<IkReal> x5204=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj17*r01))+(((-1.0)*r00*x5203)))),-1);
if(!x5204.valid){
continue;
}
CheckValue<IkReal> x5205 = IKatan2WithCheck(IkReal((((cj17*r20))+(((-1.0)*r21*x5203)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x5205.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5204.value)))+(x5205.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x5206=IKcos(j16);
IkReal x5207=IKsin(j16);
IkReal x5208=(r11*sj17);
IkReal x5209=(cj17*x5206);
IkReal x5210=((1.0)*x5206);
IkReal x5211=((1.0)*x5207);
IkReal x5212=(sj17*x5207);
IkReal x5213=(cj17*x5211);
evalcond[0]=(((r20*x5209))+(((-1.0)*r21*sj17*x5210))+(((-1.0)*r22*x5211)));
evalcond[1]=(((r00*x5209))+(((-1.0)*r01*sj17*x5210))+(((-1.0)*r02*x5211)));
evalcond[2]=((((-1.0)*r10*x5213))+((x5207*x5208))+(((-1.0)*r12*x5210)));
evalcond[3]=((-1.0)+((r10*x5209))+(((-1.0)*x5208*x5210))+(((-1.0)*r12*x5211)));
evalcond[4]=(((r01*x5212))+((r20*sj17))+(((-1.0)*r00*x5213))+((cj17*r21))+(((-1.0)*r02*x5210)));
evalcond[5]=((((-1.0)*cj13*cj14))+(((-1.0)*r22*x5210))+((sj13*sj14))+(((-1.0)*r20*x5213))+((r21*x5212)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x5214 = IKatan2WithCheck(IkReal((((cj17*r00))+(((-1.0)*r01*sj17)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x5214.valid){
continue;
}
CheckValue<IkReal> x5215=IKPowWithIntegerCheck(IKsign((((r20*sj17))+((cj17*r21)))),-1);
if(!x5215.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x5214.value)+(((1.5707963267949)*(x5215.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x5216=IKcos(j16);
IkReal x5217=IKsin(j16);
IkReal x5218=(r11*sj17);
IkReal x5219=(cj17*x5216);
IkReal x5220=((1.0)*x5216);
IkReal x5221=((1.0)*x5217);
IkReal x5222=(sj17*x5217);
IkReal x5223=(cj17*x5221);
evalcond[0]=(((r20*x5219))+(((-1.0)*r22*x5221))+(((-1.0)*r21*sj17*x5220)));
evalcond[1]=((((-1.0)*r01*sj17*x5220))+(((-1.0)*r02*x5221))+((r00*x5219)));
evalcond[2]=(((x5217*x5218))+(((-1.0)*r10*x5223))+(((-1.0)*r12*x5220)));
evalcond[3]=((-1.0)+(((-1.0)*x5218*x5220))+(((-1.0)*r12*x5221))+((r10*x5219)));
evalcond[4]=(((r20*sj17))+((cj17*r21))+(((-1.0)*r02*x5220))+((r01*x5222))+(((-1.0)*r00*x5223)));
evalcond[5]=((((-1.0)*cj13*cj14))+((r21*x5222))+(((-1.0)*r20*x5223))+((sj13*sj14))+(((-1.0)*r22*x5220)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5225 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5225)==0){
continue;
}
IkReal x5224=pow(x5225,-0.5);
CheckValue<IkReal> x5226 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5226.valid){
continue;
}
IkReal gconst126=((-1.0)*(x5226.value));
IkReal gconst127=((-1.0)*r01*x5224);
IkReal gconst128=(r00*x5224);
CheckValue<IkReal> x5227 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5227.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5227.value)+j17)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
CheckValue<IkReal> x5230 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5230.valid){
continue;
}
IkReal x5228=((-1.0)*(x5230.value));
IkReal x5229=x5224;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
sj17=gconst127;
cj17=gconst128;
j17=x5228;
IkReal gconst126=x5228;
IkReal gconst127=((-1.0)*r01*x5229);
IkReal gconst128=(r00*x5229);
j16eval[0]=r22;
j16eval[1]=sj12;
j16eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x5231=((1.0)*cj12);
IkReal x5232=((1.0)*sj12);
CheckValue<IkReal> x5233 = IKatan2WithCheck(IkReal((((cj12*gconst127*r01))+(((-1.0)*gconst128*r00*x5231))+(((-1.0)*gconst128*r10*x5232))+((gconst127*r11*sj12)))),IkReal(((((-1.0)*r12*x5232))+(((-1.0)*r02*x5231)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5233.valid){
continue;
}
CheckValue<IkReal> x5234=IKPowWithIntegerCheck(IKsign((((gconst127*r20))+((gconst128*r21)))),-1);
if(!x5234.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x5233.value)+(((1.5707963267949)*(x5234.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x5235=IKcos(j16);
IkReal x5236=IKsin(j16);
IkReal x5237=(gconst128*r10);
IkReal x5238=(gconst128*r00);
IkReal x5239=(gconst128*r20);
IkReal x5240=(gconst127*x5236);
IkReal x5241=((1.0)*gconst128*r21);
IkReal x5242=((1.0)*gconst127*r20);
IkReal x5243=((1.0)*x5235);
IkReal x5244=((1.0)*x5236);
evalcond[0]=(((x5235*x5239))+(((-1.0)*r22*x5244))+(((-1.0)*gconst127*r21*x5243)));
evalcond[1]=((((-1.0)*gconst127*r11*x5243))+(((-1.0)*r12*x5244))+((x5235*x5237))+cj12);
evalcond[2]=((((-1.0)*gconst127*r01*x5243))+((x5235*x5238))+(((-1.0)*r02*x5244))+(((-1.0)*sj12)));
evalcond[3]=((((-1.0)*cj13*cj14))+(((-1.0)*r22*x5243))+(((-1.0)*x5239*x5244))+((r21*x5240))+((sj13*sj14)));
evalcond[4]=((((-1.0)*cj12*x5241))+(((-1.0)*cj12*x5242))+((r01*x5240))+(((-1.0)*r02*x5243))+(((-1.0)*x5238*x5244)));
evalcond[5]=((((-1.0)*sj12*x5241))+(((-1.0)*sj12*x5242))+(((-1.0)*r12*x5243))+((r11*x5240))+(((-1.0)*x5237*x5244)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x5245 = IKatan2WithCheck(IkReal((((gconst128*r20*sj12))+(((-1.0)*gconst127*r21*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5245.valid){
continue;
}
CheckValue<IkReal> x5246=IKPowWithIntegerCheck(IKsign((((gconst128*r11))+((gconst127*r10)))),-1);
if(!x5246.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x5245.value)+(((1.5707963267949)*(x5246.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x5247=IKcos(j16);
IkReal x5248=IKsin(j16);
IkReal x5249=(gconst128*r10);
IkReal x5250=(gconst128*r00);
IkReal x5251=(gconst128*r20);
IkReal x5252=(gconst127*x5248);
IkReal x5253=((1.0)*gconst128*r21);
IkReal x5254=((1.0)*gconst127*r20);
IkReal x5255=((1.0)*x5247);
IkReal x5256=((1.0)*x5248);
evalcond[0]=((((-1.0)*gconst127*r21*x5255))+(((-1.0)*r22*x5256))+((x5247*x5251)));
evalcond[1]=((((-1.0)*gconst127*r11*x5255))+((x5247*x5249))+(((-1.0)*r12*x5256))+cj12);
evalcond[2]=((((-1.0)*r02*x5256))+((x5247*x5250))+(((-1.0)*sj12))+(((-1.0)*gconst127*r01*x5255)));
evalcond[3]=((((-1.0)*cj13*cj14))+((r21*x5252))+(((-1.0)*r22*x5255))+((sj13*sj14))+(((-1.0)*x5251*x5256)));
evalcond[4]=((((-1.0)*cj12*x5254))+(((-1.0)*cj12*x5253))+(((-1.0)*r02*x5255))+((r01*x5252))+(((-1.0)*x5250*x5256)));
evalcond[5]=((((-1.0)*x5249*x5256))+(((-1.0)*r12*x5255))+((r11*x5252))+(((-1.0)*sj12*x5253))+(((-1.0)*sj12*x5254)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5258 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5258)==0){
continue;
}
IkReal x5257=pow(x5258,-0.5);
CheckValue<IkReal> x5259 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5259.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x5259.value))));
IkReal gconst130=((1.0)*r01*x5257);
IkReal gconst131=((-1.0)*r00*x5257);
CheckValue<IkReal> x5260 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5260.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5260.value)+j17)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[5];
CheckValue<IkReal> x5263 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5263.valid){
continue;
}
IkReal x5261=((1.0)*(x5263.value));
IkReal x5262=x5257;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
sj17=gconst130;
cj17=gconst131;
j17=((3.14159265)+(((-1.0)*x5261)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5261)));
IkReal gconst130=((1.0)*r01*x5262);
IkReal gconst131=((-1.0)*r00*x5262);
j16eval[0]=0;
j16eval[1]=cj12;
j16eval[2]=r22;
j16eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j16eval[4]=0;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  || IKabs(j16eval[3]) < 0.0000010000000000  || IKabs(j16eval[4]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
CheckValue<IkReal> x5266 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5266.valid){
continue;
}
IkReal x5264=((1.0)*(x5266.value));
IkReal x5265=x5257;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
sj17=gconst130;
cj17=gconst131;
j17=((3.14159265)+(((-1.0)*x5264)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5264)));
IkReal gconst130=((1.0)*r01*x5265);
IkReal gconst131=((-1.0)*r00*x5265);
j16eval[0]=r22;
j16eval[1]=sj12;
j16eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x5269 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5269.valid){
continue;
}
IkReal x5267=((1.0)*(x5269.value));
IkReal x5268=x5257;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
sj17=gconst130;
cj17=gconst131;
j17=((3.14159265)+(((-1.0)*x5267)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5267)));
IkReal gconst130=((1.0)*r01*x5268);
IkReal gconst131=((-1.0)*r00*x5268);
IkReal x5270=r02*r02;
IkReal x5271=(r12*sj12);
IkReal x5272=x5257;
IkReal x5273=(cj12*x5272);
j16eval[0]=((IKabs(((((-1.0)*x5273))+((x5270*x5273))+((r02*x5271*x5272)))))+(IKabs(((((-1.0)*cj12*r02))+(((-1.0)*x5271))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x5274=((1.0)*gconst131);
CheckValue<IkReal> x5275 = IKatan2WithCheck(IkReal(((((-1.0)*r10*sj12*x5274))+(((-1.0)*cj12*r00*x5274))+((cj12*gconst130*r01))+((gconst130*r11*sj12)))),IkReal(((((-1.0)*cj12*r02))+(((-1.0)*r12*sj12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5275.valid){
continue;
}
CheckValue<IkReal> x5276=IKPowWithIntegerCheck(IKsign((((gconst131*r21))+((gconst130*r20)))),-1);
if(!x5276.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x5275.value)+(((1.5707963267949)*(x5276.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x5277=IKcos(j16);
IkReal x5278=IKsin(j16);
IkReal x5279=(gconst131*r20);
IkReal x5280=((1.0)*cj12);
IkReal x5281=(gconst130*r20);
IkReal x5282=((1.0)*sj12);
IkReal x5283=(gconst131*r21);
IkReal x5284=(gconst130*x5278);
IkReal x5285=((1.0)*x5278);
IkReal x5286=((1.0)*x5277);
IkReal x5287=(gconst131*x5277);
evalcond[0]=((((-1.0)*r22*x5285))+((x5277*x5279))+(((-1.0)*gconst130*r21*x5286)));
evalcond[1]=((((-1.0)*gconst130*r11*x5286))+((r10*x5287))+(((-1.0)*r12*x5285))+cj12);
evalcond[2]=((((-1.0)*gconst130*r01*x5286))+(((-1.0)*x5282))+((r00*x5287))+(((-1.0)*r02*x5285)));
evalcond[3]=((((-1.0)*r22*x5286))+(((-1.0)*cj13*cj14))+(((-1.0)*x5279*x5285))+((r21*x5284))+((sj13*sj14)));
evalcond[4]=(((r01*x5284))+(((-1.0)*r02*x5286))+(((-1.0)*gconst131*r00*x5285))+(((-1.0)*x5280*x5283))+(((-1.0)*x5280*x5281)));
evalcond[5]=((((-1.0)*x5281*x5282))+(((-1.0)*r12*x5286))+(((-1.0)*x5282*x5283))+(((-1.0)*gconst131*r10*x5285))+((r11*x5284)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x5288=IKPowWithIntegerCheck(IKsign((((gconst131*r11))+((gconst130*r10)))),-1);
if(!x5288.valid){
continue;
}
CheckValue<IkReal> x5289 = IKatan2WithCheck(IkReal(((((-1.0)*gconst130*r21*sj12))+((gconst131*r20*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5289.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5288.value)))+(x5289.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x5290=IKcos(j16);
IkReal x5291=IKsin(j16);
IkReal x5292=(gconst131*r20);
IkReal x5293=((1.0)*cj12);
IkReal x5294=(gconst130*r20);
IkReal x5295=((1.0)*sj12);
IkReal x5296=(gconst131*r21);
IkReal x5297=(gconst130*x5291);
IkReal x5298=((1.0)*x5291);
IkReal x5299=((1.0)*x5290);
IkReal x5300=(gconst131*x5290);
evalcond[0]=((((-1.0)*r22*x5298))+((x5290*x5292))+(((-1.0)*gconst130*r21*x5299)));
evalcond[1]=((((-1.0)*gconst130*r11*x5299))+(((-1.0)*r12*x5298))+cj12+((r10*x5300)));
evalcond[2]=((((-1.0)*gconst130*r01*x5299))+(((-1.0)*x5295))+(((-1.0)*r02*x5298))+((r00*x5300)));
evalcond[3]=((((-1.0)*cj13*cj14))+(((-1.0)*r22*x5299))+((r21*x5297))+(((-1.0)*x5292*x5298))+((sj13*sj14)));
evalcond[4]=(((r01*x5297))+(((-1.0)*x5293*x5296))+(((-1.0)*x5293*x5294))+(((-1.0)*r02*x5299))+(((-1.0)*gconst131*r00*x5298)));
evalcond[5]=((((-1.0)*x5295*x5296))+(((-1.0)*r12*x5299))+(((-1.0)*x5294*x5295))+((r11*x5297))+(((-1.0)*gconst131*r10*x5298)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x5301 = IKatan2WithCheck(IkReal((((cj12*gconst131*r20))+(((-1.0)*cj12*gconst130*r21)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5301.valid){
continue;
}
CheckValue<IkReal> x5302=IKPowWithIntegerCheck(IKsign((((gconst131*r01))+((gconst130*r00)))),-1);
if(!x5302.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x5301.value)+(((1.5707963267949)*(x5302.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x5303=IKcos(j16);
IkReal x5304=IKsin(j16);
IkReal x5305=(gconst131*r20);
IkReal x5306=((1.0)*cj12);
IkReal x5307=(gconst130*r20);
IkReal x5308=((1.0)*sj12);
IkReal x5309=(gconst131*r21);
IkReal x5310=(gconst130*x5304);
IkReal x5311=((1.0)*x5304);
IkReal x5312=((1.0)*x5303);
IkReal x5313=(gconst131*x5303);
evalcond[0]=((((-1.0)*gconst130*r21*x5312))+((x5303*x5305))+(((-1.0)*r22*x5311)));
evalcond[1]=((((-1.0)*r12*x5311))+cj12+(((-1.0)*gconst130*r11*x5312))+((r10*x5313)));
evalcond[2]=(((r00*x5313))+(((-1.0)*x5308))+(((-1.0)*gconst130*r01*x5312))+(((-1.0)*r02*x5311)));
evalcond[3]=((((-1.0)*cj13*cj14))+((r21*x5310))+((sj13*sj14))+(((-1.0)*x5305*x5311))+(((-1.0)*r22*x5312)));
evalcond[4]=(((r01*x5310))+(((-1.0)*x5306*x5309))+(((-1.0)*x5306*x5307))+(((-1.0)*gconst131*r00*x5311))+(((-1.0)*r02*x5312)));
evalcond[5]=((((-1.0)*r12*x5312))+(((-1.0)*x5308*x5309))+(((-1.0)*gconst131*r10*x5311))+((r11*x5310))+(((-1.0)*x5307*x5308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
sj15=1.0;
cj15=0;
j15=1.5707963267949;
sj12=1.0;
cj12=0;
j12=1.5707963267949;
IkReal x5314=(((cj17*r11))+((r10*sj17)));
j16eval[0]=x5314;
j16eval[1]=IKsign(x5314);
j16eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*r21*sj17))+((cj17*r20))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=1.0;
cj15=0;
j15=1.5707963267949;
sj12=1.0;
cj12=0;
j12=1.5707963267949;
IkReal x5315=((1.0)*sj17);
IkReal x5316=((((-1.0)*cj17*r21))+(((-1.0)*r20*x5315)));
j16eval[0]=x5316;
j16eval[1]=IKsign(x5316);
j16eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*r11*x5315))+((cj17*r10))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=1.0;
cj15=0;
j15=1.5707963267949;
sj12=1.0;
cj12=0;
j12=1.5707963267949;
IkReal x5317=cj17*cj17;
IkReal x5318=r01*r01;
IkReal x5319=(r01*sj17);
IkReal x5320=(cj17*r00);
IkReal x5321=((((-1.0)*(r02*r02)))+((x5317*x5318))+(((-1.0)*x5318))+(((2.0)*x5319*x5320))+(((-1.0)*x5317*(r00*r00))));
j16eval[0]=x5321;
j16eval[1]=IKsign(x5321);
j16eval[2]=((IKabs(((((-1.0)*x5320))+x5319)))+(IKabs(r02)));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x5322=cj17*cj17;
IkReal x5323=r01*r01;
IkReal x5324=(r01*sj17);
IkReal x5325=(cj17*r00);
CheckValue<IkReal> x5326 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x5325))+x5324)),IKFAST_ATAN2_MAGTHRESH);
if(!x5326.valid){
continue;
}
CheckValue<IkReal> x5327=IKPowWithIntegerCheck(IKsign((((x5322*x5323))+(((-1.0)*x5323))+(((2.0)*x5324*x5325))+(((-1.0)*x5322*(r00*r00)))+(((-1.0)*(r02*r02))))),-1);
if(!x5327.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x5326.value)+(((1.5707963267949)*(x5327.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x5328=IKcos(j16);
IkReal x5329=IKsin(j16);
IkReal x5330=((1.0)*cj17);
IkReal x5331=(r11*sj17);
IkReal x5332=(cj17*x5328);
IkReal x5333=((1.0)*x5328);
IkReal x5334=((1.0)*x5329);
IkReal x5335=(sj17*x5329);
evalcond[0]=(((r20*x5332))+(((-1.0)*r22*x5334))+(((-1.0)*r21*sj17*x5333)));
evalcond[1]=((((-1.0)*x5331*x5333))+((r10*x5332))+(((-1.0)*r12*x5334)));
evalcond[2]=((((-1.0)*r02*x5333))+((r01*x5335))+(((-1.0)*r00*x5329*x5330)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x5334))+((r00*x5332))+(((-1.0)*r01*sj17*x5333)));
evalcond[4]=((((-1.0)*cj13*cj14))+(((-1.0)*r22*x5333))+((sj13*sj14))+((r21*x5335))+(((-1.0)*r20*x5329*x5330)));
evalcond[5]=((((-1.0)*r21*x5330))+(((-1.0)*r12*x5333))+(((-1.0)*r20*sj17))+(((-1.0)*r10*x5329*x5330))+((x5329*x5331)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x5336=((1.0)*sj17);
CheckValue<IkReal> x5337=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj17*r21))+(((-1.0)*r20*x5336)))),-1);
if(!x5337.valid){
continue;
}
CheckValue<IkReal> x5338 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x5336))+((cj17*r10)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x5338.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5337.value)))+(x5338.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x5339=IKcos(j16);
IkReal x5340=IKsin(j16);
IkReal x5341=((1.0)*cj17);
IkReal x5342=(r11*sj17);
IkReal x5343=(cj17*x5339);
IkReal x5344=((1.0)*x5339);
IkReal x5345=((1.0)*x5340);
IkReal x5346=(sj17*x5340);
evalcond[0]=(((r20*x5343))+(((-1.0)*r22*x5345))+(((-1.0)*r21*sj17*x5344)));
evalcond[1]=(((r10*x5343))+(((-1.0)*r12*x5345))+(((-1.0)*x5342*x5344)));
evalcond[2]=((((-1.0)*r02*x5344))+((r01*x5346))+(((-1.0)*r00*x5340*x5341)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x5345))+((r00*x5343))+(((-1.0)*r01*sj17*x5344)));
evalcond[4]=((((-1.0)*cj13*cj14))+(((-1.0)*r20*x5340*x5341))+((sj13*sj14))+(((-1.0)*r22*x5344))+((r21*x5346)));
evalcond[5]=((((-1.0)*r10*x5340*x5341))+(((-1.0)*r12*x5344))+(((-1.0)*r20*sj17))+(((-1.0)*r21*x5341))+((x5340*x5342)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x5347 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj17))+((cj17*r20)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x5347.valid){
continue;
}
CheckValue<IkReal> x5348=IKPowWithIntegerCheck(IKsign((((cj17*r11))+((r10*sj17)))),-1);
if(!x5348.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x5347.value)+(((1.5707963267949)*(x5348.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x5349=IKcos(j16);
IkReal x5350=IKsin(j16);
IkReal x5351=((1.0)*cj17);
IkReal x5352=(r11*sj17);
IkReal x5353=(cj17*x5349);
IkReal x5354=((1.0)*x5349);
IkReal x5355=((1.0)*x5350);
IkReal x5356=(sj17*x5350);
evalcond[0]=(((r20*x5353))+(((-1.0)*r21*sj17*x5354))+(((-1.0)*r22*x5355)));
evalcond[1]=(((r10*x5353))+(((-1.0)*x5352*x5354))+(((-1.0)*r12*x5355)));
evalcond[2]=((((-1.0)*r00*x5350*x5351))+(((-1.0)*r02*x5354))+((r01*x5356)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x5355))+((r00*x5353))+(((-1.0)*r01*sj17*x5354)));
evalcond[4]=((((-1.0)*cj13*cj14))+((sj13*sj14))+(((-1.0)*r20*x5350*x5351))+(((-1.0)*r22*x5354))+((r21*x5356)));
evalcond[5]=((((-1.0)*r21*x5351))+(((-1.0)*r10*x5350*x5351))+(((-1.0)*r12*x5354))+(((-1.0)*r20*sj17))+((x5350*x5352)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
sj15=1.0;
cj15=0;
j15=1.5707963267949;
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
IkReal x5357=(((r20*sj17))+((cj17*r21)));
j16eval[0]=x5357;
j16eval[1]=IKsign(x5357);
j16eval[2]=((IKabs(r12))+(IKabs((((cj17*r10))+(((-1.0)*r11*sj17))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=1.0;
cj15=0;
j15=1.5707963267949;
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
IkReal x5358=((1.0)*sj17);
IkReal x5359=((((-1.0)*cj17*r11))+(((-1.0)*r10*x5358)));
j16eval[0]=x5359;
j16eval[1]=IKsign(x5359);
j16eval[2]=((IKabs(((((-1.0)*r21*x5358))+((cj17*r20)))))+(IKabs(r22)));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=1.0;
cj15=0;
j15=1.5707963267949;
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
IkReal x5360=cj17*cj17;
IkReal x5361=r01*r01;
IkReal x5362=(cj17*r00);
IkReal x5363=(r01*sj17);
IkReal x5364=(x5361+((x5360*(r00*r00)))+(r02*r02)+(((-2.0)*x5362*x5363))+(((-1.0)*x5360*x5361)));
j16eval[0]=x5364;
j16eval[1]=IKsign(x5364);
j16eval[2]=((IKabs(r02))+(IKabs((x5363+(((-1.0)*x5362))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x5365=cj17*cj17;
IkReal x5366=r01*r01;
IkReal x5367=(r01*sj17);
IkReal x5368=(cj17*r00);
CheckValue<IkReal> x5369 = IKatan2WithCheck(IkReal(r02),IkReal((x5367+(((-1.0)*x5368)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5369.valid){
continue;
}
CheckValue<IkReal> x5370=IKPowWithIntegerCheck(IKsign(((((-2.0)*x5367*x5368))+x5366+((x5365*(r00*r00)))+(r02*r02)+(((-1.0)*x5365*x5366)))),-1);
if(!x5370.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x5369.value)+(((1.5707963267949)*(x5370.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x5371=IKcos(j16);
IkReal x5372=IKsin(j16);
IkReal x5373=(r11*sj17);
IkReal x5374=(cj17*x5371);
IkReal x5375=((1.0)*x5371);
IkReal x5376=((1.0)*x5372);
IkReal x5377=(sj17*x5372);
IkReal x5378=(cj17*x5376);
evalcond[0]=((((-1.0)*r22*x5376))+(((-1.0)*r21*sj17*x5375))+((r20*x5374)));
evalcond[1]=((((-1.0)*r12*x5376))+(((-1.0)*x5373*x5375))+((r10*x5374)));
evalcond[2]=((((-1.0)*r00*x5378))+(((-1.0)*r02*x5375))+((r01*x5377)));
evalcond[3]=((1.0)+(((-1.0)*r02*x5376))+(((-1.0)*r01*sj17*x5375))+((r00*x5374)));
evalcond[4]=((((-1.0)*r12*x5375))+((x5372*x5373))+((r20*sj17))+((cj17*r21))+(((-1.0)*r10*x5378)));
evalcond[5]=((((-1.0)*cj13*cj14))+(((-1.0)*r22*x5375))+((r21*x5377))+(((-1.0)*r20*x5378))+((sj13*sj14)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x5379=((1.0)*sj17);
CheckValue<IkReal> x5380=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj17*r11))+(((-1.0)*r10*x5379)))),-1);
if(!x5380.valid){
continue;
}
CheckValue<IkReal> x5381 = IKatan2WithCheck(IkReal((((cj17*r20))+(((-1.0)*r21*x5379)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x5381.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5380.value)))+(x5381.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x5382=IKcos(j16);
IkReal x5383=IKsin(j16);
IkReal x5384=(r11*sj17);
IkReal x5385=(cj17*x5382);
IkReal x5386=((1.0)*x5382);
IkReal x5387=((1.0)*x5383);
IkReal x5388=(sj17*x5383);
IkReal x5389=(cj17*x5387);
evalcond[0]=((((-1.0)*r21*sj17*x5386))+((r20*x5385))+(((-1.0)*r22*x5387)));
evalcond[1]=(((r10*x5385))+(((-1.0)*x5384*x5386))+(((-1.0)*r12*x5387)));
evalcond[2]=((((-1.0)*r02*x5386))+((r01*x5388))+(((-1.0)*r00*x5389)));
evalcond[3]=((1.0)+(((-1.0)*r01*sj17*x5386))+(((-1.0)*r02*x5387))+((r00*x5385)));
evalcond[4]=(((x5383*x5384))+((r20*sj17))+((cj17*r21))+(((-1.0)*r12*x5386))+(((-1.0)*r10*x5389)));
evalcond[5]=((((-1.0)*cj13*cj14))+(((-1.0)*r20*x5389))+((sj13*sj14))+(((-1.0)*r22*x5386))+((r21*x5388)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x5390 = IKatan2WithCheck(IkReal((((cj17*r10))+(((-1.0)*r11*sj17)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x5390.valid){
continue;
}
CheckValue<IkReal> x5391=IKPowWithIntegerCheck(IKsign((((r20*sj17))+((cj17*r21)))),-1);
if(!x5391.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x5390.value)+(((1.5707963267949)*(x5391.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x5392=IKcos(j16);
IkReal x5393=IKsin(j16);
IkReal x5394=(r11*sj17);
IkReal x5395=(cj17*x5392);
IkReal x5396=((1.0)*x5392);
IkReal x5397=((1.0)*x5393);
IkReal x5398=(sj17*x5393);
IkReal x5399=(cj17*x5397);
evalcond[0]=(((r20*x5395))+(((-1.0)*r21*sj17*x5396))+(((-1.0)*r22*x5397)));
evalcond[1]=(((r10*x5395))+(((-1.0)*x5394*x5396))+(((-1.0)*r12*x5397)));
evalcond[2]=((((-1.0)*r02*x5396))+((r01*x5398))+(((-1.0)*r00*x5399)));
evalcond[3]=((1.0)+(((-1.0)*r01*sj17*x5396))+(((-1.0)*r02*x5397))+((r00*x5395)));
evalcond[4]=(((r20*sj17))+((x5393*x5394))+((cj17*r21))+(((-1.0)*r12*x5396))+(((-1.0)*r10*x5399)));
evalcond[5]=((((-1.0)*cj13*cj14))+((sj13*sj14))+(((-1.0)*r20*x5399))+(((-1.0)*r22*x5396))+((r21*x5398)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
IkReal x5400=((-1.0)*px);
sj15=1.0;
cj15=0;
j15=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x5400);
rxp1_1=(px*r21);
rxp1_2=(r11*x5400);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j16eval[0]=r02;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
IkReal x5401=((-1.0)*px);
sj15=1.0;
cj15=0;
j15=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x5401);
rxp1_1=(px*r21);
rxp1_2=(r11*x5401);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j16eval[0]=((((-1.0)*cj17*r20))+((r21*sj17)));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
CheckValue<IkReal> x5403=IKPowWithIntegerCheck(((((-1.0)*cj17*r20))+((r21*sj17))),-1);
if(!x5403.valid){
continue;
}
IkReal x5402=x5403.value;
sj16array[0]=(((cj13*cj14*x5402))+(((-1.0)*sj13*sj14*x5402)));
if( sj16array[0] >= -1-IKFAST_SINCOS_THRESH && sj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKasin(sj16array[0]);
    cj16array[0] = IKcos(j16array[0]);
    sj16array[1] = sj16array[0];
    j16array[1] = j16array[0] > 0 ? (IKPI-j16array[0]) : (-IKPI-j16array[0]);
    cj16array[1] = -cj16array[0];
}
else if( isnan(sj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x5404=IKcos(j16);
IkReal x5405=(cj17*x5404);
IkReal x5406=((1.0)*sj17*x5404);
evalcond[0]=((-1.0)*r02*x5404);
evalcond[1]=((((-1.0)*r02*(IKsin(j16))))+(((-1.0)*sj12)));
evalcond[2]=((((-1.0)*r21*x5406))+((r20*x5405)));
evalcond[3]=(((r10*x5405))+(((-1.0)*r11*x5406)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
CheckValue<IkReal> x5407=IKPowWithIntegerCheck(r02,-1);
if(!x5407.valid){
continue;
}
sj16array[0]=((-1.0)*sj12*(x5407.value));
if( sj16array[0] >= -1-IKFAST_SINCOS_THRESH && sj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKasin(sj16array[0]);
    cj16array[0] = IKcos(j16array[0]);
    sj16array[1] = sj16array[0];
    j16array[1] = j16array[0] > 0 ? (IKPI-j16array[0]) : (-IKPI-j16array[0]);
    cj16array[1] = -cj16array[0];
}
else if( isnan(sj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x5408=IKcos(j16);
IkReal x5409=IKsin(j16);
IkReal x5410=(cj17*r20);
IkReal x5411=(r21*sj17);
IkReal x5412=((1.0)*x5408);
evalcond[0]=((-1.0)*r02*x5408);
evalcond[1]=(((x5408*x5410))+(((-1.0)*x5411*x5412)));
evalcond[2]=((((-1.0)*r11*sj17*x5412))+((cj17*r10*x5408)));
evalcond[3]=((((-1.0)*cj13*cj14))+((sj13*sj14))+((x5409*x5411))+(((-1.0)*x5409*x5410)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j16]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x5413=((1.0)*cj12);
IkReal x5414=((1.0)*sj12);
CheckValue<IkReal> x5415 = IKatan2WithCheck(IkReal(((((-1.0)*cj17*r10*x5414))+((cj12*r01*sj17))+((r11*sj12*sj17))+(((-1.0)*cj17*r00*x5413)))),IkReal(((((-1.0)*r02*x5413))+(((-1.0)*r12*x5414)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5415.valid){
continue;
}
CheckValue<IkReal> x5416=IKPowWithIntegerCheck(IKsign((((r20*sj17))+((cj17*r21)))),-1);
if(!x5416.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x5415.value)+(((1.5707963267949)*(x5416.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x5417=IKcos(j16);
IkReal x5418=IKsin(j16);
IkReal x5419=((1.0)*cj17);
IkReal x5420=(r11*sj17);
IkReal x5421=(cj17*x5417);
IkReal x5422=((1.0)*x5417);
IkReal x5423=((1.0)*r20*sj17);
IkReal x5424=((1.0)*x5418);
IkReal x5425=(sj17*x5418);
evalcond[0]=((((-1.0)*r21*sj17*x5422))+(((-1.0)*r22*x5424))+((r20*x5421)));
evalcond[1]=(((r10*x5421))+cj12+(((-1.0)*r12*x5424))+(((-1.0)*x5420*x5422)));
evalcond[2]=(((r00*x5421))+(((-1.0)*r01*sj17*x5422))+(((-1.0)*sj12))+(((-1.0)*r02*x5424)));
evalcond[3]=((((-1.0)*cj13*cj14))+((r21*x5425))+((sj13*sj14))+(((-1.0)*r22*x5422))+(((-1.0)*r20*x5418*x5419)));
evalcond[4]=(((r01*x5425))+(((-1.0)*r00*x5418*x5419))+(((-1.0)*r02*x5422))+(((-1.0)*cj12*r21*x5419))+(((-1.0)*cj12*x5423)));
evalcond[5]=(((x5418*x5420))+(((-1.0)*r10*x5418*x5419))+(((-1.0)*r21*sj12*x5419))+(((-1.0)*sj12*x5423))+(((-1.0)*r12*x5422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x5426=IKPowWithIntegerCheck(IKsign((((cj17*r11))+((r10*sj17)))),-1);
if(!x5426.valid){
continue;
}
CheckValue<IkReal> x5427 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5427.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5426.value)))+(x5427.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x5428=IKcos(j16);
IkReal x5429=IKsin(j16);
IkReal x5430=((1.0)*cj17);
IkReal x5431=(r11*sj17);
IkReal x5432=(cj17*x5428);
IkReal x5433=((1.0)*x5428);
IkReal x5434=((1.0)*r20*sj17);
IkReal x5435=((1.0)*x5429);
IkReal x5436=(sj17*x5429);
evalcond[0]=(((r20*x5432))+(((-1.0)*r22*x5435))+(((-1.0)*r21*sj17*x5433)));
evalcond[1]=((((-1.0)*x5431*x5433))+((r10*x5432))+cj12+(((-1.0)*r12*x5435)));
evalcond[2]=((((-1.0)*r02*x5435))+(((-1.0)*sj12))+(((-1.0)*r01*sj17*x5433))+((r00*x5432)));
evalcond[3]=((((-1.0)*cj13*cj14))+((sj13*sj14))+(((-1.0)*r22*x5433))+(((-1.0)*r20*x5429*x5430))+((r21*x5436)));
evalcond[4]=((((-1.0)*r00*x5429*x5430))+(((-1.0)*r02*x5433))+(((-1.0)*cj12*x5434))+(((-1.0)*cj12*r21*x5430))+((r01*x5436)));
evalcond[5]=((((-1.0)*r12*x5433))+((x5429*x5431))+(((-1.0)*r21*sj12*x5430))+(((-1.0)*r10*x5429*x5430))+(((-1.0)*sj12*x5434)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x5437 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5437.valid){
continue;
}
CheckValue<IkReal> x5438=IKPowWithIntegerCheck(IKsign((((r00*sj17))+((cj17*r01)))),-1);
if(!x5438.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x5437.value)+(((1.5707963267949)*(x5438.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x5439=IKcos(j16);
IkReal x5440=IKsin(j16);
IkReal x5441=((1.0)*cj17);
IkReal x5442=(r11*sj17);
IkReal x5443=(cj17*x5439);
IkReal x5444=((1.0)*x5439);
IkReal x5445=((1.0)*r20*sj17);
IkReal x5446=((1.0)*x5440);
IkReal x5447=(sj17*x5440);
evalcond[0]=(((r20*x5443))+(((-1.0)*r22*x5446))+(((-1.0)*r21*sj17*x5444)));
evalcond[1]=(((r10*x5443))+(((-1.0)*r12*x5446))+(((-1.0)*x5442*x5444))+cj12);
evalcond[2]=(((r00*x5443))+(((-1.0)*sj12))+(((-1.0)*r02*x5446))+(((-1.0)*r01*sj17*x5444)));
evalcond[3]=((((-1.0)*cj13*cj14))+((sj13*sj14))+(((-1.0)*r22*x5444))+((r21*x5447))+(((-1.0)*r20*x5440*x5441)));
evalcond[4]=((((-1.0)*cj12*x5445))+((r01*x5447))+(((-1.0)*cj12*r21*x5441))+(((-1.0)*r00*x5440*x5441))+(((-1.0)*r02*x5444)));
evalcond[5]=(((x5440*x5442))+(((-1.0)*sj12*x5445))+(((-1.0)*r12*x5444))+(((-1.0)*r10*x5440*x5441))+(((-1.0)*r21*sj12*x5441)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x5448=cj17*cj17;
IkReal x5449=r21*r21;
IkReal x5450=(r21*sj17);
IkReal x5451=(sj13*sj14);
IkReal x5452=(cj13*cj14);
IkReal x5453=(cj17*r20);
CheckValue<IkReal> x5454 = IKatan2WithCheck(IkReal(((((-1.0)*x5452*x5453))+((x5450*x5452))+(((-1.0)*x5450*x5451))+((x5451*x5453)))),IkReal(((((-1.0)*r22*x5452))+((r22*x5451)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5454.valid){
continue;
}
CheckValue<IkReal> x5455=IKPowWithIntegerCheck(IKsign((((x5448*(r20*r20)))+x5449+(r22*r22)+(((-1.0)*x5448*x5449))+(((-2.0)*x5450*x5453)))),-1);
if(!x5455.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x5454.value)+(((1.5707963267949)*(x5455.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[2];
IkReal x5456=IKcos(j16);
IkReal x5457=IKsin(j16);
IkReal x5458=(cj17*r20);
IkReal x5459=(r21*sj17);
IkReal x5460=((1.0)*x5457);
IkReal x5461=((1.0)*x5456);
evalcond[0]=((((-1.0)*x5459*x5461))+((x5456*x5458))+(((-1.0)*r22*x5460)));
evalcond[1]=((((-1.0)*cj13*cj14))+(((-1.0)*x5458*x5460))+((sj13*sj14))+(((-1.0)*r22*x5461))+((x5457*x5459)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x5462=(cj16*sj17);
IkReal x5463=(cj16*cj17);
if( IKabs(((((-1.0)*r01*x5462))+(((-1.0)*r02*sj16))+((r00*x5463)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r12*sj16))+((r11*x5462))+(((-1.0)*r10*x5463)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x5462))+(((-1.0)*r02*sj16))+((r00*x5463))))+IKsqr((((r12*sj16))+((r11*x5462))+(((-1.0)*r10*x5463))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-1.0)*r01*x5462))+(((-1.0)*r02*sj16))+((r00*x5463))), (((r12*sj16))+((r11*x5462))+(((-1.0)*r10*x5463))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x5464=IKcos(j12);
IkReal x5465=IKsin(j12);
IkReal x5466=((1.0)*sj16);
IkReal x5467=((0.09465)*cj17);
IkReal x5468=((0.09465)*sj17);
IkReal x5469=(cj17*r10);
IkReal x5470=((1.0)*cj16);
IkReal x5471=(r11*sj17);
IkReal x5472=(cj17*r00);
IkReal x5473=((1.0)*sj13);
IkReal x5474=(cj17*r21);
IkReal x5475=(r01*sj17);
IkReal x5476=((0.425)*sj13);
IkReal x5477=((0.39225)*sj13);
IkReal x5478=(r20*sj17);
IkReal x5479=(cj13*x5465);
IkReal x5480=(sj14*x5464);
IkReal x5481=((1.0)*x5465);
IkReal x5482=(cj14*x5464);
IkReal x5483=((1.0)*x5464);
evalcond[0]=(((cj16*x5469))+x5464+(((-1.0)*x5470*x5471))+(((-1.0)*r12*x5466)));
evalcond[1]=((((-1.0)*x5481))+((cj16*x5472))+(((-1.0)*r02*x5466))+(((-1.0)*x5470*x5475)));
evalcond[2]=((((-1.0)*x5473*x5480))+((r00*sj17))+((cj17*r01))+((cj13*x5482)));
evalcond[3]=(((cj14*x5479))+(((-1.0)*sj14*x5465*x5473))+((cj17*r11))+((r10*sj17)));
evalcond[4]=((((-1.0)*x5466*x5472))+(((-1.0)*x5474*x5483))+(((-1.0)*x5478*x5483))+(((-1.0)*r02*x5470))+((sj16*x5475)));
evalcond[5]=((((-1.0)*x5466*x5469))+(((-1.0)*x5474*x5481))+(((-1.0)*r12*x5470))+(((-1.0)*x5478*x5481))+((sj16*x5471)));
evalcond[6]=((((-1.0)*r01*x5467))+((x5477*x5482))+(((-0.10915)*x5465))+(((-1.0)*px))+((x5464*x5476))+(((0.39225)*cj13*x5480))+(((-1.0)*r00*x5468)));
evalcond[7]=(((cj14*x5465*x5477))+(((0.10915)*x5464))+(((-1.0)*r10*x5468))+((x5465*x5476))+(((-1.0)*py))+(((-1.0)*r11*x5467))+(((0.39225)*sj14*x5479)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x5484=((1.0)*cj17);
IkReal x5485=((1.0)*sj17);
CheckValue<IkReal> x5486 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x5485))+(((-1.0)*r11*x5484)))),IkReal(((((-1.0)*r00*x5485))+(((-1.0)*r01*x5484)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5486.valid){
continue;
}
CheckValue<IkReal> x5487=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj13*sj14))+((cj13*cj14)))),-1);
if(!x5487.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x5486.value)+(((1.5707963267949)*(x5487.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[4];
IkReal x5488=IKcos(j12);
IkReal x5489=IKsin(j12);
IkReal x5490=((0.09465)*cj17);
IkReal x5491=(r10*sj17);
IkReal x5492=((1.0)*sj13);
IkReal x5493=(r00*sj17);
IkReal x5494=((0.425)*sj13);
IkReal x5495=((0.39225)*sj13);
IkReal x5496=(cj13*x5489);
IkReal x5497=(sj14*x5488);
IkReal x5498=(cj14*x5488);
evalcond[0]=(x5493+(((-1.0)*x5492*x5497))+((cj17*r01))+((cj13*x5498)));
evalcond[1]=(x5491+((cj14*x5496))+(((-1.0)*sj14*x5489*x5492))+((cj17*r11)));
evalcond[2]=(((x5495*x5498))+(((0.39225)*cj13*x5497))+((x5488*x5494))+(((-0.10915)*x5489))+(((-1.0)*r01*x5490))+(((-1.0)*px))+(((-0.09465)*x5493)));
evalcond[3]=(((x5489*x5494))+(((0.10915)*x5488))+(((-1.0)*r11*x5490))+(((0.39225)*sj14*x5496))+(((-1.0)*py))+(((-0.09465)*x5491))+((cj14*x5489*x5495)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j16eval[3];
sj15=1.0;
cj15=0;
j15=1.5707963267949;
IkReal x5499=(((r00*sj17))+((cj17*r01)));
j16eval[0]=x5499;
j16eval[1]=((IKabs(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))))+(IKabs((cj12*r22))));
j16eval[2]=IKsign(x5499);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=1.0;
cj15=0;
j15=1.5707963267949;
IkReal x5500=(((cj17*r11))+((r10*sj17)));
j16eval[0]=x5500;
j16eval[1]=((IKabs((r22*sj12)))+(IKabs(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12))))));
j16eval[2]=IKsign(x5500);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=1.0;
cj15=0;
j15=1.5707963267949;
IkReal x5501=((1.0)*cj12);
IkReal x5502=((1.0)*sj12);
IkReal x5503=(((r20*sj17))+((cj17*r21)));
j16eval[0]=x5503;
j16eval[1]=IKsign(x5503);
j16eval[2]=((IKabs((((cj12*r01*sj17))+(((-1.0)*cj17*r10*x5502))+((r11*sj12*sj17))+(((-1.0)*cj17*r00*x5501)))))+(IKabs(((((-1.0)*r02*x5501))+(((-1.0)*r12*x5502))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x5505 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5505)==0){
continue;
}
IkReal x5504=pow(x5505,-0.5);
CheckValue<IkReal> x5506 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5506.valid){
continue;
}
IkReal gconst114=((-1.0)*(x5506.value));
IkReal gconst115=((-1.0)*r21*x5504);
IkReal gconst116=(r20*x5504);
CheckValue<IkReal> x5507 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5507.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j17+(x5507.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x5510 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5510.valid){
continue;
}
IkReal x5508=((-1.0)*(x5510.value));
IkReal x5509=x5504;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
sj17=gconst115;
cj17=gconst116;
j17=x5508;
IkReal gconst114=x5508;
IkReal gconst115=((-1.0)*r21*x5509);
IkReal gconst116=(r20*x5509);
j16eval[0]=cj12;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x5513 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5513.valid){
continue;
}
IkReal x5511=((-1.0)*(x5513.value));
IkReal x5512=x5504;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
sj17=gconst115;
cj17=gconst116;
j17=x5511;
IkReal gconst114=x5511;
IkReal gconst115=((-1.0)*r21*x5512);
IkReal gconst116=(r20*x5512);
j16eval[0]=sj12;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
CheckValue<IkReal> x5516 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5516.valid){
continue;
}
IkReal x5514=((-1.0)*(x5516.value));
IkReal x5515=x5504;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
sj17=gconst115;
cj17=gconst116;
j17=x5514;
IkReal gconst114=x5514;
IkReal gconst115=((-1.0)*r21*x5515);
IkReal gconst116=(r20*x5515);
IkReal x5517=r22*r22;
CheckValue<IkReal> x5520=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x5517))),-1);
if(!x5520.valid){
continue;
}
IkReal x5518=x5520.value;
IkReal x5519=(x5517+(((2.0)*x5518*(r20*r20)*(r21*r21)))+((x5518*(r21*r21*r21*r21)))+((x5518*(r20*r20*r20*r20))));
j16eval[0]=x5519;
j16eval[1]=IKsign(x5519);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x5521=(gconst115*r21);
IkReal x5522=(gconst116*r20);
IkReal x5523=(cj13*cj14);
IkReal x5524=(sj13*sj14);
CheckValue<IkReal> x5525 = IKatan2WithCheck(IkReal((((x5521*x5523))+((x5522*x5524))+(((-1.0)*x5521*x5524))+(((-1.0)*x5522*x5523)))),IkReal((((r22*x5524))+(((-1.0)*r22*x5523)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5525.valid){
continue;
}
CheckValue<IkReal> x5526=IKPowWithIntegerCheck(IKsign(((((-2.0)*x5521*x5522))+(r22*r22)+(x5522*x5522)+(x5521*x5521))),-1);
if(!x5526.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x5525.value)+(((1.5707963267949)*(x5526.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x5527=IKcos(j16);
IkReal x5528=IKsin(j16);
IkReal x5529=((1.0)*sj12);
IkReal x5530=((1.0)*cj12);
IkReal x5531=(gconst115*r20);
IkReal x5532=(gconst116*r21);
IkReal x5533=(gconst115*x5528);
IkReal x5534=((1.0)*x5527);
IkReal x5535=(gconst116*x5527);
IkReal x5536=((1.0)*x5528);
evalcond[0]=((((-1.0)*gconst115*r21*x5534))+(((-1.0)*r22*x5536))+((r20*x5535)));
evalcond[1]=(cj12+((r10*x5535))+(((-1.0)*r12*x5536))+(((-1.0)*gconst115*r11*x5534)));
evalcond[2]=((((-1.0)*r02*x5536))+(((-1.0)*x5529))+(((-1.0)*gconst115*r01*x5534))+((r00*x5535)));
evalcond[3]=((((-1.0)*cj13*cj14))+(((-1.0)*r22*x5534))+((r21*x5533))+(((-1.0)*gconst116*r20*x5536))+((sj13*sj14)));
evalcond[4]=((((-1.0)*r02*x5534))+(((-1.0)*x5530*x5532))+(((-1.0)*x5530*x5531))+((r01*x5533))+(((-1.0)*gconst116*r00*x5536)));
evalcond[5]=((((-1.0)*gconst116*r10*x5536))+((r11*x5533))+(((-1.0)*r12*x5534))+(((-1.0)*x5529*x5532))+(((-1.0)*x5529*x5531)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x5537 = IKatan2WithCheck(IkReal((((gconst116*r20*sj12))+(((-1.0)*gconst115*r21*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5537.valid){
continue;
}
CheckValue<IkReal> x5538=IKPowWithIntegerCheck(IKsign((((gconst115*r10))+((gconst116*r11)))),-1);
if(!x5538.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x5537.value)+(((1.5707963267949)*(x5538.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x5539=IKcos(j16);
IkReal x5540=IKsin(j16);
IkReal x5541=((1.0)*sj12);
IkReal x5542=((1.0)*cj12);
IkReal x5543=(gconst115*r20);
IkReal x5544=(gconst116*r21);
IkReal x5545=(gconst115*x5540);
IkReal x5546=((1.0)*x5539);
IkReal x5547=(gconst116*x5539);
IkReal x5548=((1.0)*x5540);
evalcond[0]=(((r20*x5547))+(((-1.0)*r22*x5548))+(((-1.0)*gconst115*r21*x5546)));
evalcond[1]=((((-1.0)*gconst115*r11*x5546))+((r10*x5547))+cj12+(((-1.0)*r12*x5548)));
evalcond[2]=(((r00*x5547))+(((-1.0)*r02*x5548))+(((-1.0)*x5541))+(((-1.0)*gconst115*r01*x5546)));
evalcond[3]=((((-1.0)*cj13*cj14))+(((-1.0)*gconst116*r20*x5548))+((sj13*sj14))+(((-1.0)*r22*x5546))+((r21*x5545)));
evalcond[4]=((((-1.0)*x5542*x5543))+(((-1.0)*x5542*x5544))+(((-1.0)*r02*x5546))+(((-1.0)*gconst116*r00*x5548))+((r01*x5545)));
evalcond[5]=((((-1.0)*gconst116*r10*x5548))+(((-1.0)*x5541*x5543))+(((-1.0)*x5541*x5544))+((r11*x5545))+(((-1.0)*r12*x5546)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x5549 = IKatan2WithCheck(IkReal((((cj12*gconst116*r20))+(((-1.0)*cj12*gconst115*r21)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5549.valid){
continue;
}
CheckValue<IkReal> x5550=IKPowWithIntegerCheck(IKsign((((gconst115*r00))+((gconst116*r01)))),-1);
if(!x5550.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x5549.value)+(((1.5707963267949)*(x5550.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x5551=IKcos(j16);
IkReal x5552=IKsin(j16);
IkReal x5553=((1.0)*sj12);
IkReal x5554=((1.0)*cj12);
IkReal x5555=(gconst115*r20);
IkReal x5556=(gconst116*r21);
IkReal x5557=(gconst115*x5552);
IkReal x5558=((1.0)*x5551);
IkReal x5559=(gconst116*x5551);
IkReal x5560=((1.0)*x5552);
evalcond[0]=((((-1.0)*r22*x5560))+(((-1.0)*gconst115*r21*x5558))+((r20*x5559)));
evalcond[1]=((((-1.0)*gconst115*r11*x5558))+(((-1.0)*r12*x5560))+((r10*x5559))+cj12);
evalcond[2]=(((r00*x5559))+(((-1.0)*r02*x5560))+(((-1.0)*x5553))+(((-1.0)*gconst115*r01*x5558)));
evalcond[3]=((((-1.0)*cj13*cj14))+((r21*x5557))+(((-1.0)*gconst116*r20*x5560))+((sj13*sj14))+(((-1.0)*r22*x5558)));
evalcond[4]=(((r01*x5557))+(((-1.0)*gconst116*r00*x5560))+(((-1.0)*r02*x5558))+(((-1.0)*x5554*x5555))+(((-1.0)*x5554*x5556)));
evalcond[5]=(((r11*x5557))+(((-1.0)*x5553*x5556))+(((-1.0)*x5553*x5555))+(((-1.0)*r12*x5558))+(((-1.0)*gconst116*r10*x5560)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5562 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5562)==0){
continue;
}
IkReal x5561=pow(x5562,-0.5);
CheckValue<IkReal> x5563 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5563.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x5563.value))));
IkReal gconst118=((1.0)*r21*x5561);
IkReal gconst119=((-1.0)*r20*x5561);
CheckValue<IkReal> x5564 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5564.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j17+(x5564.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x5567 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5567.valid){
continue;
}
IkReal x5565=((1.0)*(x5567.value));
IkReal x5566=x5561;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
sj17=gconst118;
cj17=gconst119;
j17=((3.14159265)+(((-1.0)*x5565)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5565)));
IkReal gconst118=((1.0)*r21*x5566);
IkReal gconst119=((-1.0)*r20*x5566);
IkReal x5568=r22*r22;
IkReal x5569=((1.0)*x5568);
CheckValue<IkReal> x5573=IKPowWithIntegerCheck(((-1.0)+x5568),-1);
if(!x5573.valid){
continue;
}
IkReal x5570=x5573.value;
if((((1.0)+(((-1.0)*x5569)))) < -0.00001)
continue;
IkReal x5571=IKsqrt(((1.0)+(((-1.0)*x5569))));
IkReal x5572=(cj12*x5570*x5571);
j16eval[0]=((IKabs((x5572+(((-1.0)*x5569*x5572)))))+(IKabs((cj12*r22))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x5576 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5576.valid){
continue;
}
IkReal x5574=((1.0)*(x5576.value));
IkReal x5575=x5561;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
sj17=gconst118;
cj17=gconst119;
j17=((3.14159265)+(((-1.0)*x5574)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5574)));
IkReal gconst118=((1.0)*r21*x5575);
IkReal gconst119=((-1.0)*r20*x5575);
IkReal x5577=r22*r22;
IkReal x5578=((1.0)*x5577);
CheckValue<IkReal> x5582=IKPowWithIntegerCheck(((-1.0)+x5577),-1);
if(!x5582.valid){
continue;
}
IkReal x5579=x5582.value;
if((((1.0)+(((-1.0)*x5578)))) < -0.00001)
continue;
IkReal x5580=IKsqrt(((1.0)+(((-1.0)*x5578))));
IkReal x5581=(sj12*x5579*x5580);
j16eval[0]=((IKabs((r22*sj12)))+(IKabs((x5581+(((-1.0)*x5578*x5581))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
CheckValue<IkReal> x5585 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5585.valid){
continue;
}
IkReal x5583=((1.0)*(x5585.value));
IkReal x5584=x5561;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
sj17=gconst118;
cj17=gconst119;
j17=((3.14159265)+(((-1.0)*x5583)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5583)));
IkReal gconst118=((1.0)*r21*x5584);
IkReal gconst119=((-1.0)*r20*x5584);
IkReal x5586=r22*r22;
IkReal x5587=(cj12*r02);
IkReal x5588=(r12*sj12);
CheckValue<IkReal> x5592=IKPowWithIntegerCheck(((-1.0)+x5586),-1);
if(!x5592.valid){
continue;
}
IkReal x5589=x5592.value;
if((((1.0)+(((-1.0)*x5586)))) < -0.00001)
continue;
IkReal x5590=IKsqrt(((1.0)+(((-1.0)*x5586))));
IkReal x5591=(r22*x5589*x5590);
j16eval[0]=0;
j16eval[1]=((IKabs((((x5587*x5591))+((x5588*x5591)))))+(IKabs(((((-1.0)*x5588))+(((-1.0)*x5587))))));
j16eval[2]=0;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x5593=((1.0)*gconst119);
CheckValue<IkReal> x5594=IKPowWithIntegerCheck(IKsign((((gconst119*r21))+((gconst118*r20)))),-1);
if(!x5594.valid){
continue;
}
CheckValue<IkReal> x5595 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*r00*x5593))+(((-1.0)*r10*sj12*x5593))+((cj12*gconst118*r01))+((gconst118*r11*sj12)))),IkReal(((((-1.0)*cj12*r02))+(((-1.0)*r12*sj12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5595.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5594.value)))+(x5595.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x5596=IKcos(j16);
IkReal x5597=IKsin(j16);
IkReal x5598=(gconst118*r11);
IkReal x5599=(gconst118*r01);
IkReal x5600=(gconst118*r21);
IkReal x5601=((1.0)*sj12);
IkReal x5602=(gconst119*r21);
IkReal x5603=((1.0)*cj12);
IkReal x5604=(gconst118*r20);
IkReal x5605=((1.0)*x5596);
IkReal x5606=((1.0)*x5597);
IkReal x5607=(gconst119*x5596);
IkReal x5608=(gconst119*x5606);
evalcond[0]=((((-1.0)*r22*x5606))+((r20*x5607))+(((-1.0)*x5600*x5605)));
evalcond[1]=(cj12+(((-1.0)*r12*x5606))+(((-1.0)*x5598*x5605))+((r10*x5607)));
evalcond[2]=((((-1.0)*x5599*x5605))+((r00*x5607))+(((-1.0)*r02*x5606))+(((-1.0)*x5601)));
evalcond[3]=((((-1.0)*cj13*cj14))+(((-1.0)*r22*x5605))+((sj13*sj14))+(((-1.0)*r20*x5608))+((x5597*x5600)));
evalcond[4]=((((-1.0)*r00*x5608))+(((-1.0)*x5602*x5603))+(((-1.0)*x5603*x5604))+(((-1.0)*r02*x5605))+((x5597*x5599)));
evalcond[5]=((((-1.0)*r10*x5608))+(((-1.0)*r12*x5605))+(((-1.0)*x5601*x5602))+(((-1.0)*x5601*x5604))+((x5597*x5598)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x5609=IKPowWithIntegerCheck(IKsign((((gconst118*r10))+((gconst119*r11)))),-1);
if(!x5609.valid){
continue;
}
CheckValue<IkReal> x5610 = IKatan2WithCheck(IkReal(((((-1.0)*gconst118*r21*sj12))+((gconst119*r20*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5610.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5609.value)))+(x5610.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x5611=IKcos(j16);
IkReal x5612=IKsin(j16);
IkReal x5613=(gconst118*r11);
IkReal x5614=(gconst118*r01);
IkReal x5615=(gconst118*r21);
IkReal x5616=((1.0)*sj12);
IkReal x5617=(gconst119*r21);
IkReal x5618=((1.0)*cj12);
IkReal x5619=(gconst118*r20);
IkReal x5620=((1.0)*x5611);
IkReal x5621=((1.0)*x5612);
IkReal x5622=(gconst119*x5611);
IkReal x5623=(gconst119*x5621);
evalcond[0]=((((-1.0)*r22*x5621))+((r20*x5622))+(((-1.0)*x5615*x5620)));
evalcond[1]=((((-1.0)*x5613*x5620))+(((-1.0)*r12*x5621))+cj12+((r10*x5622)));
evalcond[2]=(((r00*x5622))+(((-1.0)*x5614*x5620))+(((-1.0)*r02*x5621))+(((-1.0)*x5616)));
evalcond[3]=((((-1.0)*cj13*cj14))+(((-1.0)*r22*x5620))+((sj13*sj14))+(((-1.0)*r20*x5623))+((x5612*x5615)));
evalcond[4]=((((-1.0)*r00*x5623))+(((-1.0)*x5618*x5619))+(((-1.0)*x5617*x5618))+(((-1.0)*r02*x5620))+((x5612*x5614)));
evalcond[5]=((((-1.0)*r10*x5623))+(((-1.0)*r12*x5620))+((x5612*x5613))+(((-1.0)*x5616*x5619))+(((-1.0)*x5616*x5617)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x5624=IKPowWithIntegerCheck(IKsign((((gconst118*r00))+((gconst119*r01)))),-1);
if(!x5624.valid){
continue;
}
CheckValue<IkReal> x5625 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*gconst118*r21))+((cj12*gconst119*r20)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5625.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5624.value)))+(x5625.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x5626=IKcos(j16);
IkReal x5627=IKsin(j16);
IkReal x5628=(gconst118*r11);
IkReal x5629=(gconst118*r01);
IkReal x5630=(gconst118*r21);
IkReal x5631=((1.0)*sj12);
IkReal x5632=(gconst119*r21);
IkReal x5633=((1.0)*cj12);
IkReal x5634=(gconst118*r20);
IkReal x5635=((1.0)*x5626);
IkReal x5636=((1.0)*x5627);
IkReal x5637=(gconst119*x5626);
IkReal x5638=(gconst119*x5636);
evalcond[0]=(((r20*x5637))+(((-1.0)*x5630*x5635))+(((-1.0)*r22*x5636)));
evalcond[1]=((((-1.0)*r12*x5636))+(((-1.0)*x5628*x5635))+((r10*x5637))+cj12);
evalcond[2]=((((-1.0)*x5629*x5635))+(((-1.0)*r02*x5636))+(((-1.0)*x5631))+((r00*x5637)));
evalcond[3]=((((-1.0)*cj13*cj14))+((x5627*x5630))+(((-1.0)*r20*x5638))+((sj13*sj14))+(((-1.0)*r22*x5635)));
evalcond[4]=((((-1.0)*x5632*x5633))+(((-1.0)*x5633*x5634))+(((-1.0)*r02*x5635))+(((-1.0)*r00*x5638))+((x5627*x5629)));
evalcond[5]=((((-1.0)*r12*x5635))+(((-1.0)*r10*x5638))+((x5627*x5628))+(((-1.0)*x5631*x5634))+(((-1.0)*x5631*x5632)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5640 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5640)==0){
continue;
}
IkReal x5639=pow(x5640,-0.5);
CheckValue<IkReal> x5641 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5641.valid){
continue;
}
IkReal gconst120=((-1.0)*(x5641.value));
IkReal gconst121=((-1.0)*r11*x5639);
IkReal gconst122=(r10*x5639);
CheckValue<IkReal> x5642 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5642.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5642.value)+j17)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
CheckValue<IkReal> x5645 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5645.valid){
continue;
}
IkReal x5643=((-1.0)*(x5645.value));
IkReal x5644=x5639;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
sj17=gconst121;
cj17=gconst122;
j17=x5643;
IkReal gconst120=x5643;
IkReal gconst121=((-1.0)*r11*x5644);
IkReal gconst122=(r10*x5644);
j16eval[0]=cj12;
j16eval[1]=r22;
j16eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x5646=((1.0)*gconst122);
CheckValue<IkReal> x5647 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*r00*x5646))+(((-1.0)*r10*sj12*x5646))+((cj12*gconst121*r01))+((gconst121*r11*sj12)))),IkReal(((((-1.0)*cj12*r02))+(((-1.0)*r12*sj12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5647.valid){
continue;
}
CheckValue<IkReal> x5648=IKPowWithIntegerCheck(IKsign((((gconst122*r21))+((gconst121*r20)))),-1);
if(!x5648.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x5647.value)+(((1.5707963267949)*(x5648.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x5649=IKcos(j16);
IkReal x5650=IKsin(j16);
IkReal x5651=(gconst122*r00);
IkReal x5652=((1.0)*sj12);
IkReal x5653=(gconst121*r20);
IkReal x5654=(gconst122*r20);
IkReal x5655=(gconst122*r10);
IkReal x5656=((1.0)*gconst122*r21);
IkReal x5657=(gconst121*x5650);
IkReal x5658=((1.0)*x5650);
IkReal x5659=((1.0)*x5649);
evalcond[0]=((((-1.0)*r22*x5658))+((x5649*x5654))+(((-1.0)*gconst121*r21*x5659)));
evalcond[1]=((((-1.0)*r12*x5658))+(((-1.0)*gconst121*r11*x5659))+((x5649*x5655))+cj12);
evalcond[2]=((((-1.0)*gconst121*r01*x5659))+((x5649*x5651))+(((-1.0)*r02*x5658))+(((-1.0)*x5652)));
evalcond[3]=((((-1.0)*cj13*cj14))+(((-1.0)*r22*x5659))+(((-1.0)*x5654*x5658))+((r21*x5657))+((sj13*sj14)));
evalcond[4]=((((-1.0)*x5651*x5658))+((r01*x5657))+(((-1.0)*r02*x5659))+(((-1.0)*cj12*x5656))+(((-1.0)*cj12*x5653)));
evalcond[5]=((((-1.0)*r12*x5659))+(((-1.0)*x5652*x5653))+(((-1.0)*x5655*x5658))+((r11*x5657))+(((-1.0)*gconst122*r21*x5652)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x5660 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*gconst121*r21))+((cj12*gconst122*r20)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5660.valid){
continue;
}
CheckValue<IkReal> x5661=IKPowWithIntegerCheck(IKsign((((gconst122*r01))+((gconst121*r00)))),-1);
if(!x5661.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x5660.value)+(((1.5707963267949)*(x5661.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x5662=IKcos(j16);
IkReal x5663=IKsin(j16);
IkReal x5664=(gconst122*r00);
IkReal x5665=((1.0)*sj12);
IkReal x5666=(gconst121*r20);
IkReal x5667=(gconst122*r20);
IkReal x5668=(gconst122*r10);
IkReal x5669=((1.0)*gconst122*r21);
IkReal x5670=(gconst121*x5663);
IkReal x5671=((1.0)*x5663);
IkReal x5672=((1.0)*x5662);
evalcond[0]=((((-1.0)*r22*x5671))+((x5662*x5667))+(((-1.0)*gconst121*r21*x5672)));
evalcond[1]=((((-1.0)*gconst121*r11*x5672))+(((-1.0)*r12*x5671))+cj12+((x5662*x5668)));
evalcond[2]=((((-1.0)*x5665))+((x5662*x5664))+(((-1.0)*r02*x5671))+(((-1.0)*gconst121*r01*x5672)));
evalcond[3]=((((-1.0)*cj13*cj14))+(((-1.0)*r22*x5672))+(((-1.0)*x5667*x5671))+((sj13*sj14))+((r21*x5670)));
evalcond[4]=((((-1.0)*x5664*x5671))+(((-1.0)*cj12*x5669))+((r01*x5670))+(((-1.0)*cj12*x5666))+(((-1.0)*r02*x5672)));
evalcond[5]=((((-1.0)*gconst122*r21*x5665))+(((-1.0)*r12*x5672))+((r11*x5670))+(((-1.0)*x5668*x5671))+(((-1.0)*x5665*x5666)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5674 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5674)==0){
continue;
}
IkReal x5673=pow(x5674,-0.5);
CheckValue<IkReal> x5675 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5675.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x5675.value))));
IkReal gconst124=((1.0)*r11*x5673);
IkReal gconst125=((-1.0)*r10*x5673);
CheckValue<IkReal> x5676 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5676.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5676.value)+j17)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
CheckValue<IkReal> x5679 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5679.valid){
continue;
}
IkReal x5677=((1.0)*(x5679.value));
IkReal x5678=x5673;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
sj17=gconst124;
cj17=gconst125;
j17=((3.14159265)+(((-1.0)*x5677)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5677)));
IkReal gconst124=((1.0)*r11*x5678);
IkReal gconst125=((-1.0)*r10*x5678);
j16eval[0]=cj12;
j16eval[1]=r22;
j16eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[5];
CheckValue<IkReal> x5682 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5682.valid){
continue;
}
IkReal x5680=((1.0)*(x5682.value));
IkReal x5681=x5673;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
sj17=gconst124;
cj17=gconst125;
j17=((3.14159265)+(((-1.0)*x5680)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5680)));
IkReal gconst124=((1.0)*r11*x5681);
IkReal gconst125=((-1.0)*r10*x5681);
j16eval[0]=0;
j16eval[1]=0;
j16eval[2]=r22;
j16eval[3]=sj12;
j16eval[4]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  || IKabs(j16eval[3]) < 0.0000010000000000  || IKabs(j16eval[4]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x5685 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5685.valid){
continue;
}
IkReal x5683=((1.0)*(x5685.value));
IkReal x5684=x5673;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
sj17=gconst124;
cj17=gconst125;
j17=((3.14159265)+(((-1.0)*x5683)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5683)));
IkReal gconst124=((1.0)*r11*x5684);
IkReal gconst125=((-1.0)*r10*x5684);
IkReal x5686=r12*r12;
IkReal x5687=(cj12*r02);
IkReal x5688=x5673;
IkReal x5689=(sj12*x5688);
j16eval[0]=((IKabs(((((-1.0)*r12*sj12))+(((-1.0)*x5687)))))+(IKabs((((x5686*x5689))+((r12*x5687*x5688))+(((-1.0)*x5689))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x5690=((1.0)*cj12);
IkReal x5691=((1.0)*sj12);
CheckValue<IkReal> x5692 = IKatan2WithCheck(IkReal((((gconst124*r11*sj12))+(((-1.0)*gconst125*r00*x5690))+((cj12*gconst124*r01))+(((-1.0)*gconst125*r10*x5691)))),IkReal(((((-1.0)*r02*x5690))+(((-1.0)*r12*x5691)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5692.valid){
continue;
}
CheckValue<IkReal> x5693=IKPowWithIntegerCheck(IKsign((((gconst124*r20))+((gconst125*r21)))),-1);
if(!x5693.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x5692.value)+(((1.5707963267949)*(x5693.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x5694=IKcos(j16);
IkReal x5695=IKsin(j16);
IkReal x5696=((1.0)*gconst125);
IkReal x5697=((1.0)*sj12);
IkReal x5698=(gconst124*r20);
IkReal x5699=(gconst124*x5695);
IkReal x5700=((1.0)*x5694);
IkReal x5701=((1.0)*x5695);
IkReal x5702=(gconst125*x5694);
evalcond[0]=(((r20*x5702))+(((-1.0)*r22*x5701))+(((-1.0)*gconst124*r21*x5700)));
evalcond[1]=((((-1.0)*r12*x5701))+((r10*x5702))+cj12+(((-1.0)*gconst124*r11*x5700)));
evalcond[2]=((((-1.0)*x5697))+(((-1.0)*gconst124*r01*x5700))+(((-1.0)*r02*x5701))+((r00*x5702)));
evalcond[3]=((((-1.0)*cj13*cj14))+(((-1.0)*r20*x5695*x5696))+(((-1.0)*r22*x5700))+((sj13*sj14))+((r21*x5699)));
evalcond[4]=((((-1.0)*cj12*x5698))+(((-1.0)*r02*x5700))+(((-1.0)*r00*x5695*x5696))+(((-1.0)*cj12*r21*x5696))+((r01*x5699)));
evalcond[5]=((((-1.0)*r12*x5700))+(((-1.0)*r10*x5695*x5696))+(((-1.0)*r21*sj12*x5696))+(((-1.0)*x5697*x5698))+((r11*x5699)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x5703=IKPowWithIntegerCheck(IKsign((((gconst125*r11))+((gconst124*r10)))),-1);
if(!x5703.valid){
continue;
}
CheckValue<IkReal> x5704 = IKatan2WithCheck(IkReal((((gconst125*r20*sj12))+(((-1.0)*gconst124*r21*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5704.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5703.value)))+(x5704.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x5705=IKcos(j16);
IkReal x5706=IKsin(j16);
IkReal x5707=((1.0)*gconst125);
IkReal x5708=((1.0)*sj12);
IkReal x5709=(gconst124*r20);
IkReal x5710=(gconst124*x5706);
IkReal x5711=((1.0)*x5705);
IkReal x5712=((1.0)*x5706);
IkReal x5713=(gconst125*x5705);
evalcond[0]=((((-1.0)*r22*x5712))+(((-1.0)*gconst124*r21*x5711))+((r20*x5713)));
evalcond[1]=(((r10*x5713))+cj12+(((-1.0)*gconst124*r11*x5711))+(((-1.0)*r12*x5712)));
evalcond[2]=((((-1.0)*gconst124*r01*x5711))+((r00*x5713))+(((-1.0)*x5708))+(((-1.0)*r02*x5712)));
evalcond[3]=((((-1.0)*cj13*cj14))+(((-1.0)*r20*x5706*x5707))+(((-1.0)*r22*x5711))+((sj13*sj14))+((r21*x5710)));
evalcond[4]=((((-1.0)*cj12*x5709))+(((-1.0)*r00*x5706*x5707))+(((-1.0)*cj12*r21*x5707))+((r01*x5710))+(((-1.0)*r02*x5711)));
evalcond[5]=((((-1.0)*x5708*x5709))+(((-1.0)*r21*sj12*x5707))+((r11*x5710))+(((-1.0)*r10*x5706*x5707))+(((-1.0)*r12*x5711)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x5714=IKPowWithIntegerCheck(IKsign((((gconst124*r00))+((gconst125*r01)))),-1);
if(!x5714.valid){
continue;
}
CheckValue<IkReal> x5715 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*gconst124*r21))+((cj12*gconst125*r20)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5715.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5714.value)))+(x5715.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x5716=IKcos(j16);
IkReal x5717=IKsin(j16);
IkReal x5718=((1.0)*gconst125);
IkReal x5719=((1.0)*sj12);
IkReal x5720=(gconst124*r20);
IkReal x5721=(gconst124*x5717);
IkReal x5722=((1.0)*x5716);
IkReal x5723=((1.0)*x5717);
IkReal x5724=(gconst125*x5716);
evalcond[0]=(((r20*x5724))+(((-1.0)*r22*x5723))+(((-1.0)*gconst124*r21*x5722)));
evalcond[1]=((((-1.0)*r12*x5723))+(((-1.0)*gconst124*r11*x5722))+cj12+((r10*x5724)));
evalcond[2]=((((-1.0)*gconst124*r01*x5722))+((r00*x5724))+(((-1.0)*r02*x5723))+(((-1.0)*x5719)));
evalcond[3]=((((-1.0)*cj13*cj14))+((r21*x5721))+((sj13*sj14))+(((-1.0)*r22*x5722))+(((-1.0)*r20*x5717*x5718)));
evalcond[4]=((((-1.0)*cj12*r21*x5718))+((r01*x5721))+(((-1.0)*r00*x5717*x5718))+(((-1.0)*cj12*x5720))+(((-1.0)*r02*x5722)));
evalcond[5]=(((r11*x5721))+(((-1.0)*r12*x5722))+(((-1.0)*r10*x5717*x5718))+(((-1.0)*r21*sj12*x5718))+(((-1.0)*x5719*x5720)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j12))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
sj15=1.0;
cj15=0;
j15=1.5707963267949;
sj12=0;
cj12=1.0;
j12=0;
IkReal x5725=(((r00*sj17))+((cj17*r01)));
j16eval[0]=x5725;
j16eval[1]=IKsign(x5725);
j16eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*r21*sj17))+((cj17*r20))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=1.0;
cj15=0;
j15=1.5707963267949;
sj12=0;
cj12=1.0;
j12=0;
IkReal x5726=((1.0)*sj17);
IkReal x5727=((((-1.0)*r20*x5726))+(((-1.0)*cj17*r21)));
j16eval[0]=x5727;
j16eval[1]=IKsign(x5727);
j16eval[2]=((IKabs(r02))+(IKabs((((cj17*r00))+(((-1.0)*r01*x5726))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=1.0;
cj15=0;
j15=1.5707963267949;
sj12=0;
cj12=1.0;
j12=0;
IkReal x5728=cj17*cj17;
IkReal x5729=r11*r11;
IkReal x5730=(r11*sj17);
IkReal x5731=(cj17*r10);
IkReal x5732=((((-2.0)*x5730*x5731))+(((-1.0)*x5728*x5729))+(r12*r12)+((x5728*(r10*r10)))+x5729);
j16eval[0]=x5732;
j16eval[1]=((IKabs(((((-1.0)*x5731))+x5730)))+(IKabs(r12)));
j16eval[2]=IKsign(x5732);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x5733=cj17*cj17;
IkReal x5734=r11*r11;
IkReal x5735=(r11*sj17);
IkReal x5736=(cj17*r10);
CheckValue<IkReal> x5737=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x5733*(r10*r10)))+(((-2.0)*x5735*x5736))+(((-1.0)*x5733*x5734))+x5734)),-1);
if(!x5737.valid){
continue;
}
CheckValue<IkReal> x5738 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x5736))+x5735)),IKFAST_ATAN2_MAGTHRESH);
if(!x5738.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5737.value)))+(x5738.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x5739=IKcos(j16);
IkReal x5740=IKsin(j16);
IkReal x5741=((1.0)*cj17);
IkReal x5742=(r11*sj17);
IkReal x5743=(cj17*x5739);
IkReal x5744=((1.0)*x5739);
IkReal x5745=((1.0)*x5740);
IkReal x5746=(sj17*x5740);
evalcond[0]=((((-1.0)*r21*sj17*x5744))+(((-1.0)*r22*x5745))+((r20*x5743)));
evalcond[1]=((((-1.0)*r02*x5745))+((r00*x5743))+(((-1.0)*r01*sj17*x5744)));
evalcond[2]=((((-1.0)*r10*x5740*x5741))+((x5740*x5742))+(((-1.0)*r12*x5744)));
evalcond[3]=((1.0)+(((-1.0)*x5742*x5744))+(((-1.0)*r12*x5745))+((r10*x5743)));
evalcond[4]=((((-1.0)*cj13*cj14))+((sj13*sj14))+(((-1.0)*r22*x5744))+(((-1.0)*r20*x5740*x5741))+((r21*x5746)));
evalcond[5]=((((-1.0)*r21*x5741))+(((-1.0)*r00*x5740*x5741))+((r01*x5746))+(((-1.0)*r02*x5744))+(((-1.0)*r20*sj17)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x5747=((1.0)*sj17);
CheckValue<IkReal> x5748=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj17*r21))+(((-1.0)*r20*x5747)))),-1);
if(!x5748.valid){
continue;
}
CheckValue<IkReal> x5749 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x5747))+((cj17*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x5749.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5748.value)))+(x5749.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x5750=IKcos(j16);
IkReal x5751=IKsin(j16);
IkReal x5752=((1.0)*cj17);
IkReal x5753=(r11*sj17);
IkReal x5754=(cj17*x5750);
IkReal x5755=((1.0)*x5750);
IkReal x5756=((1.0)*x5751);
IkReal x5757=(sj17*x5751);
evalcond[0]=((((-1.0)*r22*x5756))+((r20*x5754))+(((-1.0)*r21*sj17*x5755)));
evalcond[1]=(((r00*x5754))+(((-1.0)*r02*x5756))+(((-1.0)*r01*sj17*x5755)));
evalcond[2]=((((-1.0)*r12*x5755))+((x5751*x5753))+(((-1.0)*r10*x5751*x5752)));
evalcond[3]=((1.0)+(((-1.0)*r12*x5756))+(((-1.0)*x5753*x5755))+((r10*x5754)));
evalcond[4]=((((-1.0)*cj13*cj14))+((r21*x5757))+(((-1.0)*r22*x5755))+(((-1.0)*r20*x5751*x5752))+((sj13*sj14)));
evalcond[5]=((((-1.0)*r00*x5751*x5752))+(((-1.0)*r21*x5752))+((r01*x5757))+(((-1.0)*r20*sj17))+(((-1.0)*r02*x5755)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x5758 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj17))+((cj17*r20)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x5758.valid){
continue;
}
CheckValue<IkReal> x5759=IKPowWithIntegerCheck(IKsign((((r00*sj17))+((cj17*r01)))),-1);
if(!x5759.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x5758.value)+(((1.5707963267949)*(x5759.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x5760=IKcos(j16);
IkReal x5761=IKsin(j16);
IkReal x5762=((1.0)*cj17);
IkReal x5763=(r11*sj17);
IkReal x5764=(cj17*x5760);
IkReal x5765=((1.0)*x5760);
IkReal x5766=((1.0)*x5761);
IkReal x5767=(sj17*x5761);
evalcond[0]=((((-1.0)*r22*x5766))+((r20*x5764))+(((-1.0)*r21*sj17*x5765)));
evalcond[1]=(((r00*x5764))+(((-1.0)*r01*sj17*x5765))+(((-1.0)*r02*x5766)));
evalcond[2]=((((-1.0)*r12*x5765))+(((-1.0)*r10*x5761*x5762))+((x5761*x5763)));
evalcond[3]=((1.0)+(((-1.0)*r12*x5766))+((r10*x5764))+(((-1.0)*x5763*x5765)));
evalcond[4]=((((-1.0)*cj13*cj14))+(((-1.0)*r20*x5761*x5762))+((r21*x5767))+((sj13*sj14))+(((-1.0)*r22*x5765)));
evalcond[5]=((((-1.0)*r21*x5762))+((r01*x5767))+(((-1.0)*r00*x5761*x5762))+(((-1.0)*r20*sj17))+(((-1.0)*r02*x5765)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
sj15=1.0;
cj15=0;
j15=1.5707963267949;
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
IkReal x5768=(((r20*sj17))+((cj17*r21)));
j16eval[0]=x5768;
j16eval[1]=IKsign(x5768);
j16eval[2]=((IKabs(r02))+(IKabs((((cj17*r00))+(((-1.0)*r01*sj17))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=1.0;
cj15=0;
j15=1.5707963267949;
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
IkReal x5769=((1.0)*sj17);
IkReal x5770=((((-1.0)*cj17*r01))+(((-1.0)*r00*x5769)));
j16eval[0]=x5770;
j16eval[1]=IKsign(x5770);
j16eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*r21*x5769))+((cj17*r20))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=1.0;
cj15=0;
j15=1.5707963267949;
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
IkReal x5771=cj17*cj17;
IkReal x5772=r11*r11;
IkReal x5773=(r11*sj17);
IkReal x5774=(cj17*r10);
IkReal x5775=(((x5771*x5772))+(((-1.0)*(r12*r12)))+(((-1.0)*x5771*(r10*r10)))+(((2.0)*x5773*x5774))+(((-1.0)*x5772)));
j16eval[0]=x5775;
j16eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x5774))+x5773))));
j16eval[2]=IKsign(x5775);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x5776=cj17*cj17;
IkReal x5777=r11*r11;
IkReal x5778=(r11*sj17);
IkReal x5779=(cj17*r10);
CheckValue<IkReal> x5780=IKPowWithIntegerCheck(IKsign((((x5776*x5777))+(((2.0)*x5778*x5779))+(((-1.0)*(r12*r12)))+(((-1.0)*x5776*(r10*r10)))+(((-1.0)*x5777)))),-1);
if(!x5780.valid){
continue;
}
CheckValue<IkReal> x5781 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x5779))+x5778)),IKFAST_ATAN2_MAGTHRESH);
if(!x5781.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5780.value)))+(x5781.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x5782=IKcos(j16);
IkReal x5783=IKsin(j16);
IkReal x5784=(r11*sj17);
IkReal x5785=(cj17*x5782);
IkReal x5786=((1.0)*x5782);
IkReal x5787=((1.0)*x5783);
IkReal x5788=(sj17*x5783);
IkReal x5789=(cj17*x5787);
evalcond[0]=(((r20*x5785))+(((-1.0)*r22*x5787))+(((-1.0)*r21*sj17*x5786)));
evalcond[1]=((((-1.0)*r01*sj17*x5786))+((r00*x5785))+(((-1.0)*r02*x5787)));
evalcond[2]=((((-1.0)*r10*x5789))+((x5783*x5784))+(((-1.0)*r12*x5786)));
evalcond[3]=((-1.0)+(((-1.0)*x5784*x5786))+(((-1.0)*r12*x5787))+((r10*x5785)));
evalcond[4]=((((-1.0)*r00*x5789))+((r20*sj17))+((r01*x5788))+((cj17*r21))+(((-1.0)*r02*x5786)));
evalcond[5]=((((-1.0)*cj13*cj14))+(((-1.0)*r20*x5789))+((r21*x5788))+((sj13*sj14))+(((-1.0)*r22*x5786)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x5790=((1.0)*sj17);
CheckValue<IkReal> x5791=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj17*r01))+(((-1.0)*r00*x5790)))),-1);
if(!x5791.valid){
continue;
}
CheckValue<IkReal> x5792 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x5790))+((cj17*r20)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x5792.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5791.value)))+(x5792.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x5793=IKcos(j16);
IkReal x5794=IKsin(j16);
IkReal x5795=(r11*sj17);
IkReal x5796=(cj17*x5793);
IkReal x5797=((1.0)*x5793);
IkReal x5798=((1.0)*x5794);
IkReal x5799=(sj17*x5794);
IkReal x5800=(cj17*x5798);
evalcond[0]=(((r20*x5796))+(((-1.0)*r22*x5798))+(((-1.0)*r21*sj17*x5797)));
evalcond[1]=((((-1.0)*r01*sj17*x5797))+((r00*x5796))+(((-1.0)*r02*x5798)));
evalcond[2]=((((-1.0)*r10*x5800))+((x5794*x5795))+(((-1.0)*r12*x5797)));
evalcond[3]=((-1.0)+((r10*x5796))+(((-1.0)*x5795*x5797))+(((-1.0)*r12*x5798)));
evalcond[4]=(((r20*sj17))+((r01*x5799))+((cj17*r21))+(((-1.0)*r00*x5800))+(((-1.0)*r02*x5797)));
evalcond[5]=((((-1.0)*r20*x5800))+(((-1.0)*cj13*cj14))+((r21*x5799))+((sj13*sj14))+(((-1.0)*r22*x5797)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x5801 = IKatan2WithCheck(IkReal((((cj17*r00))+(((-1.0)*r01*sj17)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x5801.valid){
continue;
}
CheckValue<IkReal> x5802=IKPowWithIntegerCheck(IKsign((((r20*sj17))+((cj17*r21)))),-1);
if(!x5802.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x5801.value)+(((1.5707963267949)*(x5802.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x5803=IKcos(j16);
IkReal x5804=IKsin(j16);
IkReal x5805=(r11*sj17);
IkReal x5806=(cj17*x5803);
IkReal x5807=((1.0)*x5803);
IkReal x5808=((1.0)*x5804);
IkReal x5809=(sj17*x5804);
IkReal x5810=(cj17*x5808);
evalcond[0]=((((-1.0)*r22*x5808))+(((-1.0)*r21*sj17*x5807))+((r20*x5806)));
evalcond[1]=(((r00*x5806))+(((-1.0)*r01*sj17*x5807))+(((-1.0)*r02*x5808)));
evalcond[2]=((((-1.0)*r10*x5810))+(((-1.0)*r12*x5807))+((x5804*x5805)));
evalcond[3]=((-1.0)+(((-1.0)*x5805*x5807))+(((-1.0)*r12*x5808))+((r10*x5806)));
evalcond[4]=(((r01*x5809))+((r20*sj17))+((cj17*r21))+(((-1.0)*r02*x5807))+(((-1.0)*r00*x5810)));
evalcond[5]=((((-1.0)*cj13*cj14))+(((-1.0)*r22*x5807))+((r21*x5809))+((sj13*sj14))+(((-1.0)*r20*x5810)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5812 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5812)==0){
continue;
}
IkReal x5811=pow(x5812,-0.5);
CheckValue<IkReal> x5813 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5813.valid){
continue;
}
IkReal gconst126=((-1.0)*(x5813.value));
IkReal gconst127=((-1.0)*r01*x5811);
IkReal gconst128=(r00*x5811);
CheckValue<IkReal> x5814 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5814.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5814.value)+j17)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
CheckValue<IkReal> x5817 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5817.valid){
continue;
}
IkReal x5815=((-1.0)*(x5817.value));
IkReal x5816=x5811;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
sj17=gconst127;
cj17=gconst128;
j17=x5815;
IkReal gconst126=x5815;
IkReal gconst127=((-1.0)*r01*x5816);
IkReal gconst128=(r00*x5816);
j16eval[0]=r22;
j16eval[1]=sj12;
j16eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x5818=((1.0)*cj12);
IkReal x5819=((1.0)*sj12);
CheckValue<IkReal> x5820 = IKatan2WithCheck(IkReal((((cj12*gconst127*r01))+(((-1.0)*gconst128*r00*x5818))+((gconst127*r11*sj12))+(((-1.0)*gconst128*r10*x5819)))),IkReal(((((-1.0)*r12*x5819))+(((-1.0)*r02*x5818)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5820.valid){
continue;
}
CheckValue<IkReal> x5821=IKPowWithIntegerCheck(IKsign((((gconst127*r20))+((gconst128*r21)))),-1);
if(!x5821.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x5820.value)+(((1.5707963267949)*(x5821.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x5822=IKcos(j16);
IkReal x5823=IKsin(j16);
IkReal x5824=(gconst128*r10);
IkReal x5825=(gconst128*r00);
IkReal x5826=(gconst128*r20);
IkReal x5827=(gconst127*x5823);
IkReal x5828=((1.0)*gconst128*r21);
IkReal x5829=((1.0)*gconst127*r20);
IkReal x5830=((1.0)*x5822);
IkReal x5831=((1.0)*x5823);
evalcond[0]=((((-1.0)*r22*x5831))+((x5822*x5826))+(((-1.0)*gconst127*r21*x5830)));
evalcond[1]=(((x5822*x5824))+cj12+(((-1.0)*gconst127*r11*x5830))+(((-1.0)*r12*x5831)));
evalcond[2]=((((-1.0)*r02*x5831))+((x5822*x5825))+(((-1.0)*gconst127*r01*x5830))+(((-1.0)*sj12)));
evalcond[3]=((((-1.0)*cj13*cj14))+((r21*x5827))+(((-1.0)*r22*x5830))+((sj13*sj14))+(((-1.0)*x5826*x5831)));
evalcond[4]=((((-1.0)*r02*x5830))+((r01*x5827))+(((-1.0)*cj12*x5829))+(((-1.0)*cj12*x5828))+(((-1.0)*x5825*x5831)));
evalcond[5]=(((r11*x5827))+(((-1.0)*sj12*x5829))+(((-1.0)*sj12*x5828))+(((-1.0)*x5824*x5831))+(((-1.0)*r12*x5830)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x5832 = IKatan2WithCheck(IkReal((((gconst128*r20*sj12))+(((-1.0)*gconst127*r21*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5832.valid){
continue;
}
CheckValue<IkReal> x5833=IKPowWithIntegerCheck(IKsign((((gconst128*r11))+((gconst127*r10)))),-1);
if(!x5833.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x5832.value)+(((1.5707963267949)*(x5833.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x5834=IKcos(j16);
IkReal x5835=IKsin(j16);
IkReal x5836=(gconst128*r10);
IkReal x5837=(gconst128*r00);
IkReal x5838=(gconst128*r20);
IkReal x5839=(gconst127*x5835);
IkReal x5840=((1.0)*gconst128*r21);
IkReal x5841=((1.0)*gconst127*r20);
IkReal x5842=((1.0)*x5834);
IkReal x5843=((1.0)*x5835);
evalcond[0]=(((x5834*x5838))+(((-1.0)*gconst127*r21*x5842))+(((-1.0)*r22*x5843)));
evalcond[1]=(((x5834*x5836))+cj12+(((-1.0)*r12*x5843))+(((-1.0)*gconst127*r11*x5842)));
evalcond[2]=(((x5834*x5837))+(((-1.0)*r02*x5843))+(((-1.0)*sj12))+(((-1.0)*gconst127*r01*x5842)));
evalcond[3]=((((-1.0)*cj13*cj14))+((r21*x5839))+(((-1.0)*x5838*x5843))+((sj13*sj14))+(((-1.0)*r22*x5842)));
evalcond[4]=((((-1.0)*x5837*x5843))+(((-1.0)*r02*x5842))+((r01*x5839))+(((-1.0)*cj12*x5840))+(((-1.0)*cj12*x5841)));
evalcond[5]=(((r11*x5839))+(((-1.0)*sj12*x5841))+(((-1.0)*sj12*x5840))+(((-1.0)*x5836*x5843))+(((-1.0)*r12*x5842)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5845 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5845)==0){
continue;
}
IkReal x5844=pow(x5845,-0.5);
CheckValue<IkReal> x5846 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5846.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x5846.value))));
IkReal gconst130=((1.0)*r01*x5844);
IkReal gconst131=((-1.0)*r00*x5844);
CheckValue<IkReal> x5847 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5847.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5847.value)+j17)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[5];
CheckValue<IkReal> x5850 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5850.valid){
continue;
}
IkReal x5848=((1.0)*(x5850.value));
IkReal x5849=x5844;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
sj17=gconst130;
cj17=gconst131;
j17=((3.14159265)+(((-1.0)*x5848)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5848)));
IkReal gconst130=((1.0)*r01*x5849);
IkReal gconst131=((-1.0)*r00*x5849);
j16eval[0]=0;
j16eval[1]=cj12;
j16eval[2]=r22;
j16eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j16eval[4]=0;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  || IKabs(j16eval[3]) < 0.0000010000000000  || IKabs(j16eval[4]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
CheckValue<IkReal> x5853 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5853.valid){
continue;
}
IkReal x5851=((1.0)*(x5853.value));
IkReal x5852=x5844;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
sj17=gconst130;
cj17=gconst131;
j17=((3.14159265)+(((-1.0)*x5851)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5851)));
IkReal gconst130=((1.0)*r01*x5852);
IkReal gconst131=((-1.0)*r00*x5852);
j16eval[0]=r22;
j16eval[1]=sj12;
j16eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x5856 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5856.valid){
continue;
}
IkReal x5854=((1.0)*(x5856.value));
IkReal x5855=x5844;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
sj17=gconst130;
cj17=gconst131;
j17=((3.14159265)+(((-1.0)*x5854)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5854)));
IkReal gconst130=((1.0)*r01*x5855);
IkReal gconst131=((-1.0)*r00*x5855);
IkReal x5857=r02*r02;
IkReal x5858=(r12*sj12);
IkReal x5859=x5844;
IkReal x5860=(cj12*x5859);
j16eval[0]=((IKabs(((((-1.0)*x5860))+((r02*x5858*x5859))+((x5857*x5860)))))+(IKabs(((((-1.0)*cj12*r02))+(((-1.0)*x5858))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x5861=((1.0)*gconst131);
CheckValue<IkReal> x5862=IKPowWithIntegerCheck(IKsign((((gconst131*r21))+((gconst130*r20)))),-1);
if(!x5862.valid){
continue;
}
CheckValue<IkReal> x5863 = IKatan2WithCheck(IkReal(((((-1.0)*r10*sj12*x5861))+(((-1.0)*cj12*r00*x5861))+((cj12*gconst130*r01))+((gconst130*r11*sj12)))),IkReal(((((-1.0)*cj12*r02))+(((-1.0)*r12*sj12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5863.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5862.value)))+(x5863.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x5864=IKcos(j16);
IkReal x5865=IKsin(j16);
IkReal x5866=(gconst131*r20);
IkReal x5867=((1.0)*cj12);
IkReal x5868=(gconst130*r20);
IkReal x5869=((1.0)*sj12);
IkReal x5870=(gconst131*r21);
IkReal x5871=(gconst130*x5865);
IkReal x5872=((1.0)*x5865);
IkReal x5873=((1.0)*x5864);
IkReal x5874=(gconst131*x5864);
evalcond[0]=((((-1.0)*r22*x5872))+(((-1.0)*gconst130*r21*x5873))+((x5864*x5866)));
evalcond[1]=((((-1.0)*r12*x5872))+cj12+(((-1.0)*gconst130*r11*x5873))+((r10*x5874)));
evalcond[2]=((((-1.0)*gconst130*r01*x5873))+(((-1.0)*x5869))+(((-1.0)*r02*x5872))+((r00*x5874)));
evalcond[3]=((((-1.0)*cj13*cj14))+(((-1.0)*r22*x5873))+(((-1.0)*x5866*x5872))+((sj13*sj14))+((r21*x5871)));
evalcond[4]=((((-1.0)*r02*x5873))+(((-1.0)*gconst131*r00*x5872))+(((-1.0)*x5867*x5868))+((r01*x5871))+(((-1.0)*x5867*x5870)));
evalcond[5]=((((-1.0)*r12*x5873))+(((-1.0)*gconst131*r10*x5872))+((r11*x5871))+(((-1.0)*x5868*x5869))+(((-1.0)*x5869*x5870)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x5875=IKPowWithIntegerCheck(IKsign((((gconst131*r11))+((gconst130*r10)))),-1);
if(!x5875.valid){
continue;
}
CheckValue<IkReal> x5876 = IKatan2WithCheck(IkReal(((((-1.0)*gconst130*r21*sj12))+((gconst131*r20*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5876.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5875.value)))+(x5876.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x5877=IKcos(j16);
IkReal x5878=IKsin(j16);
IkReal x5879=(gconst131*r20);
IkReal x5880=((1.0)*cj12);
IkReal x5881=(gconst130*r20);
IkReal x5882=((1.0)*sj12);
IkReal x5883=(gconst131*r21);
IkReal x5884=(gconst130*x5878);
IkReal x5885=((1.0)*x5878);
IkReal x5886=((1.0)*x5877);
IkReal x5887=(gconst131*x5877);
evalcond[0]=(((x5877*x5879))+(((-1.0)*gconst130*r21*x5886))+(((-1.0)*r22*x5885)));
evalcond[1]=(((r10*x5887))+(((-1.0)*gconst130*r11*x5886))+(((-1.0)*r12*x5885))+cj12);
evalcond[2]=(((r00*x5887))+(((-1.0)*r02*x5885))+(((-1.0)*x5882))+(((-1.0)*gconst130*r01*x5886)));
evalcond[3]=((((-1.0)*cj13*cj14))+(((-1.0)*x5879*x5885))+((sj13*sj14))+((r21*x5884))+(((-1.0)*r22*x5886)));
evalcond[4]=(((r01*x5884))+(((-1.0)*gconst131*r00*x5885))+(((-1.0)*x5880*x5883))+(((-1.0)*x5880*x5881))+(((-1.0)*r02*x5886)));
evalcond[5]=((((-1.0)*x5882*x5883))+((r11*x5884))+(((-1.0)*r12*x5886))+(((-1.0)*x5881*x5882))+(((-1.0)*gconst131*r10*x5885)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x5888 = IKatan2WithCheck(IkReal((((cj12*gconst131*r20))+(((-1.0)*cj12*gconst130*r21)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5888.valid){
continue;
}
CheckValue<IkReal> x5889=IKPowWithIntegerCheck(IKsign((((gconst131*r01))+((gconst130*r00)))),-1);
if(!x5889.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x5888.value)+(((1.5707963267949)*(x5889.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x5890=IKcos(j16);
IkReal x5891=IKsin(j16);
IkReal x5892=(gconst131*r20);
IkReal x5893=((1.0)*cj12);
IkReal x5894=(gconst130*r20);
IkReal x5895=((1.0)*sj12);
IkReal x5896=(gconst131*r21);
IkReal x5897=(gconst130*x5891);
IkReal x5898=((1.0)*x5891);
IkReal x5899=((1.0)*x5890);
IkReal x5900=(gconst131*x5890);
evalcond[0]=((((-1.0)*r22*x5898))+(((-1.0)*gconst130*r21*x5899))+((x5890*x5892)));
evalcond[1]=((((-1.0)*r12*x5898))+(((-1.0)*gconst130*r11*x5899))+cj12+((r10*x5900)));
evalcond[2]=(((r00*x5900))+(((-1.0)*gconst130*r01*x5899))+(((-1.0)*r02*x5898))+(((-1.0)*x5895)));
evalcond[3]=((((-1.0)*cj13*cj14))+((r21*x5897))+(((-1.0)*r22*x5899))+(((-1.0)*x5892*x5898))+((sj13*sj14)));
evalcond[4]=((((-1.0)*x5893*x5896))+(((-1.0)*x5893*x5894))+(((-1.0)*r02*x5899))+(((-1.0)*gconst131*r00*x5898))+((r01*x5897)));
evalcond[5]=((((-1.0)*r12*x5899))+(((-1.0)*gconst131*r10*x5898))+(((-1.0)*x5894*x5895))+(((-1.0)*x5895*x5896))+((r11*x5897)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
sj15=1.0;
cj15=0;
j15=1.5707963267949;
sj12=1.0;
cj12=0;
j12=1.5707963267949;
IkReal x5901=(((cj17*r11))+((r10*sj17)));
j16eval[0]=x5901;
j16eval[1]=IKsign(x5901);
j16eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*r21*sj17))+((cj17*r20))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=1.0;
cj15=0;
j15=1.5707963267949;
sj12=1.0;
cj12=0;
j12=1.5707963267949;
IkReal x5902=((1.0)*sj17);
IkReal x5903=((((-1.0)*cj17*r21))+(((-1.0)*r20*x5902)));
j16eval[0]=x5903;
j16eval[1]=IKsign(x5903);
j16eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*r11*x5902))+((cj17*r10))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=1.0;
cj15=0;
j15=1.5707963267949;
sj12=1.0;
cj12=0;
j12=1.5707963267949;
IkReal x5904=cj17*cj17;
IkReal x5905=r01*r01;
IkReal x5906=(r01*sj17);
IkReal x5907=(cj17*r00);
IkReal x5908=((((2.0)*x5906*x5907))+(((-1.0)*x5904*(r00*r00)))+(((-1.0)*(r02*r02)))+((x5904*x5905))+(((-1.0)*x5905)));
j16eval[0]=x5908;
j16eval[1]=IKsign(x5908);
j16eval[2]=((IKabs(r02))+(IKabs((x5906+(((-1.0)*x5907))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x5909=cj17*cj17;
IkReal x5910=r01*r01;
IkReal x5911=(r01*sj17);
IkReal x5912=(cj17*r00);
CheckValue<IkReal> x5913=IKPowWithIntegerCheck(IKsign((((x5909*x5910))+(((-1.0)*(r02*r02)))+(((2.0)*x5911*x5912))+(((-1.0)*x5909*(r00*r00)))+(((-1.0)*x5910)))),-1);
if(!x5913.valid){
continue;
}
CheckValue<IkReal> x5914 = IKatan2WithCheck(IkReal(r02),IkReal((x5911+(((-1.0)*x5912)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5914.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5913.value)))+(x5914.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x5915=IKcos(j16);
IkReal x5916=IKsin(j16);
IkReal x5917=((1.0)*cj17);
IkReal x5918=(r11*sj17);
IkReal x5919=(cj17*x5915);
IkReal x5920=((1.0)*x5915);
IkReal x5921=((1.0)*x5916);
IkReal x5922=(sj17*x5916);
evalcond[0]=((((-1.0)*r22*x5921))+((r20*x5919))+(((-1.0)*r21*sj17*x5920)));
evalcond[1]=((((-1.0)*x5918*x5920))+((r10*x5919))+(((-1.0)*r12*x5921)));
evalcond[2]=((((-1.0)*r00*x5916*x5917))+(((-1.0)*r02*x5920))+((r01*x5922)));
evalcond[3]=((-1.0)+((r00*x5919))+(((-1.0)*r01*sj17*x5920))+(((-1.0)*r02*x5921)));
evalcond[4]=((((-1.0)*cj13*cj14))+(((-1.0)*r22*x5920))+(((-1.0)*r20*x5916*x5917))+((r21*x5922))+((sj13*sj14)));
evalcond[5]=(((x5916*x5918))+(((-1.0)*r21*x5917))+(((-1.0)*r20*sj17))+(((-1.0)*r12*x5920))+(((-1.0)*r10*x5916*x5917)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x5923=((1.0)*sj17);
CheckValue<IkReal> x5924 = IKatan2WithCheck(IkReal((((cj17*r10))+(((-1.0)*r11*x5923)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x5924.valid){
continue;
}
CheckValue<IkReal> x5925=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj17*r21))+(((-1.0)*r20*x5923)))),-1);
if(!x5925.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x5924.value)+(((1.5707963267949)*(x5925.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x5926=IKcos(j16);
IkReal x5927=IKsin(j16);
IkReal x5928=((1.0)*cj17);
IkReal x5929=(r11*sj17);
IkReal x5930=(cj17*x5926);
IkReal x5931=((1.0)*x5926);
IkReal x5932=((1.0)*x5927);
IkReal x5933=(sj17*x5927);
evalcond[0]=(((r20*x5930))+(((-1.0)*r21*sj17*x5931))+(((-1.0)*r22*x5932)));
evalcond[1]=(((r10*x5930))+(((-1.0)*x5929*x5931))+(((-1.0)*r12*x5932)));
evalcond[2]=((((-1.0)*r02*x5931))+((r01*x5933))+(((-1.0)*r00*x5927*x5928)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x5932))+(((-1.0)*r01*sj17*x5931))+((r00*x5930)));
evalcond[4]=((((-1.0)*cj13*cj14))+((r21*x5933))+(((-1.0)*r20*x5927*x5928))+((sj13*sj14))+(((-1.0)*r22*x5931)));
evalcond[5]=(((x5927*x5929))+(((-1.0)*r10*x5927*x5928))+(((-1.0)*r20*sj17))+(((-1.0)*r12*x5931))+(((-1.0)*r21*x5928)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x5934 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj17))+((cj17*r20)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x5934.valid){
continue;
}
CheckValue<IkReal> x5935=IKPowWithIntegerCheck(IKsign((((cj17*r11))+((r10*sj17)))),-1);
if(!x5935.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x5934.value)+(((1.5707963267949)*(x5935.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x5936=IKcos(j16);
IkReal x5937=IKsin(j16);
IkReal x5938=((1.0)*cj17);
IkReal x5939=(r11*sj17);
IkReal x5940=(cj17*x5936);
IkReal x5941=((1.0)*x5936);
IkReal x5942=((1.0)*x5937);
IkReal x5943=(sj17*x5937);
evalcond[0]=((((-1.0)*r22*x5942))+((r20*x5940))+(((-1.0)*r21*sj17*x5941)));
evalcond[1]=((((-1.0)*r12*x5942))+(((-1.0)*x5939*x5941))+((r10*x5940)));
evalcond[2]=(((r01*x5943))+(((-1.0)*r00*x5937*x5938))+(((-1.0)*r02*x5941)));
evalcond[3]=((-1.0)+((r00*x5940))+(((-1.0)*r01*sj17*x5941))+(((-1.0)*r02*x5942)));
evalcond[4]=((((-1.0)*cj13*cj14))+(((-1.0)*r22*x5941))+((r21*x5943))+(((-1.0)*r20*x5937*x5938))+((sj13*sj14)));
evalcond[5]=(((x5937*x5939))+(((-1.0)*r12*x5941))+(((-1.0)*r20*sj17))+(((-1.0)*r10*x5937*x5938))+(((-1.0)*r21*x5938)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
sj15=1.0;
cj15=0;
j15=1.5707963267949;
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
IkReal x5944=(((r20*sj17))+((cj17*r21)));
j16eval[0]=x5944;
j16eval[1]=IKsign(x5944);
j16eval[2]=((IKabs(r12))+(IKabs((((cj17*r10))+(((-1.0)*r11*sj17))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=1.0;
cj15=0;
j15=1.5707963267949;
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
IkReal x5945=((1.0)*sj17);
IkReal x5946=((((-1.0)*cj17*r11))+(((-1.0)*r10*x5945)));
j16eval[0]=x5946;
j16eval[1]=IKsign(x5946);
j16eval[2]=((IKabs(((((-1.0)*r21*x5945))+((cj17*r20)))))+(IKabs(r22)));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=1.0;
cj15=0;
j15=1.5707963267949;
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
IkReal x5947=cj17*cj17;
IkReal x5948=r01*r01;
IkReal x5949=(cj17*r00);
IkReal x5950=(r01*sj17);
IkReal x5951=(((x5947*(r00*r00)))+(((-1.0)*x5947*x5948))+(((-2.0)*x5949*x5950))+(r02*r02)+x5948);
j16eval[0]=x5951;
j16eval[1]=IKsign(x5951);
j16eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x5949))+x5950))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x5952=cj17*cj17;
IkReal x5953=r01*r01;
IkReal x5954=(r01*sj17);
IkReal x5955=(cj17*r00);
CheckValue<IkReal> x5956 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x5955))+x5954)),IKFAST_ATAN2_MAGTHRESH);
if(!x5956.valid){
continue;
}
CheckValue<IkReal> x5957=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5952*x5953))+(r02*r02)+((x5952*(r00*r00)))+x5953+(((-2.0)*x5954*x5955)))),-1);
if(!x5957.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x5956.value)+(((1.5707963267949)*(x5957.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x5958=IKcos(j16);
IkReal x5959=IKsin(j16);
IkReal x5960=(r11*sj17);
IkReal x5961=(cj17*x5958);
IkReal x5962=((1.0)*x5958);
IkReal x5963=((1.0)*x5959);
IkReal x5964=(sj17*x5959);
IkReal x5965=(cj17*x5963);
evalcond[0]=((((-1.0)*r22*x5963))+((r20*x5961))+(((-1.0)*r21*sj17*x5962)));
evalcond[1]=((((-1.0)*x5960*x5962))+(((-1.0)*r12*x5963))+((r10*x5961)));
evalcond[2]=(((r01*x5964))+(((-1.0)*r00*x5965))+(((-1.0)*r02*x5962)));
evalcond[3]=((1.0)+((r00*x5961))+(((-1.0)*r01*sj17*x5962))+(((-1.0)*r02*x5963)));
evalcond[4]=(((x5959*x5960))+((r20*sj17))+(((-1.0)*r12*x5962))+(((-1.0)*r10*x5965))+((cj17*r21)));
evalcond[5]=((((-1.0)*cj13*cj14))+(((-1.0)*r22*x5962))+(((-1.0)*r20*x5965))+((r21*x5964))+((sj13*sj14)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x5966=((1.0)*sj17);
CheckValue<IkReal> x5967 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x5966))+((cj17*r20)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x5967.valid){
continue;
}
CheckValue<IkReal> x5968=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj17*r11))+(((-1.0)*r10*x5966)))),-1);
if(!x5968.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x5967.value)+(((1.5707963267949)*(x5968.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x5969=IKcos(j16);
IkReal x5970=IKsin(j16);
IkReal x5971=(r11*sj17);
IkReal x5972=(cj17*x5969);
IkReal x5973=((1.0)*x5969);
IkReal x5974=((1.0)*x5970);
IkReal x5975=(sj17*x5970);
IkReal x5976=(cj17*x5974);
evalcond[0]=((((-1.0)*r22*x5974))+(((-1.0)*r21*sj17*x5973))+((r20*x5972)));
evalcond[1]=((((-1.0)*r12*x5974))+(((-1.0)*x5971*x5973))+((r10*x5972)));
evalcond[2]=((((-1.0)*r02*x5973))+((r01*x5975))+(((-1.0)*r00*x5976)));
evalcond[3]=((1.0)+(((-1.0)*r02*x5974))+((r00*x5972))+(((-1.0)*r01*sj17*x5973)));
evalcond[4]=(((x5970*x5971))+(((-1.0)*r12*x5973))+((r20*sj17))+((cj17*r21))+(((-1.0)*r10*x5976)));
evalcond[5]=((((-1.0)*cj13*cj14))+(((-1.0)*r22*x5973))+(((-1.0)*r20*x5976))+((r21*x5975))+((sj13*sj14)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x5977 = IKatan2WithCheck(IkReal((((cj17*r10))+(((-1.0)*r11*sj17)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x5977.valid){
continue;
}
CheckValue<IkReal> x5978=IKPowWithIntegerCheck(IKsign((((r20*sj17))+((cj17*r21)))),-1);
if(!x5978.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x5977.value)+(((1.5707963267949)*(x5978.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x5979=IKcos(j16);
IkReal x5980=IKsin(j16);
IkReal x5981=(r11*sj17);
IkReal x5982=(cj17*x5979);
IkReal x5983=((1.0)*x5979);
IkReal x5984=((1.0)*x5980);
IkReal x5985=(sj17*x5980);
IkReal x5986=(cj17*x5984);
evalcond[0]=(((r20*x5982))+(((-1.0)*r22*x5984))+(((-1.0)*r21*sj17*x5983)));
evalcond[1]=((((-1.0)*r12*x5984))+((r10*x5982))+(((-1.0)*x5981*x5983)));
evalcond[2]=((((-1.0)*r02*x5983))+(((-1.0)*r00*x5986))+((r01*x5985)));
evalcond[3]=((1.0)+(((-1.0)*r02*x5984))+(((-1.0)*r01*sj17*x5983))+((r00*x5982)));
evalcond[4]=((((-1.0)*r12*x5983))+(((-1.0)*r10*x5986))+((r20*sj17))+((cj17*r21))+((x5980*x5981)));
evalcond[5]=((((-1.0)*cj13*cj14))+((r21*x5985))+((sj13*sj14))+(((-1.0)*r22*x5983))+(((-1.0)*r20*x5986)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
IkReal x5987=((-1.0)*px);
sj15=1.0;
cj15=0;
j15=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x5987);
rxp1_1=(px*r21);
rxp1_2=(r11*x5987);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j16eval[0]=r02;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
IkReal x5988=((-1.0)*px);
sj15=1.0;
cj15=0;
j15=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x5988);
rxp1_1=(px*r21);
rxp1_2=(r11*x5988);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j16eval[0]=((((-1.0)*cj17*r20))+((r21*sj17)));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
CheckValue<IkReal> x5990=IKPowWithIntegerCheck(((((-1.0)*cj17*r20))+((r21*sj17))),-1);
if(!x5990.valid){
continue;
}
IkReal x5989=x5990.value;
sj16array[0]=((((-1.0)*sj13*sj14*x5989))+((cj13*cj14*x5989)));
if( sj16array[0] >= -1-IKFAST_SINCOS_THRESH && sj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKasin(sj16array[0]);
    cj16array[0] = IKcos(j16array[0]);
    sj16array[1] = sj16array[0];
    j16array[1] = j16array[0] > 0 ? (IKPI-j16array[0]) : (-IKPI-j16array[0]);
    cj16array[1] = -cj16array[0];
}
else if( isnan(sj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x5991=IKcos(j16);
IkReal x5992=(cj17*x5991);
IkReal x5993=((1.0)*sj17*x5991);
evalcond[0]=((-1.0)*r02*x5991);
evalcond[1]=((((-1.0)*r02*(IKsin(j16))))+(((-1.0)*sj12)));
evalcond[2]=(((r20*x5992))+(((-1.0)*r21*x5993)));
evalcond[3]=((((-1.0)*r11*x5993))+((r10*x5992)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
CheckValue<IkReal> x5994=IKPowWithIntegerCheck(r02,-1);
if(!x5994.valid){
continue;
}
sj16array[0]=((-1.0)*sj12*(x5994.value));
if( sj16array[0] >= -1-IKFAST_SINCOS_THRESH && sj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKasin(sj16array[0]);
    cj16array[0] = IKcos(j16array[0]);
    sj16array[1] = sj16array[0];
    j16array[1] = j16array[0] > 0 ? (IKPI-j16array[0]) : (-IKPI-j16array[0]);
    cj16array[1] = -cj16array[0];
}
else if( isnan(sj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x5995=IKcos(j16);
IkReal x5996=IKsin(j16);
IkReal x5997=(cj17*r20);
IkReal x5998=(r21*sj17);
IkReal x5999=((1.0)*x5995);
evalcond[0]=((-1.0)*r02*x5995);
evalcond[1]=(((x5995*x5997))+(((-1.0)*x5998*x5999)));
evalcond[2]=(((cj17*r10*x5995))+(((-1.0)*r11*sj17*x5999)));
evalcond[3]=((((-1.0)*cj13*cj14))+((x5996*x5998))+(((-1.0)*x5996*x5997))+((sj13*sj14)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j16]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x6000=((1.0)*cj12);
IkReal x6001=((1.0)*sj12);
CheckValue<IkReal> x6002=IKPowWithIntegerCheck(IKsign((((r20*sj17))+((cj17*r21)))),-1);
if(!x6002.valid){
continue;
}
CheckValue<IkReal> x6003 = IKatan2WithCheck(IkReal(((((-1.0)*cj17*r00*x6000))+((cj12*r01*sj17))+((r11*sj12*sj17))+(((-1.0)*cj17*r10*x6001)))),IkReal(((((-1.0)*r12*x6001))+(((-1.0)*r02*x6000)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6003.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6002.value)))+(x6003.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x6004=IKcos(j16);
IkReal x6005=IKsin(j16);
IkReal x6006=((1.0)*cj17);
IkReal x6007=(r11*sj17);
IkReal x6008=(cj17*x6004);
IkReal x6009=((1.0)*x6004);
IkReal x6010=((1.0)*r20*sj17);
IkReal x6011=((1.0)*x6005);
IkReal x6012=(sj17*x6005);
evalcond[0]=(((r20*x6008))+(((-1.0)*r21*sj17*x6009))+(((-1.0)*r22*x6011)));
evalcond[1]=((((-1.0)*r12*x6011))+cj12+(((-1.0)*x6007*x6009))+((r10*x6008)));
evalcond[2]=((((-1.0)*r02*x6011))+(((-1.0)*r01*sj17*x6009))+(((-1.0)*sj12))+((r00*x6008)));
evalcond[3]=((((-1.0)*cj13*cj14))+(((-1.0)*r20*x6005*x6006))+((r21*x6012))+((sj13*sj14))+(((-1.0)*r22*x6009)));
evalcond[4]=(((r01*x6012))+(((-1.0)*cj12*r21*x6006))+(((-1.0)*cj12*x6010))+(((-1.0)*r00*x6005*x6006))+(((-1.0)*r02*x6009)));
evalcond[5]=((((-1.0)*sj12*x6010))+(((-1.0)*r12*x6009))+(((-1.0)*r21*sj12*x6006))+(((-1.0)*r10*x6005*x6006))+((x6005*x6007)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x6013=IKPowWithIntegerCheck(IKsign((((cj17*r11))+((r10*sj17)))),-1);
if(!x6013.valid){
continue;
}
CheckValue<IkReal> x6014 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6014.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6013.value)))+(x6014.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x6015=IKcos(j16);
IkReal x6016=IKsin(j16);
IkReal x6017=((1.0)*cj17);
IkReal x6018=(r11*sj17);
IkReal x6019=(cj17*x6015);
IkReal x6020=((1.0)*x6015);
IkReal x6021=((1.0)*r20*sj17);
IkReal x6022=((1.0)*x6016);
IkReal x6023=(sj17*x6016);
evalcond[0]=((((-1.0)*r21*sj17*x6020))+(((-1.0)*r22*x6022))+((r20*x6019)));
evalcond[1]=(cj12+((r10*x6019))+(((-1.0)*x6018*x6020))+(((-1.0)*r12*x6022)));
evalcond[2]=((((-1.0)*r01*sj17*x6020))+(((-1.0)*r02*x6022))+(((-1.0)*sj12))+((r00*x6019)));
evalcond[3]=((((-1.0)*cj13*cj14))+(((-1.0)*r22*x6020))+((r21*x6023))+((sj13*sj14))+(((-1.0)*r20*x6016*x6017)));
evalcond[4]=(((r01*x6023))+(((-1.0)*r02*x6020))+(((-1.0)*cj12*r21*x6017))+(((-1.0)*cj12*x6021))+(((-1.0)*r00*x6016*x6017)));
evalcond[5]=((((-1.0)*r10*x6016*x6017))+(((-1.0)*r21*sj12*x6017))+(((-1.0)*sj12*x6021))+((x6016*x6018))+(((-1.0)*r12*x6020)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x6024 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6024.valid){
continue;
}
CheckValue<IkReal> x6025=IKPowWithIntegerCheck(IKsign((((r00*sj17))+((cj17*r01)))),-1);
if(!x6025.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x6024.value)+(((1.5707963267949)*(x6025.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x6026=IKcos(j16);
IkReal x6027=IKsin(j16);
IkReal x6028=((1.0)*cj17);
IkReal x6029=(r11*sj17);
IkReal x6030=(cj17*x6026);
IkReal x6031=((1.0)*x6026);
IkReal x6032=((1.0)*r20*sj17);
IkReal x6033=((1.0)*x6027);
IkReal x6034=(sj17*x6027);
evalcond[0]=((((-1.0)*r21*sj17*x6031))+((r20*x6030))+(((-1.0)*r22*x6033)));
evalcond[1]=((((-1.0)*x6029*x6031))+(((-1.0)*r12*x6033))+((r10*x6030))+cj12);
evalcond[2]=((((-1.0)*r01*sj17*x6031))+(((-1.0)*sj12))+((r00*x6030))+(((-1.0)*r02*x6033)));
evalcond[3]=((((-1.0)*cj13*cj14))+((r21*x6034))+((sj13*sj14))+(((-1.0)*r22*x6031))+(((-1.0)*r20*x6027*x6028)));
evalcond[4]=((((-1.0)*cj12*r21*x6028))+(((-1.0)*cj12*x6032))+(((-1.0)*r00*x6027*x6028))+((r01*x6034))+(((-1.0)*r02*x6031)));
evalcond[5]=((((-1.0)*r21*sj12*x6028))+(((-1.0)*sj12*x6032))+(((-1.0)*r12*x6031))+((x6027*x6029))+(((-1.0)*r10*x6027*x6028)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[3];
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
IkReal x6035=((((-1.0)*sj13*sj14))+((cj13*cj14)));
j12eval[0]=x6035;
j12eval[1]=((IKabs((((r00*sj17))+((cj17*r01)))))+(IKabs((((cj17*r11))+((r10*sj17))))));
j12eval[2]=IKsign(x6035);
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
IkReal x6036=cj17*cj17;
IkReal x6037=r21*r21;
IkReal x6038=(r21*sj17);
IkReal x6039=(sj13*sj14);
IkReal x6040=(cj17*r20);
IkReal x6041=((1.0)*cj13*cj14);
IkReal x6042=((((2.0)*x6038*x6040))+(((-1.0)*(r22*r22)))+(((-1.0)*x6036*(r20*r20)))+(((-1.0)*x6037))+((x6036*x6037)));
j16eval[0]=x6042;
j16eval[1]=IKsign(x6042);
j16eval[2]=((IKabs((((r22*x6039))+(((-1.0)*r22*x6041)))))+(IKabs((((cj13*cj14*x6038))+(((-1.0)*x6038*x6039))+(((-1.0)*x6040*x6041))+((x6039*x6040))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j12eval[1];
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
j12eval[0]=((((-1.0)*sj13*sj14))+((cj13*cj14)));
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j13), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j14), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
if( IKabs(((((2.36617629259053)*py))+(((-0.658427386453172)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.36617629259053)*py))+(((-0.658427386453172)*px))))+IKsqr(((((0.658427386453172)*py))+(((2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((2.36617629259053)*py))+(((-0.658427386453172)*px))), ((((0.658427386453172)*py))+(((2.36617629259053)*px))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[2];
IkReal x6043=IKcos(j12);
IkReal x6044=IKsin(j12);
evalcond[0]=((((-1.0)*px))+(((0.39225)*x6043))+(((-0.10915)*x6044)));
evalcond[1]=((((0.10915)*x6043))+(((-1.0)*py))+(((0.39225)*x6044)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j16eval[3];
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
j13=0;
sj13=0;
cj13=1.0;
j14=1.5707963267949;
sj14=1.0;
cj14=0;
IkReal x6045=(((r00*sj17))+((cj17*r01)));
j16eval[0]=x6045;
j16eval[1]=((IKabs(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))))+(IKabs((cj12*r22))));
j16eval[2]=IKsign(x6045);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
j13=0;
sj13=0;
cj13=1.0;
j14=1.5707963267949;
sj14=1.0;
cj14=0;
IkReal x6046=(((cj17*r11))+((r10*sj17)));
j16eval[0]=x6046;
j16eval[1]=((IKabs((r22*sj12)))+(IKabs(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12))))));
j16eval[2]=IKsign(x6046);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
j13=0;
sj13=0;
cj13=1.0;
j14=1.5707963267949;
sj14=1.0;
cj14=0;
IkReal x6047=cj17*cj17;
IkReal x6048=((1.0)*r11);
IkReal x6049=(cj17*r20);
IkReal x6050=(r21*sj17);
IkReal x6051=(((r11*r21))+((r12*r22))+(((-1.0)*r21*x6047*x6048))+((r10*r20*x6047))+(((-1.0)*cj17*r10*x6050))+(((-1.0)*sj17*x6048*x6049)));
j16eval[0]=x6051;
j16eval[1]=IKsign(x6051);
j16eval[2]=((IKabs((((cj12*x6050))+(((-1.0)*cj12*x6049)))))+(IKabs((cj12*r22))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x6052=cj17*cj17;
IkReal x6053=((1.0)*r11);
IkReal x6054=(cj17*r20);
IkReal x6055=(r21*sj17);
CheckValue<IkReal> x6056=IKPowWithIntegerCheck(IKsign((((r11*r21))+((r12*r22))+((r10*r20*x6052))+(((-1.0)*r21*x6052*x6053))+(((-1.0)*cj17*r10*x6055))+(((-1.0)*sj17*x6053*x6054)))),-1);
if(!x6056.valid){
continue;
}
CheckValue<IkReal> x6057 = IKatan2WithCheck(IkReal((cj12*r22)),IkReal((((cj12*x6055))+(((-1.0)*cj12*x6054)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6057.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6056.value)))+(x6057.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x6058=IKsin(j16);
IkReal x6059=IKcos(j16);
CheckValue<IkReal> x6070=IKPowWithIntegerCheck(cj17,-1);
if(!x6070.valid){
continue;
}
IkReal x6060=x6070.value;
IkReal x6061=sj17*sj17;
IkReal x6062=((1.0)*sj12);
IkReal x6063=(r21*sj17);
IkReal x6064=(r00*x6058);
IkReal x6065=(x6060*x6061);
IkReal x6066=((1.0)*x6058);
IkReal x6067=(cj17*x6059);
IkReal x6068=(cj17*x6058);
IkReal x6069=((1.0)*x6059);
evalcond[0]=(((r22*x6059))+((r20*x6068))+(((-1.0)*x6063*x6066)));
evalcond[1]=((((-1.0)*r22*x6066))+((r20*x6067))+(((-1.0)*x6063*x6069)));
evalcond[2]=(((r10*x6067))+(((-1.0)*r11*sj17*x6069))+cj12+(((-1.0)*r12*x6066)));
evalcond[3]=((((-1.0)*x6062))+((r00*x6067))+(((-1.0)*r02*x6066))+(((-1.0)*r01*sj17*x6069)));
evalcond[4]=(((r02*x6059))+(((-1.0)*cj12))+((x6064*x6065))+((cj17*x6064)));
evalcond[5]=(((r12*x6059))+((r10*x6068))+((r10*x6058*x6065))+(((-1.0)*x6062)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x6071=IKPowWithIntegerCheck(IKsign((((cj17*r11))+((r10*sj17)))),-1);
if(!x6071.valid){
continue;
}
CheckValue<IkReal> x6072 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6072.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6071.value)))+(x6072.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x6073=IKsin(j16);
IkReal x6074=IKcos(j16);
CheckValue<IkReal> x6085=IKPowWithIntegerCheck(cj17,-1);
if(!x6085.valid){
continue;
}
IkReal x6075=x6085.value;
IkReal x6076=sj17*sj17;
IkReal x6077=((1.0)*sj12);
IkReal x6078=(r21*sj17);
IkReal x6079=(r00*x6073);
IkReal x6080=(x6075*x6076);
IkReal x6081=((1.0)*x6073);
IkReal x6082=(cj17*x6074);
IkReal x6083=(cj17*x6073);
IkReal x6084=((1.0)*x6074);
evalcond[0]=(((r22*x6074))+(((-1.0)*x6078*x6081))+((r20*x6083)));
evalcond[1]=((((-1.0)*r22*x6081))+(((-1.0)*x6078*x6084))+((r20*x6082)));
evalcond[2]=((((-1.0)*r11*sj17*x6084))+(((-1.0)*r12*x6081))+((r10*x6082))+cj12);
evalcond[3]=((((-1.0)*x6077))+((r00*x6082))+(((-1.0)*r02*x6081))+(((-1.0)*r01*sj17*x6084)));
evalcond[4]=(((x6079*x6080))+(((-1.0)*cj12))+((r02*x6074))+((cj17*x6079)));
evalcond[5]=(((r10*x6083))+(((-1.0)*x6077))+((r10*x6073*x6080))+((r12*x6074)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x6086 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6086.valid){
continue;
}
CheckValue<IkReal> x6087=IKPowWithIntegerCheck(IKsign((((r00*sj17))+((cj17*r01)))),-1);
if(!x6087.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x6086.value)+(((1.5707963267949)*(x6087.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x6088=IKsin(j16);
IkReal x6089=IKcos(j16);
CheckValue<IkReal> x6100=IKPowWithIntegerCheck(cj17,-1);
if(!x6100.valid){
continue;
}
IkReal x6090=x6100.value;
IkReal x6091=sj17*sj17;
IkReal x6092=((1.0)*sj12);
IkReal x6093=(r21*sj17);
IkReal x6094=(r00*x6088);
IkReal x6095=(x6090*x6091);
IkReal x6096=((1.0)*x6088);
IkReal x6097=(cj17*x6089);
IkReal x6098=(cj17*x6088);
IkReal x6099=((1.0)*x6089);
evalcond[0]=((((-1.0)*x6093*x6096))+((r22*x6089))+((r20*x6098)));
evalcond[1]=((((-1.0)*r22*x6096))+(((-1.0)*x6093*x6099))+((r20*x6097)));
evalcond[2]=(((r10*x6097))+(((-1.0)*r11*sj17*x6099))+cj12+(((-1.0)*r12*x6096)));
evalcond[3]=((((-1.0)*x6092))+((r00*x6097))+(((-1.0)*r02*x6096))+(((-1.0)*r01*sj17*x6099)));
evalcond[4]=(((x6094*x6095))+(((-1.0)*cj12))+((cj17*x6094))+((r02*x6089)));
evalcond[5]=(((r10*x6098))+(((-1.0)*x6092))+((r10*x6088*x6095))+((r12*x6089)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j13), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j14), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
if( IKabs(((((-0.658427386453172)*px))+(((-2.36617629259053)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((-2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))))+IKsqr(((((0.658427386453172)*py))+(((-2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))), ((((0.658427386453172)*py))+(((-2.36617629259053)*px))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[2];
IkReal x6101=IKcos(j12);
IkReal x6102=IKsin(j12);
evalcond[0]=((((-0.10915)*x6102))+(((-0.39225)*x6101))+(((-1.0)*px)));
evalcond[1]=((((0.10915)*x6101))+(((-0.39225)*x6102))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j16eval[3];
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
j13=0;
sj13=0;
cj13=1.0;
j14=-1.5707963267949;
sj14=-1.0;
cj14=0;
IkReal x6103=(((r00*sj17))+((cj17*r01)));
j16eval[0]=x6103;
j16eval[1]=((IKabs(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))))+(IKabs((cj12*r22))));
j16eval[2]=IKsign(x6103);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
j13=0;
sj13=0;
cj13=1.0;
j14=-1.5707963267949;
sj14=-1.0;
cj14=0;
IkReal x6104=(((cj17*r11))+((r10*sj17)));
j16eval[0]=x6104;
j16eval[1]=((IKabs((r22*sj12)))+(IKabs(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12))))));
j16eval[2]=IKsign(x6104);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
j13=0;
sj13=0;
cj13=1.0;
j14=-1.5707963267949;
sj14=-1.0;
cj14=0;
IkReal x6105=cj17*cj17;
IkReal x6106=((1.0)*r11);
IkReal x6107=(cj17*r20);
IkReal x6108=(r21*sj17);
IkReal x6109=(((r11*r21))+(((-1.0)*cj17*r10*x6108))+((r12*r22))+((r10*r20*x6105))+(((-1.0)*sj17*x6106*x6107))+(((-1.0)*r21*x6105*x6106)));
j16eval[0]=x6109;
j16eval[1]=IKsign(x6109);
j16eval[2]=((IKabs((((cj12*x6108))+(((-1.0)*cj12*x6107)))))+(IKabs((cj12*r22))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x6110=cj17*cj17;
IkReal x6111=((1.0)*r11);
IkReal x6112=(cj17*r20);
IkReal x6113=(r21*sj17);
CheckValue<IkReal> x6114=IKPowWithIntegerCheck(IKsign((((r10*r20*x6110))+((r11*r21))+(((-1.0)*sj17*x6111*x6112))+((r12*r22))+(((-1.0)*r21*x6110*x6111))+(((-1.0)*cj17*r10*x6113)))),-1);
if(!x6114.valid){
continue;
}
CheckValue<IkReal> x6115 = IKatan2WithCheck(IkReal((cj12*r22)),IkReal(((((-1.0)*cj12*x6112))+((cj12*x6113)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6115.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6114.value)))+(x6115.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x6116=IKsin(j16);
IkReal x6117=IKcos(j16);
CheckValue<IkReal> x6127=IKPowWithIntegerCheck(cj17,-1);
if(!x6127.valid){
continue;
}
IkReal x6118=x6127.value;
IkReal x6119=sj17*sj17;
IkReal x6120=(r21*sj17);
IkReal x6121=(r00*x6116);
IkReal x6122=(x6118*x6119);
IkReal x6123=((1.0)*x6116);
IkReal x6124=(cj17*x6117);
IkReal x6125=(cj17*x6116);
IkReal x6126=((1.0)*x6117);
evalcond[0]=(((r20*x6125))+((r22*x6117))+(((-1.0)*x6120*x6123)));
evalcond[1]=((((-1.0)*r22*x6123))+((r20*x6124))+(((-1.0)*x6120*x6126)));
evalcond[2]=((((-1.0)*r11*sj17*x6126))+(((-1.0)*r12*x6123))+((r10*x6124))+cj12);
evalcond[3]=((((-1.0)*r02*x6123))+(((-1.0)*sj12))+(((-1.0)*r01*sj17*x6126))+((r00*x6124)));
evalcond[4]=(((r02*x6117))+((x6121*x6122))+cj12+((cj17*x6121)));
evalcond[5]=(((r12*x6117))+((r10*x6125))+((r10*x6116*x6122))+sj12);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x6128=IKPowWithIntegerCheck(IKsign((((cj17*r11))+((r10*sj17)))),-1);
if(!x6128.valid){
continue;
}
CheckValue<IkReal> x6129 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6129.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6128.value)))+(x6129.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x6130=IKsin(j16);
IkReal x6131=IKcos(j16);
CheckValue<IkReal> x6141=IKPowWithIntegerCheck(cj17,-1);
if(!x6141.valid){
continue;
}
IkReal x6132=x6141.value;
IkReal x6133=sj17*sj17;
IkReal x6134=(r21*sj17);
IkReal x6135=(r00*x6130);
IkReal x6136=(x6132*x6133);
IkReal x6137=((1.0)*x6130);
IkReal x6138=(cj17*x6131);
IkReal x6139=(cj17*x6130);
IkReal x6140=((1.0)*x6131);
evalcond[0]=(((r22*x6131))+(((-1.0)*x6134*x6137))+((r20*x6139)));
evalcond[1]=((((-1.0)*r22*x6137))+((r20*x6138))+(((-1.0)*x6134*x6140)));
evalcond[2]=(((r10*x6138))+cj12+(((-1.0)*r12*x6137))+(((-1.0)*r11*sj17*x6140)));
evalcond[3]=((((-1.0)*sj12))+(((-1.0)*r01*sj17*x6140))+((r00*x6138))+(((-1.0)*r02*x6137)));
evalcond[4]=(cj12+((x6135*x6136))+((r02*x6131))+((cj17*x6135)));
evalcond[5]=(((r10*x6130*x6136))+((r10*x6139))+sj12+((r12*x6131)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x6142 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6142.valid){
continue;
}
CheckValue<IkReal> x6143=IKPowWithIntegerCheck(IKsign((((r00*sj17))+((cj17*r01)))),-1);
if(!x6143.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x6142.value)+(((1.5707963267949)*(x6143.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x6144=IKsin(j16);
IkReal x6145=IKcos(j16);
CheckValue<IkReal> x6155=IKPowWithIntegerCheck(cj17,-1);
if(!x6155.valid){
continue;
}
IkReal x6146=x6155.value;
IkReal x6147=sj17*sj17;
IkReal x6148=(r21*sj17);
IkReal x6149=(r00*x6144);
IkReal x6150=(x6146*x6147);
IkReal x6151=((1.0)*x6144);
IkReal x6152=(cj17*x6145);
IkReal x6153=(cj17*x6144);
IkReal x6154=((1.0)*x6145);
evalcond[0]=(((r20*x6153))+((r22*x6145))+(((-1.0)*x6148*x6151)));
evalcond[1]=((((-1.0)*r22*x6151))+((r20*x6152))+(((-1.0)*x6148*x6154)));
evalcond[2]=((((-1.0)*r11*sj17*x6154))+cj12+(((-1.0)*r12*x6151))+((r10*x6152)));
evalcond[3]=((((-1.0)*r01*sj17*x6154))+((r00*x6152))+(((-1.0)*r02*x6151))+(((-1.0)*sj12)));
evalcond[4]=(((x6149*x6150))+((cj17*x6149))+cj12+((r02*x6145)));
evalcond[5]=(((r10*x6144*x6150))+sj12+((r10*x6153))+((r12*x6145)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j14), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j13), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
if( IKabs(((((-0.160559264620033)*px))+(((1.20217186450501)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.160559264620033)*py))+(((1.20217186450501)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.160559264620033)*px))+(((1.20217186450501)*py))))+IKsqr(((((0.160559264620033)*py))+(((1.20217186450501)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-0.160559264620033)*px))+(((1.20217186450501)*py))), ((((0.160559264620033)*py))+(((1.20217186450501)*px))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[2];
IkReal x6156=IKsin(j12);
IkReal x6157=IKcos(j12);
evalcond[0]=((((-0.10915)*x6156))+(((-1.0)*px))+(((0.81725)*x6157)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*x6157))+(((0.81725)*x6156)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j16eval[3];
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
j13=1.5707963267949;
sj13=1.0;
cj13=0;
j14=0;
sj14=0;
cj14=1.0;
IkReal x6158=(((r00*sj17))+((cj17*r01)));
j16eval[0]=x6158;
j16eval[1]=((IKabs(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))))+(IKabs((cj12*r22))));
j16eval[2]=IKsign(x6158);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
j13=1.5707963267949;
sj13=1.0;
cj13=0;
j14=0;
sj14=0;
cj14=1.0;
IkReal x6159=(((cj17*r11))+((r10*sj17)));
j16eval[0]=x6159;
j16eval[1]=((IKabs((r22*sj12)))+(IKabs(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12))))));
j16eval[2]=IKsign(x6159);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
j13=1.5707963267949;
sj13=1.0;
cj13=0;
j14=0;
sj14=0;
cj14=1.0;
IkReal x6160=cj17*cj17;
IkReal x6161=((1.0)*r11);
IkReal x6162=(cj17*r20);
IkReal x6163=(r21*sj17);
IkReal x6164=(((r11*r21))+((r12*r22))+(((-1.0)*r21*x6160*x6161))+((r10*r20*x6160))+(((-1.0)*cj17*r10*x6163))+(((-1.0)*sj17*x6161*x6162)));
j16eval[0]=x6164;
j16eval[1]=IKsign(x6164);
j16eval[2]=((IKabs(((((-1.0)*cj12*x6162))+((cj12*x6163)))))+(IKabs((cj12*r22))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x6165=cj17*cj17;
IkReal x6166=((1.0)*r11);
IkReal x6167=(cj17*r20);
IkReal x6168=(r21*sj17);
CheckValue<IkReal> x6169=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6165*x6166))+((r11*r21))+((r12*r22))+((r10*r20*x6165))+(((-1.0)*cj17*r10*x6168))+(((-1.0)*sj17*x6166*x6167)))),-1);
if(!x6169.valid){
continue;
}
CheckValue<IkReal> x6170 = IKatan2WithCheck(IkReal((cj12*r22)),IkReal(((((-1.0)*cj12*x6167))+((cj12*x6168)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6170.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6169.value)))+(x6170.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x6171=IKsin(j16);
IkReal x6172=IKcos(j16);
CheckValue<IkReal> x6183=IKPowWithIntegerCheck(cj17,-1);
if(!x6183.valid){
continue;
}
IkReal x6173=x6183.value;
IkReal x6174=sj17*sj17;
IkReal x6175=((1.0)*sj12);
IkReal x6176=(r21*sj17);
IkReal x6177=(r00*x6171);
IkReal x6178=(x6173*x6174);
IkReal x6179=((1.0)*x6171);
IkReal x6180=(cj17*x6172);
IkReal x6181=(cj17*x6171);
IkReal x6182=((1.0)*x6172);
evalcond[0]=((((-1.0)*x6176*x6179))+((r20*x6181))+((r22*x6172)));
evalcond[1]=(((r20*x6180))+(((-1.0)*x6176*x6182))+(((-1.0)*r22*x6179)));
evalcond[2]=((((-1.0)*r11*sj17*x6182))+(((-1.0)*r12*x6179))+cj12+((r10*x6180)));
evalcond[3]=(((r00*x6180))+(((-1.0)*x6175))+(((-1.0)*r02*x6179))+(((-1.0)*r01*sj17*x6182)));
evalcond[4]=(((r02*x6172))+((x6177*x6178))+(((-1.0)*cj12))+((cj17*x6177)));
evalcond[5]=(((r12*x6172))+((r10*x6171*x6178))+(((-1.0)*x6175))+((r10*x6181)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x6184=IKPowWithIntegerCheck(IKsign((((cj17*r11))+((r10*sj17)))),-1);
if(!x6184.valid){
continue;
}
CheckValue<IkReal> x6185 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6185.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6184.value)))+(x6185.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x6186=IKsin(j16);
IkReal x6187=IKcos(j16);
CheckValue<IkReal> x6198=IKPowWithIntegerCheck(cj17,-1);
if(!x6198.valid){
continue;
}
IkReal x6188=x6198.value;
IkReal x6189=sj17*sj17;
IkReal x6190=((1.0)*sj12);
IkReal x6191=(r21*sj17);
IkReal x6192=(r00*x6186);
IkReal x6193=(x6188*x6189);
IkReal x6194=((1.0)*x6186);
IkReal x6195=(cj17*x6187);
IkReal x6196=(cj17*x6186);
IkReal x6197=((1.0)*x6187);
evalcond[0]=(((r20*x6196))+((r22*x6187))+(((-1.0)*x6191*x6194)));
evalcond[1]=(((r20*x6195))+(((-1.0)*x6191*x6197))+(((-1.0)*r22*x6194)));
evalcond[2]=(((r10*x6195))+(((-1.0)*r12*x6194))+(((-1.0)*r11*sj17*x6197))+cj12);
evalcond[3]=((((-1.0)*x6190))+(((-1.0)*r01*sj17*x6197))+((r00*x6195))+(((-1.0)*r02*x6194)));
evalcond[4]=(((cj17*x6192))+((r02*x6187))+((x6192*x6193))+(((-1.0)*cj12)));
evalcond[5]=(((r10*x6196))+(((-1.0)*x6190))+((r10*x6186*x6193))+((r12*x6187)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x6199 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6199.valid){
continue;
}
CheckValue<IkReal> x6200=IKPowWithIntegerCheck(IKsign((((r00*sj17))+((cj17*r01)))),-1);
if(!x6200.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x6199.value)+(((1.5707963267949)*(x6200.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x6201=IKsin(j16);
IkReal x6202=IKcos(j16);
CheckValue<IkReal> x6213=IKPowWithIntegerCheck(cj17,-1);
if(!x6213.valid){
continue;
}
IkReal x6203=x6213.value;
IkReal x6204=sj17*sj17;
IkReal x6205=((1.0)*sj12);
IkReal x6206=(r21*sj17);
IkReal x6207=(r00*x6201);
IkReal x6208=(x6203*x6204);
IkReal x6209=((1.0)*x6201);
IkReal x6210=(cj17*x6202);
IkReal x6211=(cj17*x6201);
IkReal x6212=((1.0)*x6202);
evalcond[0]=(((r22*x6202))+((r20*x6211))+(((-1.0)*x6206*x6209)));
evalcond[1]=((((-1.0)*x6206*x6212))+((r20*x6210))+(((-1.0)*r22*x6209)));
evalcond[2]=(((r10*x6210))+(((-1.0)*r11*sj17*x6212))+cj12+(((-1.0)*r12*x6209)));
evalcond[3]=((((-1.0)*r01*sj17*x6212))+(((-1.0)*r02*x6209))+((r00*x6210))+(((-1.0)*x6205)));
evalcond[4]=(((x6207*x6208))+((r02*x6202))+(((-1.0)*cj12))+((cj17*x6207)));
evalcond[5]=(((r10*x6211))+((r10*x6201*x6208))+(((-1.0)*x6205))+((r12*x6202)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j14, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j13), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
if( IKabs(((((2.52189136462044)*py))+(((-8.4050211434602)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((8.4050211434602)*py))+(((2.52189136462044)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.52189136462044)*py))+(((-8.4050211434602)*px))))+IKsqr(((((8.4050211434602)*py))+(((2.52189136462044)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((2.52189136462044)*py))+(((-8.4050211434602)*px))), ((((8.4050211434602)*py))+(((2.52189136462044)*px))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[2];
IkReal x6214=IKcos(j12);
IkReal x6215=IKsin(j12);
evalcond[0]=((((-0.10915)*x6215))+(((-1.0)*px))+(((0.03275)*x6214)));
evalcond[1]=((((0.10915)*x6214))+(((-1.0)*py))+(((0.03275)*x6215)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j16eval[3];
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
j13=1.5707963267949;
sj13=1.0;
cj13=0;
j14=3.14159265358979;
sj14=0;
cj14=-1.0;
IkReal x6216=(((r00*sj17))+((cj17*r01)));
j16eval[0]=x6216;
j16eval[1]=((IKabs(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))))+(IKabs((cj12*r22))));
j16eval[2]=IKsign(x6216);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
j13=1.5707963267949;
sj13=1.0;
cj13=0;
j14=3.14159265358979;
sj14=0;
cj14=-1.0;
IkReal x6217=(((cj17*r11))+((r10*sj17)));
j16eval[0]=x6217;
j16eval[1]=((IKabs((r22*sj12)))+(IKabs(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12))))));
j16eval[2]=IKsign(x6217);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
j13=1.5707963267949;
sj13=1.0;
cj13=0;
j14=3.14159265358979;
sj14=0;
cj14=-1.0;
IkReal x6218=cj17*cj17;
IkReal x6219=((1.0)*r11);
IkReal x6220=(cj17*r20);
IkReal x6221=(r21*sj17);
IkReal x6222=(((r11*r21))+(((-1.0)*cj17*r10*x6221))+((r12*r22))+(((-1.0)*sj17*x6219*x6220))+((r10*r20*x6218))+(((-1.0)*r21*x6218*x6219)));
j16eval[0]=x6222;
j16eval[1]=IKsign(x6222);
j16eval[2]=((IKabs((((cj12*x6221))+(((-1.0)*cj12*x6220)))))+(IKabs((cj12*r22))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x6223=cj17*cj17;
IkReal x6224=((1.0)*r11);
IkReal x6225=(cj17*r20);
IkReal x6226=(r21*sj17);
CheckValue<IkReal> x6227 = IKatan2WithCheck(IkReal((cj12*r22)),IkReal((((cj12*x6226))+(((-1.0)*cj12*x6225)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6227.valid){
continue;
}
CheckValue<IkReal> x6228=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj17*x6224*x6225))+((r11*r21))+(((-1.0)*cj17*r10*x6226))+((r12*r22))+(((-1.0)*r21*x6223*x6224))+((r10*r20*x6223)))),-1);
if(!x6228.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x6227.value)+(((1.5707963267949)*(x6228.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x6229=IKsin(j16);
IkReal x6230=IKcos(j16);
CheckValue<IkReal> x6240=IKPowWithIntegerCheck(cj17,-1);
if(!x6240.valid){
continue;
}
IkReal x6231=x6240.value;
IkReal x6232=sj17*sj17;
IkReal x6233=(r21*sj17);
IkReal x6234=(r00*x6229);
IkReal x6235=(x6231*x6232);
IkReal x6236=((1.0)*x6229);
IkReal x6237=(cj17*x6230);
IkReal x6238=(cj17*x6229);
IkReal x6239=((1.0)*x6230);
evalcond[0]=(((r20*x6238))+((r22*x6230))+(((-1.0)*x6233*x6236)));
evalcond[1]=(((r20*x6237))+(((-1.0)*r22*x6236))+(((-1.0)*x6233*x6239)));
evalcond[2]=((((-1.0)*r12*x6236))+cj12+((r10*x6237))+(((-1.0)*r11*sj17*x6239)));
evalcond[3]=((((-1.0)*r01*sj17*x6239))+(((-1.0)*sj12))+((r00*x6237))+(((-1.0)*r02*x6236)));
evalcond[4]=(((r02*x6230))+((x6234*x6235))+cj12+((cj17*x6234)));
evalcond[5]=(((r12*x6230))+sj12+((r10*x6238))+((r10*x6229*x6235)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x6241=IKPowWithIntegerCheck(IKsign((((cj17*r11))+((r10*sj17)))),-1);
if(!x6241.valid){
continue;
}
CheckValue<IkReal> x6242 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6242.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6241.value)))+(x6242.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x6243=IKsin(j16);
IkReal x6244=IKcos(j16);
CheckValue<IkReal> x6254=IKPowWithIntegerCheck(cj17,-1);
if(!x6254.valid){
continue;
}
IkReal x6245=x6254.value;
IkReal x6246=sj17*sj17;
IkReal x6247=(r21*sj17);
IkReal x6248=(r00*x6243);
IkReal x6249=(x6245*x6246);
IkReal x6250=((1.0)*x6243);
IkReal x6251=(cj17*x6244);
IkReal x6252=(cj17*x6243);
IkReal x6253=((1.0)*x6244);
evalcond[0]=((((-1.0)*x6247*x6250))+((r20*x6252))+((r22*x6244)));
evalcond[1]=((((-1.0)*x6247*x6253))+(((-1.0)*r22*x6250))+((r20*x6251)));
evalcond[2]=(((r10*x6251))+cj12+(((-1.0)*r11*sj17*x6253))+(((-1.0)*r12*x6250)));
evalcond[3]=(((r00*x6251))+(((-1.0)*r02*x6250))+(((-1.0)*r01*sj17*x6253))+(((-1.0)*sj12)));
evalcond[4]=(((cj17*x6248))+((r02*x6244))+((x6248*x6249))+cj12);
evalcond[5]=(((r10*x6243*x6249))+((r12*x6244))+((r10*x6252))+sj12);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x6255 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6255.valid){
continue;
}
CheckValue<IkReal> x6256=IKPowWithIntegerCheck(IKsign((((r00*sj17))+((cj17*r01)))),-1);
if(!x6256.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x6255.value)+(((1.5707963267949)*(x6256.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x6257=IKsin(j16);
IkReal x6258=IKcos(j16);
CheckValue<IkReal> x6268=IKPowWithIntegerCheck(cj17,-1);
if(!x6268.valid){
continue;
}
IkReal x6259=x6268.value;
IkReal x6260=sj17*sj17;
IkReal x6261=(r21*sj17);
IkReal x6262=(r00*x6257);
IkReal x6263=(x6259*x6260);
IkReal x6264=((1.0)*x6257);
IkReal x6265=(cj17*x6258);
IkReal x6266=(cj17*x6257);
IkReal x6267=((1.0)*x6258);
evalcond[0]=(((r22*x6258))+(((-1.0)*x6261*x6264))+((r20*x6266)));
evalcond[1]=((((-1.0)*x6261*x6267))+(((-1.0)*r22*x6264))+((r20*x6265)));
evalcond[2]=(((r10*x6265))+cj12+(((-1.0)*r11*sj17*x6267))+(((-1.0)*r12*x6264)));
evalcond[3]=(((r00*x6265))+(((-1.0)*r02*x6264))+(((-1.0)*sj12))+(((-1.0)*r01*sj17*x6267)));
evalcond[4]=(((x6262*x6263))+cj12+((cj17*x6262))+((r02*x6258)));
evalcond[5]=(((r10*x6257*x6263))+((r10*x6266))+sj12+((r12*x6258)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j13, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j14), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
if( IKabs(((((-0.658427386453172)*px))+(((-2.36617629259053)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((-2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))))+IKsqr(((((0.658427386453172)*py))+(((-2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))), ((((0.658427386453172)*py))+(((-2.36617629259053)*px))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[2];
IkReal x6269=IKcos(j12);
IkReal x6270=IKsin(j12);
evalcond[0]=((((-0.10915)*x6270))+(((-1.0)*px))+(((-0.39225)*x6269)));
evalcond[1]=((((0.10915)*x6269))+(((-1.0)*py))+(((-0.39225)*x6270)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j16eval[3];
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
j13=3.14159265358979;
sj13=0;
cj13=-1.0;
j14=1.5707963267949;
sj14=1.0;
cj14=0;
IkReal x6271=(((r00*sj17))+((cj17*r01)));
j16eval[0]=x6271;
j16eval[1]=((IKabs(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))))+(IKabs((cj12*r22))));
j16eval[2]=IKsign(x6271);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
j13=3.14159265358979;
sj13=0;
cj13=-1.0;
j14=1.5707963267949;
sj14=1.0;
cj14=0;
IkReal x6272=(((cj17*r11))+((r10*sj17)));
j16eval[0]=x6272;
j16eval[1]=((IKabs((r22*sj12)))+(IKabs(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12))))));
j16eval[2]=IKsign(x6272);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
j13=3.14159265358979;
sj13=0;
cj13=-1.0;
j14=1.5707963267949;
sj14=1.0;
cj14=0;
IkReal x6273=cj17*cj17;
IkReal x6274=((1.0)*r11);
IkReal x6275=(cj17*r20);
IkReal x6276=(r21*sj17);
IkReal x6277=((((-1.0)*sj17*x6274*x6275))+((r11*r21))+((r12*r22))+(((-1.0)*cj17*r10*x6276))+((r10*r20*x6273))+(((-1.0)*r21*x6273*x6274)));
j16eval[0]=x6277;
j16eval[1]=IKsign(x6277);
j16eval[2]=((IKabs(((((-1.0)*cj12*x6275))+((cj12*x6276)))))+(IKabs((cj12*r22))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x6278=cj17*cj17;
IkReal x6279=((1.0)*r11);
IkReal x6280=(cj17*r20);
IkReal x6281=(r21*sj17);
CheckValue<IkReal> x6282 = IKatan2WithCheck(IkReal((cj12*r22)),IkReal((((cj12*x6281))+(((-1.0)*cj12*x6280)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6282.valid){
continue;
}
CheckValue<IkReal> x6283=IKPowWithIntegerCheck(IKsign((((r11*r21))+(((-1.0)*r21*x6278*x6279))+((r12*r22))+((r10*r20*x6278))+(((-1.0)*sj17*x6279*x6280))+(((-1.0)*cj17*r10*x6281)))),-1);
if(!x6283.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x6282.value)+(((1.5707963267949)*(x6283.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x6284=IKsin(j16);
IkReal x6285=IKcos(j16);
CheckValue<IkReal> x6295=IKPowWithIntegerCheck(cj17,-1);
if(!x6295.valid){
continue;
}
IkReal x6286=x6295.value;
IkReal x6287=sj17*sj17;
IkReal x6288=(r21*sj17);
IkReal x6289=(r00*x6284);
IkReal x6290=(x6286*x6287);
IkReal x6291=((1.0)*x6284);
IkReal x6292=(cj17*x6285);
IkReal x6293=(cj17*x6284);
IkReal x6294=((1.0)*x6285);
evalcond[0]=(((r22*x6285))+(((-1.0)*x6288*x6291))+((r20*x6293)));
evalcond[1]=((((-1.0)*r22*x6291))+(((-1.0)*x6288*x6294))+((r20*x6292)));
evalcond[2]=(cj12+(((-1.0)*r12*x6291))+((r10*x6292))+(((-1.0)*r11*sj17*x6294)));
evalcond[3]=(((r00*x6292))+(((-1.0)*r02*x6291))+(((-1.0)*sj12))+(((-1.0)*r01*sj17*x6294)));
evalcond[4]=(((cj17*x6289))+cj12+((r02*x6285))+((x6289*x6290)));
evalcond[5]=(((r10*x6284*x6290))+((r12*x6285))+sj12+((r10*x6293)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x6296=IKPowWithIntegerCheck(IKsign((((cj17*r11))+((r10*sj17)))),-1);
if(!x6296.valid){
continue;
}
CheckValue<IkReal> x6297 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6297.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6296.value)))+(x6297.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x6298=IKsin(j16);
IkReal x6299=IKcos(j16);
CheckValue<IkReal> x6309=IKPowWithIntegerCheck(cj17,-1);
if(!x6309.valid){
continue;
}
IkReal x6300=x6309.value;
IkReal x6301=sj17*sj17;
IkReal x6302=(r21*sj17);
IkReal x6303=(r00*x6298);
IkReal x6304=(x6300*x6301);
IkReal x6305=((1.0)*x6298);
IkReal x6306=(cj17*x6299);
IkReal x6307=(cj17*x6298);
IkReal x6308=((1.0)*x6299);
evalcond[0]=((((-1.0)*x6302*x6305))+((r22*x6299))+((r20*x6307)));
evalcond[1]=((((-1.0)*x6302*x6308))+(((-1.0)*r22*x6305))+((r20*x6306)));
evalcond[2]=((((-1.0)*r11*sj17*x6308))+(((-1.0)*r12*x6305))+cj12+((r10*x6306)));
evalcond[3]=((((-1.0)*r02*x6305))+((r00*x6306))+(((-1.0)*sj12))+(((-1.0)*r01*sj17*x6308)));
evalcond[4]=(((x6303*x6304))+((cj17*x6303))+cj12+((r02*x6299)));
evalcond[5]=(sj12+((r12*x6299))+((r10*x6307))+((r10*x6298*x6304)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x6310 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6310.valid){
continue;
}
CheckValue<IkReal> x6311=IKPowWithIntegerCheck(IKsign((((r00*sj17))+((cj17*r01)))),-1);
if(!x6311.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x6310.value)+(((1.5707963267949)*(x6311.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x6312=IKsin(j16);
IkReal x6313=IKcos(j16);
CheckValue<IkReal> x6323=IKPowWithIntegerCheck(cj17,-1);
if(!x6323.valid){
continue;
}
IkReal x6314=x6323.value;
IkReal x6315=sj17*sj17;
IkReal x6316=(r21*sj17);
IkReal x6317=(r00*x6312);
IkReal x6318=(x6314*x6315);
IkReal x6319=((1.0)*x6312);
IkReal x6320=(cj17*x6313);
IkReal x6321=(cj17*x6312);
IkReal x6322=((1.0)*x6313);
evalcond[0]=(((r22*x6313))+((r20*x6321))+(((-1.0)*x6316*x6319)));
evalcond[1]=((((-1.0)*r22*x6319))+((r20*x6320))+(((-1.0)*x6316*x6322)));
evalcond[2]=((((-1.0)*r12*x6319))+((r10*x6320))+(((-1.0)*r11*sj17*x6322))+cj12);
evalcond[3]=((((-1.0)*r01*sj17*x6322))+(((-1.0)*r02*x6319))+(((-1.0)*sj12))+((r00*x6320)));
evalcond[4]=(((cj17*x6317))+((r02*x6313))+cj12+((x6317*x6318)));
evalcond[5]=(((r10*x6321))+sj12+((r10*x6312*x6318))+((r12*x6313)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j13, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j14), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
if( IKabs(((((2.36617629259053)*py))+(((-0.658427386453172)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.36617629259053)*py))+(((-0.658427386453172)*px))))+IKsqr(((((0.658427386453172)*py))+(((2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((2.36617629259053)*py))+(((-0.658427386453172)*px))), ((((0.658427386453172)*py))+(((2.36617629259053)*px))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[2];
IkReal x6324=IKcos(j12);
IkReal x6325=IKsin(j12);
evalcond[0]=((((0.39225)*x6324))+(((-0.10915)*x6325))+(((-1.0)*px)));
evalcond[1]=((((0.10915)*x6324))+(((0.39225)*x6325))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j16eval[3];
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
j13=3.14159265358979;
sj13=0;
cj13=-1.0;
j14=-1.5707963267949;
sj14=-1.0;
cj14=0;
IkReal x6326=(((r00*sj17))+((cj17*r01)));
j16eval[0]=x6326;
j16eval[1]=((IKabs(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))))+(IKabs((cj12*r22))));
j16eval[2]=IKsign(x6326);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
j13=3.14159265358979;
sj13=0;
cj13=-1.0;
j14=-1.5707963267949;
sj14=-1.0;
cj14=0;
IkReal x6327=(((cj17*r11))+((r10*sj17)));
j16eval[0]=x6327;
j16eval[1]=((IKabs((r22*sj12)))+(IKabs(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12))))));
j16eval[2]=IKsign(x6327);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
j13=3.14159265358979;
sj13=0;
cj13=-1.0;
j14=-1.5707963267949;
sj14=-1.0;
cj14=0;
IkReal x6328=cj17*cj17;
IkReal x6329=((1.0)*r11);
IkReal x6330=(cj17*r20);
IkReal x6331=(r21*sj17);
IkReal x6332=((((-1.0)*sj17*x6329*x6330))+((r11*r21))+((r10*r20*x6328))+((r12*r22))+(((-1.0)*r21*x6328*x6329))+(((-1.0)*cj17*r10*x6331)));
j16eval[0]=x6332;
j16eval[1]=IKsign(x6332);
j16eval[2]=((IKabs((((cj12*x6331))+(((-1.0)*cj12*x6330)))))+(IKabs((cj12*r22))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x6333=cj17*cj17;
IkReal x6334=((1.0)*r11);
IkReal x6335=(cj17*r20);
IkReal x6336=(r21*sj17);
CheckValue<IkReal> x6337=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6333*x6334))+(((-1.0)*sj17*x6334*x6335))+((r11*r21))+((r10*r20*x6333))+((r12*r22))+(((-1.0)*cj17*r10*x6336)))),-1);
if(!x6337.valid){
continue;
}
CheckValue<IkReal> x6338 = IKatan2WithCheck(IkReal((cj12*r22)),IkReal((((cj12*x6336))+(((-1.0)*cj12*x6335)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6338.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6337.value)))+(x6338.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x6339=IKsin(j16);
IkReal x6340=IKcos(j16);
CheckValue<IkReal> x6351=IKPowWithIntegerCheck(cj17,-1);
if(!x6351.valid){
continue;
}
IkReal x6341=x6351.value;
IkReal x6342=sj17*sj17;
IkReal x6343=((1.0)*sj12);
IkReal x6344=(r21*sj17);
IkReal x6345=(r00*x6339);
IkReal x6346=(x6341*x6342);
IkReal x6347=((1.0)*x6339);
IkReal x6348=(cj17*x6340);
IkReal x6349=(cj17*x6339);
IkReal x6350=((1.0)*x6340);
evalcond[0]=(((r22*x6340))+(((-1.0)*x6344*x6347))+((r20*x6349)));
evalcond[1]=((((-1.0)*r22*x6347))+(((-1.0)*x6344*x6350))+((r20*x6348)));
evalcond[2]=(((r10*x6348))+cj12+(((-1.0)*r11*sj17*x6350))+(((-1.0)*r12*x6347)));
evalcond[3]=((((-1.0)*r01*sj17*x6350))+((r00*x6348))+(((-1.0)*r02*x6347))+(((-1.0)*x6343)));
evalcond[4]=(((x6345*x6346))+((r02*x6340))+((cj17*x6345))+(((-1.0)*cj12)));
evalcond[5]=(((r12*x6340))+((r10*x6339*x6346))+((r10*x6349))+(((-1.0)*x6343)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x6352=IKPowWithIntegerCheck(IKsign((((cj17*r11))+((r10*sj17)))),-1);
if(!x6352.valid){
continue;
}
CheckValue<IkReal> x6353 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6353.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6352.value)))+(x6353.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x6354=IKsin(j16);
IkReal x6355=IKcos(j16);
CheckValue<IkReal> x6366=IKPowWithIntegerCheck(cj17,-1);
if(!x6366.valid){
continue;
}
IkReal x6356=x6366.value;
IkReal x6357=sj17*sj17;
IkReal x6358=((1.0)*sj12);
IkReal x6359=(r21*sj17);
IkReal x6360=(r00*x6354);
IkReal x6361=(x6356*x6357);
IkReal x6362=((1.0)*x6354);
IkReal x6363=(cj17*x6355);
IkReal x6364=(cj17*x6354);
IkReal x6365=((1.0)*x6355);
evalcond[0]=(((r20*x6364))+((r22*x6355))+(((-1.0)*x6359*x6362)));
evalcond[1]=(((r20*x6363))+(((-1.0)*x6359*x6365))+(((-1.0)*r22*x6362)));
evalcond[2]=(cj12+(((-1.0)*r11*sj17*x6365))+(((-1.0)*r12*x6362))+((r10*x6363)));
evalcond[3]=((((-1.0)*r02*x6362))+(((-1.0)*r01*sj17*x6365))+((r00*x6363))+(((-1.0)*x6358)));
evalcond[4]=(((x6360*x6361))+((r02*x6355))+(((-1.0)*cj12))+((cj17*x6360)));
evalcond[5]=(((r10*x6354*x6361))+((r12*x6355))+(((-1.0)*x6358))+((r10*x6364)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x6367 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6367.valid){
continue;
}
CheckValue<IkReal> x6368=IKPowWithIntegerCheck(IKsign((((r00*sj17))+((cj17*r01)))),-1);
if(!x6368.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x6367.value)+(((1.5707963267949)*(x6368.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x6369=IKsin(j16);
IkReal x6370=IKcos(j16);
CheckValue<IkReal> x6381=IKPowWithIntegerCheck(cj17,-1);
if(!x6381.valid){
continue;
}
IkReal x6371=x6381.value;
IkReal x6372=sj17*sj17;
IkReal x6373=((1.0)*sj12);
IkReal x6374=(r21*sj17);
IkReal x6375=(r00*x6369);
IkReal x6376=(x6371*x6372);
IkReal x6377=((1.0)*x6369);
IkReal x6378=(cj17*x6370);
IkReal x6379=(cj17*x6369);
IkReal x6380=((1.0)*x6370);
evalcond[0]=(((r20*x6379))+(((-1.0)*x6374*x6377))+((r22*x6370)));
evalcond[1]=((((-1.0)*x6374*x6380))+((r20*x6378))+(((-1.0)*r22*x6377)));
evalcond[2]=(cj12+(((-1.0)*r12*x6377))+(((-1.0)*r11*sj17*x6380))+((r10*x6378)));
evalcond[3]=(((r00*x6378))+(((-1.0)*r02*x6377))+(((-1.0)*r01*sj17*x6380))+(((-1.0)*x6373)));
evalcond[4]=(((x6375*x6376))+(((-1.0)*cj12))+((cj17*x6375))+((r02*x6370)));
evalcond[5]=(((r12*x6370))+(((-1.0)*x6373))+((r10*x6369*x6376))+((r10*x6379)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j14), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j13), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
if( IKabs(((((-0.160559264620033)*px))+(((-1.20217186450501)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.160559264620033)*py))+(((-1.20217186450501)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.160559264620033)*px))+(((-1.20217186450501)*py))))+IKsqr(((((0.160559264620033)*py))+(((-1.20217186450501)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-0.160559264620033)*px))+(((-1.20217186450501)*py))), ((((0.160559264620033)*py))+(((-1.20217186450501)*px))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[2];
IkReal x6382=IKcos(j12);
IkReal x6383=IKsin(j12);
evalcond[0]=((((-0.10915)*x6383))+(((-1.0)*px))+(((-0.81725)*x6382)));
evalcond[1]=((((0.10915)*x6382))+(((-1.0)*py))+(((-0.81725)*x6383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j16eval[3];
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
j13=-1.5707963267949;
sj13=-1.0;
cj13=0;
j14=0;
sj14=0;
cj14=1.0;
IkReal x6384=(((r00*sj17))+((cj17*r01)));
j16eval[0]=x6384;
j16eval[1]=((IKabs(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))))+(IKabs((cj12*r22))));
j16eval[2]=IKsign(x6384);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
j13=-1.5707963267949;
sj13=-1.0;
cj13=0;
j14=0;
sj14=0;
cj14=1.0;
IkReal x6385=(((cj17*r11))+((r10*sj17)));
j16eval[0]=x6385;
j16eval[1]=((IKabs((r22*sj12)))+(IKabs(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12))))));
j16eval[2]=IKsign(x6385);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
j13=-1.5707963267949;
sj13=-1.0;
cj13=0;
j14=0;
sj14=0;
cj14=1.0;
IkReal x6386=cj17*cj17;
IkReal x6387=((1.0)*r11);
IkReal x6388=(cj17*r20);
IkReal x6389=(r21*sj17);
IkReal x6390=((((-1.0)*sj17*x6387*x6388))+((r10*r20*x6386))+(((-1.0)*cj17*r10*x6389))+((r11*r21))+((r12*r22))+(((-1.0)*r21*x6386*x6387)));
j16eval[0]=x6390;
j16eval[1]=IKsign(x6390);
j16eval[2]=((IKabs((cj12*r22)))+(IKabs(((((-1.0)*cj12*x6388))+((cj12*x6389))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x6391=cj17*cj17;
IkReal x6392=((1.0)*r11);
IkReal x6393=(cj17*r20);
IkReal x6394=(r21*sj17);
CheckValue<IkReal> x6395 = IKatan2WithCheck(IkReal((cj12*r22)),IkReal((((cj12*x6394))+(((-1.0)*cj12*x6393)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6395.valid){
continue;
}
CheckValue<IkReal> x6396=IKPowWithIntegerCheck(IKsign((((r10*r20*x6391))+((r11*r21))+((r12*r22))+(((-1.0)*cj17*r10*x6394))+(((-1.0)*sj17*x6392*x6393))+(((-1.0)*r21*x6391*x6392)))),-1);
if(!x6396.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x6395.value)+(((1.5707963267949)*(x6396.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x6397=IKsin(j16);
IkReal x6398=IKcos(j16);
CheckValue<IkReal> x6408=IKPowWithIntegerCheck(cj17,-1);
if(!x6408.valid){
continue;
}
IkReal x6399=x6408.value;
IkReal x6400=sj17*sj17;
IkReal x6401=(r21*sj17);
IkReal x6402=(r00*x6397);
IkReal x6403=(x6399*x6400);
IkReal x6404=((1.0)*x6397);
IkReal x6405=(cj17*x6398);
IkReal x6406=(cj17*x6397);
IkReal x6407=((1.0)*x6398);
evalcond[0]=(((r20*x6406))+(((-1.0)*x6401*x6404))+((r22*x6398)));
evalcond[1]=(((r20*x6405))+(((-1.0)*x6401*x6407))+(((-1.0)*r22*x6404)));
evalcond[2]=(((r10*x6405))+cj12+(((-1.0)*r11*sj17*x6407))+(((-1.0)*r12*x6404)));
evalcond[3]=(((r00*x6405))+(((-1.0)*r01*sj17*x6407))+(((-1.0)*r02*x6404))+(((-1.0)*sj12)));
evalcond[4]=(((cj17*x6402))+cj12+((x6402*x6403))+((r02*x6398)));
evalcond[5]=(((r10*x6406))+((r12*x6398))+sj12+((r10*x6397*x6403)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x6409=IKPowWithIntegerCheck(IKsign((((cj17*r11))+((r10*sj17)))),-1);
if(!x6409.valid){
continue;
}
CheckValue<IkReal> x6410 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6410.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6409.value)))+(x6410.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x6411=IKsin(j16);
IkReal x6412=IKcos(j16);
CheckValue<IkReal> x6422=IKPowWithIntegerCheck(cj17,-1);
if(!x6422.valid){
continue;
}
IkReal x6413=x6422.value;
IkReal x6414=sj17*sj17;
IkReal x6415=(r21*sj17);
IkReal x6416=(r00*x6411);
IkReal x6417=(x6413*x6414);
IkReal x6418=((1.0)*x6411);
IkReal x6419=(cj17*x6412);
IkReal x6420=(cj17*x6411);
IkReal x6421=((1.0)*x6412);
evalcond[0]=((((-1.0)*x6415*x6418))+((r20*x6420))+((r22*x6412)));
evalcond[1]=(((r20*x6419))+(((-1.0)*x6415*x6421))+(((-1.0)*r22*x6418)));
evalcond[2]=(((r10*x6419))+cj12+(((-1.0)*r11*sj17*x6421))+(((-1.0)*r12*x6418)));
evalcond[3]=((((-1.0)*r01*sj17*x6421))+((r00*x6419))+(((-1.0)*r02*x6418))+(((-1.0)*sj12)));
evalcond[4]=(((r02*x6412))+((x6416*x6417))+((cj17*x6416))+cj12);
evalcond[5]=(sj12+((r10*x6420))+((r10*x6411*x6417))+((r12*x6412)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x6423 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6423.valid){
continue;
}
CheckValue<IkReal> x6424=IKPowWithIntegerCheck(IKsign((((r00*sj17))+((cj17*r01)))),-1);
if(!x6424.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x6423.value)+(((1.5707963267949)*(x6424.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x6425=IKsin(j16);
IkReal x6426=IKcos(j16);
CheckValue<IkReal> x6436=IKPowWithIntegerCheck(cj17,-1);
if(!x6436.valid){
continue;
}
IkReal x6427=x6436.value;
IkReal x6428=sj17*sj17;
IkReal x6429=(r21*sj17);
IkReal x6430=(r00*x6425);
IkReal x6431=(x6427*x6428);
IkReal x6432=((1.0)*x6425);
IkReal x6433=(cj17*x6426);
IkReal x6434=(cj17*x6425);
IkReal x6435=((1.0)*x6426);
evalcond[0]=((((-1.0)*x6429*x6432))+((r20*x6434))+((r22*x6426)));
evalcond[1]=((((-1.0)*r22*x6432))+(((-1.0)*x6429*x6435))+((r20*x6433)));
evalcond[2]=((((-1.0)*r12*x6432))+cj12+((r10*x6433))+(((-1.0)*r11*sj17*x6435)));
evalcond[3]=((((-1.0)*r02*x6432))+(((-1.0)*sj12))+(((-1.0)*r01*sj17*x6435))+((r00*x6433)));
evalcond[4]=(((r02*x6426))+cj12+((x6430*x6431))+((cj17*x6430)));
evalcond[5]=(((r10*x6425*x6431))+sj12+((r12*x6426))+((r10*x6434)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j14, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j13), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
if( IKabs(((((-2.52189136462044)*py))+(((-8.4050211434602)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((8.4050211434602)*py))+(((-2.52189136462044)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.52189136462044)*py))+(((-8.4050211434602)*px))))+IKsqr(((((8.4050211434602)*py))+(((-2.52189136462044)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-2.52189136462044)*py))+(((-8.4050211434602)*px))), ((((8.4050211434602)*py))+(((-2.52189136462044)*px))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[2];
IkReal x6437=IKcos(j12);
IkReal x6438=IKsin(j12);
evalcond[0]=((((-0.10915)*x6438))+(((-1.0)*px))+(((-0.03275)*x6437)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*x6437))+(((-0.03275)*x6438)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j16eval[3];
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
j13=-1.5707963267949;
sj13=-1.0;
cj13=0;
j14=3.14159265358979;
sj14=0;
cj14=-1.0;
IkReal x6439=(((r00*sj17))+((cj17*r01)));
j16eval[0]=x6439;
j16eval[1]=((IKabs(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))))+(IKabs((cj12*r22))));
j16eval[2]=IKsign(x6439);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
j13=-1.5707963267949;
sj13=-1.0;
cj13=0;
j14=3.14159265358979;
sj14=0;
cj14=-1.0;
IkReal x6440=(((cj17*r11))+((r10*sj17)));
j16eval[0]=x6440;
j16eval[1]=((IKabs((r22*sj12)))+(IKabs(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12))))));
j16eval[2]=IKsign(x6440);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
j13=-1.5707963267949;
sj13=-1.0;
cj13=0;
j14=3.14159265358979;
sj14=0;
cj14=-1.0;
IkReal x6441=cj17*cj17;
IkReal x6442=((1.0)*r11);
IkReal x6443=(cj17*r20);
IkReal x6444=(r21*sj17);
IkReal x6445=(((r10*r20*x6441))+(((-1.0)*sj17*x6442*x6443))+((r11*r21))+((r12*r22))+(((-1.0)*cj17*r10*x6444))+(((-1.0)*r21*x6441*x6442)));
j16eval[0]=x6445;
j16eval[1]=IKsign(x6445);
j16eval[2]=((IKabs((((cj12*x6444))+(((-1.0)*cj12*x6443)))))+(IKabs((cj12*r22))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x6446=cj17*cj17;
IkReal x6447=((1.0)*r11);
IkReal x6448=(cj17*r20);
IkReal x6449=(r21*sj17);
CheckValue<IkReal> x6450 = IKatan2WithCheck(IkReal((cj12*r22)),IkReal((((cj12*x6449))+(((-1.0)*cj12*x6448)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6450.valid){
continue;
}
CheckValue<IkReal> x6451=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6446*x6447))+((r10*r20*x6446))+((r11*r21))+((r12*r22))+(((-1.0)*cj17*r10*x6449))+(((-1.0)*sj17*x6447*x6448)))),-1);
if(!x6451.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x6450.value)+(((1.5707963267949)*(x6451.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x6452=IKsin(j16);
IkReal x6453=IKcos(j16);
CheckValue<IkReal> x6464=IKPowWithIntegerCheck(cj17,-1);
if(!x6464.valid){
continue;
}
IkReal x6454=x6464.value;
IkReal x6455=sj17*sj17;
IkReal x6456=((1.0)*sj12);
IkReal x6457=(r21*sj17);
IkReal x6458=(r00*x6452);
IkReal x6459=(x6454*x6455);
IkReal x6460=((1.0)*x6452);
IkReal x6461=(cj17*x6453);
IkReal x6462=(cj17*x6452);
IkReal x6463=((1.0)*x6453);
evalcond[0]=((((-1.0)*x6457*x6460))+((r22*x6453))+((r20*x6462)));
evalcond[1]=((((-1.0)*x6457*x6463))+(((-1.0)*r22*x6460))+((r20*x6461)));
evalcond[2]=(((r10*x6461))+cj12+(((-1.0)*r12*x6460))+(((-1.0)*r11*sj17*x6463)));
evalcond[3]=((((-1.0)*x6456))+((r00*x6461))+(((-1.0)*r01*sj17*x6463))+(((-1.0)*r02*x6460)));
evalcond[4]=(((cj17*x6458))+(((-1.0)*cj12))+((x6458*x6459))+((r02*x6453)));
evalcond[5]=(((r10*x6462))+((r10*x6452*x6459))+(((-1.0)*x6456))+((r12*x6453)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x6465=IKPowWithIntegerCheck(IKsign((((cj17*r11))+((r10*sj17)))),-1);
if(!x6465.valid){
continue;
}
CheckValue<IkReal> x6466 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6466.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6465.value)))+(x6466.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x6467=IKsin(j16);
IkReal x6468=IKcos(j16);
CheckValue<IkReal> x6479=IKPowWithIntegerCheck(cj17,-1);
if(!x6479.valid){
continue;
}
IkReal x6469=x6479.value;
IkReal x6470=sj17*sj17;
IkReal x6471=((1.0)*sj12);
IkReal x6472=(r21*sj17);
IkReal x6473=(r00*x6467);
IkReal x6474=(x6469*x6470);
IkReal x6475=((1.0)*x6467);
IkReal x6476=(cj17*x6468);
IkReal x6477=(cj17*x6467);
IkReal x6478=((1.0)*x6468);
evalcond[0]=(((r20*x6477))+(((-1.0)*x6472*x6475))+((r22*x6468)));
evalcond[1]=(((r20*x6476))+(((-1.0)*r22*x6475))+(((-1.0)*x6472*x6478)));
evalcond[2]=((((-1.0)*r12*x6475))+(((-1.0)*r11*sj17*x6478))+((r10*x6476))+cj12);
evalcond[3]=(((r00*x6476))+(((-1.0)*r02*x6475))+(((-1.0)*x6471))+(((-1.0)*r01*sj17*x6478)));
evalcond[4]=(((cj17*x6473))+((x6473*x6474))+(((-1.0)*cj12))+((r02*x6468)));
evalcond[5]=(((r10*x6467*x6474))+((r10*x6477))+((r12*x6468))+(((-1.0)*x6471)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x6480 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6480.valid){
continue;
}
CheckValue<IkReal> x6481=IKPowWithIntegerCheck(IKsign((((r00*sj17))+((cj17*r01)))),-1);
if(!x6481.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x6480.value)+(((1.5707963267949)*(x6481.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x6482=IKsin(j16);
IkReal x6483=IKcos(j16);
CheckValue<IkReal> x6494=IKPowWithIntegerCheck(cj17,-1);
if(!x6494.valid){
continue;
}
IkReal x6484=x6494.value;
IkReal x6485=sj17*sj17;
IkReal x6486=((1.0)*sj12);
IkReal x6487=(r21*sj17);
IkReal x6488=(r00*x6482);
IkReal x6489=(x6484*x6485);
IkReal x6490=((1.0)*x6482);
IkReal x6491=(cj17*x6483);
IkReal x6492=(cj17*x6482);
IkReal x6493=((1.0)*x6483);
evalcond[0]=((((-1.0)*x6487*x6490))+((r20*x6492))+((r22*x6483)));
evalcond[1]=((((-1.0)*x6487*x6493))+(((-1.0)*r22*x6490))+((r20*x6491)));
evalcond[2]=((((-1.0)*r11*sj17*x6493))+(((-1.0)*r12*x6490))+cj12+((r10*x6491)));
evalcond[3]=(((r00*x6491))+(((-1.0)*x6486))+(((-1.0)*r02*x6490))+(((-1.0)*r01*sj17*x6493)));
evalcond[4]=(((x6488*x6489))+((r02*x6483))+(((-1.0)*cj12))+((cj17*x6488)));
evalcond[5]=((((-1.0)*x6486))+((r10*x6482*x6489))+((r12*x6483))+((r10*x6492)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12, j16]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x6495=(r00*sj17);
IkReal x6496=(cj13*cj14);
IkReal x6497=((1893.0)*sj14);
IkReal x6498=((7845.0)*cj14);
IkReal x6499=(sj13*sj14);
IkReal x6500=(cj17*r01);
IkReal x6501=((20000.0)*px);
IkReal x6502=(sj13*x6500);
IkReal x6503=((7845.0)*cj13*sj14);
CheckValue<IkReal> x6504=IKPowWithIntegerCheck(((((-2183.0)*x6499))+(((2183.0)*x6496))),-1);
if(!x6504.valid){
continue;
}
CheckValue<IkReal> x6505=IKPowWithIntegerCheck(((((-1.0)*x6499))+x6496),-1);
if(!x6505.valid){
continue;
}
if( IKabs(((x6504.value)*((((x6500*x6503))+(((-1893.0)*x6496*x6500))+((x6498*x6502))+(((8500.0)*x6502))+((sj13*x6495*x6498))+((sj13*x6495*x6497))+(((-1893.0)*x6495*x6496))+(((-1.0)*x6496*x6501))+((x6499*x6501))+((x6497*x6502))+(((8500.0)*sj13*x6495))+((x6495*x6503)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x6505.value)*((x6495+x6500)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x6504.value)*((((x6500*x6503))+(((-1893.0)*x6496*x6500))+((x6498*x6502))+(((8500.0)*x6502))+((sj13*x6495*x6498))+((sj13*x6495*x6497))+(((-1893.0)*x6495*x6496))+(((-1.0)*x6496*x6501))+((x6499*x6501))+((x6497*x6502))+(((8500.0)*sj13*x6495))+((x6495*x6503))))))+IKsqr(((x6505.value)*((x6495+x6500))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((x6504.value)*((((x6500*x6503))+(((-1893.0)*x6496*x6500))+((x6498*x6502))+(((8500.0)*x6502))+((sj13*x6495*x6498))+((sj13*x6495*x6497))+(((-1893.0)*x6495*x6496))+(((-1.0)*x6496*x6501))+((x6499*x6501))+((x6497*x6502))+(((8500.0)*sj13*x6495))+((x6495*x6503))))), ((x6505.value)*((x6495+x6500))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[4];
IkReal x6506=IKcos(j12);
IkReal x6507=IKsin(j12);
IkReal x6508=(r10*sj17);
IkReal x6509=((1.0)*sj13);
IkReal x6510=(cj17*r01);
IkReal x6511=(r00*sj17);
IkReal x6512=(cj17*r11);
IkReal x6513=((0.425)*sj13);
IkReal x6514=((0.39225)*sj13);
IkReal x6515=(cj13*x6507);
IkReal x6516=(sj14*x6506);
IkReal x6517=(cj14*x6506);
evalcond[0]=(((cj13*x6517))+(((-1.0)*x6509*x6516))+(((-1.0)*x6511))+(((-1.0)*x6510)));
evalcond[1]=((((-1.0)*x6508))+(((-1.0)*sj14*x6507*x6509))+((cj14*x6515))+(((-1.0)*x6512)));
evalcond[2]=(((x6514*x6517))+(((-0.10915)*x6507))+((x6506*x6513))+(((0.39225)*cj13*x6516))+(((-0.09465)*x6511))+(((-0.09465)*x6510))+(((-1.0)*px)));
evalcond[3]=((((0.10915)*x6506))+(((0.39225)*sj14*x6515))+(((-0.09465)*x6512))+(((-1.0)*py))+((x6507*x6513))+((cj14*x6507*x6514))+(((-0.09465)*x6508)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j16eval[3];
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
IkReal x6518=(((r00*sj17))+((cj17*r01)));
j16eval[0]=x6518;
j16eval[1]=((IKabs(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))))+(IKabs((cj12*r22))));
j16eval[2]=IKsign(x6518);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
IkReal x6519=(((cj17*r11))+((r10*sj17)));
j16eval[0]=x6519;
j16eval[1]=((IKabs((r22*sj12)))+(IKabs(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12))))));
j16eval[2]=IKsign(x6519);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
IkReal x6520=((1.0)*cj12);
IkReal x6521=((1.0)*sj12);
IkReal x6522=(((r20*sj17))+((cj17*r21)));
j16eval[0]=x6522;
j16eval[1]=IKsign(x6522);
j16eval[2]=((IKabs((((cj12*r01*sj17))+((r11*sj12*sj17))+(((-1.0)*cj17*r10*x6521))+(((-1.0)*cj17*r00*x6520)))))+(IKabs(((((-1.0)*r02*x6520))+(((-1.0)*r12*x6521))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x6524 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6524)==0){
continue;
}
IkReal x6523=pow(x6524,-0.5);
CheckValue<IkReal> x6525 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x6525.valid){
continue;
}
IkReal gconst132=((-1.0)*(x6525.value));
IkReal gconst133=((-1.0)*r21*x6523);
IkReal gconst134=(r20*x6523);
CheckValue<IkReal> x6526 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x6526.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j17+(x6526.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x6529 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x6529.valid){
continue;
}
IkReal x6527=((-1.0)*(x6529.value));
IkReal x6528=x6523;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
sj17=gconst133;
cj17=gconst134;
j17=x6527;
IkReal gconst132=x6527;
IkReal gconst133=((-1.0)*r21*x6528);
IkReal gconst134=(r20*x6528);
j16eval[0]=cj12;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x6532 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x6532.valid){
continue;
}
IkReal x6530=((-1.0)*(x6532.value));
IkReal x6531=x6523;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
sj17=gconst133;
cj17=gconst134;
j17=x6530;
IkReal gconst132=x6530;
IkReal gconst133=((-1.0)*r21*x6531);
IkReal gconst134=(r20*x6531);
j16eval[0]=sj12;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
CheckValue<IkReal> x6535 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x6535.valid){
continue;
}
IkReal x6533=((-1.0)*(x6535.value));
IkReal x6534=x6523;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
sj17=gconst133;
cj17=gconst134;
j17=x6533;
IkReal gconst132=x6533;
IkReal gconst133=((-1.0)*r21*x6534);
IkReal gconst134=(r20*x6534);
IkReal x6536=((1.0)*(r22*r22));
CheckValue<IkReal> x6540=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x6536))),-1);
if(!x6540.valid){
continue;
}
IkReal x6537=x6540.value;
IkReal x6538=((1.0)*x6537);
IkReal x6539=((((-1.0)*x6536))+(((-1.0)*x6538*(r20*r20*r20*r20)))+(((-1.0)*x6538*(r21*r21*r21*r21)))+(((-2.0)*x6537*(r20*r20)*(r21*r21))));
j16eval[0]=x6539;
j16eval[1]=IKsign(x6539);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x6541=(gconst133*r21);
IkReal x6542=(gconst134*r20);
IkReal x6543=(cj13*cj14);
IkReal x6544=(sj13*sj14);
CheckValue<IkReal> x6545 = IKatan2WithCheck(IkReal(((((-1.0)*x6542*x6543))+(((-1.0)*x6541*x6544))+((x6541*x6543))+((x6542*x6544)))),IkReal(((((-1.0)*r22*x6543))+((r22*x6544)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6545.valid){
continue;
}
CheckValue<IkReal> x6546=IKPowWithIntegerCheck(IKsign(((((2.0)*x6541*x6542))+(((-1.0)*(x6541*x6541)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x6542*x6542))))),-1);
if(!x6546.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x6545.value)+(((1.5707963267949)*(x6546.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x6547=IKcos(j16);
IkReal x6548=IKsin(j16);
IkReal x6549=((1.0)*gconst133);
IkReal x6550=(gconst134*r10);
IkReal x6551=(gconst134*r21);
IkReal x6552=(gconst134*r20);
IkReal x6553=(gconst134*r00);
IkReal x6554=(gconst133*r20);
IkReal x6555=((1.0)*x6548);
evalcond[0]=((((-1.0)*r22*x6555))+((x6547*x6552))+(((-1.0)*r21*x6547*x6549)));
evalcond[1]=((((-1.0)*r12*x6555))+cj12+((x6547*x6550))+(((-1.0)*r11*x6547*x6549)));
evalcond[2]=((((-1.0)*r01*x6547*x6549))+(((-1.0)*sj12))+(((-1.0)*r02*x6555))+((x6547*x6553)));
evalcond[3]=((((-1.0)*cj13*cj14))+((sj13*sj14))+((r22*x6547))+((x6548*x6552))+(((-1.0)*r21*x6548*x6549)));
evalcond[4]=((((-1.0)*r01*x6548*x6549))+((r02*x6547))+((x6548*x6553))+((cj12*x6551))+((cj12*x6554)));
evalcond[5]=((((-1.0)*r11*x6548*x6549))+((r12*x6547))+((x6548*x6550))+((sj12*x6554))+((sj12*x6551)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x6556 = IKatan2WithCheck(IkReal((((gconst134*r20*sj12))+(((-1.0)*gconst133*r21*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6556.valid){
continue;
}
CheckValue<IkReal> x6557=IKPowWithIntegerCheck(IKsign((((gconst134*r11))+((gconst133*r10)))),-1);
if(!x6557.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x6556.value)+(((1.5707963267949)*(x6557.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x6558=IKcos(j16);
IkReal x6559=IKsin(j16);
IkReal x6560=((1.0)*gconst133);
IkReal x6561=(gconst134*r10);
IkReal x6562=(gconst134*r21);
IkReal x6563=(gconst134*r20);
IkReal x6564=(gconst134*r00);
IkReal x6565=(gconst133*r20);
IkReal x6566=((1.0)*x6559);
evalcond[0]=((((-1.0)*r22*x6566))+((x6558*x6563))+(((-1.0)*r21*x6558*x6560)));
evalcond[1]=(cj12+(((-1.0)*r11*x6558*x6560))+((x6558*x6561))+(((-1.0)*r12*x6566)));
evalcond[2]=((((-1.0)*sj12))+(((-1.0)*r01*x6558*x6560))+((x6558*x6564))+(((-1.0)*r02*x6566)));
evalcond[3]=((((-1.0)*cj13*cj14))+(((-1.0)*r21*x6559*x6560))+((sj13*sj14))+((r22*x6558))+((x6559*x6563)));
evalcond[4]=(((r02*x6558))+((cj12*x6562))+((cj12*x6565))+(((-1.0)*r01*x6559*x6560))+((x6559*x6564)));
evalcond[5]=(((sj12*x6565))+((sj12*x6562))+(((-1.0)*r11*x6559*x6560))+((r12*x6558))+((x6559*x6561)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x6567 = IKatan2WithCheck(IkReal((((cj12*gconst134*r20))+(((-1.0)*cj12*gconst133*r21)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6567.valid){
continue;
}
CheckValue<IkReal> x6568=IKPowWithIntegerCheck(IKsign((((gconst134*r01))+((gconst133*r00)))),-1);
if(!x6568.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x6567.value)+(((1.5707963267949)*(x6568.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x6569=IKcos(j16);
IkReal x6570=IKsin(j16);
IkReal x6571=((1.0)*gconst133);
IkReal x6572=(gconst134*r10);
IkReal x6573=(gconst134*r21);
IkReal x6574=(gconst134*r20);
IkReal x6575=(gconst134*r00);
IkReal x6576=(gconst133*r20);
IkReal x6577=((1.0)*x6570);
evalcond[0]=((((-1.0)*r22*x6577))+(((-1.0)*r21*x6569*x6571))+((x6569*x6574)));
evalcond[1]=((((-1.0)*r11*x6569*x6571))+cj12+(((-1.0)*r12*x6577))+((x6569*x6572)));
evalcond[2]=((((-1.0)*sj12))+(((-1.0)*r01*x6569*x6571))+((x6569*x6575))+(((-1.0)*r02*x6577)));
evalcond[3]=((((-1.0)*cj13*cj14))+(((-1.0)*r21*x6570*x6571))+((r22*x6569))+((sj13*sj14))+((x6570*x6574)));
evalcond[4]=((((-1.0)*r01*x6570*x6571))+((cj12*x6576))+((cj12*x6573))+((x6570*x6575))+((r02*x6569)));
evalcond[5]=(((r12*x6569))+((sj12*x6576))+((sj12*x6573))+((x6570*x6572))+(((-1.0)*r11*x6570*x6571)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6579 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6579)==0){
continue;
}
IkReal x6578=pow(x6579,-0.5);
CheckValue<IkReal> x6580 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x6580.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x6580.value))));
IkReal gconst136=((1.0)*r21*x6578);
IkReal gconst137=((-1.0)*r20*x6578);
CheckValue<IkReal> x6581 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x6581.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j17+(x6581.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x6584 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x6584.valid){
continue;
}
IkReal x6582=((1.0)*(x6584.value));
IkReal x6583=x6578;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
sj17=gconst136;
cj17=gconst137;
j17=((3.14159265)+(((-1.0)*x6582)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x6582)));
IkReal gconst136=((1.0)*r21*x6583);
IkReal gconst137=((-1.0)*r20*x6583);
IkReal x6585=r22*r22;
IkReal x6586=((1.0)*x6585);
CheckValue<IkReal> x6590=IKPowWithIntegerCheck(((-1.0)+x6585),-1);
if(!x6590.valid){
continue;
}
IkReal x6587=x6590.value;
if((((1.0)+(((-1.0)*x6586)))) < -0.00001)
continue;
IkReal x6588=IKsqrt(((1.0)+(((-1.0)*x6586))));
IkReal x6589=(cj12*x6587*x6588);
j16eval[0]=((IKabs((x6589+(((-1.0)*x6586*x6589)))))+(IKabs((cj12*r22))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x6593 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x6593.valid){
continue;
}
IkReal x6591=((1.0)*(x6593.value));
IkReal x6592=x6578;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
sj17=gconst136;
cj17=gconst137;
j17=((3.14159265)+(((-1.0)*x6591)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x6591)));
IkReal gconst136=((1.0)*r21*x6592);
IkReal gconst137=((-1.0)*r20*x6592);
IkReal x6594=r22*r22;
IkReal x6595=((1.0)*x6594);
CheckValue<IkReal> x6599=IKPowWithIntegerCheck(((-1.0)+x6594),-1);
if(!x6599.valid){
continue;
}
IkReal x6596=x6599.value;
if((((1.0)+(((-1.0)*x6595)))) < -0.00001)
continue;
IkReal x6597=IKsqrt(((1.0)+(((-1.0)*x6595))));
IkReal x6598=(sj12*x6596*x6597);
j16eval[0]=((IKabs((r22*sj12)))+(IKabs((x6598+(((-1.0)*x6595*x6598))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
CheckValue<IkReal> x6602 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x6602.valid){
continue;
}
IkReal x6600=((1.0)*(x6602.value));
IkReal x6601=x6578;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
sj17=gconst136;
cj17=gconst137;
j17=((3.14159265)+(((-1.0)*x6600)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x6600)));
IkReal gconst136=((1.0)*r21*x6601);
IkReal gconst137=((-1.0)*r20*x6601);
IkReal x6603=r22*r22;
IkReal x6604=(cj12*r02);
IkReal x6605=(r12*sj12);
CheckValue<IkReal> x6609=IKPowWithIntegerCheck(((-1.0)+x6603),-1);
if(!x6609.valid){
continue;
}
IkReal x6606=x6609.value;
if((((1.0)+(((-1.0)*x6603)))) < -0.00001)
continue;
IkReal x6607=IKsqrt(((1.0)+(((-1.0)*x6603))));
IkReal x6608=(r22*x6606*x6607);
j16eval[0]=0;
j16eval[1]=((IKabs((((x6605*x6608))+((x6604*x6608)))))+(IKabs(((((-1.0)*x6604))+(((-1.0)*x6605))))));
j16eval[2]=0;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x6610=((1.0)*gconst137);
CheckValue<IkReal> x6611 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*r00*x6610))+(((-1.0)*r10*sj12*x6610))+((gconst136*r11*sj12))+((cj12*gconst136*r01)))),IkReal(((((-1.0)*cj12*r02))+(((-1.0)*r12*sj12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6611.valid){
continue;
}
CheckValue<IkReal> x6612=IKPowWithIntegerCheck(IKsign((((gconst136*r20))+((gconst137*r21)))),-1);
if(!x6612.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x6611.value)+(((1.5707963267949)*(x6612.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x6613=IKcos(j16);
IkReal x6614=IKsin(j16);
IkReal x6615=(gconst136*r20);
IkReal x6616=(gconst137*r21);
IkReal x6617=((1.0)*x6614);
IkReal x6618=(gconst137*x6613);
IkReal x6619=(gconst137*x6614);
IkReal x6620=((1.0)*gconst136*x6613);
IkReal x6621=(gconst136*x6617);
evalcond[0]=((((-1.0)*r22*x6617))+(((-1.0)*r21*x6620))+((r20*x6618)));
evalcond[1]=((((-1.0)*r12*x6617))+(((-1.0)*r11*x6620))+((r10*x6618))+cj12);
evalcond[2]=(((r00*x6618))+(((-1.0)*r02*x6617))+(((-1.0)*sj12))+(((-1.0)*r01*x6620)));
evalcond[3]=((((-1.0)*cj13*cj14))+((r22*x6613))+((sj13*sj14))+(((-1.0)*r21*x6621))+((r20*x6619)));
evalcond[4]=(((cj12*x6615))+((cj12*x6616))+((r02*x6613))+((r00*x6619))+(((-1.0)*r01*x6621)));
evalcond[5]=((((-1.0)*r11*x6621))+((r10*x6619))+((r12*x6613))+((sj12*x6615))+((sj12*x6616)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x6622=IKPowWithIntegerCheck(IKsign((((gconst137*r11))+((gconst136*r10)))),-1);
if(!x6622.valid){
continue;
}
CheckValue<IkReal> x6623 = IKatan2WithCheck(IkReal(((((-1.0)*gconst136*r21*sj12))+((gconst137*r20*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6623.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6622.value)))+(x6623.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x6624=IKcos(j16);
IkReal x6625=IKsin(j16);
IkReal x6626=(gconst136*r20);
IkReal x6627=(gconst137*r21);
IkReal x6628=((1.0)*x6625);
IkReal x6629=(gconst137*x6624);
IkReal x6630=(gconst137*x6625);
IkReal x6631=((1.0)*gconst136*x6624);
IkReal x6632=(gconst136*x6628);
evalcond[0]=((((-1.0)*r21*x6631))+(((-1.0)*r22*x6628))+((r20*x6629)));
evalcond[1]=((((-1.0)*r11*x6631))+(((-1.0)*r12*x6628))+((r10*x6629))+cj12);
evalcond[2]=(((r00*x6629))+(((-1.0)*r02*x6628))+(((-1.0)*sj12))+(((-1.0)*r01*x6631)));
evalcond[3]=((((-1.0)*r21*x6632))+(((-1.0)*cj13*cj14))+((sj13*sj14))+((r22*x6624))+((r20*x6630)));
evalcond[4]=(((r02*x6624))+((r00*x6630))+(((-1.0)*r01*x6632))+((cj12*x6626))+((cj12*x6627)));
evalcond[5]=((((-1.0)*r11*x6632))+((r10*x6630))+((r12*x6624))+((sj12*x6627))+((sj12*x6626)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x6633=IKPowWithIntegerCheck(IKsign((((gconst136*r00))+((gconst137*r01)))),-1);
if(!x6633.valid){
continue;
}
CheckValue<IkReal> x6634 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*gconst136*r21))+((cj12*gconst137*r20)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6634.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6633.value)))+(x6634.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x6635=IKcos(j16);
IkReal x6636=IKsin(j16);
IkReal x6637=(gconst136*r20);
IkReal x6638=(gconst137*r21);
IkReal x6639=((1.0)*x6636);
IkReal x6640=(gconst137*x6635);
IkReal x6641=(gconst137*x6636);
IkReal x6642=((1.0)*gconst136*x6635);
IkReal x6643=(gconst136*x6639);
evalcond[0]=((((-1.0)*r21*x6642))+(((-1.0)*r22*x6639))+((r20*x6640)));
evalcond[1]=((((-1.0)*r11*x6642))+((r10*x6640))+cj12+(((-1.0)*r12*x6639)));
evalcond[2]=(((r00*x6640))+(((-1.0)*sj12))+(((-1.0)*r02*x6639))+(((-1.0)*r01*x6642)));
evalcond[3]=((((-1.0)*cj13*cj14))+(((-1.0)*r21*x6643))+((r22*x6635))+((sj13*sj14))+((r20*x6641)));
evalcond[4]=(((r00*x6641))+(((-1.0)*r01*x6643))+((cj12*x6637))+((cj12*x6638))+((r02*x6635)));
evalcond[5]=((((-1.0)*r11*x6643))+((sj12*x6638))+((sj12*x6637))+((r10*x6641))+((r12*x6635)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6645 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6645)==0){
continue;
}
IkReal x6644=pow(x6645,-0.5);
CheckValue<IkReal> x6646 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6646.valid){
continue;
}
IkReal gconst138=((-1.0)*(x6646.value));
IkReal gconst139=((-1.0)*r11*x6644);
IkReal gconst140=(r10*x6644);
CheckValue<IkReal> x6647 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6647.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6647.value)+j17)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
CheckValue<IkReal> x6650 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6650.valid){
continue;
}
IkReal x6648=((-1.0)*(x6650.value));
IkReal x6649=x6644;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
sj17=gconst139;
cj17=gconst140;
j17=x6648;
IkReal gconst138=x6648;
IkReal gconst139=((-1.0)*r11*x6649);
IkReal gconst140=(r10*x6649);
j16eval[0]=cj12;
j16eval[1]=r22;
j16eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x6651=((1.0)*sj12);
IkReal x6652=((1.0)*cj12);
CheckValue<IkReal> x6653=IKPowWithIntegerCheck(IKsign((((gconst139*r20))+((gconst140*r21)))),-1);
if(!x6653.valid){
continue;
}
CheckValue<IkReal> x6654 = IKatan2WithCheck(IkReal((((gconst139*r11*sj12))+(((-1.0)*gconst140*r00*x6652))+(((-1.0)*gconst140*r10*x6651))+((cj12*gconst139*r01)))),IkReal(((((-1.0)*r12*x6651))+(((-1.0)*r02*x6652)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6654.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6653.value)))+(x6654.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x6655=IKcos(j16);
IkReal x6656=IKsin(j16);
IkReal x6657=(gconst139*r20);
IkReal x6658=(gconst140*r21);
IkReal x6659=(gconst140*x6656);
IkReal x6660=(gconst140*x6655);
IkReal x6661=((1.0)*x6656);
IkReal x6662=(gconst139*x6661);
IkReal x6663=((1.0)*gconst139*x6655);
evalcond[0]=((((-1.0)*r21*x6663))+((r20*x6660))+(((-1.0)*r22*x6661)));
evalcond[1]=((((-1.0)*r11*x6663))+(((-1.0)*r12*x6661))+cj12+((r10*x6660)));
evalcond[2]=((((-1.0)*r01*x6663))+((r00*x6660))+(((-1.0)*sj12))+(((-1.0)*r02*x6661)));
evalcond[3]=((((-1.0)*cj13*cj14))+(((-1.0)*r21*x6662))+((r20*x6659))+((sj13*sj14))+((r22*x6655)));
evalcond[4]=(((cj12*x6657))+((cj12*x6658))+(((-1.0)*r01*x6662))+((r02*x6655))+((r00*x6659)));
evalcond[5]=(((r12*x6655))+(((-1.0)*r11*x6662))+((r10*x6659))+((sj12*x6657))+((sj12*x6658)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x6664=IKPowWithIntegerCheck(IKsign((((gconst140*r01))+((gconst139*r00)))),-1);
if(!x6664.valid){
continue;
}
CheckValue<IkReal> x6665 = IKatan2WithCheck(IkReal((((cj12*gconst140*r20))+(((-1.0)*cj12*gconst139*r21)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6665.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6664.value)))+(x6665.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x6666=IKcos(j16);
IkReal x6667=IKsin(j16);
IkReal x6668=(gconst139*r20);
IkReal x6669=(gconst140*r21);
IkReal x6670=(gconst140*x6667);
IkReal x6671=(gconst140*x6666);
IkReal x6672=((1.0)*x6667);
IkReal x6673=(gconst139*x6672);
IkReal x6674=((1.0)*gconst139*x6666);
evalcond[0]=(((r20*x6671))+(((-1.0)*r21*x6674))+(((-1.0)*r22*x6672)));
evalcond[1]=((((-1.0)*r12*x6672))+(((-1.0)*r11*x6674))+cj12+((r10*x6671)));
evalcond[2]=((((-1.0)*r02*x6672))+(((-1.0)*r01*x6674))+(((-1.0)*sj12))+((r00*x6671)));
evalcond[3]=((((-1.0)*cj13*cj14))+((r20*x6670))+(((-1.0)*r21*x6673))+((sj13*sj14))+((r22*x6666)));
evalcond[4]=(((cj12*x6668))+((cj12*x6669))+((r02*x6666))+(((-1.0)*r01*x6673))+((r00*x6670)));
evalcond[5]=(((r12*x6666))+(((-1.0)*r11*x6673))+((r10*x6670))+((sj12*x6669))+((sj12*x6668)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6676 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6676)==0){
continue;
}
IkReal x6675=pow(x6676,-0.5);
CheckValue<IkReal> x6677 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6677.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x6677.value))));
IkReal gconst142=((1.0)*r11*x6675);
IkReal gconst143=((-1.0)*r10*x6675);
CheckValue<IkReal> x6678 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6678.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6678.value)+j17)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
CheckValue<IkReal> x6681 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6681.valid){
continue;
}
IkReal x6679=((1.0)*(x6681.value));
IkReal x6680=x6675;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
sj17=gconst142;
cj17=gconst143;
j17=((3.14159265)+(((-1.0)*x6679)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x6679)));
IkReal gconst142=((1.0)*r11*x6680);
IkReal gconst143=((-1.0)*r10*x6680);
j16eval[0]=cj12;
j16eval[1]=r22;
j16eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[5];
CheckValue<IkReal> x6684 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6684.valid){
continue;
}
IkReal x6682=((1.0)*(x6684.value));
IkReal x6683=x6675;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
sj17=gconst142;
cj17=gconst143;
j17=((3.14159265)+(((-1.0)*x6682)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x6682)));
IkReal gconst142=((1.0)*r11*x6683);
IkReal gconst143=((-1.0)*r10*x6683);
j16eval[0]=0;
j16eval[1]=0;
j16eval[2]=r22;
j16eval[3]=sj12;
j16eval[4]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  || IKabs(j16eval[3]) < 0.0000010000000000  || IKabs(j16eval[4]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x6687 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6687.valid){
continue;
}
IkReal x6685=((1.0)*(x6687.value));
IkReal x6686=x6675;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
sj17=gconst142;
cj17=gconst143;
j17=((3.14159265)+(((-1.0)*x6685)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x6685)));
IkReal gconst142=((1.0)*r11*x6686);
IkReal gconst143=((-1.0)*r10*x6686);
IkReal x6688=r12*r12;
IkReal x6689=(cj12*r02);
IkReal x6690=x6675;
IkReal x6691=(sj12*x6690);
j16eval[0]=((IKabs(((((-1.0)*r12*sj12))+(((-1.0)*x6689)))))+(IKabs(((((-1.0)*x6691))+((r12*x6689*x6690))+((x6688*x6691))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x6692=((1.0)*sj12);
IkReal x6693=((1.0)*cj12);
CheckValue<IkReal> x6694 = IKatan2WithCheck(IkReal((((cj12*gconst142*r01))+((gconst142*r11*sj12))+(((-1.0)*gconst143*r10*x6692))+(((-1.0)*gconst143*r00*x6693)))),IkReal(((((-1.0)*r02*x6693))+(((-1.0)*r12*x6692)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6694.valid){
continue;
}
CheckValue<IkReal> x6695=IKPowWithIntegerCheck(IKsign((((gconst143*r21))+((gconst142*r20)))),-1);
if(!x6695.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x6694.value)+(((1.5707963267949)*(x6695.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x6696=IKcos(j16);
IkReal x6697=IKsin(j16);
IkReal x6698=(gconst142*r20);
IkReal x6699=(gconst143*r21);
IkReal x6700=((1.0)*gconst142*r21);
IkReal x6701=((1.0)*x6697);
IkReal x6702=(gconst143*x6696);
IkReal x6703=(gconst143*x6697);
IkReal x6704=((1.0)*gconst142*x6696);
evalcond[0]=((((-1.0)*x6696*x6700))+(((-1.0)*r22*x6701))+((r20*x6702)));
evalcond[1]=(((r10*x6702))+cj12+(((-1.0)*r12*x6701))+(((-1.0)*r11*x6704)));
evalcond[2]=((((-1.0)*r02*x6701))+((r00*x6702))+(((-1.0)*sj12))+(((-1.0)*r01*x6704)));
evalcond[3]=((((-1.0)*cj13*cj14))+((r22*x6696))+(((-1.0)*x6697*x6700))+((r20*x6703))+((sj13*sj14)));
evalcond[4]=(((cj12*x6699))+((cj12*x6698))+((r00*x6703))+(((-1.0)*gconst142*r01*x6701))+((r02*x6696)));
evalcond[5]=(((r10*x6703))+((r12*x6696))+(((-1.0)*gconst142*r11*x6701))+((sj12*x6698))+((sj12*x6699)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x6705=IKPowWithIntegerCheck(IKsign((((gconst143*r11))+((gconst142*r10)))),-1);
if(!x6705.valid){
continue;
}
CheckValue<IkReal> x6706 = IKatan2WithCheck(IkReal(((((-1.0)*gconst142*r21*sj12))+((gconst143*r20*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6706.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6705.value)))+(x6706.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x6707=IKcos(j16);
IkReal x6708=IKsin(j16);
IkReal x6709=(gconst142*r20);
IkReal x6710=(gconst143*r21);
IkReal x6711=((1.0)*gconst142*r21);
IkReal x6712=((1.0)*x6708);
IkReal x6713=(gconst143*x6707);
IkReal x6714=(gconst143*x6708);
IkReal x6715=((1.0)*gconst142*x6707);
evalcond[0]=(((r20*x6713))+(((-1.0)*x6707*x6711))+(((-1.0)*r22*x6712)));
evalcond[1]=(cj12+(((-1.0)*r11*x6715))+(((-1.0)*r12*x6712))+((r10*x6713)));
evalcond[2]=((((-1.0)*r02*x6712))+(((-1.0)*sj12))+(((-1.0)*r01*x6715))+((r00*x6713)));
evalcond[3]=((((-1.0)*cj13*cj14))+((r20*x6714))+(((-1.0)*x6708*x6711))+((sj13*sj14))+((r22*x6707)));
evalcond[4]=(((cj12*x6709))+(((-1.0)*gconst142*r01*x6712))+((cj12*x6710))+((r00*x6714))+((r02*x6707)));
evalcond[5]=(((sj12*x6709))+(((-1.0)*gconst142*r11*x6712))+((r10*x6714))+((sj12*x6710))+((r12*x6707)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x6716=IKPowWithIntegerCheck(IKsign((((gconst143*r01))+((gconst142*r00)))),-1);
if(!x6716.valid){
continue;
}
CheckValue<IkReal> x6717 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*gconst142*r21))+((cj12*gconst143*r20)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6717.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6716.value)))+(x6717.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x6718=IKcos(j16);
IkReal x6719=IKsin(j16);
IkReal x6720=(gconst142*r20);
IkReal x6721=(gconst143*r21);
IkReal x6722=((1.0)*gconst142*r21);
IkReal x6723=((1.0)*x6719);
IkReal x6724=(gconst143*x6718);
IkReal x6725=(gconst143*x6719);
IkReal x6726=((1.0)*gconst142*x6718);
evalcond[0]=((((-1.0)*r22*x6723))+((r20*x6724))+(((-1.0)*x6718*x6722)));
evalcond[1]=(cj12+(((-1.0)*r12*x6723))+(((-1.0)*r11*x6726))+((r10*x6724)));
evalcond[2]=((((-1.0)*sj12))+(((-1.0)*r02*x6723))+(((-1.0)*r01*x6726))+((r00*x6724)));
evalcond[3]=((((-1.0)*cj13*cj14))+((r20*x6725))+(((-1.0)*x6719*x6722))+((r22*x6718))+((sj13*sj14)));
evalcond[4]=(((r02*x6718))+((r00*x6725))+((cj12*x6721))+((cj12*x6720))+(((-1.0)*gconst142*r01*x6723)));
evalcond[5]=((((-1.0)*gconst142*r11*x6723))+((r10*x6725))+((sj12*x6720))+((sj12*x6721))+((r12*x6718)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j12))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
sj12=0;
cj12=1.0;
j12=0;
IkReal x6727=(((r00*sj17))+((cj17*r01)));
j16eval[0]=x6727;
j16eval[1]=IKsign(x6727);
j16eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*r21*sj17))+((cj17*r20))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
sj12=0;
cj12=1.0;
j12=0;
IkReal x6728=((1.0)*sj17);
IkReal x6729=((((-1.0)*r20*x6728))+(((-1.0)*cj17*r21)));
j16eval[0]=x6729;
j16eval[1]=IKsign(x6729);
j16eval[2]=((IKabs(r02))+(IKabs((((cj17*r00))+(((-1.0)*r01*x6728))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
sj12=0;
cj12=1.0;
j12=0;
IkReal x6730=cj17*cj17;
IkReal x6731=r11*r11;
IkReal x6732=(r11*sj17);
IkReal x6733=(cj17*r10);
IkReal x6734=((r12*r12)+((x6730*(r10*r10)))+(((-2.0)*x6732*x6733))+x6731+(((-1.0)*x6730*x6731)));
j16eval[0]=x6734;
j16eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x6733))+x6732))));
j16eval[2]=IKsign(x6734);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x6735=cj17*cj17;
IkReal x6736=r11*r11;
IkReal x6737=(r11*sj17);
IkReal x6738=(cj17*r10);
CheckValue<IkReal> x6739=IKPowWithIntegerCheck(IKsign(((r12*r12)+x6736+(((-1.0)*x6735*x6736))+((x6735*(r10*r10)))+(((-2.0)*x6737*x6738)))),-1);
if(!x6739.valid){
continue;
}
CheckValue<IkReal> x6740 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x6738))+x6737)),IKFAST_ATAN2_MAGTHRESH);
if(!x6740.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6739.value)))+(x6740.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x6741=IKsin(j16);
IkReal x6742=IKcos(j16);
IkReal x6743=((1.0)*sj17);
IkReal x6744=(cj17*x6741);
IkReal x6745=(cj17*x6742);
IkReal x6746=((1.0)*x6741);
evalcond[0]=(((r12*x6742))+((r10*x6744))+(((-1.0)*r11*x6741*x6743)));
evalcond[1]=((((-1.0)*r22*x6746))+(((-1.0)*r21*x6742*x6743))+((r20*x6745)));
evalcond[2]=((((-1.0)*r01*x6742*x6743))+(((-1.0)*r02*x6746))+((r00*x6745)));
evalcond[3]=((1.0)+(((-1.0)*r12*x6746))+(((-1.0)*r11*x6742*x6743))+((r10*x6745)));
evalcond[4]=(((r02*x6742))+((r20*sj17))+((cj17*r21))+(((-1.0)*r01*x6741*x6743))+((r00*x6744)));
evalcond[5]=((((-1.0)*cj13*cj14))+(((-1.0)*r21*x6741*x6743))+((sj13*sj14))+((r20*x6744))+((r22*x6742)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x6747=((1.0)*sj17);
CheckValue<IkReal> x6748 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x6747))+((cj17*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x6748.valid){
continue;
}
CheckValue<IkReal> x6749=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj17*r21))+(((-1.0)*r20*x6747)))),-1);
if(!x6749.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x6748.value)+(((1.5707963267949)*(x6749.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x6750=IKsin(j16);
IkReal x6751=IKcos(j16);
IkReal x6752=((1.0)*sj17);
IkReal x6753=(cj17*x6750);
IkReal x6754=(cj17*x6751);
IkReal x6755=((1.0)*x6750);
evalcond[0]=(((r12*x6751))+((r10*x6753))+(((-1.0)*r11*x6750*x6752)));
evalcond[1]=(((r20*x6754))+(((-1.0)*r22*x6755))+(((-1.0)*r21*x6751*x6752)));
evalcond[2]=(((r00*x6754))+(((-1.0)*r02*x6755))+(((-1.0)*r01*x6751*x6752)));
evalcond[3]=((1.0)+((r10*x6754))+(((-1.0)*r12*x6755))+(((-1.0)*r11*x6751*x6752)));
evalcond[4]=((((-1.0)*r01*x6750*x6752))+((r00*x6753))+((r20*sj17))+((cj17*r21))+((r02*x6751)));
evalcond[5]=((((-1.0)*cj13*cj14))+((r22*x6751))+((r20*x6753))+((sj13*sj14))+(((-1.0)*r21*x6750*x6752)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x6756 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj17))+((cj17*r20)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x6756.valid){
continue;
}
CheckValue<IkReal> x6757=IKPowWithIntegerCheck(IKsign((((r00*sj17))+((cj17*r01)))),-1);
if(!x6757.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x6756.value)+(((1.5707963267949)*(x6757.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x6758=IKsin(j16);
IkReal x6759=IKcos(j16);
IkReal x6760=((1.0)*sj17);
IkReal x6761=(cj17*x6758);
IkReal x6762=(cj17*x6759);
IkReal x6763=((1.0)*x6758);
evalcond[0]=(((r12*x6759))+((r10*x6761))+(((-1.0)*r11*x6758*x6760)));
evalcond[1]=((((-1.0)*r21*x6759*x6760))+(((-1.0)*r22*x6763))+((r20*x6762)));
evalcond[2]=(((r00*x6762))+(((-1.0)*r01*x6759*x6760))+(((-1.0)*r02*x6763)));
evalcond[3]=((1.0)+((r10*x6762))+(((-1.0)*r12*x6763))+(((-1.0)*r11*x6759*x6760)));
evalcond[4]=(((r00*x6761))+((r20*sj17))+(((-1.0)*r01*x6758*x6760))+((cj17*r21))+((r02*x6759)));
evalcond[5]=((((-1.0)*cj13*cj14))+((r22*x6759))+((r20*x6761))+(((-1.0)*r21*x6758*x6760))+((sj13*sj14)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
IkReal x6764=(((r20*sj17))+((cj17*r21)));
j16eval[0]=x6764;
j16eval[1]=IKsign(x6764);
j16eval[2]=((IKabs(r02))+(IKabs((((cj17*r00))+(((-1.0)*r01*sj17))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
IkReal x6765=((1.0)*sj17);
IkReal x6766=((((-1.0)*cj17*r01))+(((-1.0)*r00*x6765)));
j16eval[0]=x6766;
j16eval[1]=IKsign(x6766);
j16eval[2]=((IKabs((((cj17*r20))+(((-1.0)*r21*x6765)))))+(IKabs(r22)));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
IkReal x6767=cj17*cj17;
IkReal x6768=r11*r11;
IkReal x6769=(r11*sj17);
IkReal x6770=(cj17*r10);
IkReal x6771=(((x6767*x6768))+(((-1.0)*x6768))+(((-1.0)*(r12*r12)))+(((2.0)*x6769*x6770))+(((-1.0)*x6767*(r10*r10))));
j16eval[0]=x6771;
j16eval[1]=((IKabs((x6769+(((-1.0)*x6770)))))+(IKabs(r12)));
j16eval[2]=IKsign(x6771);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x6772=cj17*cj17;
IkReal x6773=r11*r11;
IkReal x6774=(r11*sj17);
IkReal x6775=(cj17*r10);
CheckValue<IkReal> x6776 = IKatan2WithCheck(IkReal(r12),IkReal((x6774+(((-1.0)*x6775)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6776.valid){
continue;
}
CheckValue<IkReal> x6777=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6772*(r10*r10)))+(((2.0)*x6774*x6775))+(((-1.0)*x6773))+((x6772*x6773))+(((-1.0)*(r12*r12))))),-1);
if(!x6777.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x6776.value)+(((1.5707963267949)*(x6777.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x6778=IKsin(j16);
IkReal x6779=IKcos(j16);
IkReal x6780=((1.0)*r21);
IkReal x6781=((1.0)*r01);
IkReal x6782=(cj17*x6778);
IkReal x6783=(cj17*x6779);
IkReal x6784=((1.0)*r11*sj17);
IkReal x6785=(sj17*x6778);
IkReal x6786=((1.0)*x6778);
IkReal x6787=(sj17*x6779);
evalcond[0]=(((r12*x6779))+(((-1.0)*x6778*x6784))+((r10*x6782)));
evalcond[1]=(((r20*x6783))+(((-1.0)*r22*x6786))+(((-1.0)*x6780*x6787)));
evalcond[2]=((((-1.0)*r02*x6786))+(((-1.0)*x6781*x6787))+((r00*x6783)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x6786))+(((-1.0)*x6779*x6784))+((r10*x6783)));
evalcond[4]=(((r20*x6782))+(((-1.0)*cj13*cj14))+((r22*x6779))+((sj13*sj14))+(((-1.0)*x6780*x6785)));
evalcond[5]=(((r02*x6779))+(((-1.0)*r20*sj17))+(((-1.0)*x6781*x6785))+((r00*x6782))+(((-1.0)*cj17*x6780)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x6788=((1.0)*sj17);
CheckValue<IkReal> x6789 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x6788))+((cj17*r20)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x6789.valid){
continue;
}
CheckValue<IkReal> x6790=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj17*r01))+(((-1.0)*r00*x6788)))),-1);
if(!x6790.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x6789.value)+(((1.5707963267949)*(x6790.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x6791=IKsin(j16);
IkReal x6792=IKcos(j16);
IkReal x6793=((1.0)*r21);
IkReal x6794=((1.0)*r01);
IkReal x6795=(cj17*x6791);
IkReal x6796=(cj17*x6792);
IkReal x6797=((1.0)*r11*sj17);
IkReal x6798=(sj17*x6791);
IkReal x6799=((1.0)*x6791);
IkReal x6800=(sj17*x6792);
evalcond[0]=(((r12*x6792))+(((-1.0)*x6791*x6797))+((r10*x6795)));
evalcond[1]=((((-1.0)*x6793*x6800))+((r20*x6796))+(((-1.0)*r22*x6799)));
evalcond[2]=(((r00*x6796))+(((-1.0)*x6794*x6800))+(((-1.0)*r02*x6799)));
evalcond[3]=((-1.0)+(((-1.0)*x6792*x6797))+((r10*x6796))+(((-1.0)*r12*x6799)));
evalcond[4]=((((-1.0)*cj13*cj14))+((r22*x6792))+(((-1.0)*x6793*x6798))+((r20*x6795))+((sj13*sj14)));
evalcond[5]=(((r02*x6792))+((r00*x6795))+(((-1.0)*cj17*x6793))+(((-1.0)*r20*sj17))+(((-1.0)*x6794*x6798)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x6801 = IKatan2WithCheck(IkReal((((cj17*r00))+(((-1.0)*r01*sj17)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x6801.valid){
continue;
}
CheckValue<IkReal> x6802=IKPowWithIntegerCheck(IKsign((((r20*sj17))+((cj17*r21)))),-1);
if(!x6802.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x6801.value)+(((1.5707963267949)*(x6802.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x6803=IKsin(j16);
IkReal x6804=IKcos(j16);
IkReal x6805=((1.0)*r21);
IkReal x6806=((1.0)*r01);
IkReal x6807=(cj17*x6803);
IkReal x6808=(cj17*x6804);
IkReal x6809=((1.0)*r11*sj17);
IkReal x6810=(sj17*x6803);
IkReal x6811=((1.0)*x6803);
IkReal x6812=(sj17*x6804);
evalcond[0]=((((-1.0)*x6803*x6809))+((r10*x6807))+((r12*x6804)));
evalcond[1]=((((-1.0)*x6805*x6812))+((r20*x6808))+(((-1.0)*r22*x6811)));
evalcond[2]=(((r00*x6808))+(((-1.0)*x6806*x6812))+(((-1.0)*r02*x6811)));
evalcond[3]=((-1.0)+(((-1.0)*x6804*x6809))+((r10*x6808))+(((-1.0)*r12*x6811)));
evalcond[4]=((((-1.0)*cj13*cj14))+((r22*x6804))+(((-1.0)*x6805*x6810))+((r20*x6807))+((sj13*sj14)));
evalcond[5]=(((r00*x6807))+(((-1.0)*x6806*x6810))+(((-1.0)*cj17*x6805))+(((-1.0)*r20*sj17))+((r02*x6804)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6814 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6814)==0){
continue;
}
IkReal x6813=pow(x6814,-0.5);
CheckValue<IkReal> x6815 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6815.valid){
continue;
}
IkReal gconst144=((-1.0)*(x6815.value));
IkReal gconst145=((-1.0)*r01*x6813);
IkReal gconst146=(r00*x6813);
CheckValue<IkReal> x6816 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6816.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6816.value)+j17)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
CheckValue<IkReal> x6819 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6819.valid){
continue;
}
IkReal x6817=((-1.0)*(x6819.value));
IkReal x6818=x6813;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
sj17=gconst145;
cj17=gconst146;
j17=x6817;
IkReal gconst144=x6817;
IkReal gconst145=((-1.0)*r01*x6818);
IkReal gconst146=(r00*x6818);
j16eval[0]=r22;
j16eval[1]=sj12;
j16eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x6820=((1.0)*gconst146);
CheckValue<IkReal> x6821=IKPowWithIntegerCheck(IKsign((((gconst145*r20))+((gconst146*r21)))),-1);
if(!x6821.valid){
continue;
}
CheckValue<IkReal> x6822 = IKatan2WithCheck(IkReal((((cj12*gconst145*r01))+(((-1.0)*cj12*r00*x6820))+((gconst145*r11*sj12))+(((-1.0)*r10*sj12*x6820)))),IkReal(((((-1.0)*cj12*r02))+(((-1.0)*r12*sj12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6822.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6821.value)))+(x6822.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x6823=IKcos(j16);
IkReal x6824=IKsin(j16);
IkReal x6825=((1.0)*gconst145);
IkReal x6826=(gconst145*r20);
IkReal x6827=(gconst146*r21);
IkReal x6828=(gconst146*x6824);
IkReal x6829=((1.0)*x6824);
IkReal x6830=(gconst146*x6823);
evalcond[0]=(((r20*x6830))+(((-1.0)*r22*x6829))+(((-1.0)*r21*x6823*x6825)));
evalcond[1]=((((-1.0)*r12*x6829))+((r10*x6830))+cj12+(((-1.0)*r11*x6823*x6825)));
evalcond[2]=((((-1.0)*r02*x6829))+((r00*x6830))+(((-1.0)*r01*x6823*x6825))+(((-1.0)*sj12)));
evalcond[3]=((((-1.0)*cj13*cj14))+((r22*x6823))+((r20*x6828))+((sj13*sj14))+(((-1.0)*r21*x6824*x6825)));
evalcond[4]=(((r02*x6823))+((r00*x6828))+((cj12*x6827))+((cj12*x6826))+(((-1.0)*r01*x6824*x6825)));
evalcond[5]=(((r10*x6828))+((r12*x6823))+(((-1.0)*r11*x6824*x6825))+((sj12*x6827))+((sj12*x6826)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x6831=IKPowWithIntegerCheck(IKsign((((gconst145*r10))+((gconst146*r11)))),-1);
if(!x6831.valid){
continue;
}
CheckValue<IkReal> x6832 = IKatan2WithCheck(IkReal((((gconst146*r20*sj12))+(((-1.0)*gconst145*r21*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6832.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6831.value)))+(x6832.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x6833=IKcos(j16);
IkReal x6834=IKsin(j16);
IkReal x6835=((1.0)*gconst145);
IkReal x6836=(gconst145*r20);
IkReal x6837=(gconst146*r21);
IkReal x6838=(gconst146*x6834);
IkReal x6839=((1.0)*x6834);
IkReal x6840=(gconst146*x6833);
evalcond[0]=((((-1.0)*r21*x6833*x6835))+(((-1.0)*r22*x6839))+((r20*x6840)));
evalcond[1]=((((-1.0)*r12*x6839))+cj12+(((-1.0)*r11*x6833*x6835))+((r10*x6840)));
evalcond[2]=((((-1.0)*r01*x6833*x6835))+(((-1.0)*r02*x6839))+(((-1.0)*sj12))+((r00*x6840)));
evalcond[3]=((((-1.0)*cj13*cj14))+((r22*x6833))+((r20*x6838))+((sj13*sj14))+(((-1.0)*r21*x6834*x6835)));
evalcond[4]=(((r02*x6833))+(((-1.0)*r01*x6834*x6835))+((cj12*x6836))+((cj12*x6837))+((r00*x6838)));
evalcond[5]=(((r10*x6838))+((r12*x6833))+((sj12*x6836))+((sj12*x6837))+(((-1.0)*r11*x6834*x6835)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6842 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6842)==0){
continue;
}
IkReal x6841=pow(x6842,-0.5);
CheckValue<IkReal> x6843 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6843.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x6843.value))));
IkReal gconst148=((1.0)*r01*x6841);
IkReal gconst149=((-1.0)*r00*x6841);
CheckValue<IkReal> x6844 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6844.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6844.value)+j17)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[5];
CheckValue<IkReal> x6847 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6847.valid){
continue;
}
IkReal x6845=((1.0)*(x6847.value));
IkReal x6846=x6841;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
sj17=gconst148;
cj17=gconst149;
j17=((3.14159265)+(((-1.0)*x6845)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x6845)));
IkReal gconst148=((1.0)*r01*x6846);
IkReal gconst149=((-1.0)*r00*x6846);
j16eval[0]=0;
j16eval[1]=cj12;
j16eval[2]=r22;
j16eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j16eval[4]=0;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  || IKabs(j16eval[3]) < 0.0000010000000000  || IKabs(j16eval[4]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
CheckValue<IkReal> x6850 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6850.valid){
continue;
}
IkReal x6848=((1.0)*(x6850.value));
IkReal x6849=x6841;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
sj17=gconst148;
cj17=gconst149;
j17=((3.14159265)+(((-1.0)*x6848)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x6848)));
IkReal gconst148=((1.0)*r01*x6849);
IkReal gconst149=((-1.0)*r00*x6849);
j16eval[0]=r22;
j16eval[1]=sj12;
j16eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x6853 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6853.valid){
continue;
}
IkReal x6851=((1.0)*(x6853.value));
IkReal x6852=x6841;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
sj17=gconst148;
cj17=gconst149;
j17=((3.14159265)+(((-1.0)*x6851)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x6851)));
IkReal gconst148=((1.0)*r01*x6852);
IkReal gconst149=((-1.0)*r00*x6852);
IkReal x6854=r02*r02;
IkReal x6855=(r12*sj12);
IkReal x6856=x6841;
IkReal x6857=(cj12*x6856);
j16eval[0]=((IKabs((((r02*x6855*x6856))+(((-1.0)*x6857))+((x6854*x6857)))))+(IKabs(((((-1.0)*cj12*r02))+(((-1.0)*x6855))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x6858=((1.0)*gconst149);
CheckValue<IkReal> x6859 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*r00*x6858))+((gconst148*r11*sj12))+((cj12*gconst148*r01))+(((-1.0)*r10*sj12*x6858)))),IkReal(((((-1.0)*cj12*r02))+(((-1.0)*r12*sj12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6859.valid){
continue;
}
CheckValue<IkReal> x6860=IKPowWithIntegerCheck(IKsign((((gconst148*r20))+((gconst149*r21)))),-1);
if(!x6860.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x6859.value)+(((1.5707963267949)*(x6860.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x6861=IKcos(j16);
IkReal x6862=IKsin(j16);
IkReal x6863=(gconst149*r21);
IkReal x6864=((1.0)*gconst148);
IkReal x6865=(gconst148*r20);
IkReal x6866=(gconst149*x6862);
IkReal x6867=(gconst149*x6861);
IkReal x6868=((1.0)*x6862);
evalcond[0]=((((-1.0)*r21*x6861*x6864))+(((-1.0)*r22*x6868))+((r20*x6867)));
evalcond[1]=(cj12+(((-1.0)*r12*x6868))+(((-1.0)*r11*x6861*x6864))+((r10*x6867)));
evalcond[2]=((((-1.0)*r01*x6861*x6864))+(((-1.0)*sj12))+(((-1.0)*r02*x6868))+((r00*x6867)));
evalcond[3]=((((-1.0)*cj13*cj14))+((r22*x6861))+((sj13*sj14))+(((-1.0)*r21*x6862*x6864))+((r20*x6866)));
evalcond[4]=(((r02*x6861))+(((-1.0)*r01*x6862*x6864))+((cj12*x6863))+((cj12*x6865))+((r00*x6866)));
evalcond[5]=(((r12*x6861))+(((-1.0)*r11*x6862*x6864))+((sj12*x6863))+((sj12*x6865))+((r10*x6866)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x6869 = IKatan2WithCheck(IkReal((((gconst149*r20*sj12))+(((-1.0)*gconst148*r21*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6869.valid){
continue;
}
CheckValue<IkReal> x6870=IKPowWithIntegerCheck(IKsign((((gconst148*r10))+((gconst149*r11)))),-1);
if(!x6870.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x6869.value)+(((1.5707963267949)*(x6870.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x6871=IKcos(j16);
IkReal x6872=IKsin(j16);
IkReal x6873=(gconst149*r21);
IkReal x6874=((1.0)*gconst148);
IkReal x6875=(gconst148*r20);
IkReal x6876=(gconst149*x6872);
IkReal x6877=(gconst149*x6871);
IkReal x6878=((1.0)*x6872);
evalcond[0]=((((-1.0)*r22*x6878))+(((-1.0)*r21*x6871*x6874))+((r20*x6877)));
evalcond[1]=((((-1.0)*r11*x6871*x6874))+cj12+(((-1.0)*r12*x6878))+((r10*x6877)));
evalcond[2]=((((-1.0)*sj12))+(((-1.0)*r02*x6878))+(((-1.0)*r01*x6871*x6874))+((r00*x6877)));
evalcond[3]=((((-1.0)*cj13*cj14))+(((-1.0)*r21*x6872*x6874))+((r22*x6871))+((sj13*sj14))+((r20*x6876)));
evalcond[4]=(((r02*x6871))+(((-1.0)*r01*x6872*x6874))+((cj12*x6873))+((cj12*x6875))+((r00*x6876)));
evalcond[5]=((((-1.0)*r11*x6872*x6874))+((r12*x6871))+((sj12*x6873))+((sj12*x6875))+((r10*x6876)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x6879=IKPowWithIntegerCheck(IKsign((((gconst148*r00))+((gconst149*r01)))),-1);
if(!x6879.valid){
continue;
}
CheckValue<IkReal> x6880 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*gconst148*r21))+((cj12*gconst149*r20)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6880.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6879.value)))+(x6880.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x6881=IKcos(j16);
IkReal x6882=IKsin(j16);
IkReal x6883=(gconst149*r21);
IkReal x6884=((1.0)*gconst148);
IkReal x6885=(gconst148*r20);
IkReal x6886=(gconst149*x6882);
IkReal x6887=(gconst149*x6881);
IkReal x6888=((1.0)*x6882);
evalcond[0]=(((r20*x6887))+(((-1.0)*r21*x6881*x6884))+(((-1.0)*r22*x6888)));
evalcond[1]=((((-1.0)*r11*x6881*x6884))+cj12+(((-1.0)*r12*x6888))+((r10*x6887)));
evalcond[2]=((((-1.0)*r02*x6888))+(((-1.0)*sj12))+(((-1.0)*r01*x6881*x6884))+((r00*x6887)));
evalcond[3]=((((-1.0)*cj13*cj14))+((r20*x6886))+(((-1.0)*r21*x6882*x6884))+((sj13*sj14))+((r22*x6881)));
evalcond[4]=(((r02*x6881))+(((-1.0)*r01*x6882*x6884))+((r00*x6886))+((cj12*x6885))+((cj12*x6883)));
evalcond[5]=(((sj12*x6883))+((sj12*x6885))+(((-1.0)*r11*x6882*x6884))+((r12*x6881))+((r10*x6886)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
sj12=1.0;
cj12=0;
j12=1.5707963267949;
IkReal x6889=(((cj17*r11))+((r10*sj17)));
j16eval[0]=x6889;
j16eval[1]=IKsign(x6889);
j16eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*r21*sj17))+((cj17*r20))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
sj12=1.0;
cj12=0;
j12=1.5707963267949;
IkReal x6890=((1.0)*sj17);
IkReal x6891=((((-1.0)*cj17*r21))+(((-1.0)*r20*x6890)));
j16eval[0]=x6891;
j16eval[1]=IKsign(x6891);
j16eval[2]=((IKabs(r12))+(IKabs((((cj17*r10))+(((-1.0)*r11*x6890))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
sj12=1.0;
cj12=0;
j12=1.5707963267949;
IkReal x6892=cj17*cj17;
IkReal x6893=r01*r01;
IkReal x6894=(r01*sj17);
IkReal x6895=(cj17*r00);
IkReal x6896=((((-1.0)*x6893))+(((-1.0)*x6892*(r00*r00)))+((x6892*x6893))+(((-1.0)*(r02*r02)))+(((2.0)*x6894*x6895)));
j16eval[0]=x6896;
j16eval[1]=IKsign(x6896);
j16eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x6895))+x6894))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x6897=cj17*cj17;
IkReal x6898=r01*r01;
IkReal x6899=(r01*sj17);
IkReal x6900=(cj17*r00);
CheckValue<IkReal> x6901=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6898))+(((-1.0)*(r02*r02)))+(((2.0)*x6899*x6900))+(((-1.0)*x6897*(r00*r00)))+((x6897*x6898)))),-1);
if(!x6901.valid){
continue;
}
CheckValue<IkReal> x6902 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x6900))+x6899)),IKFAST_ATAN2_MAGTHRESH);
if(!x6902.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6901.value)))+(x6902.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x6903=IKsin(j16);
IkReal x6904=IKcos(j16);
IkReal x6905=((1.0)*sj17);
IkReal x6906=(cj17*x6903);
IkReal x6907=(cj17*x6904);
IkReal x6908=((1.0)*x6903);
evalcond[0]=(((r00*x6906))+(((-1.0)*r01*x6903*x6905))+((r02*x6904)));
evalcond[1]=((((-1.0)*r22*x6908))+(((-1.0)*r21*x6904*x6905))+((r20*x6907)));
evalcond[2]=((((-1.0)*r12*x6908))+((r10*x6907))+(((-1.0)*r11*x6904*x6905)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x6908))+((r00*x6907))+(((-1.0)*r01*x6904*x6905)));
evalcond[4]=((((-1.0)*r11*x6903*x6905))+((r20*sj17))+((r10*x6906))+((cj17*r21))+((r12*x6904)));
evalcond[5]=((((-1.0)*cj13*cj14))+((r22*x6904))+((sj13*sj14))+((r20*x6906))+(((-1.0)*r21*x6903*x6905)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x6909=((1.0)*sj17);
CheckValue<IkReal> x6910 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x6909))+((cj17*r10)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x6910.valid){
continue;
}
CheckValue<IkReal> x6911=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj17*r21))+(((-1.0)*r20*x6909)))),-1);
if(!x6911.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x6910.value)+(((1.5707963267949)*(x6911.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x6912=IKsin(j16);
IkReal x6913=IKcos(j16);
IkReal x6914=((1.0)*sj17);
IkReal x6915=(cj17*x6912);
IkReal x6916=(cj17*x6913);
IkReal x6917=((1.0)*x6912);
evalcond[0]=(((r00*x6915))+(((-1.0)*r01*x6912*x6914))+((r02*x6913)));
evalcond[1]=((((-1.0)*r22*x6917))+((r20*x6916))+(((-1.0)*r21*x6913*x6914)));
evalcond[2]=((((-1.0)*r11*x6913*x6914))+((r10*x6916))+(((-1.0)*r12*x6917)));
evalcond[3]=((-1.0)+((r00*x6916))+(((-1.0)*r01*x6913*x6914))+(((-1.0)*r02*x6917)));
evalcond[4]=((((-1.0)*r11*x6912*x6914))+((r20*sj17))+((r10*x6915))+((r12*x6913))+((cj17*r21)));
evalcond[5]=((((-1.0)*cj13*cj14))+(((-1.0)*r21*x6912*x6914))+((r22*x6913))+((sj13*sj14))+((r20*x6915)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x6918 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj17))+((cj17*r20)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x6918.valid){
continue;
}
CheckValue<IkReal> x6919=IKPowWithIntegerCheck(IKsign((((cj17*r11))+((r10*sj17)))),-1);
if(!x6919.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x6918.value)+(((1.5707963267949)*(x6919.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x6920=IKsin(j16);
IkReal x6921=IKcos(j16);
IkReal x6922=((1.0)*sj17);
IkReal x6923=(cj17*x6920);
IkReal x6924=(cj17*x6921);
IkReal x6925=((1.0)*x6920);
evalcond[0]=(((r00*x6923))+(((-1.0)*r01*x6920*x6922))+((r02*x6921)));
evalcond[1]=(((r20*x6924))+(((-1.0)*r22*x6925))+(((-1.0)*r21*x6921*x6922)));
evalcond[2]=((((-1.0)*r11*x6921*x6922))+((r10*x6924))+(((-1.0)*r12*x6925)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x6925))+((r00*x6924))+(((-1.0)*r01*x6921*x6922)));
evalcond[4]=((((-1.0)*r11*x6920*x6922))+((r20*sj17))+((r10*x6923))+((cj17*r21))+((r12*x6921)));
evalcond[5]=(((r20*x6923))+(((-1.0)*cj13*cj14))+((r22*x6921))+((sj13*sj14))+(((-1.0)*r21*x6920*x6922)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
IkReal x6926=(((r20*sj17))+((cj17*r21)));
j16eval[0]=x6926;
j16eval[1]=IKsign(x6926);
j16eval[2]=((IKabs(r12))+(IKabs((((cj17*r10))+(((-1.0)*r11*sj17))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
IkReal x6927=((1.0)*sj17);
IkReal x6928=((((-1.0)*cj17*r11))+(((-1.0)*r10*x6927)));
j16eval[0]=x6928;
j16eval[1]=IKsign(x6928);
j16eval[2]=((IKabs(r22))+(IKabs((((cj17*r20))+(((-1.0)*r21*x6927))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
IkReal x6929=cj17*cj17;
IkReal x6930=r01*r01;
IkReal x6931=(cj17*r00);
IkReal x6932=(r01*sj17);
IkReal x6933=(((x6929*(r00*r00)))+(((-2.0)*x6931*x6932))+x6930+(r02*r02)+(((-1.0)*x6929*x6930)));
j16eval[0]=x6933;
j16eval[1]=IKsign(x6933);
j16eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x6931))+x6932))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x6934=cj17*cj17;
IkReal x6935=r01*r01;
IkReal x6936=(r01*sj17);
IkReal x6937=(cj17*r00);
CheckValue<IkReal> x6938=IKPowWithIntegerCheck(IKsign((((x6934*(r00*r00)))+(((-1.0)*x6934*x6935))+(((-2.0)*x6936*x6937))+x6935+(r02*r02))),-1);
if(!x6938.valid){
continue;
}
CheckValue<IkReal> x6939 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x6937))+x6936)),IKFAST_ATAN2_MAGTHRESH);
if(!x6939.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6938.value)))+(x6939.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x6940=IKsin(j16);
IkReal x6941=IKcos(j16);
IkReal x6942=((1.0)*r21);
IkReal x6943=((1.0)*r01);
IkReal x6944=(cj17*x6940);
IkReal x6945=(cj17*x6941);
IkReal x6946=((1.0)*r11*sj17);
IkReal x6947=(sj17*x6940);
IkReal x6948=((1.0)*x6940);
IkReal x6949=(sj17*x6941);
evalcond[0]=((((-1.0)*x6943*x6947))+((r02*x6941))+((r00*x6944)));
evalcond[1]=((((-1.0)*x6942*x6949))+((r20*x6945))+(((-1.0)*r22*x6948)));
evalcond[2]=(((r10*x6945))+(((-1.0)*r12*x6948))+(((-1.0)*x6941*x6946)));
evalcond[3]=((1.0)+(((-1.0)*x6943*x6949))+(((-1.0)*r02*x6948))+((r00*x6945)));
evalcond[4]=((((-1.0)*cj13*cj14))+((r22*x6941))+(((-1.0)*x6942*x6947))+((r20*x6944))+((sj13*sj14)));
evalcond[5]=(((r10*x6944))+(((-1.0)*r20*sj17))+(((-1.0)*cj17*x6942))+(((-1.0)*x6940*x6946))+((r12*x6941)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x6950=((1.0)*sj17);
CheckValue<IkReal> x6951 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x6950))+((cj17*r20)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x6951.valid){
continue;
}
CheckValue<IkReal> x6952=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj17*r11))+(((-1.0)*r10*x6950)))),-1);
if(!x6952.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x6951.value)+(((1.5707963267949)*(x6952.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x6953=IKsin(j16);
IkReal x6954=IKcos(j16);
IkReal x6955=((1.0)*r21);
IkReal x6956=((1.0)*r01);
IkReal x6957=(cj17*x6953);
IkReal x6958=(cj17*x6954);
IkReal x6959=((1.0)*r11*sj17);
IkReal x6960=(sj17*x6953);
IkReal x6961=((1.0)*x6953);
IkReal x6962=(sj17*x6954);
evalcond[0]=(((r02*x6954))+((r00*x6957))+(((-1.0)*x6956*x6960)));
evalcond[1]=(((r20*x6958))+(((-1.0)*r22*x6961))+(((-1.0)*x6955*x6962)));
evalcond[2]=(((r10*x6958))+(((-1.0)*r12*x6961))+(((-1.0)*x6954*x6959)));
evalcond[3]=((1.0)+(((-1.0)*r02*x6961))+((r00*x6958))+(((-1.0)*x6956*x6962)));
evalcond[4]=((((-1.0)*cj13*cj14))+((r22*x6954))+((r20*x6957))+((sj13*sj14))+(((-1.0)*x6955*x6960)));
evalcond[5]=(((r10*x6957))+(((-1.0)*cj17*x6955))+(((-1.0)*r20*sj17))+((r12*x6954))+(((-1.0)*x6953*x6959)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x6963 = IKatan2WithCheck(IkReal((((cj17*r10))+(((-1.0)*r11*sj17)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x6963.valid){
continue;
}
CheckValue<IkReal> x6964=IKPowWithIntegerCheck(IKsign((((r20*sj17))+((cj17*r21)))),-1);
if(!x6964.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x6963.value)+(((1.5707963267949)*(x6964.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x6965=IKsin(j16);
IkReal x6966=IKcos(j16);
IkReal x6967=((1.0)*r21);
IkReal x6968=((1.0)*r01);
IkReal x6969=(cj17*x6965);
IkReal x6970=(cj17*x6966);
IkReal x6971=((1.0)*r11*sj17);
IkReal x6972=(sj17*x6965);
IkReal x6973=((1.0)*x6965);
IkReal x6974=(sj17*x6966);
evalcond[0]=(((r00*x6969))+(((-1.0)*x6968*x6972))+((r02*x6966)));
evalcond[1]=((((-1.0)*x6967*x6974))+(((-1.0)*r22*x6973))+((r20*x6970)));
evalcond[2]=((((-1.0)*r12*x6973))+(((-1.0)*x6966*x6971))+((r10*x6970)));
evalcond[3]=((1.0)+(((-1.0)*r02*x6973))+((r00*x6970))+(((-1.0)*x6968*x6974)));
evalcond[4]=((((-1.0)*cj13*cj14))+((r22*x6966))+(((-1.0)*x6967*x6972))+((sj13*sj14))+((r20*x6969)));
evalcond[5]=((((-1.0)*cj17*x6967))+((r10*x6969))+(((-1.0)*x6965*x6971))+(((-1.0)*r20*sj17))+((r12*x6966)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
IkReal x6975=((-1.0)*px);
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6975);
rxp1_1=(px*r21);
rxp1_2=(r11*x6975);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j16eval[0]=r02;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
IkReal x6976=((-1.0)*px);
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6976);
rxp1_1=(px*r21);
rxp1_2=(r11*x6976);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j16eval[0]=((((-1.0)*r21*sj17))+((cj17*r20)));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
CheckValue<IkReal> x6978=IKPowWithIntegerCheck(((((-1.0)*r21*sj17))+((cj17*r20))),-1);
if(!x6978.valid){
continue;
}
IkReal x6977=x6978.value;
sj16array[0]=((((-1.0)*sj13*sj14*x6977))+((cj13*cj14*x6977)));
if( sj16array[0] >= -1-IKFAST_SINCOS_THRESH && sj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKasin(sj16array[0]);
    cj16array[0] = IKcos(j16array[0]);
    sj16array[1] = sj16array[0];
    j16array[1] = j16array[0] > 0 ? (IKPI-j16array[0]) : (-IKPI-j16array[0]);
    cj16array[1] = -cj16array[0];
}
else if( isnan(sj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x6979=IKcos(j16);
IkReal x6980=(cj17*x6979);
IkReal x6981=((1.0)*sj17*x6979);
evalcond[0]=(r02*x6979);
evalcond[1]=((((-1.0)*r02*(IKsin(j16))))+(((-1.0)*sj12)));
evalcond[2]=((((-1.0)*r21*x6981))+((r20*x6980)));
evalcond[3]=(((r10*x6980))+(((-1.0)*r11*x6981)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
CheckValue<IkReal> x6982=IKPowWithIntegerCheck(r02,-1);
if(!x6982.valid){
continue;
}
sj16array[0]=((-1.0)*sj12*(x6982.value));
if( sj16array[0] >= -1-IKFAST_SINCOS_THRESH && sj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKasin(sj16array[0]);
    cj16array[0] = IKcos(j16array[0]);
    sj16array[1] = sj16array[0];
    j16array[1] = j16array[0] > 0 ? (IKPI-j16array[0]) : (-IKPI-j16array[0]);
    cj16array[1] = -cj16array[0];
}
else if( isnan(sj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x6983=IKcos(j16);
IkReal x6984=IKsin(j16);
IkReal x6985=(cj17*x6983);
IkReal x6986=((1.0)*sj17*x6983);
evalcond[0]=(r02*x6983);
evalcond[1]=((((-1.0)*r21*x6986))+((r20*x6985)));
evalcond[2]=(((r10*x6985))+(((-1.0)*r11*x6986)));
evalcond[3]=((((-1.0)*cj13*cj14))+(((-1.0)*r21*sj17*x6984))+((sj13*sj14))+((cj17*r20*x6984)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j16]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x6987=((1.0)*cj12);
IkReal x6988=((1.0)*sj12);
CheckValue<IkReal> x6989 = IKatan2WithCheck(IkReal((((cj12*r01*sj17))+(((-1.0)*cj17*r10*x6988))+((r11*sj12*sj17))+(((-1.0)*cj17*r00*x6987)))),IkReal(((((-1.0)*r12*x6988))+(((-1.0)*r02*x6987)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6989.valid){
continue;
}
CheckValue<IkReal> x6990=IKPowWithIntegerCheck(IKsign((((r20*sj17))+((cj17*r21)))),-1);
if(!x6990.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x6989.value)+(((1.5707963267949)*(x6990.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x6991=IKcos(j16);
IkReal x6992=IKsin(j16);
IkReal x6993=(cj17*r21);
IkReal x6994=(r20*sj17);
IkReal x6995=(r21*sj17);
IkReal x6996=(r11*sj17);
IkReal x6997=(r01*sj17);
IkReal x6998=(cj17*x6992);
IkReal x6999=(cj17*x6991);
IkReal x7000=((1.0)*x6992);
IkReal x7001=((1.0)*x6991);
evalcond[0]=((((-1.0)*r22*x7000))+((r20*x6999))+(((-1.0)*x6995*x7001)));
evalcond[1]=((((-1.0)*r12*x7000))+((r10*x6999))+cj12+(((-1.0)*x6996*x7001)));
evalcond[2]=((((-1.0)*r02*x7000))+(((-1.0)*sj12))+((r00*x6999))+(((-1.0)*x6997*x7001)));
evalcond[3]=((((-1.0)*cj13*cj14))+((r20*x6998))+((sj13*sj14))+((r22*x6991))+(((-1.0)*x6995*x7000)));
evalcond[4]=(((r02*x6991))+((r00*x6998))+((cj12*x6993))+((cj12*x6994))+(((-1.0)*x6997*x7000)));
evalcond[5]=(((r12*x6991))+((r10*x6998))+((sj12*x6993))+((sj12*x6994))+(((-1.0)*x6996*x7000)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x7002=IKPowWithIntegerCheck(IKsign((((cj17*r11))+((r10*sj17)))),-1);
if(!x7002.valid){
continue;
}
CheckValue<IkReal> x7003 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x7003.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7002.value)))+(x7003.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x7004=IKcos(j16);
IkReal x7005=IKsin(j16);
IkReal x7006=(cj17*r21);
IkReal x7007=(r20*sj17);
IkReal x7008=(r21*sj17);
IkReal x7009=(r11*sj17);
IkReal x7010=(r01*sj17);
IkReal x7011=(cj17*x7005);
IkReal x7012=(cj17*x7004);
IkReal x7013=((1.0)*x7005);
IkReal x7014=((1.0)*x7004);
evalcond[0]=((((-1.0)*r22*x7013))+(((-1.0)*x7008*x7014))+((r20*x7012)));
evalcond[1]=((((-1.0)*x7009*x7014))+cj12+(((-1.0)*r12*x7013))+((r10*x7012)));
evalcond[2]=((((-1.0)*x7010*x7014))+(((-1.0)*sj12))+((r00*x7012))+(((-1.0)*r02*x7013)));
evalcond[3]=((((-1.0)*cj13*cj14))+(((-1.0)*x7008*x7013))+((sj13*sj14))+((r20*x7011))+((r22*x7004)));
evalcond[4]=((((-1.0)*x7010*x7013))+((cj12*x7006))+((cj12*x7007))+((r02*x7004))+((r00*x7011)));
evalcond[5]=((((-1.0)*x7009*x7013))+((r12*x7004))+((sj12*x7006))+((sj12*x7007))+((r10*x7011)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x7015 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7015.valid){
continue;
}
CheckValue<IkReal> x7016=IKPowWithIntegerCheck(IKsign((((r00*sj17))+((cj17*r01)))),-1);
if(!x7016.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x7015.value)+(((1.5707963267949)*(x7016.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x7017=IKcos(j16);
IkReal x7018=IKsin(j16);
IkReal x7019=(cj17*r21);
IkReal x7020=(r20*sj17);
IkReal x7021=(r21*sj17);
IkReal x7022=(r11*sj17);
IkReal x7023=(r01*sj17);
IkReal x7024=(cj17*x7018);
IkReal x7025=(cj17*x7017);
IkReal x7026=((1.0)*x7018);
IkReal x7027=((1.0)*x7017);
evalcond[0]=((((-1.0)*r22*x7026))+(((-1.0)*x7021*x7027))+((r20*x7025)));
evalcond[1]=((((-1.0)*r12*x7026))+((r10*x7025))+cj12+(((-1.0)*x7022*x7027)));
evalcond[2]=(((r00*x7025))+(((-1.0)*r02*x7026))+(((-1.0)*sj12))+(((-1.0)*x7023*x7027)));
evalcond[3]=((((-1.0)*cj13*cj14))+(((-1.0)*x7021*x7026))+((r22*x7017))+((r20*x7024))+((sj13*sj14)));
evalcond[4]=(((r02*x7017))+((cj12*x7019))+((r00*x7024))+((cj12*x7020))+(((-1.0)*x7023*x7026)));
evalcond[5]=(((sj12*x7019))+((r10*x7024))+((sj12*x7020))+(((-1.0)*x7022*x7026))+((r12*x7017)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x7028=cj17*cj17;
IkReal x7029=r21*r21;
IkReal x7030=(r21*sj17);
IkReal x7031=(sj13*sj14);
IkReal x7032=(cj17*r20);
IkReal x7033=((1.0)*cj13*cj14);
CheckValue<IkReal> x7034 = IKatan2WithCheck(IkReal(((((-1.0)*x7032*x7033))+((cj13*cj14*x7030))+((x7031*x7032))+(((-1.0)*x7030*x7031)))),IkReal(((((-1.0)*r22*x7033))+((r22*x7031)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7034.valid){
continue;
}
CheckValue<IkReal> x7035=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7029))+(((-1.0)*x7028*(r20*r20)))+(((-1.0)*(r22*r22)))+(((2.0)*x7030*x7032))+((x7028*x7029)))),-1);
if(!x7035.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x7034.value)+(((1.5707963267949)*(x7035.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[2];
IkReal x7036=IKcos(j16);
IkReal x7037=IKsin(j16);
IkReal x7038=(cj17*r20);
IkReal x7039=(r21*sj17);
IkReal x7040=((1.0)*x7037);
evalcond[0]=((((-1.0)*r22*x7040))+(((-1.0)*x7036*x7039))+((x7036*x7038)));
evalcond[1]=((((-1.0)*cj13*cj14))+((x7037*x7038))+((sj13*sj14))+(((-1.0)*x7039*x7040))+((r22*x7036)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x7041=(cj16*sj17);
IkReal x7042=(cj16*cj17);
if( IKabs((((r00*x7042))+(((-1.0)*r01*x7041))+(((-1.0)*r02*sj16)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r12*sj16))+((r11*x7041))+(((-1.0)*r10*x7042)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x7042))+(((-1.0)*r01*x7041))+(((-1.0)*r02*sj16))))+IKsqr((((r12*sj16))+((r11*x7041))+(((-1.0)*r10*x7042))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2((((r00*x7042))+(((-1.0)*r01*x7041))+(((-1.0)*r02*sj16))), (((r12*sj16))+((r11*x7041))+(((-1.0)*r10*x7042))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x7043=IKcos(j12);
IkReal x7044=IKsin(j12);
IkReal x7045=((1.0)*sj16);
IkReal x7046=(r10*sj17);
IkReal x7047=((1.0)*r11);
IkReal x7048=(cj16*sj17);
IkReal x7049=(r20*sj17);
IkReal x7050=((1.0)*sj14);
IkReal x7051=(cj17*r01);
IkReal x7052=(r00*sj17);
IkReal x7053=((0.39225)*sj14);
IkReal x7054=(cj17*r21);
IkReal x7055=(cj17*r10);
IkReal x7056=(cj17*r00);
IkReal x7057=((0.39225)*cj14);
IkReal x7058=(sj13*x7043);
IkReal x7059=(cj13*x7044);
IkReal x7060=(cj13*x7043);
IkReal x7061=(sj13*x7044);
evalcond[0]=(x7043+(((-1.0)*r12*x7045))+((cj16*x7055))+(((-1.0)*x7047*x7048)));
evalcond[1]=((((-1.0)*r02*x7045))+(((-1.0)*x7044))+((cj16*x7056))+(((-1.0)*r01*x7048)));
evalcond[2]=((((-1.0)*x7051))+(((-1.0)*x7052))+((cj14*x7060))+(((-1.0)*x7050*x7058)));
evalcond[3]=((((-1.0)*x7050*x7061))+(((-1.0)*x7046))+(((-1.0)*cj17*x7047))+((cj14*x7059)));
evalcond[4]=(((sj16*x7056))+((cj16*r02))+((x7043*x7049))+((x7043*x7054))+(((-1.0)*r01*sj17*x7045)));
evalcond[5]=(((sj16*x7055))+((cj16*r12))+((x7044*x7054))+(((-1.0)*r11*sj17*x7045))+((x7044*x7049)));
evalcond[6]=((((-0.09465)*x7052))+(((-0.09465)*x7051))+((x7053*x7060))+(((-1.0)*px))+(((-0.10915)*x7044))+(((0.425)*x7058))+((x7057*x7058)));
evalcond[7]=((((-0.09465)*cj17*r11))+(((-0.09465)*x7046))+((x7057*x7061))+(((0.425)*x7061))+(((-1.0)*py))+(((0.10915)*x7043))+((x7053*x7059)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x7062=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj13*sj14))+((cj13*cj14)))),-1);
if(!x7062.valid){
continue;
}
CheckValue<IkReal> x7063 = IKatan2WithCheck(IkReal((((cj17*r11))+((r10*sj17)))),IkReal((((r00*sj17))+((cj17*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7063.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7062.value)))+(x7063.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[4];
IkReal x7064=IKcos(j12);
IkReal x7065=IKsin(j12);
IkReal x7066=(r10*sj17);
IkReal x7067=((1.0)*sj13);
IkReal x7068=(cj17*r01);
IkReal x7069=(r00*sj17);
IkReal x7070=(cj17*r11);
IkReal x7071=((0.425)*sj13);
IkReal x7072=((0.39225)*sj13);
IkReal x7073=(cj13*x7065);
IkReal x7074=(sj14*x7064);
IkReal x7075=(cj14*x7064);
evalcond[0]=((((-1.0)*x7067*x7074))+(((-1.0)*x7068))+(((-1.0)*x7069))+((cj13*x7075)));
evalcond[1]=((((-1.0)*sj14*x7065*x7067))+((cj14*x7073))+(((-1.0)*x7070))+(((-1.0)*x7066)));
evalcond[2]=((((-0.10915)*x7065))+((x7072*x7075))+((x7064*x7071))+(((-1.0)*px))+(((0.39225)*cj13*x7074))+(((-0.09465)*x7069))+(((-0.09465)*x7068)));
evalcond[3]=((((0.10915)*x7064))+(((-1.0)*py))+(((0.39225)*sj14*x7073))+(((-0.09465)*x7070))+((x7065*x7071))+(((-0.09465)*x7066))+((cj14*x7065*x7072)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j16eval[3];
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
IkReal x7076=(((r00*sj17))+((cj17*r01)));
j16eval[0]=x7076;
j16eval[1]=((IKabs(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))))+(IKabs((cj12*r22))));
j16eval[2]=IKsign(x7076);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
IkReal x7077=(((cj17*r11))+((r10*sj17)));
j16eval[0]=x7077;
j16eval[1]=((IKabs((r22*sj12)))+(IKabs(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12))))));
j16eval[2]=IKsign(x7077);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
IkReal x7078=((1.0)*cj12);
IkReal x7079=((1.0)*sj12);
IkReal x7080=(((r20*sj17))+((cj17*r21)));
j16eval[0]=x7080;
j16eval[1]=IKsign(x7080);
j16eval[2]=((IKabs(((((-1.0)*r02*x7078))+(((-1.0)*r12*x7079)))))+(IKabs(((((-1.0)*cj17*r10*x7079))+((cj12*r01*sj17))+(((-1.0)*cj17*r00*x7078))+((r11*sj12*sj17))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7082 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7082)==0){
continue;
}
IkReal x7081=pow(x7082,-0.5);
CheckValue<IkReal> x7083 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7083.valid){
continue;
}
IkReal gconst132=((-1.0)*(x7083.value));
IkReal gconst133=((-1.0)*r21*x7081);
IkReal gconst134=(r20*x7081);
CheckValue<IkReal> x7084 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7084.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j17+(x7084.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x7087 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7087.valid){
continue;
}
IkReal x7085=((-1.0)*(x7087.value));
IkReal x7086=x7081;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
sj17=gconst133;
cj17=gconst134;
j17=x7085;
IkReal gconst132=x7085;
IkReal gconst133=((-1.0)*r21*x7086);
IkReal gconst134=(r20*x7086);
j16eval[0]=cj12;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x7090 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7090.valid){
continue;
}
IkReal x7088=((-1.0)*(x7090.value));
IkReal x7089=x7081;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
sj17=gconst133;
cj17=gconst134;
j17=x7088;
IkReal gconst132=x7088;
IkReal gconst133=((-1.0)*r21*x7089);
IkReal gconst134=(r20*x7089);
j16eval[0]=sj12;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
CheckValue<IkReal> x7093 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7093.valid){
continue;
}
IkReal x7091=((-1.0)*(x7093.value));
IkReal x7092=x7081;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
sj17=gconst133;
cj17=gconst134;
j17=x7091;
IkReal gconst132=x7091;
IkReal gconst133=((-1.0)*r21*x7092);
IkReal gconst134=(r20*x7092);
IkReal x7094=((1.0)*(r22*r22));
CheckValue<IkReal> x7098=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7094))),-1);
if(!x7098.valid){
continue;
}
IkReal x7095=x7098.value;
IkReal x7096=((1.0)*x7095);
IkReal x7097=((((-1.0)*x7094))+(((-1.0)*x7096*(r20*r20*r20*r20)))+(((-2.0)*x7095*(r20*r20)*(r21*r21)))+(((-1.0)*x7096*(r21*r21*r21*r21))));
j16eval[0]=x7097;
j16eval[1]=IKsign(x7097);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x7099=(gconst133*r21);
IkReal x7100=(gconst134*r20);
IkReal x7101=(cj13*cj14);
IkReal x7102=(sj13*sj14);
CheckValue<IkReal> x7103 = IKatan2WithCheck(IkReal((((x7100*x7102))+(((-1.0)*x7100*x7101))+((x7099*x7101))+(((-1.0)*x7099*x7102)))),IkReal((((r22*x7102))+(((-1.0)*r22*x7101)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7103.valid){
continue;
}
CheckValue<IkReal> x7104=IKPowWithIntegerCheck(IKsign(((((2.0)*x7099*x7100))+(((-1.0)*(x7099*x7099)))+(((-1.0)*(x7100*x7100)))+(((-1.0)*(r22*r22))))),-1);
if(!x7104.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x7103.value)+(((1.5707963267949)*(x7104.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x7105=IKcos(j16);
IkReal x7106=IKsin(j16);
IkReal x7107=((1.0)*gconst133);
IkReal x7108=(gconst134*r10);
IkReal x7109=(gconst134*r21);
IkReal x7110=(gconst134*r20);
IkReal x7111=(gconst134*r00);
IkReal x7112=(gconst133*r20);
IkReal x7113=((1.0)*x7106);
evalcond[0]=((((-1.0)*r21*x7105*x7107))+(((-1.0)*r22*x7113))+((x7105*x7110)));
evalcond[1]=((((-1.0)*r12*x7113))+cj12+(((-1.0)*r11*x7105*x7107))+((x7105*x7108)));
evalcond[2]=((((-1.0)*r02*x7113))+(((-1.0)*r01*x7105*x7107))+(((-1.0)*sj12))+((x7105*x7111)));
evalcond[3]=((((-1.0)*cj13*cj14))+(((-1.0)*r21*x7106*x7107))+((r22*x7105))+((x7106*x7110))+((sj13*sj14)));
evalcond[4]=(((r02*x7105))+((cj12*x7112))+((cj12*x7109))+((x7106*x7111))+(((-1.0)*r01*x7106*x7107)));
evalcond[5]=(((r12*x7105))+((x7106*x7108))+((sj12*x7112))+(((-1.0)*r11*x7106*x7107))+((sj12*x7109)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x7114 = IKatan2WithCheck(IkReal((((gconst134*r20*sj12))+(((-1.0)*gconst133*r21*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x7114.valid){
continue;
}
CheckValue<IkReal> x7115=IKPowWithIntegerCheck(IKsign((((gconst134*r11))+((gconst133*r10)))),-1);
if(!x7115.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x7114.value)+(((1.5707963267949)*(x7115.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x7116=IKcos(j16);
IkReal x7117=IKsin(j16);
IkReal x7118=((1.0)*gconst133);
IkReal x7119=(gconst134*r10);
IkReal x7120=(gconst134*r21);
IkReal x7121=(gconst134*r20);
IkReal x7122=(gconst134*r00);
IkReal x7123=(gconst133*r20);
IkReal x7124=((1.0)*x7117);
evalcond[0]=((((-1.0)*r22*x7124))+((x7116*x7121))+(((-1.0)*r21*x7116*x7118)));
evalcond[1]=(((x7116*x7119))+(((-1.0)*r11*x7116*x7118))+cj12+(((-1.0)*r12*x7124)));
evalcond[2]=((((-1.0)*r01*x7116*x7118))+((x7116*x7122))+(((-1.0)*sj12))+(((-1.0)*r02*x7124)));
evalcond[3]=((((-1.0)*cj13*cj14))+(((-1.0)*r21*x7117*x7118))+((r22*x7116))+((x7117*x7121))+((sj13*sj14)));
evalcond[4]=((((-1.0)*r01*x7117*x7118))+((r02*x7116))+((x7117*x7122))+((cj12*x7120))+((cj12*x7123)));
evalcond[5]=(((sj12*x7120))+((sj12*x7123))+((r12*x7116))+((x7117*x7119))+(((-1.0)*r11*x7117*x7118)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x7125 = IKatan2WithCheck(IkReal((((cj12*gconst134*r20))+(((-1.0)*cj12*gconst133*r21)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7125.valid){
continue;
}
CheckValue<IkReal> x7126=IKPowWithIntegerCheck(IKsign((((gconst134*r01))+((gconst133*r00)))),-1);
if(!x7126.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x7125.value)+(((1.5707963267949)*(x7126.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x7127=IKcos(j16);
IkReal x7128=IKsin(j16);
IkReal x7129=((1.0)*gconst133);
IkReal x7130=(gconst134*r10);
IkReal x7131=(gconst134*r21);
IkReal x7132=(gconst134*r20);
IkReal x7133=(gconst134*r00);
IkReal x7134=(gconst133*r20);
IkReal x7135=((1.0)*x7128);
evalcond[0]=(((x7127*x7132))+(((-1.0)*r22*x7135))+(((-1.0)*r21*x7127*x7129)));
evalcond[1]=((((-1.0)*r12*x7135))+((x7127*x7130))+cj12+(((-1.0)*r11*x7127*x7129)));
evalcond[2]=(((x7127*x7133))+(((-1.0)*r01*x7127*x7129))+(((-1.0)*sj12))+(((-1.0)*r02*x7135)));
evalcond[3]=((((-1.0)*cj13*cj14))+((sj13*sj14))+(((-1.0)*r21*x7128*x7129))+((r22*x7127))+((x7128*x7132)));
evalcond[4]=((((-1.0)*r01*x7128*x7129))+((r02*x7127))+((x7128*x7133))+((cj12*x7134))+((cj12*x7131)));
evalcond[5]=(((sj12*x7131))+((sj12*x7134))+(((-1.0)*r11*x7128*x7129))+((r12*x7127))+((x7128*x7130)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7137 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7137)==0){
continue;
}
IkReal x7136=pow(x7137,-0.5);
CheckValue<IkReal> x7138 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7138.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x7138.value))));
IkReal gconst136=((1.0)*r21*x7136);
IkReal gconst137=((-1.0)*r20*x7136);
CheckValue<IkReal> x7139 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7139.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j17+(x7139.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x7142 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7142.valid){
continue;
}
IkReal x7140=((1.0)*(x7142.value));
IkReal x7141=x7136;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
sj17=gconst136;
cj17=gconst137;
j17=((3.14159265)+(((-1.0)*x7140)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7140)));
IkReal gconst136=((1.0)*r21*x7141);
IkReal gconst137=((-1.0)*r20*x7141);
IkReal x7143=r22*r22;
IkReal x7144=((1.0)*x7143);
CheckValue<IkReal> x7148=IKPowWithIntegerCheck(((-1.0)+x7143),-1);
if(!x7148.valid){
continue;
}
IkReal x7145=x7148.value;
if((((1.0)+(((-1.0)*x7144)))) < -0.00001)
continue;
IkReal x7146=IKsqrt(((1.0)+(((-1.0)*x7144))));
IkReal x7147=(cj12*x7145*x7146);
j16eval[0]=((IKabs((x7147+(((-1.0)*x7144*x7147)))))+(IKabs((cj12*r22))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x7151 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7151.valid){
continue;
}
IkReal x7149=((1.0)*(x7151.value));
IkReal x7150=x7136;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
sj17=gconst136;
cj17=gconst137;
j17=((3.14159265)+(((-1.0)*x7149)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7149)));
IkReal gconst136=((1.0)*r21*x7150);
IkReal gconst137=((-1.0)*r20*x7150);
IkReal x7152=r22*r22;
IkReal x7153=((1.0)*x7152);
CheckValue<IkReal> x7157=IKPowWithIntegerCheck(((-1.0)+x7152),-1);
if(!x7157.valid){
continue;
}
IkReal x7154=x7157.value;
if((((1.0)+(((-1.0)*x7153)))) < -0.00001)
continue;
IkReal x7155=IKsqrt(((1.0)+(((-1.0)*x7153))));
IkReal x7156=(sj12*x7154*x7155);
j16eval[0]=((IKabs((r22*sj12)))+(IKabs((x7156+(((-1.0)*x7153*x7156))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
CheckValue<IkReal> x7160 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7160.valid){
continue;
}
IkReal x7158=((1.0)*(x7160.value));
IkReal x7159=x7136;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
sj17=gconst136;
cj17=gconst137;
j17=((3.14159265)+(((-1.0)*x7158)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7158)));
IkReal gconst136=((1.0)*r21*x7159);
IkReal gconst137=((-1.0)*r20*x7159);
IkReal x7161=r22*r22;
IkReal x7162=(cj12*r02);
IkReal x7163=(r12*sj12);
CheckValue<IkReal> x7167=IKPowWithIntegerCheck(((-1.0)+x7161),-1);
if(!x7167.valid){
continue;
}
IkReal x7164=x7167.value;
if((((1.0)+(((-1.0)*x7161)))) < -0.00001)
continue;
IkReal x7165=IKsqrt(((1.0)+(((-1.0)*x7161))));
IkReal x7166=(r22*x7164*x7165);
j16eval[0]=0;
j16eval[1]=((IKabs(((((-1.0)*x7163))+(((-1.0)*x7162)))))+(IKabs((((x7162*x7166))+((x7163*x7166))))));
j16eval[2]=0;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x7168=((1.0)*gconst137);
CheckValue<IkReal> x7169 = IKatan2WithCheck(IkReal(((((-1.0)*r10*sj12*x7168))+((gconst136*r11*sj12))+(((-1.0)*cj12*r00*x7168))+((cj12*gconst136*r01)))),IkReal(((((-1.0)*cj12*r02))+(((-1.0)*r12*sj12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7169.valid){
continue;
}
CheckValue<IkReal> x7170=IKPowWithIntegerCheck(IKsign((((gconst136*r20))+((gconst137*r21)))),-1);
if(!x7170.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x7169.value)+(((1.5707963267949)*(x7170.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x7171=IKcos(j16);
IkReal x7172=IKsin(j16);
IkReal x7173=(gconst136*r20);
IkReal x7174=(gconst137*r21);
IkReal x7175=((1.0)*x7172);
IkReal x7176=(gconst137*x7171);
IkReal x7177=(gconst137*x7172);
IkReal x7178=((1.0)*gconst136*x7171);
IkReal x7179=(gconst136*x7175);
evalcond[0]=((((-1.0)*r21*x7178))+(((-1.0)*r22*x7175))+((r20*x7176)));
evalcond[1]=((((-1.0)*r11*x7178))+((r10*x7176))+(((-1.0)*r12*x7175))+cj12);
evalcond[2]=((((-1.0)*r02*x7175))+(((-1.0)*sj12))+(((-1.0)*r01*x7178))+((r00*x7176)));
evalcond[3]=((((-1.0)*cj13*cj14))+(((-1.0)*r21*x7179))+((r22*x7171))+((sj13*sj14))+((r20*x7177)));
evalcond[4]=(((r02*x7171))+((cj12*x7173))+((cj12*x7174))+(((-1.0)*r01*x7179))+((r00*x7177)));
evalcond[5]=((((-1.0)*r11*x7179))+((r10*x7177))+((sj12*x7174))+((sj12*x7173))+((r12*x7171)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x7180=IKPowWithIntegerCheck(IKsign((((gconst137*r11))+((gconst136*r10)))),-1);
if(!x7180.valid){
continue;
}
CheckValue<IkReal> x7181 = IKatan2WithCheck(IkReal(((((-1.0)*gconst136*r21*sj12))+((gconst137*r20*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x7181.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7180.value)))+(x7181.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x7182=IKcos(j16);
IkReal x7183=IKsin(j16);
IkReal x7184=(gconst136*r20);
IkReal x7185=(gconst137*r21);
IkReal x7186=((1.0)*x7183);
IkReal x7187=(gconst137*x7182);
IkReal x7188=(gconst137*x7183);
IkReal x7189=((1.0)*gconst136*x7182);
IkReal x7190=(gconst136*x7186);
evalcond[0]=(((r20*x7187))+(((-1.0)*r21*x7189))+(((-1.0)*r22*x7186)));
evalcond[1]=(((r10*x7187))+cj12+(((-1.0)*r11*x7189))+(((-1.0)*r12*x7186)));
evalcond[2]=(((r00*x7187))+(((-1.0)*r01*x7189))+(((-1.0)*sj12))+(((-1.0)*r02*x7186)));
evalcond[3]=((((-1.0)*cj13*cj14))+((r20*x7188))+(((-1.0)*r21*x7190))+((sj13*sj14))+((r22*x7182)));
evalcond[4]=(((r00*x7188))+((r02*x7182))+(((-1.0)*r01*x7190))+((cj12*x7185))+((cj12*x7184)));
evalcond[5]=(((r12*x7182))+((r10*x7188))+(((-1.0)*r11*x7190))+((sj12*x7185))+((sj12*x7184)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x7191=IKPowWithIntegerCheck(IKsign((((gconst136*r00))+((gconst137*r01)))),-1);
if(!x7191.valid){
continue;
}
CheckValue<IkReal> x7192 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*gconst136*r21))+((cj12*gconst137*r20)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7192.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7191.value)))+(x7192.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x7193=IKcos(j16);
IkReal x7194=IKsin(j16);
IkReal x7195=(gconst136*r20);
IkReal x7196=(gconst137*r21);
IkReal x7197=((1.0)*x7194);
IkReal x7198=(gconst137*x7193);
IkReal x7199=(gconst137*x7194);
IkReal x7200=((1.0)*gconst136*x7193);
IkReal x7201=(gconst136*x7197);
evalcond[0]=((((-1.0)*r21*x7200))+((r20*x7198))+(((-1.0)*r22*x7197)));
evalcond[1]=(((r10*x7198))+cj12+(((-1.0)*r12*x7197))+(((-1.0)*r11*x7200)));
evalcond[2]=(((r00*x7198))+(((-1.0)*sj12))+(((-1.0)*r02*x7197))+(((-1.0)*r01*x7200)));
evalcond[3]=((((-1.0)*cj13*cj14))+(((-1.0)*r21*x7201))+((r20*x7199))+((sj13*sj14))+((r22*x7193)));
evalcond[4]=(((r00*x7199))+((cj12*x7196))+((cj12*x7195))+((r02*x7193))+(((-1.0)*r01*x7201)));
evalcond[5]=(((r12*x7193))+((r10*x7199))+((sj12*x7195))+((sj12*x7196))+(((-1.0)*r11*x7201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7203 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7203)==0){
continue;
}
IkReal x7202=pow(x7203,-0.5);
CheckValue<IkReal> x7204 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7204.valid){
continue;
}
IkReal gconst138=((-1.0)*(x7204.value));
IkReal gconst139=((-1.0)*r11*x7202);
IkReal gconst140=(r10*x7202);
CheckValue<IkReal> x7205 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7205.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7205.value)+j17)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
CheckValue<IkReal> x7208 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7208.valid){
continue;
}
IkReal x7206=((-1.0)*(x7208.value));
IkReal x7207=x7202;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
sj17=gconst139;
cj17=gconst140;
j17=x7206;
IkReal gconst138=x7206;
IkReal gconst139=((-1.0)*r11*x7207);
IkReal gconst140=(r10*x7207);
j16eval[0]=cj12;
j16eval[1]=r22;
j16eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x7209=((1.0)*sj12);
IkReal x7210=((1.0)*cj12);
CheckValue<IkReal> x7211=IKPowWithIntegerCheck(IKsign((((gconst139*r20))+((gconst140*r21)))),-1);
if(!x7211.valid){
continue;
}
CheckValue<IkReal> x7212 = IKatan2WithCheck(IkReal((((gconst139*r11*sj12))+(((-1.0)*gconst140*r10*x7209))+(((-1.0)*gconst140*r00*x7210))+((cj12*gconst139*r01)))),IkReal(((((-1.0)*r02*x7210))+(((-1.0)*r12*x7209)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7212.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7211.value)))+(x7212.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x7213=IKcos(j16);
IkReal x7214=IKsin(j16);
IkReal x7215=(gconst139*r20);
IkReal x7216=(gconst140*r21);
IkReal x7217=(gconst140*x7214);
IkReal x7218=(gconst140*x7213);
IkReal x7219=((1.0)*x7214);
IkReal x7220=(gconst139*x7219);
IkReal x7221=((1.0)*gconst139*x7213);
evalcond[0]=((((-1.0)*r21*x7221))+((r20*x7218))+(((-1.0)*r22*x7219)));
evalcond[1]=(((r10*x7218))+cj12+(((-1.0)*r12*x7219))+(((-1.0)*r11*x7221)));
evalcond[2]=(((r00*x7218))+(((-1.0)*r01*x7221))+(((-1.0)*sj12))+(((-1.0)*r02*x7219)));
evalcond[3]=((((-1.0)*cj13*cj14))+(((-1.0)*r21*x7220))+((r22*x7213))+((sj13*sj14))+((r20*x7217)));
evalcond[4]=(((r00*x7217))+((cj12*x7215))+((cj12*x7216))+(((-1.0)*r01*x7220))+((r02*x7213)));
evalcond[5]=(((r10*x7217))+((r12*x7213))+((sj12*x7216))+((sj12*x7215))+(((-1.0)*r11*x7220)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x7222=IKPowWithIntegerCheck(IKsign((((gconst140*r01))+((gconst139*r00)))),-1);
if(!x7222.valid){
continue;
}
CheckValue<IkReal> x7223 = IKatan2WithCheck(IkReal((((cj12*gconst140*r20))+(((-1.0)*cj12*gconst139*r21)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7223.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7222.value)))+(x7223.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x7224=IKcos(j16);
IkReal x7225=IKsin(j16);
IkReal x7226=(gconst139*r20);
IkReal x7227=(gconst140*r21);
IkReal x7228=(gconst140*x7225);
IkReal x7229=(gconst140*x7224);
IkReal x7230=((1.0)*x7225);
IkReal x7231=(gconst139*x7230);
IkReal x7232=((1.0)*gconst139*x7224);
evalcond[0]=(((r20*x7229))+(((-1.0)*r22*x7230))+(((-1.0)*r21*x7232)));
evalcond[1]=(((r10*x7229))+cj12+(((-1.0)*r11*x7232))+(((-1.0)*r12*x7230)));
evalcond[2]=(((r00*x7229))+(((-1.0)*sj12))+(((-1.0)*r02*x7230))+(((-1.0)*r01*x7232)));
evalcond[3]=((((-1.0)*cj13*cj14))+((r20*x7228))+((sj13*sj14))+((r22*x7224))+(((-1.0)*r21*x7231)));
evalcond[4]=(((r00*x7228))+((cj12*x7226))+((cj12*x7227))+((r02*x7224))+(((-1.0)*r01*x7231)));
evalcond[5]=(((r10*x7228))+((sj12*x7226))+((sj12*x7227))+(((-1.0)*r11*x7231))+((r12*x7224)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7234 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7234)==0){
continue;
}
IkReal x7233=pow(x7234,-0.5);
CheckValue<IkReal> x7235 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7235.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x7235.value))));
IkReal gconst142=((1.0)*r11*x7233);
IkReal gconst143=((-1.0)*r10*x7233);
CheckValue<IkReal> x7236 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7236.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7236.value)+j17)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
CheckValue<IkReal> x7239 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7239.valid){
continue;
}
IkReal x7237=((1.0)*(x7239.value));
IkReal x7238=x7233;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
sj17=gconst142;
cj17=gconst143;
j17=((3.14159265)+(((-1.0)*x7237)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7237)));
IkReal gconst142=((1.0)*r11*x7238);
IkReal gconst143=((-1.0)*r10*x7238);
j16eval[0]=cj12;
j16eval[1]=r22;
j16eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[5];
CheckValue<IkReal> x7242 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7242.valid){
continue;
}
IkReal x7240=((1.0)*(x7242.value));
IkReal x7241=x7233;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
sj17=gconst142;
cj17=gconst143;
j17=((3.14159265)+(((-1.0)*x7240)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7240)));
IkReal gconst142=((1.0)*r11*x7241);
IkReal gconst143=((-1.0)*r10*x7241);
j16eval[0]=0;
j16eval[1]=0;
j16eval[2]=r22;
j16eval[3]=sj12;
j16eval[4]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  || IKabs(j16eval[3]) < 0.0000010000000000  || IKabs(j16eval[4]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x7245 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7245.valid){
continue;
}
IkReal x7243=((1.0)*(x7245.value));
IkReal x7244=x7233;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
sj17=gconst142;
cj17=gconst143;
j17=((3.14159265)+(((-1.0)*x7243)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7243)));
IkReal gconst142=((1.0)*r11*x7244);
IkReal gconst143=((-1.0)*r10*x7244);
IkReal x7246=r12*r12;
IkReal x7247=(cj12*r02);
IkReal x7248=x7233;
IkReal x7249=(sj12*x7248);
j16eval[0]=((IKabs(((((-1.0)*x7247))+(((-1.0)*r12*sj12)))))+(IKabs(((((-1.0)*x7249))+((r12*x7247*x7248))+((x7246*x7249))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x7250=((1.0)*sj12);
IkReal x7251=((1.0)*cj12);
CheckValue<IkReal> x7252=IKPowWithIntegerCheck(IKsign((((gconst143*r21))+((gconst142*r20)))),-1);
if(!x7252.valid){
continue;
}
CheckValue<IkReal> x7253 = IKatan2WithCheck(IkReal(((((-1.0)*gconst143*r10*x7250))+((cj12*gconst142*r01))+(((-1.0)*gconst143*r00*x7251))+((gconst142*r11*sj12)))),IkReal(((((-1.0)*r12*x7250))+(((-1.0)*r02*x7251)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7253.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7252.value)))+(x7253.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x7254=IKcos(j16);
IkReal x7255=IKsin(j16);
IkReal x7256=(gconst142*r20);
IkReal x7257=(gconst143*r21);
IkReal x7258=((1.0)*gconst142*r21);
IkReal x7259=((1.0)*x7255);
IkReal x7260=(gconst143*x7254);
IkReal x7261=(gconst143*x7255);
IkReal x7262=((1.0)*gconst142*x7254);
evalcond[0]=((((-1.0)*r22*x7259))+(((-1.0)*x7254*x7258))+((r20*x7260)));
evalcond[1]=((((-1.0)*r12*x7259))+cj12+((r10*x7260))+(((-1.0)*r11*x7262)));
evalcond[2]=((((-1.0)*r01*x7262))+(((-1.0)*r02*x7259))+(((-1.0)*sj12))+((r00*x7260)));
evalcond[3]=((((-1.0)*cj13*cj14))+((r22*x7254))+(((-1.0)*x7255*x7258))+((sj13*sj14))+((r20*x7261)));
evalcond[4]=(((r02*x7254))+(((-1.0)*gconst142*r01*x7259))+((r00*x7261))+((cj12*x7256))+((cj12*x7257)));
evalcond[5]=(((sj12*x7257))+((sj12*x7256))+(((-1.0)*gconst142*r11*x7259))+((r12*x7254))+((r10*x7261)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x7263=IKPowWithIntegerCheck(IKsign((((gconst143*r11))+((gconst142*r10)))),-1);
if(!x7263.valid){
continue;
}
CheckValue<IkReal> x7264 = IKatan2WithCheck(IkReal(((((-1.0)*gconst142*r21*sj12))+((gconst143*r20*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x7264.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7263.value)))+(x7264.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x7265=IKcos(j16);
IkReal x7266=IKsin(j16);
IkReal x7267=(gconst142*r20);
IkReal x7268=(gconst143*r21);
IkReal x7269=((1.0)*gconst142*r21);
IkReal x7270=((1.0)*x7266);
IkReal x7271=(gconst143*x7265);
IkReal x7272=(gconst143*x7266);
IkReal x7273=((1.0)*gconst142*x7265);
evalcond[0]=((((-1.0)*r22*x7270))+((r20*x7271))+(((-1.0)*x7265*x7269)));
evalcond[1]=((((-1.0)*r11*x7273))+(((-1.0)*r12*x7270))+((r10*x7271))+cj12);
evalcond[2]=((((-1.0)*r02*x7270))+(((-1.0)*r01*x7273))+(((-1.0)*sj12))+((r00*x7271)));
evalcond[3]=((((-1.0)*cj13*cj14))+((r22*x7265))+(((-1.0)*x7266*x7269))+((r20*x7272))+((sj13*sj14)));
evalcond[4]=(((r02*x7265))+((r00*x7272))+(((-1.0)*gconst142*r01*x7270))+((cj12*x7267))+((cj12*x7268)));
evalcond[5]=(((r12*x7265))+(((-1.0)*gconst142*r11*x7270))+((sj12*x7267))+((sj12*x7268))+((r10*x7272)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x7274=IKPowWithIntegerCheck(IKsign((((gconst143*r01))+((gconst142*r00)))),-1);
if(!x7274.valid){
continue;
}
CheckValue<IkReal> x7275 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*gconst142*r21))+((cj12*gconst143*r20)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7275.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7274.value)))+(x7275.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x7276=IKcos(j16);
IkReal x7277=IKsin(j16);
IkReal x7278=(gconst142*r20);
IkReal x7279=(gconst143*r21);
IkReal x7280=((1.0)*gconst142*r21);
IkReal x7281=((1.0)*x7277);
IkReal x7282=(gconst143*x7276);
IkReal x7283=(gconst143*x7277);
IkReal x7284=((1.0)*gconst142*x7276);
evalcond[0]=((((-1.0)*x7276*x7280))+((r20*x7282))+(((-1.0)*r22*x7281)));
evalcond[1]=(cj12+(((-1.0)*r12*x7281))+(((-1.0)*r11*x7284))+((r10*x7282)));
evalcond[2]=((((-1.0)*r01*x7284))+(((-1.0)*sj12))+((r00*x7282))+(((-1.0)*r02*x7281)));
evalcond[3]=((((-1.0)*cj13*cj14))+(((-1.0)*x7277*x7280))+((sj13*sj14))+((r20*x7283))+((r22*x7276)));
evalcond[4]=((((-1.0)*gconst142*r01*x7281))+((cj12*x7279))+((cj12*x7278))+((r00*x7283))+((r02*x7276)));
evalcond[5]=(((r12*x7276))+(((-1.0)*gconst142*r11*x7281))+((r10*x7283))+((sj12*x7278))+((sj12*x7279)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j12))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
sj12=0;
cj12=1.0;
j12=0;
IkReal x7285=(((r00*sj17))+((cj17*r01)));
j16eval[0]=x7285;
j16eval[1]=IKsign(x7285);
j16eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*r21*sj17))+((cj17*r20))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
sj12=0;
cj12=1.0;
j12=0;
IkReal x7286=((1.0)*sj17);
IkReal x7287=((((-1.0)*cj17*r21))+(((-1.0)*r20*x7286)));
j16eval[0]=x7287;
j16eval[1]=IKsign(x7287);
j16eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x7286))+((cj17*r00))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
sj12=0;
cj12=1.0;
j12=0;
IkReal x7288=cj17*cj17;
IkReal x7289=r11*r11;
IkReal x7290=(r11*sj17);
IkReal x7291=(cj17*r10);
IkReal x7292=((r12*r12)+x7289+(((-2.0)*x7290*x7291))+((x7288*(r10*r10)))+(((-1.0)*x7288*x7289)));
j16eval[0]=x7292;
j16eval[1]=((IKabs(r12))+(IKabs((x7290+(((-1.0)*x7291))))));
j16eval[2]=IKsign(x7292);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x7293=cj17*cj17;
IkReal x7294=r11*r11;
IkReal x7295=(r11*sj17);
IkReal x7296=(cj17*r10);
CheckValue<IkReal> x7297=IKPowWithIntegerCheck(IKsign(((r12*r12)+x7294+((x7293*(r10*r10)))+(((-1.0)*x7293*x7294))+(((-2.0)*x7295*x7296)))),-1);
if(!x7297.valid){
continue;
}
CheckValue<IkReal> x7298 = IKatan2WithCheck(IkReal(r12),IkReal((x7295+(((-1.0)*x7296)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7298.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7297.value)))+(x7298.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x7299=IKsin(j16);
IkReal x7300=IKcos(j16);
IkReal x7301=((1.0)*sj17);
IkReal x7302=(cj17*x7299);
IkReal x7303=(cj17*x7300);
IkReal x7304=((1.0)*x7299);
evalcond[0]=(((r12*x7300))+((r10*x7302))+(((-1.0)*r11*x7299*x7301)));
evalcond[1]=((((-1.0)*r21*x7300*x7301))+((r20*x7303))+(((-1.0)*r22*x7304)));
evalcond[2]=((((-1.0)*r02*x7304))+((r00*x7303))+(((-1.0)*r01*x7300*x7301)));
evalcond[3]=((1.0)+((r10*x7303))+(((-1.0)*r11*x7300*x7301))+(((-1.0)*r12*x7304)));
evalcond[4]=(((r02*x7300))+((r20*sj17))+((cj17*r21))+((r00*x7302))+(((-1.0)*r01*x7299*x7301)));
evalcond[5]=((((-1.0)*cj13*cj14))+(((-1.0)*r21*x7299*x7301))+((r22*x7300))+((sj13*sj14))+((r20*x7302)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x7305=((1.0)*sj17);
CheckValue<IkReal> x7306 = IKatan2WithCheck(IkReal((((cj17*r00))+(((-1.0)*r01*x7305)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7306.valid){
continue;
}
CheckValue<IkReal> x7307=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj17*r21))+(((-1.0)*r20*x7305)))),-1);
if(!x7307.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x7306.value)+(((1.5707963267949)*(x7307.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x7308=IKsin(j16);
IkReal x7309=IKcos(j16);
IkReal x7310=((1.0)*sj17);
IkReal x7311=(cj17*x7308);
IkReal x7312=(cj17*x7309);
IkReal x7313=((1.0)*x7308);
evalcond[0]=(((r12*x7309))+((r10*x7311))+(((-1.0)*r11*x7308*x7310)));
evalcond[1]=((((-1.0)*r21*x7309*x7310))+((r20*x7312))+(((-1.0)*r22*x7313)));
evalcond[2]=(((r00*x7312))+(((-1.0)*r01*x7309*x7310))+(((-1.0)*r02*x7313)));
evalcond[3]=((1.0)+((r10*x7312))+(((-1.0)*r12*x7313))+(((-1.0)*r11*x7309*x7310)));
evalcond[4]=(((r02*x7309))+(((-1.0)*r01*x7308*x7310))+((r20*sj17))+((cj17*r21))+((r00*x7311)));
evalcond[5]=((((-1.0)*cj13*cj14))+((r22*x7309))+((r20*x7311))+((sj13*sj14))+(((-1.0)*r21*x7308*x7310)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x7314 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj17))+((cj17*r20)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x7314.valid){
continue;
}
CheckValue<IkReal> x7315=IKPowWithIntegerCheck(IKsign((((r00*sj17))+((cj17*r01)))),-1);
if(!x7315.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x7314.value)+(((1.5707963267949)*(x7315.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x7316=IKsin(j16);
IkReal x7317=IKcos(j16);
IkReal x7318=((1.0)*sj17);
IkReal x7319=(cj17*x7316);
IkReal x7320=(cj17*x7317);
IkReal x7321=((1.0)*x7316);
evalcond[0]=(((r12*x7317))+((r10*x7319))+(((-1.0)*r11*x7316*x7318)));
evalcond[1]=((((-1.0)*r22*x7321))+((r20*x7320))+(((-1.0)*r21*x7317*x7318)));
evalcond[2]=((((-1.0)*r01*x7317*x7318))+((r00*x7320))+(((-1.0)*r02*x7321)));
evalcond[3]=((1.0)+((r10*x7320))+(((-1.0)*r11*x7317*x7318))+(((-1.0)*r12*x7321)));
evalcond[4]=(((r02*x7317))+(((-1.0)*r01*x7316*x7318))+((r20*sj17))+((cj17*r21))+((r00*x7319)));
evalcond[5]=((((-1.0)*cj13*cj14))+((r22*x7317))+((r20*x7319))+((sj13*sj14))+(((-1.0)*r21*x7316*x7318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
IkReal x7322=(((r20*sj17))+((cj17*r21)));
j16eval[0]=x7322;
j16eval[1]=IKsign(x7322);
j16eval[2]=((IKabs(r02))+(IKabs((((cj17*r00))+(((-1.0)*r01*sj17))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
IkReal x7323=((1.0)*sj17);
IkReal x7324=((((-1.0)*cj17*r01))+(((-1.0)*r00*x7323)));
j16eval[0]=x7324;
j16eval[1]=IKsign(x7324);
j16eval[2]=((IKabs(((((-1.0)*r21*x7323))+((cj17*r20)))))+(IKabs(r22)));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
IkReal x7325=cj17*cj17;
IkReal x7326=r11*r11;
IkReal x7327=(r11*sj17);
IkReal x7328=(cj17*r10);
IkReal x7329=((((-1.0)*x7325*(r10*r10)))+(((-1.0)*x7326))+((x7325*x7326))+(((-1.0)*(r12*r12)))+(((2.0)*x7327*x7328)));
j16eval[0]=x7329;
j16eval[1]=((IKabs(r12))+(IKabs((x7327+(((-1.0)*x7328))))));
j16eval[2]=IKsign(x7329);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x7330=cj17*cj17;
IkReal x7331=r11*r11;
IkReal x7332=(r11*sj17);
IkReal x7333=(cj17*r10);
CheckValue<IkReal> x7334=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7331))+((x7330*x7331))+(((-1.0)*(r12*r12)))+(((-1.0)*x7330*(r10*r10)))+(((2.0)*x7332*x7333)))),-1);
if(!x7334.valid){
continue;
}
CheckValue<IkReal> x7335 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x7333))+x7332)),IKFAST_ATAN2_MAGTHRESH);
if(!x7335.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7334.value)))+(x7335.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x7336=IKsin(j16);
IkReal x7337=IKcos(j16);
IkReal x7338=((1.0)*r21);
IkReal x7339=((1.0)*r01);
IkReal x7340=(cj17*x7336);
IkReal x7341=(cj17*x7337);
IkReal x7342=((1.0)*r11*sj17);
IkReal x7343=(sj17*x7336);
IkReal x7344=((1.0)*x7336);
IkReal x7345=(sj17*x7337);
evalcond[0]=(((r12*x7337))+(((-1.0)*x7336*x7342))+((r10*x7340)));
evalcond[1]=((((-1.0)*r22*x7344))+((r20*x7341))+(((-1.0)*x7338*x7345)));
evalcond[2]=(((r00*x7341))+(((-1.0)*r02*x7344))+(((-1.0)*x7339*x7345)));
evalcond[3]=((-1.0)+(((-1.0)*x7337*x7342))+(((-1.0)*r12*x7344))+((r10*x7341)));
evalcond[4]=((((-1.0)*cj13*cj14))+((r22*x7337))+((r20*x7340))+((sj13*sj14))+(((-1.0)*x7338*x7343)));
evalcond[5]=(((r02*x7337))+(((-1.0)*cj17*x7338))+((r00*x7340))+(((-1.0)*r20*sj17))+(((-1.0)*x7339*x7343)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x7346=((1.0)*sj17);
CheckValue<IkReal> x7347 = IKatan2WithCheck(IkReal((((cj17*r20))+(((-1.0)*r21*x7346)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x7347.valid){
continue;
}
CheckValue<IkReal> x7348=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj17*r01))+(((-1.0)*r00*x7346)))),-1);
if(!x7348.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x7347.value)+(((1.5707963267949)*(x7348.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x7349=IKsin(j16);
IkReal x7350=IKcos(j16);
IkReal x7351=((1.0)*r21);
IkReal x7352=((1.0)*r01);
IkReal x7353=(cj17*x7349);
IkReal x7354=(cj17*x7350);
IkReal x7355=((1.0)*r11*sj17);
IkReal x7356=(sj17*x7349);
IkReal x7357=((1.0)*x7349);
IkReal x7358=(sj17*x7350);
evalcond[0]=(((r10*x7353))+((r12*x7350))+(((-1.0)*x7349*x7355)));
evalcond[1]=((((-1.0)*r22*x7357))+(((-1.0)*x7351*x7358))+((r20*x7354)));
evalcond[2]=(((r00*x7354))+(((-1.0)*r02*x7357))+(((-1.0)*x7352*x7358)));
evalcond[3]=((-1.0)+((r10*x7354))+(((-1.0)*r12*x7357))+(((-1.0)*x7350*x7355)));
evalcond[4]=((((-1.0)*cj13*cj14))+(((-1.0)*x7351*x7356))+((r20*x7353))+((sj13*sj14))+((r22*x7350)));
evalcond[5]=(((r00*x7353))+(((-1.0)*r20*sj17))+(((-1.0)*x7352*x7356))+(((-1.0)*cj17*x7351))+((r02*x7350)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x7359 = IKatan2WithCheck(IkReal((((cj17*r00))+(((-1.0)*r01*sj17)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7359.valid){
continue;
}
CheckValue<IkReal> x7360=IKPowWithIntegerCheck(IKsign((((r20*sj17))+((cj17*r21)))),-1);
if(!x7360.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x7359.value)+(((1.5707963267949)*(x7360.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x7361=IKsin(j16);
IkReal x7362=IKcos(j16);
IkReal x7363=((1.0)*r21);
IkReal x7364=((1.0)*r01);
IkReal x7365=(cj17*x7361);
IkReal x7366=(cj17*x7362);
IkReal x7367=((1.0)*r11*sj17);
IkReal x7368=(sj17*x7361);
IkReal x7369=((1.0)*x7361);
IkReal x7370=(sj17*x7362);
evalcond[0]=(((r12*x7362))+(((-1.0)*x7361*x7367))+((r10*x7365)));
evalcond[1]=(((r20*x7366))+(((-1.0)*r22*x7369))+(((-1.0)*x7363*x7370)));
evalcond[2]=(((r00*x7366))+(((-1.0)*r02*x7369))+(((-1.0)*x7364*x7370)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x7369))+((r10*x7366))+(((-1.0)*x7362*x7367)));
evalcond[4]=((((-1.0)*cj13*cj14))+((r20*x7365))+(((-1.0)*x7363*x7368))+((sj13*sj14))+((r22*x7362)));
evalcond[5]=((((-1.0)*cj17*x7363))+((r00*x7365))+(((-1.0)*x7364*x7368))+(((-1.0)*r20*sj17))+((r02*x7362)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7372 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7372)==0){
continue;
}
IkReal x7371=pow(x7372,-0.5);
CheckValue<IkReal> x7373 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7373.valid){
continue;
}
IkReal gconst144=((-1.0)*(x7373.value));
IkReal gconst145=((-1.0)*r01*x7371);
IkReal gconst146=(r00*x7371);
CheckValue<IkReal> x7374 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7374.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7374.value)+j17)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
CheckValue<IkReal> x7377 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7377.valid){
continue;
}
IkReal x7375=((-1.0)*(x7377.value));
IkReal x7376=x7371;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
sj17=gconst145;
cj17=gconst146;
j17=x7375;
IkReal gconst144=x7375;
IkReal gconst145=((-1.0)*r01*x7376);
IkReal gconst146=(r00*x7376);
j16eval[0]=r22;
j16eval[1]=sj12;
j16eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x7378=((1.0)*gconst146);
CheckValue<IkReal> x7379 = IKatan2WithCheck(IkReal((((cj12*gconst145*r01))+((gconst145*r11*sj12))+(((-1.0)*cj12*r00*x7378))+(((-1.0)*r10*sj12*x7378)))),IkReal(((((-1.0)*cj12*r02))+(((-1.0)*r12*sj12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7379.valid){
continue;
}
CheckValue<IkReal> x7380=IKPowWithIntegerCheck(IKsign((((gconst145*r20))+((gconst146*r21)))),-1);
if(!x7380.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x7379.value)+(((1.5707963267949)*(x7380.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x7381=IKcos(j16);
IkReal x7382=IKsin(j16);
IkReal x7383=((1.0)*gconst145);
IkReal x7384=(gconst145*r20);
IkReal x7385=(gconst146*r21);
IkReal x7386=(gconst146*x7382);
IkReal x7387=((1.0)*x7382);
IkReal x7388=(gconst146*x7381);
evalcond[0]=((((-1.0)*r22*x7387))+(((-1.0)*r21*x7381*x7383))+((r20*x7388)));
evalcond[1]=((((-1.0)*r11*x7381*x7383))+((r10*x7388))+cj12+(((-1.0)*r12*x7387)));
evalcond[2]=((((-1.0)*r02*x7387))+((r00*x7388))+(((-1.0)*sj12))+(((-1.0)*r01*x7381*x7383)));
evalcond[3]=((((-1.0)*cj13*cj14))+(((-1.0)*r21*x7382*x7383))+((r20*x7386))+((sj13*sj14))+((r22*x7381)));
evalcond[4]=(((cj12*x7385))+((cj12*x7384))+((r00*x7386))+(((-1.0)*r01*x7382*x7383))+((r02*x7381)));
evalcond[5]=((((-1.0)*r11*x7382*x7383))+((r10*x7386))+((r12*x7381))+((sj12*x7385))+((sj12*x7384)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x7389=IKPowWithIntegerCheck(IKsign((((gconst145*r10))+((gconst146*r11)))),-1);
if(!x7389.valid){
continue;
}
CheckValue<IkReal> x7390 = IKatan2WithCheck(IkReal((((gconst146*r20*sj12))+(((-1.0)*gconst145*r21*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x7390.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7389.value)))+(x7390.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x7391=IKcos(j16);
IkReal x7392=IKsin(j16);
IkReal x7393=((1.0)*gconst145);
IkReal x7394=(gconst145*r20);
IkReal x7395=(gconst146*r21);
IkReal x7396=(gconst146*x7392);
IkReal x7397=((1.0)*x7392);
IkReal x7398=(gconst146*x7391);
evalcond[0]=((((-1.0)*r22*x7397))+((r20*x7398))+(((-1.0)*r21*x7391*x7393)));
evalcond[1]=((((-1.0)*r12*x7397))+((r10*x7398))+(((-1.0)*r11*x7391*x7393))+cj12);
evalcond[2]=((((-1.0)*r02*x7397))+((r00*x7398))+(((-1.0)*sj12))+(((-1.0)*r01*x7391*x7393)));
evalcond[3]=((((-1.0)*cj13*cj14))+(((-1.0)*r21*x7392*x7393))+((r22*x7391))+((sj13*sj14))+((r20*x7396)));
evalcond[4]=(((r02*x7391))+((r00*x7396))+((cj12*x7394))+((cj12*x7395))+(((-1.0)*r01*x7392*x7393)));
evalcond[5]=((((-1.0)*r11*x7392*x7393))+((sj12*x7394))+((sj12*x7395))+((r10*x7396))+((r12*x7391)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7400 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7400)==0){
continue;
}
IkReal x7399=pow(x7400,-0.5);
CheckValue<IkReal> x7401 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7401.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x7401.value))));
IkReal gconst148=((1.0)*r01*x7399);
IkReal gconst149=((-1.0)*r00*x7399);
CheckValue<IkReal> x7402 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7402.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7402.value)+j17)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[5];
CheckValue<IkReal> x7405 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7405.valid){
continue;
}
IkReal x7403=((1.0)*(x7405.value));
IkReal x7404=x7399;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
sj17=gconst148;
cj17=gconst149;
j17=((3.14159265)+(((-1.0)*x7403)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7403)));
IkReal gconst148=((1.0)*r01*x7404);
IkReal gconst149=((-1.0)*r00*x7404);
j16eval[0]=0;
j16eval[1]=cj12;
j16eval[2]=r22;
j16eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j16eval[4]=0;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  || IKabs(j16eval[3]) < 0.0000010000000000  || IKabs(j16eval[4]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
CheckValue<IkReal> x7408 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7408.valid){
continue;
}
IkReal x7406=((1.0)*(x7408.value));
IkReal x7407=x7399;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
sj17=gconst148;
cj17=gconst149;
j17=((3.14159265)+(((-1.0)*x7406)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7406)));
IkReal gconst148=((1.0)*r01*x7407);
IkReal gconst149=((-1.0)*r00*x7407);
j16eval[0]=r22;
j16eval[1]=sj12;
j16eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x7411 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7411.valid){
continue;
}
IkReal x7409=((1.0)*(x7411.value));
IkReal x7410=x7399;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
sj17=gconst148;
cj17=gconst149;
j17=((3.14159265)+(((-1.0)*x7409)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7409)));
IkReal gconst148=((1.0)*r01*x7410);
IkReal gconst149=((-1.0)*r00*x7410);
IkReal x7412=r02*r02;
IkReal x7413=(r12*sj12);
IkReal x7414=x7399;
IkReal x7415=(cj12*x7414);
j16eval[0]=((IKabs(((((-1.0)*x7415))+((r02*x7413*x7414))+((x7412*x7415)))))+(IKabs(((((-1.0)*cj12*r02))+(((-1.0)*x7413))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x7416=((1.0)*gconst149);
CheckValue<IkReal> x7417 = IKatan2WithCheck(IkReal(((((-1.0)*r10*sj12*x7416))+((gconst148*r11*sj12))+((cj12*gconst148*r01))+(((-1.0)*cj12*r00*x7416)))),IkReal(((((-1.0)*cj12*r02))+(((-1.0)*r12*sj12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7417.valid){
continue;
}
CheckValue<IkReal> x7418=IKPowWithIntegerCheck(IKsign((((gconst148*r20))+((gconst149*r21)))),-1);
if(!x7418.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x7417.value)+(((1.5707963267949)*(x7418.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x7419=IKcos(j16);
IkReal x7420=IKsin(j16);
IkReal x7421=(gconst149*r21);
IkReal x7422=((1.0)*gconst148);
IkReal x7423=(gconst148*r20);
IkReal x7424=(gconst149*x7420);
IkReal x7425=(gconst149*x7419);
IkReal x7426=((1.0)*x7420);
evalcond[0]=((((-1.0)*r22*x7426))+(((-1.0)*r21*x7419*x7422))+((r20*x7425)));
evalcond[1]=((((-1.0)*r12*x7426))+((r10*x7425))+cj12+(((-1.0)*r11*x7419*x7422)));
evalcond[2]=(((r00*x7425))+(((-1.0)*r02*x7426))+(((-1.0)*sj12))+(((-1.0)*r01*x7419*x7422)));
evalcond[3]=((((-1.0)*r21*x7420*x7422))+(((-1.0)*cj13*cj14))+((r20*x7424))+((sj13*sj14))+((r22*x7419)));
evalcond[4]=(((r00*x7424))+((cj12*x7423))+((cj12*x7421))+((r02*x7419))+(((-1.0)*r01*x7420*x7422)));
evalcond[5]=(((sj12*x7421))+((sj12*x7423))+((r10*x7424))+((r12*x7419))+(((-1.0)*r11*x7420*x7422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x7427 = IKatan2WithCheck(IkReal((((gconst149*r20*sj12))+(((-1.0)*gconst148*r21*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x7427.valid){
continue;
}
CheckValue<IkReal> x7428=IKPowWithIntegerCheck(IKsign((((gconst148*r10))+((gconst149*r11)))),-1);
if(!x7428.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x7427.value)+(((1.5707963267949)*(x7428.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x7429=IKcos(j16);
IkReal x7430=IKsin(j16);
IkReal x7431=(gconst149*r21);
IkReal x7432=((1.0)*gconst148);
IkReal x7433=(gconst148*r20);
IkReal x7434=(gconst149*x7430);
IkReal x7435=(gconst149*x7429);
IkReal x7436=((1.0)*x7430);
evalcond[0]=((((-1.0)*r22*x7436))+((r20*x7435))+(((-1.0)*r21*x7429*x7432)));
evalcond[1]=(((r10*x7435))+(((-1.0)*r12*x7436))+cj12+(((-1.0)*r11*x7429*x7432)));
evalcond[2]=(((r00*x7435))+(((-1.0)*r02*x7436))+(((-1.0)*sj12))+(((-1.0)*r01*x7429*x7432)));
evalcond[3]=((((-1.0)*cj13*cj14))+((r20*x7434))+((sj13*sj14))+((r22*x7429))+(((-1.0)*r21*x7430*x7432)));
evalcond[4]=(((r00*x7434))+((cj12*x7431))+((cj12*x7433))+(((-1.0)*r01*x7430*x7432))+((r02*x7429)));
evalcond[5]=(((r10*x7434))+((sj12*x7433))+((sj12*x7431))+((r12*x7429))+(((-1.0)*r11*x7430*x7432)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x7437=IKPowWithIntegerCheck(IKsign((((gconst148*r00))+((gconst149*r01)))),-1);
if(!x7437.valid){
continue;
}
CheckValue<IkReal> x7438 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*gconst148*r21))+((cj12*gconst149*r20)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7438.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7437.value)))+(x7438.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x7439=IKcos(j16);
IkReal x7440=IKsin(j16);
IkReal x7441=(gconst149*r21);
IkReal x7442=((1.0)*gconst148);
IkReal x7443=(gconst148*r20);
IkReal x7444=(gconst149*x7440);
IkReal x7445=(gconst149*x7439);
IkReal x7446=((1.0)*x7440);
evalcond[0]=(((r20*x7445))+(((-1.0)*r21*x7439*x7442))+(((-1.0)*r22*x7446)));
evalcond[1]=((((-1.0)*r11*x7439*x7442))+cj12+((r10*x7445))+(((-1.0)*r12*x7446)));
evalcond[2]=(((r00*x7445))+(((-1.0)*r02*x7446))+(((-1.0)*sj12))+(((-1.0)*r01*x7439*x7442)));
evalcond[3]=((((-1.0)*cj13*cj14))+((r20*x7444))+((sj13*sj14))+(((-1.0)*r21*x7440*x7442))+((r22*x7439)));
evalcond[4]=(((r02*x7439))+((r00*x7444))+(((-1.0)*r01*x7440*x7442))+((cj12*x7443))+((cj12*x7441)));
evalcond[5]=(((sj12*x7443))+((sj12*x7441))+(((-1.0)*r11*x7440*x7442))+((r12*x7439))+((r10*x7444)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
sj12=1.0;
cj12=0;
j12=1.5707963267949;
IkReal x7447=(((cj17*r11))+((r10*sj17)));
j16eval[0]=x7447;
j16eval[1]=IKsign(x7447);
j16eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*r21*sj17))+((cj17*r20))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
sj12=1.0;
cj12=0;
j12=1.5707963267949;
IkReal x7448=((1.0)*sj17);
IkReal x7449=((((-1.0)*cj17*r21))+(((-1.0)*r20*x7448)));
j16eval[0]=x7449;
j16eval[1]=IKsign(x7449);
j16eval[2]=((IKabs(r12))+(IKabs((((cj17*r10))+(((-1.0)*r11*x7448))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
sj12=1.0;
cj12=0;
j12=1.5707963267949;
IkReal x7450=cj17*cj17;
IkReal x7451=r01*r01;
IkReal x7452=(r01*sj17);
IkReal x7453=(cj17*r00);
IkReal x7454=((((2.0)*x7452*x7453))+(((-1.0)*x7451))+(((-1.0)*(r02*r02)))+((x7450*x7451))+(((-1.0)*x7450*(r00*r00))));
j16eval[0]=x7454;
j16eval[1]=IKsign(x7454);
j16eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x7453))+x7452))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x7455=cj17*cj17;
IkReal x7456=r01*r01;
IkReal x7457=(r01*sj17);
IkReal x7458=(cj17*r00);
CheckValue<IkReal> x7459=IKPowWithIntegerCheck(IKsign((((x7455*x7456))+(((-1.0)*x7456))+(((-1.0)*x7455*(r00*r00)))+(((-1.0)*(r02*r02)))+(((2.0)*x7457*x7458)))),-1);
if(!x7459.valid){
continue;
}
CheckValue<IkReal> x7460 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x7458))+x7457)),IKFAST_ATAN2_MAGTHRESH);
if(!x7460.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7459.value)))+(x7460.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x7461=IKsin(j16);
IkReal x7462=IKcos(j16);
IkReal x7463=((1.0)*sj17);
IkReal x7464=(cj17*x7461);
IkReal x7465=(cj17*x7462);
IkReal x7466=((1.0)*x7461);
evalcond[0]=(((r02*x7462))+((r00*x7464))+(((-1.0)*r01*x7461*x7463)));
evalcond[1]=((((-1.0)*r21*x7462*x7463))+(((-1.0)*r22*x7466))+((r20*x7465)));
evalcond[2]=(((r10*x7465))+(((-1.0)*r11*x7462*x7463))+(((-1.0)*r12*x7466)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x7466))+(((-1.0)*r01*x7462*x7463))+((r00*x7465)));
evalcond[4]=(((r10*x7464))+((r20*sj17))+(((-1.0)*r11*x7461*x7463))+((cj17*r21))+((r12*x7462)));
evalcond[5]=((((-1.0)*cj13*cj14))+(((-1.0)*r21*x7461*x7463))+((r20*x7464))+((sj13*sj14))+((r22*x7462)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x7467=((1.0)*sj17);
CheckValue<IkReal> x7468=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj17*r21))+(((-1.0)*r20*x7467)))),-1);
if(!x7468.valid){
continue;
}
CheckValue<IkReal> x7469 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x7467))+((cj17*r10)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7469.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7468.value)))+(x7469.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x7470=IKsin(j16);
IkReal x7471=IKcos(j16);
IkReal x7472=((1.0)*sj17);
IkReal x7473=(cj17*x7470);
IkReal x7474=(cj17*x7471);
IkReal x7475=((1.0)*x7470);
evalcond[0]=(((r02*x7471))+(((-1.0)*r01*x7470*x7472))+((r00*x7473)));
evalcond[1]=(((r20*x7474))+(((-1.0)*r22*x7475))+(((-1.0)*r21*x7471*x7472)));
evalcond[2]=(((r10*x7474))+(((-1.0)*r11*x7471*x7472))+(((-1.0)*r12*x7475)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x7475))+(((-1.0)*r01*x7471*x7472))+((r00*x7474)));
evalcond[4]=(((r10*x7473))+((r20*sj17))+((cj17*r21))+(((-1.0)*r11*x7470*x7472))+((r12*x7471)));
evalcond[5]=((((-1.0)*cj13*cj14))+((r20*x7473))+(((-1.0)*r21*x7470*x7472))+((r22*x7471))+((sj13*sj14)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x7476 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj17))+((cj17*r20)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x7476.valid){
continue;
}
CheckValue<IkReal> x7477=IKPowWithIntegerCheck(IKsign((((cj17*r11))+((r10*sj17)))),-1);
if(!x7477.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x7476.value)+(((1.5707963267949)*(x7477.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x7478=IKsin(j16);
IkReal x7479=IKcos(j16);
IkReal x7480=((1.0)*sj17);
IkReal x7481=(cj17*x7478);
IkReal x7482=(cj17*x7479);
IkReal x7483=((1.0)*x7478);
evalcond[0]=(((r02*x7479))+(((-1.0)*r01*x7478*x7480))+((r00*x7481)));
evalcond[1]=(((r20*x7482))+(((-1.0)*r22*x7483))+(((-1.0)*r21*x7479*x7480)));
evalcond[2]=(((r10*x7482))+(((-1.0)*r11*x7479*x7480))+(((-1.0)*r12*x7483)));
evalcond[3]=((-1.0)+((r00*x7482))+(((-1.0)*r01*x7479*x7480))+(((-1.0)*r02*x7483)));
evalcond[4]=((((-1.0)*r11*x7478*x7480))+((r20*sj17))+((r10*x7481))+((cj17*r21))+((r12*x7479)));
evalcond[5]=((((-1.0)*cj13*cj14))+((r22*x7479))+((r20*x7481))+((sj13*sj14))+(((-1.0)*r21*x7478*x7480)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
IkReal x7484=(((r20*sj17))+((cj17*r21)));
j16eval[0]=x7484;
j16eval[1]=IKsign(x7484);
j16eval[2]=((IKabs(r12))+(IKabs((((cj17*r10))+(((-1.0)*r11*sj17))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
IkReal x7485=((1.0)*sj17);
IkReal x7486=((((-1.0)*cj17*r11))+(((-1.0)*r10*x7485)));
j16eval[0]=x7486;
j16eval[1]=IKsign(x7486);
j16eval[2]=((IKabs((((cj17*r20))+(((-1.0)*r21*x7485)))))+(IKabs(r22)));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
IkReal x7487=cj17*cj17;
IkReal x7488=r01*r01;
IkReal x7489=(cj17*r00);
IkReal x7490=(r01*sj17);
IkReal x7491=((((-2.0)*x7489*x7490))+((x7487*(r00*r00)))+(r02*r02)+x7488+(((-1.0)*x7487*x7488)));
j16eval[0]=x7491;
j16eval[1]=IKsign(x7491);
j16eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x7489))+x7490))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x7492=cj17*cj17;
IkReal x7493=r01*r01;
IkReal x7494=(r01*sj17);
IkReal x7495=(cj17*r00);
CheckValue<IkReal> x7496=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7492*x7493))+((x7492*(r00*r00)))+(((-2.0)*x7494*x7495))+(r02*r02)+x7493)),-1);
if(!x7496.valid){
continue;
}
CheckValue<IkReal> x7497 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x7495))+x7494)),IKFAST_ATAN2_MAGTHRESH);
if(!x7497.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7496.value)))+(x7497.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x7498=IKsin(j16);
IkReal x7499=IKcos(j16);
IkReal x7500=((1.0)*r21);
IkReal x7501=((1.0)*r01);
IkReal x7502=(cj17*x7498);
IkReal x7503=(cj17*x7499);
IkReal x7504=((1.0)*r11*sj17);
IkReal x7505=(sj17*x7498);
IkReal x7506=((1.0)*x7498);
IkReal x7507=(sj17*x7499);
evalcond[0]=(((r00*x7502))+(((-1.0)*x7501*x7505))+((r02*x7499)));
evalcond[1]=((((-1.0)*r22*x7506))+(((-1.0)*x7500*x7507))+((r20*x7503)));
evalcond[2]=((((-1.0)*x7499*x7504))+((r10*x7503))+(((-1.0)*r12*x7506)));
evalcond[3]=((1.0)+((r00*x7503))+(((-1.0)*x7501*x7507))+(((-1.0)*r02*x7506)));
evalcond[4]=((((-1.0)*cj13*cj14))+((r22*x7499))+(((-1.0)*x7500*x7505))+((r20*x7502))+((sj13*sj14)));
evalcond[5]=((((-1.0)*x7498*x7504))+(((-1.0)*cj17*x7500))+((r12*x7499))+((r10*x7502))+(((-1.0)*r20*sj17)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x7508=((1.0)*sj17);
CheckValue<IkReal> x7509=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj17*r11))+(((-1.0)*r10*x7508)))),-1);
if(!x7509.valid){
continue;
}
CheckValue<IkReal> x7510 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x7508))+((cj17*r20)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x7510.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7509.value)))+(x7510.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x7511=IKsin(j16);
IkReal x7512=IKcos(j16);
IkReal x7513=((1.0)*r21);
IkReal x7514=((1.0)*r01);
IkReal x7515=(cj17*x7511);
IkReal x7516=(cj17*x7512);
IkReal x7517=((1.0)*r11*sj17);
IkReal x7518=(sj17*x7511);
IkReal x7519=((1.0)*x7511);
IkReal x7520=(sj17*x7512);
evalcond[0]=(((r00*x7515))+((r02*x7512))+(((-1.0)*x7514*x7518)));
evalcond[1]=(((r20*x7516))+(((-1.0)*x7513*x7520))+(((-1.0)*r22*x7519)));
evalcond[2]=((((-1.0)*x7512*x7517))+((r10*x7516))+(((-1.0)*r12*x7519)));
evalcond[3]=((1.0)+((r00*x7516))+(((-1.0)*r02*x7519))+(((-1.0)*x7514*x7520)));
evalcond[4]=((((-1.0)*cj13*cj14))+((r20*x7515))+((r22*x7512))+((sj13*sj14))+(((-1.0)*x7513*x7518)));
evalcond[5]=((((-1.0)*cj17*x7513))+((r12*x7512))+(((-1.0)*x7511*x7517))+((r10*x7515))+(((-1.0)*r20*sj17)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x7521 = IKatan2WithCheck(IkReal((((cj17*r10))+(((-1.0)*r11*sj17)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7521.valid){
continue;
}
CheckValue<IkReal> x7522=IKPowWithIntegerCheck(IKsign((((r20*sj17))+((cj17*r21)))),-1);
if(!x7522.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x7521.value)+(((1.5707963267949)*(x7522.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x7523=IKsin(j16);
IkReal x7524=IKcos(j16);
IkReal x7525=((1.0)*r21);
IkReal x7526=((1.0)*r01);
IkReal x7527=(cj17*x7523);
IkReal x7528=(cj17*x7524);
IkReal x7529=((1.0)*r11*sj17);
IkReal x7530=(sj17*x7523);
IkReal x7531=((1.0)*x7523);
IkReal x7532=(sj17*x7524);
evalcond[0]=((((-1.0)*x7526*x7530))+((r00*x7527))+((r02*x7524)));
evalcond[1]=(((r20*x7528))+(((-1.0)*r22*x7531))+(((-1.0)*x7525*x7532)));
evalcond[2]=((((-1.0)*r12*x7531))+((r10*x7528))+(((-1.0)*x7524*x7529)));
evalcond[3]=((1.0)+(((-1.0)*x7526*x7532))+((r00*x7528))+(((-1.0)*r02*x7531)));
evalcond[4]=((((-1.0)*cj13*cj14))+((r20*x7527))+((sj13*sj14))+((r22*x7524))+(((-1.0)*x7525*x7530)));
evalcond[5]=((((-1.0)*cj17*x7525))+(((-1.0)*x7523*x7529))+((r12*x7524))+((r10*x7527))+(((-1.0)*r20*sj17)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
IkReal x7533=((-1.0)*px);
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x7533);
rxp1_1=(px*r21);
rxp1_2=(r11*x7533);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j16eval[0]=r02;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
IkReal x7534=((-1.0)*px);
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x7534);
rxp1_1=(px*r21);
rxp1_2=(r11*x7534);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j16eval[0]=((((-1.0)*r21*sj17))+((cj17*r20)));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
CheckValue<IkReal> x7536=IKPowWithIntegerCheck(((((-1.0)*r21*sj17))+((cj17*r20))),-1);
if(!x7536.valid){
continue;
}
IkReal x7535=x7536.value;
sj16array[0]=(((cj13*cj14*x7535))+(((-1.0)*sj13*sj14*x7535)));
if( sj16array[0] >= -1-IKFAST_SINCOS_THRESH && sj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKasin(sj16array[0]);
    cj16array[0] = IKcos(j16array[0]);
    sj16array[1] = sj16array[0];
    j16array[1] = j16array[0] > 0 ? (IKPI-j16array[0]) : (-IKPI-j16array[0]);
    cj16array[1] = -cj16array[0];
}
else if( isnan(sj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x7537=IKcos(j16);
IkReal x7538=(cj17*x7537);
IkReal x7539=((1.0)*sj17*x7537);
evalcond[0]=(r02*x7537);
evalcond[1]=((((-1.0)*r02*(IKsin(j16))))+(((-1.0)*sj12)));
evalcond[2]=(((r20*x7538))+(((-1.0)*r21*x7539)));
evalcond[3]=(((r10*x7538))+(((-1.0)*r11*x7539)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
CheckValue<IkReal> x7540=IKPowWithIntegerCheck(r02,-1);
if(!x7540.valid){
continue;
}
sj16array[0]=((-1.0)*sj12*(x7540.value));
if( sj16array[0] >= -1-IKFAST_SINCOS_THRESH && sj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKasin(sj16array[0]);
    cj16array[0] = IKcos(j16array[0]);
    sj16array[1] = sj16array[0];
    j16array[1] = j16array[0] > 0 ? (IKPI-j16array[0]) : (-IKPI-j16array[0]);
    cj16array[1] = -cj16array[0];
}
else if( isnan(sj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x7541=IKcos(j16);
IkReal x7542=IKsin(j16);
IkReal x7543=(cj17*x7541);
IkReal x7544=((1.0)*sj17*x7541);
evalcond[0]=(r02*x7541);
evalcond[1]=(((r20*x7543))+(((-1.0)*r21*x7544)));
evalcond[2]=(((r10*x7543))+(((-1.0)*r11*x7544)));
evalcond[3]=((((-1.0)*cj13*cj14))+((cj17*r20*x7542))+(((-1.0)*r21*sj17*x7542))+((sj13*sj14)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j16]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x7545=((1.0)*cj12);
IkReal x7546=((1.0)*sj12);
CheckValue<IkReal> x7547 = IKatan2WithCheck(IkReal((((cj12*r01*sj17))+((r11*sj12*sj17))+(((-1.0)*cj17*r10*x7546))+(((-1.0)*cj17*r00*x7545)))),IkReal(((((-1.0)*r12*x7546))+(((-1.0)*r02*x7545)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7547.valid){
continue;
}
CheckValue<IkReal> x7548=IKPowWithIntegerCheck(IKsign((((r20*sj17))+((cj17*r21)))),-1);
if(!x7548.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x7547.value)+(((1.5707963267949)*(x7548.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x7549=IKcos(j16);
IkReal x7550=IKsin(j16);
IkReal x7551=(cj17*r21);
IkReal x7552=(r20*sj17);
IkReal x7553=(r21*sj17);
IkReal x7554=(r11*sj17);
IkReal x7555=(r01*sj17);
IkReal x7556=(cj17*x7550);
IkReal x7557=(cj17*x7549);
IkReal x7558=((1.0)*x7550);
IkReal x7559=((1.0)*x7549);
evalcond[0]=((((-1.0)*r22*x7558))+(((-1.0)*x7553*x7559))+((r20*x7557)));
evalcond[1]=(((r10*x7557))+(((-1.0)*x7554*x7559))+cj12+(((-1.0)*r12*x7558)));
evalcond[2]=((((-1.0)*x7555*x7559))+(((-1.0)*sj12))+((r00*x7557))+(((-1.0)*r02*x7558)));
evalcond[3]=((((-1.0)*cj13*cj14))+(((-1.0)*x7553*x7558))+((r22*x7549))+((sj13*sj14))+((r20*x7556)));
evalcond[4]=((((-1.0)*x7555*x7558))+((r02*x7549))+((r00*x7556))+((cj12*x7551))+((cj12*x7552)));
evalcond[5]=(((r10*x7556))+(((-1.0)*x7554*x7558))+((sj12*x7551))+((sj12*x7552))+((r12*x7549)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x7560=IKPowWithIntegerCheck(IKsign((((cj17*r11))+((r10*sj17)))),-1);
if(!x7560.valid){
continue;
}
CheckValue<IkReal> x7561 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x7561.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7560.value)))+(x7561.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x7562=IKcos(j16);
IkReal x7563=IKsin(j16);
IkReal x7564=(cj17*r21);
IkReal x7565=(r20*sj17);
IkReal x7566=(r21*sj17);
IkReal x7567=(r11*sj17);
IkReal x7568=(r01*sj17);
IkReal x7569=(cj17*x7563);
IkReal x7570=(cj17*x7562);
IkReal x7571=((1.0)*x7563);
IkReal x7572=((1.0)*x7562);
evalcond[0]=((((-1.0)*x7566*x7572))+((r20*x7570))+(((-1.0)*r22*x7571)));
evalcond[1]=((((-1.0)*x7567*x7572))+cj12+((r10*x7570))+(((-1.0)*r12*x7571)));
evalcond[2]=(((r00*x7570))+(((-1.0)*r02*x7571))+(((-1.0)*x7568*x7572))+(((-1.0)*sj12)));
evalcond[3]=((((-1.0)*cj13*cj14))+(((-1.0)*x7566*x7571))+((r22*x7562))+((sj13*sj14))+((r20*x7569)));
evalcond[4]=(((r02*x7562))+(((-1.0)*x7568*x7571))+((r00*x7569))+((cj12*x7565))+((cj12*x7564)));
evalcond[5]=((((-1.0)*x7567*x7571))+((r10*x7569))+((sj12*x7564))+((sj12*x7565))+((r12*x7562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x7573 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7573.valid){
continue;
}
CheckValue<IkReal> x7574=IKPowWithIntegerCheck(IKsign((((r00*sj17))+((cj17*r01)))),-1);
if(!x7574.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x7573.value)+(((1.5707963267949)*(x7574.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x7575=IKcos(j16);
IkReal x7576=IKsin(j16);
IkReal x7577=(cj17*r21);
IkReal x7578=(r20*sj17);
IkReal x7579=(r21*sj17);
IkReal x7580=(r11*sj17);
IkReal x7581=(r01*sj17);
IkReal x7582=(cj17*x7576);
IkReal x7583=(cj17*x7575);
IkReal x7584=((1.0)*x7576);
IkReal x7585=((1.0)*x7575);
evalcond[0]=((((-1.0)*r22*x7584))+(((-1.0)*x7579*x7585))+((r20*x7583)));
evalcond[1]=(((r10*x7583))+cj12+(((-1.0)*x7580*x7585))+(((-1.0)*r12*x7584)));
evalcond[2]=((((-1.0)*x7581*x7585))+(((-1.0)*r02*x7584))+(((-1.0)*sj12))+((r00*x7583)));
evalcond[3]=((((-1.0)*cj13*cj14))+((sj13*sj14))+((r22*x7575))+(((-1.0)*x7579*x7584))+((r20*x7582)));
evalcond[4]=((((-1.0)*x7581*x7584))+((cj12*x7578))+((cj12*x7577))+((r02*x7575))+((r00*x7582)));
evalcond[5]=(((r12*x7575))+((r10*x7582))+(((-1.0)*x7580*x7584))+((sj12*x7578))+((sj12*x7577)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12, j16]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x7586=cj14*cj14;
IkReal x7587=cj13*cj13;
IkReal x7588=((4132419.0)*sj17);
IkReal x7589=(cj13*sj14);
IkReal x7590=((14850585.0)*sj17);
IkReal x7591=(r10*sj13);
IkReal x7592=((133365000.0)*cj14);
IkReal x7593=((156900000.0)*px);
IkReal x7594=((4132419.0)*cj17);
IkReal x7595=((16090500.0)*sj17);
IkReal x7596=(cj14*sj13);
IkReal x7597=((170000000.0)*sj13);
IkReal x7598=((156900000.0)*py);
IkReal x7599=((14850585.0)*cj17);
IkReal x7600=((16090500.0)*cj17*sj13);
IkReal x7601=(x7596*x7599);
CheckValue<IkReal> x7602 = IKatan2WithCheck(IkReal(((((-43660000.0)*px))+((r11*x7589*x7599))+((r11*x7600))+((r11*x7601))+((x7589*x7598))+((r10*x7589*x7590))+((cj14*x7590*x7591))+((py*x7597))+(((-1.0)*r01*x7594))+((x7591*x7595))+((x7596*x7598))+(((-1.0)*r00*x7588)))),IkReal((((r00*sj13*x7595))+((px*x7597))+(((43660000.0)*py))+((x7589*x7593))+((r01*x7601))+((r01*x7600))+((r00*x7590*x7596))+((r10*x7588))+((r00*x7589*x7590))+((r01*x7589*x7599))+((r11*x7594))+((x7593*x7596)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7602.valid){
continue;
}
CheckValue<IkReal> x7603=IKPowWithIntegerCheck(IKsign(((77015489.0)+(((123088050.0)*x7589*x7596))+(((-1.0)*x7587*x7592))+(((133365000.0)*sj13*x7589))+(((-10705975.0)*x7587))+(((61544025.0)*x7586))+x7592+(((-123088050.0)*x7586*x7587)))),-1);
if(!x7603.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x7602.value)+(((1.5707963267949)*(x7603.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[2];
IkReal x7604=IKcos(j12);
IkReal x7605=IKsin(j12);
IkReal x7606=((0.09465)*cj17);
IkReal x7607=((0.09465)*sj17);
IkReal x7608=((0.39225)*cj14);
IkReal x7609=(sj13*x7605);
IkReal x7610=(sj13*x7604);
IkReal x7611=((0.39225)*cj13*sj14);
evalcond[0]=((((0.425)*x7610))+((x7604*x7611))+(((-1.0)*px))+((x7608*x7610))+(((-1.0)*r00*x7607))+(((-1.0)*r01*x7606))+(((-0.10915)*x7605)));
evalcond[1]=((((-1.0)*r11*x7606))+(((-1.0)*r10*x7607))+(((0.425)*x7609))+((x7605*x7611))+(((-1.0)*py))+((x7608*x7609))+(((0.10915)*x7604)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j16eval[3];
IkReal x7612=(((r00*sj17))+((cj17*r01)));
j16eval[0]=x7612;
j16eval[1]=((IKabs(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))))+(IKabs((cj12*r22))));
j16eval[2]=IKsign(x7612);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
IkReal x7613=(((cj17*r11))+((r10*sj17)));
j16eval[0]=x7613;
j16eval[1]=((IKabs((r22*sj12)))+(IKabs(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12))))));
j16eval[2]=IKsign(x7613);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
IkReal x7614=((1.0)*cj12);
IkReal x7615=((1.0)*sj12);
IkReal x7616=(((r20*sj17))+((cj17*r21)));
j16eval[0]=x7616;
j16eval[1]=IKsign(x7616);
j16eval[2]=((IKabs(((((-1.0)*r12*x7615))+(((-1.0)*r02*x7614)))))+(IKabs(((((-1.0)*cj17*r10*x7615))+((cj12*r01*sj17))+((r11*sj12*sj17))+(((-1.0)*cj17*r00*x7614))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7618 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7618)==0){
continue;
}
IkReal x7617=pow(x7618,-0.5);
CheckValue<IkReal> x7619 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7619.valid){
continue;
}
IkReal gconst0=((-1.0)*(x7619.value));
IkReal gconst1=((-1.0)*r21*x7617);
IkReal gconst2=(r20*x7617);
CheckValue<IkReal> x7620 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7620.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j17+(x7620.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x7623 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7623.valid){
continue;
}
IkReal x7621=((-1.0)*(x7623.value));
IkReal x7622=x7617;
sj17=gconst1;
cj17=gconst2;
j17=x7621;
IkReal gconst0=x7621;
IkReal gconst1=((-1.0)*r21*x7622);
IkReal gconst2=(r20*x7622);
j16eval[0]=cj12;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x7626 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7626.valid){
continue;
}
IkReal x7624=((-1.0)*(x7626.value));
IkReal x7625=x7617;
sj17=gconst1;
cj17=gconst2;
j17=x7624;
IkReal gconst0=x7624;
IkReal gconst1=((-1.0)*r21*x7625);
IkReal gconst2=(r20*x7625);
j16eval[0]=sj12;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
CheckValue<IkReal> x7629 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7629.valid){
continue;
}
IkReal x7627=((-1.0)*(x7629.value));
IkReal x7628=x7617;
sj17=gconst1;
cj17=gconst2;
j17=x7627;
IkReal gconst0=x7627;
IkReal gconst1=((-1.0)*r21*x7628);
IkReal gconst2=(r20*x7628);
IkReal x7630=r22*r22;
CheckValue<IkReal> x7634=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7630))),-1);
if(!x7634.valid){
continue;
}
IkReal x7631=x7634.value;
IkReal x7632=(cj15*x7631);
IkReal x7633=(((cj15*x7630))+((x7632*(r21*r21*r21*r21)))+(((2.0)*x7632*(r20*r20)*(r21*r21)))+((x7632*(r20*r20*r20*r20))));
j16eval[0]=x7633;
j16eval[1]=IKsign(x7633);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x7637 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7637.valid){
continue;
}
IkReal x7635=((-1.0)*(x7637.value));
IkReal x7636=x7617;
sj17=gconst1;
cj17=gconst2;
j17=x7635;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
IkReal gconst0=x7635;
IkReal gconst1=((-1.0)*r21*x7636);
IkReal gconst2=(r20*x7636);
j16eval[0]=cj12;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x7640 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7640.valid){
continue;
}
IkReal x7638=((-1.0)*(x7640.value));
IkReal x7639=x7617;
sj17=gconst1;
cj17=gconst2;
j17=x7638;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
IkReal gconst0=x7638;
IkReal gconst1=((-1.0)*r21*x7639);
IkReal gconst2=(r20*x7639);
j16eval[0]=sj12;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
CheckValue<IkReal> x7643 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7643.valid){
continue;
}
IkReal x7641=((-1.0)*(x7643.value));
IkReal x7642=x7617;
sj17=gconst1;
cj17=gconst2;
j17=x7641;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
IkReal gconst0=x7641;
IkReal gconst1=((-1.0)*r21*x7642);
IkReal gconst2=(r20*x7642);
IkReal x7644=r22*r22;
CheckValue<IkReal> x7647=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7644))),-1);
if(!x7647.valid){
continue;
}
IkReal x7645=x7647.value;
IkReal x7646=(((x7645*(r20*r20*r20*r20)))+(((2.0)*x7645*(r20*r20)*(r21*r21)))+x7644+((x7645*(r21*r21*r21*r21))));
j16eval[0]=x7646;
j16eval[1]=IKsign(x7646);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j12))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x7650 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7650.valid){
continue;
}
IkReal x7648=((-1.0)*(x7650.value));
IkReal x7649=x7617;
sj17=gconst1;
cj17=gconst2;
j17=x7648;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
sj12=0;
cj12=1.0;
j12=0;
IkReal gconst0=x7648;
IkReal gconst1=((-1.0)*r21*x7649);
IkReal gconst2=(r20*x7649);
j16eval[0]=1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
CheckValue<IkReal> x7653 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7653.valid){
continue;
}
IkReal x7651=((-1.0)*(x7653.value));
IkReal x7652=x7617;
sj17=gconst1;
cj17=gconst2;
j17=x7651;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
sj12=0;
cj12=1.0;
j12=0;
IkReal gconst0=x7651;
IkReal gconst1=((-1.0)*r21*x7652);
IkReal gconst2=(r20*x7652);
j16eval[0]=r12;
j16eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x7656 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7656.valid){
continue;
}
IkReal x7654=((-1.0)*(x7656.value));
IkReal x7655=x7617;
sj17=gconst1;
cj17=gconst2;
j17=x7654;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
sj12=0;
cj12=1.0;
j12=0;
IkReal gconst0=x7654;
IkReal gconst1=((-1.0)*r21*x7655);
IkReal gconst2=(r20*x7655);
IkReal x7657=r22*r22;
IkReal x7658=((1.0)*r12);
IkReal x7659=(sj13*sj14);
IkReal x7660=(cj13*cj14);
CheckValue<IkReal> x7664=IKPowWithIntegerCheck(((-1.0)+x7657),-1);
if(!x7664.valid){
continue;
}
IkReal x7661=x7664.value;
if((((1.0)+(((-1.0)*x7657)))) < -0.00001)
continue;
IkReal x7662=IKsqrt(((1.0)+(((-1.0)*x7657))));
IkReal x7663=(r22*x7661*x7662);
j16eval[0]=((IKabs(((((-1.0)*x7658*x7660))+((r12*x7659)))))+(IKabs((((r12*x7660*x7663))+(((-1.0)*x7658*x7659*x7663))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x7665=(cj13*cj14);
IkReal x7666=(gconst2*r10);
IkReal x7667=(sj13*sj14);
IkReal x7668=(gconst1*r11);
CheckValue<IkReal> x7669 = IKatan2WithCheck(IkReal((((r12*x7667))+(((-1.0)*r12*x7665)))),IkReal((((x7665*x7666))+(((-1.0)*x7665*x7668))+((x7667*x7668))+(((-1.0)*x7666*x7667)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7669.valid){
continue;
}
CheckValue<IkReal> x7670=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x7670.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x7669.value)+(((1.5707963267949)*(x7670.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x7671=IKcos(j16);
IkReal x7672=IKsin(j16);
IkReal x7673=((1.0)*cj14);
IkReal x7674=(gconst1*x7672);
IkReal x7675=((1.0)*x7671);
IkReal x7676=((1.0)*x7672);
IkReal x7677=(gconst2*x7671);
IkReal x7678=(gconst1*x7675);
evalcond[0]=((((-1.0)*r21*x7678))+((r20*x7677))+(((-1.0)*r22*x7676)));
evalcond[1]=((((-1.0)*r01*x7678))+(((-1.0)*r02*x7676))+((r00*x7677)));
evalcond[2]=(((r11*x7674))+(((-1.0)*gconst2*r10*x7676))+(((-1.0)*r12*x7675)));
evalcond[3]=((1.0)+(((-1.0)*r11*x7678))+(((-1.0)*r12*x7676))+((r10*x7677)));
evalcond[4]=(((r21*x7674))+(((-1.0)*cj13*x7673))+(((-1.0)*gconst2*r20*x7676))+((sj13*sj14))+(((-1.0)*r22*x7675)));
evalcond[5]=((((-1.0)*cj13*sj14))+(((-1.0)*gconst2*r00*x7676))+(((-1.0)*r02*x7675))+((r01*x7674))+(((-1.0)*sj13*x7673)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x7679=(gconst2*r10);
IkReal x7680=(gconst1*r11);
CheckValue<IkReal> x7681=IKPowWithIntegerCheck(IKsign(((((-2.0)*x7679*x7680))+(r12*r12)+(x7679*x7679)+(x7680*x7680))),-1);
if(!x7681.valid){
continue;
}
CheckValue<IkReal> x7682 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x7679))+x7680)),IKFAST_ATAN2_MAGTHRESH);
if(!x7682.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7681.value)))+(x7682.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x7683=IKcos(j16);
IkReal x7684=IKsin(j16);
IkReal x7685=((1.0)*cj14);
IkReal x7686=(gconst1*x7684);
IkReal x7687=((1.0)*x7683);
IkReal x7688=((1.0)*x7684);
IkReal x7689=(gconst2*x7683);
IkReal x7690=(gconst1*x7687);
evalcond[0]=((((-1.0)*r21*x7690))+(((-1.0)*r22*x7688))+((r20*x7689)));
evalcond[1]=((((-1.0)*r01*x7690))+((r00*x7689))+(((-1.0)*r02*x7688)));
evalcond[2]=((((-1.0)*gconst2*r10*x7688))+((r11*x7686))+(((-1.0)*r12*x7687)));
evalcond[3]=((1.0)+((r10*x7689))+(((-1.0)*r11*x7690))+(((-1.0)*r12*x7688)));
evalcond[4]=((((-1.0)*cj13*x7685))+(((-1.0)*r22*x7687))+((r21*x7686))+((sj13*sj14))+(((-1.0)*gconst2*r20*x7688)));
evalcond[5]=((((-1.0)*sj13*x7685))+(((-1.0)*cj13*sj14))+((r01*x7686))+(((-1.0)*gconst2*r00*x7688))+(((-1.0)*r02*x7687)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x7691 = IKatan2WithCheck(IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x7691.valid){
continue;
}
CheckValue<IkReal> x7692=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x7692.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x7691.value)+(((1.5707963267949)*(x7692.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x7693=IKcos(j16);
IkReal x7694=IKsin(j16);
IkReal x7695=((1.0)*cj14);
IkReal x7696=(gconst1*x7694);
IkReal x7697=((1.0)*x7693);
IkReal x7698=((1.0)*x7694);
IkReal x7699=(gconst2*x7693);
IkReal x7700=(gconst1*x7697);
evalcond[0]=((((-1.0)*r21*x7700))+(((-1.0)*r22*x7698))+((r20*x7699)));
evalcond[1]=((((-1.0)*r02*x7698))+(((-1.0)*r01*x7700))+((r00*x7699)));
evalcond[2]=(((r11*x7696))+(((-1.0)*gconst2*r10*x7698))+(((-1.0)*r12*x7697)));
evalcond[3]=((1.0)+((r10*x7699))+(((-1.0)*r11*x7700))+(((-1.0)*r12*x7698)));
evalcond[4]=((((-1.0)*gconst2*r20*x7698))+(((-1.0)*r22*x7697))+((sj13*sj14))+((r21*x7696))+(((-1.0)*cj13*x7695)));
evalcond[5]=((((-1.0)*sj13*x7695))+(((-1.0)*r02*x7697))+(((-1.0)*cj13*sj14))+((r01*x7696))+(((-1.0)*gconst2*r00*x7698)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x7703 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7703.valid){
continue;
}
IkReal x7701=((-1.0)*(x7703.value));
IkReal x7702=x7617;
sj17=gconst1;
cj17=gconst2;
j17=x7701;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
IkReal gconst0=x7701;
IkReal gconst1=((-1.0)*r21*x7702);
IkReal gconst2=(r20*x7702);
j16eval[0]=1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[4];
CheckValue<IkReal> x7706 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7706.valid){
continue;
}
IkReal x7704=((-1.0)*(x7706.value));
IkReal x7705=x7617;
sj17=gconst1;
cj17=gconst2;
j17=x7704;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
IkReal gconst0=x7704;
IkReal gconst1=((-1.0)*r21*x7705);
IkReal gconst2=(r20*x7705);
IkReal x7707=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x7711=IKPowWithIntegerCheck(x7707,-1);
if(!x7711.valid){
continue;
}
IkReal x7708=x7711.value;
IkReal x7709=((1.0)*x7708);
IkReal x7710=((((-1.0)*x7709*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x7708))+(((-1.0)*(r12*r12)))+(((-1.0)*x7709*(r10*r10)*(r20*r20))));
j16eval[0]=x7710;
j16eval[1]=IKsign(x7710);
j16eval[2]=r12;
j16eval[3]=x7707;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  || IKabs(j16eval[3]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x7714 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7714.valid){
continue;
}
IkReal x7712=((-1.0)*(x7714.value));
IkReal x7713=x7617;
sj17=gconst1;
cj17=gconst2;
j17=x7712;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
IkReal gconst0=x7712;
IkReal gconst1=((-1.0)*r21*x7713);
IkReal gconst2=(r20*x7713);
IkReal x7715=r22*r22;
IkReal x7716=(cj13*r02*sj14);
IkReal x7717=(cj14*r02*sj13);
CheckValue<IkReal> x7721=IKPowWithIntegerCheck(((-1.0)+x7715),-1);
if(!x7721.valid){
continue;
}
IkReal x7718=x7721.value;
if((((1.0)+(((-1.0)*x7715)))) < -0.00001)
continue;
IkReal x7719=IKsqrt(((1.0)+(((-1.0)*x7715))));
IkReal x7720=(r22*x7718*x7719);
j16eval[0]=((IKabs((x7717+x7716)))+(IKabs((((x7717*x7720))+((x7716*x7720))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x7722=(gconst2*r00);
IkReal x7723=(cj13*sj14);
IkReal x7724=(cj14*sj13);
IkReal x7725=(gconst1*r01);
CheckValue<IkReal> x7726 = IKatan2WithCheck(IkReal((((x7722*x7724))+((x7722*x7723))+(((-1.0)*x7723*x7725))+(((-1.0)*x7724*x7725)))),IkReal((((r02*x7724))+((r02*x7723)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7726.valid){
continue;
}
CheckValue<IkReal> x7727=IKPowWithIntegerCheck(IKsign(((x7722*x7722)+(((-2.0)*x7722*x7725))+(r02*r02)+(x7725*x7725))),-1);
if(!x7727.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x7726.value)+(((1.5707963267949)*(x7727.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x7728=IKcos(j16);
IkReal x7729=IKsin(j16);
IkReal x7730=(gconst1*x7729);
IkReal x7731=((1.0)*x7728);
IkReal x7732=((1.0)*x7729);
IkReal x7733=(gconst2*x7728);
IkReal x7734=(gconst1*x7731);
evalcond[0]=((((-1.0)*r22*x7732))+(((-1.0)*r21*x7734))+((r20*x7733)));
evalcond[1]=((((-1.0)*r01*x7734))+((r00*x7733))+(((-1.0)*r02*x7732)));
evalcond[2]=((((-1.0)*gconst2*r10*x7732))+((r11*x7730))+(((-1.0)*r12*x7731)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x7732))+(((-1.0)*r11*x7734))+((r10*x7733)));
evalcond[4]=(((cj14*sj13))+(((-1.0)*gconst2*r00*x7732))+((cj13*sj14))+(((-1.0)*r02*x7731))+((r01*x7730)));
evalcond[5]=((((-1.0)*cj13*cj14))+((r21*x7730))+(((-1.0)*gconst2*r20*x7732))+(((-1.0)*r22*x7731))+((sj13*sj14)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x7735=(gconst1*r11);
IkReal x7736=(gconst2*r10);
CheckValue<IkReal> x7737=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x7735*x7735)))+(((2.0)*x7735*x7736))+(((-1.0)*(r12*r12)))+(((-1.0)*(x7736*x7736))))),-1);
if(!x7737.valid){
continue;
}
CheckValue<IkReal> x7738 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x7736))+x7735)),IKFAST_ATAN2_MAGTHRESH);
if(!x7738.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7737.value)))+(x7738.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x7739=IKcos(j16);
IkReal x7740=IKsin(j16);
IkReal x7741=(gconst1*x7740);
IkReal x7742=((1.0)*x7739);
IkReal x7743=((1.0)*x7740);
IkReal x7744=(gconst2*x7739);
IkReal x7745=(gconst1*x7742);
evalcond[0]=((((-1.0)*r22*x7743))+((r20*x7744))+(((-1.0)*r21*x7745)));
evalcond[1]=(((r00*x7744))+(((-1.0)*r02*x7743))+(((-1.0)*r01*x7745)));
evalcond[2]=((((-1.0)*gconst2*r10*x7743))+(((-1.0)*r12*x7742))+((r11*x7741)));
evalcond[3]=((-1.0)+((r10*x7744))+(((-1.0)*r12*x7743))+(((-1.0)*r11*x7745)));
evalcond[4]=(((r01*x7741))+((cj14*sj13))+(((-1.0)*r02*x7742))+((cj13*sj14))+(((-1.0)*gconst2*r00*x7743)));
evalcond[5]=((((-1.0)*cj13*cj14))+(((-1.0)*r22*x7742))+((sj13*sj14))+(((-1.0)*gconst2*r20*x7743))+((r21*x7741)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x7746=((1.0)*gconst1);
CheckValue<IkReal> x7747 = IKatan2WithCheck(IkReal((((gconst2*r20))+(((-1.0)*r21*x7746)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x7747.valid){
continue;
}
CheckValue<IkReal> x7748=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x7746))+(((-1.0)*gconst2*r01)))),-1);
if(!x7748.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x7747.value)+(((1.5707963267949)*(x7748.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x7749=IKcos(j16);
IkReal x7750=IKsin(j16);
IkReal x7751=(gconst1*x7750);
IkReal x7752=((1.0)*x7749);
IkReal x7753=((1.0)*x7750);
IkReal x7754=(gconst2*x7749);
IkReal x7755=(gconst1*x7752);
evalcond[0]=((((-1.0)*r22*x7753))+((r20*x7754))+(((-1.0)*r21*x7755)));
evalcond[1]=(((r00*x7754))+(((-1.0)*r02*x7753))+(((-1.0)*r01*x7755)));
evalcond[2]=((((-1.0)*gconst2*r10*x7753))+(((-1.0)*r12*x7752))+((r11*x7751)));
evalcond[3]=((-1.0)+((r10*x7754))+(((-1.0)*r11*x7755))+(((-1.0)*r12*x7753)));
evalcond[4]=(((r01*x7751))+(((-1.0)*r02*x7752))+((cj14*sj13))+((cj13*sj14))+(((-1.0)*gconst2*r00*x7753)));
evalcond[5]=((((-1.0)*cj13*cj14))+(((-1.0)*r22*x7752))+((sj13*sj14))+(((-1.0)*gconst2*r20*x7753))+((r21*x7751)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x7758 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7758.valid){
continue;
}
IkReal x7756=((-1.0)*(x7758.value));
IkReal x7757=x7617;
sj17=gconst1;
cj17=gconst2;
j17=x7756;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
sj12=1.0;
cj12=0;
j12=1.5707963267949;
IkReal gconst0=x7756;
IkReal gconst1=((-1.0)*r21*x7757);
IkReal gconst2=(r20*x7757);
j16eval[0]=1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[4];
CheckValue<IkReal> x7761 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7761.valid){
continue;
}
IkReal x7759=((-1.0)*(x7761.value));
IkReal x7760=x7617;
sj17=gconst1;
cj17=gconst2;
j17=x7759;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
sj12=1.0;
cj12=0;
j12=1.5707963267949;
IkReal gconst0=x7759;
IkReal gconst1=((-1.0)*r21*x7760);
IkReal gconst2=(r20*x7760);
IkReal x7762=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x7766=IKPowWithIntegerCheck(x7762,-1);
if(!x7766.valid){
continue;
}
IkReal x7763=x7766.value;
IkReal x7764=((1.0)*x7763);
IkReal x7765=((((-1.0)*x7764*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-1.0)*x7764*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x7763)));
j16eval[0]=x7765;
j16eval[1]=IKsign(x7765);
j16eval[2]=r02;
j16eval[3]=x7762;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  || IKabs(j16eval[3]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x7769 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7769.valid){
continue;
}
IkReal x7767=((-1.0)*(x7769.value));
IkReal x7768=x7617;
sj17=gconst1;
cj17=gconst2;
j17=x7767;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
sj12=1.0;
cj12=0;
j12=1.5707963267949;
IkReal gconst0=x7767;
IkReal gconst1=((-1.0)*r21*x7768);
IkReal gconst2=(r20*x7768);
IkReal x7770=r22*r22;
IkReal x7771=(cj13*cj14*r02);
IkReal x7772=(r02*sj13*sj14);
CheckValue<IkReal> x7776=IKPowWithIntegerCheck(((-1.0)+x7770),-1);
if(!x7776.valid){
continue;
}
IkReal x7773=x7776.value;
if((((1.0)+(((-1.0)*x7770)))) < -0.00001)
continue;
IkReal x7774=IKsqrt(((1.0)+(((-1.0)*x7770))));
IkReal x7775=(r22*x7773*x7774);
j16eval[0]=((IKabs(((((-1.0)*x7771))+x7772)))+(IKabs((((x7771*x7775))+(((-1.0)*x7772*x7775))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x7777=(gconst1*r01);
IkReal x7778=(sj13*sj14);
IkReal x7779=((1.0)*gconst2);
IkReal x7780=((1.0)*cj13*cj14);
CheckValue<IkReal> x7781 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x7780))+((r02*x7778)))),IkReal(((((-1.0)*r00*x7778*x7779))+((x7777*x7778))+((cj13*cj14*gconst2*r00))+(((-1.0)*x7777*x7780)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7781.valid){
continue;
}
CheckValue<IkReal> x7782=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x7779)))),-1);
if(!x7782.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x7781.value)+(((1.5707963267949)*(x7782.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x7783=IKcos(j16);
IkReal x7784=IKsin(j16);
IkReal x7785=((1.0)*cj14);
IkReal x7786=(gconst1*x7784);
IkReal x7787=((1.0)*x7783);
IkReal x7788=((1.0)*x7784);
IkReal x7789=(gconst2*x7783);
IkReal x7790=(gconst1*x7787);
evalcond[0]=((((-1.0)*r21*x7790))+(((-1.0)*r22*x7788))+((r20*x7789)));
evalcond[1]=((((-1.0)*r11*x7790))+((r10*x7789))+(((-1.0)*r12*x7788)));
evalcond[2]=(((r01*x7786))+(((-1.0)*r02*x7787))+(((-1.0)*gconst2*r00*x7788)));
evalcond[3]=((-1.0)+((r00*x7789))+(((-1.0)*r02*x7788))+(((-1.0)*r01*x7790)));
evalcond[4]=((((-1.0)*cj13*x7785))+(((-1.0)*gconst2*r20*x7788))+((r21*x7786))+((sj13*sj14))+(((-1.0)*r22*x7787)));
evalcond[5]=((((-1.0)*cj13*sj14))+((r11*x7786))+(((-1.0)*gconst2*r10*x7788))+(((-1.0)*r12*x7787))+(((-1.0)*sj13*x7785)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x7791=(gconst1*r01);
IkReal x7792=(gconst2*r00);
CheckValue<IkReal> x7793=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x7792*x7792)))+(((-1.0)*(r02*r02)))+(((2.0)*x7791*x7792))+(((-1.0)*(x7791*x7791))))),-1);
if(!x7793.valid){
continue;
}
CheckValue<IkReal> x7794 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x7792))+x7791)),IKFAST_ATAN2_MAGTHRESH);
if(!x7794.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7793.value)))+(x7794.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x7795=IKcos(j16);
IkReal x7796=IKsin(j16);
IkReal x7797=((1.0)*cj14);
IkReal x7798=(gconst1*x7796);
IkReal x7799=((1.0)*x7795);
IkReal x7800=((1.0)*x7796);
IkReal x7801=(gconst2*x7795);
IkReal x7802=(gconst1*x7799);
evalcond[0]=((((-1.0)*r21*x7802))+(((-1.0)*r22*x7800))+((r20*x7801)));
evalcond[1]=((((-1.0)*r12*x7800))+(((-1.0)*r11*x7802))+((r10*x7801)));
evalcond[2]=(((r01*x7798))+(((-1.0)*r02*x7799))+(((-1.0)*gconst2*r00*x7800)));
evalcond[3]=((-1.0)+((r00*x7801))+(((-1.0)*r02*x7800))+(((-1.0)*r01*x7802)));
evalcond[4]=((((-1.0)*r22*x7799))+((r21*x7798))+((sj13*sj14))+(((-1.0)*cj13*x7797))+(((-1.0)*gconst2*r20*x7800)));
evalcond[5]=((((-1.0)*sj13*x7797))+(((-1.0)*gconst2*r10*x7800))+(((-1.0)*cj13*sj14))+(((-1.0)*r12*x7799))+((r11*x7798)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x7803 = IKatan2WithCheck(IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x7803.valid){
continue;
}
CheckValue<IkReal> x7804=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x7804.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x7803.value)+(((1.5707963267949)*(x7804.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x7805=IKcos(j16);
IkReal x7806=IKsin(j16);
IkReal x7807=((1.0)*cj14);
IkReal x7808=(gconst1*x7806);
IkReal x7809=((1.0)*x7805);
IkReal x7810=((1.0)*x7806);
IkReal x7811=(gconst2*x7805);
IkReal x7812=(gconst1*x7809);
evalcond[0]=(((r20*x7811))+(((-1.0)*r21*x7812))+(((-1.0)*r22*x7810)));
evalcond[1]=(((r10*x7811))+(((-1.0)*r12*x7810))+(((-1.0)*r11*x7812)));
evalcond[2]=((((-1.0)*r02*x7809))+((r01*x7808))+(((-1.0)*gconst2*r00*x7810)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x7810))+(((-1.0)*r01*x7812))+((r00*x7811)));
evalcond[4]=((((-1.0)*cj13*x7807))+((r21*x7808))+(((-1.0)*r22*x7809))+((sj13*sj14))+(((-1.0)*gconst2*r20*x7810)));
evalcond[5]=((((-1.0)*gconst2*r10*x7810))+((r11*x7808))+(((-1.0)*r12*x7809))+(((-1.0)*cj13*sj14))+(((-1.0)*sj13*x7807)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x7815 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7815.valid){
continue;
}
IkReal x7813=((-1.0)*(x7815.value));
IkReal x7814=x7617;
sj17=gconst1;
cj17=gconst2;
j17=x7813;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
IkReal gconst0=x7813;
IkReal gconst1=((-1.0)*r21*x7814);
IkReal gconst2=(r20*x7814);
j16eval[0]=1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
CheckValue<IkReal> x7818 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7818.valid){
continue;
}
IkReal x7816=((-1.0)*(x7818.value));
IkReal x7817=x7617;
sj17=gconst1;
cj17=gconst2;
j17=x7816;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
IkReal gconst0=x7816;
IkReal gconst1=((-1.0)*r21*x7817);
IkReal gconst2=(r20*x7817);
j16eval[0]=r02;
j16eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x7821 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7821.valid){
continue;
}
IkReal x7819=((-1.0)*(x7821.value));
IkReal x7820=x7617;
sj17=gconst1;
cj17=gconst2;
j17=x7819;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
IkReal gconst0=x7819;
IkReal gconst1=((-1.0)*r21*x7820);
IkReal gconst2=(r20*x7820);
IkReal x7822=r22*r22;
IkReal x7823=(cj14*r12*sj13);
IkReal x7824=(cj13*r12*sj14);
CheckValue<IkReal> x7828=IKPowWithIntegerCheck(((-1.0)+x7822),-1);
if(!x7828.valid){
continue;
}
IkReal x7825=x7828.value;
if((((1.0)+(((-1.0)*x7822)))) < -0.00001)
continue;
IkReal x7826=IKsqrt(((1.0)+(((-1.0)*x7822))));
IkReal x7827=(r22*x7825*x7826);
j16eval[0]=((IKabs((x7823+x7824)))+(IKabs((((x7823*x7827))+((x7824*x7827))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x7829=(cj14*sj13);
IkReal x7830=(cj13*sj14);
IkReal x7831=(gconst2*r10);
IkReal x7832=((1.0)*gconst1*r11);
CheckValue<IkReal> x7833 = IKatan2WithCheck(IkReal((((x7830*x7831))+(((-1.0)*x7829*x7832))+(((-1.0)*x7830*x7832))+((x7829*x7831)))),IkReal((((r12*x7830))+((r12*x7829)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7833.valid){
continue;
}
CheckValue<IkReal> x7834=IKPowWithIntegerCheck(IKsign(((((gconst1*gconst1)*(r11*r11)))+(((-2.0)*gconst1*r11*x7831))+(x7831*x7831)+(r12*r12))),-1);
if(!x7834.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x7833.value)+(((1.5707963267949)*(x7834.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x7835=IKcos(j16);
IkReal x7836=IKsin(j16);
IkReal x7837=(gconst1*x7836);
IkReal x7838=((1.0)*x7836);
IkReal x7839=(gconst2*x7835);
IkReal x7840=((1.0)*x7835);
IkReal x7841=(gconst1*x7840);
evalcond[0]=((((-1.0)*r22*x7838))+((r20*x7839))+(((-1.0)*r21*x7841)));
evalcond[1]=(((r10*x7839))+(((-1.0)*r12*x7838))+(((-1.0)*r11*x7841)));
evalcond[2]=((((-1.0)*gconst2*r00*x7838))+((r01*x7837))+(((-1.0)*r02*x7840)));
evalcond[3]=((1.0)+(((-1.0)*r01*x7841))+(((-1.0)*r02*x7838))+((r00*x7839)));
evalcond[4]=(((cj14*sj13))+(((-1.0)*r12*x7840))+((cj13*sj14))+(((-1.0)*gconst2*r10*x7838))+((r11*x7837)));
evalcond[5]=((((-1.0)*cj13*cj14))+((r21*x7837))+(((-1.0)*r22*x7840))+(((-1.0)*gconst2*r20*x7838))+((sj13*sj14)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x7842=(gconst1*r01);
IkReal x7843=(gconst2*r00);
CheckValue<IkReal> x7844=IKPowWithIntegerCheck(IKsign(((x7842*x7842)+(x7843*x7843)+(((-2.0)*x7842*x7843))+(r02*r02))),-1);
if(!x7844.valid){
continue;
}
CheckValue<IkReal> x7845 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x7843))+x7842)),IKFAST_ATAN2_MAGTHRESH);
if(!x7845.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7844.value)))+(x7845.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x7846=IKcos(j16);
IkReal x7847=IKsin(j16);
IkReal x7848=(gconst1*x7847);
IkReal x7849=((1.0)*x7847);
IkReal x7850=(gconst2*x7846);
IkReal x7851=((1.0)*x7846);
IkReal x7852=(gconst1*x7851);
evalcond[0]=((((-1.0)*r21*x7852))+(((-1.0)*r22*x7849))+((r20*x7850)));
evalcond[1]=((((-1.0)*r11*x7852))+(((-1.0)*r12*x7849))+((r10*x7850)));
evalcond[2]=((((-1.0)*gconst2*r00*x7849))+((r01*x7848))+(((-1.0)*r02*x7851)));
evalcond[3]=((1.0)+(((-1.0)*r02*x7849))+((r00*x7850))+(((-1.0)*r01*x7852)));
evalcond[4]=(((cj14*sj13))+((cj13*sj14))+((r11*x7848))+(((-1.0)*r12*x7851))+(((-1.0)*gconst2*r10*x7849)));
evalcond[5]=((((-1.0)*cj13*cj14))+((r21*x7848))+(((-1.0)*gconst2*r20*x7849))+((sj13*sj14))+(((-1.0)*r22*x7851)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x7853=((1.0)*gconst1);
CheckValue<IkReal> x7854=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x7853))+(((-1.0)*gconst2*r11)))),-1);
if(!x7854.valid){
continue;
}
CheckValue<IkReal> x7855 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x7853))+((gconst2*r20)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x7855.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7854.value)))+(x7855.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x7856=IKcos(j16);
IkReal x7857=IKsin(j16);
IkReal x7858=(gconst1*x7857);
IkReal x7859=((1.0)*x7857);
IkReal x7860=(gconst2*x7856);
IkReal x7861=((1.0)*x7856);
IkReal x7862=(gconst1*x7861);
evalcond[0]=(((r20*x7860))+(((-1.0)*r21*x7862))+(((-1.0)*r22*x7859)));
evalcond[1]=((((-1.0)*r11*x7862))+((r10*x7860))+(((-1.0)*r12*x7859)));
evalcond[2]=((((-1.0)*gconst2*r00*x7859))+(((-1.0)*r02*x7861))+((r01*x7858)));
evalcond[3]=((1.0)+(((-1.0)*r01*x7862))+((r00*x7860))+(((-1.0)*r02*x7859)));
evalcond[4]=(((r11*x7858))+(((-1.0)*gconst2*r10*x7859))+((cj14*sj13))+((cj13*sj14))+(((-1.0)*r12*x7861)));
evalcond[5]=((((-1.0)*cj13*cj14))+((r21*x7858))+((sj13*sj14))+(((-1.0)*gconst2*r20*x7859))+(((-1.0)*r22*x7861)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
IkReal x7863=((-1.0)*px);
CheckValue<IkReal> x7865 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7865.valid){
continue;
}
IkReal x7864=((-1.0)*(x7865.value));
sj17=gconst1;
cj17=gconst2;
j17=x7864;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x7863);
rxp1_1=(px*r21);
rxp1_2=(r11*x7863);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x7864;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
j16eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
CheckValue<IkReal> x7867=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x7867.valid){
continue;
}
IkReal x7866=x7867.value;
sj16array[0]=(((cj13*cj14*x7866))+(((-1.0)*sj13*sj14*x7866)));
if( sj16array[0] >= -1-IKFAST_SINCOS_THRESH && sj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKasin(sj16array[0]);
    cj16array[0] = IKcos(j16array[0]);
    sj16array[1] = sj16array[0];
    j16array[1] = j16array[0] > 0 ? (IKPI-j16array[0]) : (-IKPI-j16array[0]);
    cj16array[1] = -cj16array[0];
}
else if( isnan(sj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[3];
IkReal x7868=IKcos(j16);
IkReal x7869=(gconst2*x7868);
IkReal x7870=((1.0)*gconst1*x7868);
evalcond[0]=((-1.0)*r02*x7868);
evalcond[1]=(((r20*x7869))+(((-1.0)*r21*x7870)));
evalcond[2]=(((r10*x7869))+(((-1.0)*r11*x7870)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j16]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x7871=(sj13*sj14);
IkReal x7872=(gconst1*r21);
IkReal x7873=(gconst2*r20);
IkReal x7874=(cj13*cj14);
CheckValue<IkReal> x7875=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x7872*x7873))+(x7872*x7872)+(x7873*x7873))),-1);
if(!x7875.valid){
continue;
}
CheckValue<IkReal> x7876 = IKatan2WithCheck(IkReal(((((-1.0)*x7873*x7874))+(((-1.0)*x7871*x7872))+((x7872*x7874))+((x7871*x7873)))),IkReal(((((-1.0)*r22*x7874))+((r22*x7871)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7876.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7875.value)))+(x7876.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x7877=IKcos(j16);
IkReal x7878=IKsin(j16);
IkReal x7879=((1.0)*cj14);
IkReal x7880=((1.0)*sj12);
IkReal x7881=(cj13*sj14);
IkReal x7882=(gconst2*x7877);
IkReal x7883=(gconst1*x7878);
IkReal x7884=((1.0)*x7877);
IkReal x7885=((1.0)*x7878);
IkReal x7886=(gconst1*x7884);
evalcond[0]=((((-1.0)*r22*x7885))+((r20*x7882))+(((-1.0)*r21*x7886)));
evalcond[1]=(((r10*x7882))+cj12+(((-1.0)*r11*x7886))+(((-1.0)*r12*x7885)));
evalcond[2]=((((-1.0)*r01*x7886))+(((-1.0)*r02*x7885))+((r00*x7882))+(((-1.0)*x7880)));
evalcond[3]=((((-1.0)*gconst2*r20*x7885))+(((-1.0)*r22*x7884))+((r21*x7883))+((sj13*sj14))+(((-1.0)*cj13*x7879)));
evalcond[4]=((((-1.0)*cj12*x7881))+((r01*x7883))+(((-1.0)*r02*x7884))+(((-1.0)*cj12*sj13*x7879))+(((-1.0)*gconst2*r00*x7885)));
evalcond[5]=((((-1.0)*x7880*x7881))+(((-1.0)*gconst2*r10*x7885))+((r11*x7883))+(((-1.0)*r12*x7884))+(((-1.0)*sj12*sj13*x7879)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x7887 = IKatan2WithCheck(IkReal((((gconst2*r20*sj12))+(((-1.0)*gconst1*r21*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x7887.valid){
continue;
}
CheckValue<IkReal> x7888=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x7888.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x7887.value)+(((1.5707963267949)*(x7888.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x7889=IKcos(j16);
IkReal x7890=IKsin(j16);
IkReal x7891=((1.0)*cj14);
IkReal x7892=((1.0)*sj12);
IkReal x7893=(cj13*sj14);
IkReal x7894=(gconst2*x7889);
IkReal x7895=(gconst1*x7890);
IkReal x7896=((1.0)*x7889);
IkReal x7897=((1.0)*x7890);
IkReal x7898=(gconst1*x7896);
evalcond[0]=((((-1.0)*r21*x7898))+(((-1.0)*r22*x7897))+((r20*x7894)));
evalcond[1]=((((-1.0)*r11*x7898))+(((-1.0)*r12*x7897))+cj12+((r10*x7894)));
evalcond[2]=((((-1.0)*x7892))+(((-1.0)*r01*x7898))+((r00*x7894))+(((-1.0)*r02*x7897)));
evalcond[3]=(((r21*x7895))+(((-1.0)*cj13*x7891))+(((-1.0)*gconst2*r20*x7897))+((sj13*sj14))+(((-1.0)*r22*x7896)));
evalcond[4]=((((-1.0)*gconst2*r00*x7897))+(((-1.0)*cj12*x7893))+(((-1.0)*cj12*sj13*x7891))+((r01*x7895))+(((-1.0)*r02*x7896)));
evalcond[5]=((((-1.0)*gconst2*r10*x7897))+(((-1.0)*r12*x7896))+(((-1.0)*sj12*sj13*x7891))+(((-1.0)*x7892*x7893))+((r11*x7895)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x7899 = IKatan2WithCheck(IkReal((((cj12*gconst2*r20))+(((-1.0)*cj12*gconst1*r21)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7899.valid){
continue;
}
CheckValue<IkReal> x7900=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x7900.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x7899.value)+(((1.5707963267949)*(x7900.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x7901=IKcos(j16);
IkReal x7902=IKsin(j16);
IkReal x7903=((1.0)*cj14);
IkReal x7904=((1.0)*sj12);
IkReal x7905=(cj13*sj14);
IkReal x7906=(gconst2*x7901);
IkReal x7907=(gconst1*x7902);
IkReal x7908=((1.0)*x7901);
IkReal x7909=((1.0)*x7902);
IkReal x7910=(gconst1*x7908);
evalcond[0]=((((-1.0)*r22*x7909))+(((-1.0)*r21*x7910))+((r20*x7906)));
evalcond[1]=((((-1.0)*r12*x7909))+((r10*x7906))+cj12+(((-1.0)*r11*x7910)));
evalcond[2]=(((r00*x7906))+(((-1.0)*x7904))+(((-1.0)*r01*x7910))+(((-1.0)*r02*x7909)));
evalcond[3]=((((-1.0)*gconst2*r20*x7909))+(((-1.0)*cj13*x7903))+((r21*x7907))+(((-1.0)*r22*x7908))+((sj13*sj14)));
evalcond[4]=((((-1.0)*cj12*sj13*x7903))+(((-1.0)*cj12*x7905))+((r01*x7907))+(((-1.0)*gconst2*r00*x7909))+(((-1.0)*r02*x7908)));
evalcond[5]=((((-1.0)*r12*x7908))+(((-1.0)*x7904*x7905))+(((-1.0)*sj12*sj13*x7903))+((r11*x7907))+(((-1.0)*gconst2*r10*x7909)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x7913 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7913.valid){
continue;
}
IkReal x7911=((-1.0)*(x7913.value));
IkReal x7912=x7617;
sj17=gconst1;
cj17=gconst2;
j17=x7911;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
IkReal gconst0=x7911;
IkReal gconst1=((-1.0)*r21*x7912);
IkReal gconst2=(r20*x7912);
j16eval[0]=cj12;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x7916 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7916.valid){
continue;
}
IkReal x7914=((-1.0)*(x7916.value));
IkReal x7915=x7617;
sj17=gconst1;
cj17=gconst2;
j17=x7914;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
IkReal gconst0=x7914;
IkReal gconst1=((-1.0)*r21*x7915);
IkReal gconst2=(r20*x7915);
j16eval[0]=sj12;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
CheckValue<IkReal> x7919 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7919.valid){
continue;
}
IkReal x7917=((-1.0)*(x7919.value));
IkReal x7918=x7617;
sj17=gconst1;
cj17=gconst2;
j17=x7917;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
IkReal gconst0=x7917;
IkReal gconst1=((-1.0)*r21*x7918);
IkReal gconst2=(r20*x7918);
IkReal x7920=((1.0)*(r22*r22));
CheckValue<IkReal> x7924=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7920))),-1);
if(!x7924.valid){
continue;
}
IkReal x7921=x7924.value;
IkReal x7922=((1.0)*x7921);
IkReal x7923=((((-1.0)*x7922*(r21*r21*r21*r21)))+(((-1.0)*x7920))+(((-1.0)*x7922*(r20*r20*r20*r20)))+(((-2.0)*x7921*(r20*r20)*(r21*r21))));
j16eval[0]=x7923;
j16eval[1]=IKsign(x7923);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j12))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x7927 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7927.valid){
continue;
}
IkReal x7925=((-1.0)*(x7927.value));
IkReal x7926=x7617;
sj17=gconst1;
cj17=gconst2;
j17=x7925;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
sj12=0;
cj12=1.0;
j12=0;
IkReal gconst0=x7925;
IkReal gconst1=((-1.0)*r21*x7926);
IkReal gconst2=(r20*x7926);
j16eval[0]=1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
CheckValue<IkReal> x7930 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7930.valid){
continue;
}
IkReal x7928=((-1.0)*(x7930.value));
IkReal x7929=x7617;
sj17=gconst1;
cj17=gconst2;
j17=x7928;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
sj12=0;
cj12=1.0;
j12=0;
IkReal gconst0=x7928;
IkReal gconst1=((-1.0)*r21*x7929);
IkReal gconst2=(r20*x7929);
j16eval[0]=r12;
j16eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x7933 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7933.valid){
continue;
}
IkReal x7931=((-1.0)*(x7933.value));
IkReal x7932=x7617;
sj17=gconst1;
cj17=gconst2;
j17=x7931;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
sj12=0;
cj12=1.0;
j12=0;
IkReal gconst0=x7931;
IkReal gconst1=((-1.0)*r21*x7932);
IkReal gconst2=(r20*x7932);
IkReal x7934=r22*r22;
IkReal x7935=((1.0)*r12);
IkReal x7936=(sj13*sj14);
IkReal x7937=(cj13*cj14);
CheckValue<IkReal> x7941=IKPowWithIntegerCheck(((-1.0)+x7934),-1);
if(!x7941.valid){
continue;
}
IkReal x7938=x7941.value;
if((((1.0)+(((-1.0)*x7934)))) < -0.00001)
continue;
IkReal x7939=IKsqrt(((1.0)+(((-1.0)*x7934))));
IkReal x7940=(r22*x7938*x7939);
j16eval[0]=((IKabs(((((-1.0)*x7935*x7936*x7940))+((r12*x7937*x7940)))))+(IKabs(((((-1.0)*x7935*x7937))+((r12*x7936))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x7942=((1.0)*gconst1);
IkReal x7943=(cj13*cj14);
IkReal x7944=(gconst2*r10);
IkReal x7945=(sj13*sj14);
CheckValue<IkReal> x7946=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x7942))+(((-1.0)*gconst2*r01)))),-1);
if(!x7946.valid){
continue;
}
CheckValue<IkReal> x7947 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x7943))+((r12*x7945)))),IkReal(((((-1.0)*x7944*x7945))+((x7943*x7944))+((gconst1*r11*x7945))+(((-1.0)*r11*x7942*x7943)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7947.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7946.value)))+(x7947.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x7948=IKsin(j16);
IkReal x7949=IKcos(j16);
IkReal x7950=((1.0)*gconst1);
IkReal x7951=((1.0)*cj13);
IkReal x7952=(gconst2*x7948);
IkReal x7953=(gconst2*x7949);
IkReal x7954=((1.0)*x7948);
evalcond[0]=((((-1.0)*r11*x7948*x7950))+((r12*x7949))+((r10*x7952)));
evalcond[1]=((((-1.0)*r21*x7949*x7950))+(((-1.0)*r22*x7954))+((r20*x7953)));
evalcond[2]=(((r00*x7953))+(((-1.0)*r02*x7954))+(((-1.0)*r01*x7949*x7950)));
evalcond[3]=((1.0)+(((-1.0)*r11*x7949*x7950))+((r10*x7953))+(((-1.0)*r12*x7954)));
evalcond[4]=(((sj13*sj14))+((r20*x7952))+(((-1.0)*cj14*x7951))+(((-1.0)*r21*x7948*x7950))+((r22*x7949)));
evalcond[5]=(((r00*x7952))+(((-1.0)*sj14*x7951))+((r02*x7949))+(((-1.0)*r01*x7948*x7950))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x7955=(gconst2*r10);
IkReal x7956=(gconst1*r11);
CheckValue<IkReal> x7957 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x7955))+x7956)),IKFAST_ATAN2_MAGTHRESH);
if(!x7957.valid){
continue;
}
CheckValue<IkReal> x7958=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x7955*x7955)+(((-2.0)*x7955*x7956))+(x7956*x7956))),-1);
if(!x7958.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x7957.value)+(((1.5707963267949)*(x7958.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x7959=IKsin(j16);
IkReal x7960=IKcos(j16);
IkReal x7961=((1.0)*gconst1);
IkReal x7962=((1.0)*cj13);
IkReal x7963=(gconst2*x7959);
IkReal x7964=(gconst2*x7960);
IkReal x7965=((1.0)*x7959);
evalcond[0]=(((r12*x7960))+(((-1.0)*r11*x7959*x7961))+((r10*x7963)));
evalcond[1]=((((-1.0)*r22*x7965))+(((-1.0)*r21*x7960*x7961))+((r20*x7964)));
evalcond[2]=(((r00*x7964))+(((-1.0)*r02*x7965))+(((-1.0)*r01*x7960*x7961)));
evalcond[3]=((1.0)+(((-1.0)*r11*x7960*x7961))+(((-1.0)*r12*x7965))+((r10*x7964)));
evalcond[4]=(((sj13*sj14))+((r20*x7963))+(((-1.0)*r21*x7959*x7961))+(((-1.0)*cj14*x7962))+((r22*x7960)));
evalcond[5]=((((-1.0)*r01*x7959*x7961))+((r00*x7963))+(((-1.0)*sj14*x7962))+((r02*x7960))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x7966 = IKatan2WithCheck(IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x7966.valid){
continue;
}
CheckValue<IkReal> x7967=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x7967.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x7966.value)+(((1.5707963267949)*(x7967.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x7968=IKsin(j16);
IkReal x7969=IKcos(j16);
IkReal x7970=((1.0)*gconst1);
IkReal x7971=((1.0)*cj13);
IkReal x7972=(gconst2*x7968);
IkReal x7973=(gconst2*x7969);
IkReal x7974=((1.0)*x7968);
evalcond[0]=(((r12*x7969))+(((-1.0)*r11*x7968*x7970))+((r10*x7972)));
evalcond[1]=((((-1.0)*r22*x7974))+((r20*x7973))+(((-1.0)*r21*x7969*x7970)));
evalcond[2]=((((-1.0)*r01*x7969*x7970))+((r00*x7973))+(((-1.0)*r02*x7974)));
evalcond[3]=((1.0)+(((-1.0)*r11*x7969*x7970))+(((-1.0)*r12*x7974))+((r10*x7973)));
evalcond[4]=((((-1.0)*r21*x7968*x7970))+((r20*x7972))+((sj13*sj14))+(((-1.0)*cj14*x7971))+((r22*x7969)));
evalcond[5]=((((-1.0)*r01*x7968*x7970))+((r00*x7972))+(((-1.0)*sj14*x7971))+((r02*x7969))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x7977 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7977.valid){
continue;
}
IkReal x7975=((-1.0)*(x7977.value));
IkReal x7976=x7617;
sj17=gconst1;
cj17=gconst2;
j17=x7975;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
IkReal gconst0=x7975;
IkReal gconst1=((-1.0)*r21*x7976);
IkReal gconst2=(r20*x7976);
j16eval[0]=1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[4];
CheckValue<IkReal> x7980 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7980.valid){
continue;
}
IkReal x7978=((-1.0)*(x7980.value));
IkReal x7979=x7617;
sj17=gconst1;
cj17=gconst2;
j17=x7978;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
IkReal gconst0=x7978;
IkReal gconst1=((-1.0)*r21*x7979);
IkReal gconst2=(r20*x7979);
IkReal x7981=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x7985=IKPowWithIntegerCheck(x7981,-1);
if(!x7985.valid){
continue;
}
IkReal x7982=x7985.value;
IkReal x7983=((1.0)*x7982);
IkReal x7984=((((-1.0)*x7983*(r10*r10)*(r20*r20)))+(((-1.0)*x7983*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x7982))+(((-1.0)*(r12*r12))));
j16eval[0]=x7984;
j16eval[1]=IKsign(x7984);
j16eval[2]=r12;
j16eval[3]=x7981;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  || IKabs(j16eval[3]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x7988 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7988.valid){
continue;
}
IkReal x7986=((-1.0)*(x7988.value));
IkReal x7987=x7617;
sj17=gconst1;
cj17=gconst2;
j17=x7986;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
IkReal gconst0=x7986;
IkReal gconst1=((-1.0)*r21*x7987);
IkReal gconst2=(r20*x7987);
IkReal x7989=r22*r22;
IkReal x7990=((1.0)*r12);
IkReal x7991=(sj13*sj14);
IkReal x7992=(cj13*cj14);
CheckValue<IkReal> x7996=IKPowWithIntegerCheck(((-1.0)+x7989),-1);
if(!x7996.valid){
continue;
}
IkReal x7993=x7996.value;
if((((1.0)+(((-1.0)*x7989)))) < -0.00001)
continue;
IkReal x7994=IKsqrt(((1.0)+(((-1.0)*x7989))));
IkReal x7995=(r22*x7993*x7994);
j16eval[0]=((IKabs((((r12*x7992*x7995))+(((-1.0)*x7990*x7991*x7995)))))+(IKabs(((((-1.0)*x7990*x7992))+((r12*x7991))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x7997=((1.0)*gconst1);
IkReal x7998=(cj13*cj14);
IkReal x7999=(gconst2*r10);
IkReal x8000=(sj13*sj14);
CheckValue<IkReal> x8001 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x7998))+((r12*x8000)))),IkReal((((gconst1*r11*x8000))+(((-1.0)*r11*x7997*x7998))+(((-1.0)*x7999*x8000))+((x7998*x7999)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8001.valid){
continue;
}
CheckValue<IkReal> x8002=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x7997))+(((-1.0)*gconst2*r01)))),-1);
if(!x8002.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x8001.value)+(((1.5707963267949)*(x8002.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x8003=IKsin(j16);
IkReal x8004=IKcos(j16);
IkReal x8005=((1.0)*gconst1);
IkReal x8006=(gconst2*x8003);
IkReal x8007=(gconst2*x8004);
IkReal x8008=((1.0)*x8003);
evalcond[0]=(((r12*x8004))+(((-1.0)*r11*x8003*x8005))+((r10*x8006)));
evalcond[1]=((((-1.0)*r21*x8004*x8005))+((r20*x8007))+(((-1.0)*r22*x8008)));
evalcond[2]=(((r00*x8007))+(((-1.0)*r01*x8004*x8005))+(((-1.0)*r02*x8008)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x8004*x8005))+(((-1.0)*r12*x8008))+((r10*x8007)));
evalcond[4]=(((r00*x8006))+((cj14*sj13))+((r02*x8004))+((cj13*sj14))+(((-1.0)*r01*x8003*x8005)));
evalcond[5]=((((-1.0)*cj13*cj14))+((r20*x8006))+((sj13*sj14))+((r22*x8004))+(((-1.0)*r21*x8003*x8005)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x8009=(gconst1*r11);
IkReal x8010=(gconst2*r10);
CheckValue<IkReal> x8011 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x8010))+x8009)),IKFAST_ATAN2_MAGTHRESH);
if(!x8011.valid){
continue;
}
CheckValue<IkReal> x8012=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8010*x8010)))+(((-1.0)*(x8009*x8009)))+(((-1.0)*(r12*r12)))+(((2.0)*x8009*x8010)))),-1);
if(!x8012.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x8011.value)+(((1.5707963267949)*(x8012.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x8013=IKsin(j16);
IkReal x8014=IKcos(j16);
IkReal x8015=((1.0)*gconst1);
IkReal x8016=(gconst2*x8013);
IkReal x8017=(gconst2*x8014);
IkReal x8018=((1.0)*x8013);
evalcond[0]=(((r12*x8014))+(((-1.0)*r11*x8013*x8015))+((r10*x8016)));
evalcond[1]=((((-1.0)*r22*x8018))+((r20*x8017))+(((-1.0)*r21*x8014*x8015)));
evalcond[2]=((((-1.0)*r02*x8018))+((r00*x8017))+(((-1.0)*r01*x8014*x8015)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x8014*x8015))+((r10*x8017))+(((-1.0)*r12*x8018)));
evalcond[4]=(((r02*x8014))+(((-1.0)*r01*x8013*x8015))+((cj14*sj13))+((r00*x8016))+((cj13*sj14)));
evalcond[5]=((((-1.0)*cj13*cj14))+(((-1.0)*r21*x8013*x8015))+((r22*x8014))+((sj13*sj14))+((r20*x8016)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x8019=((1.0)*gconst1);
CheckValue<IkReal> x8020 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x8019))+((gconst2*r20)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x8020.valid){
continue;
}
CheckValue<IkReal> x8021=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x8019))+(((-1.0)*gconst2*r01)))),-1);
if(!x8021.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x8020.value)+(((1.5707963267949)*(x8021.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x8022=IKsin(j16);
IkReal x8023=IKcos(j16);
IkReal x8024=((1.0)*gconst1);
IkReal x8025=(gconst2*x8022);
IkReal x8026=(gconst2*x8023);
IkReal x8027=((1.0)*x8022);
evalcond[0]=(((r10*x8025))+((r12*x8023))+(((-1.0)*r11*x8022*x8024)));
evalcond[1]=(((r20*x8026))+(((-1.0)*r21*x8023*x8024))+(((-1.0)*r22*x8027)));
evalcond[2]=((((-1.0)*r02*x8027))+((r00*x8026))+(((-1.0)*r01*x8023*x8024)));
evalcond[3]=((-1.0)+((r10*x8026))+(((-1.0)*r12*x8027))+(((-1.0)*r11*x8023*x8024)));
evalcond[4]=(((cj14*sj13))+((cj13*sj14))+((r02*x8023))+(((-1.0)*r01*x8022*x8024))+((r00*x8025)));
evalcond[5]=((((-1.0)*cj13*cj14))+(((-1.0)*r21*x8022*x8024))+((r20*x8025))+((sj13*sj14))+((r22*x8023)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x8030 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8030.valid){
continue;
}
IkReal x8028=((-1.0)*(x8030.value));
IkReal x8029=x7617;
sj17=gconst1;
cj17=gconst2;
j17=x8028;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
sj12=1.0;
cj12=0;
j12=1.5707963267949;
IkReal gconst0=x8028;
IkReal gconst1=((-1.0)*r21*x8029);
IkReal gconst2=(r20*x8029);
j16eval[0]=1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[4];
CheckValue<IkReal> x8033 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8033.valid){
continue;
}
IkReal x8031=((-1.0)*(x8033.value));
IkReal x8032=x7617;
sj17=gconst1;
cj17=gconst2;
j17=x8031;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
sj12=1.0;
cj12=0;
j12=1.5707963267949;
IkReal gconst0=x8031;
IkReal gconst1=((-1.0)*r21*x8032);
IkReal gconst2=(r20*x8032);
IkReal x8034=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8038=IKPowWithIntegerCheck(x8034,-1);
if(!x8038.valid){
continue;
}
IkReal x8035=x8038.value;
IkReal x8036=((1.0)*x8035);
IkReal x8037=((((-1.0)*x8036*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x8035))+(((-1.0)*(r02*r02)))+(((-1.0)*x8036*(r00*r00)*(r20*r20))));
j16eval[0]=x8037;
j16eval[1]=IKsign(x8037);
j16eval[2]=r02;
j16eval[3]=x8034;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  || IKabs(j16eval[3]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x8041 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8041.valid){
continue;
}
IkReal x8039=((-1.0)*(x8041.value));
IkReal x8040=x7617;
sj17=gconst1;
cj17=gconst2;
j17=x8039;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
sj12=1.0;
cj12=0;
j12=1.5707963267949;
IkReal gconst0=x8039;
IkReal gconst1=((-1.0)*r21*x8040);
IkReal gconst2=(r20*x8040);
IkReal x8042=r22*r22;
IkReal x8043=(cj13*cj14*r02);
IkReal x8044=(r02*sj13*sj14);
CheckValue<IkReal> x8048=IKPowWithIntegerCheck(((-1.0)+x8042),-1);
if(!x8048.valid){
continue;
}
IkReal x8045=x8048.value;
if((((1.0)+(((-1.0)*x8042)))) < -0.00001)
continue;
IkReal x8046=IKsqrt(((1.0)+(((-1.0)*x8042))));
IkReal x8047=(r22*x8045*x8046);
j16eval[0]=((IKabs(((((-1.0)*x8044*x8047))+((x8043*x8047)))))+(IKabs(((((-1.0)*x8043))+x8044))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x8049=(gconst1*r01);
IkReal x8050=(sj13*sj14);
IkReal x8051=(gconst2*r00);
IkReal x8052=((1.0)*cj13*cj14);
CheckValue<IkReal> x8053=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8053.valid){
continue;
}
CheckValue<IkReal> x8054 = IKatan2WithCheck(IkReal((((r02*x8050))+(((-1.0)*r02*x8052)))),IkReal((((cj13*cj14*x8051))+(((-1.0)*x8049*x8052))+((x8049*x8050))+(((-1.0)*x8050*x8051)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8054.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8053.value)))+(x8054.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x8055=IKsin(j16);
IkReal x8056=IKcos(j16);
IkReal x8057=((1.0)*gconst1);
IkReal x8058=((1.0)*cj13);
IkReal x8059=(gconst2*x8055);
IkReal x8060=(gconst2*x8056);
IkReal x8061=((1.0)*x8055);
evalcond[0]=(((r00*x8059))+((r02*x8056))+(((-1.0)*r01*x8055*x8057)));
evalcond[1]=((((-1.0)*r21*x8056*x8057))+((r20*x8060))+(((-1.0)*r22*x8061)));
evalcond[2]=(((r10*x8060))+(((-1.0)*r12*x8061))+(((-1.0)*r11*x8056*x8057)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x8056*x8057))+((r00*x8060))+(((-1.0)*r02*x8061)));
evalcond[4]=(((r20*x8059))+(((-1.0)*r21*x8055*x8057))+(((-1.0)*cj14*x8058))+((sj13*sj14))+((r22*x8056)));
evalcond[5]=(((r10*x8059))+(((-1.0)*sj14*x8058))+(((-1.0)*r11*x8055*x8057))+((r12*x8056))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x8062=(gconst1*r01);
IkReal x8063=(gconst2*r00);
CheckValue<IkReal> x8064=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x8063*x8063)))+(((-1.0)*(x8062*x8062)))+(((2.0)*x8062*x8063)))),-1);
if(!x8064.valid){
continue;
}
CheckValue<IkReal> x8065 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x8063))+x8062)),IKFAST_ATAN2_MAGTHRESH);
if(!x8065.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8064.value)))+(x8065.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x8066=IKsin(j16);
IkReal x8067=IKcos(j16);
IkReal x8068=((1.0)*gconst1);
IkReal x8069=((1.0)*cj13);
IkReal x8070=(gconst2*x8066);
IkReal x8071=(gconst2*x8067);
IkReal x8072=((1.0)*x8066);
evalcond[0]=((((-1.0)*r01*x8066*x8068))+((r00*x8070))+((r02*x8067)));
evalcond[1]=(((r20*x8071))+(((-1.0)*r22*x8072))+(((-1.0)*r21*x8067*x8068)));
evalcond[2]=(((r10*x8071))+(((-1.0)*r12*x8072))+(((-1.0)*r11*x8067*x8068)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8072))+(((-1.0)*r01*x8067*x8068))+((r00*x8071)));
evalcond[4]=(((r22*x8067))+((r20*x8070))+(((-1.0)*cj14*x8069))+((sj13*sj14))+(((-1.0)*r21*x8066*x8068)));
evalcond[5]=(((r10*x8070))+(((-1.0)*sj14*x8069))+(((-1.0)*r11*x8066*x8068))+(((-1.0)*cj14*sj13))+((r12*x8067)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x8073 = IKatan2WithCheck(IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x8073.valid){
continue;
}
CheckValue<IkReal> x8074=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8074.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x8073.value)+(((1.5707963267949)*(x8074.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x8075=IKsin(j16);
IkReal x8076=IKcos(j16);
IkReal x8077=((1.0)*gconst1);
IkReal x8078=((1.0)*cj13);
IkReal x8079=(gconst2*x8075);
IkReal x8080=(gconst2*x8076);
IkReal x8081=((1.0)*x8075);
evalcond[0]=(((r02*x8076))+(((-1.0)*r01*x8075*x8077))+((r00*x8079)));
evalcond[1]=((((-1.0)*r21*x8076*x8077))+(((-1.0)*r22*x8081))+((r20*x8080)));
evalcond[2]=((((-1.0)*r11*x8076*x8077))+((r10*x8080))+(((-1.0)*r12*x8081)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8081))+((r00*x8080))+(((-1.0)*r01*x8076*x8077)));
evalcond[4]=(((r20*x8079))+(((-1.0)*r21*x8075*x8077))+(((-1.0)*cj14*x8078))+((r22*x8076))+((sj13*sj14)));
evalcond[5]=(((r10*x8079))+((r12*x8076))+(((-1.0)*sj14*x8078))+(((-1.0)*r11*x8075*x8077))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x8084 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8084.valid){
continue;
}
IkReal x8082=((-1.0)*(x8084.value));
IkReal x8083=x7617;
sj17=gconst1;
cj17=gconst2;
j17=x8082;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
IkReal gconst0=x8082;
IkReal gconst1=((-1.0)*r21*x8083);
IkReal gconst2=(r20*x8083);
j16eval[0]=1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
CheckValue<IkReal> x8087 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8087.valid){
continue;
}
IkReal x8085=((-1.0)*(x8087.value));
IkReal x8086=x7617;
sj17=gconst1;
cj17=gconst2;
j17=x8085;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
IkReal gconst0=x8085;
IkReal gconst1=((-1.0)*r21*x8086);
IkReal gconst2=(r20*x8086);
j16eval[0]=r02;
j16eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x8090 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8090.valid){
continue;
}
IkReal x8088=((-1.0)*(x8090.value));
IkReal x8089=x7617;
sj17=gconst1;
cj17=gconst2;
j17=x8088;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
IkReal gconst0=x8088;
IkReal gconst1=((-1.0)*r21*x8089);
IkReal gconst2=(r20*x8089);
IkReal x8091=r22*r22;
IkReal x8092=(cj13*cj14*r02);
IkReal x8093=(r02*sj13*sj14);
CheckValue<IkReal> x8097=IKPowWithIntegerCheck(((-1.0)+x8091),-1);
if(!x8097.valid){
continue;
}
IkReal x8094=x8097.value;
if((((1.0)+(((-1.0)*x8091)))) < -0.00001)
continue;
IkReal x8095=IKsqrt(((1.0)+(((-1.0)*x8091))));
IkReal x8096=(r22*x8094*x8095);
j16eval[0]=((IKabs(((((-1.0)*x8092))+x8093)))+(IKabs(((((-1.0)*x8093*x8096))+((x8092*x8096))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x8098=(gconst1*r01);
IkReal x8099=(sj13*sj14);
IkReal x8100=(gconst2*r00);
IkReal x8101=((1.0)*cj13*cj14);
CheckValue<IkReal> x8102 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x8101))+((r02*x8099)))),IkReal((((x8098*x8099))+(((-1.0)*x8098*x8101))+(((-1.0)*x8099*x8100))+((cj13*cj14*x8100)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8102.valid){
continue;
}
CheckValue<IkReal> x8103=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8103.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x8102.value)+(((1.5707963267949)*(x8103.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x8104=IKsin(j16);
IkReal x8105=IKcos(j16);
IkReal x8106=((1.0)*gconst1);
IkReal x8107=(gconst2*x8104);
IkReal x8108=(gconst2*x8105);
IkReal x8109=((1.0)*x8104);
evalcond[0]=(((r02*x8105))+(((-1.0)*r01*x8104*x8106))+((r00*x8107)));
evalcond[1]=(((r20*x8108))+(((-1.0)*r22*x8109))+(((-1.0)*r21*x8105*x8106)));
evalcond[2]=((((-1.0)*r11*x8105*x8106))+((r10*x8108))+(((-1.0)*r12*x8109)));
evalcond[3]=((1.0)+(((-1.0)*r01*x8105*x8106))+((r00*x8108))+(((-1.0)*r02*x8109)));
evalcond[4]=(((cj14*sj13))+(((-1.0)*r11*x8104*x8106))+((cj13*sj14))+((r10*x8107))+((r12*x8105)));
evalcond[5]=((((-1.0)*cj13*cj14))+((r20*x8107))+(((-1.0)*r21*x8104*x8106))+((sj13*sj14))+((r22*x8105)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x8110=(gconst1*r01);
IkReal x8111=(gconst2*r00);
CheckValue<IkReal> x8112=IKPowWithIntegerCheck(IKsign(((((-2.0)*x8110*x8111))+(x8111*x8111)+(x8110*x8110)+(r02*r02))),-1);
if(!x8112.valid){
continue;
}
CheckValue<IkReal> x8113 = IKatan2WithCheck(IkReal(r02),IkReal((x8110+(((-1.0)*x8111)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8113.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8112.value)))+(x8113.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x8114=IKsin(j16);
IkReal x8115=IKcos(j16);
IkReal x8116=((1.0)*gconst1);
IkReal x8117=(gconst2*x8114);
IkReal x8118=(gconst2*x8115);
IkReal x8119=((1.0)*x8114);
evalcond[0]=(((r02*x8115))+(((-1.0)*r01*x8114*x8116))+((r00*x8117)));
evalcond[1]=((((-1.0)*r21*x8115*x8116))+((r20*x8118))+(((-1.0)*r22*x8119)));
evalcond[2]=((((-1.0)*r12*x8119))+((r10*x8118))+(((-1.0)*r11*x8115*x8116)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8119))+(((-1.0)*r01*x8115*x8116))+((r00*x8118)));
evalcond[4]=(((cj14*sj13))+((r12*x8115))+((cj13*sj14))+((r10*x8117))+(((-1.0)*r11*x8114*x8116)));
evalcond[5]=((((-1.0)*cj13*cj14))+((r20*x8117))+(((-1.0)*r21*x8114*x8116))+((sj13*sj14))+((r22*x8115)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x8120=((1.0)*gconst1);
CheckValue<IkReal> x8121=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r11))+(((-1.0)*r10*x8120)))),-1);
if(!x8121.valid){
continue;
}
CheckValue<IkReal> x8122 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x8120))+((gconst2*r20)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x8122.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8121.value)))+(x8122.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x8123=IKsin(j16);
IkReal x8124=IKcos(j16);
IkReal x8125=((1.0)*gconst1);
IkReal x8126=(gconst2*x8123);
IkReal x8127=(gconst2*x8124);
IkReal x8128=((1.0)*x8123);
evalcond[0]=(((r02*x8124))+((r00*x8126))+(((-1.0)*r01*x8123*x8125)));
evalcond[1]=(((r20*x8127))+(((-1.0)*r21*x8124*x8125))+(((-1.0)*r22*x8128)));
evalcond[2]=((((-1.0)*r12*x8128))+(((-1.0)*r11*x8124*x8125))+((r10*x8127)));
evalcond[3]=((1.0)+((r00*x8127))+(((-1.0)*r02*x8128))+(((-1.0)*r01*x8124*x8125)));
evalcond[4]=(((cj14*sj13))+(((-1.0)*r11*x8123*x8125))+((r10*x8126))+((r12*x8124))+((cj13*sj14)));
evalcond[5]=((((-1.0)*cj13*cj14))+((r20*x8126))+(((-1.0)*r21*x8123*x8125))+((sj13*sj14))+((r22*x8124)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
IkReal x8129=((-1.0)*px);
CheckValue<IkReal> x8131 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8131.valid){
continue;
}
IkReal x8130=((-1.0)*(x8131.value));
sj17=gconst1;
cj17=gconst2;
j17=x8130;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8129);
rxp1_1=(px*r21);
rxp1_2=(r11*x8129);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8130;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
j16eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
CheckValue<IkReal> x8133=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x8133.valid){
continue;
}
IkReal x8132=x8133.value;
sj16array[0]=(((cj13*cj14*x8132))+(((-1.0)*sj13*sj14*x8132)));
if( sj16array[0] >= -1-IKFAST_SINCOS_THRESH && sj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKasin(sj16array[0]);
    cj16array[0] = IKcos(j16array[0]);
    sj16array[1] = sj16array[0];
    j16array[1] = j16array[0] > 0 ? (IKPI-j16array[0]) : (-IKPI-j16array[0]);
    cj16array[1] = -cj16array[0];
}
else if( isnan(sj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[3];
IkReal x8134=IKcos(j16);
IkReal x8135=(gconst2*x8134);
IkReal x8136=((1.0)*gconst1*x8134);
evalcond[0]=(r02*x8134);
evalcond[1]=(((r20*x8135))+(((-1.0)*r21*x8136)));
evalcond[2]=((((-1.0)*r11*x8136))+((r10*x8135)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j16]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x8137=(sj13*sj14);
IkReal x8138=(gconst1*r21);
IkReal x8139=(gconst2*r20);
IkReal x8140=(cj13*cj14);
CheckValue<IkReal> x8141=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8138*x8138)))+(((-1.0)*(x8139*x8139)))+(((-1.0)*(r22*r22)))+(((2.0)*x8138*x8139)))),-1);
if(!x8141.valid){
continue;
}
CheckValue<IkReal> x8142 = IKatan2WithCheck(IkReal((((x8137*x8139))+(((-1.0)*x8137*x8138))+((x8138*x8140))+(((-1.0)*x8139*x8140)))),IkReal((((r22*x8137))+(((-1.0)*r22*x8140)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8142.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8141.value)))+(x8142.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x8143=IKcos(j16);
IkReal x8144=IKsin(j16);
IkReal x8145=((1.0)*cj14);
IkReal x8146=((1.0)*gconst1);
IkReal x8147=((1.0)*sj12);
IkReal x8148=(cj13*sj14);
IkReal x8149=(gconst2*x8144);
IkReal x8150=(gconst2*x8143);
IkReal x8151=((1.0)*x8144);
evalcond[0]=(((r20*x8150))+(((-1.0)*r21*x8143*x8146))+(((-1.0)*r22*x8151)));
evalcond[1]=(((r10*x8150))+cj12+(((-1.0)*r11*x8143*x8146))+(((-1.0)*r12*x8151)));
evalcond[2]=((((-1.0)*r01*x8143*x8146))+(((-1.0)*r02*x8151))+((r00*x8150))+(((-1.0)*x8147)));
evalcond[3]=((((-1.0)*cj13*x8145))+((r20*x8149))+((r22*x8143))+((sj13*sj14))+(((-1.0)*r21*x8144*x8146)));
evalcond[4]=((((-1.0)*r01*x8144*x8146))+(((-1.0)*cj12*x8148))+((r00*x8149))+(((-1.0)*cj12*sj13*x8145))+((r02*x8143)));
evalcond[5]=(((r10*x8149))+(((-1.0)*sj12*sj13*x8145))+(((-1.0)*r11*x8144*x8146))+((r12*x8143))+(((-1.0)*x8147*x8148)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x8152 = IKatan2WithCheck(IkReal((((gconst2*r20*sj12))+(((-1.0)*gconst1*r21*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x8152.valid){
continue;
}
CheckValue<IkReal> x8153=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8153.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x8152.value)+(((1.5707963267949)*(x8153.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x8154=IKcos(j16);
IkReal x8155=IKsin(j16);
IkReal x8156=((1.0)*cj14);
IkReal x8157=((1.0)*gconst1);
IkReal x8158=((1.0)*sj12);
IkReal x8159=(cj13*sj14);
IkReal x8160=(gconst2*x8155);
IkReal x8161=(gconst2*x8154);
IkReal x8162=((1.0)*x8155);
evalcond[0]=((((-1.0)*r21*x8154*x8157))+((r20*x8161))+(((-1.0)*r22*x8162)));
evalcond[1]=((((-1.0)*r11*x8154*x8157))+((r10*x8161))+(((-1.0)*r12*x8162))+cj12);
evalcond[2]=((((-1.0)*x8158))+(((-1.0)*r02*x8162))+((r00*x8161))+(((-1.0)*r01*x8154*x8157)));
evalcond[3]=((((-1.0)*r21*x8155*x8157))+((r22*x8154))+((sj13*sj14))+((r20*x8160))+(((-1.0)*cj13*x8156)));
evalcond[4]=(((r00*x8160))+(((-1.0)*cj12*x8159))+(((-1.0)*r01*x8155*x8157))+(((-1.0)*cj12*sj13*x8156))+((r02*x8154)));
evalcond[5]=(((r10*x8160))+(((-1.0)*x8158*x8159))+(((-1.0)*r11*x8155*x8157))+((r12*x8154))+(((-1.0)*sj12*sj13*x8156)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x8163 = IKatan2WithCheck(IkReal((((cj12*gconst2*r20))+(((-1.0)*cj12*gconst1*r21)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8163.valid){
continue;
}
CheckValue<IkReal> x8164=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8164.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x8163.value)+(((1.5707963267949)*(x8164.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x8165=IKcos(j16);
IkReal x8166=IKsin(j16);
IkReal x8167=((1.0)*cj14);
IkReal x8168=((1.0)*gconst1);
IkReal x8169=((1.0)*sj12);
IkReal x8170=(cj13*sj14);
IkReal x8171=(gconst2*x8166);
IkReal x8172=(gconst2*x8165);
IkReal x8173=((1.0)*x8166);
evalcond[0]=(((r20*x8172))+(((-1.0)*r22*x8173))+(((-1.0)*r21*x8165*x8168)));
evalcond[1]=((((-1.0)*r12*x8173))+(((-1.0)*r11*x8165*x8168))+cj12+((r10*x8172)));
evalcond[2]=((((-1.0)*r01*x8165*x8168))+(((-1.0)*x8169))+(((-1.0)*r02*x8173))+((r00*x8172)));
evalcond[3]=(((r22*x8165))+((r20*x8171))+((sj13*sj14))+(((-1.0)*r21*x8166*x8168))+(((-1.0)*cj13*x8167)));
evalcond[4]=((((-1.0)*cj12*sj13*x8167))+(((-1.0)*r01*x8166*x8168))+((r02*x8165))+((r00*x8171))+(((-1.0)*cj12*x8170)));
evalcond[5]=(((r12*x8165))+(((-1.0)*x8169*x8170))+(((-1.0)*sj12*sj13*x8167))+((r10*x8171))+(((-1.0)*r11*x8166*x8168)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j12))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x8176 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8176.valid){
continue;
}
IkReal x8174=((-1.0)*(x8176.value));
IkReal x8175=x7617;
sj17=gconst1;
cj17=gconst2;
j17=x8174;
sj12=0;
cj12=1.0;
j12=0;
IkReal gconst0=x8174;
IkReal gconst1=((-1.0)*r21*x8175);
IkReal gconst2=(r20*x8175);
j16eval[0]=1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x8179 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8179.valid){
continue;
}
IkReal x8177=((-1.0)*(x8179.value));
IkReal x8178=x7617;
sj17=gconst1;
cj17=gconst2;
j17=x8177;
sj12=0;
cj12=1.0;
j12=0;
IkReal gconst0=x8177;
IkReal gconst1=((-1.0)*r21*x8178);
IkReal gconst2=(r20*x8178);
CheckValue<IkReal> x8187=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x8187.valid){
continue;
}
IkReal x8180=x8187.value;
IkReal x8181=(cj15*x8180);
IkReal x8182=(r11*x8181);
IkReal x8183=(r01*x8181);
IkReal x8184=(r00*x8181);
IkReal x8185=(r10*x8181);
IkReal x8186=(r20*r21*x8181);
j16eval[0]=IKsign((((r00*r20*r21*x8182))+((cj15*r02*r12))+((r01*x8182*(r21*r21)))+((r10*x8184*(r20*r20)))+((r10*r20*r21*x8183))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x8190 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8190.valid){
continue;
}
IkReal x8188=((-1.0)*(x8190.value));
IkReal x8189=x7617;
sj17=gconst1;
cj17=gconst2;
j17=x8188;
sj12=0;
cj12=1.0;
j12=0;
IkReal gconst0=x8188;
IkReal gconst1=((-1.0)*r21*x8189);
IkReal gconst2=(r20*x8189);
CheckValue<IkReal> x8198=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x8198.valid){
continue;
}
IkReal x8191=x8198.value;
IkReal x8192=(sj15*x8191);
IkReal x8193=(r11*x8192);
IkReal x8194=(r00*x8192);
IkReal x8195=(r01*x8192);
IkReal x8196=(r10*x8192);
IkReal x8197=(r20*r21*x8192);
j16eval[0]=IKsign((((r10*x8194*(r20*r20)))+((r00*r20*r21*x8193))+((r02*r12*sj15))+((r01*x8193*(r21*r21)))+((r10*r20*r21*x8195))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j15))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x8201 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8201.valid){
continue;
}
IkReal x8199=((-1.0)*(x8201.value));
IkReal x8200=x7617;
sj17=gconst1;
cj17=gconst2;
j17=x8199;
sj12=0;
cj12=1.0;
j12=0;
sj15=0;
cj15=1.0;
j15=0;
IkReal gconst0=x8199;
IkReal gconst1=((-1.0)*r21*x8200);
IkReal gconst2=(r20*x8200);
j16eval[0]=1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
CheckValue<IkReal> x8204 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8204.valid){
continue;
}
IkReal x8202=((-1.0)*(x8204.value));
IkReal x8203=x7617;
sj17=gconst1;
cj17=gconst2;
j17=x8202;
sj12=0;
cj12=1.0;
j12=0;
sj15=0;
cj15=1.0;
j15=0;
IkReal gconst0=x8202;
IkReal gconst1=((-1.0)*r21*x8203);
IkReal gconst2=(r20*x8203);
j16eval[0]=r12;
j16eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x8207 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8207.valid){
continue;
}
IkReal x8205=((-1.0)*(x8207.value));
IkReal x8206=x7617;
sj17=gconst1;
cj17=gconst2;
j17=x8205;
sj12=0;
cj12=1.0;
j12=0;
sj15=0;
cj15=1.0;
j15=0;
IkReal gconst0=x8205;
IkReal gconst1=((-1.0)*r21*x8206);
IkReal gconst2=(r20*x8206);
IkReal x8208=r22*r22;
IkReal x8209=(cj13*cj14*r02);
CheckValue<IkReal> x8214=IKPowWithIntegerCheck(((-1.0)+x8208),-1);
if(!x8214.valid){
continue;
}
IkReal x8210=x8214.value;
IkReal x8211=((1.0)*r02*sj13*sj14);
if((((1.0)+(((-1.0)*x8208)))) < -0.00001)
continue;
IkReal x8212=IKsqrt(((1.0)+(((-1.0)*x8208))));
IkReal x8213=(r22*x8210*x8212);
j16eval[0]=((IKabs(((((-1.0)*x8211))+x8209)))+(IKabs((((x8209*x8213))+(((-1.0)*x8211*x8213))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x8215=(gconst1*r01);
IkReal x8216=(cj13*cj14);
IkReal x8217=(sj13*sj14);
IkReal x8218=(gconst2*r00);
CheckValue<IkReal> x8219 = IKatan2WithCheck(IkReal((((x8216*x8218))+(((-1.0)*x8215*x8216))+(((-1.0)*x8217*x8218))+((x8215*x8217)))),IkReal((((r02*x8216))+(((-1.0)*r02*x8217)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8219.valid){
continue;
}
CheckValue<IkReal> x8220=IKPowWithIntegerCheck(IKsign(((x8218*x8218)+(x8215*x8215)+(((-2.0)*x8215*x8218))+(r02*r02))),-1);
if(!x8220.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x8219.value)+(((1.5707963267949)*(x8220.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x8221=IKcos(j16);
IkReal x8222=IKsin(j16);
IkReal x8223=((1.0)*sj13);
IkReal x8224=(gconst1*x8222);
IkReal x8225=((1.0)*x8221);
IkReal x8226=((1.0)*x8222);
IkReal x8227=(gconst2*x8221);
IkReal x8228=(gconst1*x8225);
evalcond[0]=(((r20*x8227))+(((-1.0)*r22*x8226))+(((-1.0)*r21*x8228)));
evalcond[1]=((((-1.0)*r02*x8226))+((r00*x8227))+(((-1.0)*r01*x8228)));
evalcond[2]=(((r11*x8224))+(((-1.0)*gconst2*r10*x8226))+(((-1.0)*r12*x8225)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8226))+((r10*x8227))+(((-1.0)*r11*x8228)));
evalcond[4]=((((-1.0)*r02*x8225))+(((-1.0)*gconst2*r00*x8226))+((r01*x8224))+((cj13*cj14))+(((-1.0)*sj14*x8223)));
evalcond[5]=((((-1.0)*cj13*sj14))+(((-1.0)*cj14*x8223))+((r21*x8224))+(((-1.0)*gconst2*r20*x8226))+(((-1.0)*r22*x8225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x8229=(gconst2*r10);
IkReal x8230=(gconst1*r11);
CheckValue<IkReal> x8231 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x8229))+x8230)),IKFAST_ATAN2_MAGTHRESH);
if(!x8231.valid){
continue;
}
CheckValue<IkReal> x8232=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x8229*x8229)+(x8230*x8230)+(((-2.0)*x8229*x8230)))),-1);
if(!x8232.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x8231.value)+(((1.5707963267949)*(x8232.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x8233=IKcos(j16);
IkReal x8234=IKsin(j16);
IkReal x8235=((1.0)*sj13);
IkReal x8236=(gconst1*x8234);
IkReal x8237=((1.0)*x8233);
IkReal x8238=((1.0)*x8234);
IkReal x8239=(gconst2*x8233);
IkReal x8240=(gconst1*x8237);
evalcond[0]=(((r20*x8239))+(((-1.0)*r21*x8240))+(((-1.0)*r22*x8238)));
evalcond[1]=((((-1.0)*r02*x8238))+((r00*x8239))+(((-1.0)*r01*x8240)));
evalcond[2]=((((-1.0)*gconst2*r10*x8238))+((r11*x8236))+(((-1.0)*r12*x8237)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8238))+((r10*x8239))+(((-1.0)*r11*x8240)));
evalcond[4]=((((-1.0)*r02*x8237))+((r01*x8236))+(((-1.0)*gconst2*r00*x8238))+(((-1.0)*sj14*x8235))+((cj13*cj14)));
evalcond[5]=((((-1.0)*cj13*sj14))+(((-1.0)*cj14*x8235))+((r21*x8236))+(((-1.0)*gconst2*r20*x8238))+(((-1.0)*r22*x8237)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x8241 = IKatan2WithCheck(IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x8241.valid){
continue;
}
CheckValue<IkReal> x8242=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8242.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x8241.value)+(((1.5707963267949)*(x8242.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x8243=IKcos(j16);
IkReal x8244=IKsin(j16);
IkReal x8245=((1.0)*sj13);
IkReal x8246=(gconst1*x8244);
IkReal x8247=((1.0)*x8243);
IkReal x8248=((1.0)*x8244);
IkReal x8249=(gconst2*x8243);
IkReal x8250=(gconst1*x8247);
evalcond[0]=(((r20*x8249))+(((-1.0)*r22*x8248))+(((-1.0)*r21*x8250)));
evalcond[1]=((((-1.0)*r01*x8250))+(((-1.0)*r02*x8248))+((r00*x8249)));
evalcond[2]=((((-1.0)*gconst2*r10*x8248))+((r11*x8246))+(((-1.0)*r12*x8247)));
evalcond[3]=((1.0)+((r10*x8249))+(((-1.0)*r11*x8250))+(((-1.0)*r12*x8248)));
evalcond[4]=((((-1.0)*gconst2*r00*x8248))+(((-1.0)*r02*x8247))+(((-1.0)*sj14*x8245))+((cj13*cj14))+((r01*x8246)));
evalcond[5]=((((-1.0)*gconst2*r20*x8248))+(((-1.0)*cj13*sj14))+(((-1.0)*r22*x8247))+((r21*x8246))+(((-1.0)*cj14*x8245)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x8253 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8253.valid){
continue;
}
IkReal x8251=((-1.0)*(x8253.value));
IkReal x8252=x7617;
sj17=gconst1;
cj17=gconst2;
j17=x8251;
sj12=0;
cj12=1.0;
j12=0;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
IkReal gconst0=x8251;
IkReal gconst1=((-1.0)*r21*x8252);
IkReal gconst2=(r20*x8252);
j16eval[0]=1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
CheckValue<IkReal> x8256 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8256.valid){
continue;
}
IkReal x8254=((-1.0)*(x8256.value));
IkReal x8255=x7617;
sj17=gconst1;
cj17=gconst2;
j17=x8254;
sj12=0;
cj12=1.0;
j12=0;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
IkReal gconst0=x8254;
IkReal gconst1=((-1.0)*r21*x8255);
IkReal gconst2=(r20*x8255);
j16eval[0]=r12;
j16eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x8259 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8259.valid){
continue;
}
IkReal x8257=((-1.0)*(x8259.value));
IkReal x8258=x7617;
sj17=gconst1;
cj17=gconst2;
j17=x8257;
sj12=0;
cj12=1.0;
j12=0;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
IkReal gconst0=x8257;
IkReal gconst1=((-1.0)*r21*x8258);
IkReal gconst2=(r20*x8258);
IkReal x8260=r22*r22;
IkReal x8261=(cj14*r12*sj13);
IkReal x8262=(cj13*r12*sj14);
CheckValue<IkReal> x8266=IKPowWithIntegerCheck(((-1.0)+x8260),-1);
if(!x8266.valid){
continue;
}
IkReal x8263=x8266.value;
if((((1.0)+(((-1.0)*x8260)))) < -0.00001)
continue;
IkReal x8264=IKsqrt(((1.0)+(((-1.0)*x8260))));
IkReal x8265=(r22*x8263*x8264);
j16eval[0]=((IKabs(((((-1.0)*x8261))+(((-1.0)*x8262)))))+(IKabs((((x8261*x8265))+((x8262*x8265))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x8267=((1.0)*gconst1);
IkReal x8268=(cj13*sj14);
IkReal x8269=(gconst2*r10);
IkReal x8270=((1.0)*r12);
IkReal x8271=(cj14*sj13);
CheckValue<IkReal> x8272=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r01))+(((-1.0)*r00*x8267)))),-1);
if(!x8272.valid){
continue;
}
CheckValue<IkReal> x8273 = IKatan2WithCheck(IkReal(((((-1.0)*x8268*x8270))+(((-1.0)*x8270*x8271)))),IkReal((((x8268*x8269))+((x8269*x8271))+(((-1.0)*r11*x8267*x8268))+(((-1.0)*r11*x8267*x8271)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8273.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8272.value)))+(x8273.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x8274=IKsin(j16);
IkReal x8275=IKcos(j16);
IkReal x8276=((1.0)*gconst1);
IkReal x8277=((1.0)*sj14);
IkReal x8278=(gconst2*x8274);
IkReal x8279=(gconst2*x8275);
IkReal x8280=((1.0)*x8274);
evalcond[0]=((((-1.0)*r11*x8274*x8276))+((r12*x8275))+((r10*x8278)));
evalcond[1]=(((r20*x8279))+(((-1.0)*r21*x8275*x8276))+(((-1.0)*r22*x8280)));
evalcond[2]=((((-1.0)*r02*x8280))+(((-1.0)*r01*x8275*x8276))+((r00*x8279)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8280))+(((-1.0)*r11*x8275*x8276))+((r10*x8279)));
evalcond[4]=((((-1.0)*r01*x8274*x8276))+((r02*x8275))+(((-1.0)*sj13*x8277))+((cj13*cj14))+((r00*x8278)));
evalcond[5]=(((r20*x8278))+(((-1.0)*cj13*x8277))+(((-1.0)*r21*x8274*x8276))+((r22*x8275))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x8281=(gconst2*r10);
IkReal x8282=(gconst1*r11);
CheckValue<IkReal> x8283=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x8282*x8282)+(((-2.0)*x8281*x8282))+(x8281*x8281))),-1);
if(!x8283.valid){
continue;
}
CheckValue<IkReal> x8284 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x8281))+x8282)),IKFAST_ATAN2_MAGTHRESH);
if(!x8284.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8283.value)))+(x8284.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x8285=IKsin(j16);
IkReal x8286=IKcos(j16);
IkReal x8287=((1.0)*gconst1);
IkReal x8288=((1.0)*sj14);
IkReal x8289=(gconst2*x8285);
IkReal x8290=(gconst2*x8286);
IkReal x8291=((1.0)*x8285);
evalcond[0]=(((r10*x8289))+(((-1.0)*r11*x8285*x8287))+((r12*x8286)));
evalcond[1]=(((r20*x8290))+(((-1.0)*r21*x8286*x8287))+(((-1.0)*r22*x8291)));
evalcond[2]=(((r00*x8290))+(((-1.0)*r02*x8291))+(((-1.0)*r01*x8286*x8287)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8291))+((r10*x8290))+(((-1.0)*r11*x8286*x8287)));
evalcond[4]=(((r00*x8289))+(((-1.0)*r01*x8285*x8287))+((r02*x8286))+((cj13*cj14))+(((-1.0)*sj13*x8288)));
evalcond[5]=(((r20*x8289))+(((-1.0)*cj13*x8288))+((r22*x8286))+(((-1.0)*cj14*sj13))+(((-1.0)*r21*x8285*x8287)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x8292 = IKatan2WithCheck(IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x8292.valid){
continue;
}
CheckValue<IkReal> x8293=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8293.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x8292.value)+(((1.5707963267949)*(x8293.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x8294=IKsin(j16);
IkReal x8295=IKcos(j16);
IkReal x8296=((1.0)*gconst1);
IkReal x8297=((1.0)*sj14);
IkReal x8298=(gconst2*x8294);
IkReal x8299=(gconst2*x8295);
IkReal x8300=((1.0)*x8294);
evalcond[0]=(((r10*x8298))+((r12*x8295))+(((-1.0)*r11*x8294*x8296)));
evalcond[1]=((((-1.0)*r22*x8300))+(((-1.0)*r21*x8295*x8296))+((r20*x8299)));
evalcond[2]=((((-1.0)*r01*x8295*x8296))+((r00*x8299))+(((-1.0)*r02*x8300)));
evalcond[3]=((1.0)+((r10*x8299))+(((-1.0)*r11*x8295*x8296))+(((-1.0)*r12*x8300)));
evalcond[4]=((((-1.0)*r01*x8294*x8296))+((r00*x8298))+((r02*x8295))+((cj13*cj14))+(((-1.0)*sj13*x8297)));
evalcond[5]=(((r20*x8298))+(((-1.0)*cj13*x8297))+(((-1.0)*cj14*sj13))+((r22*x8295))+(((-1.0)*r21*x8294*x8296)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[2];
IkReal x8301=((-1.0)*px);
CheckValue<IkReal> x8303 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8303.valid){
continue;
}
IkReal x8302=((-1.0)*(x8303.value));
sj17=gconst1;
cj17=gconst2;
j17=x8302;
sj12=0;
cj12=1.0;
j12=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8301);
rxp1_1=(px*r21);
rxp1_2=(r11*x8301);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8302;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x8304=((1.0)*sj15);
IkReal x8305=(r11*r21);
IkReal x8306=(r10*r20);
j16eval[0]=((((-1.0)*x8304*x8305))+(((-1.0)*x8304*x8306)));
j16eval[1]=(x8306+x8305);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x8307=((-1.0)*px);
CheckValue<IkReal> x8309 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8309.valid){
continue;
}
IkReal x8308=((-1.0)*(x8309.value));
sj17=gconst1;
cj17=gconst2;
j17=x8308;
sj12=0;
cj12=1.0;
j12=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8307);
rxp1_1=(px*r21);
rxp1_2=(r11*x8307);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8308;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x8310=(r10*r20);
IkReal x8311=((1.0)*cj15);
IkReal x8312=(r11*r21);
j16eval[0]=((((-1.0)*x8310*x8311))+(((-1.0)*x8311*x8312)));
j16eval[1]=(x8310+x8312);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
IkReal x8313=((-1.0)*px);
CheckValue<IkReal> x8315 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8315.valid){
continue;
}
IkReal x8314=((-1.0)*(x8315.value));
sj17=gconst1;
cj17=gconst2;
j17=x8314;
sj12=0;
cj12=1.0;
j12=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8313);
rxp1_1=(px*r21);
rxp1_2=(r11*x8313);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8314;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x8316=((1.0)*cj15);
j16eval[0]=((((-1.0)*r11*r21*x8316))+(((-1.0)*r10*r20*x8316)));
j16eval[1]=cj15;
j16eval[2]=r02;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x8317=((1.0)*r10);
CheckValue<IkReal> x8318=IKPowWithIntegerCheck((((cj15*gconst1*r11))+(((-1.0)*cj15*gconst2*x8317))),-1);
if(!x8318.valid){
continue;
}
CheckValue<IkReal> x8319=IKPowWithIntegerCheck(cj15,-1);
if(!x8319.valid){
continue;
}
CheckValue<IkReal> x8320=IKPowWithIntegerCheck(r02,-1);
if(!x8320.valid){
continue;
}
if( IKabs(((x8318.value)*(((((-1.0)*gconst1*sj15*x8317))+(((-1.0)*gconst2*r11*sj15)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x8319.value)*(x8320.value)*(((((-1.0)*sj13*sj14))+((cj13*cj14)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x8318.value)*(((((-1.0)*gconst1*sj15*x8317))+(((-1.0)*gconst2*r11*sj15))))))+IKsqr(((x8319.value)*(x8320.value)*(((((-1.0)*sj13*sj14))+((cj13*cj14))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x8318.value)*(((((-1.0)*gconst1*sj15*x8317))+(((-1.0)*gconst2*r11*sj15))))), ((x8319.value)*(x8320.value)*(((((-1.0)*sj13*sj14))+((cj13*cj14))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x8321=IKcos(j16);
IkReal x8322=IKsin(j16);
IkReal x8323=(gconst1*r21);
IkReal x8324=((1.0)*gconst2);
IkReal x8325=(gconst1*r11);
IkReal x8326=(cj13*cj14);
IkReal x8327=((1.0)*sj13);
IkReal x8328=(gconst1*r20);
IkReal x8329=(gconst2*sj15);
IkReal x8330=((1.0)*cj15);
IkReal x8331=(gconst1*r10);
IkReal x8332=(cj14*x8327);
IkReal x8333=((1.0)*cj13*sj14);
IkReal x8334=((1.0)*x8321);
IkReal x8335=(cj15*x8322);
IkReal x8336=(gconst2*x8321);
IkReal x8337=(sj15*x8322);
IkReal x8338=(x8332+x8333);
evalcond[0]=((-1.0)*r02*x8322);
evalcond[1]=(((r20*x8336))+(((-1.0)*x8323*x8334)));
evalcond[2]=((1.0)+((r10*x8336))+(((-1.0)*x8325*x8334)));
evalcond[3]=(x8326+(((-1.0)*sj14*x8327))+(((-1.0)*r02*x8321*x8330)));
evalcond[4]=((((-1.0)*r02*sj15*x8334))+(((-1.0)*x8338)));
evalcond[5]=((((-1.0)*r10*x8324*x8335))+((x8325*x8335))+((r11*x8329))+((sj15*x8331)));
evalcond[6]=((((-1.0)*r10*x8324*x8337))+((x8325*x8337))+(((-1.0)*cj15*r11*x8324))+(((-1.0)*x8330*x8331)));
evalcond[7]=(((x8323*x8335))+(((-1.0)*r20*x8324*x8335))+((r21*x8329))+(((-1.0)*x8338))+((sj15*x8328)));
evalcond[8]=(((x8323*x8337))+(((-1.0)*r20*x8324*x8337))+(((-1.0)*cj15*r21*x8324))+(((-1.0)*x8326))+((sj13*sj14))+(((-1.0)*x8328*x8330)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x8339=((1.0)*r11);
IkReal x8340=(gconst2*r10);
CheckValue<IkReal> x8341=IKPowWithIntegerCheck((((cj15*gconst1*r11))+(((-1.0)*cj15*x8340))),-1);
if(!x8341.valid){
continue;
}
CheckValue<IkReal> x8342=IKPowWithIntegerCheck((x8340+(((-1.0)*gconst1*x8339))),-1);
if(!x8342.valid){
continue;
}
if( IKabs(((x8341.value)*(((((-1.0)*gconst2*sj15*x8339))+(((-1.0)*gconst1*r10*sj15)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x8342.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x8341.value)*(((((-1.0)*gconst2*sj15*x8339))+(((-1.0)*gconst1*r10*sj15))))))+IKsqr(((-1.0)*(x8342.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x8341.value)*(((((-1.0)*gconst2*sj15*x8339))+(((-1.0)*gconst1*r10*sj15))))), ((-1.0)*(x8342.value)));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x8343=IKcos(j16);
IkReal x8344=IKsin(j16);
IkReal x8345=(gconst1*r21);
IkReal x8346=((1.0)*gconst2);
IkReal x8347=(gconst1*r11);
IkReal x8348=(cj13*cj14);
IkReal x8349=((1.0)*sj13);
IkReal x8350=(gconst1*r20);
IkReal x8351=(gconst2*sj15);
IkReal x8352=((1.0)*cj15);
IkReal x8353=(gconst1*r10);
IkReal x8354=(cj14*x8349);
IkReal x8355=((1.0)*cj13*sj14);
IkReal x8356=((1.0)*x8343);
IkReal x8357=(cj15*x8344);
IkReal x8358=(gconst2*x8343);
IkReal x8359=(sj15*x8344);
IkReal x8360=(x8354+x8355);
evalcond[0]=((-1.0)*r02*x8344);
evalcond[1]=((((-1.0)*x8345*x8356))+((r20*x8358)));
evalcond[2]=((1.0)+((r10*x8358))+(((-1.0)*x8347*x8356)));
evalcond[3]=(x8348+(((-1.0)*r02*x8343*x8352))+(((-1.0)*sj14*x8349)));
evalcond[4]=((((-1.0)*x8360))+(((-1.0)*r02*sj15*x8356)));
evalcond[5]=(((r11*x8351))+(((-1.0)*r10*x8346*x8357))+((sj15*x8353))+((x8347*x8357)));
evalcond[6]=((((-1.0)*x8352*x8353))+(((-1.0)*cj15*r11*x8346))+(((-1.0)*r10*x8346*x8359))+((x8347*x8359)));
evalcond[7]=((((-1.0)*r20*x8346*x8357))+((x8345*x8357))+((r21*x8351))+((sj15*x8350))+(((-1.0)*x8360)));
evalcond[8]=((((-1.0)*r20*x8346*x8359))+(((-1.0)*cj15*r21*x8346))+(((-1.0)*x8348))+((sj13*sj14))+((x8345*x8359))+(((-1.0)*x8350*x8352)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x8361=(gconst1*r11);
IkReal x8362=(gconst2*r10);
CheckValue<IkReal> x8363=IKPowWithIntegerCheck((((sj15*x8361))+(((-1.0)*sj15*x8362))),-1);
if(!x8363.valid){
continue;
}
CheckValue<IkReal> x8364=IKPowWithIntegerCheck((x8362+(((-1.0)*x8361))),-1);
if(!x8364.valid){
continue;
}
if( IKabs(((x8363.value)*((((cj15*gconst1*r10))+((cj15*gconst2*r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x8364.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x8363.value)*((((cj15*gconst1*r10))+((cj15*gconst2*r11))))))+IKsqr(((-1.0)*(x8364.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x8363.value)*((((cj15*gconst1*r10))+((cj15*gconst2*r11))))), ((-1.0)*(x8364.value)));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x8365=IKcos(j16);
IkReal x8366=IKsin(j16);
IkReal x8367=(gconst1*r21);
IkReal x8368=((1.0)*gconst2);
IkReal x8369=(gconst1*r11);
IkReal x8370=(cj13*cj14);
IkReal x8371=((1.0)*sj13);
IkReal x8372=(gconst1*r20);
IkReal x8373=(gconst2*sj15);
IkReal x8374=((1.0)*cj15);
IkReal x8375=(gconst1*r10);
IkReal x8376=(cj14*x8371);
IkReal x8377=((1.0)*cj13*sj14);
IkReal x8378=((1.0)*x8365);
IkReal x8379=(cj15*x8366);
IkReal x8380=(gconst2*x8365);
IkReal x8381=(sj15*x8366);
IkReal x8382=(x8376+x8377);
evalcond[0]=((-1.0)*r02*x8366);
evalcond[1]=((((-1.0)*x8367*x8378))+((r20*x8380)));
evalcond[2]=((1.0)+(((-1.0)*x8369*x8378))+((r10*x8380)));
evalcond[3]=(x8370+(((-1.0)*r02*x8365*x8374))+(((-1.0)*sj14*x8371)));
evalcond[4]=((((-1.0)*r02*sj15*x8378))+(((-1.0)*x8382)));
evalcond[5]=(((x8369*x8379))+((sj15*x8375))+((r11*x8373))+(((-1.0)*r10*x8368*x8379)));
evalcond[6]=((((-1.0)*x8374*x8375))+(((-1.0)*cj15*r11*x8368))+(((-1.0)*r10*x8368*x8381))+((x8369*x8381)));
evalcond[7]=((((-1.0)*x8382))+((r21*x8373))+((sj15*x8372))+(((-1.0)*r20*x8368*x8379))+((x8367*x8379)));
evalcond[8]=((((-1.0)*x8372*x8374))+((sj13*sj14))+(((-1.0)*x8370))+(((-1.0)*cj15*r21*x8368))+((x8367*x8381))+(((-1.0)*r20*x8368*x8381)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j16]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x8383=gconst1*gconst1;
IkReal x8384=gconst2*gconst2;
IkReal x8385=(r11*sj15);
IkReal x8386=(gconst1*gconst2);
IkReal x8387=((1.0)*r00);
IkReal x8388=(cj15*r11);
IkReal x8389=(cj15*r10);
IkReal x8390=((1.0)*r02);
IkReal x8391=(r10*sj15);
IkReal x8392=(r01*x8383);
CheckValue<IkReal> x8393 = IKatan2WithCheck(IkReal((((r01*x8386*x8388))+(((-1.0)*x8384*x8387*x8388))+((x8389*x8392))+(((-1.0)*x8386*x8387*x8389)))),IkReal(((((-1.0)*gconst2*x8388*x8390))+(((-1.0)*gconst1*x8389*x8390)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8393.valid){
continue;
}
CheckValue<IkReal> x8394=IKPowWithIntegerCheck(IKsign((((r02*r12*sj15))+(((-1.0)*x8385*x8386*x8387))+(((-1.0)*r01*x8386*x8391))+((r00*x8384*x8391))+((x8385*x8392)))),-1);
if(!x8394.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x8393.value)+(((1.5707963267949)*(x8394.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x8395=IKcos(j16);
IkReal x8396=IKsin(j16);
IkReal x8397=(gconst1*r21);
IkReal x8398=(gconst2*r10);
IkReal x8399=(gconst2*sj15);
IkReal x8400=((1.0)*cj15);
IkReal x8401=(gconst1*r00);
IkReal x8402=((1.0)*sj13);
IkReal x8403=(gconst1*r11);
IkReal x8404=(cj13*cj14);
IkReal x8405=(gconst1*r01);
IkReal x8406=(gconst1*r20);
IkReal x8407=(gconst2*r00);
IkReal x8408=(gconst1*r10);
IkReal x8409=(cj14*x8402);
IkReal x8410=((1.0)*cj13*sj14);
IkReal x8411=((1.0)*x8395);
IkReal x8412=((1.0)*x8396);
IkReal x8413=(sj15*x8396);
IkReal x8414=(cj15*x8396);
IkReal x8415=(gconst2*r20*x8412);
IkReal x8416=(x8409+x8410);
evalcond[0]=(((gconst2*r20*x8395))+(((-1.0)*x8397*x8411))+(((-1.0)*r22*x8412)));
evalcond[1]=(((x8395*x8407))+(((-1.0)*x8405*x8411))+(((-1.0)*r02*x8412)));
evalcond[2]=((1.0)+(((-1.0)*r12*x8412))+((x8395*x8398))+(((-1.0)*x8403*x8411)));
evalcond[3]=(((sj15*x8408))+(((-1.0)*x8396*x8398*x8400))+(((-1.0)*r12*x8395*x8400))+((x8403*x8414))+((r11*x8399)));
evalcond[4]=((((-1.0)*gconst2*r11*x8400))+(((-1.0)*r12*sj15*x8411))+(((-1.0)*x8400*x8408))+(((-1.0)*sj15*x8398*x8412))+((x8403*x8413)));
evalcond[5]=((((-1.0)*sj14*x8402))+x8404+((x8405*x8414))+((sj15*x8401))+((r01*x8399))+(((-1.0)*r02*x8395*x8400))+(((-1.0)*x8396*x8400*x8407)));
evalcond[6]=((((-1.0)*r22*x8395*x8400))+((x8397*x8414))+(((-1.0)*gconst2*r20*x8396*x8400))+((sj15*x8406))+(((-1.0)*x8416))+((r21*x8399)));
evalcond[7]=((((-1.0)*r22*sj15*x8411))+((x8397*x8413))+(((-1.0)*x8404))+(((-1.0)*gconst2*r21*x8400))+(((-1.0)*x8400*x8406))+((sj13*sj14))+(((-1.0)*r20*x8399*x8412)));
evalcond[8]=(((x8405*x8413))+(((-1.0)*r00*x8399*x8412))+(((-1.0)*x8400*x8401))+(((-1.0)*x8416))+(((-1.0)*gconst2*r01*x8400))+(((-1.0)*r02*sj15*x8411)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x8417=gconst2*gconst2;
IkReal x8418=gconst1*gconst1;
IkReal x8419=(r00*sj15);
IkReal x8420=(cj15*r01);
IkReal x8421=(r02*sj15);
IkReal x8422=(gconst2*r11);
IkReal x8423=(cj15*r00);
IkReal x8424=((1.0)*gconst1);
IkReal x8425=(r01*sj15);
IkReal x8426=(gconst1*gconst2*r10);
CheckValue<IkReal> x8427=IKPowWithIntegerCheck(IKsign((((cj15*r02*r12))+(((-1.0)*x8422*x8423*x8424))+((r11*x8418*x8420))+((r10*x8417*x8423))+(((-1.0)*gconst2*r10*x8420*x8424)))),-1);
if(!x8427.valid){
continue;
}
CheckValue<IkReal> x8428 = IKatan2WithCheck(IkReal((((r11*x8417*x8419))+(((-1.0)*r10*x8418*x8425))+(((-1.0)*x8422*x8424*x8425))+((x8419*x8426)))),IkReal((((x8421*x8422))+((gconst1*r10*x8421)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8428.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8427.value)))+(x8428.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x8429=IKcos(j16);
IkReal x8430=IKsin(j16);
IkReal x8431=(gconst1*r21);
IkReal x8432=(gconst2*r10);
IkReal x8433=(gconst2*sj15);
IkReal x8434=((1.0)*cj15);
IkReal x8435=(gconst1*r00);
IkReal x8436=((1.0)*sj13);
IkReal x8437=(gconst1*r11);
IkReal x8438=(cj13*cj14);
IkReal x8439=(gconst1*r01);
IkReal x8440=(gconst1*r20);
IkReal x8441=(gconst2*r00);
IkReal x8442=(gconst1*r10);
IkReal x8443=(cj14*x8436);
IkReal x8444=((1.0)*cj13*sj14);
IkReal x8445=((1.0)*x8429);
IkReal x8446=((1.0)*x8430);
IkReal x8447=(sj15*x8430);
IkReal x8448=(cj15*x8430);
IkReal x8449=(gconst2*r20*x8446);
IkReal x8450=(x8444+x8443);
evalcond[0]=((((-1.0)*x8431*x8445))+((gconst2*r20*x8429))+(((-1.0)*r22*x8446)));
evalcond[1]=(((x8429*x8441))+(((-1.0)*r02*x8446))+(((-1.0)*x8439*x8445)));
evalcond[2]=((1.0)+((x8429*x8432))+(((-1.0)*r12*x8446))+(((-1.0)*x8437*x8445)));
evalcond[3]=((((-1.0)*r12*x8429*x8434))+((sj15*x8442))+((x8437*x8448))+((r11*x8433))+(((-1.0)*x8430*x8432*x8434)));
evalcond[4]=((((-1.0)*x8434*x8442))+(((-1.0)*gconst2*r11*x8434))+(((-1.0)*sj15*x8432*x8446))+((x8437*x8447))+(((-1.0)*r12*sj15*x8445)));
evalcond[5]=(((r01*x8433))+x8438+(((-1.0)*r02*x8429*x8434))+((x8439*x8448))+(((-1.0)*sj14*x8436))+((sj15*x8435))+(((-1.0)*x8430*x8434*x8441)));
evalcond[6]=(((r21*x8433))+((x8431*x8448))+(((-1.0)*gconst2*r20*x8430*x8434))+((sj15*x8440))+(((-1.0)*r22*x8429*x8434))+(((-1.0)*x8450)));
evalcond[7]=(((x8431*x8447))+(((-1.0)*r20*x8433*x8446))+(((-1.0)*gconst2*r21*x8434))+(((-1.0)*x8434*x8440))+(((-1.0)*x8438))+((sj13*sj14))+(((-1.0)*r22*sj15*x8445)));
evalcond[8]=((((-1.0)*r02*sj15*x8445))+(((-1.0)*r00*x8433*x8446))+((x8439*x8447))+(((-1.0)*x8434*x8435))+(((-1.0)*x8450))+(((-1.0)*gconst2*r01*x8434)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x8451 = IKatan2WithCheck(IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x8451.valid){
continue;
}
CheckValue<IkReal> x8452=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8452.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x8451.value)+(((1.5707963267949)*(x8452.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x8453=IKcos(j16);
IkReal x8454=IKsin(j16);
IkReal x8455=(gconst1*r21);
IkReal x8456=(gconst2*r10);
IkReal x8457=(gconst2*sj15);
IkReal x8458=((1.0)*cj15);
IkReal x8459=(gconst1*r00);
IkReal x8460=((1.0)*sj13);
IkReal x8461=(gconst1*r11);
IkReal x8462=(cj13*cj14);
IkReal x8463=(gconst1*r01);
IkReal x8464=(gconst1*r20);
IkReal x8465=(gconst2*r00);
IkReal x8466=(gconst1*r10);
IkReal x8467=(cj14*x8460);
IkReal x8468=((1.0)*cj13*sj14);
IkReal x8469=((1.0)*x8453);
IkReal x8470=((1.0)*x8454);
IkReal x8471=(sj15*x8454);
IkReal x8472=(cj15*x8454);
IkReal x8473=(gconst2*r20*x8470);
IkReal x8474=(x8467+x8468);
evalcond[0]=((((-1.0)*x8455*x8469))+((gconst2*r20*x8453))+(((-1.0)*r22*x8470)));
evalcond[1]=(((x8453*x8465))+(((-1.0)*r02*x8470))+(((-1.0)*x8463*x8469)));
evalcond[2]=((1.0)+((x8453*x8456))+(((-1.0)*r12*x8470))+(((-1.0)*x8461*x8469)));
evalcond[3]=(((r11*x8457))+(((-1.0)*x8454*x8456*x8458))+((sj15*x8466))+((x8461*x8472))+(((-1.0)*r12*x8453*x8458)));
evalcond[4]=((((-1.0)*r12*sj15*x8469))+(((-1.0)*sj15*x8456*x8470))+((x8461*x8471))+(((-1.0)*gconst2*r11*x8458))+(((-1.0)*x8458*x8466)));
evalcond[5]=(x8462+(((-1.0)*r02*x8453*x8458))+((sj15*x8459))+((r01*x8457))+((x8463*x8472))+(((-1.0)*sj14*x8460))+(((-1.0)*x8454*x8458*x8465)));
evalcond[6]=(((r21*x8457))+(((-1.0)*x8474))+(((-1.0)*r22*x8453*x8458))+((x8455*x8472))+(((-1.0)*gconst2*r20*x8454*x8458))+((sj15*x8464)));
evalcond[7]=((((-1.0)*x8462))+((x8455*x8471))+(((-1.0)*r20*x8457*x8470))+(((-1.0)*gconst2*r21*x8458))+((sj13*sj14))+(((-1.0)*r22*sj15*x8469))+(((-1.0)*x8458*x8464)));
evalcond[8]=((((-1.0)*x8458*x8459))+(((-1.0)*x8474))+(((-1.0)*r02*sj15*x8469))+(((-1.0)*r00*x8457*x8470))+(((-1.0)*gconst2*r01*x8458))+((x8463*x8471)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x8477 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8477.valid){
continue;
}
IkReal x8475=((-1.0)*(x8477.value));
IkReal x8476=x7617;
sj17=gconst1;
cj17=gconst2;
j17=x8475;
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
IkReal gconst0=x8475;
IkReal gconst1=((-1.0)*r21*x8476);
IkReal gconst2=(r20*x8476);
j16eval[0]=1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x8480 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8480.valid){
continue;
}
IkReal x8478=((-1.0)*(x8480.value));
IkReal x8479=x7617;
sj17=gconst1;
cj17=gconst2;
j17=x8478;
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
IkReal gconst0=x8478;
IkReal gconst1=((-1.0)*r21*x8479);
IkReal gconst2=(r20*x8479);
CheckValue<IkReal> x8488=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x8488.valid){
continue;
}
IkReal x8481=x8488.value;
IkReal x8482=(cj15*x8481);
IkReal x8483=(r11*x8482);
IkReal x8484=(r01*x8482);
IkReal x8485=(r00*x8482);
IkReal x8486=(r10*x8482);
IkReal x8487=(r20*r21*x8482);
j16eval[0]=IKsign((((r01*x8483*(r21*r21)))+((cj15*r02*r12))+((r10*x8485*(r20*r20)))+((r00*r20*r21*x8483))+((r10*r20*r21*x8484))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x8491 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8491.valid){
continue;
}
IkReal x8489=((-1.0)*(x8491.value));
IkReal x8490=x7617;
sj17=gconst1;
cj17=gconst2;
j17=x8489;
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
IkReal gconst0=x8489;
IkReal gconst1=((-1.0)*r21*x8490);
IkReal gconst2=(r20*x8490);
CheckValue<IkReal> x8499=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x8499.valid){
continue;
}
IkReal x8492=x8499.value;
IkReal x8493=(sj15*x8492);
IkReal x8494=(r11*x8493);
IkReal x8495=(r00*x8493);
IkReal x8496=(r01*x8493);
IkReal x8497=(r10*x8493);
IkReal x8498=(r20*r21*x8493);
j16eval[0]=IKsign((((r10*r20*r21*x8496))+((r01*x8494*(r21*r21)))+((r02*r12*sj15))+((r10*x8495*(r20*r20)))+((r00*r20*r21*x8494))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j15))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x8502 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8502.valid){
continue;
}
IkReal x8500=((-1.0)*(x8502.value));
IkReal x8501=x7617;
sj17=gconst1;
cj17=gconst2;
j17=x8500;
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj15=0;
cj15=1.0;
j15=0;
IkReal gconst0=x8500;
IkReal gconst1=((-1.0)*r21*x8501);
IkReal gconst2=(r20*x8501);
j16eval[0]=1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[4];
CheckValue<IkReal> x8505 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8505.valid){
continue;
}
IkReal x8503=((-1.0)*(x8505.value));
IkReal x8504=x7617;
sj17=gconst1;
cj17=gconst2;
j17=x8503;
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj15=0;
cj15=1.0;
j15=0;
IkReal gconst0=x8503;
IkReal gconst1=((-1.0)*r21*x8504);
IkReal gconst2=(r20*x8504);
IkReal x8506=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8510=IKPowWithIntegerCheck(x8506,-1);
if(!x8510.valid){
continue;
}
IkReal x8507=x8510.value;
IkReal x8508=((1.0)*x8507);
IkReal x8509=((((-2.0)*r10*r11*r20*r21*x8507))+(((-1.0)*x8508*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-1.0)*x8508*(r11*r11)*(r21*r21))));
j16eval[0]=x8509;
j16eval[1]=IKsign(x8509);
j16eval[2]=r12;
j16eval[3]=x8506;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  || IKabs(j16eval[3]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x8513 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8513.valid){
continue;
}
IkReal x8511=((-1.0)*(x8513.value));
IkReal x8512=x7617;
sj17=gconst1;
cj17=gconst2;
j17=x8511;
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj15=0;
cj15=1.0;
j15=0;
IkReal gconst0=x8511;
IkReal gconst1=((-1.0)*r21*x8512);
IkReal gconst2=(r20*x8512);
IkReal x8514=r22*r22;
IkReal x8515=(r02*sj13*sj14);
CheckValue<IkReal> x8520=IKPowWithIntegerCheck(((-1.0)+x8514),-1);
if(!x8520.valid){
continue;
}
IkReal x8516=x8520.value;
IkReal x8517=((1.0)*cj13*cj14*r02);
if((((1.0)+(((-1.0)*x8514)))) < -0.00001)
continue;
IkReal x8518=IKsqrt(((1.0)+(((-1.0)*x8514))));
IkReal x8519=(r22*x8516*x8518);
j16eval[0]=((IKabs((x8515+(((-1.0)*x8517)))))+(IKabs(((((-1.0)*x8517*x8519))+((x8515*x8519))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x8521=(sj13*sj14);
IkReal x8522=(cj13*cj14);
IkReal x8523=(gconst1*r01);
IkReal x8524=(gconst2*r00);
CheckValue<IkReal> x8525=IKPowWithIntegerCheck(IKsign(((x8523*x8523)+(x8524*x8524)+(((-2.0)*x8523*x8524))+(r02*r02))),-1);
if(!x8525.valid){
continue;
}
CheckValue<IkReal> x8526 = IKatan2WithCheck(IkReal((((x8522*x8523))+(((-1.0)*x8522*x8524))+((x8521*x8524))+(((-1.0)*x8521*x8523)))),IkReal(((((-1.0)*r02*x8522))+((r02*x8521)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8526.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8525.value)))+(x8526.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x8527=IKcos(j16);
IkReal x8528=IKsin(j16);
IkReal x8529=((1.0)*cj14);
IkReal x8530=(gconst1*x8528);
IkReal x8531=((1.0)*x8527);
IkReal x8532=((1.0)*x8528);
IkReal x8533=(gconst2*x8527);
IkReal x8534=(gconst1*x8531);
evalcond[0]=((((-1.0)*r22*x8532))+((r20*x8533))+(((-1.0)*r21*x8534)));
evalcond[1]=((((-1.0)*r02*x8532))+(((-1.0)*r01*x8534))+((r00*x8533)));
evalcond[2]=((((-1.0)*gconst2*r10*x8532))+(((-1.0)*r12*x8531))+((r11*x8530)));
evalcond[3]=((-1.0)+((r10*x8533))+(((-1.0)*r11*x8534))+(((-1.0)*r12*x8532)));
evalcond[4]=((((-1.0)*r02*x8531))+(((-1.0)*cj13*x8529))+((r01*x8530))+((sj13*sj14))+(((-1.0)*gconst2*r00*x8532)));
evalcond[5]=((((-1.0)*gconst2*r20*x8532))+(((-1.0)*cj13*sj14))+(((-1.0)*r22*x8531))+(((-1.0)*sj13*x8529))+((r21*x8530)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x8535=(gconst1*r11);
IkReal x8536=(gconst2*r10);
CheckValue<IkReal> x8537=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8535*x8535)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x8536*x8536)))+(((2.0)*x8535*x8536)))),-1);
if(!x8537.valid){
continue;
}
CheckValue<IkReal> x8538 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x8536))+x8535)),IKFAST_ATAN2_MAGTHRESH);
if(!x8538.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8537.value)))+(x8538.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x8539=IKcos(j16);
IkReal x8540=IKsin(j16);
IkReal x8541=((1.0)*cj14);
IkReal x8542=(gconst1*x8540);
IkReal x8543=((1.0)*x8539);
IkReal x8544=((1.0)*x8540);
IkReal x8545=(gconst2*x8539);
IkReal x8546=(gconst1*x8543);
evalcond[0]=((((-1.0)*r22*x8544))+((r20*x8545))+(((-1.0)*r21*x8546)));
evalcond[1]=((((-1.0)*r02*x8544))+(((-1.0)*r01*x8546))+((r00*x8545)));
evalcond[2]=((((-1.0)*gconst2*r10*x8544))+(((-1.0)*r12*x8543))+((r11*x8542)));
evalcond[3]=((-1.0)+((r10*x8545))+(((-1.0)*r12*x8544))+(((-1.0)*r11*x8546)));
evalcond[4]=((((-1.0)*r02*x8543))+((r01*x8542))+(((-1.0)*cj13*x8541))+(((-1.0)*gconst2*r00*x8544))+((sj13*sj14)));
evalcond[5]=((((-1.0)*gconst2*r20*x8544))+(((-1.0)*cj13*sj14))+(((-1.0)*r22*x8543))+((r21*x8542))+(((-1.0)*sj13*x8541)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x8547=((1.0)*gconst1);
CheckValue<IkReal> x8548 = IKatan2WithCheck(IkReal((((gconst2*r20))+(((-1.0)*r21*x8547)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x8548.valid){
continue;
}
CheckValue<IkReal> x8549=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x8547))+(((-1.0)*gconst2*r01)))),-1);
if(!x8549.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x8548.value)+(((1.5707963267949)*(x8549.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x8550=IKcos(j16);
IkReal x8551=IKsin(j16);
IkReal x8552=((1.0)*cj14);
IkReal x8553=(gconst1*x8551);
IkReal x8554=((1.0)*x8550);
IkReal x8555=((1.0)*x8551);
IkReal x8556=(gconst2*x8550);
IkReal x8557=(gconst1*x8554);
evalcond[0]=(((r20*x8556))+(((-1.0)*r22*x8555))+(((-1.0)*r21*x8557)));
evalcond[1]=(((r00*x8556))+(((-1.0)*r01*x8557))+(((-1.0)*r02*x8555)));
evalcond[2]=((((-1.0)*r12*x8554))+((r11*x8553))+(((-1.0)*gconst2*r10*x8555)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8555))+((r10*x8556))+(((-1.0)*r11*x8557)));
evalcond[4]=(((r01*x8553))+(((-1.0)*cj13*x8552))+((sj13*sj14))+(((-1.0)*gconst2*r00*x8555))+(((-1.0)*r02*x8554)));
evalcond[5]=(((r21*x8553))+(((-1.0)*r22*x8554))+(((-1.0)*cj13*sj14))+(((-1.0)*gconst2*r20*x8555))+(((-1.0)*sj13*x8552)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x8560 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8560.valid){
continue;
}
IkReal x8558=((-1.0)*(x8560.value));
IkReal x8559=x7617;
sj17=gconst1;
cj17=gconst2;
j17=x8558;
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
IkReal gconst0=x8558;
IkReal gconst1=((-1.0)*r21*x8559);
IkReal gconst2=(r20*x8559);
j16eval[0]=1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[4];
CheckValue<IkReal> x8563 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8563.valid){
continue;
}
IkReal x8561=((-1.0)*(x8563.value));
IkReal x8562=x7617;
sj17=gconst1;
cj17=gconst2;
j17=x8561;
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
IkReal gconst0=x8561;
IkReal gconst1=((-1.0)*r21*x8562);
IkReal gconst2=(r20*x8562);
IkReal x8564=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8568=IKPowWithIntegerCheck(x8564,-1);
if(!x8568.valid){
continue;
}
IkReal x8565=x8568.value;
IkReal x8566=((1.0)*x8565);
IkReal x8567=((((-2.0)*r10*r11*r20*r21*x8565))+(((-1.0)*(r12*r12)))+(((-1.0)*x8566*(r10*r10)*(r20*r20)))+(((-1.0)*x8566*(r11*r11)*(r21*r21))));
j16eval[0]=x8567;
j16eval[1]=IKsign(x8567);
j16eval[2]=r12;
j16eval[3]=x8564;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  || IKabs(j16eval[3]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x8571 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8571.valid){
continue;
}
IkReal x8569=((-1.0)*(x8571.value));
IkReal x8570=x7617;
sj17=gconst1;
cj17=gconst2;
j17=x8569;
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
IkReal gconst0=x8569;
IkReal gconst1=((-1.0)*r21*x8570);
IkReal gconst2=(r20*x8570);
IkReal x8572=r22*r22;
IkReal x8573=(cj14*r12*sj13);
IkReal x8574=(cj13*r12*sj14);
CheckValue<IkReal> x8578=IKPowWithIntegerCheck(((-1.0)+x8572),-1);
if(!x8578.valid){
continue;
}
IkReal x8575=x8578.value;
if((((1.0)+(((-1.0)*x8572)))) < -0.00001)
continue;
IkReal x8576=IKsqrt(((1.0)+(((-1.0)*x8572))));
IkReal x8577=(r22*x8575*x8576);
j16eval[0]=((IKabs(((((-1.0)*x8574))+(((-1.0)*x8573)))))+(IKabs((((x8573*x8577))+((x8574*x8577))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x8579=((1.0)*gconst1);
IkReal x8580=(cj13*sj14);
IkReal x8581=(gconst2*r10);
IkReal x8582=((1.0)*r12);
IkReal x8583=(cj14*sj13);
CheckValue<IkReal> x8584=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r01))+(((-1.0)*r00*x8579)))),-1);
if(!x8584.valid){
continue;
}
CheckValue<IkReal> x8585 = IKatan2WithCheck(IkReal(((((-1.0)*x8580*x8582))+(((-1.0)*x8582*x8583)))),IkReal((((x8581*x8583))+((x8580*x8581))+(((-1.0)*r11*x8579*x8580))+(((-1.0)*r11*x8579*x8583)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8585.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8584.value)))+(x8585.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x8586=IKsin(j16);
IkReal x8587=IKcos(j16);
IkReal x8588=((1.0)*gconst1);
IkReal x8589=((1.0)*cj13);
IkReal x8590=(gconst2*x8586);
IkReal x8591=(gconst2*x8587);
IkReal x8592=((1.0)*x8586);
evalcond[0]=((((-1.0)*r11*x8586*x8588))+((r10*x8590))+((r12*x8587)));
evalcond[1]=((((-1.0)*r22*x8592))+(((-1.0)*r21*x8587*x8588))+((r20*x8591)));
evalcond[2]=((((-1.0)*r02*x8592))+((r00*x8591))+(((-1.0)*r01*x8587*x8588)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8592))+((r10*x8591))+(((-1.0)*r11*x8587*x8588)));
evalcond[4]=(((r02*x8587))+((r00*x8590))+(((-1.0)*cj14*x8589))+(((-1.0)*r01*x8586*x8588))+((sj13*sj14)));
evalcond[5]=(((r22*x8587))+((r20*x8590))+(((-1.0)*r21*x8586*x8588))+(((-1.0)*sj14*x8589))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x8593=(gconst1*r11);
IkReal x8594=(gconst2*r10);
CheckValue<IkReal> x8595=IKPowWithIntegerCheck(IKsign(((((2.0)*x8593*x8594))+(((-1.0)*(x8594*x8594)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x8593*x8593))))),-1);
if(!x8595.valid){
continue;
}
CheckValue<IkReal> x8596 = IKatan2WithCheck(IkReal(r12),IkReal((x8593+(((-1.0)*x8594)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8596.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8595.value)))+(x8596.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x8597=IKsin(j16);
IkReal x8598=IKcos(j16);
IkReal x8599=((1.0)*gconst1);
IkReal x8600=((1.0)*cj13);
IkReal x8601=(gconst2*x8597);
IkReal x8602=(gconst2*x8598);
IkReal x8603=((1.0)*x8597);
evalcond[0]=((((-1.0)*r11*x8597*x8599))+((r10*x8601))+((r12*x8598)));
evalcond[1]=(((r20*x8602))+(((-1.0)*r21*x8598*x8599))+(((-1.0)*r22*x8603)));
evalcond[2]=((((-1.0)*r02*x8603))+((r00*x8602))+(((-1.0)*r01*x8598*x8599)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8603))+(((-1.0)*r11*x8598*x8599))+((r10*x8602)));
evalcond[4]=(((r00*x8601))+(((-1.0)*cj14*x8600))+((r02*x8598))+((sj13*sj14))+(((-1.0)*r01*x8597*x8599)));
evalcond[5]=((((-1.0)*r21*x8597*x8599))+((r20*x8601))+(((-1.0)*sj14*x8600))+(((-1.0)*cj14*sj13))+((r22*x8598)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x8604=((1.0)*gconst1);
CheckValue<IkReal> x8605=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x8604))+(((-1.0)*gconst2*r01)))),-1);
if(!x8605.valid){
continue;
}
CheckValue<IkReal> x8606 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x8604))+((gconst2*r20)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x8606.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8605.value)))+(x8606.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x8607=IKsin(j16);
IkReal x8608=IKcos(j16);
IkReal x8609=((1.0)*gconst1);
IkReal x8610=((1.0)*cj13);
IkReal x8611=(gconst2*x8607);
IkReal x8612=(gconst2*x8608);
IkReal x8613=((1.0)*x8607);
evalcond[0]=(((r12*x8608))+((r10*x8611))+(((-1.0)*r11*x8607*x8609)));
evalcond[1]=(((r20*x8612))+(((-1.0)*r21*x8608*x8609))+(((-1.0)*r22*x8613)));
evalcond[2]=((((-1.0)*r02*x8613))+((r00*x8612))+(((-1.0)*r01*x8608*x8609)));
evalcond[3]=((-1.0)+((r10*x8612))+(((-1.0)*r12*x8613))+(((-1.0)*r11*x8608*x8609)));
evalcond[4]=(((r00*x8611))+((sj13*sj14))+(((-1.0)*r01*x8607*x8609))+(((-1.0)*cj14*x8610))+((r02*x8608)));
evalcond[5]=(((r20*x8611))+(((-1.0)*sj14*x8610))+((r22*x8608))+(((-1.0)*r21*x8607*x8609))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[2];
IkReal x8614=((-1.0)*px);
CheckValue<IkReal> x8616 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8616.valid){
continue;
}
IkReal x8615=((-1.0)*(x8616.value));
sj17=gconst1;
cj17=gconst2;
j17=x8615;
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8614);
rxp1_1=(px*r21);
rxp1_2=(r11*x8614);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8615;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x8617=((1.0)*sj15);
IkReal x8618=(r11*r21);
IkReal x8619=(r10*r20);
j16eval[0]=((((-1.0)*x8617*x8619))+(((-1.0)*x8617*x8618)));
j16eval[1]=(x8619+x8618);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x8620=((-1.0)*px);
CheckValue<IkReal> x8622 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8622.valid){
continue;
}
IkReal x8621=((-1.0)*(x8622.value));
sj17=gconst1;
cj17=gconst2;
j17=x8621;
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8620);
rxp1_1=(px*r21);
rxp1_2=(r11*x8620);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8621;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x8623=(r10*r20);
IkReal x8624=((1.0)*cj15);
IkReal x8625=(r11*r21);
j16eval[0]=((((-1.0)*x8624*x8625))+(((-1.0)*x8623*x8624)));
j16eval[1]=(x8625+x8623);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
IkReal x8626=((-1.0)*px);
CheckValue<IkReal> x8628 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8628.valid){
continue;
}
IkReal x8627=((-1.0)*(x8628.value));
sj17=gconst1;
cj17=gconst2;
j17=x8627;
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8626);
rxp1_1=(px*r21);
rxp1_2=(r11*x8626);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8627;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x8629=((1.0)*cj15);
j16eval[0]=((((-1.0)*r11*r21*x8629))+(((-1.0)*r10*r20*x8629)));
j16eval[1]=r02;
j16eval[2]=sj15;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x8630=((1.0)*r10);
CheckValue<IkReal> x8631=IKPowWithIntegerCheck(((((-1.0)*cj15*gconst2*x8630))+((cj15*gconst1*r11))),-1);
if(!x8631.valid){
continue;
}
CheckValue<IkReal> x8632=IKPowWithIntegerCheck(r02,-1);
if(!x8632.valid){
continue;
}
CheckValue<IkReal> x8633=IKPowWithIntegerCheck(sj15,-1);
if(!x8633.valid){
continue;
}
if( IKabs(((x8631.value)*(((((-1.0)*gconst1*sj15*x8630))+(((-1.0)*gconst2*r11*sj15)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x8632.value)*(x8633.value)*((((cj14*sj13))+((cj13*sj14)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x8631.value)*(((((-1.0)*gconst1*sj15*x8630))+(((-1.0)*gconst2*r11*sj15))))))+IKsqr(((x8632.value)*(x8633.value)*((((cj14*sj13))+((cj13*sj14))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x8631.value)*(((((-1.0)*gconst1*sj15*x8630))+(((-1.0)*gconst2*r11*sj15))))), ((x8632.value)*(x8633.value)*((((cj14*sj13))+((cj13*sj14))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x8634=IKcos(j16);
IkReal x8635=IKsin(j16);
IkReal x8636=(sj13*sj14);
IkReal x8637=((1.0)*cj14);
IkReal x8638=((1.0)*gconst2);
IkReal x8639=(gconst1*r11);
IkReal x8640=(gconst1*r21);
IkReal x8641=(gconst1*r20);
IkReal x8642=(gconst2*sj15);
IkReal x8643=(cj13*sj14);
IkReal x8644=((1.0)*cj15);
IkReal x8645=(gconst1*r10);
IkReal x8646=(cj13*x8637);
IkReal x8647=(cj15*x8635);
IkReal x8648=(gconst2*x8634);
IkReal x8649=(sj15*x8635);
IkReal x8650=((1.0)*gconst1*x8634);
IkReal x8651=((1.0)*r02*x8634);
evalcond[0]=((-1.0)*r02*x8635);
evalcond[1]=(((r20*x8648))+(((-1.0)*x8634*x8640)));
evalcond[2]=(x8643+((cj14*sj13))+(((-1.0)*sj15*x8651)));
evalcond[3]=((-1.0)+(((-1.0)*x8634*x8639))+((r10*x8648)));
evalcond[4]=(x8636+(((-1.0)*r02*x8634*x8644))+(((-1.0)*x8646)));
evalcond[5]=(((r11*x8642))+((sj15*x8645))+(((-1.0)*r10*x8638*x8647))+((x8639*x8647)));
evalcond[6]=((((-1.0)*x8644*x8645))+(((-1.0)*r10*x8638*x8649))+((x8639*x8649))+(((-1.0)*cj15*r11*x8638)));
evalcond[7]=((((-1.0)*sj13*x8637))+(((-1.0)*r20*x8638*x8647))+((x8640*x8647))+((sj15*x8641))+((r21*x8642))+(((-1.0)*x8643)));
evalcond[8]=(x8636+(((-1.0)*r20*x8638*x8649))+((x8640*x8649))+(((-1.0)*x8641*x8644))+(((-1.0)*x8646))+(((-1.0)*cj15*r21*x8638)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x8652=((1.0)*r11);
IkReal x8653=(gconst2*r10);
CheckValue<IkReal> x8654=IKPowWithIntegerCheck((((cj15*gconst1*r11))+(((-1.0)*cj15*x8653))),-1);
if(!x8654.valid){
continue;
}
CheckValue<IkReal> x8655=IKPowWithIntegerCheck(((((-1.0)*gconst1*x8652))+x8653),-1);
if(!x8655.valid){
continue;
}
if( IKabs(((x8654.value)*(((((-1.0)*gconst2*sj15*x8652))+(((-1.0)*gconst1*r10*sj15)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x8655.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x8654.value)*(((((-1.0)*gconst2*sj15*x8652))+(((-1.0)*gconst1*r10*sj15))))))+IKsqr(x8655.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x8654.value)*(((((-1.0)*gconst2*sj15*x8652))+(((-1.0)*gconst1*r10*sj15))))), x8655.value);
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x8656=IKcos(j16);
IkReal x8657=IKsin(j16);
IkReal x8658=(sj13*sj14);
IkReal x8659=((1.0)*cj14);
IkReal x8660=((1.0)*gconst2);
IkReal x8661=(gconst1*r11);
IkReal x8662=(gconst1*r21);
IkReal x8663=(gconst1*r20);
IkReal x8664=(gconst2*sj15);
IkReal x8665=(cj13*sj14);
IkReal x8666=((1.0)*cj15);
IkReal x8667=(gconst1*r10);
IkReal x8668=(cj13*x8659);
IkReal x8669=(cj15*x8657);
IkReal x8670=(gconst2*x8656);
IkReal x8671=(sj15*x8657);
IkReal x8672=((1.0)*gconst1*x8656);
IkReal x8673=((1.0)*r02*x8656);
evalcond[0]=((-1.0)*r02*x8657);
evalcond[1]=(((r20*x8670))+(((-1.0)*x8656*x8662)));
evalcond[2]=(x8665+((cj14*sj13))+(((-1.0)*sj15*x8673)));
evalcond[3]=((-1.0)+((r10*x8670))+(((-1.0)*x8656*x8661)));
evalcond[4]=(x8658+(((-1.0)*r02*x8656*x8666))+(((-1.0)*x8668)));
evalcond[5]=(((r11*x8664))+(((-1.0)*r10*x8660*x8669))+((x8661*x8669))+((sj15*x8667)));
evalcond[6]=((((-1.0)*x8666*x8667))+(((-1.0)*r10*x8660*x8671))+(((-1.0)*cj15*r11*x8660))+((x8661*x8671)));
evalcond[7]=((((-1.0)*r20*x8660*x8669))+(((-1.0)*sj13*x8659))+((x8662*x8669))+(((-1.0)*x8665))+((r21*x8664))+((sj15*x8663)));
evalcond[8]=(x8658+(((-1.0)*r20*x8660*x8671))+(((-1.0)*x8668))+((x8662*x8671))+(((-1.0)*cj15*r21*x8660))+(((-1.0)*x8663*x8666)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x8674=(gconst1*r11);
IkReal x8675=(gconst2*r10);
CheckValue<IkReal> x8676=IKPowWithIntegerCheck(((((-1.0)*sj15*x8675))+((sj15*x8674))),-1);
if(!x8676.valid){
continue;
}
CheckValue<IkReal> x8677=IKPowWithIntegerCheck((x8675+(((-1.0)*x8674))),-1);
if(!x8677.valid){
continue;
}
if( IKabs(((x8676.value)*((((cj15*gconst1*r10))+((cj15*gconst2*r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x8677.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x8676.value)*((((cj15*gconst1*r10))+((cj15*gconst2*r11))))))+IKsqr(x8677.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x8676.value)*((((cj15*gconst1*r10))+((cj15*gconst2*r11))))), x8677.value);
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x8678=IKcos(j16);
IkReal x8679=IKsin(j16);
IkReal x8680=(sj13*sj14);
IkReal x8681=((1.0)*cj14);
IkReal x8682=((1.0)*gconst2);
IkReal x8683=(gconst1*r11);
IkReal x8684=(gconst1*r21);
IkReal x8685=(gconst1*r20);
IkReal x8686=(gconst2*sj15);
IkReal x8687=(cj13*sj14);
IkReal x8688=((1.0)*cj15);
IkReal x8689=(gconst1*r10);
IkReal x8690=(cj13*x8681);
IkReal x8691=(cj15*x8679);
IkReal x8692=(gconst2*x8678);
IkReal x8693=(sj15*x8679);
IkReal x8694=((1.0)*gconst1*x8678);
IkReal x8695=((1.0)*r02*x8678);
evalcond[0]=((-1.0)*r02*x8679);
evalcond[1]=(((r20*x8692))+(((-1.0)*x8678*x8684)));
evalcond[2]=(x8687+((cj14*sj13))+(((-1.0)*sj15*x8695)));
evalcond[3]=((-1.0)+((r10*x8692))+(((-1.0)*x8678*x8683)));
evalcond[4]=((((-1.0)*x8690))+x8680+(((-1.0)*r02*x8678*x8688)));
evalcond[5]=(((sj15*x8689))+((r11*x8686))+((x8683*x8691))+(((-1.0)*r10*x8682*x8691)));
evalcond[6]=((((-1.0)*cj15*r11*x8682))+((x8683*x8693))+(((-1.0)*r10*x8682*x8693))+(((-1.0)*x8688*x8689)));
evalcond[7]=(((sj15*x8685))+((x8684*x8691))+(((-1.0)*sj13*x8681))+(((-1.0)*r20*x8682*x8691))+(((-1.0)*x8687))+((r21*x8686)));
evalcond[8]=((((-1.0)*x8690))+(((-1.0)*cj15*r21*x8682))+((x8684*x8693))+x8680+(((-1.0)*r20*x8682*x8693))+(((-1.0)*x8685*x8688)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j16]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x8696=gconst1*gconst1;
IkReal x8697=gconst2*gconst2;
IkReal x8698=(r11*sj15);
IkReal x8699=(gconst1*gconst2);
IkReal x8700=((1.0)*r00);
IkReal x8701=(cj15*r11);
IkReal x8702=(cj15*r10);
IkReal x8703=((1.0)*r02);
IkReal x8704=(r10*sj15);
IkReal x8705=(r01*x8696);
CheckValue<IkReal> x8706=IKPowWithIntegerCheck(IKsign((((r00*x8697*x8704))+((r02*r12*sj15))+(((-1.0)*r01*x8699*x8704))+(((-1.0)*x8698*x8699*x8700))+((x8698*x8705)))),-1);
if(!x8706.valid){
continue;
}
CheckValue<IkReal> x8707 = IKatan2WithCheck(IkReal((((r01*x8699*x8701))+(((-1.0)*x8699*x8700*x8702))+((x8702*x8705))+(((-1.0)*x8697*x8700*x8701)))),IkReal(((((-1.0)*gconst2*x8701*x8703))+(((-1.0)*gconst1*x8702*x8703)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8707.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8706.value)))+(x8707.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x8708=IKcos(j16);
IkReal x8709=IKsin(j16);
IkReal x8710=(sj13*sj14);
IkReal x8711=(gconst1*r21);
IkReal x8712=((1.0)*cj14);
IkReal x8713=(gconst2*r10);
IkReal x8714=(gconst2*sj15);
IkReal x8715=((1.0)*cj15);
IkReal x8716=(gconst1*r00);
IkReal x8717=(gconst1*r11);
IkReal x8718=(gconst1*r01);
IkReal x8719=(gconst1*r20);
IkReal x8720=(gconst2*r00);
IkReal x8721=(cj13*sj14);
IkReal x8722=(gconst1*r10);
IkReal x8723=(cj13*x8712);
IkReal x8724=((1.0)*x8708);
IkReal x8725=((1.0)*x8709);
IkReal x8726=(sj15*x8709);
IkReal x8727=(cj15*x8709);
IkReal x8728=(gconst2*r20*x8725);
evalcond[0]=(((gconst2*r20*x8708))+(((-1.0)*r22*x8725))+(((-1.0)*x8711*x8724)));
evalcond[1]=((((-1.0)*r02*x8725))+(((-1.0)*x8718*x8724))+((x8708*x8720)));
evalcond[2]=((-1.0)+((x8708*x8713))+(((-1.0)*x8717*x8724))+(((-1.0)*r12*x8725)));
evalcond[3]=(((x8717*x8727))+(((-1.0)*r12*x8708*x8715))+(((-1.0)*x8709*x8713*x8715))+((sj15*x8722))+((r11*x8714)));
evalcond[4]=(((x8717*x8726))+(((-1.0)*r12*sj15*x8724))+(((-1.0)*sj15*x8713*x8725))+(((-1.0)*gconst2*r11*x8715))+(((-1.0)*x8715*x8722)));
evalcond[5]=(((sj15*x8716))+x8710+(((-1.0)*r02*x8708*x8715))+(((-1.0)*x8709*x8715*x8720))+((r01*x8714))+((x8718*x8727))+(((-1.0)*x8723)));
evalcond[6]=(((sj15*x8719))+((x8711*x8727))+(((-1.0)*sj13*x8712))+(((-1.0)*x8721))+(((-1.0)*gconst2*r20*x8709*x8715))+(((-1.0)*r22*x8708*x8715))+((r21*x8714)));
evalcond[7]=((((-1.0)*x8715*x8716))+((cj14*sj13))+x8721+(((-1.0)*r00*x8714*x8725))+(((-1.0)*r02*sj15*x8724))+((x8718*x8726))+(((-1.0)*gconst2*r01*x8715)));
evalcond[8]=((((-1.0)*x8715*x8719))+((x8711*x8726))+x8710+(((-1.0)*r22*sj15*x8724))+(((-1.0)*x8723))+(((-1.0)*gconst2*r21*x8715))+(((-1.0)*r20*x8714*x8725)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x8729=gconst2*gconst2;
IkReal x8730=gconst1*gconst1;
IkReal x8731=(r00*sj15);
IkReal x8732=(cj15*r01);
IkReal x8733=(r02*sj15);
IkReal x8734=(gconst2*r11);
IkReal x8735=(cj15*r00);
IkReal x8736=((1.0)*gconst1);
IkReal x8737=(r01*sj15);
IkReal x8738=(gconst1*gconst2*r10);
CheckValue<IkReal> x8739=IKPowWithIntegerCheck(IKsign((((cj15*r02*r12))+(((-1.0)*gconst2*r10*x8732*x8736))+((r11*x8730*x8732))+((r10*x8729*x8735))+(((-1.0)*x8734*x8735*x8736)))),-1);
if(!x8739.valid){
continue;
}
CheckValue<IkReal> x8740 = IKatan2WithCheck(IkReal(((((-1.0)*x8734*x8736*x8737))+((x8731*x8738))+(((-1.0)*r10*x8730*x8737))+((r11*x8729*x8731)))),IkReal((((gconst1*r10*x8733))+((x8733*x8734)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8740.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8739.value)))+(x8740.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x8741=IKcos(j16);
IkReal x8742=IKsin(j16);
IkReal x8743=(sj13*sj14);
IkReal x8744=(gconst1*r21);
IkReal x8745=((1.0)*cj14);
IkReal x8746=(gconst2*r10);
IkReal x8747=(gconst2*sj15);
IkReal x8748=((1.0)*cj15);
IkReal x8749=(gconst1*r00);
IkReal x8750=(gconst1*r11);
IkReal x8751=(gconst1*r01);
IkReal x8752=(gconst1*r20);
IkReal x8753=(gconst2*r00);
IkReal x8754=(cj13*sj14);
IkReal x8755=(gconst1*r10);
IkReal x8756=(cj13*x8745);
IkReal x8757=((1.0)*x8741);
IkReal x8758=((1.0)*x8742);
IkReal x8759=(sj15*x8742);
IkReal x8760=(cj15*x8742);
IkReal x8761=(gconst2*r20*x8758);
evalcond[0]=((((-1.0)*r22*x8758))+(((-1.0)*x8744*x8757))+((gconst2*r20*x8741)));
evalcond[1]=((((-1.0)*x8751*x8757))+(((-1.0)*r02*x8758))+((x8741*x8753)));
evalcond[2]=((-1.0)+(((-1.0)*x8750*x8757))+((x8741*x8746))+(((-1.0)*r12*x8758)));
evalcond[3]=(((x8750*x8760))+((sj15*x8755))+(((-1.0)*r12*x8741*x8748))+(((-1.0)*x8742*x8746*x8748))+((r11*x8747)));
evalcond[4]=(((x8750*x8759))+(((-1.0)*gconst2*r11*x8748))+(((-1.0)*r12*sj15*x8757))+(((-1.0)*x8748*x8755))+(((-1.0)*sj15*x8746*x8758)));
evalcond[5]=(((r01*x8747))+(((-1.0)*x8742*x8748*x8753))+x8743+((x8751*x8760))+(((-1.0)*x8756))+(((-1.0)*r02*x8741*x8748))+((sj15*x8749)));
evalcond[6]=(((x8744*x8760))+(((-1.0)*r22*x8741*x8748))+((sj15*x8752))+(((-1.0)*sj13*x8745))+(((-1.0)*gconst2*r20*x8742*x8748))+((r21*x8747))+(((-1.0)*x8754)));
evalcond[7]=(((cj14*sj13))+x8754+(((-1.0)*gconst2*r01*x8748))+(((-1.0)*x8748*x8749))+(((-1.0)*r00*x8747*x8758))+((x8751*x8759))+(((-1.0)*r02*sj15*x8757)));
evalcond[8]=(x8743+(((-1.0)*r20*x8747*x8758))+(((-1.0)*x8756))+(((-1.0)*x8748*x8752))+(((-1.0)*gconst2*r21*x8748))+((x8744*x8759))+(((-1.0)*r22*sj15*x8757)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x8762=((1.0)*gconst1);
CheckValue<IkReal> x8763=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r01))+(((-1.0)*r00*x8762)))),-1);
if(!x8763.valid){
continue;
}
CheckValue<IkReal> x8764 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x8762))+((gconst2*r20)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x8764.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8763.value)))+(x8764.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x8765=IKcos(j16);
IkReal x8766=IKsin(j16);
IkReal x8767=(sj13*sj14);
IkReal x8768=(gconst1*r21);
IkReal x8769=((1.0)*cj14);
IkReal x8770=(gconst2*r10);
IkReal x8771=(gconst2*sj15);
IkReal x8772=((1.0)*cj15);
IkReal x8773=(gconst1*r00);
IkReal x8774=(gconst1*r11);
IkReal x8775=(gconst1*r01);
IkReal x8776=(gconst1*r20);
IkReal x8777=(gconst2*r00);
IkReal x8778=(cj13*sj14);
IkReal x8779=(gconst1*r10);
IkReal x8780=(cj13*x8769);
IkReal x8781=((1.0)*x8765);
IkReal x8782=((1.0)*x8766);
IkReal x8783=(sj15*x8766);
IkReal x8784=(cj15*x8766);
IkReal x8785=(gconst2*r20*x8782);
evalcond[0]=(((gconst2*r20*x8765))+(((-1.0)*x8768*x8781))+(((-1.0)*r22*x8782)));
evalcond[1]=(((x8765*x8777))+(((-1.0)*x8775*x8781))+(((-1.0)*r02*x8782)));
evalcond[2]=((-1.0)+(((-1.0)*x8774*x8781))+((x8765*x8770))+(((-1.0)*r12*x8782)));
evalcond[3]=(((sj15*x8779))+(((-1.0)*x8766*x8770*x8772))+((r11*x8771))+(((-1.0)*r12*x8765*x8772))+((x8774*x8784)));
evalcond[4]=((((-1.0)*x8772*x8779))+(((-1.0)*r12*sj15*x8781))+(((-1.0)*sj15*x8770*x8782))+(((-1.0)*gconst2*r11*x8772))+((x8774*x8783)));
evalcond[5]=(((sj15*x8773))+x8767+((x8775*x8784))+((r01*x8771))+(((-1.0)*x8766*x8772*x8777))+(((-1.0)*x8780))+(((-1.0)*r02*x8765*x8772)));
evalcond[6]=(((sj15*x8776))+(((-1.0)*sj13*x8769))+(((-1.0)*x8778))+((r21*x8771))+(((-1.0)*gconst2*r20*x8766*x8772))+((x8768*x8784))+(((-1.0)*r22*x8765*x8772)));
evalcond[7]=(((cj14*sj13))+x8778+(((-1.0)*x8772*x8773))+((x8775*x8783))+(((-1.0)*r00*x8771*x8782))+(((-1.0)*gconst2*r01*x8772))+(((-1.0)*r02*sj15*x8781)));
evalcond[8]=((((-1.0)*r22*sj15*x8781))+x8767+(((-1.0)*x8772*x8776))+(((-1.0)*r20*x8771*x8782))+(((-1.0)*x8780))+(((-1.0)*gconst2*r21*x8772))+((x8768*x8783)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x8788 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8788.valid){
continue;
}
IkReal x8786=((-1.0)*(x8788.value));
IkReal x8787=x7617;
sj17=gconst1;
cj17=gconst2;
j17=x8786;
sj12=1.0;
cj12=0;
j12=1.5707963267949;
IkReal gconst0=x8786;
IkReal gconst1=((-1.0)*r21*x8787);
IkReal gconst2=(r20*x8787);
j16eval[0]=1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x8791 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8791.valid){
continue;
}
IkReal x8789=((-1.0)*(x8791.value));
IkReal x8790=x7617;
sj17=gconst1;
cj17=gconst2;
j17=x8789;
sj12=1.0;
cj12=0;
j12=1.5707963267949;
IkReal gconst0=x8789;
IkReal gconst1=((-1.0)*r21*x8790);
IkReal gconst2=(r20*x8790);
CheckValue<IkReal> x8799=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x8799.valid){
continue;
}
IkReal x8792=x8799.value;
IkReal x8793=(cj15*x8792);
IkReal x8794=(r11*x8793);
IkReal x8795=(r01*x8793);
IkReal x8796=(r00*x8793);
IkReal x8797=(r10*x8793);
IkReal x8798=(r20*r21*x8793);
j16eval[0]=IKsign((((cj15*r02*r12))+((r00*r20*r21*x8794))+((r01*x8794*(r21*r21)))+((r10*r20*r21*x8795))+((r10*x8796*(r20*r20)))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x8802 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8802.valid){
continue;
}
IkReal x8800=((-1.0)*(x8802.value));
IkReal x8801=x7617;
sj17=gconst1;
cj17=gconst2;
j17=x8800;
sj12=1.0;
cj12=0;
j12=1.5707963267949;
IkReal gconst0=x8800;
IkReal gconst1=((-1.0)*r21*x8801);
IkReal gconst2=(r20*x8801);
CheckValue<IkReal> x8810=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x8810.valid){
continue;
}
IkReal x8803=x8810.value;
IkReal x8804=(sj15*x8803);
IkReal x8805=(r11*x8804);
IkReal x8806=(r00*x8804);
IkReal x8807=(r01*x8804);
IkReal x8808=(r10*x8804);
IkReal x8809=(r20*r21*x8804);
j16eval[0]=IKsign((((r10*r20*r21*x8807))+((r02*r12*sj15))+((r01*x8805*(r21*r21)))+((r00*r20*r21*x8805))+((r10*x8806*(r20*r20)))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j15))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x8813 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8813.valid){
continue;
}
IkReal x8811=((-1.0)*(x8813.value));
IkReal x8812=x7617;
sj17=gconst1;
cj17=gconst2;
j17=x8811;
sj12=1.0;
cj12=0;
j12=1.5707963267949;
sj15=0;
cj15=1.0;
j15=0;
IkReal gconst0=x8811;
IkReal gconst1=((-1.0)*r21*x8812);
IkReal gconst2=(r20*x8812);
j16eval[0]=1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[4];
CheckValue<IkReal> x8816 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8816.valid){
continue;
}
IkReal x8814=((-1.0)*(x8816.value));
IkReal x8815=x7617;
sj17=gconst1;
cj17=gconst2;
j17=x8814;
sj12=1.0;
cj12=0;
j12=1.5707963267949;
sj15=0;
cj15=1.0;
j15=0;
IkReal gconst0=x8814;
IkReal gconst1=((-1.0)*r21*x8815);
IkReal gconst2=(r20*x8815);
IkReal x8817=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8821=IKPowWithIntegerCheck(x8817,-1);
if(!x8821.valid){
continue;
}
IkReal x8818=x8821.value;
IkReal x8819=((1.0)*x8818);
IkReal x8820=((((-2.0)*r00*r01*r20*r21*x8818))+(((-1.0)*x8819*(r01*r01)*(r21*r21)))+(((-1.0)*x8819*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02))));
j16eval[0]=x8820;
j16eval[1]=IKsign(x8820);
j16eval[2]=r02;
j16eval[3]=x8817;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  || IKabs(j16eval[3]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x8824 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8824.valid){
continue;
}
IkReal x8822=((-1.0)*(x8824.value));
IkReal x8823=x7617;
sj17=gconst1;
cj17=gconst2;
j17=x8822;
sj12=1.0;
cj12=0;
j12=1.5707963267949;
sj15=0;
cj15=1.0;
j15=0;
IkReal gconst0=x8822;
IkReal gconst1=((-1.0)*r21*x8823);
IkReal gconst2=(r20*x8823);
IkReal x8825=r22*r22;
IkReal x8826=(cj13*cj14*r12);
CheckValue<IkReal> x8831=IKPowWithIntegerCheck(((-1.0)+x8825),-1);
if(!x8831.valid){
continue;
}
IkReal x8827=x8831.value;
IkReal x8828=((1.0)*r12*sj13*sj14);
if((((1.0)+(((-1.0)*x8825)))) < -0.00001)
continue;
IkReal x8829=IKsqrt(((1.0)+(((-1.0)*x8825))));
IkReal x8830=(r22*x8827*x8829);
j16eval[0]=((IKabs((x8826+(((-1.0)*x8828)))))+(IKabs((((x8826*x8830))+(((-1.0)*x8828*x8830))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x8832=(cj13*cj14);
IkReal x8833=(gconst2*r10);
IkReal x8834=(sj13*sj14);
IkReal x8835=(gconst1*r11);
CheckValue<IkReal> x8836=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x8833*x8833)+(((-2.0)*x8833*x8835))+(x8835*x8835))),-1);
if(!x8836.valid){
continue;
}
CheckValue<IkReal> x8837 = IKatan2WithCheck(IkReal(((((-1.0)*x8833*x8834))+((x8832*x8833))+(((-1.0)*x8832*x8835))+((x8834*x8835)))),IkReal(((((-1.0)*r12*x8834))+((r12*x8832)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8837.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8836.value)))+(x8837.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x8838=IKcos(j16);
IkReal x8839=IKsin(j16);
IkReal x8840=((1.0)*sj13);
IkReal x8841=(gconst1*x8839);
IkReal x8842=((1.0)*x8838);
IkReal x8843=((1.0)*x8839);
IkReal x8844=(gconst2*x8838);
IkReal x8845=(gconst1*x8842);
evalcond[0]=(((r20*x8844))+(((-1.0)*r21*x8845))+(((-1.0)*r22*x8843)));
evalcond[1]=(((r10*x8844))+(((-1.0)*r11*x8845))+(((-1.0)*r12*x8843)));
evalcond[2]=((((-1.0)*r02*x8842))+(((-1.0)*gconst2*r00*x8843))+((r01*x8841)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8843))+(((-1.0)*r01*x8845))+((r00*x8844)));
evalcond[4]=((((-1.0)*sj14*x8840))+((r11*x8841))+(((-1.0)*gconst2*r10*x8843))+((cj13*cj14))+(((-1.0)*r12*x8842)));
evalcond[5]=(((r21*x8841))+(((-1.0)*cj13*sj14))+(((-1.0)*cj14*x8840))+(((-1.0)*gconst2*r20*x8843))+(((-1.0)*r22*x8842)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x8846=(gconst1*r01);
IkReal x8847=(gconst2*r00);
CheckValue<IkReal> x8848=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x8846*x8846)))+(((-1.0)*(x8847*x8847)))+(((2.0)*x8846*x8847)))),-1);
if(!x8848.valid){
continue;
}
CheckValue<IkReal> x8849 = IKatan2WithCheck(IkReal(r02),IkReal((x8846+(((-1.0)*x8847)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8849.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8848.value)))+(x8849.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x8850=IKcos(j16);
IkReal x8851=IKsin(j16);
IkReal x8852=((1.0)*sj13);
IkReal x8853=(gconst1*x8851);
IkReal x8854=((1.0)*x8850);
IkReal x8855=((1.0)*x8851);
IkReal x8856=(gconst2*x8850);
IkReal x8857=(gconst1*x8854);
evalcond[0]=((((-1.0)*r22*x8855))+(((-1.0)*r21*x8857))+((r20*x8856)));
evalcond[1]=((((-1.0)*r11*x8857))+(((-1.0)*r12*x8855))+((r10*x8856)));
evalcond[2]=((((-1.0)*gconst2*r00*x8855))+((r01*x8853))+(((-1.0)*r02*x8854)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x8857))+((r00*x8856))+(((-1.0)*r02*x8855)));
evalcond[4]=((((-1.0)*gconst2*r10*x8855))+(((-1.0)*r12*x8854))+(((-1.0)*sj14*x8852))+((r11*x8853))+((cj13*cj14)));
evalcond[5]=((((-1.0)*cj14*x8852))+(((-1.0)*cj13*sj14))+(((-1.0)*r22*x8854))+(((-1.0)*gconst2*r20*x8855))+((r21*x8853)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x8858 = IKatan2WithCheck(IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x8858.valid){
continue;
}
CheckValue<IkReal> x8859=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8859.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x8858.value)+(((1.5707963267949)*(x8859.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x8860=IKcos(j16);
IkReal x8861=IKsin(j16);
IkReal x8862=((1.0)*sj13);
IkReal x8863=(gconst1*x8861);
IkReal x8864=((1.0)*x8860);
IkReal x8865=((1.0)*x8861);
IkReal x8866=(gconst2*x8860);
IkReal x8867=(gconst1*x8864);
evalcond[0]=(((r20*x8866))+(((-1.0)*r22*x8865))+(((-1.0)*r21*x8867)));
evalcond[1]=((((-1.0)*r11*x8867))+(((-1.0)*r12*x8865))+((r10*x8866)));
evalcond[2]=(((r01*x8863))+(((-1.0)*r02*x8864))+(((-1.0)*gconst2*r00*x8865)));
evalcond[3]=((-1.0)+((r00*x8866))+(((-1.0)*r01*x8867))+(((-1.0)*r02*x8865)));
evalcond[4]=((((-1.0)*sj14*x8862))+((r11*x8863))+(((-1.0)*r12*x8864))+((cj13*cj14))+(((-1.0)*gconst2*r10*x8865)));
evalcond[5]=((((-1.0)*cj13*sj14))+((r21*x8863))+(((-1.0)*cj14*x8862))+(((-1.0)*r22*x8864))+(((-1.0)*gconst2*r20*x8865)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x8870 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8870.valid){
continue;
}
IkReal x8868=((-1.0)*(x8870.value));
IkReal x8869=x7617;
sj17=gconst1;
cj17=gconst2;
j17=x8868;
sj12=1.0;
cj12=0;
j12=1.5707963267949;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
IkReal gconst0=x8868;
IkReal gconst1=((-1.0)*r21*x8869);
IkReal gconst2=(r20*x8869);
j16eval[0]=1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[4];
CheckValue<IkReal> x8873 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8873.valid){
continue;
}
IkReal x8871=((-1.0)*(x8873.value));
IkReal x8872=x7617;
sj17=gconst1;
cj17=gconst2;
j17=x8871;
sj12=1.0;
cj12=0;
j12=1.5707963267949;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
IkReal gconst0=x8871;
IkReal gconst1=((-1.0)*r21*x8872);
IkReal gconst2=(r20*x8872);
IkReal x8874=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8878=IKPowWithIntegerCheck(x8874,-1);
if(!x8878.valid){
continue;
}
IkReal x8875=x8878.value;
IkReal x8876=((1.0)*x8875);
IkReal x8877=((((-1.0)*x8876*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-1.0)*x8876*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x8875)));
j16eval[0]=x8877;
j16eval[1]=IKsign(x8877);
j16eval[2]=r02;
j16eval[3]=x8874;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  || IKabs(j16eval[3]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x8881 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8881.valid){
continue;
}
IkReal x8879=((-1.0)*(x8881.value));
IkReal x8880=x7617;
sj17=gconst1;
cj17=gconst2;
j17=x8879;
sj12=1.0;
cj12=0;
j12=1.5707963267949;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
IkReal gconst0=x8879;
IkReal gconst1=((-1.0)*r21*x8880);
IkReal gconst2=(r20*x8880);
IkReal x8882=r22*r22;
IkReal x8883=(cj13*r02*sj14);
IkReal x8884=(cj14*r02*sj13);
CheckValue<IkReal> x8888=IKPowWithIntegerCheck(((-1.0)+x8882),-1);
if(!x8888.valid){
continue;
}
IkReal x8885=x8888.value;
if((((1.0)+(((-1.0)*x8882)))) < -0.00001)
continue;
IkReal x8886=IKsqrt(((1.0)+(((-1.0)*x8882))));
IkReal x8887=(r22*x8885*x8886);
j16eval[0]=((IKabs((((x8884*x8887))+((x8883*x8887)))))+(IKabs(((((-1.0)*x8884))+(((-1.0)*x8883))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x8889=(gconst2*r00);
IkReal x8890=(cj13*sj14);
IkReal x8891=(gconst1*r01);
IkReal x8892=((1.0)*cj14*sj13);
CheckValue<IkReal> x8893 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x8890))+(((-1.0)*r02*x8892)))),IkReal(((((-1.0)*x8890*x8891))+(((-1.0)*x8891*x8892))+((x8889*x8890))+((cj14*sj13*x8889)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8893.valid){
continue;
}
CheckValue<IkReal> x8894=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8894.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x8893.value)+(((1.5707963267949)*(x8894.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x8895=IKsin(j16);
IkReal x8896=IKcos(j16);
IkReal x8897=((1.0)*gconst1);
IkReal x8898=((1.0)*sj14);
IkReal x8899=(gconst2*x8895);
IkReal x8900=(gconst2*x8896);
IkReal x8901=((1.0)*x8895);
evalcond[0]=(((r00*x8899))+(((-1.0)*r01*x8895*x8897))+((r02*x8896)));
evalcond[1]=((((-1.0)*r21*x8896*x8897))+((r20*x8900))+(((-1.0)*r22*x8901)));
evalcond[2]=(((r10*x8900))+(((-1.0)*r11*x8896*x8897))+(((-1.0)*r12*x8901)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x8896*x8897))+((r00*x8900))+(((-1.0)*r02*x8901)));
evalcond[4]=((((-1.0)*sj13*x8898))+((r12*x8896))+(((-1.0)*r11*x8895*x8897))+((r10*x8899))+((cj13*cj14)));
evalcond[5]=(((r20*x8899))+(((-1.0)*cj13*x8898))+((r22*x8896))+(((-1.0)*cj14*sj13))+(((-1.0)*r21*x8895*x8897)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x8902=(gconst1*r01);
IkReal x8903=(gconst2*r00);
CheckValue<IkReal> x8904 = IKatan2WithCheck(IkReal(r02),IkReal((x8902+(((-1.0)*x8903)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8904.valid){
continue;
}
CheckValue<IkReal> x8905=IKPowWithIntegerCheck(IKsign(((((2.0)*x8902*x8903))+(((-1.0)*(r02*r02)))+(((-1.0)*(x8903*x8903)))+(((-1.0)*(x8902*x8902))))),-1);
if(!x8905.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x8904.value)+(((1.5707963267949)*(x8905.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x8906=IKsin(j16);
IkReal x8907=IKcos(j16);
IkReal x8908=((1.0)*gconst1);
IkReal x8909=((1.0)*sj14);
IkReal x8910=(gconst2*x8906);
IkReal x8911=(gconst2*x8907);
IkReal x8912=((1.0)*x8906);
evalcond[0]=(((r00*x8910))+(((-1.0)*r01*x8906*x8908))+((r02*x8907)));
evalcond[1]=((((-1.0)*r21*x8907*x8908))+(((-1.0)*r22*x8912))+((r20*x8911)));
evalcond[2]=((((-1.0)*r11*x8907*x8908))+(((-1.0)*r12*x8912))+((r10*x8911)));
evalcond[3]=((-1.0)+((r00*x8911))+(((-1.0)*r02*x8912))+(((-1.0)*r01*x8907*x8908)));
evalcond[4]=((((-1.0)*r11*x8906*x8908))+((r12*x8907))+(((-1.0)*sj13*x8909))+((r10*x8910))+((cj13*cj14)));
evalcond[5]=((((-1.0)*r21*x8906*x8908))+(((-1.0)*cj13*x8909))+(((-1.0)*cj14*sj13))+((r22*x8907))+((r20*x8910)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x8913 = IKatan2WithCheck(IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x8913.valid){
continue;
}
CheckValue<IkReal> x8914=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8914.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x8913.value)+(((1.5707963267949)*(x8914.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x8915=IKsin(j16);
IkReal x8916=IKcos(j16);
IkReal x8917=((1.0)*gconst1);
IkReal x8918=((1.0)*sj14);
IkReal x8919=(gconst2*x8915);
IkReal x8920=(gconst2*x8916);
IkReal x8921=((1.0)*x8915);
evalcond[0]=(((r00*x8919))+((r02*x8916))+(((-1.0)*r01*x8915*x8917)));
evalcond[1]=(((r20*x8920))+(((-1.0)*r22*x8921))+(((-1.0)*r21*x8916*x8917)));
evalcond[2]=((((-1.0)*r12*x8921))+(((-1.0)*r11*x8916*x8917))+((r10*x8920)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8921))+(((-1.0)*r01*x8916*x8917))+((r00*x8920)));
evalcond[4]=(((r12*x8916))+(((-1.0)*r11*x8915*x8917))+((r10*x8919))+((cj13*cj14))+(((-1.0)*sj13*x8918)));
evalcond[5]=(((r22*x8916))+(((-1.0)*cj13*x8918))+(((-1.0)*r21*x8915*x8917))+(((-1.0)*cj14*sj13))+((r20*x8919)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[2];
IkReal x8922=((-1.0)*py);
CheckValue<IkReal> x8924 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8924.valid){
continue;
}
IkReal x8923=((-1.0)*(x8924.value));
sj17=gconst1;
cj17=gconst2;
j17=x8923;
sj12=1.0;
cj12=0;
j12=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8922);
rxp0_2=(py*r00);
rxp1_0=(r21*x8922);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x8923;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x8925=((1.0)*sj15);
IkReal x8926=(r01*r21);
IkReal x8927=(r00*r20);
j16eval[0]=((((-1.0)*x8925*x8926))+(((-1.0)*x8925*x8927)));
j16eval[1]=(x8927+x8926);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x8928=((-1.0)*py);
CheckValue<IkReal> x8930 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8930.valid){
continue;
}
IkReal x8929=((-1.0)*(x8930.value));
sj17=gconst1;
cj17=gconst2;
j17=x8929;
sj12=1.0;
cj12=0;
j12=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8928);
rxp0_2=(py*r00);
rxp1_0=(r21*x8928);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x8929;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x8931=(r00*r20);
IkReal x8932=((1.0)*cj15);
IkReal x8933=(r01*r21);
j16eval[0]=((((-1.0)*x8932*x8933))+(((-1.0)*x8931*x8932)));
j16eval[1]=(x8931+x8933);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
IkReal x8934=((-1.0)*py);
CheckValue<IkReal> x8936 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8936.valid){
continue;
}
IkReal x8935=((-1.0)*(x8936.value));
sj17=gconst1;
cj17=gconst2;
j17=x8935;
sj12=1.0;
cj12=0;
j12=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x8934);
rxp0_2=(py*r00);
rxp1_0=(r21*x8934);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x8935;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x8937=((1.0)*cj15);
j16eval[0]=((((-1.0)*r00*r20*x8937))+(((-1.0)*r01*r21*x8937)));
j16eval[1]=cj15;
j16eval[2]=r12;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x8938=((1.0)*gconst2);
CheckValue<IkReal> x8939=IKPowWithIntegerCheck((((cj15*gconst1*r01))+(((-1.0)*cj15*r00*x8938))),-1);
if(!x8939.valid){
continue;
}
CheckValue<IkReal> x8940=IKPowWithIntegerCheck(cj15,-1);
if(!x8940.valid){
continue;
}
CheckValue<IkReal> x8941=IKPowWithIntegerCheck(r12,-1);
if(!x8941.valid){
continue;
}
if( IKabs(((x8939.value)*(((((-1.0)*r01*sj15*x8938))+(((-1.0)*gconst1*r00*sj15)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x8940.value)*(x8941.value)*(((((-1.0)*sj13*sj14))+((cj13*cj14)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x8939.value)*(((((-1.0)*r01*sj15*x8938))+(((-1.0)*gconst1*r00*sj15))))))+IKsqr(((x8940.value)*(x8941.value)*(((((-1.0)*sj13*sj14))+((cj13*cj14))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x8939.value)*(((((-1.0)*r01*sj15*x8938))+(((-1.0)*gconst1*r00*sj15))))), ((x8940.value)*(x8941.value)*(((((-1.0)*sj13*sj14))+((cj13*cj14))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x8942=IKcos(j16);
IkReal x8943=IKsin(j16);
IkReal x8944=(gconst1*r21);
IkReal x8945=(cj13*cj14);
IkReal x8946=((1.0)*cj15);
IkReal x8947=(gconst1*r00);
IkReal x8948=((1.0)*sj15);
IkReal x8949=(gconst1*r01);
IkReal x8950=(gconst2*r01);
IkReal x8951=(gconst2*r21);
IkReal x8952=(gconst1*r20);
IkReal x8953=((1.0)*sj14);
IkReal x8954=((1.0)*cj14*sj13);
IkReal x8955=(cj13*x8953);
IkReal x8956=((1.0)*x8942);
IkReal x8957=(gconst2*x8943);
IkReal x8958=(sj15*x8943);
IkReal x8959=(cj15*x8943);
IkReal x8960=(gconst2*x8942);
IkReal x8961=(x8954+x8955);
evalcond[0]=((-1.0)*r12*x8943);
evalcond[1]=((((-1.0)*x8944*x8956))+((r20*x8960)));
evalcond[2]=((-1.0)+((r00*x8960))+(((-1.0)*x8949*x8956)));
evalcond[3]=((((-1.0)*sj13*x8953))+(((-1.0)*r12*x8942*x8946))+x8945);
evalcond[4]=((((-1.0)*r12*x8942*x8948))+(((-1.0)*x8961)));
evalcond[5]=(((sj15*x8947))+((sj15*x8950))+((x8949*x8959))+(((-1.0)*r00*x8946*x8957)));
evalcond[6]=((((-1.0)*x8946*x8950))+(((-1.0)*x8946*x8947))+(((-1.0)*r00*x8948*x8957))+((x8949*x8958)));
evalcond[7]=(((x8944*x8959))+(((-1.0)*r20*x8946*x8957))+((sj15*x8951))+((sj15*x8952))+(((-1.0)*x8961)));
evalcond[8]=(((x8944*x8958))+(((-1.0)*x8946*x8952))+(((-1.0)*x8946*x8951))+(((-1.0)*r20*x8948*x8957))+((sj13*sj14))+(((-1.0)*x8945)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x8962=((1.0)*gconst2);
IkReal x8963=(gconst1*r01);
CheckValue<IkReal> x8964=IKPowWithIntegerCheck(((((-1.0)*cj15*r00*x8962))+((cj15*x8963))),-1);
if(!x8964.valid){
continue;
}
CheckValue<IkReal> x8965=IKPowWithIntegerCheck(((((-1.0)*x8963))+((gconst2*r00))),-1);
if(!x8965.valid){
continue;
}
if( IKabs(((x8964.value)*(((((-1.0)*r01*sj15*x8962))+(((-1.0)*gconst1*r00*sj15)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x8965.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x8964.value)*(((((-1.0)*r01*sj15*x8962))+(((-1.0)*gconst1*r00*sj15))))))+IKsqr(x8965.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x8964.value)*(((((-1.0)*r01*sj15*x8962))+(((-1.0)*gconst1*r00*sj15))))), x8965.value);
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x8966=IKcos(j16);
IkReal x8967=IKsin(j16);
IkReal x8968=(gconst1*r21);
IkReal x8969=(cj13*cj14);
IkReal x8970=((1.0)*cj15);
IkReal x8971=(gconst1*r00);
IkReal x8972=((1.0)*sj15);
IkReal x8973=(gconst1*r01);
IkReal x8974=(gconst2*r01);
IkReal x8975=(gconst2*r21);
IkReal x8976=(gconst1*r20);
IkReal x8977=((1.0)*sj14);
IkReal x8978=((1.0)*cj14*sj13);
IkReal x8979=(cj13*x8977);
IkReal x8980=((1.0)*x8966);
IkReal x8981=(gconst2*x8967);
IkReal x8982=(sj15*x8967);
IkReal x8983=(cj15*x8967);
IkReal x8984=(gconst2*x8966);
IkReal x8985=(x8978+x8979);
evalcond[0]=((-1.0)*r12*x8967);
evalcond[1]=((((-1.0)*x8968*x8980))+((r20*x8984)));
evalcond[2]=((-1.0)+((r00*x8984))+(((-1.0)*x8973*x8980)));
evalcond[3]=((((-1.0)*r12*x8966*x8970))+x8969+(((-1.0)*sj13*x8977)));
evalcond[4]=((((-1.0)*x8985))+(((-1.0)*r12*x8966*x8972)));
evalcond[5]=(((sj15*x8974))+((sj15*x8971))+((x8973*x8983))+(((-1.0)*r00*x8970*x8981)));
evalcond[6]=((((-1.0)*r00*x8972*x8981))+((x8973*x8982))+(((-1.0)*x8970*x8971))+(((-1.0)*x8970*x8974)));
evalcond[7]=((((-1.0)*x8985))+((sj15*x8975))+((sj15*x8976))+(((-1.0)*r20*x8970*x8981))+((x8968*x8983)));
evalcond[8]=((((-1.0)*x8969))+((sj13*sj14))+(((-1.0)*r20*x8972*x8981))+((x8968*x8982))+(((-1.0)*x8970*x8976))+(((-1.0)*x8970*x8975)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x8986=(gconst2*r00);
IkReal x8987=(gconst1*r01);
CheckValue<IkReal> x8988=IKPowWithIntegerCheck((((sj15*x8987))+(((-1.0)*sj15*x8986))),-1);
if(!x8988.valid){
continue;
}
CheckValue<IkReal> x8989=IKPowWithIntegerCheck(((((-1.0)*x8987))+x8986),-1);
if(!x8989.valid){
continue;
}
if( IKabs(((x8988.value)*((((cj15*gconst2*r01))+((cj15*gconst1*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x8989.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x8988.value)*((((cj15*gconst2*r01))+((cj15*gconst1*r00))))))+IKsqr(x8989.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x8988.value)*((((cj15*gconst2*r01))+((cj15*gconst1*r00))))), x8989.value);
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x8990=IKcos(j16);
IkReal x8991=IKsin(j16);
IkReal x8992=(gconst1*r21);
IkReal x8993=(cj13*cj14);
IkReal x8994=((1.0)*cj15);
IkReal x8995=(gconst1*r00);
IkReal x8996=((1.0)*sj15);
IkReal x8997=(gconst1*r01);
IkReal x8998=(gconst2*r01);
IkReal x8999=(gconst2*r21);
IkReal x9000=(gconst1*r20);
IkReal x9001=((1.0)*sj14);
IkReal x9002=((1.0)*cj14*sj13);
IkReal x9003=(cj13*x9001);
IkReal x9004=((1.0)*x8990);
IkReal x9005=(gconst2*x8991);
IkReal x9006=(sj15*x8991);
IkReal x9007=(cj15*x8991);
IkReal x9008=(gconst2*x8990);
IkReal x9009=(x9003+x9002);
evalcond[0]=((-1.0)*r12*x8991);
evalcond[1]=((((-1.0)*x8992*x9004))+((r20*x9008)));
evalcond[2]=((-1.0)+(((-1.0)*x8997*x9004))+((r00*x9008)));
evalcond[3]=((((-1.0)*r12*x8990*x8994))+x8993+(((-1.0)*sj13*x9001)));
evalcond[4]=((((-1.0)*x9009))+(((-1.0)*r12*x8990*x8996)));
evalcond[5]=((((-1.0)*r00*x8994*x9005))+((sj15*x8995))+((sj15*x8998))+((x8997*x9007)));
evalcond[6]=((((-1.0)*x8994*x8995))+(((-1.0)*x8994*x8998))+(((-1.0)*r00*x8996*x9005))+((x8997*x9006)));
evalcond[7]=((((-1.0)*x9009))+(((-1.0)*r20*x8994*x9005))+((x8992*x9007))+((sj15*x8999))+((sj15*x9000)));
evalcond[8]=((((-1.0)*r20*x8996*x9005))+(((-1.0)*x8994*x8999))+((x8992*x9006))+(((-1.0)*x8994*x9000))+(((-1.0)*x8993))+((sj13*sj14)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j16]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x9010=gconst1*gconst1;
IkReal x9011=gconst2*gconst2;
IkReal x9012=(r00*r11);
IkReal x9013=(gconst1*gconst2);
IkReal x9014=((1.0)*sj15);
IkReal x9015=(r01*r11);
IkReal x9016=((1.0)*cj15*r10);
IkReal x9017=((1.0)*cj15*r12);
CheckValue<IkReal> x9018 = IKatan2WithCheck(IkReal((((cj15*x9013*x9015))+(((-1.0)*r00*x9013*x9016))+((cj15*x9010*x9012))+(((-1.0)*r01*x9011*x9016)))),IkReal(((((-1.0)*gconst2*r01*x9017))+(((-1.0)*gconst1*r00*x9017)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9018.valid){
continue;
}
CheckValue<IkReal> x9019=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*r10*x9013*x9014))+(((-1.0)*x9012*x9013*x9014))+((sj15*x9010*x9015))+((r00*r10*sj15*x9011))+((r02*r12*sj15)))),-1);
if(!x9019.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x9018.value)+(((1.5707963267949)*(x9019.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x9020=IKcos(j16);
IkReal x9021=IKsin(j16);
IkReal x9022=(gconst1*r21);
IkReal x9023=(gconst2*r10);
IkReal x9024=(gconst2*sj15);
IkReal x9025=((1.0)*cj15);
IkReal x9026=(gconst1*r00);
IkReal x9027=((1.0)*sj13);
IkReal x9028=(gconst1*r11);
IkReal x9029=(cj13*cj14);
IkReal x9030=(gconst1*r01);
IkReal x9031=(gconst1*r10);
IkReal x9032=(gconst1*r20);
IkReal x9033=(cj14*x9027);
IkReal x9034=((1.0)*cj13*sj14);
IkReal x9035=((1.0)*x9020);
IkReal x9036=(gconst2*x9021);
IkReal x9037=((1.0)*x9021);
IkReal x9038=(sj15*x9021);
IkReal x9039=(cj15*x9021);
IkReal x9040=(gconst2*x9020);
IkReal x9041=(x9024*x9037);
IkReal x9042=(x9033+x9034);
evalcond[0]=((((-1.0)*x9022*x9035))+((r20*x9040))+(((-1.0)*r22*x9037)));
evalcond[1]=((((-1.0)*r12*x9037))+(((-1.0)*x9028*x9035))+((x9020*x9023)));
evalcond[2]=((-1.0)+(((-1.0)*x9030*x9035))+((r00*x9040))+(((-1.0)*r02*x9037)));
evalcond[3]=(((r01*x9024))+(((-1.0)*r02*x9020*x9025))+((sj15*x9026))+((x9030*x9039))+(((-1.0)*r00*x9025*x9036)));
evalcond[4]=((((-1.0)*gconst2*r01*x9025))+(((-1.0)*r02*sj15*x9035))+(((-1.0)*r00*x9041))+((x9030*x9038))+(((-1.0)*x9025*x9026)));
evalcond[5]=((((-1.0)*x9021*x9023*x9025))+(((-1.0)*sj14*x9027))+((x9028*x9039))+x9029+((r11*x9024))+((sj15*x9031))+(((-1.0)*r12*x9020*x9025)));
evalcond[6]=(((r21*x9024))+(((-1.0)*r20*x9025*x9036))+(((-1.0)*x9042))+(((-1.0)*r22*x9020*x9025))+((sj15*x9032))+((x9022*x9039)));
evalcond[7]=((((-1.0)*gconst2*r21*x9025))+(((-1.0)*r22*sj15*x9035))+((sj13*sj14))+(((-1.0)*r20*x9041))+(((-1.0)*x9025*x9032))+((x9022*x9038))+(((-1.0)*x9029)));
evalcond[8]=((((-1.0)*gconst2*r11*x9025))+((x9028*x9038))+(((-1.0)*x9042))+(((-1.0)*r12*sj15*x9035))+(((-1.0)*sj15*x9023*x9037))+(((-1.0)*x9025*x9031)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x9043=gconst2*gconst2;
IkReal x9044=gconst1*gconst1;
IkReal x9045=(r00*sj15);
IkReal x9046=((1.0)*r11);
IkReal x9047=(r01*sj15);
IkReal x9048=(gconst1*gconst2);
IkReal x9049=(cj15*r01);
IkReal x9050=(cj15*r00);
IkReal x9051=(r10*x9043);
CheckValue<IkReal> x9052=IKPowWithIntegerCheck(IKsign((((r11*x9044*x9049))+(((-1.0)*r10*x9048*x9049))+((x9050*x9051))+((cj15*r02*r12))+(((-1.0)*x9046*x9048*x9050)))),-1);
if(!x9052.valid){
continue;
}
CheckValue<IkReal> x9053 = IKatan2WithCheck(IkReal((((x9047*x9051))+((r10*x9045*x9048))+(((-1.0)*x9044*x9045*x9046))+(((-1.0)*x9046*x9047*x9048)))),IkReal((((gconst2*r12*x9047))+((gconst1*r12*x9045)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9053.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9052.value)))+(x9053.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x9054=IKcos(j16);
IkReal x9055=IKsin(j16);
IkReal x9056=(gconst1*r21);
IkReal x9057=(gconst2*r10);
IkReal x9058=(gconst2*sj15);
IkReal x9059=((1.0)*cj15);
IkReal x9060=(gconst1*r00);
IkReal x9061=((1.0)*sj13);
IkReal x9062=(gconst1*r11);
IkReal x9063=(cj13*cj14);
IkReal x9064=(gconst1*r01);
IkReal x9065=(gconst1*r10);
IkReal x9066=(gconst1*r20);
IkReal x9067=(cj14*x9061);
IkReal x9068=((1.0)*cj13*sj14);
IkReal x9069=((1.0)*x9054);
IkReal x9070=(gconst2*x9055);
IkReal x9071=((1.0)*x9055);
IkReal x9072=(sj15*x9055);
IkReal x9073=(cj15*x9055);
IkReal x9074=(gconst2*x9054);
IkReal x9075=(x9058*x9071);
IkReal x9076=(x9067+x9068);
evalcond[0]=(((r20*x9074))+(((-1.0)*r22*x9071))+(((-1.0)*x9056*x9069)));
evalcond[1]=((((-1.0)*x9062*x9069))+(((-1.0)*r12*x9071))+((x9054*x9057)));
evalcond[2]=((-1.0)+(((-1.0)*x9064*x9069))+(((-1.0)*r02*x9071))+((r00*x9074)));
evalcond[3]=((((-1.0)*r00*x9059*x9070))+((r01*x9058))+(((-1.0)*r02*x9054*x9059))+((sj15*x9060))+((x9064*x9073)));
evalcond[4]=((((-1.0)*r02*sj15*x9069))+(((-1.0)*x9059*x9060))+(((-1.0)*r00*x9075))+(((-1.0)*gconst2*r01*x9059))+((x9064*x9072)));
evalcond[5]=(((x9062*x9073))+(((-1.0)*r12*x9054*x9059))+x9063+(((-1.0)*sj14*x9061))+((sj15*x9065))+((r11*x9058))+(((-1.0)*x9055*x9057*x9059)));
evalcond[6]=((((-1.0)*r22*x9054*x9059))+(((-1.0)*x9076))+((sj15*x9066))+((x9056*x9073))+(((-1.0)*r20*x9059*x9070))+((r21*x9058)));
evalcond[7]=((((-1.0)*r22*sj15*x9069))+(((-1.0)*x9059*x9066))+(((-1.0)*x9063))+((sj13*sj14))+(((-1.0)*gconst2*r21*x9059))+((x9056*x9072))+(((-1.0)*r20*x9075)));
evalcond[8]=(((x9062*x9072))+(((-1.0)*x9059*x9065))+(((-1.0)*gconst2*r11*x9059))+(((-1.0)*x9076))+(((-1.0)*sj15*x9057*x9071))+(((-1.0)*r12*sj15*x9069)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x9077 = IKatan2WithCheck(IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x9077.valid){
continue;
}
CheckValue<IkReal> x9078=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9078.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x9077.value)+(((1.5707963267949)*(x9078.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x9079=IKcos(j16);
IkReal x9080=IKsin(j16);
IkReal x9081=(gconst1*r21);
IkReal x9082=(gconst2*r10);
IkReal x9083=(gconst2*sj15);
IkReal x9084=((1.0)*cj15);
IkReal x9085=(gconst1*r00);
IkReal x9086=((1.0)*sj13);
IkReal x9087=(gconst1*r11);
IkReal x9088=(cj13*cj14);
IkReal x9089=(gconst1*r01);
IkReal x9090=(gconst1*r10);
IkReal x9091=(gconst1*r20);
IkReal x9092=(cj14*x9086);
IkReal x9093=((1.0)*cj13*sj14);
IkReal x9094=((1.0)*x9079);
IkReal x9095=(gconst2*x9080);
IkReal x9096=((1.0)*x9080);
IkReal x9097=(sj15*x9080);
IkReal x9098=(cj15*x9080);
IkReal x9099=(gconst2*x9079);
IkReal x9100=(x9083*x9096);
IkReal x9101=(x9092+x9093);
evalcond[0]=(((r20*x9099))+(((-1.0)*x9081*x9094))+(((-1.0)*r22*x9096)));
evalcond[1]=((((-1.0)*x9087*x9094))+((x9079*x9082))+(((-1.0)*r12*x9096)));
evalcond[2]=((-1.0)+((r00*x9099))+(((-1.0)*r02*x9096))+(((-1.0)*x9089*x9094)));
evalcond[3]=(((sj15*x9085))+((r01*x9083))+(((-1.0)*r02*x9079*x9084))+(((-1.0)*r00*x9084*x9095))+((x9089*x9098)));
evalcond[4]=((((-1.0)*gconst2*r01*x9084))+(((-1.0)*r02*sj15*x9094))+(((-1.0)*x9084*x9085))+(((-1.0)*r00*x9100))+((x9089*x9097)));
evalcond[5]=((((-1.0)*sj14*x9086))+((sj15*x9090))+(((-1.0)*r12*x9079*x9084))+((x9087*x9098))+((r11*x9083))+x9088+(((-1.0)*x9080*x9082*x9084)));
evalcond[6]=((((-1.0)*r22*x9079*x9084))+((x9081*x9098))+((sj15*x9091))+(((-1.0)*r20*x9084*x9095))+((r21*x9083))+(((-1.0)*x9101)));
evalcond[7]=(((x9081*x9097))+(((-1.0)*x9084*x9091))+(((-1.0)*r20*x9100))+((sj13*sj14))+(((-1.0)*x9088))+(((-1.0)*gconst2*r21*x9084))+(((-1.0)*r22*sj15*x9094)));
evalcond[8]=((((-1.0)*r12*sj15*x9094))+((x9087*x9097))+(((-1.0)*gconst2*r11*x9084))+(((-1.0)*x9084*x9090))+(((-1.0)*x9101))+(((-1.0)*sj15*x9082*x9096)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x9104 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9104.valid){
continue;
}
IkReal x9102=((-1.0)*(x9104.value));
IkReal x9103=x7617;
sj17=gconst1;
cj17=gconst2;
j17=x9102;
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
IkReal gconst0=x9102;
IkReal gconst1=((-1.0)*r21*x9103);
IkReal gconst2=(r20*x9103);
j16eval[0]=1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x9107 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9107.valid){
continue;
}
IkReal x9105=((-1.0)*(x9107.value));
IkReal x9106=x7617;
sj17=gconst1;
cj17=gconst2;
j17=x9105;
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
IkReal gconst0=x9105;
IkReal gconst1=((-1.0)*r21*x9106);
IkReal gconst2=(r20*x9106);
CheckValue<IkReal> x9115=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9115.valid){
continue;
}
IkReal x9108=x9115.value;
IkReal x9109=(cj15*x9108);
IkReal x9110=(r11*x9109);
IkReal x9111=(r01*x9109);
IkReal x9112=(r00*x9109);
IkReal x9113=(r10*x9109);
IkReal x9114=(r20*r21*x9109);
j16eval[0]=IKsign((((r00*r20*r21*x9110))+((cj15*r02*r12))+((r10*x9112*(r20*r20)))+((r01*x9110*(r21*r21)))+((r10*r20*r21*x9111))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x9118 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9118.valid){
continue;
}
IkReal x9116=((-1.0)*(x9118.value));
IkReal x9117=x7617;
sj17=gconst1;
cj17=gconst2;
j17=x9116;
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
IkReal gconst0=x9116;
IkReal gconst1=((-1.0)*r21*x9117);
IkReal gconst2=(r20*x9117);
CheckValue<IkReal> x9126=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9126.valid){
continue;
}
IkReal x9119=x9126.value;
IkReal x9120=(sj15*x9119);
IkReal x9121=(r11*x9120);
IkReal x9122=(r00*x9120);
IkReal x9123=(r01*x9120);
IkReal x9124=(r10*x9120);
IkReal x9125=(r20*r21*x9120);
j16eval[0]=IKsign((((r10*x9122*(r20*r20)))+((r00*r20*r21*x9121))+((r01*x9121*(r21*r21)))+((r02*r12*sj15))+((r10*r20*r21*x9123))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j15))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x9129 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9129.valid){
continue;
}
IkReal x9127=((-1.0)*(x9129.value));
IkReal x9128=x7617;
sj17=gconst1;
cj17=gconst2;
j17=x9127;
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
sj15=0;
cj15=1.0;
j15=0;
IkReal gconst0=x9127;
IkReal gconst1=((-1.0)*r21*x9128);
IkReal gconst2=(r20*x9128);
j16eval[0]=1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
CheckValue<IkReal> x9132 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9132.valid){
continue;
}
IkReal x9130=((-1.0)*(x9132.value));
IkReal x9131=x7617;
sj17=gconst1;
cj17=gconst2;
j17=x9130;
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
sj15=0;
cj15=1.0;
j15=0;
IkReal gconst0=x9130;
IkReal gconst1=((-1.0)*r21*x9131);
IkReal gconst2=(r20*x9131);
j16eval[0]=r02;
j16eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x9135 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9135.valid){
continue;
}
IkReal x9133=((-1.0)*(x9135.value));
IkReal x9134=x7617;
sj17=gconst1;
cj17=gconst2;
j17=x9133;
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
sj15=0;
cj15=1.0;
j15=0;
IkReal gconst0=x9133;
IkReal gconst1=((-1.0)*r21*x9134);
IkReal gconst2=(r20*x9134);
IkReal x9136=r22*r22;
IkReal x9137=(r12*sj13*sj14);
CheckValue<IkReal> x9142=IKPowWithIntegerCheck(((-1.0)+x9136),-1);
if(!x9142.valid){
continue;
}
IkReal x9138=x9142.value;
IkReal x9139=((1.0)*cj13*cj14*r12);
if((((1.0)+(((-1.0)*x9136)))) < -0.00001)
continue;
IkReal x9140=IKsqrt(((1.0)+(((-1.0)*x9136))));
IkReal x9141=(r22*x9138*x9140);
j16eval[0]=((IKabs((x9137+(((-1.0)*x9139)))))+(IKabs(((((-1.0)*x9139*x9141))+((x9137*x9141))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x9143=(sj13*sj14);
IkReal x9144=(gconst2*r10);
IkReal x9145=(gconst1*r11);
IkReal x9146=((1.0)*cj13*cj14);
CheckValue<IkReal> x9147 = IKatan2WithCheck(IkReal(((((-1.0)*x9143*x9145))+((cj13*cj14*x9145))+(((-1.0)*x9144*x9146))+((x9143*x9144)))),IkReal((((r12*x9143))+(((-1.0)*r12*x9146)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9147.valid){
continue;
}
CheckValue<IkReal> x9148=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x9144*x9144)+(((-2.0)*x9144*x9145))+(x9145*x9145))),-1);
if(!x9148.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x9147.value)+(((1.5707963267949)*(x9148.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x9149=IKcos(j16);
IkReal x9150=IKsin(j16);
IkReal x9151=((1.0)*cj13);
IkReal x9152=(gconst1*x9150);
IkReal x9153=((1.0)*x9149);
IkReal x9154=((1.0)*x9150);
IkReal x9155=(gconst2*x9149);
IkReal x9156=(gconst1*x9153);
evalcond[0]=((((-1.0)*r21*x9156))+((r20*x9155))+(((-1.0)*r22*x9154)));
evalcond[1]=((((-1.0)*r11*x9156))+(((-1.0)*r12*x9154))+((r10*x9155)));
evalcond[2]=((((-1.0)*r02*x9153))+(((-1.0)*gconst2*r00*x9154))+((r01*x9152)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9154))+((r00*x9155))+(((-1.0)*r01*x9156)));
evalcond[4]=(((r11*x9152))+(((-1.0)*r12*x9153))+(((-1.0)*gconst2*r10*x9154))+((sj13*sj14))+(((-1.0)*cj14*x9151)));
evalcond[5]=((((-1.0)*gconst2*r20*x9154))+(((-1.0)*r22*x9153))+(((-1.0)*sj14*x9151))+((r21*x9152))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x9157=(gconst1*r01);
IkReal x9158=(gconst2*r00);
CheckValue<IkReal> x9159=IKPowWithIntegerCheck(IKsign(((((-2.0)*x9157*x9158))+(r02*r02)+(x9157*x9157)+(x9158*x9158))),-1);
if(!x9159.valid){
continue;
}
CheckValue<IkReal> x9160 = IKatan2WithCheck(IkReal(r02),IkReal((x9157+(((-1.0)*x9158)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9160.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9159.value)))+(x9160.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x9161=IKcos(j16);
IkReal x9162=IKsin(j16);
IkReal x9163=((1.0)*cj13);
IkReal x9164=(gconst1*x9162);
IkReal x9165=((1.0)*x9161);
IkReal x9166=((1.0)*x9162);
IkReal x9167=(gconst2*x9161);
IkReal x9168=(gconst1*x9165);
evalcond[0]=((((-1.0)*r22*x9166))+(((-1.0)*r21*x9168))+((r20*x9167)));
evalcond[1]=((((-1.0)*r11*x9168))+(((-1.0)*r12*x9166))+((r10*x9167)));
evalcond[2]=(((r01*x9164))+(((-1.0)*r02*x9165))+(((-1.0)*gconst2*r00*x9166)));
evalcond[3]=((1.0)+((r00*x9167))+(((-1.0)*r02*x9166))+(((-1.0)*r01*x9168)));
evalcond[4]=((((-1.0)*cj14*x9163))+(((-1.0)*r12*x9165))+(((-1.0)*gconst2*r10*x9166))+((sj13*sj14))+((r11*x9164)));
evalcond[5]=((((-1.0)*r22*x9165))+(((-1.0)*sj14*x9163))+((r21*x9164))+(((-1.0)*gconst2*r20*x9166))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x9169=((1.0)*gconst1);
CheckValue<IkReal> x9170=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x9169))+(((-1.0)*gconst2*r11)))),-1);
if(!x9170.valid){
continue;
}
CheckValue<IkReal> x9171 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x9169))+((gconst2*r20)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x9171.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9170.value)))+(x9171.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x9172=IKcos(j16);
IkReal x9173=IKsin(j16);
IkReal x9174=((1.0)*cj13);
IkReal x9175=(gconst1*x9173);
IkReal x9176=((1.0)*x9172);
IkReal x9177=((1.0)*x9173);
IkReal x9178=(gconst2*x9172);
IkReal x9179=(gconst1*x9176);
evalcond[0]=((((-1.0)*r21*x9179))+((r20*x9178))+(((-1.0)*r22*x9177)));
evalcond[1]=(((r10*x9178))+(((-1.0)*r12*x9177))+(((-1.0)*r11*x9179)));
evalcond[2]=((((-1.0)*gconst2*r00*x9177))+((r01*x9175))+(((-1.0)*r02*x9176)));
evalcond[3]=((1.0)+(((-1.0)*r01*x9179))+((r00*x9178))+(((-1.0)*r02*x9177)));
evalcond[4]=((((-1.0)*cj14*x9174))+(((-1.0)*gconst2*r10*x9177))+((sj13*sj14))+(((-1.0)*r12*x9176))+((r11*x9175)));
evalcond[5]=((((-1.0)*gconst2*r20*x9177))+((r21*x9175))+(((-1.0)*r22*x9176))+(((-1.0)*cj14*sj13))+(((-1.0)*sj14*x9174)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x9182 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9182.valid){
continue;
}
IkReal x9180=((-1.0)*(x9182.value));
IkReal x9181=x7617;
sj17=gconst1;
cj17=gconst2;
j17=x9180;
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
IkReal gconst0=x9180;
IkReal gconst1=((-1.0)*r21*x9181);
IkReal gconst2=(r20*x9181);
j16eval[0]=1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
CheckValue<IkReal> x9185 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9185.valid){
continue;
}
IkReal x9183=((-1.0)*(x9185.value));
IkReal x9184=x7617;
sj17=gconst1;
cj17=gconst2;
j17=x9183;
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
IkReal gconst0=x9183;
IkReal gconst1=((-1.0)*r21*x9184);
IkReal gconst2=(r20*x9184);
j16eval[0]=r02;
j16eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x9188 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9188.valid){
continue;
}
IkReal x9186=((-1.0)*(x9188.value));
IkReal x9187=x7617;
sj17=gconst1;
cj17=gconst2;
j17=x9186;
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
IkReal gconst0=x9186;
IkReal gconst1=((-1.0)*r21*x9187);
IkReal gconst2=(r20*x9187);
IkReal x9189=r22*r22;
IkReal x9190=(cj13*r02*sj14);
IkReal x9191=(cj14*r02*sj13);
CheckValue<IkReal> x9195=IKPowWithIntegerCheck(((-1.0)+x9189),-1);
if(!x9195.valid){
continue;
}
IkReal x9192=x9195.value;
if((((1.0)+(((-1.0)*x9189)))) < -0.00001)
continue;
IkReal x9193=IKsqrt(((1.0)+(((-1.0)*x9189))));
IkReal x9194=(r22*x9192*x9193);
j16eval[0]=((IKabs((((x9190*x9194))+((x9191*x9194)))))+(IKabs(((((-1.0)*x9190))+(((-1.0)*x9191))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x9196=(gconst2*r00);
IkReal x9197=(cj13*sj14);
IkReal x9198=(gconst1*r01);
IkReal x9199=((1.0)*cj14*sj13);
CheckValue<IkReal> x9200 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x9199))+(((-1.0)*r02*x9197)))),IkReal(((((-1.0)*x9197*x9198))+((x9196*x9197))+(((-1.0)*x9198*x9199))+((cj14*sj13*x9196)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9200.valid){
continue;
}
CheckValue<IkReal> x9201=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9201.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x9200.value)+(((1.5707963267949)*(x9201.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x9202=IKsin(j16);
IkReal x9203=IKcos(j16);
IkReal x9204=((1.0)*gconst1);
IkReal x9205=((1.0)*cj13);
IkReal x9206=(gconst2*x9202);
IkReal x9207=(gconst2*x9203);
IkReal x9208=((1.0)*x9202);
evalcond[0]=(((r00*x9206))+((r02*x9203))+(((-1.0)*r01*x9202*x9204)));
evalcond[1]=(((r20*x9207))+(((-1.0)*r21*x9203*x9204))+(((-1.0)*r22*x9208)));
evalcond[2]=(((r10*x9207))+(((-1.0)*r11*x9203*x9204))+(((-1.0)*r12*x9208)));
evalcond[3]=((1.0)+(((-1.0)*r01*x9203*x9204))+((r00*x9207))+(((-1.0)*r02*x9208)));
evalcond[4]=(((r10*x9206))+(((-1.0)*r11*x9202*x9204))+(((-1.0)*cj14*x9205))+((r12*x9203))+((sj13*sj14)));
evalcond[5]=(((r20*x9206))+((r22*x9203))+(((-1.0)*r21*x9202*x9204))+(((-1.0)*sj14*x9205))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x9209=(gconst1*r01);
IkReal x9210=(gconst2*r00);
CheckValue<IkReal> x9211 = IKatan2WithCheck(IkReal(r02),IkReal((x9209+(((-1.0)*x9210)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9211.valid){
continue;
}
CheckValue<IkReal> x9212=IKPowWithIntegerCheck(IKsign(((x9210*x9210)+(r02*r02)+(x9209*x9209)+(((-2.0)*x9209*x9210)))),-1);
if(!x9212.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x9211.value)+(((1.5707963267949)*(x9212.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x9213=IKsin(j16);
IkReal x9214=IKcos(j16);
IkReal x9215=((1.0)*gconst1);
IkReal x9216=((1.0)*cj13);
IkReal x9217=(gconst2*x9213);
IkReal x9218=(gconst2*x9214);
IkReal x9219=((1.0)*x9213);
evalcond[0]=(((r00*x9217))+((r02*x9214))+(((-1.0)*r01*x9213*x9215)));
evalcond[1]=(((r20*x9218))+(((-1.0)*r21*x9214*x9215))+(((-1.0)*r22*x9219)));
evalcond[2]=(((r10*x9218))+(((-1.0)*r11*x9214*x9215))+(((-1.0)*r12*x9219)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9219))+((r00*x9218))+(((-1.0)*r01*x9214*x9215)));
evalcond[4]=(((r10*x9217))+((r12*x9214))+(((-1.0)*cj14*x9216))+((sj13*sj14))+(((-1.0)*r11*x9213*x9215)));
evalcond[5]=(((r20*x9217))+(((-1.0)*sj14*x9216))+((r22*x9214))+(((-1.0)*cj14*sj13))+(((-1.0)*r21*x9213*x9215)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x9220=((1.0)*gconst1);
CheckValue<IkReal> x9221 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x9220))+((gconst2*r20)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x9221.valid){
continue;
}
CheckValue<IkReal> x9222=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x9220))+(((-1.0)*gconst2*r11)))),-1);
if(!x9222.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x9221.value)+(((1.5707963267949)*(x9222.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x9223=IKsin(j16);
IkReal x9224=IKcos(j16);
IkReal x9225=((1.0)*gconst1);
IkReal x9226=((1.0)*cj13);
IkReal x9227=(gconst2*x9223);
IkReal x9228=(gconst2*x9224);
IkReal x9229=((1.0)*x9223);
evalcond[0]=(((r00*x9227))+((r02*x9224))+(((-1.0)*r01*x9223*x9225)));
evalcond[1]=((((-1.0)*r21*x9224*x9225))+((r20*x9228))+(((-1.0)*r22*x9229)));
evalcond[2]=((((-1.0)*r12*x9229))+(((-1.0)*r11*x9224*x9225))+((r10*x9228)));
evalcond[3]=((1.0)+((r00*x9228))+(((-1.0)*r02*x9229))+(((-1.0)*r01*x9224*x9225)));
evalcond[4]=((((-1.0)*cj14*x9226))+((r12*x9224))+(((-1.0)*r11*x9223*x9225))+((sj13*sj14))+((r10*x9227)));
evalcond[5]=(((r20*x9227))+((r22*x9224))+(((-1.0)*r21*x9223*x9225))+(((-1.0)*sj14*x9226))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[2];
IkReal x9230=((-1.0)*py);
CheckValue<IkReal> x9232 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9232.valid){
continue;
}
IkReal x9231=((-1.0)*(x9232.value));
sj17=gconst1;
cj17=gconst2;
j17=x9231;
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x9230);
rxp0_2=(py*r00);
rxp1_0=(r21*x9230);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9231;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x9233=((1.0)*sj15);
IkReal x9234=(r01*r21);
IkReal x9235=(r00*r20);
j16eval[0]=((((-1.0)*x9233*x9234))+(((-1.0)*x9233*x9235)));
j16eval[1]=(x9234+x9235);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x9236=((-1.0)*py);
CheckValue<IkReal> x9238 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9238.valid){
continue;
}
IkReal x9237=((-1.0)*(x9238.value));
sj17=gconst1;
cj17=gconst2;
j17=x9237;
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x9236);
rxp0_2=(py*r00);
rxp1_0=(r21*x9236);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9237;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x9239=(r00*r20);
IkReal x9240=((1.0)*cj15);
IkReal x9241=(r01*r21);
j16eval[0]=((((-1.0)*x9240*x9241))+(((-1.0)*x9239*x9240)));
j16eval[1]=(x9241+x9239);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
IkReal x9242=((-1.0)*py);
CheckValue<IkReal> x9244 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9244.valid){
continue;
}
IkReal x9243=((-1.0)*(x9244.value));
sj17=gconst1;
cj17=gconst2;
j17=x9243;
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x9242);
rxp0_2=(py*r00);
rxp1_0=(r21*x9242);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9243;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x9245=((1.0)*cj15);
j16eval[0]=((((-1.0)*r01*r21*x9245))+(((-1.0)*r00*r20*x9245)));
j16eval[1]=r12;
j16eval[2]=sj15;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x9246=((1.0)*gconst2);
CheckValue<IkReal> x9247=IKPowWithIntegerCheck((((cj15*gconst1*r01))+(((-1.0)*cj15*r00*x9246))),-1);
if(!x9247.valid){
continue;
}
CheckValue<IkReal> x9248=IKPowWithIntegerCheck(r12,-1);
if(!x9248.valid){
continue;
}
CheckValue<IkReal> x9249=IKPowWithIntegerCheck(sj15,-1);
if(!x9249.valid){
continue;
}
if( IKabs(((x9247.value)*(((((-1.0)*gconst1*r00*sj15))+(((-1.0)*r01*sj15*x9246)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9248.value)*(x9249.value)*((((cj14*sj13))+((cj13*sj14)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9247.value)*(((((-1.0)*gconst1*r00*sj15))+(((-1.0)*r01*sj15*x9246))))))+IKsqr(((x9248.value)*(x9249.value)*((((cj14*sj13))+((cj13*sj14))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x9247.value)*(((((-1.0)*gconst1*r00*sj15))+(((-1.0)*r01*sj15*x9246))))), ((x9248.value)*(x9249.value)*((((cj14*sj13))+((cj13*sj14))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x9250=IKcos(j16);
IkReal x9251=IKsin(j16);
IkReal x9252=(sj13*sj14);
IkReal x9253=(gconst1*r21);
IkReal x9254=((1.0)*cj14);
IkReal x9255=((1.0)*cj15);
IkReal x9256=(gconst1*r00);
IkReal x9257=((1.0)*sj15);
IkReal x9258=(gconst1*r01);
IkReal x9259=(gconst2*r01);
IkReal x9260=(cj13*sj14);
IkReal x9261=(gconst2*r21);
IkReal x9262=(gconst1*r20);
IkReal x9263=(cj13*x9254);
IkReal x9264=((1.0)*x9250);
IkReal x9265=(gconst2*x9251);
IkReal x9266=(sj15*x9251);
IkReal x9267=(cj15*x9251);
IkReal x9268=(gconst2*x9250);
evalcond[0]=((-1.0)*r12*x9251);
evalcond[1]=(((r20*x9268))+(((-1.0)*x9253*x9264)));
evalcond[2]=(((cj14*sj13))+x9260+(((-1.0)*r12*x9250*x9257)));
evalcond[3]=((1.0)+(((-1.0)*x9258*x9264))+((r00*x9268)));
evalcond[4]=((((-1.0)*x9263))+x9252+(((-1.0)*r12*x9250*x9255)));
evalcond[5]=(((sj15*x9259))+((sj15*x9256))+(((-1.0)*r00*x9255*x9265))+((x9258*x9267)));
evalcond[6]=((((-1.0)*x9255*x9259))+(((-1.0)*x9255*x9256))+(((-1.0)*r00*x9257*x9265))+((x9258*x9266)));
evalcond[7]=(((sj15*x9262))+((sj15*x9261))+(((-1.0)*x9260))+((x9253*x9267))+(((-1.0)*r20*x9255*x9265))+(((-1.0)*sj13*x9254)));
evalcond[8]=((((-1.0)*x9263))+(((-1.0)*x9255*x9262))+(((-1.0)*x9255*x9261))+x9252+(((-1.0)*r20*x9257*x9265))+((x9253*x9266)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x9269=((1.0)*gconst2);
IkReal x9270=(gconst1*r01);
CheckValue<IkReal> x9271=IKPowWithIntegerCheck(((((-1.0)*cj15*r00*x9269))+((cj15*x9270))),-1);
if(!x9271.valid){
continue;
}
CheckValue<IkReal> x9272=IKPowWithIntegerCheck(((((-1.0)*x9270))+((gconst2*r00))),-1);
if(!x9272.valid){
continue;
}
if( IKabs(((x9271.value)*(((((-1.0)*gconst1*r00*sj15))+(((-1.0)*r01*sj15*x9269)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x9272.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9271.value)*(((((-1.0)*gconst1*r00*sj15))+(((-1.0)*r01*sj15*x9269))))))+IKsqr(((-1.0)*(x9272.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x9271.value)*(((((-1.0)*gconst1*r00*sj15))+(((-1.0)*r01*sj15*x9269))))), ((-1.0)*(x9272.value)));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x9273=IKcos(j16);
IkReal x9274=IKsin(j16);
IkReal x9275=(sj13*sj14);
IkReal x9276=(gconst1*r21);
IkReal x9277=((1.0)*cj14);
IkReal x9278=((1.0)*cj15);
IkReal x9279=(gconst1*r00);
IkReal x9280=((1.0)*sj15);
IkReal x9281=(gconst1*r01);
IkReal x9282=(gconst2*r01);
IkReal x9283=(cj13*sj14);
IkReal x9284=(gconst2*r21);
IkReal x9285=(gconst1*r20);
IkReal x9286=(cj13*x9277);
IkReal x9287=((1.0)*x9273);
IkReal x9288=(gconst2*x9274);
IkReal x9289=(sj15*x9274);
IkReal x9290=(cj15*x9274);
IkReal x9291=(gconst2*x9273);
evalcond[0]=((-1.0)*r12*x9274);
evalcond[1]=((((-1.0)*x9276*x9287))+((r20*x9291)));
evalcond[2]=(((cj14*sj13))+(((-1.0)*r12*x9273*x9280))+x9283);
evalcond[3]=((1.0)+((r00*x9291))+(((-1.0)*x9281*x9287)));
evalcond[4]=((((-1.0)*x9286))+x9275+(((-1.0)*r12*x9273*x9278)));
evalcond[5]=((((-1.0)*r00*x9278*x9288))+((sj15*x9279))+((x9281*x9290))+((sj15*x9282)));
evalcond[6]=((((-1.0)*x9278*x9279))+(((-1.0)*x9278*x9282))+((x9281*x9289))+(((-1.0)*r00*x9280*x9288)));
evalcond[7]=((((-1.0)*r20*x9278*x9288))+((x9276*x9290))+(((-1.0)*sj13*x9277))+(((-1.0)*x9283))+((sj15*x9285))+((sj15*x9284)));
evalcond[8]=((((-1.0)*x9286))+x9275+((x9276*x9289))+(((-1.0)*x9278*x9284))+(((-1.0)*x9278*x9285))+(((-1.0)*r20*x9280*x9288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x9292=(gconst2*r00);
IkReal x9293=(gconst1*r01);
CheckValue<IkReal> x9294=IKPowWithIntegerCheck(((((-1.0)*sj15*x9292))+((sj15*x9293))),-1);
if(!x9294.valid){
continue;
}
CheckValue<IkReal> x9295=IKPowWithIntegerCheck((x9292+(((-1.0)*x9293))),-1);
if(!x9295.valid){
continue;
}
if( IKabs(((x9294.value)*((((cj15*gconst2*r01))+((cj15*gconst1*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x9295.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9294.value)*((((cj15*gconst2*r01))+((cj15*gconst1*r00))))))+IKsqr(((-1.0)*(x9295.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x9294.value)*((((cj15*gconst2*r01))+((cj15*gconst1*r00))))), ((-1.0)*(x9295.value)));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x9296=IKcos(j16);
IkReal x9297=IKsin(j16);
IkReal x9298=(sj13*sj14);
IkReal x9299=(gconst1*r21);
IkReal x9300=((1.0)*cj14);
IkReal x9301=((1.0)*cj15);
IkReal x9302=(gconst1*r00);
IkReal x9303=((1.0)*sj15);
IkReal x9304=(gconst1*r01);
IkReal x9305=(gconst2*r01);
IkReal x9306=(cj13*sj14);
IkReal x9307=(gconst2*r21);
IkReal x9308=(gconst1*r20);
IkReal x9309=(cj13*x9300);
IkReal x9310=((1.0)*x9296);
IkReal x9311=(gconst2*x9297);
IkReal x9312=(sj15*x9297);
IkReal x9313=(cj15*x9297);
IkReal x9314=(gconst2*x9296);
evalcond[0]=((-1.0)*r12*x9297);
evalcond[1]=((((-1.0)*x9299*x9310))+((r20*x9314)));
evalcond[2]=(x9306+((cj14*sj13))+(((-1.0)*r12*x9296*x9303)));
evalcond[3]=((1.0)+((r00*x9314))+(((-1.0)*x9304*x9310)));
evalcond[4]=(x9298+(((-1.0)*r12*x9296*x9301))+(((-1.0)*x9309)));
evalcond[5]=(((x9304*x9313))+((sj15*x9302))+((sj15*x9305))+(((-1.0)*r00*x9301*x9311)));
evalcond[6]=((((-1.0)*r00*x9303*x9311))+(((-1.0)*x9301*x9305))+(((-1.0)*x9301*x9302))+((x9304*x9312)));
evalcond[7]=((((-1.0)*sj13*x9300))+(((-1.0)*x9306))+((sj15*x9307))+((sj15*x9308))+((x9299*x9313))+(((-1.0)*r20*x9301*x9311)));
evalcond[8]=((((-1.0)*x9301*x9307))+(((-1.0)*x9301*x9308))+x9298+(((-1.0)*x9309))+((x9299*x9312))+(((-1.0)*r20*x9303*x9311)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j16]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x9315=gconst1*gconst1;
IkReal x9316=gconst2*gconst2;
IkReal x9317=(r00*r11);
IkReal x9318=(gconst1*gconst2);
IkReal x9319=((1.0)*sj15);
IkReal x9320=(r01*r11);
IkReal x9321=((1.0)*cj15*r10);
IkReal x9322=((1.0)*cj15*r12);
CheckValue<IkReal> x9323 = IKatan2WithCheck(IkReal((((cj15*x9315*x9317))+(((-1.0)*r01*x9316*x9321))+(((-1.0)*r00*x9318*x9321))+((cj15*x9318*x9320)))),IkReal(((((-1.0)*gconst2*r01*x9322))+(((-1.0)*gconst1*r00*x9322)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9323.valid){
continue;
}
CheckValue<IkReal> x9324=IKPowWithIntegerCheck(IKsign((((sj15*x9315*x9320))+(((-1.0)*r01*r10*x9318*x9319))+((r02*r12*sj15))+((r00*r10*sj15*x9316))+(((-1.0)*x9317*x9318*x9319)))),-1);
if(!x9324.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x9323.value)+(((1.5707963267949)*(x9324.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x9325=IKcos(j16);
IkReal x9326=IKsin(j16);
IkReal x9327=(sj13*sj14);
IkReal x9328=(gconst1*r21);
IkReal x9329=(gconst2*r10);
IkReal x9330=(gconst2*sj15);
IkReal x9331=((1.0)*cj15);
IkReal x9332=(gconst1*r00);
IkReal x9333=(cj14*sj13);
IkReal x9334=(gconst1*r11);
IkReal x9335=(gconst1*r01);
IkReal x9336=(gconst1*r20);
IkReal x9337=((1.0)*cj13);
IkReal x9338=(gconst1*r10);
IkReal x9339=(cj14*x9337);
IkReal x9340=((1.0)*x9325);
IkReal x9341=(gconst2*x9326);
IkReal x9342=((1.0)*x9326);
IkReal x9343=(sj15*x9326);
IkReal x9344=(cj15*x9326);
IkReal x9345=(gconst2*x9325);
IkReal x9346=(x9330*x9342);
evalcond[0]=((((-1.0)*r22*x9342))+(((-1.0)*x9328*x9340))+((r20*x9345)));
evalcond[1]=(((x9325*x9329))+(((-1.0)*r12*x9342))+(((-1.0)*x9334*x9340)));
evalcond[2]=((1.0)+((r00*x9345))+(((-1.0)*r02*x9342))+(((-1.0)*x9335*x9340)));
evalcond[3]=(((sj15*x9332))+((r01*x9330))+(((-1.0)*r02*x9325*x9331))+(((-1.0)*r00*x9331*x9341))+((x9335*x9344)));
evalcond[4]=((((-1.0)*r02*sj15*x9340))+(((-1.0)*r00*x9346))+((x9335*x9343))+(((-1.0)*x9331*x9332))+(((-1.0)*gconst2*r01*x9331)));
evalcond[5]=(((sj15*x9338))+x9327+((r11*x9330))+(((-1.0)*r12*x9325*x9331))+(((-1.0)*x9326*x9329*x9331))+((x9334*x9344))+(((-1.0)*x9339)));
evalcond[6]=(((sj15*x9336))+(((-1.0)*x9333))+(((-1.0)*r22*x9325*x9331))+(((-1.0)*sj14*x9337))+(((-1.0)*r20*x9331*x9341))+((x9328*x9344))+((r21*x9330)));
evalcond[7]=((((-1.0)*r12*sj15*x9340))+x9333+(((-1.0)*gconst2*r11*x9331))+((cj13*sj14))+(((-1.0)*sj15*x9329*x9342))+((x9334*x9343))+(((-1.0)*x9331*x9338)));
evalcond[8]=((((-1.0)*r22*sj15*x9340))+x9327+(((-1.0)*r20*x9346))+(((-1.0)*gconst2*r21*x9331))+((x9328*x9343))+(((-1.0)*x9331*x9336))+(((-1.0)*x9339)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x9347=gconst2*gconst2;
IkReal x9348=gconst1*gconst1;
IkReal x9349=(r00*sj15);
IkReal x9350=((1.0)*r11);
IkReal x9351=(r01*sj15);
IkReal x9352=(gconst1*gconst2);
IkReal x9353=(cj15*r01);
IkReal x9354=(cj15*r00);
IkReal x9355=(r10*x9347);
CheckValue<IkReal> x9356=IKPowWithIntegerCheck(IKsign((((x9354*x9355))+((r11*x9348*x9353))+((cj15*r02*r12))+(((-1.0)*r10*x9352*x9353))+(((-1.0)*x9350*x9352*x9354)))),-1);
if(!x9356.valid){
continue;
}
CheckValue<IkReal> x9357 = IKatan2WithCheck(IkReal((((r10*x9349*x9352))+(((-1.0)*x9348*x9349*x9350))+((x9351*x9355))+(((-1.0)*x9350*x9351*x9352)))),IkReal((((gconst1*r12*x9349))+((gconst2*r12*x9351)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9357.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9356.value)))+(x9357.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x9358=IKcos(j16);
IkReal x9359=IKsin(j16);
IkReal x9360=(sj13*sj14);
IkReal x9361=(gconst1*r21);
IkReal x9362=(gconst2*r10);
IkReal x9363=(gconst2*sj15);
IkReal x9364=((1.0)*cj15);
IkReal x9365=(gconst1*r00);
IkReal x9366=(cj14*sj13);
IkReal x9367=(gconst1*r11);
IkReal x9368=(gconst1*r01);
IkReal x9369=(gconst1*r20);
IkReal x9370=((1.0)*cj13);
IkReal x9371=(gconst1*r10);
IkReal x9372=(cj14*x9370);
IkReal x9373=((1.0)*x9358);
IkReal x9374=(gconst2*x9359);
IkReal x9375=((1.0)*x9359);
IkReal x9376=(sj15*x9359);
IkReal x9377=(cj15*x9359);
IkReal x9378=(gconst2*x9358);
IkReal x9379=(x9363*x9375);
evalcond[0]=((((-1.0)*r22*x9375))+((r20*x9378))+(((-1.0)*x9361*x9373)));
evalcond[1]=((((-1.0)*x9367*x9373))+(((-1.0)*r12*x9375))+((x9358*x9362)));
evalcond[2]=((1.0)+(((-1.0)*x9368*x9373))+(((-1.0)*r02*x9375))+((r00*x9378)));
evalcond[3]=((((-1.0)*r02*x9358*x9364))+((x9368*x9377))+((r01*x9363))+((sj15*x9365))+(((-1.0)*r00*x9364*x9374)));
evalcond[4]=((((-1.0)*x9364*x9365))+((x9368*x9376))+(((-1.0)*r00*x9379))+(((-1.0)*gconst2*r01*x9364))+(((-1.0)*r02*sj15*x9373)));
evalcond[5]=(((x9367*x9377))+x9360+(((-1.0)*x9372))+((r11*x9363))+(((-1.0)*r12*x9358*x9364))+((sj15*x9371))+(((-1.0)*x9359*x9362*x9364)));
evalcond[6]=(((r21*x9363))+(((-1.0)*r20*x9364*x9374))+(((-1.0)*r22*x9358*x9364))+(((-1.0)*x9366))+((x9361*x9377))+((sj15*x9369))+(((-1.0)*sj14*x9370)));
evalcond[7]=(((x9367*x9376))+x9366+(((-1.0)*r12*sj15*x9373))+(((-1.0)*x9364*x9371))+((cj13*sj14))+(((-1.0)*gconst2*r11*x9364))+(((-1.0)*sj15*x9362*x9375)));
evalcond[8]=(x9360+(((-1.0)*x9364*x9369))+(((-1.0)*x9372))+(((-1.0)*r20*x9379))+((x9361*x9376))+(((-1.0)*gconst2*r21*x9364))+(((-1.0)*r22*sj15*x9373)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x9380=((1.0)*gconst1);
CheckValue<IkReal> x9381 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x9380))+((gconst2*r20)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x9381.valid){
continue;
}
CheckValue<IkReal> x9382=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x9380))+(((-1.0)*gconst2*r11)))),-1);
if(!x9382.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x9381.value)+(((1.5707963267949)*(x9382.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x9383=IKcos(j16);
IkReal x9384=IKsin(j16);
IkReal x9385=(sj13*sj14);
IkReal x9386=(gconst1*r21);
IkReal x9387=(gconst2*r10);
IkReal x9388=(gconst2*sj15);
IkReal x9389=((1.0)*cj15);
IkReal x9390=(gconst1*r00);
IkReal x9391=(cj14*sj13);
IkReal x9392=(gconst1*r11);
IkReal x9393=(gconst1*r01);
IkReal x9394=(gconst1*r20);
IkReal x9395=((1.0)*cj13);
IkReal x9396=(gconst1*r10);
IkReal x9397=(cj14*x9395);
IkReal x9398=((1.0)*x9383);
IkReal x9399=(gconst2*x9384);
IkReal x9400=((1.0)*x9384);
IkReal x9401=(sj15*x9384);
IkReal x9402=(cj15*x9384);
IkReal x9403=(gconst2*x9383);
IkReal x9404=(x9388*x9400);
evalcond[0]=((((-1.0)*r22*x9400))+((r20*x9403))+(((-1.0)*x9386*x9398)));
evalcond[1]=(((x9383*x9387))+(((-1.0)*r12*x9400))+(((-1.0)*x9392*x9398)));
evalcond[2]=((1.0)+(((-1.0)*r02*x9400))+((r00*x9403))+(((-1.0)*x9393*x9398)));
evalcond[3]=((((-1.0)*r02*x9383*x9389))+((sj15*x9390))+((x9393*x9402))+(((-1.0)*r00*x9389*x9399))+((r01*x9388)));
evalcond[4]=(((x9393*x9401))+(((-1.0)*x9389*x9390))+(((-1.0)*r00*x9404))+(((-1.0)*gconst2*r01*x9389))+(((-1.0)*r02*sj15*x9398)));
evalcond[5]=((((-1.0)*x9384*x9387*x9389))+(((-1.0)*r12*x9383*x9389))+((sj15*x9396))+x9385+((r11*x9388))+((x9392*x9402))+(((-1.0)*x9397)));
evalcond[6]=(((sj15*x9394))+((x9386*x9402))+((r21*x9388))+(((-1.0)*r22*x9383*x9389))+(((-1.0)*sj14*x9395))+(((-1.0)*r20*x9389*x9399))+(((-1.0)*x9391)));
evalcond[7]=(x9391+(((-1.0)*r12*sj15*x9398))+(((-1.0)*sj15*x9387*x9400))+((cj13*sj14))+(((-1.0)*x9389*x9396))+(((-1.0)*gconst2*r11*x9389))+((x9392*x9401)));
evalcond[8]=(((x9386*x9401))+x9385+(((-1.0)*r20*x9404))+(((-1.0)*r22*sj15*x9398))+(((-1.0)*x9389*x9394))+(((-1.0)*gconst2*r21*x9389))+(((-1.0)*x9397)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[2];
IkReal x9405=((-1.0)*px);
CheckValue<IkReal> x9407 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9407.valid){
continue;
}
IkReal x9406=((-1.0)*(x9407.value));
sj17=gconst1;
cj17=gconst2;
j17=x9406;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9405);
rxp1_1=(px*r21);
rxp1_2=(r11*x9405);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9406;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
j16eval[0]=r02;
j16eval[1]=(((r11*r21))+((r10*r20)));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x9408=((-1.0)*px);
CheckValue<IkReal> x9410 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9410.valid){
continue;
}
IkReal x9409=((-1.0)*(x9410.value));
sj17=gconst1;
cj17=gconst2;
j17=x9409;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9408);
rxp1_1=(px*r21);
rxp1_2=(r11*x9408);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9409;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x9411=((1.0)*cj15);
j16eval[0]=(((cj15*(r10*r10)))+(((-1.0)*x9411))+(((-1.0)*x9411*(r21*r21))));
j16eval[1]=(((r11*r21))+((r10*r20)));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x9412=((-1.0)*px);
CheckValue<IkReal> x9414 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9414.valid){
continue;
}
IkReal x9413=((-1.0)*(x9414.value));
sj17=gconst1;
cj17=gconst2;
j17=x9413;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9412);
rxp1_1=(px*r21);
rxp1_2=(r11*x9412);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9413;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
j16eval[0]=r02;
j16eval[1]=cj15;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j16]

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x9416=IKPowWithIntegerCheck(r02,-1);
if(!x9416.valid){
continue;
}
IkReal x9415=x9416.value;
CheckValue<IkReal> x9417=IKPowWithIntegerCheck(cj15,-1);
if(!x9417.valid){
continue;
}
if( IKabs(((-1.0)*sj12*x9415)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x9415*(x9417.value)*((((cj12*cj13*cj14))+(((-1.0)*cj12*sj13*sj14)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj12*x9415))+IKsqr((x9415*(x9417.value)*((((cj12*cj13*cj14))+(((-1.0)*cj12*sj13*sj14))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((-1.0)*sj12*x9415), (x9415*(x9417.value)*((((cj12*cj13*cj14))+(((-1.0)*cj12*sj13*sj14))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x9418=IKcos(j16);
IkReal x9419=IKsin(j16);
IkReal x9420=((1.0)*cj14);
IkReal x9421=(sj12*sj13);
IkReal x9422=(cj12*sj13);
IkReal x9423=((1.0)*sj14);
IkReal x9424=((1.0)*gconst2);
IkReal x9425=(gconst1*r11);
IkReal x9426=(cj13*cj14);
IkReal x9427=(gconst1*r10);
IkReal x9428=((1.0)*cj15);
IkReal x9429=(gconst1*r20);
IkReal x9430=(gconst2*sj15);
IkReal x9431=(gconst1*r21);
IkReal x9432=(cj15*x9419);
IkReal x9433=(gconst2*x9418);
IkReal x9434=(sj15*x9419);
IkReal x9435=((1.0)*gconst1*x9418);
IkReal x9436=((1.0)*r02*x9418);
evalcond[0]=((((-1.0)*sj12))+(((-1.0)*r02*x9419)));
evalcond[1]=(((r20*x9433))+(((-1.0)*x9418*x9431)));
evalcond[2]=((((-1.0)*x9418*x9425))+cj12+((r10*x9433)));
evalcond[3]=(((cj12*x9426))+(((-1.0)*r02*x9418*x9428))+(((-1.0)*x9422*x9423)));
evalcond[4]=((((-1.0)*x9420*x9422))+(((-1.0)*sj15*x9436))+(((-1.0)*cj12*cj13*x9423)));
evalcond[5]=(((sj15*x9429))+(((-1.0)*r20*x9424*x9432))+(((-1.0)*sj13*x9420))+((x9431*x9432))+(((-1.0)*cj13*x9423))+((r21*x9430)));
evalcond[6]=((((-1.0)*r20*x9424*x9434))+(((-1.0)*x9428*x9429))+(((-1.0)*cj15*r21*x9424))+((x9431*x9434))+(((-1.0)*cj13*x9420))+((sj13*sj14)));
evalcond[7]=(((r11*x9430))+((sj15*x9427))+((x9425*x9432))+(((-1.0)*x9421*x9423))+(((-1.0)*r10*x9424*x9432))+((sj12*x9426)));
evalcond[8]=((((-1.0)*cj13*sj12*x9423))+((x9425*x9434))+(((-1.0)*x9420*x9421))+(((-1.0)*cj15*r11*x9424))+(((-1.0)*r10*x9424*x9434))+(((-1.0)*x9427*x9428)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x9437=((1.0)*sj15);
CheckValue<IkReal> x9438=IKPowWithIntegerCheck(((((-1.0)*cj15*gconst2*r20))+((cj15*gconst1*r21))),-1);
if(!x9438.valid){
continue;
}
CheckValue<IkReal> x9439=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x9439.valid){
continue;
}
if( IKabs(((x9438.value)*((((cj14*sj13))+(((-1.0)*gconst2*r21*x9437))+((cj13*sj14))+(((-1.0)*gconst1*r20*x9437)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj12*(x9439.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9438.value)*((((cj14*sj13))+(((-1.0)*gconst2*r21*x9437))+((cj13*sj14))+(((-1.0)*gconst1*r20*x9437))))))+IKsqr(((-1.0)*cj12*(x9439.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x9438.value)*((((cj14*sj13))+(((-1.0)*gconst2*r21*x9437))+((cj13*sj14))+(((-1.0)*gconst1*r20*x9437))))), ((-1.0)*cj12*(x9439.value)));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x9440=IKcos(j16);
IkReal x9441=IKsin(j16);
IkReal x9442=((1.0)*cj14);
IkReal x9443=(sj12*sj13);
IkReal x9444=(cj12*sj13);
IkReal x9445=((1.0)*sj14);
IkReal x9446=((1.0)*gconst2);
IkReal x9447=(gconst1*r11);
IkReal x9448=(cj13*cj14);
IkReal x9449=(gconst1*r10);
IkReal x9450=((1.0)*cj15);
IkReal x9451=(gconst1*r20);
IkReal x9452=(gconst2*sj15);
IkReal x9453=(gconst1*r21);
IkReal x9454=(cj15*x9441);
IkReal x9455=(gconst2*x9440);
IkReal x9456=(sj15*x9441);
IkReal x9457=((1.0)*gconst1*x9440);
IkReal x9458=((1.0)*r02*x9440);
evalcond[0]=((((-1.0)*r02*x9441))+(((-1.0)*sj12)));
evalcond[1]=((((-1.0)*x9440*x9453))+((r20*x9455)));
evalcond[2]=(((r10*x9455))+cj12+(((-1.0)*x9440*x9447)));
evalcond[3]=((((-1.0)*r02*x9440*x9450))+(((-1.0)*x9444*x9445))+((cj12*x9448)));
evalcond[4]=((((-1.0)*sj15*x9458))+(((-1.0)*x9442*x9444))+(((-1.0)*cj12*cj13*x9445)));
evalcond[5]=(((x9453*x9454))+((r21*x9452))+((sj15*x9451))+(((-1.0)*cj13*x9445))+(((-1.0)*sj13*x9442))+(((-1.0)*r20*x9446*x9454)));
evalcond[6]=((((-1.0)*x9450*x9451))+(((-1.0)*cj15*r21*x9446))+((x9453*x9456))+((sj13*sj14))+(((-1.0)*cj13*x9442))+(((-1.0)*r20*x9446*x9456)));
evalcond[7]=(((sj12*x9448))+(((-1.0)*r10*x9446*x9454))+(((-1.0)*x9443*x9445))+((sj15*x9449))+((r11*x9452))+((x9447*x9454)));
evalcond[8]=((((-1.0)*r10*x9446*x9456))+(((-1.0)*x9442*x9443))+(((-1.0)*cj15*r11*x9446))+(((-1.0)*cj13*sj12*x9445))+(((-1.0)*x9449*x9450))+((x9447*x9456)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x9459=IKPowWithIntegerCheck(r02,-1);
if(!x9459.valid){
continue;
}
CheckValue<IkReal> x9460=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x9460.valid){
continue;
}
if( IKabs(((-1.0)*sj12*(x9459.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj12*(x9460.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj12*(x9459.value)))+IKsqr(((-1.0)*cj12*(x9460.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((-1.0)*sj12*(x9459.value)), ((-1.0)*cj12*(x9460.value)));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x9461=IKcos(j16);
IkReal x9462=IKsin(j16);
IkReal x9463=((1.0)*cj14);
IkReal x9464=(sj12*sj13);
IkReal x9465=(cj12*sj13);
IkReal x9466=((1.0)*sj14);
IkReal x9467=((1.0)*gconst2);
IkReal x9468=(gconst1*r11);
IkReal x9469=(cj13*cj14);
IkReal x9470=(gconst1*r10);
IkReal x9471=((1.0)*cj15);
IkReal x9472=(gconst1*r20);
IkReal x9473=(gconst2*sj15);
IkReal x9474=(gconst1*r21);
IkReal x9475=(cj15*x9462);
IkReal x9476=(gconst2*x9461);
IkReal x9477=(sj15*x9462);
IkReal x9478=((1.0)*gconst1*x9461);
IkReal x9479=((1.0)*r02*x9461);
evalcond[0]=((((-1.0)*r02*x9462))+(((-1.0)*sj12)));
evalcond[1]=(((r20*x9476))+(((-1.0)*x9461*x9474)));
evalcond[2]=(((r10*x9476))+cj12+(((-1.0)*x9461*x9468)));
evalcond[3]=((((-1.0)*r02*x9461*x9471))+((cj12*x9469))+(((-1.0)*x9465*x9466)));
evalcond[4]=((((-1.0)*sj15*x9479))+(((-1.0)*cj12*cj13*x9466))+(((-1.0)*x9463*x9465)));
evalcond[5]=(((x9474*x9475))+((sj15*x9472))+((r21*x9473))+(((-1.0)*cj13*x9466))+(((-1.0)*sj13*x9463))+(((-1.0)*r20*x9467*x9475)));
evalcond[6]=((((-1.0)*x9471*x9472))+((x9474*x9477))+((sj13*sj14))+(((-1.0)*cj13*x9463))+(((-1.0)*r20*x9467*x9477))+(((-1.0)*cj15*r21*x9467)));
evalcond[7]=(((x9468*x9475))+((sj15*x9470))+((r11*x9473))+(((-1.0)*r10*x9467*x9475))+(((-1.0)*x9464*x9466))+((sj12*x9469)));
evalcond[8]=(((x9468*x9477))+(((-1.0)*x9470*x9471))+(((-1.0)*r10*x9467*x9477))+(((-1.0)*cj13*sj12*x9466))+(((-1.0)*cj15*r11*x9467))+(((-1.0)*x9463*x9464)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j16]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x9480=r20*r20;
IkReal x9481=gconst2*gconst2;
IkReal x9482=r21*r21;
IkReal x9483=gconst1*gconst1;
IkReal x9484=(gconst2*sj15);
IkReal x9485=(r20*r21);
IkReal x9486=(cj13*sj14);
IkReal x9487=(gconst1*r21);
IkReal x9488=(gconst2*r20);
IkReal x9489=((1.0)*cj14*sj13);
CheckValue<IkReal> x9490 = IKatan2WithCheck(IkReal((((gconst1*x9480*x9484))+(((-1.0)*sj15*x9483*x9485))+((x9486*x9487))+(((-1.0)*x9486*x9488))+(((-1.0)*gconst1*x9482*x9484))+((cj14*sj13*x9487))+(((-1.0)*x9488*x9489))+((sj15*x9481*x9485)))),IkReal(((((-1.0)*r22*x9486))+((r21*r22*x9484))+((gconst1*r20*r22*sj15))+(((-1.0)*r22*x9489)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9490.valid){
continue;
}
CheckValue<IkReal> x9491=IKPowWithIntegerCheck(IKsign(((((-2.0)*cj15*gconst1*gconst2*x9485))+((cj15*x9482*x9483))+((cj15*x9480*x9481))+((cj15*(r22*r22))))),-1);
if(!x9491.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x9490.value)+(((1.5707963267949)*(x9491.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x9492=IKcos(j16);
IkReal x9493=IKsin(j16);
IkReal x9494=((1.0)*cj14);
IkReal x9495=(sj12*sj13);
IkReal x9496=(gconst1*r21);
IkReal x9497=(cj12*sj13);
IkReal x9498=((1.0)*sj14);
IkReal x9499=(gconst2*r10);
IkReal x9500=(cj15*gconst1);
IkReal x9501=((1.0)*r00);
IkReal x9502=(cj13*cj14);
IkReal x9503=(gconst1*sj15);
IkReal x9504=(gconst2*r01);
IkReal x9505=((1.0)*cj15);
IkReal x9506=(gconst2*r21);
IkReal x9507=(gconst2*r11);
IkReal x9508=((1.0)*x9492);
IkReal x9509=(r11*x9493);
IkReal x9510=((1.0)*x9493);
IkReal x9511=(r01*x9493);
IkReal x9512=(gconst2*x9493);
IkReal x9513=(gconst2*x9492);
IkReal x9514=(gconst2*r20*x9510);
evalcond[0]=((((-1.0)*r22*x9510))+(((-1.0)*x9496*x9508))+((r20*x9513)));
evalcond[1]=((((-1.0)*gconst1*r11*x9508))+((x9492*x9499))+cj12+(((-1.0)*r12*x9510)));
evalcond[2]=((((-1.0)*r02*x9510))+((r00*x9513))+(((-1.0)*sj12))+(((-1.0)*gconst1*r01*x9508)));
evalcond[3]=(((sj15*x9506))+((r20*x9503))+((cj15*x9493*x9496))+(((-1.0)*sj13*x9494))+(((-1.0)*r22*x9492*x9505))+(((-1.0)*cj13*x9498))+(((-1.0)*r20*x9505*x9512)));
evalcond[4]=((((-1.0)*x9505*x9506))+(((-1.0)*r20*x9500))+(((-1.0)*r22*sj15*x9508))+((sj13*sj14))+((sj15*x9493*x9496))+(((-1.0)*sj15*x9514))+(((-1.0)*cj13*x9494)));
evalcond[5]=((((-1.0)*cj15*x9501*x9512))+((sj15*x9504))+(((-1.0)*x9497*x9498))+(((-1.0)*r02*x9492*x9505))+((cj12*x9502))+((x9500*x9511))+((r00*x9503)));
evalcond[6]=(((r10*x9503))+(((-1.0)*x9493*x9499*x9505))+((sj15*x9507))+((x9500*x9509))+(((-1.0)*x9495*x9498))+((sj12*x9502))+(((-1.0)*r12*x9492*x9505)));
evalcond[7]=((((-1.0)*cj12*cj13*x9498))+(((-1.0)*r02*sj15*x9508))+(((-1.0)*x9504*x9505))+(((-1.0)*x9500*x9501))+(((-1.0)*sj15*x9501*x9512))+(((-1.0)*x9494*x9497))+((x9503*x9511)));
evalcond[8]=((((-1.0)*sj15*x9499*x9510))+(((-1.0)*x9505*x9507))+(((-1.0)*r12*sj15*x9508))+((x9503*x9509))+(((-1.0)*cj13*sj12*x9498))+(((-1.0)*r10*x9500))+(((-1.0)*x9494*x9495)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x9515 = IKatan2WithCheck(IkReal((((gconst2*r20*sj12))+(((-1.0)*gconst1*r21*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9515.valid){
continue;
}
CheckValue<IkReal> x9516=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9516.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x9515.value)+(((1.5707963267949)*(x9516.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x9517=IKcos(j16);
IkReal x9518=IKsin(j16);
IkReal x9519=((1.0)*cj14);
IkReal x9520=(sj12*sj13);
IkReal x9521=(gconst1*r21);
IkReal x9522=(cj12*sj13);
IkReal x9523=((1.0)*sj14);
IkReal x9524=(gconst2*r10);
IkReal x9525=(cj15*gconst1);
IkReal x9526=((1.0)*r00);
IkReal x9527=(cj13*cj14);
IkReal x9528=(gconst1*sj15);
IkReal x9529=(gconst2*r01);
IkReal x9530=((1.0)*cj15);
IkReal x9531=(gconst2*r21);
IkReal x9532=(gconst2*r11);
IkReal x9533=((1.0)*x9517);
IkReal x9534=(r11*x9518);
IkReal x9535=((1.0)*x9518);
IkReal x9536=(r01*x9518);
IkReal x9537=(gconst2*x9518);
IkReal x9538=(gconst2*x9517);
IkReal x9539=(gconst2*r20*x9535);
evalcond[0]=(((r20*x9538))+(((-1.0)*r22*x9535))+(((-1.0)*x9521*x9533)));
evalcond[1]=(((x9517*x9524))+cj12+(((-1.0)*gconst1*r11*x9533))+(((-1.0)*r12*x9535)));
evalcond[2]=((((-1.0)*r02*x9535))+(((-1.0)*sj12))+((r00*x9538))+(((-1.0)*gconst1*r01*x9533)));
evalcond[3]=(((cj15*x9518*x9521))+((sj15*x9531))+((r20*x9528))+(((-1.0)*cj13*x9523))+(((-1.0)*r20*x9530*x9537))+(((-1.0)*sj13*x9519))+(((-1.0)*r22*x9517*x9530)));
evalcond[4]=(((sj15*x9518*x9521))+(((-1.0)*r22*sj15*x9533))+(((-1.0)*r20*x9525))+(((-1.0)*x9530*x9531))+(((-1.0)*sj15*x9539))+((sj13*sj14))+(((-1.0)*cj13*x9519)));
evalcond[5]=(((sj15*x9529))+(((-1.0)*cj15*x9526*x9537))+((r00*x9528))+(((-1.0)*x9522*x9523))+((cj12*x9527))+((x9525*x9536))+(((-1.0)*r02*x9517*x9530)));
evalcond[6]=(((sj15*x9532))+(((-1.0)*r12*x9517*x9530))+(((-1.0)*x9518*x9524*x9530))+((r10*x9528))+(((-1.0)*x9520*x9523))+((sj12*x9527))+((x9525*x9534)));
evalcond[7]=((((-1.0)*x9525*x9526))+(((-1.0)*x9519*x9522))+((x9528*x9536))+(((-1.0)*cj12*cj13*x9523))+(((-1.0)*sj15*x9526*x9537))+(((-1.0)*x9529*x9530))+(((-1.0)*r02*sj15*x9533)));
evalcond[8]=((((-1.0)*cj13*sj12*x9523))+(((-1.0)*r10*x9525))+(((-1.0)*x9519*x9520))+((x9528*x9534))+(((-1.0)*x9530*x9532))+(((-1.0)*sj15*x9524*x9535))+(((-1.0)*r12*sj15*x9533)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x9540 = IKatan2WithCheck(IkReal((((cj12*gconst2*r20))+(((-1.0)*cj12*gconst1*r21)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9540.valid){
continue;
}
CheckValue<IkReal> x9541=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9541.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x9540.value)+(((1.5707963267949)*(x9541.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x9542=IKcos(j16);
IkReal x9543=IKsin(j16);
IkReal x9544=((1.0)*cj14);
IkReal x9545=(sj12*sj13);
IkReal x9546=(gconst1*r21);
IkReal x9547=(cj12*sj13);
IkReal x9548=((1.0)*sj14);
IkReal x9549=(gconst2*r10);
IkReal x9550=(cj15*gconst1);
IkReal x9551=((1.0)*r00);
IkReal x9552=(cj13*cj14);
IkReal x9553=(gconst1*sj15);
IkReal x9554=(gconst2*r01);
IkReal x9555=((1.0)*cj15);
IkReal x9556=(gconst2*r21);
IkReal x9557=(gconst2*r11);
IkReal x9558=((1.0)*x9542);
IkReal x9559=(r11*x9543);
IkReal x9560=((1.0)*x9543);
IkReal x9561=(r01*x9543);
IkReal x9562=(gconst2*x9543);
IkReal x9563=(gconst2*x9542);
IkReal x9564=(gconst2*r20*x9560);
evalcond[0]=((((-1.0)*x9546*x9558))+(((-1.0)*r22*x9560))+((r20*x9563)));
evalcond[1]=((((-1.0)*gconst1*r11*x9558))+cj12+((x9542*x9549))+(((-1.0)*r12*x9560)));
evalcond[2]=(((r00*x9563))+(((-1.0)*gconst1*r01*x9558))+(((-1.0)*sj12))+(((-1.0)*r02*x9560)));
evalcond[3]=(((sj15*x9556))+((r20*x9553))+(((-1.0)*r22*x9542*x9555))+(((-1.0)*sj13*x9544))+(((-1.0)*r20*x9555*x9562))+(((-1.0)*cj13*x9548))+((cj15*x9543*x9546)));
evalcond[4]=((((-1.0)*x9555*x9556))+((sj13*sj14))+(((-1.0)*r22*sj15*x9558))+(((-1.0)*cj13*x9544))+(((-1.0)*r20*x9550))+(((-1.0)*sj15*x9564))+((sj15*x9543*x9546)));
evalcond[5]=(((sj15*x9554))+(((-1.0)*x9547*x9548))+(((-1.0)*cj15*x9551*x9562))+(((-1.0)*r02*x9542*x9555))+((r00*x9553))+((cj12*x9552))+((x9550*x9561)));
evalcond[6]=(((sj15*x9557))+(((-1.0)*x9543*x9549*x9555))+((r10*x9553))+(((-1.0)*r12*x9542*x9555))+((sj12*x9552))+((x9550*x9559))+(((-1.0)*x9545*x9548)));
evalcond[7]=((((-1.0)*x9554*x9555))+((x9553*x9561))+(((-1.0)*cj12*cj13*x9548))+(((-1.0)*x9550*x9551))+(((-1.0)*x9544*x9547))+(((-1.0)*r02*sj15*x9558))+(((-1.0)*sj15*x9551*x9562)));
evalcond[8]=((((-1.0)*r10*x9550))+(((-1.0)*x9555*x9557))+(((-1.0)*r12*sj15*x9558))+(((-1.0)*cj13*sj12*x9548))+((x9553*x9559))+(((-1.0)*x9544*x9545))+(((-1.0)*sj15*x9549*x9560)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x9566 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x9566)==0){
continue;
}
IkReal x9565=pow(x9566,-0.5);
CheckValue<IkReal> x9567 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9567.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x9567.value))));
IkReal gconst4=((1.0)*r21*x9565);
IkReal gconst5=((-1.0)*r20*x9565);
CheckValue<IkReal> x9568 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9568.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j17+(x9568.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x9571 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9571.valid){
continue;
}
IkReal x9569=((1.0)*(x9571.value));
IkReal x9570=x9565;
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x9569)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9569)));
IkReal gconst4=((1.0)*r21*x9570);
IkReal gconst5=((-1.0)*r20*x9570);
IkReal x9572=r22*r22;
IkReal x9573=((1.0)*x9572);
CheckValue<IkReal> x9577=IKPowWithIntegerCheck(((-1.0)+x9572),-1);
if(!x9577.valid){
continue;
}
IkReal x9574=x9577.value;
if((((1.0)+(((-1.0)*x9573)))) < -0.00001)
continue;
IkReal x9575=IKsqrt(((1.0)+(((-1.0)*x9573))));
IkReal x9576=(cj12*x9574*x9575);
j16eval[0]=((IKabs(((((-1.0)*x9573*x9576))+x9576)))+(IKabs((cj12*r22))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x9580 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9580.valid){
continue;
}
IkReal x9578=((1.0)*(x9580.value));
IkReal x9579=x9565;
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x9578)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9578)));
IkReal gconst4=((1.0)*r21*x9579);
IkReal gconst5=((-1.0)*r20*x9579);
IkReal x9581=r22*r22;
IkReal x9582=((1.0)*x9581);
CheckValue<IkReal> x9586=IKPowWithIntegerCheck(((-1.0)+x9581),-1);
if(!x9586.valid){
continue;
}
IkReal x9583=x9586.value;
if((((1.0)+(((-1.0)*x9582)))) < -0.00001)
continue;
IkReal x9584=IKsqrt(((1.0)+(((-1.0)*x9582))));
IkReal x9585=(sj12*x9583*x9584);
j16eval[0]=((IKabs((r22*sj12)))+(IKabs((x9585+(((-1.0)*x9582*x9585))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
CheckValue<IkReal> x9589 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9589.valid){
continue;
}
IkReal x9587=((1.0)*(x9589.value));
IkReal x9588=x9565;
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x9587)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9587)));
IkReal gconst4=((1.0)*r21*x9588);
IkReal gconst5=((-1.0)*r20*x9588);
IkReal x9590=r22*r22;
IkReal x9591=(cj12*r02);
IkReal x9592=(r12*sj12);
CheckValue<IkReal> x9596=IKPowWithIntegerCheck(((-1.0)+x9590),-1);
if(!x9596.valid){
continue;
}
IkReal x9593=x9596.value;
if((((1.0)+(((-1.0)*x9590)))) < -0.00001)
continue;
IkReal x9594=IKsqrt(((1.0)+(((-1.0)*x9590))));
IkReal x9595=(r22*x9593*x9594);
j16eval[0]=0;
j16eval[1]=0;
j16eval[2]=((IKabs(((((-1.0)*x9592))+(((-1.0)*x9591)))))+(IKabs((((x9592*x9595))+((x9591*x9595))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j12))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x9599 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9599.valid){
continue;
}
IkReal x9597=((1.0)*(x9599.value));
IkReal x9598=x9565;
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x9597)));
sj12=0;
cj12=1.0;
j12=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9597)));
IkReal gconst4=((1.0)*r21*x9598);
IkReal gconst5=((-1.0)*r20*x9598);
j16eval[0]=1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[4];
CheckValue<IkReal> x9602 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9602.valid){
continue;
}
IkReal x9600=((1.0)*(x9602.value));
IkReal x9601=x9565;
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x9600)));
sj12=0;
cj12=1.0;
j12=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9600)));
IkReal gconst4=((1.0)*r21*x9601);
IkReal gconst5=((-1.0)*r20*x9601);
j16eval[0]=0;
j16eval[1]=r02;
j16eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j16eval[3]=0;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  || IKabs(j16eval[3]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
CheckValue<IkReal> x9605 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9605.valid){
continue;
}
IkReal x9603=((1.0)*(x9605.value));
IkReal x9604=x9565;
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x9603)));
sj12=0;
cj12=1.0;
j12=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9603)));
IkReal gconst4=((1.0)*r21*x9604);
IkReal gconst5=((-1.0)*r20*x9604);
j16eval[0]=r02;
j16eval[1]=sj15;
j16eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x9608 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9608.valid){
continue;
}
IkReal x9606=((1.0)*(x9608.value));
IkReal x9607=x9565;
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x9606)));
sj12=0;
cj12=1.0;
j12=0;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9606)));
IkReal gconst4=((1.0)*r21*x9607);
IkReal gconst5=((-1.0)*r20*x9607);
j16eval[0]=1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[4];
CheckValue<IkReal> x9611 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9611.valid){
continue;
}
IkReal x9609=((1.0)*(x9611.value));
IkReal x9610=x9565;
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x9609)));
sj12=0;
cj12=1.0;
j12=0;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9609)));
IkReal gconst4=((1.0)*r21*x9610);
IkReal gconst5=((-1.0)*r20*x9610);
j16eval[0]=0;
j16eval[1]=r02;
j16eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j16eval[3]=0;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  || IKabs(j16eval[3]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
CheckValue<IkReal> x9614 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9614.valid){
continue;
}
IkReal x9612=((1.0)*(x9614.value));
IkReal x9613=x9565;
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x9612)));
sj12=0;
cj12=1.0;
j12=0;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9612)));
IkReal gconst4=((1.0)*r21*x9613);
IkReal gconst5=((-1.0)*r20*x9613);
j16eval[0]=r12;
j16eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x9615=(gconst5*r10);
IkReal x9616=(gconst4*r11);
CheckValue<IkReal> x9617=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x9616*x9616)+(x9615*x9615)+(((-2.0)*x9615*x9616)))),-1);
if(!x9617.valid){
continue;
}
CheckValue<IkReal> x9618 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x9615))+x9616)),IKFAST_ATAN2_MAGTHRESH);
if(!x9618.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9617.value)))+(x9618.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x9619=IKcos(j16);
IkReal x9620=IKsin(j16);
IkReal x9621=((1.0)*cj13);
IkReal x9622=(gconst5*r10);
IkReal x9623=(gconst5*r00);
IkReal x9624=(gconst5*r20);
IkReal x9625=(gconst4*x9620);
IkReal x9626=((1.0)*x9619);
IkReal x9627=((1.0)*x9620);
evalcond[0]=((((-1.0)*r22*x9627))+((x9619*x9624))+(((-1.0)*gconst4*r21*x9626)));
evalcond[1]=(((x9619*x9623))+(((-1.0)*r02*x9627))+(((-1.0)*gconst4*r01*x9626)));
evalcond[2]=((((-1.0)*r12*x9626))+((r11*x9625))+(((-1.0)*x9622*x9627)));
evalcond[3]=((1.0)+((x9619*x9622))+(((-1.0)*r12*x9627))+(((-1.0)*gconst4*r11*x9626)));
evalcond[4]=((((-1.0)*cj14*x9621))+(((-1.0)*r22*x9626))+((r21*x9625))+(((-1.0)*x9624*x9627))+((sj13*sj14)));
evalcond[5]=(((r01*x9625))+(((-1.0)*r02*x9626))+(((-1.0)*sj14*x9621))+(((-1.0)*cj14*sj13))+(((-1.0)*x9623*x9627)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x9628=((1.0)*gconst4);
CheckValue<IkReal> x9629=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst5*r21))+(((-1.0)*r20*x9628)))),-1);
if(!x9629.valid){
continue;
}
CheckValue<IkReal> x9630 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x9628))+((gconst5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9630.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9629.value)))+(x9630.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x9631=IKcos(j16);
IkReal x9632=IKsin(j16);
IkReal x9633=((1.0)*cj13);
IkReal x9634=(gconst5*r10);
IkReal x9635=(gconst5*r00);
IkReal x9636=(gconst5*r20);
IkReal x9637=(gconst4*x9632);
IkReal x9638=((1.0)*x9631);
IkReal x9639=((1.0)*x9632);
evalcond[0]=((((-1.0)*r22*x9639))+((x9631*x9636))+(((-1.0)*gconst4*r21*x9638)));
evalcond[1]=((((-1.0)*r02*x9639))+((x9631*x9635))+(((-1.0)*gconst4*r01*x9638)));
evalcond[2]=((((-1.0)*r12*x9638))+((r11*x9637))+(((-1.0)*x9634*x9639)));
evalcond[3]=((1.0)+((x9631*x9634))+(((-1.0)*r12*x9639))+(((-1.0)*gconst4*r11*x9638)));
evalcond[4]=((((-1.0)*cj14*x9633))+(((-1.0)*x9636*x9639))+(((-1.0)*r22*x9638))+((r21*x9637))+((sj13*sj14)));
evalcond[5]=((((-1.0)*x9635*x9639))+((r01*x9637))+(((-1.0)*r02*x9638))+(((-1.0)*sj14*x9633))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x9640=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x9640.valid){
continue;
}
CheckValue<IkReal> x9641 = IKatan2WithCheck(IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x9641.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9640.value)))+(x9641.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x9642=IKcos(j16);
IkReal x9643=IKsin(j16);
IkReal x9644=((1.0)*cj13);
IkReal x9645=(gconst5*r10);
IkReal x9646=(gconst5*r00);
IkReal x9647=(gconst5*r20);
IkReal x9648=(gconst4*x9643);
IkReal x9649=((1.0)*x9642);
IkReal x9650=((1.0)*x9643);
evalcond[0]=(((x9642*x9647))+(((-1.0)*gconst4*r21*x9649))+(((-1.0)*r22*x9650)));
evalcond[1]=(((x9642*x9646))+(((-1.0)*gconst4*r01*x9649))+(((-1.0)*r02*x9650)));
evalcond[2]=((((-1.0)*r12*x9649))+((r11*x9648))+(((-1.0)*x9645*x9650)));
evalcond[3]=((1.0)+((x9642*x9645))+(((-1.0)*gconst4*r11*x9649))+(((-1.0)*r12*x9650)));
evalcond[4]=((((-1.0)*x9647*x9650))+((sj13*sj14))+(((-1.0)*cj14*x9644))+((r21*x9648))+(((-1.0)*r22*x9649)));
evalcond[5]=(((r01*x9648))+(((-1.0)*x9646*x9650))+(((-1.0)*cj14*sj13))+(((-1.0)*r02*x9649))+(((-1.0)*sj14*x9644)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x9653 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9653.valid){
continue;
}
IkReal x9651=((1.0)*(x9653.value));
IkReal x9652=x9565;
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x9651)));
sj12=0;
cj12=1.0;
j12=0;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9651)));
IkReal gconst4=((1.0)*r21*x9652);
IkReal gconst5=((-1.0)*r20*x9652);
j16eval[0]=1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[4];
CheckValue<IkReal> x9656 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9656.valid){
continue;
}
IkReal x9654=((1.0)*(x9656.value));
IkReal x9655=x9565;
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x9654)));
sj12=0;
cj12=1.0;
j12=0;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9654)));
IkReal gconst4=((1.0)*r21*x9655);
IkReal gconst5=((-1.0)*r20*x9655);
j16eval[0]=0;
j16eval[1]=r02;
j16eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j16eval[3]=0;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  || IKabs(j16eval[3]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
CheckValue<IkReal> x9659 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9659.valid){
continue;
}
IkReal x9657=((1.0)*(x9659.value));
IkReal x9658=x9565;
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x9657)));
sj12=0;
cj12=1.0;
j12=0;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9657)));
IkReal gconst4=((1.0)*r21*x9658);
IkReal gconst5=((-1.0)*r20*x9658);
j16eval[0]=r12;
j16eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x9660=(gconst5*r10);
IkReal x9661=(gconst4*r11);
CheckValue<IkReal> x9662 = IKatan2WithCheck(IkReal(r12),IkReal((x9661+(((-1.0)*x9660)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9662.valid){
continue;
}
CheckValue<IkReal> x9663=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x9661*x9661)+(((-2.0)*x9660*x9661))+(x9660*x9660))),-1);
if(!x9663.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x9662.value)+(((1.5707963267949)*(x9663.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x9664=IKsin(j16);
IkReal x9665=IKcos(j16);
IkReal x9666=(gconst5*r20);
IkReal x9667=((1.0)*cj13);
IkReal x9668=(gconst4*r11);
IkReal x9669=(gconst4*r21);
IkReal x9670=(gconst4*r01);
IkReal x9671=((1.0)*x9664);
IkReal x9672=((1.0)*x9665);
IkReal x9673=(gconst5*x9665);
IkReal x9674=(gconst5*x9664);
evalcond[0]=(((r12*x9665))+((r10*x9674))+(((-1.0)*x9668*x9671)));
evalcond[1]=(((x9665*x9666))+(((-1.0)*x9669*x9672))+(((-1.0)*r22*x9671)));
evalcond[2]=(((r00*x9673))+(((-1.0)*r02*x9671))+(((-1.0)*x9670*x9672)));
evalcond[3]=((1.0)+((r10*x9673))+(((-1.0)*x9668*x9672))+(((-1.0)*r12*x9671)));
evalcond[4]=(((x9664*x9666))+((sj13*sj14))+((r22*x9665))+(((-1.0)*cj14*x9667))+(((-1.0)*x9669*x9671)));
evalcond[5]=((((-1.0)*sj14*x9667))+((r00*x9674))+(((-1.0)*x9670*x9671))+((r02*x9665))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x9675=((1.0)*gconst4);
CheckValue<IkReal> x9676 = IKatan2WithCheck(IkReal((((gconst5*r00))+(((-1.0)*r01*x9675)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9676.valid){
continue;
}
CheckValue<IkReal> x9677=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x9675))+(((-1.0)*gconst5*r21)))),-1);
if(!x9677.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x9676.value)+(((1.5707963267949)*(x9677.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x9678=IKsin(j16);
IkReal x9679=IKcos(j16);
IkReal x9680=(gconst5*r20);
IkReal x9681=((1.0)*cj13);
IkReal x9682=(gconst4*r11);
IkReal x9683=(gconst4*r21);
IkReal x9684=(gconst4*r01);
IkReal x9685=((1.0)*x9678);
IkReal x9686=((1.0)*x9679);
IkReal x9687=(gconst5*x9679);
IkReal x9688=(gconst5*x9678);
evalcond[0]=(((r12*x9679))+(((-1.0)*x9682*x9685))+((r10*x9688)));
evalcond[1]=(((x9679*x9680))+(((-1.0)*r22*x9685))+(((-1.0)*x9683*x9686)));
evalcond[2]=((((-1.0)*r02*x9685))+(((-1.0)*x9684*x9686))+((r00*x9687)));
evalcond[3]=((1.0)+(((-1.0)*r12*x9685))+(((-1.0)*x9682*x9686))+((r10*x9687)));
evalcond[4]=((((-1.0)*cj14*x9681))+((sj13*sj14))+((x9678*x9680))+(((-1.0)*x9683*x9685))+((r22*x9679)));
evalcond[5]=((((-1.0)*sj14*x9681))+((r02*x9679))+(((-1.0)*x9684*x9685))+(((-1.0)*cj14*sj13))+((r00*x9688)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x9689=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x9689.valid){
continue;
}
CheckValue<IkReal> x9690 = IKatan2WithCheck(IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x9690.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9689.value)))+(x9690.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x9691=IKsin(j16);
IkReal x9692=IKcos(j16);
IkReal x9693=(gconst5*r20);
IkReal x9694=((1.0)*cj13);
IkReal x9695=(gconst4*r11);
IkReal x9696=(gconst4*r21);
IkReal x9697=(gconst4*r01);
IkReal x9698=((1.0)*x9691);
IkReal x9699=((1.0)*x9692);
IkReal x9700=(gconst5*x9692);
IkReal x9701=(gconst5*x9691);
evalcond[0]=(((r10*x9701))+((r12*x9692))+(((-1.0)*x9695*x9698)));
evalcond[1]=((((-1.0)*r22*x9698))+(((-1.0)*x9696*x9699))+((x9692*x9693)));
evalcond[2]=((((-1.0)*r02*x9698))+(((-1.0)*x9697*x9699))+((r00*x9700)));
evalcond[3]=((1.0)+((r10*x9700))+(((-1.0)*r12*x9698))+(((-1.0)*x9695*x9699)));
evalcond[4]=((((-1.0)*cj14*x9694))+((x9691*x9693))+((r22*x9692))+((sj13*sj14))+(((-1.0)*x9696*x9698)));
evalcond[5]=((((-1.0)*x9697*x9698))+((r02*x9692))+((r00*x9701))+(((-1.0)*sj14*x9694))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j15))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x9704 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9704.valid){
continue;
}
IkReal x9702=((1.0)*(x9704.value));
IkReal x9703=x9565;
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x9702)));
sj12=0;
cj12=1.0;
j12=0;
sj15=0;
cj15=1.0;
j15=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9702)));
IkReal gconst4=((1.0)*r21*x9703);
IkReal gconst5=((-1.0)*r20*x9703);
j16eval[0]=1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[4];
CheckValue<IkReal> x9707 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9707.valid){
continue;
}
IkReal x9705=((1.0)*(x9707.value));
IkReal x9706=x9565;
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x9705)));
sj12=0;
cj12=1.0;
j12=0;
sj15=0;
cj15=1.0;
j15=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9705)));
IkReal gconst4=((1.0)*r21*x9706);
IkReal gconst5=((-1.0)*r20*x9706);
j16eval[0]=0;
j16eval[1]=r02;
j16eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j16eval[3]=0;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  || IKabs(j16eval[3]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
CheckValue<IkReal> x9710 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9710.valid){
continue;
}
IkReal x9708=((1.0)*(x9710.value));
IkReal x9709=x9565;
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x9708)));
sj12=0;
cj12=1.0;
j12=0;
sj15=0;
cj15=1.0;
j15=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9708)));
IkReal gconst4=((1.0)*r21*x9709);
IkReal gconst5=((-1.0)*r20*x9709);
j16eval[0]=r12;
j16eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x9711=(gconst5*r10);
IkReal x9712=(gconst4*r11);
CheckValue<IkReal> x9713=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x9712*x9712)+(x9711*x9711)+(((-2.0)*x9711*x9712)))),-1);
if(!x9713.valid){
continue;
}
CheckValue<IkReal> x9714 = IKatan2WithCheck(IkReal(r12),IkReal((x9712+(((-1.0)*x9711)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9714.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9713.value)))+(x9714.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x9715=IKcos(j16);
IkReal x9716=IKsin(j16);
IkReal x9717=(gconst5*r10);
IkReal x9718=((1.0)*sj14);
IkReal x9719=(gconst5*r00);
IkReal x9720=(gconst5*r20);
IkReal x9721=(gconst4*x9716);
IkReal x9722=((1.0)*x9715);
IkReal x9723=((1.0)*x9716);
evalcond[0]=(((x9715*x9720))+(((-1.0)*r22*x9723))+(((-1.0)*gconst4*r21*x9722)));
evalcond[1]=((((-1.0)*gconst4*r01*x9722))+(((-1.0)*r02*x9723))+((x9715*x9719)));
evalcond[2]=(((r11*x9721))+(((-1.0)*x9717*x9723))+(((-1.0)*r12*x9722)));
evalcond[3]=((1.0)+(((-1.0)*r12*x9723))+((x9715*x9717))+(((-1.0)*gconst4*r11*x9722)));
evalcond[4]=(((r01*x9721))+(((-1.0)*sj13*x9718))+(((-1.0)*r02*x9722))+(((-1.0)*x9719*x9723))+((cj13*cj14)));
evalcond[5]=((((-1.0)*cj13*x9718))+(((-1.0)*r22*x9722))+(((-1.0)*cj14*sj13))+((r21*x9721))+(((-1.0)*x9720*x9723)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x9724=((1.0)*gconst4);
CheckValue<IkReal> x9725 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x9724))+((gconst5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9725.valid){
continue;
}
CheckValue<IkReal> x9726=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x9724))+(((-1.0)*gconst5*r21)))),-1);
if(!x9726.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x9725.value)+(((1.5707963267949)*(x9726.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x9727=IKcos(j16);
IkReal x9728=IKsin(j16);
IkReal x9729=(gconst5*r10);
IkReal x9730=((1.0)*sj14);
IkReal x9731=(gconst5*r00);
IkReal x9732=(gconst5*r20);
IkReal x9733=(gconst4*x9728);
IkReal x9734=((1.0)*x9727);
IkReal x9735=((1.0)*x9728);
evalcond[0]=((((-1.0)*r22*x9735))+((x9727*x9732))+(((-1.0)*gconst4*r21*x9734)));
evalcond[1]=((((-1.0)*r02*x9735))+(((-1.0)*gconst4*r01*x9734))+((x9727*x9731)));
evalcond[2]=(((r11*x9733))+(((-1.0)*x9729*x9735))+(((-1.0)*r12*x9734)));
evalcond[3]=((1.0)+(((-1.0)*r12*x9735))+(((-1.0)*gconst4*r11*x9734))+((x9727*x9729)));
evalcond[4]=((((-1.0)*r02*x9734))+(((-1.0)*sj13*x9730))+(((-1.0)*x9731*x9735))+((cj13*cj14))+((r01*x9733)));
evalcond[5]=((((-1.0)*x9732*x9735))+(((-1.0)*r22*x9734))+(((-1.0)*cj13*x9730))+((r21*x9733))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x9736=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x9736.valid){
continue;
}
CheckValue<IkReal> x9737 = IKatan2WithCheck(IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x9737.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9736.value)))+(x9737.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x9738=IKcos(j16);
IkReal x9739=IKsin(j16);
IkReal x9740=(gconst5*r10);
IkReal x9741=((1.0)*sj14);
IkReal x9742=(gconst5*r00);
IkReal x9743=(gconst5*r20);
IkReal x9744=(gconst4*x9739);
IkReal x9745=((1.0)*x9738);
IkReal x9746=((1.0)*x9739);
evalcond[0]=((((-1.0)*gconst4*r21*x9745))+((x9738*x9743))+(((-1.0)*r22*x9746)));
evalcond[1]=((((-1.0)*r02*x9746))+((x9738*x9742))+(((-1.0)*gconst4*r01*x9745)));
evalcond[2]=(((r11*x9744))+(((-1.0)*x9740*x9746))+(((-1.0)*r12*x9745)));
evalcond[3]=((1.0)+(((-1.0)*gconst4*r11*x9745))+((x9738*x9740))+(((-1.0)*r12*x9746)));
evalcond[4]=((((-1.0)*x9742*x9746))+(((-1.0)*sj13*x9741))+(((-1.0)*r02*x9745))+((r01*x9744))+((cj13*cj14)));
evalcond[5]=(((r21*x9744))+(((-1.0)*x9743*x9746))+(((-1.0)*cj13*x9741))+(((-1.0)*r22*x9745))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x9749 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9749.valid){
continue;
}
IkReal x9747=((1.0)*(x9749.value));
IkReal x9748=x9565;
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x9747)));
sj12=0;
cj12=1.0;
j12=0;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9747)));
IkReal gconst4=((1.0)*r21*x9748);
IkReal gconst5=((-1.0)*r20*x9748);
j16eval[0]=1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[4];
CheckValue<IkReal> x9752 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9752.valid){
continue;
}
IkReal x9750=((1.0)*(x9752.value));
IkReal x9751=x9565;
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x9750)));
sj12=0;
cj12=1.0;
j12=0;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9750)));
IkReal gconst4=((1.0)*r21*x9751);
IkReal gconst5=((-1.0)*r20*x9751);
j16eval[0]=0;
j16eval[1]=r02;
j16eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j16eval[3]=0;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  || IKabs(j16eval[3]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
CheckValue<IkReal> x9755 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9755.valid){
continue;
}
IkReal x9753=((1.0)*(x9755.value));
IkReal x9754=x9565;
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x9753)));
sj12=0;
cj12=1.0;
j12=0;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9753)));
IkReal gconst4=((1.0)*r21*x9754);
IkReal gconst5=((-1.0)*r20*x9754);
j16eval[0]=r12;
j16eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x9756=(gconst5*r10);
IkReal x9757=(gconst4*r11);
CheckValue<IkReal> x9758=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x9756*x9756)+(((-2.0)*x9756*x9757))+(x9757*x9757))),-1);
if(!x9758.valid){
continue;
}
CheckValue<IkReal> x9759 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x9756))+x9757)),IKFAST_ATAN2_MAGTHRESH);
if(!x9759.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9758.value)))+(x9759.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x9760=IKsin(j16);
IkReal x9761=IKcos(j16);
IkReal x9762=(gconst5*r20);
IkReal x9763=(gconst4*r11);
IkReal x9764=(gconst4*r21);
IkReal x9765=((1.0)*sj14);
IkReal x9766=(gconst4*r01);
IkReal x9767=((1.0)*x9760);
IkReal x9768=((1.0)*x9761);
IkReal x9769=(gconst5*x9761);
IkReal x9770=(gconst5*x9760);
evalcond[0]=((((-1.0)*x9763*x9767))+((r12*x9761))+((r10*x9770)));
evalcond[1]=(((x9761*x9762))+(((-1.0)*x9764*x9768))+(((-1.0)*r22*x9767)));
evalcond[2]=(((r00*x9769))+(((-1.0)*r02*x9767))+(((-1.0)*x9766*x9768)));
evalcond[3]=((1.0)+(((-1.0)*x9763*x9768))+((r10*x9769))+(((-1.0)*r12*x9767)));
evalcond[4]=(((r00*x9770))+((r02*x9761))+(((-1.0)*x9766*x9767))+((cj13*cj14))+(((-1.0)*sj13*x9765)));
evalcond[5]=(((r22*x9761))+(((-1.0)*x9764*x9767))+(((-1.0)*cj14*sj13))+(((-1.0)*cj13*x9765))+((x9760*x9762)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x9771=((1.0)*gconst4);
CheckValue<IkReal> x9772 = IKatan2WithCheck(IkReal((((gconst5*r00))+(((-1.0)*r01*x9771)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9772.valid){
continue;
}
CheckValue<IkReal> x9773=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst5*r21))+(((-1.0)*r20*x9771)))),-1);
if(!x9773.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x9772.value)+(((1.5707963267949)*(x9773.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x9774=IKsin(j16);
IkReal x9775=IKcos(j16);
IkReal x9776=(gconst5*r20);
IkReal x9777=(gconst4*r11);
IkReal x9778=(gconst4*r21);
IkReal x9779=((1.0)*sj14);
IkReal x9780=(gconst4*r01);
IkReal x9781=((1.0)*x9774);
IkReal x9782=((1.0)*x9775);
IkReal x9783=(gconst5*x9775);
IkReal x9784=(gconst5*x9774);
evalcond[0]=(((r12*x9775))+((r10*x9784))+(((-1.0)*x9777*x9781)));
evalcond[1]=((((-1.0)*x9778*x9782))+(((-1.0)*r22*x9781))+((x9775*x9776)));
evalcond[2]=(((r00*x9783))+(((-1.0)*x9780*x9782))+(((-1.0)*r02*x9781)));
evalcond[3]=((1.0)+(((-1.0)*r12*x9781))+((r10*x9783))+(((-1.0)*x9777*x9782)));
evalcond[4]=(((r00*x9784))+(((-1.0)*sj13*x9779))+((r02*x9775))+(((-1.0)*x9780*x9781))+((cj13*cj14)));
evalcond[5]=(((r22*x9775))+(((-1.0)*x9778*x9781))+(((-1.0)*cj14*sj13))+((x9774*x9776))+(((-1.0)*cj13*x9779)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x9785=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x9785.valid){
continue;
}
CheckValue<IkReal> x9786 = IKatan2WithCheck(IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x9786.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9785.value)))+(x9786.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x9787=IKsin(j16);
IkReal x9788=IKcos(j16);
IkReal x9789=(gconst5*r20);
IkReal x9790=(gconst4*r11);
IkReal x9791=(gconst4*r21);
IkReal x9792=((1.0)*sj14);
IkReal x9793=(gconst4*r01);
IkReal x9794=((1.0)*x9787);
IkReal x9795=((1.0)*x9788);
IkReal x9796=(gconst5*x9788);
IkReal x9797=(gconst5*x9787);
evalcond[0]=((((-1.0)*x9790*x9794))+((r10*x9797))+((r12*x9788)));
evalcond[1]=((((-1.0)*x9791*x9795))+((x9788*x9789))+(((-1.0)*r22*x9794)));
evalcond[2]=((((-1.0)*r02*x9794))+(((-1.0)*x9793*x9795))+((r00*x9796)));
evalcond[3]=((1.0)+(((-1.0)*x9790*x9795))+((r10*x9796))+(((-1.0)*r12*x9794)));
evalcond[4]=((((-1.0)*x9793*x9794))+(((-1.0)*sj13*x9792))+((r00*x9797))+((r02*x9788))+((cj13*cj14)));
evalcond[5]=((((-1.0)*x9791*x9794))+((r22*x9788))+(((-1.0)*cj13*x9792))+((x9787*x9789))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[2];
CheckValue<IkReal> x9800 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9800.valid){
continue;
}
IkReal x9798=((1.0)*(x9800.value));
IkReal x9799=((-1.0)*px);
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x9798)));
sj12=0;
cj12=1.0;
j12=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9799);
rxp1_1=(px*r21);
rxp1_2=(r11*x9799);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9798)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=((-1.0)*r20);
IkReal x9801=((1.0)*sj15);
IkReal x9802=(r11*r21);
IkReal x9803=(r10*r20);
j16eval[0]=(((x9801*x9803))+((x9801*x9802)));
j16eval[1]=((((-1.0)*x9803))+(((-1.0)*x9802)));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
CheckValue<IkReal> x9806 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9806.valid){
continue;
}
IkReal x9804=((1.0)*(x9806.value));
IkReal x9805=((-1.0)*px);
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x9804)));
sj12=0;
cj12=1.0;
j12=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9805);
rxp1_1=(px*r21);
rxp1_2=(r11*x9805);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9804)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=((-1.0)*r20);
IkReal x9807=((1.0)*cj15);
IkReal x9808=(r10*r20);
IkReal x9809=(r11*r21);
j16eval[0]=(((x9807*x9809))+((x9807*x9808)));
j16eval[1]=((((-1.0)*x9809))+(((-1.0)*x9808)));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
CheckValue<IkReal> x9812 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9812.valid){
continue;
}
IkReal x9810=((1.0)*(x9812.value));
IkReal x9811=((-1.0)*px);
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x9810)));
sj12=0;
cj12=1.0;
j12=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9811);
rxp1_1=(px*r21);
rxp1_2=(r11*x9811);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9810)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=((-1.0)*r20);
IkReal x9813=((1.0)*cj15);
j16eval[0]=(((r11*r21*x9813))+((r10*r20*x9813)));
j16eval[1]=cj15;
j16eval[2]=r02;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x9814=((1.0)*gconst5);
CheckValue<IkReal> x9815=IKPowWithIntegerCheck(((((-1.0)*cj15*r10*x9814))+((cj15*gconst4*r11))),-1);
if(!x9815.valid){
continue;
}
CheckValue<IkReal> x9816=IKPowWithIntegerCheck(cj15,-1);
if(!x9816.valid){
continue;
}
CheckValue<IkReal> x9817=IKPowWithIntegerCheck(r02,-1);
if(!x9817.valid){
continue;
}
if( IKabs(((x9815.value)*(((((-1.0)*gconst4*r10*sj15))+(((-1.0)*r11*sj15*x9814)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9816.value)*(x9817.value)*(((((-1.0)*sj13*sj14))+((cj13*cj14)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9815.value)*(((((-1.0)*gconst4*r10*sj15))+(((-1.0)*r11*sj15*x9814))))))+IKsqr(((x9816.value)*(x9817.value)*(((((-1.0)*sj13*sj14))+((cj13*cj14))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x9815.value)*(((((-1.0)*gconst4*r10*sj15))+(((-1.0)*r11*sj15*x9814))))), ((x9816.value)*(x9817.value)*(((((-1.0)*sj13*sj14))+((cj13*cj14))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x9818=IKcos(j16);
IkReal x9819=IKsin(j16);
IkReal x9820=(gconst4*sj15);
IkReal x9821=((1.0)*cj15);
IkReal x9822=(gconst5*r21);
IkReal x9823=(cj13*cj14);
IkReal x9824=(gconst4*r11);
IkReal x9825=(gconst5*r11);
IkReal x9826=((1.0)*sj15);
IkReal x9827=(gconst4*r21);
IkReal x9828=((1.0)*sj14);
IkReal x9829=((1.0)*cj14*sj13);
IkReal x9830=(cj13*x9828);
IkReal x9831=(r02*x9818);
IkReal x9832=(gconst5*x9819);
IkReal x9833=((1.0)*x9818);
IkReal x9834=(gconst5*x9818);
IkReal x9835=(cj15*x9819);
IkReal x9836=(x9829+x9830);
evalcond[0]=((-1.0)*r02*x9819);
evalcond[1]=((((-1.0)*x9827*x9833))+((r20*x9834)));
evalcond[2]=((1.0)+((r10*x9834))+(((-1.0)*x9824*x9833)));
evalcond[3]=((((-1.0)*x9821*x9831))+(((-1.0)*sj13*x9828))+x9823);
evalcond[4]=((((-1.0)*x9836))+(((-1.0)*x9826*x9831)));
evalcond[5]=((((-1.0)*r10*x9821*x9832))+((sj15*x9825))+((x9824*x9835))+((r10*x9820)));
evalcond[6]=(((r11*x9819*x9820))+(((-1.0)*x9821*x9825))+(((-1.0)*gconst4*r10*x9821))+(((-1.0)*r10*x9826*x9832)));
evalcond[7]=((((-1.0)*x9836))+((r20*x9820))+(((-1.0)*r20*x9821*x9832))+((x9827*x9835))+((sj15*x9822)));
evalcond[8]=((((-1.0)*r20*x9826*x9832))+(((-1.0)*gconst4*r20*x9821))+(((-1.0)*x9821*x9822))+((r21*x9819*x9820))+((sj13*sj14))+(((-1.0)*x9823)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x9837=(gconst5*r10);
IkReal x9838=((1.0)*sj15);
IkReal x9839=(gconst4*r11);
CheckValue<IkReal> x9840=IKPowWithIntegerCheck(((((-1.0)*cj15*x9837))+((cj15*x9839))),-1);
if(!x9840.valid){
continue;
}
CheckValue<IkReal> x9841=IKPowWithIntegerCheck(((((-1.0)*x9839))+x9837),-1);
if(!x9841.valid){
continue;
}
if( IKabs(((x9840.value)*(((((-1.0)*gconst4*r10*x9838))+(((-1.0)*gconst5*r11*x9838)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x9841.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9840.value)*(((((-1.0)*gconst4*r10*x9838))+(((-1.0)*gconst5*r11*x9838))))))+IKsqr(((-1.0)*(x9841.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x9840.value)*(((((-1.0)*gconst4*r10*x9838))+(((-1.0)*gconst5*r11*x9838))))), ((-1.0)*(x9841.value)));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x9842=IKcos(j16);
IkReal x9843=IKsin(j16);
IkReal x9844=(gconst4*sj15);
IkReal x9845=((1.0)*cj15);
IkReal x9846=(gconst5*r21);
IkReal x9847=(cj13*cj14);
IkReal x9848=(gconst4*r11);
IkReal x9849=(gconst5*r11);
IkReal x9850=((1.0)*sj15);
IkReal x9851=(gconst4*r21);
IkReal x9852=((1.0)*sj14);
IkReal x9853=((1.0)*cj14*sj13);
IkReal x9854=(cj13*x9852);
IkReal x9855=(r02*x9842);
IkReal x9856=(gconst5*x9843);
IkReal x9857=((1.0)*x9842);
IkReal x9858=(gconst5*x9842);
IkReal x9859=(cj15*x9843);
IkReal x9860=(x9853+x9854);
evalcond[0]=((-1.0)*r02*x9843);
evalcond[1]=((((-1.0)*x9851*x9857))+((r20*x9858)));
evalcond[2]=((1.0)+((r10*x9858))+(((-1.0)*x9848*x9857)));
evalcond[3]=((((-1.0)*sj13*x9852))+(((-1.0)*x9845*x9855))+x9847);
evalcond[4]=((((-1.0)*x9860))+(((-1.0)*x9850*x9855)));
evalcond[5]=(((r10*x9844))+((sj15*x9849))+((x9848*x9859))+(((-1.0)*r10*x9845*x9856)));
evalcond[6]=((((-1.0)*gconst4*r10*x9845))+((r11*x9843*x9844))+(((-1.0)*x9845*x9849))+(((-1.0)*r10*x9850*x9856)));
evalcond[7]=((((-1.0)*x9860))+((sj15*x9846))+((r20*x9844))+(((-1.0)*r20*x9845*x9856))+((x9851*x9859)));
evalcond[8]=((((-1.0)*gconst4*r20*x9845))+(((-1.0)*x9847))+(((-1.0)*r20*x9850*x9856))+(((-1.0)*x9845*x9846))+((sj13*sj14))+((r21*x9843*x9844)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x9861=(gconst5*r10);
IkReal x9862=(gconst4*r11);
CheckValue<IkReal> x9863=IKPowWithIntegerCheck(((((-1.0)*sj15*x9861))+((sj15*x9862))),-1);
if(!x9863.valid){
continue;
}
CheckValue<IkReal> x9864=IKPowWithIntegerCheck(((((-1.0)*x9862))+x9861),-1);
if(!x9864.valid){
continue;
}
if( IKabs(((x9863.value)*((((cj15*gconst5*r11))+((cj15*gconst4*r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x9864.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9863.value)*((((cj15*gconst5*r11))+((cj15*gconst4*r10))))))+IKsqr(((-1.0)*(x9864.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x9863.value)*((((cj15*gconst5*r11))+((cj15*gconst4*r10))))), ((-1.0)*(x9864.value)));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x9865=IKcos(j16);
IkReal x9866=IKsin(j16);
IkReal x9867=(gconst4*sj15);
IkReal x9868=((1.0)*cj15);
IkReal x9869=(gconst5*r21);
IkReal x9870=(cj13*cj14);
IkReal x9871=(gconst4*r11);
IkReal x9872=(gconst5*r11);
IkReal x9873=((1.0)*sj15);
IkReal x9874=(gconst4*r21);
IkReal x9875=((1.0)*sj14);
IkReal x9876=((1.0)*cj14*sj13);
IkReal x9877=(cj13*x9875);
IkReal x9878=(r02*x9865);
IkReal x9879=(gconst5*x9866);
IkReal x9880=((1.0)*x9865);
IkReal x9881=(gconst5*x9865);
IkReal x9882=(cj15*x9866);
IkReal x9883=(x9876+x9877);
evalcond[0]=((-1.0)*r02*x9866);
evalcond[1]=(((r20*x9881))+(((-1.0)*x9874*x9880)));
evalcond[2]=((1.0)+(((-1.0)*x9871*x9880))+((r10*x9881)));
evalcond[3]=((((-1.0)*sj13*x9875))+(((-1.0)*x9868*x9878))+x9870);
evalcond[4]=((((-1.0)*x9883))+(((-1.0)*x9873*x9878)));
evalcond[5]=(((sj15*x9872))+(((-1.0)*r10*x9868*x9879))+((x9871*x9882))+((r10*x9867)));
evalcond[6]=(((r11*x9866*x9867))+(((-1.0)*x9868*x9872))+(((-1.0)*gconst4*r10*x9868))+(((-1.0)*r10*x9873*x9879)));
evalcond[7]=(((x9874*x9882))+(((-1.0)*x9883))+((sj15*x9869))+(((-1.0)*r20*x9868*x9879))+((r20*x9867)));
evalcond[8]=((((-1.0)*x9870))+(((-1.0)*gconst4*r20*x9868))+(((-1.0)*x9868*x9869))+((r21*x9866*x9867))+((sj13*sj14))+(((-1.0)*r20*x9873*x9879)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j16]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x9884=gconst5*gconst5;
IkReal x9885=gconst4*gconst4;
IkReal x9886=(cj15*r10);
IkReal x9887=(r11*sj15);
IkReal x9888=(r10*sj15);
IkReal x9889=(cj15*r11);
IkReal x9890=(r21*x9885);
IkReal x9891=(gconst4*gconst5*r20);
IkReal x9892=(r20*x9884);
IkReal x9893=((1.0)*gconst4*gconst5*r21);
CheckValue<IkReal> x9894=IKPowWithIntegerCheck(IKsign((((x9889*x9890))+(((-1.0)*x9889*x9891))+((cj15*r12*r22))+((x9886*x9892))+(((-1.0)*x9886*x9893)))),-1);
if(!x9894.valid){
continue;
}
CheckValue<IkReal> x9895 = IKatan2WithCheck(IkReal(((((-1.0)*x9887*x9893))+(((-1.0)*x9888*x9890))+((x9887*x9892))+((x9888*x9891)))),IkReal((((gconst4*r22*x9888))+((gconst5*r22*x9887)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9895.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9894.value)))+(x9895.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x9896=IKcos(j16);
IkReal x9897=IKsin(j16);
IkReal x9898=(gconst4*sj15);
IkReal x9899=((1.0)*cj15);
IkReal x9900=(gconst5*r21);
IkReal x9901=((1.0)*sj15);
IkReal x9902=(cj13*cj14);
IkReal x9903=(gconst5*r11);
IkReal x9904=(gconst5*r01);
IkReal x9905=((1.0)*sj14);
IkReal x9906=((1.0)*cj14*sj13);
IkReal x9907=(cj13*x9905);
IkReal x9908=(r12*x9896);
IkReal x9909=(r02*x9896);
IkReal x9910=(gconst5*x9897);
IkReal x9911=((1.0)*x9897);
IkReal x9912=(r22*x9896);
IkReal x9913=(gconst5*x9896);
IkReal x9914=(cj15*gconst4*x9897);
IkReal x9915=((1.0)*gconst4*x9896);
IkReal x9916=(x9906+x9907);
evalcond[0]=(((r20*x9913))+(((-1.0)*r22*x9911))+(((-1.0)*r21*x9915)));
evalcond[1]=(((r00*x9913))+(((-1.0)*r02*x9911))+(((-1.0)*r01*x9915)));
evalcond[2]=((1.0)+(((-1.0)*r11*x9915))+(((-1.0)*r12*x9911))+((r10*x9913)));
evalcond[3]=(((sj15*x9903))+((r11*x9914))+(((-1.0)*r10*x9899*x9910))+(((-1.0)*x9899*x9908))+((r10*x9898)));
evalcond[4]=((((-1.0)*x9901*x9908))+(((-1.0)*gconst4*r10*x9899))+((r11*x9897*x9898))+(((-1.0)*x9899*x9903))+(((-1.0)*r10*x9901*x9910)));
evalcond[5]=((((-1.0)*r00*x9899*x9910))+((sj15*x9904))+((r00*x9898))+((r01*x9914))+(((-1.0)*sj13*x9905))+(((-1.0)*x9899*x9909))+x9902);
evalcond[6]=(((sj15*x9900))+(((-1.0)*x9916))+((r21*x9914))+(((-1.0)*r20*x9899*x9910))+((r20*x9898))+(((-1.0)*x9899*x9912)));
evalcond[7]=((((-1.0)*x9901*x9912))+(((-1.0)*x9902))+(((-1.0)*gconst4*r20*x9899))+((sj13*sj14))+(((-1.0)*x9899*x9900))+((r21*x9897*x9898))+(((-1.0)*r20*x9901*x9910)));
evalcond[8]=(((r01*x9897*x9898))+(((-1.0)*r00*x9901*x9910))+(((-1.0)*x9901*x9909))+(((-1.0)*gconst4*r00*x9899))+(((-1.0)*x9916))+(((-1.0)*x9899*x9904)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x9917=((1.0)*gconst4);
CheckValue<IkReal> x9918 = IKatan2WithCheck(IkReal((((gconst5*r00))+(((-1.0)*r01*x9917)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9918.valid){
continue;
}
CheckValue<IkReal> x9919=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x9917))+(((-1.0)*gconst5*r21)))),-1);
if(!x9919.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x9918.value)+(((1.5707963267949)*(x9919.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x9920=IKcos(j16);
IkReal x9921=IKsin(j16);
IkReal x9922=(gconst4*sj15);
IkReal x9923=((1.0)*cj15);
IkReal x9924=(gconst5*r21);
IkReal x9925=((1.0)*sj15);
IkReal x9926=(cj13*cj14);
IkReal x9927=(gconst5*r11);
IkReal x9928=(gconst5*r01);
IkReal x9929=((1.0)*sj14);
IkReal x9930=((1.0)*cj14*sj13);
IkReal x9931=(cj13*x9929);
IkReal x9932=(r12*x9920);
IkReal x9933=(r02*x9920);
IkReal x9934=(gconst5*x9921);
IkReal x9935=((1.0)*x9921);
IkReal x9936=(r22*x9920);
IkReal x9937=(gconst5*x9920);
IkReal x9938=(cj15*gconst4*x9921);
IkReal x9939=((1.0)*gconst4*x9920);
IkReal x9940=(x9931+x9930);
evalcond[0]=((((-1.0)*r22*x9935))+(((-1.0)*r21*x9939))+((r20*x9937)));
evalcond[1]=(((r00*x9937))+(((-1.0)*r01*x9939))+(((-1.0)*r02*x9935)));
evalcond[2]=((1.0)+((r10*x9937))+(((-1.0)*r12*x9935))+(((-1.0)*r11*x9939)));
evalcond[3]=(((r10*x9922))+(((-1.0)*r10*x9923*x9934))+((r11*x9938))+(((-1.0)*x9923*x9932))+((sj15*x9927)));
evalcond[4]=((((-1.0)*x9925*x9932))+(((-1.0)*r10*x9925*x9934))+((r11*x9921*x9922))+(((-1.0)*gconst4*r10*x9923))+(((-1.0)*x9923*x9927)));
evalcond[5]=(((r01*x9938))+(((-1.0)*sj13*x9929))+(((-1.0)*r00*x9923*x9934))+(((-1.0)*x9923*x9933))+((sj15*x9928))+x9926+((r00*x9922)));
evalcond[6]=((((-1.0)*r20*x9923*x9934))+((r20*x9922))+((r21*x9938))+(((-1.0)*x9923*x9936))+((sj15*x9924))+(((-1.0)*x9940)));
evalcond[7]=((((-1.0)*x9925*x9936))+((r21*x9921*x9922))+(((-1.0)*x9926))+((sj13*sj14))+(((-1.0)*gconst4*r20*x9923))+(((-1.0)*r20*x9925*x9934))+(((-1.0)*x9923*x9924)));
evalcond[8]=((((-1.0)*x9925*x9933))+((r01*x9921*x9922))+(((-1.0)*gconst4*r00*x9923))+(((-1.0)*x9940))+(((-1.0)*x9923*x9928))+(((-1.0)*r00*x9925*x9934)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x9941=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x9941.valid){
continue;
}
CheckValue<IkReal> x9942 = IKatan2WithCheck(IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x9942.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9941.value)))+(x9942.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x9943=IKcos(j16);
IkReal x9944=IKsin(j16);
IkReal x9945=(gconst4*sj15);
IkReal x9946=((1.0)*cj15);
IkReal x9947=(gconst5*r21);
IkReal x9948=((1.0)*sj15);
IkReal x9949=(cj13*cj14);
IkReal x9950=(gconst5*r11);
IkReal x9951=(gconst5*r01);
IkReal x9952=((1.0)*sj14);
IkReal x9953=((1.0)*cj14*sj13);
IkReal x9954=(cj13*x9952);
IkReal x9955=(r12*x9943);
IkReal x9956=(r02*x9943);
IkReal x9957=(gconst5*x9944);
IkReal x9958=((1.0)*x9944);
IkReal x9959=(r22*x9943);
IkReal x9960=(gconst5*x9943);
IkReal x9961=(cj15*gconst4*x9944);
IkReal x9962=((1.0)*gconst4*x9943);
IkReal x9963=(x9954+x9953);
evalcond[0]=((((-1.0)*r22*x9958))+(((-1.0)*r21*x9962))+((r20*x9960)));
evalcond[1]=((((-1.0)*r02*x9958))+((r00*x9960))+(((-1.0)*r01*x9962)));
evalcond[2]=((1.0)+(((-1.0)*r11*x9962))+((r10*x9960))+(((-1.0)*r12*x9958)));
evalcond[3]=((((-1.0)*x9946*x9955))+(((-1.0)*r10*x9946*x9957))+((sj15*x9950))+((r10*x9945))+((r11*x9961)));
evalcond[4]=((((-1.0)*x9946*x9950))+(((-1.0)*r10*x9948*x9957))+(((-1.0)*gconst4*r10*x9946))+((r11*x9944*x9945))+(((-1.0)*x9948*x9955)));
evalcond[5]=((((-1.0)*x9946*x9956))+(((-1.0)*sj13*x9952))+((r01*x9961))+((sj15*x9951))+(((-1.0)*r00*x9946*x9957))+x9949+((r00*x9945)));
evalcond[6]=((((-1.0)*x9946*x9959))+((r21*x9961))+(((-1.0)*x9963))+(((-1.0)*r20*x9946*x9957))+((r20*x9945))+((sj15*x9947)));
evalcond[7]=((((-1.0)*r20*x9948*x9957))+(((-1.0)*x9949))+((sj13*sj14))+(((-1.0)*x9948*x9959))+(((-1.0)*gconst4*r20*x9946))+((r21*x9944*x9945))+(((-1.0)*x9946*x9947)));
evalcond[8]=((((-1.0)*x9946*x9951))+(((-1.0)*r00*x9948*x9957))+(((-1.0)*x9963))+((r01*x9944*x9945))+(((-1.0)*x9948*x9956))+(((-1.0)*gconst4*r00*x9946)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[4];
CheckValue<IkReal> x9966 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9966.valid){
continue;
}
IkReal x9964=((1.0)*(x9966.value));
IkReal x9965=x9565;
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x9964)));
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9964)));
IkReal gconst4=((1.0)*r21*x9965);
IkReal gconst5=((-1.0)*r20*x9965);
j16eval[0]=0;
j16eval[1]=r02;
j16eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j16eval[3]=0;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  || IKabs(j16eval[3]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x9969 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9969.valid){
continue;
}
IkReal x9967=((1.0)*(x9969.value));
IkReal x9968=x9565;
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x9967)));
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9967)));
IkReal gconst4=((1.0)*r21*x9968);
IkReal gconst5=((-1.0)*r20*x9968);
j16eval[0]=1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
CheckValue<IkReal> x9972 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9972.valid){
continue;
}
IkReal x9970=((1.0)*(x9972.value));
IkReal x9971=x9565;
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x9970)));
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9970)));
IkReal gconst4=((1.0)*r21*x9971);
IkReal gconst5=((-1.0)*r20*x9971);
j16eval[0]=r02;
j16eval[1]=sj15;
j16eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[4];
CheckValue<IkReal> x9975 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9975.valid){
continue;
}
IkReal x9973=((1.0)*(x9975.value));
IkReal x9974=x9565;
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x9973)));
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9973)));
IkReal gconst4=((1.0)*r21*x9974);
IkReal gconst5=((-1.0)*r20*x9974);
j16eval[0]=0;
j16eval[1]=r02;
j16eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j16eval[3]=0;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  || IKabs(j16eval[3]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x9978 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9978.valid){
continue;
}
IkReal x9976=((1.0)*(x9978.value));
IkReal x9977=x9565;
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x9976)));
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9976)));
IkReal gconst4=((1.0)*r21*x9977);
IkReal gconst5=((-1.0)*r20*x9977);
j16eval[0]=1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[4];
CheckValue<IkReal> x9981 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9981.valid){
continue;
}
IkReal x9979=((1.0)*(x9981.value));
IkReal x9980=x9565;
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x9979)));
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9979)));
IkReal gconst4=((1.0)*r21*x9980);
IkReal gconst5=((-1.0)*r20*x9980);
IkReal x9982=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9986=IKPowWithIntegerCheck(x9982,-1);
if(!x9986.valid){
continue;
}
IkReal x9983=x9986.value;
IkReal x9984=((1.0)*x9983);
IkReal x9985=((((-1.0)*x9984*(r10*r10)*(r20*r20)))+(((-1.0)*x9984*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x9983))+(((-1.0)*(r12*r12))));
j16eval[0]=x9985;
j16eval[1]=r12;
j16eval[2]=x9982;
j16eval[3]=IKsign(x9985);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  || IKabs(j16eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x9987=(gconst5*r10);
IkReal x9988=(gconst4*r11);
CheckValue<IkReal> x9989 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x9987))+x9988)),IKFAST_ATAN2_MAGTHRESH);
if(!x9989.valid){
continue;
}
CheckValue<IkReal> x9990=IKPowWithIntegerCheck(IKsign(((((2.0)*x9987*x9988))+(((-1.0)*(x9987*x9987)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x9988*x9988))))),-1);
if(!x9990.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x9989.value)+(((1.5707963267949)*(x9990.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x9991=IKcos(j16);
IkReal x9992=IKsin(j16);
IkReal x9993=(gconst5*r10);
IkReal x9994=(gconst4*x9992);
IkReal x9995=((1.0)*x9991);
IkReal x9996=((1.0)*x9992);
IkReal x9997=(gconst5*x9991);
evalcond[0]=((((-1.0)*r22*x9996))+(((-1.0)*gconst4*r21*x9995))+((r20*x9997)));
evalcond[1]=(((r00*x9997))+(((-1.0)*r02*x9996))+(((-1.0)*gconst4*r01*x9995)));
evalcond[2]=(((r11*x9994))+(((-1.0)*x9993*x9996))+(((-1.0)*r12*x9995)));
evalcond[3]=((-1.0)+(((-1.0)*gconst4*r11*x9995))+((x9991*x9993))+(((-1.0)*r12*x9996)));
evalcond[4]=(((cj14*sj13))+((r01*x9994))+(((-1.0)*r02*x9995))+((cj13*sj14))+(((-1.0)*gconst5*r00*x9996)));
evalcond[5]=((((-1.0)*cj13*cj14))+(((-1.0)*r22*x9995))+((r21*x9994))+((sj13*sj14))+(((-1.0)*gconst5*r20*x9996)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x9998=((1.0)*gconst4);
CheckValue<IkReal> x9999 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x9998))+((gconst5*r20)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x9999.valid){
continue;
}
CheckValue<IkReal> x10000=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x9998))+(((-1.0)*gconst5*r01)))),-1);
if(!x10000.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x9999.value)+(((1.5707963267949)*(x10000.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x10001=IKcos(j16);
IkReal x10002=IKsin(j16);
IkReal x10003=(gconst5*r10);
IkReal x10004=(gconst4*x10002);
IkReal x10005=((1.0)*x10001);
IkReal x10006=((1.0)*x10002);
IkReal x10007=(gconst5*x10001);
evalcond[0]=((((-1.0)*r22*x10006))+((r20*x10007))+(((-1.0)*gconst4*r21*x10005)));
evalcond[1]=((((-1.0)*r02*x10006))+((r00*x10007))+(((-1.0)*gconst4*r01*x10005)));
evalcond[2]=((((-1.0)*x10003*x10006))+(((-1.0)*r12*x10005))+((r11*x10004)));
evalcond[3]=((-1.0)+(((-1.0)*gconst4*r11*x10005))+(((-1.0)*r12*x10006))+((x10001*x10003)));
evalcond[4]=(((cj14*sj13))+(((-1.0)*r02*x10005))+((cj13*sj14))+((r01*x10004))+(((-1.0)*gconst5*r00*x10006)));
evalcond[5]=((((-1.0)*cj13*cj14))+(((-1.0)*gconst5*r20*x10006))+(((-1.0)*r22*x10005))+((sj13*sj14))+((r21*x10004)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x10008 = IKatan2WithCheck(IkReal(((((-1.0)*gconst4*r01))+((gconst5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10008.valid){
continue;
}
CheckValue<IkReal> x10009=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10009.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x10008.value)+(((1.5707963267949)*(x10009.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x10010=IKcos(j16);
IkReal x10011=IKsin(j16);
IkReal x10012=(gconst5*r10);
IkReal x10013=(gconst4*x10011);
IkReal x10014=((1.0)*x10010);
IkReal x10015=((1.0)*x10011);
IkReal x10016=(gconst5*x10010);
evalcond[0]=((((-1.0)*r22*x10015))+(((-1.0)*gconst4*r21*x10014))+((r20*x10016)));
evalcond[1]=((((-1.0)*r02*x10015))+((r00*x10016))+(((-1.0)*gconst4*r01*x10014)));
evalcond[2]=((((-1.0)*x10012*x10015))+(((-1.0)*r12*x10014))+((r11*x10013)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10015))+((x10010*x10012))+(((-1.0)*gconst4*r11*x10014)));
evalcond[4]=(((cj14*sj13))+(((-1.0)*r02*x10014))+((cj13*sj14))+((r01*x10013))+(((-1.0)*gconst5*r00*x10015)));
evalcond[5]=((((-1.0)*cj13*cj14))+((r21*x10013))+(((-1.0)*gconst5*r20*x10015))+(((-1.0)*r22*x10014))+((sj13*sj14)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[4];
CheckValue<IkReal> x10019 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10019.valid){
continue;
}
IkReal x10017=((1.0)*(x10019.value));
IkReal x10018=x9565;
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x10017)));
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10017)));
IkReal gconst4=((1.0)*r21*x10018);
IkReal gconst5=((-1.0)*r20*x10018);
j16eval[0]=0;
j16eval[1]=r02;
j16eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j16eval[3]=0;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  || IKabs(j16eval[3]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x10022 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10022.valid){
continue;
}
IkReal x10020=((1.0)*(x10022.value));
IkReal x10021=x9565;
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x10020)));
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10020)));
IkReal gconst4=((1.0)*r21*x10021);
IkReal gconst5=((-1.0)*r20*x10021);
j16eval[0]=1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[4];
CheckValue<IkReal> x10025 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10025.valid){
continue;
}
IkReal x10023=((1.0)*(x10025.value));
IkReal x10024=x9565;
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x10023)));
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10023)));
IkReal gconst4=((1.0)*r21*x10024);
IkReal gconst5=((-1.0)*r20*x10024);
IkReal x10026=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10030=IKPowWithIntegerCheck(x10026,-1);
if(!x10030.valid){
continue;
}
IkReal x10027=x10030.value;
IkReal x10028=((1.0)*x10027);
IkReal x10029=((((-1.0)*x10028*(r11*r11)*(r21*r21)))+(((-1.0)*x10028*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x10027)));
j16eval[0]=x10029;
j16eval[1]=r12;
j16eval[2]=x10026;
j16eval[3]=IKsign(x10029);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  || IKabs(j16eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x10031=(gconst5*r10);
IkReal x10032=(gconst4*r11);
CheckValue<IkReal> x10033 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x10031))+x10032)),IKFAST_ATAN2_MAGTHRESH);
if(!x10033.valid){
continue;
}
CheckValue<IkReal> x10034=IKPowWithIntegerCheck(IKsign(((((2.0)*x10031*x10032))+(((-1.0)*(x10031*x10031)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10032*x10032))))),-1);
if(!x10034.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x10033.value)+(((1.5707963267949)*(x10034.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x10035=IKsin(j16);
IkReal x10036=IKcos(j16);
IkReal x10037=(gconst5*r20);
IkReal x10038=(gconst4*r11);
IkReal x10039=(gconst4*r21);
IkReal x10040=(gconst4*r01);
IkReal x10041=((1.0)*x10035);
IkReal x10042=((1.0)*x10036);
IkReal x10043=(gconst5*x10036);
IkReal x10044=(gconst5*x10035);
evalcond[0]=(((r10*x10044))+(((-1.0)*x10038*x10041))+((r12*x10036)));
evalcond[1]=(((x10036*x10037))+(((-1.0)*r22*x10041))+(((-1.0)*x10039*x10042)));
evalcond[2]=((((-1.0)*r02*x10041))+((r00*x10043))+(((-1.0)*x10040*x10042)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10041))+((r10*x10043))+(((-1.0)*x10038*x10042)));
evalcond[4]=(((cj14*sj13))+((r00*x10044))+((cj13*sj14))+((r02*x10036))+(((-1.0)*x10040*x10041)));
evalcond[5]=((((-1.0)*cj13*cj14))+((x10035*x10037))+((sj13*sj14))+(((-1.0)*x10039*x10041))+((r22*x10036)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x10045=((1.0)*gconst4);
CheckValue<IkReal> x10046 = IKatan2WithCheck(IkReal((((gconst5*r20))+(((-1.0)*r21*x10045)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x10046.valid){
continue;
}
CheckValue<IkReal> x10047=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x10045))+(((-1.0)*gconst5*r01)))),-1);
if(!x10047.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x10046.value)+(((1.5707963267949)*(x10047.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x10048=IKsin(j16);
IkReal x10049=IKcos(j16);
IkReal x10050=(gconst5*r20);
IkReal x10051=(gconst4*r11);
IkReal x10052=(gconst4*r21);
IkReal x10053=(gconst4*r01);
IkReal x10054=((1.0)*x10048);
IkReal x10055=((1.0)*x10049);
IkReal x10056=(gconst5*x10049);
IkReal x10057=(gconst5*x10048);
evalcond[0]=(((r10*x10057))+(((-1.0)*x10051*x10054))+((r12*x10049)));
evalcond[1]=((((-1.0)*r22*x10054))+((x10049*x10050))+(((-1.0)*x10052*x10055)));
evalcond[2]=(((r00*x10056))+(((-1.0)*x10053*x10055))+(((-1.0)*r02*x10054)));
evalcond[3]=((-1.0)+((r10*x10056))+(((-1.0)*x10051*x10055))+(((-1.0)*r12*x10054)));
evalcond[4]=(((cj14*sj13))+((r00*x10057))+(((-1.0)*x10053*x10054))+((cj13*sj14))+((r02*x10049)));
evalcond[5]=((((-1.0)*cj13*cj14))+((sj13*sj14))+(((-1.0)*x10052*x10054))+((x10048*x10050))+((r22*x10049)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x10058 = IKatan2WithCheck(IkReal(((((-1.0)*gconst4*r01))+((gconst5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10058.valid){
continue;
}
CheckValue<IkReal> x10059=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10059.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x10058.value)+(((1.5707963267949)*(x10059.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x10060=IKsin(j16);
IkReal x10061=IKcos(j16);
IkReal x10062=(gconst5*r20);
IkReal x10063=(gconst4*r11);
IkReal x10064=(gconst4*r21);
IkReal x10065=(gconst4*r01);
IkReal x10066=((1.0)*x10060);
IkReal x10067=((1.0)*x10061);
IkReal x10068=(gconst5*x10061);
IkReal x10069=(gconst5*x10060);
evalcond[0]=(((r10*x10069))+((r12*x10061))+(((-1.0)*x10063*x10066)));
evalcond[1]=((((-1.0)*x10064*x10067))+((x10061*x10062))+(((-1.0)*r22*x10066)));
evalcond[2]=(((r00*x10068))+(((-1.0)*r02*x10066))+(((-1.0)*x10065*x10067)));
evalcond[3]=((-1.0)+((r10*x10068))+(((-1.0)*r12*x10066))+(((-1.0)*x10063*x10067)));
evalcond[4]=(((cj14*sj13))+((r00*x10069))+((cj13*sj14))+((r02*x10061))+(((-1.0)*x10065*x10066)));
evalcond[5]=((((-1.0)*cj13*cj14))+((x10060*x10062))+(((-1.0)*x10064*x10066))+((r22*x10061))+((sj13*sj14)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j15))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[4];
CheckValue<IkReal> x10072 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10072.valid){
continue;
}
IkReal x10070=((1.0)*(x10072.value));
IkReal x10071=x9565;
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x10070)));
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj15=0;
cj15=1.0;
j15=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10070)));
IkReal gconst4=((1.0)*r21*x10071);
IkReal gconst5=((-1.0)*r20*x10071);
j16eval[0]=0;
j16eval[1]=r02;
j16eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j16eval[3]=0;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  || IKabs(j16eval[3]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x10075 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10075.valid){
continue;
}
IkReal x10073=((1.0)*(x10075.value));
IkReal x10074=x9565;
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x10073)));
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj15=0;
cj15=1.0;
j15=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10073)));
IkReal gconst4=((1.0)*r21*x10074);
IkReal gconst5=((-1.0)*r20*x10074);
j16eval[0]=1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[4];
CheckValue<IkReal> x10078 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10078.valid){
continue;
}
IkReal x10076=((1.0)*(x10078.value));
IkReal x10077=x9565;
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x10076)));
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj15=0;
cj15=1.0;
j15=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10076)));
IkReal gconst4=((1.0)*r21*x10077);
IkReal gconst5=((-1.0)*r20*x10077);
IkReal x10079=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10083=IKPowWithIntegerCheck(x10079,-1);
if(!x10083.valid){
continue;
}
IkReal x10080=x10083.value;
IkReal x10081=((1.0)*x10080);
IkReal x10082=((((-1.0)*x10081*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x10080))+(((-1.0)*x10081*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12))));
j16eval[0]=x10082;
j16eval[1]=r12;
j16eval[2]=x10079;
j16eval[3]=IKsign(x10082);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  || IKabs(j16eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x10084=(gconst5*r10);
IkReal x10085=(gconst4*r11);
CheckValue<IkReal> x10086 = IKatan2WithCheck(IkReal(r12),IkReal((x10085+(((-1.0)*x10084)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10086.valid){
continue;
}
CheckValue<IkReal> x10087=IKPowWithIntegerCheck(IKsign(((((2.0)*x10084*x10085))+(((-1.0)*(x10084*x10084)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10085*x10085))))),-1);
if(!x10087.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x10086.value)+(((1.5707963267949)*(x10087.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x10088=IKcos(j16);
IkReal x10089=IKsin(j16);
IkReal x10090=((1.0)*cj13);
IkReal x10091=(gconst5*r10);
IkReal x10092=(gconst5*r00);
IkReal x10093=(gconst5*r20);
IkReal x10094=(gconst4*x10089);
IkReal x10095=((1.0)*x10088);
IkReal x10096=((1.0)*x10089);
evalcond[0]=((((-1.0)*gconst4*r21*x10095))+((x10088*x10093))+(((-1.0)*r22*x10096)));
evalcond[1]=((((-1.0)*gconst4*r01*x10095))+(((-1.0)*r02*x10096))+((x10088*x10092)));
evalcond[2]=(((r11*x10094))+(((-1.0)*r12*x10095))+(((-1.0)*x10091*x10096)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10096))+(((-1.0)*gconst4*r11*x10095))+((x10088*x10091)));
evalcond[4]=((((-1.0)*x10092*x10096))+(((-1.0)*cj14*x10090))+(((-1.0)*r02*x10095))+((sj13*sj14))+((r01*x10094)));
evalcond[5]=((((-1.0)*x10093*x10096))+(((-1.0)*sj14*x10090))+((r21*x10094))+(((-1.0)*cj14*sj13))+(((-1.0)*r22*x10095)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x10097=((1.0)*gconst4);
CheckValue<IkReal> x10098=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x10097))+(((-1.0)*gconst5*r01)))),-1);
if(!x10098.valid){
continue;
}
CheckValue<IkReal> x10099 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x10097))+((gconst5*r20)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x10099.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10098.value)))+(x10099.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x10100=IKcos(j16);
IkReal x10101=IKsin(j16);
IkReal x10102=((1.0)*cj13);
IkReal x10103=(gconst5*r10);
IkReal x10104=(gconst5*r00);
IkReal x10105=(gconst5*r20);
IkReal x10106=(gconst4*x10101);
IkReal x10107=((1.0)*x10100);
IkReal x10108=((1.0)*x10101);
evalcond[0]=((((-1.0)*gconst4*r21*x10107))+(((-1.0)*r22*x10108))+((x10100*x10105)));
evalcond[1]=((((-1.0)*gconst4*r01*x10107))+(((-1.0)*r02*x10108))+((x10100*x10104)));
evalcond[2]=((((-1.0)*r12*x10107))+(((-1.0)*x10103*x10108))+((r11*x10106)));
evalcond[3]=((-1.0)+(((-1.0)*gconst4*r11*x10107))+(((-1.0)*r12*x10108))+((x10100*x10103)));
evalcond[4]=((((-1.0)*x10104*x10108))+((r01*x10106))+(((-1.0)*cj14*x10102))+(((-1.0)*r02*x10107))+((sj13*sj14)));
evalcond[5]=(((r21*x10106))+(((-1.0)*x10105*x10108))+(((-1.0)*sj14*x10102))+(((-1.0)*r22*x10107))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x10109 = IKatan2WithCheck(IkReal(((((-1.0)*gconst4*r01))+((gconst5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10109.valid){
continue;
}
CheckValue<IkReal> x10110=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10110.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x10109.value)+(((1.5707963267949)*(x10110.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x10111=IKcos(j16);
IkReal x10112=IKsin(j16);
IkReal x10113=((1.0)*cj13);
IkReal x10114=(gconst5*r10);
IkReal x10115=(gconst5*r00);
IkReal x10116=(gconst5*r20);
IkReal x10117=(gconst4*x10112);
IkReal x10118=((1.0)*x10111);
IkReal x10119=((1.0)*x10112);
evalcond[0]=((((-1.0)*gconst4*r21*x10118))+(((-1.0)*r22*x10119))+((x10111*x10116)));
evalcond[1]=((((-1.0)*gconst4*r01*x10118))+(((-1.0)*r02*x10119))+((x10111*x10115)));
evalcond[2]=((((-1.0)*r12*x10118))+((r11*x10117))+(((-1.0)*x10114*x10119)));
evalcond[3]=((-1.0)+(((-1.0)*gconst4*r11*x10118))+(((-1.0)*r12*x10119))+((x10111*x10114)));
evalcond[4]=(((r01*x10117))+(((-1.0)*cj14*x10113))+((sj13*sj14))+(((-1.0)*r02*x10118))+(((-1.0)*x10115*x10119)));
evalcond[5]=(((r21*x10117))+(((-1.0)*sj14*x10113))+(((-1.0)*r22*x10118))+(((-1.0)*cj14*sj13))+(((-1.0)*x10116*x10119)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[4];
CheckValue<IkReal> x10122 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10122.valid){
continue;
}
IkReal x10120=((1.0)*(x10122.value));
IkReal x10121=x9565;
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x10120)));
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10120)));
IkReal gconst4=((1.0)*r21*x10121);
IkReal gconst5=((-1.0)*r20*x10121);
j16eval[0]=0;
j16eval[1]=r02;
j16eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j16eval[3]=0;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  || IKabs(j16eval[3]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x10125 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10125.valid){
continue;
}
IkReal x10123=((1.0)*(x10125.value));
IkReal x10124=x9565;
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x10123)));
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10123)));
IkReal gconst4=((1.0)*r21*x10124);
IkReal gconst5=((-1.0)*r20*x10124);
j16eval[0]=1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[4];
CheckValue<IkReal> x10128 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10128.valid){
continue;
}
IkReal x10126=((1.0)*(x10128.value));
IkReal x10127=x9565;
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x10126)));
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10126)));
IkReal gconst4=((1.0)*r21*x10127);
IkReal gconst5=((-1.0)*r20*x10127);
IkReal x10129=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10133=IKPowWithIntegerCheck(x10129,-1);
if(!x10133.valid){
continue;
}
IkReal x10130=x10133.value;
IkReal x10131=((1.0)*x10130);
IkReal x10132=((((-1.0)*x10131*(r10*r10)*(r20*r20)))+(((-1.0)*x10131*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x10130)));
j16eval[0]=x10132;
j16eval[1]=r12;
j16eval[2]=x10129;
j16eval[3]=IKsign(x10132);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  || IKabs(j16eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x10134=(gconst5*r10);
IkReal x10135=(gconst4*r11);
CheckValue<IkReal> x10136 = IKatan2WithCheck(IkReal(r12),IkReal((x10135+(((-1.0)*x10134)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10136.valid){
continue;
}
CheckValue<IkReal> x10137=IKPowWithIntegerCheck(IKsign(((((2.0)*x10134*x10135))+(((-1.0)*(x10134*x10134)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10135*x10135))))),-1);
if(!x10137.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x10136.value)+(((1.5707963267949)*(x10137.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x10138=IKsin(j16);
IkReal x10139=IKcos(j16);
IkReal x10140=(gconst5*r20);
IkReal x10141=((1.0)*cj13);
IkReal x10142=(gconst4*r11);
IkReal x10143=(gconst4*r21);
IkReal x10144=(gconst4*r01);
IkReal x10145=((1.0)*x10138);
IkReal x10146=((1.0)*x10139);
IkReal x10147=(gconst5*x10139);
IkReal x10148=(gconst5*x10138);
evalcond[0]=(((r10*x10148))+(((-1.0)*x10142*x10145))+((r12*x10139)));
evalcond[1]=((((-1.0)*x10143*x10146))+((x10139*x10140))+(((-1.0)*r22*x10145)));
evalcond[2]=((((-1.0)*r02*x10145))+(((-1.0)*x10144*x10146))+((r00*x10147)));
evalcond[3]=((-1.0)+((r10*x10147))+(((-1.0)*x10142*x10146))+(((-1.0)*r12*x10145)));
evalcond[4]=((((-1.0)*cj14*x10141))+((r02*x10139))+(((-1.0)*x10144*x10145))+((sj13*sj14))+((r00*x10148)));
evalcond[5]=(((x10138*x10140))+(((-1.0)*x10143*x10145))+(((-1.0)*sj14*x10141))+((r22*x10139))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x10149=((1.0)*gconst4);
CheckValue<IkReal> x10150=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x10149))+(((-1.0)*gconst5*r01)))),-1);
if(!x10150.valid){
continue;
}
CheckValue<IkReal> x10151 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x10149))+((gconst5*r20)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x10151.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10150.value)))+(x10151.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x10152=IKsin(j16);
IkReal x10153=IKcos(j16);
IkReal x10154=(gconst5*r20);
IkReal x10155=((1.0)*cj13);
IkReal x10156=(gconst4*r11);
IkReal x10157=(gconst4*r21);
IkReal x10158=(gconst4*r01);
IkReal x10159=((1.0)*x10152);
IkReal x10160=((1.0)*x10153);
IkReal x10161=(gconst5*x10153);
IkReal x10162=(gconst5*x10152);
evalcond[0]=(((r12*x10153))+((r10*x10162))+(((-1.0)*x10156*x10159)));
evalcond[1]=(((x10153*x10154))+(((-1.0)*x10157*x10160))+(((-1.0)*r22*x10159)));
evalcond[2]=((((-1.0)*r02*x10159))+((r00*x10161))+(((-1.0)*x10158*x10160)));
evalcond[3]=((-1.0)+((r10*x10161))+(((-1.0)*x10156*x10160))+(((-1.0)*r12*x10159)));
evalcond[4]=((((-1.0)*cj14*x10155))+((r02*x10153))+((r00*x10162))+((sj13*sj14))+(((-1.0)*x10158*x10159)));
evalcond[5]=(((x10152*x10154))+(((-1.0)*sj14*x10155))+((r22*x10153))+(((-1.0)*cj14*sj13))+(((-1.0)*x10157*x10159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x10163 = IKatan2WithCheck(IkReal(((((-1.0)*gconst4*r01))+((gconst5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10163.valid){
continue;
}
CheckValue<IkReal> x10164=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10164.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x10163.value)+(((1.5707963267949)*(x10164.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x10165=IKsin(j16);
IkReal x10166=IKcos(j16);
IkReal x10167=(gconst5*r20);
IkReal x10168=((1.0)*cj13);
IkReal x10169=(gconst4*r11);
IkReal x10170=(gconst4*r21);
IkReal x10171=(gconst4*r01);
IkReal x10172=((1.0)*x10165);
IkReal x10173=((1.0)*x10166);
IkReal x10174=(gconst5*x10166);
IkReal x10175=(gconst5*x10165);
evalcond[0]=((((-1.0)*x10169*x10172))+((r10*x10175))+((r12*x10166)));
evalcond[1]=((((-1.0)*r22*x10172))+((x10166*x10167))+(((-1.0)*x10170*x10173)));
evalcond[2]=(((r00*x10174))+(((-1.0)*x10171*x10173))+(((-1.0)*r02*x10172)));
evalcond[3]=((-1.0)+(((-1.0)*x10169*x10173))+((r10*x10174))+(((-1.0)*r12*x10172)));
evalcond[4]=(((r00*x10175))+(((-1.0)*cj14*x10168))+((sj13*sj14))+((r02*x10166))+(((-1.0)*x10171*x10172)));
evalcond[5]=(((r22*x10166))+((x10165*x10167))+(((-1.0)*x10170*x10172))+(((-1.0)*sj14*x10168))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
j16array[0]=0;
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j16]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x10176=gconst5*gconst5;
IkReal x10177=gconst4*gconst4;
IkReal x10178=(cj15*r10);
IkReal x10179=(r11*sj15);
IkReal x10180=(r10*sj15);
IkReal x10181=(cj15*r11);
IkReal x10182=(r21*x10177);
IkReal x10183=(gconst4*gconst5*r20);
IkReal x10184=(r20*x10176);
IkReal x10185=((1.0)*gconst4*gconst5*r21);
CheckValue<IkReal> x10186 = IKatan2WithCheck(IkReal(((((-1.0)*x10179*x10185))+(((-1.0)*x10180*x10182))+((x10180*x10183))+((x10179*x10184)))),IkReal((((gconst4*r22*x10180))+((gconst5*r22*x10179)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10186.valid){
continue;
}
CheckValue<IkReal> x10187=IKPowWithIntegerCheck(IKsign((((x10178*x10184))+((x10181*x10182))+(((-1.0)*x10178*x10185))+((cj15*r12*r22))+(((-1.0)*x10181*x10183)))),-1);
if(!x10187.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x10186.value)+(((1.5707963267949)*(x10187.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x10188=IKcos(j16);
IkReal x10189=IKsin(j16);
IkReal x10190=(sj13*sj14);
IkReal x10191=(gconst4*sj15);
IkReal x10192=((1.0)*cj15);
IkReal x10193=(gconst5*r21);
IkReal x10194=((1.0)*cj13);
IkReal x10195=((1.0)*sj15);
IkReal x10196=(cj15*gconst4);
IkReal x10197=(cj14*sj13);
IkReal x10198=(gconst5*r11);
IkReal x10199=(gconst5*r01);
IkReal x10200=(cj14*x10194);
IkReal x10201=(r12*x10188);
IkReal x10202=(gconst5*x10189);
IkReal x10203=(r01*x10189);
IkReal x10204=((1.0)*x10189);
IkReal x10205=(r22*x10188);
IkReal x10206=(gconst5*x10188);
IkReal x10207=(r11*x10189);
IkReal x10208=(r02*x10188);
IkReal x10209=(r21*x10189);
IkReal x10210=((1.0)*gconst4*x10188);
evalcond[0]=((((-1.0)*r21*x10210))+(((-1.0)*r22*x10204))+((r20*x10206)));
evalcond[1]=((((-1.0)*r02*x10204))+(((-1.0)*r01*x10210))+((r00*x10206)));
evalcond[2]=((-1.0)+((r10*x10206))+(((-1.0)*r11*x10210))+(((-1.0)*r12*x10204)));
evalcond[3]=(((r10*x10191))+((sj15*x10198))+(((-1.0)*x10192*x10201))+((x10196*x10207))+(((-1.0)*r10*x10192*x10202)));
evalcond[4]=((((-1.0)*x10195*x10201))+((x10191*x10207))+(((-1.0)*r10*x10195*x10202))+(((-1.0)*gconst4*r10*x10192))+(((-1.0)*x10192*x10198)));
evalcond[5]=((((-1.0)*r00*x10192*x10202))+((sj15*x10199))+x10190+(((-1.0)*x10200))+(((-1.0)*x10192*x10208))+((r00*x10191))+((x10196*x10203)));
evalcond[6]=(((sj15*x10193))+(((-1.0)*r20*x10192*x10202))+(((-1.0)*x10197))+(((-1.0)*sj14*x10194))+(((-1.0)*x10192*x10205))+((x10196*x10209))+((r20*x10191)));
evalcond[7]=((((-1.0)*x10195*x10208))+(((-1.0)*r00*x10195*x10202))+((x10191*x10203))+x10197+((cj13*sj14))+(((-1.0)*gconst4*r00*x10192))+(((-1.0)*x10192*x10199)));
evalcond[8]=((((-1.0)*x10195*x10205))+((x10191*x10209))+x10190+(((-1.0)*x10200))+(((-1.0)*gconst4*r20*x10192))+(((-1.0)*x10192*x10193))+(((-1.0)*r20*x10195*x10202)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x10211=((1.0)*gconst4);
CheckValue<IkReal> x10212=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x10211))+(((-1.0)*gconst5*r01)))),-1);
if(!x10212.valid){
continue;
}
CheckValue<IkReal> x10213 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x10211))+((gconst5*r20)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x10213.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10212.value)))+(x10213.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x10214=IKcos(j16);
IkReal x10215=IKsin(j16);
IkReal x10216=(sj13*sj14);
IkReal x10217=(gconst4*sj15);
IkReal x10218=((1.0)*cj15);
IkReal x10219=(gconst5*r21);
IkReal x10220=((1.0)*cj13);
IkReal x10221=((1.0)*sj15);
IkReal x10222=(cj15*gconst4);
IkReal x10223=(cj14*sj13);
IkReal x10224=(gconst5*r11);
IkReal x10225=(gconst5*r01);
IkReal x10226=(cj14*x10220);
IkReal x10227=(r12*x10214);
IkReal x10228=(gconst5*x10215);
IkReal x10229=(r01*x10215);
IkReal x10230=((1.0)*x10215);
IkReal x10231=(r22*x10214);
IkReal x10232=(gconst5*x10214);
IkReal x10233=(r11*x10215);
IkReal x10234=(r02*x10214);
IkReal x10235=(r21*x10215);
IkReal x10236=((1.0)*gconst4*x10214);
evalcond[0]=((((-1.0)*r22*x10230))+((r20*x10232))+(((-1.0)*r21*x10236)));
evalcond[1]=((((-1.0)*r01*x10236))+((r00*x10232))+(((-1.0)*r02*x10230)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x10230))+(((-1.0)*r11*x10236))+((r10*x10232)));
evalcond[3]=(((x10222*x10233))+((r10*x10217))+((sj15*x10224))+(((-1.0)*r10*x10218*x10228))+(((-1.0)*x10218*x10227)));
evalcond[4]=((((-1.0)*r10*x10221*x10228))+(((-1.0)*gconst4*r10*x10218))+((x10217*x10233))+(((-1.0)*x10221*x10227))+(((-1.0)*x10218*x10224)));
evalcond[5]=((((-1.0)*x10218*x10234))+((sj15*x10225))+((r00*x10217))+(((-1.0)*x10226))+x10216+(((-1.0)*r00*x10218*x10228))+((x10222*x10229)));
evalcond[6]=((((-1.0)*x10218*x10231))+((x10222*x10235))+(((-1.0)*sj14*x10220))+((r20*x10217))+((sj15*x10219))+(((-1.0)*r20*x10218*x10228))+(((-1.0)*x10223)));
evalcond[7]=((((-1.0)*r00*x10221*x10228))+(((-1.0)*x10221*x10234))+((cj13*sj14))+(((-1.0)*gconst4*r00*x10218))+x10223+((x10217*x10229))+(((-1.0)*x10218*x10225)));
evalcond[8]=((((-1.0)*gconst4*r20*x10218))+(((-1.0)*x10221*x10231))+(((-1.0)*x10226))+(((-1.0)*x10218*x10219))+((x10217*x10235))+x10216+(((-1.0)*r20*x10221*x10228)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x10237 = IKatan2WithCheck(IkReal(((((-1.0)*gconst4*r01))+((gconst5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10237.valid){
continue;
}
CheckValue<IkReal> x10238=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10238.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x10237.value)+(((1.5707963267949)*(x10238.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x10239=IKcos(j16);
IkReal x10240=IKsin(j16);
IkReal x10241=(sj13*sj14);
IkReal x10242=(gconst4*sj15);
IkReal x10243=((1.0)*cj15);
IkReal x10244=(gconst5*r21);
IkReal x10245=((1.0)*cj13);
IkReal x10246=((1.0)*sj15);
IkReal x10247=(cj15*gconst4);
IkReal x10248=(cj14*sj13);
IkReal x10249=(gconst5*r11);
IkReal x10250=(gconst5*r01);
IkReal x10251=(cj14*x10245);
IkReal x10252=(r12*x10239);
IkReal x10253=(gconst5*x10240);
IkReal x10254=(r01*x10240);
IkReal x10255=((1.0)*x10240);
IkReal x10256=(r22*x10239);
IkReal x10257=(gconst5*x10239);
IkReal x10258=(r11*x10240);
IkReal x10259=(r02*x10239);
IkReal x10260=(r21*x10240);
IkReal x10261=((1.0)*gconst4*x10239);
evalcond[0]=((((-1.0)*r22*x10255))+(((-1.0)*r21*x10261))+((r20*x10257)));
evalcond[1]=((((-1.0)*r02*x10255))+(((-1.0)*r01*x10261))+((r00*x10257)));
evalcond[2]=((-1.0)+((r10*x10257))+(((-1.0)*r11*x10261))+(((-1.0)*r12*x10255)));
evalcond[3]=((((-1.0)*x10243*x10252))+((x10247*x10258))+(((-1.0)*r10*x10243*x10253))+((r10*x10242))+((sj15*x10249)));
evalcond[4]=(((x10242*x10258))+(((-1.0)*r10*x10246*x10253))+(((-1.0)*x10246*x10252))+(((-1.0)*gconst4*r10*x10243))+(((-1.0)*x10243*x10249)));
evalcond[5]=((((-1.0)*x10243*x10259))+((x10247*x10254))+((sj15*x10250))+(((-1.0)*r00*x10243*x10253))+(((-1.0)*x10251))+x10241+((r00*x10242)));
evalcond[6]=((((-1.0)*x10243*x10256))+(((-1.0)*sj14*x10245))+((sj15*x10244))+((x10247*x10260))+(((-1.0)*r20*x10243*x10253))+((r20*x10242))+(((-1.0)*x10248)));
evalcond[7]=(((x10242*x10254))+(((-1.0)*x10243*x10250))+(((-1.0)*r00*x10246*x10253))+((cj13*sj14))+(((-1.0)*x10246*x10259))+(((-1.0)*gconst4*r00*x10243))+x10248);
evalcond[8]=((((-1.0)*r20*x10246*x10253))+(((-1.0)*x10246*x10256))+(((-1.0)*x10251))+(((-1.0)*gconst4*r20*x10243))+x10241+((x10242*x10260))+(((-1.0)*x10243*x10244)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x10264 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10264.valid){
continue;
}
IkReal x10262=((1.0)*(x10264.value));
IkReal x10263=x9565;
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x10262)));
sj12=1.0;
cj12=0;
j12=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10262)));
IkReal gconst4=((1.0)*r21*x10263);
IkReal gconst5=((-1.0)*r20*x10263);
j16eval[0]=1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[4];
CheckValue<IkReal> x10267 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10267.valid){
continue;
}
IkReal x10265=((1.0)*(x10267.value));
IkReal x10266=x9565;
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x10265)));
sj12=1.0;
cj12=0;
j12=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10265)));
IkReal gconst4=((1.0)*r21*x10266);
IkReal gconst5=((-1.0)*r20*x10266);
j16eval[0]=0;
j16eval[1]=r12;
j16eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j16eval[3]=0;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  || IKabs(j16eval[3]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
CheckValue<IkReal> x10270 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10270.valid){
continue;
}
IkReal x10268=((1.0)*(x10270.value));
IkReal x10269=x9565;
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x10268)));
sj12=1.0;
cj12=0;
j12=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10268)));
IkReal gconst4=((1.0)*r21*x10269);
IkReal gconst5=((-1.0)*r20*x10269);
j16eval[0]=r12;
j16eval[1]=sj15;
j16eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x10273 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10273.valid){
continue;
}
IkReal x10271=((1.0)*(x10273.value));
IkReal x10272=x9565;
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x10271)));
sj12=1.0;
cj12=0;
j12=1.5707963267949;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10271)));
IkReal gconst4=((1.0)*r21*x10272);
IkReal gconst5=((-1.0)*r20*x10272);
j16eval[0]=1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[4];
CheckValue<IkReal> x10276 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10276.valid){
continue;
}
IkReal x10274=((1.0)*(x10276.value));
IkReal x10275=x9565;
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x10274)));
sj12=1.0;
cj12=0;
j12=1.5707963267949;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10274)));
IkReal gconst4=((1.0)*r21*x10275);
IkReal gconst5=((-1.0)*r20*x10275);
j16eval[0]=0;
j16eval[1]=r12;
j16eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j16eval[3]=0;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  || IKabs(j16eval[3]) < 0.0000010000000000  )
{
{
IkReal j16eval[4];
CheckValue<IkReal> x10279 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10279.valid){
continue;
}
IkReal x10277=((1.0)*(x10279.value));
IkReal x10278=x9565;
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x10277)));
sj12=1.0;
cj12=0;
j12=1.5707963267949;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10277)));
IkReal gconst4=((1.0)*r21*x10278);
IkReal gconst5=((-1.0)*r20*x10278);
IkReal x10280=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10284=IKPowWithIntegerCheck(x10280,-1);
if(!x10284.valid){
continue;
}
IkReal x10281=x10284.value;
IkReal x10282=((1.0)*x10281);
IkReal x10283=((((-1.0)*x10282*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x10281))+(((-1.0)*x10282*(r00*r00)*(r20*r20))));
j16eval[0]=x10283;
j16eval[1]=r02;
j16eval[2]=x10280;
j16eval[3]=IKsign(x10283);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  || IKabs(j16eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x10285=(gconst4*r01);
IkReal x10286=(gconst5*r00);
CheckValue<IkReal> x10287=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x10285*x10286))+(((-1.0)*(x10285*x10285)))+(((-1.0)*(x10286*x10286))))),-1);
if(!x10287.valid){
continue;
}
CheckValue<IkReal> x10288 = IKatan2WithCheck(IkReal(r02),IkReal((x10285+(((-1.0)*x10286)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10288.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10287.value)))+(x10288.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x10289=IKcos(j16);
IkReal x10290=IKsin(j16);
IkReal x10291=((1.0)*cj13);
IkReal x10292=(gconst5*r10);
IkReal x10293=(gconst5*r00);
IkReal x10294=(gconst5*r20);
IkReal x10295=(gconst4*x10290);
IkReal x10296=((1.0)*x10289);
IkReal x10297=((1.0)*x10290);
evalcond[0]=(((x10289*x10294))+(((-1.0)*gconst4*r21*x10296))+(((-1.0)*r22*x10297)));
evalcond[1]=(((x10289*x10292))+(((-1.0)*r12*x10297))+(((-1.0)*gconst4*r11*x10296)));
evalcond[2]=((((-1.0)*x10293*x10297))+(((-1.0)*r02*x10296))+((r01*x10295)));
evalcond[3]=((-1.0)+((x10289*x10293))+(((-1.0)*gconst4*r01*x10296))+(((-1.0)*r02*x10297)));
evalcond[4]=((((-1.0)*x10294*x10297))+(((-1.0)*cj14*x10291))+((sj13*sj14))+((r21*x10295))+(((-1.0)*r22*x10296)));
evalcond[5]=((((-1.0)*x10292*x10297))+((r11*x10295))+(((-1.0)*r12*x10296))+(((-1.0)*sj14*x10291))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x10298=((1.0)*gconst4);
CheckValue<IkReal> x10299 = IKatan2WithCheck(IkReal((((gconst5*r10))+(((-1.0)*r11*x10298)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10299.valid){
continue;
}
CheckValue<IkReal> x10300=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst5*r21))+(((-1.0)*r20*x10298)))),-1);
if(!x10300.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x10299.value)+(((1.5707963267949)*(x10300.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x10301=IKcos(j16);
IkReal x10302=IKsin(j16);
IkReal x10303=((1.0)*cj13);
IkReal x10304=(gconst5*r10);
IkReal x10305=(gconst5*r00);
IkReal x10306=(gconst5*r20);
IkReal x10307=(gconst4*x10302);
IkReal x10308=((1.0)*x10301);
IkReal x10309=((1.0)*x10302);
evalcond[0]=((((-1.0)*r22*x10309))+(((-1.0)*gconst4*r21*x10308))+((x10301*x10306)));
evalcond[1]=((((-1.0)*r12*x10309))+(((-1.0)*gconst4*r11*x10308))+((x10301*x10304)));
evalcond[2]=((((-1.0)*x10305*x10309))+(((-1.0)*r02*x10308))+((r01*x10307)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10309))+(((-1.0)*gconst4*r01*x10308))+((x10301*x10305)));
evalcond[4]=((((-1.0)*cj14*x10303))+(((-1.0)*r22*x10308))+((sj13*sj14))+((r21*x10307))+(((-1.0)*x10306*x10309)));
evalcond[5]=((((-1.0)*r12*x10308))+(((-1.0)*sj14*x10303))+(((-1.0)*x10304*x10309))+((r11*x10307))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x10310=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x10310.valid){
continue;
}
CheckValue<IkReal> x10311 = IKatan2WithCheck(IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x10311.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10310.value)))+(x10311.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x10312=IKcos(j16);
IkReal x10313=IKsin(j16);
IkReal x10314=((1.0)*cj13);
IkReal x10315=(gconst5*r10);
IkReal x10316=(gconst5*r00);
IkReal x10317=(gconst5*r20);
IkReal x10318=(gconst4*x10313);
IkReal x10319=((1.0)*x10312);
IkReal x10320=((1.0)*x10313);
evalcond[0]=((((-1.0)*r22*x10320))+(((-1.0)*gconst4*r21*x10319))+((x10312*x10317)));
evalcond[1]=((((-1.0)*r12*x10320))+((x10312*x10315))+(((-1.0)*gconst4*r11*x10319)));
evalcond[2]=(((r01*x10318))+(((-1.0)*r02*x10319))+(((-1.0)*x10316*x10320)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10320))+(((-1.0)*gconst4*r01*x10319))+((x10312*x10316)));
evalcond[4]=(((r21*x10318))+(((-1.0)*cj14*x10314))+((sj13*sj14))+(((-1.0)*r22*x10319))+(((-1.0)*x10317*x10320)));
evalcond[5]=(((r11*x10318))+(((-1.0)*x10315*x10320))+(((-1.0)*r12*x10319))+(((-1.0)*sj14*x10314))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x10323 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10323.valid){
continue;
}
IkReal x10321=((1.0)*(x10323.value));
IkReal x10322=x9565;
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x10321)));
sj12=1.0;
cj12=0;
j12=1.5707963267949;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10321)));
IkReal gconst4=((1.0)*r21*x10322);
IkReal gconst5=((-1.0)*r20*x10322);
j16eval[0]=1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[4];
CheckValue<IkReal> x10326 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10326.valid){
continue;
}
IkReal x10324=((1.0)*(x10326.value));
IkReal x10325=x9565;
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x10324)));
sj12=1.0;
cj12=0;
j12=1.5707963267949;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10324)));
IkReal gconst4=((1.0)*r21*x10325);
IkReal gconst5=((-1.0)*r20*x10325);
j16eval[0]=0;
j16eval[1]=r12;
j16eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j16eval[3]=0;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  || IKabs(j16eval[3]) < 0.0000010000000000  )
{
{
IkReal j16eval[4];
CheckValue<IkReal> x10329 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10329.valid){
continue;
}
IkReal x10327=((1.0)*(x10329.value));
IkReal x10328=x9565;
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x10327)));
sj12=1.0;
cj12=0;
j12=1.5707963267949;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10327)));
IkReal gconst4=((1.0)*r21*x10328);
IkReal gconst5=((-1.0)*r20*x10328);
IkReal x10330=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10334=IKPowWithIntegerCheck(x10330,-1);
if(!x10334.valid){
continue;
}
IkReal x10331=x10334.value;
IkReal x10332=((1.0)*x10331);
IkReal x10333=((((-1.0)*x10332*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-1.0)*x10332*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x10331)));
j16eval[0]=x10333;
j16eval[1]=r02;
j16eval[2]=x10330;
j16eval[3]=IKsign(x10333);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  || IKabs(j16eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x10335=(gconst4*r01);
IkReal x10336=(gconst5*r00);
CheckValue<IkReal> x10337 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x10336))+x10335)),IKFAST_ATAN2_MAGTHRESH);
if(!x10337.valid){
continue;
}
CheckValue<IkReal> x10338=IKPowWithIntegerCheck(IKsign(((((2.0)*x10335*x10336))+(((-1.0)*(x10336*x10336)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x10335*x10335))))),-1);
if(!x10338.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x10337.value)+(((1.5707963267949)*(x10338.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x10339=IKsin(j16);
IkReal x10340=IKcos(j16);
IkReal x10341=(gconst5*r20);
IkReal x10342=((1.0)*cj13);
IkReal x10343=(gconst4*r11);
IkReal x10344=(gconst4*r21);
IkReal x10345=(gconst4*r01);
IkReal x10346=((1.0)*x10339);
IkReal x10347=((1.0)*x10340);
IkReal x10348=(gconst5*x10340);
IkReal x10349=(gconst5*x10339);
evalcond[0]=(((r00*x10349))+(((-1.0)*x10345*x10346))+((r02*x10340)));
evalcond[1]=((((-1.0)*x10344*x10347))+((x10340*x10341))+(((-1.0)*r22*x10346)));
evalcond[2]=((((-1.0)*x10343*x10347))+(((-1.0)*r12*x10346))+((r10*x10348)));
evalcond[3]=((-1.0)+((r00*x10348))+(((-1.0)*r02*x10346))+(((-1.0)*x10345*x10347)));
evalcond[4]=(((r22*x10340))+(((-1.0)*x10344*x10346))+((sj13*sj14))+((x10339*x10341))+(((-1.0)*cj14*x10342)));
evalcond[5]=((((-1.0)*x10343*x10346))+(((-1.0)*sj14*x10342))+((r12*x10340))+((r10*x10349))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x10350=((1.0)*gconst4);
CheckValue<IkReal> x10351 = IKatan2WithCheck(IkReal((((gconst5*r10))+(((-1.0)*r11*x10350)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10351.valid){
continue;
}
CheckValue<IkReal> x10352=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst5*r21))+(((-1.0)*r20*x10350)))),-1);
if(!x10352.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x10351.value)+(((1.5707963267949)*(x10352.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x10353=IKsin(j16);
IkReal x10354=IKcos(j16);
IkReal x10355=(gconst5*r20);
IkReal x10356=((1.0)*cj13);
IkReal x10357=(gconst4*r11);
IkReal x10358=(gconst4*r21);
IkReal x10359=(gconst4*r01);
IkReal x10360=((1.0)*x10353);
IkReal x10361=((1.0)*x10354);
IkReal x10362=(gconst5*x10354);
IkReal x10363=(gconst5*x10353);
evalcond[0]=((((-1.0)*x10359*x10360))+((r00*x10363))+((r02*x10354)));
evalcond[1]=(((x10354*x10355))+(((-1.0)*x10358*x10361))+(((-1.0)*r22*x10360)));
evalcond[2]=((((-1.0)*x10357*x10361))+((r10*x10362))+(((-1.0)*r12*x10360)));
evalcond[3]=((-1.0)+(((-1.0)*x10359*x10361))+((r00*x10362))+(((-1.0)*r02*x10360)));
evalcond[4]=((((-1.0)*x10358*x10360))+((x10353*x10355))+((r22*x10354))+((sj13*sj14))+(((-1.0)*cj14*x10356)));
evalcond[5]=((((-1.0)*x10357*x10360))+((r10*x10363))+(((-1.0)*sj14*x10356))+(((-1.0)*cj14*sj13))+((r12*x10354)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x10364=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x10364.valid){
continue;
}
CheckValue<IkReal> x10365 = IKatan2WithCheck(IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x10365.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10364.value)))+(x10365.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x10366=IKsin(j16);
IkReal x10367=IKcos(j16);
IkReal x10368=(gconst5*r20);
IkReal x10369=((1.0)*cj13);
IkReal x10370=(gconst4*r11);
IkReal x10371=(gconst4*r21);
IkReal x10372=(gconst4*r01);
IkReal x10373=((1.0)*x10366);
IkReal x10374=((1.0)*x10367);
IkReal x10375=(gconst5*x10367);
IkReal x10376=(gconst5*x10366);
evalcond[0]=(((r00*x10376))+((r02*x10367))+(((-1.0)*x10372*x10373)));
evalcond[1]=(((x10367*x10368))+(((-1.0)*x10371*x10374))+(((-1.0)*r22*x10373)));
evalcond[2]=(((r10*x10375))+(((-1.0)*r12*x10373))+(((-1.0)*x10370*x10374)));
evalcond[3]=((-1.0)+((r00*x10375))+(((-1.0)*r02*x10373))+(((-1.0)*x10372*x10374)));
evalcond[4]=(((r22*x10367))+((x10366*x10368))+(((-1.0)*cj14*x10369))+((sj13*sj14))+(((-1.0)*x10371*x10373)));
evalcond[5]=(((r10*x10376))+(((-1.0)*sj14*x10369))+(((-1.0)*cj14*sj13))+(((-1.0)*x10370*x10373))+((r12*x10367)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j15))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x10379 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10379.valid){
continue;
}
IkReal x10377=((1.0)*(x10379.value));
IkReal x10378=x9565;
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x10377)));
sj12=1.0;
cj12=0;
j12=1.5707963267949;
sj15=0;
cj15=1.0;
j15=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10377)));
IkReal gconst4=((1.0)*r21*x10378);
IkReal gconst5=((-1.0)*r20*x10378);
j16eval[0]=1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[4];
CheckValue<IkReal> x10382 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10382.valid){
continue;
}
IkReal x10380=((1.0)*(x10382.value));
IkReal x10381=x9565;
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x10380)));
sj12=1.0;
cj12=0;
j12=1.5707963267949;
sj15=0;
cj15=1.0;
j15=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10380)));
IkReal gconst4=((1.0)*r21*x10381);
IkReal gconst5=((-1.0)*r20*x10381);
j16eval[0]=0;
j16eval[1]=r12;
j16eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j16eval[3]=0;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  || IKabs(j16eval[3]) < 0.0000010000000000  )
{
{
IkReal j16eval[4];
CheckValue<IkReal> x10385 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10385.valid){
continue;
}
IkReal x10383=((1.0)*(x10385.value));
IkReal x10384=x9565;
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x10383)));
sj12=1.0;
cj12=0;
j12=1.5707963267949;
sj15=0;
cj15=1.0;
j15=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10383)));
IkReal gconst4=((1.0)*r21*x10384);
IkReal gconst5=((-1.0)*r20*x10384);
IkReal x10386=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10390=IKPowWithIntegerCheck(x10386,-1);
if(!x10390.valid){
continue;
}
IkReal x10387=x10390.value;
IkReal x10388=((1.0)*x10387);
IkReal x10389=((((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x10387))+(((-1.0)*x10388*(r00*r00)*(r20*r20)))+(((-1.0)*x10388*(r01*r01)*(r21*r21))));
j16eval[0]=x10389;
j16eval[1]=r02;
j16eval[2]=x10386;
j16eval[3]=IKsign(x10389);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  || IKabs(j16eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x10391=(gconst4*r01);
IkReal x10392=(gconst5*r00);
CheckValue<IkReal> x10393=IKPowWithIntegerCheck(IKsign(((((2.0)*x10391*x10392))+(((-1.0)*(r02*r02)))+(((-1.0)*(x10392*x10392)))+(((-1.0)*(x10391*x10391))))),-1);
if(!x10393.valid){
continue;
}
CheckValue<IkReal> x10394 = IKatan2WithCheck(IkReal(r02),IkReal((x10391+(((-1.0)*x10392)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10394.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10393.value)))+(x10394.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x10395=IKcos(j16);
IkReal x10396=IKsin(j16);
IkReal x10397=(gconst5*r10);
IkReal x10398=((1.0)*sj14);
IkReal x10399=(gconst5*r00);
IkReal x10400=(gconst5*r20);
IkReal x10401=(gconst4*x10396);
IkReal x10402=((1.0)*x10395);
IkReal x10403=((1.0)*x10396);
evalcond[0]=((((-1.0)*r22*x10403))+(((-1.0)*gconst4*r21*x10402))+((x10395*x10400)));
evalcond[1]=(((x10395*x10397))+(((-1.0)*r12*x10403))+(((-1.0)*gconst4*r11*x10402)));
evalcond[2]=(((r01*x10401))+(((-1.0)*x10399*x10403))+(((-1.0)*r02*x10402)));
evalcond[3]=((-1.0)+((x10395*x10399))+(((-1.0)*gconst4*r01*x10402))+(((-1.0)*r02*x10403)));
evalcond[4]=((((-1.0)*x10397*x10403))+(((-1.0)*r12*x10402))+((r11*x10401))+(((-1.0)*sj13*x10398))+((cj13*cj14)));
evalcond[5]=(((r21*x10401))+(((-1.0)*cj13*x10398))+(((-1.0)*r22*x10402))+(((-1.0)*cj14*sj13))+(((-1.0)*x10400*x10403)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x10404=((1.0)*gconst4);
CheckValue<IkReal> x10405=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x10404))+(((-1.0)*gconst5*r21)))),-1);
if(!x10405.valid){
continue;
}
CheckValue<IkReal> x10406 = IKatan2WithCheck(IkReal((((gconst5*r10))+(((-1.0)*r11*x10404)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10406.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10405.value)))+(x10406.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x10407=IKcos(j16);
IkReal x10408=IKsin(j16);
IkReal x10409=(gconst5*r10);
IkReal x10410=((1.0)*sj14);
IkReal x10411=(gconst5*r00);
IkReal x10412=(gconst5*r20);
IkReal x10413=(gconst4*x10408);
IkReal x10414=((1.0)*x10407);
IkReal x10415=((1.0)*x10408);
evalcond[0]=(((x10407*x10412))+(((-1.0)*gconst4*r21*x10414))+(((-1.0)*r22*x10415)));
evalcond[1]=(((x10407*x10409))+(((-1.0)*r12*x10415))+(((-1.0)*gconst4*r11*x10414)));
evalcond[2]=((((-1.0)*r02*x10414))+((r01*x10413))+(((-1.0)*x10411*x10415)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10415))+((x10407*x10411))+(((-1.0)*gconst4*r01*x10414)));
evalcond[4]=((((-1.0)*sj13*x10410))+(((-1.0)*x10409*x10415))+(((-1.0)*r12*x10414))+((r11*x10413))+((cj13*cj14)));
evalcond[5]=(((r21*x10413))+(((-1.0)*x10412*x10415))+(((-1.0)*cj13*x10410))+(((-1.0)*r22*x10414))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x10416=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x10416.valid){
continue;
}
CheckValue<IkReal> x10417 = IKatan2WithCheck(IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x10417.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10416.value)))+(x10417.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x10418=IKcos(j16);
IkReal x10419=IKsin(j16);
IkReal x10420=(gconst5*r10);
IkReal x10421=((1.0)*sj14);
IkReal x10422=(gconst5*r00);
IkReal x10423=(gconst5*r20);
IkReal x10424=(gconst4*x10419);
IkReal x10425=((1.0)*x10418);
IkReal x10426=((1.0)*x10419);
evalcond[0]=((((-1.0)*gconst4*r21*x10425))+(((-1.0)*r22*x10426))+((x10418*x10423)));
evalcond[1]=((((-1.0)*gconst4*r11*x10425))+(((-1.0)*r12*x10426))+((x10418*x10420)));
evalcond[2]=(((r01*x10424))+(((-1.0)*x10422*x10426))+(((-1.0)*r02*x10425)));
evalcond[3]=((-1.0)+(((-1.0)*gconst4*r01*x10425))+(((-1.0)*r02*x10426))+((x10418*x10422)));
evalcond[4]=((((-1.0)*sj13*x10421))+(((-1.0)*x10420*x10426))+(((-1.0)*r12*x10425))+((r11*x10424))+((cj13*cj14)));
evalcond[5]=((((-1.0)*x10423*x10426))+(((-1.0)*cj13*x10421))+(((-1.0)*r22*x10425))+(((-1.0)*cj14*sj13))+((r21*x10424)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x10429 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10429.valid){
continue;
}
IkReal x10427=((1.0)*(x10429.value));
IkReal x10428=x9565;
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x10427)));
sj12=1.0;
cj12=0;
j12=1.5707963267949;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10427)));
IkReal gconst4=((1.0)*r21*x10428);
IkReal gconst5=((-1.0)*r20*x10428);
j16eval[0]=1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[4];
CheckValue<IkReal> x10432 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10432.valid){
continue;
}
IkReal x10430=((1.0)*(x10432.value));
IkReal x10431=x9565;
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x10430)));
sj12=1.0;
cj12=0;
j12=1.5707963267949;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10430)));
IkReal gconst4=((1.0)*r21*x10431);
IkReal gconst5=((-1.0)*r20*x10431);
j16eval[0]=0;
j16eval[1]=r12;
j16eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j16eval[3]=0;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  || IKabs(j16eval[3]) < 0.0000010000000000  )
{
{
IkReal j16eval[4];
CheckValue<IkReal> x10435 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10435.valid){
continue;
}
IkReal x10433=((1.0)*(x10435.value));
IkReal x10434=x9565;
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x10433)));
sj12=1.0;
cj12=0;
j12=1.5707963267949;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10433)));
IkReal gconst4=((1.0)*r21*x10434);
IkReal gconst5=((-1.0)*r20*x10434);
IkReal x10436=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10440=IKPowWithIntegerCheck(x10436,-1);
if(!x10440.valid){
continue;
}
IkReal x10437=x10440.value;
IkReal x10438=((1.0)*x10437);
IkReal x10439=((((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x10437))+(((-1.0)*x10438*(r01*r01)*(r21*r21)))+(((-1.0)*x10438*(r00*r00)*(r20*r20))));
j16eval[0]=x10439;
j16eval[1]=r02;
j16eval[2]=x10436;
j16eval[3]=IKsign(x10439);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  || IKabs(j16eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x10441=(gconst4*r01);
IkReal x10442=(gconst5*r00);
CheckValue<IkReal> x10443 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x10442))+x10441)),IKFAST_ATAN2_MAGTHRESH);
if(!x10443.valid){
continue;
}
CheckValue<IkReal> x10444=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10441*x10441)))+(((-1.0)*(r02*r02)))+(((2.0)*x10441*x10442))+(((-1.0)*(x10442*x10442))))),-1);
if(!x10444.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x10443.value)+(((1.5707963267949)*(x10444.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x10445=IKsin(j16);
IkReal x10446=IKcos(j16);
IkReal x10447=(gconst5*r20);
IkReal x10448=(gconst4*r11);
IkReal x10449=(gconst4*r21);
IkReal x10450=((1.0)*sj14);
IkReal x10451=(gconst4*r01);
IkReal x10452=((1.0)*x10445);
IkReal x10453=((1.0)*x10446);
IkReal x10454=(gconst5*x10446);
IkReal x10455=(gconst5*x10445);
evalcond[0]=(((r00*x10455))+((r02*x10446))+(((-1.0)*x10451*x10452)));
evalcond[1]=((((-1.0)*x10449*x10453))+((x10446*x10447))+(((-1.0)*r22*x10452)));
evalcond[2]=(((r10*x10454))+(((-1.0)*x10448*x10453))+(((-1.0)*r12*x10452)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10452))+((r00*x10454))+(((-1.0)*x10451*x10453)));
evalcond[4]=(((r10*x10455))+((r12*x10446))+(((-1.0)*x10448*x10452))+(((-1.0)*sj13*x10450))+((cj13*cj14)));
evalcond[5]=(((x10445*x10447))+((r22*x10446))+(((-1.0)*x10449*x10452))+(((-1.0)*cj13*x10450))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x10456=((1.0)*gconst4);
CheckValue<IkReal> x10457 = IKatan2WithCheck(IkReal((((gconst5*r10))+(((-1.0)*r11*x10456)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10457.valid){
continue;
}
CheckValue<IkReal> x10458=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst5*r21))+(((-1.0)*r20*x10456)))),-1);
if(!x10458.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x10457.value)+(((1.5707963267949)*(x10458.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x10459=IKsin(j16);
IkReal x10460=IKcos(j16);
IkReal x10461=(gconst5*r20);
IkReal x10462=(gconst4*r11);
IkReal x10463=(gconst4*r21);
IkReal x10464=((1.0)*sj14);
IkReal x10465=(gconst4*r01);
IkReal x10466=((1.0)*x10459);
IkReal x10467=((1.0)*x10460);
IkReal x10468=(gconst5*x10460);
IkReal x10469=(gconst5*x10459);
evalcond[0]=((((-1.0)*x10465*x10466))+((r00*x10469))+((r02*x10460)));
evalcond[1]=(((x10460*x10461))+(((-1.0)*r22*x10466))+(((-1.0)*x10463*x10467)));
evalcond[2]=((((-1.0)*x10462*x10467))+((r10*x10468))+(((-1.0)*r12*x10466)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10466))+(((-1.0)*x10465*x10467))+((r00*x10468)));
evalcond[4]=(((r12*x10460))+(((-1.0)*x10462*x10466))+(((-1.0)*sj13*x10464))+((cj13*cj14))+((r10*x10469)));
evalcond[5]=(((x10459*x10461))+(((-1.0)*x10463*x10466))+((r22*x10460))+(((-1.0)*cj13*x10464))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x10470=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x10470.valid){
continue;
}
CheckValue<IkReal> x10471 = IKatan2WithCheck(IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x10471.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10470.value)))+(x10471.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x10472=IKsin(j16);
IkReal x10473=IKcos(j16);
IkReal x10474=(gconst5*r20);
IkReal x10475=(gconst4*r11);
IkReal x10476=(gconst4*r21);
IkReal x10477=((1.0)*sj14);
IkReal x10478=(gconst4*r01);
IkReal x10479=((1.0)*x10472);
IkReal x10480=((1.0)*x10473);
IkReal x10481=(gconst5*x10473);
IkReal x10482=(gconst5*x10472);
evalcond[0]=(((r00*x10482))+((r02*x10473))+(((-1.0)*x10478*x10479)));
evalcond[1]=((((-1.0)*x10476*x10480))+((x10473*x10474))+(((-1.0)*r22*x10479)));
evalcond[2]=(((r10*x10481))+(((-1.0)*x10475*x10480))+(((-1.0)*r12*x10479)));
evalcond[3]=((-1.0)+((r00*x10481))+(((-1.0)*r02*x10479))+(((-1.0)*x10478*x10480)));
evalcond[4]=(((r10*x10482))+((r12*x10473))+(((-1.0)*sj13*x10477))+(((-1.0)*x10475*x10479))+((cj13*cj14)));
evalcond[5]=((((-1.0)*x10476*x10479))+((r22*x10473))+((x10472*x10474))+(((-1.0)*cj13*x10477))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[2];
CheckValue<IkReal> x10485 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10485.valid){
continue;
}
IkReal x10483=((1.0)*(x10485.value));
IkReal x10484=((-1.0)*r20);
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x10483)));
sj12=1.0;
cj12=0;
j12=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x10484);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10483)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x10484;
IkReal x10486=((1.0)*r01*r21);
IkReal x10487=((1.0)*r00*r20);
j16eval[0]=(((sj15*x10486))+((sj15*x10487)));
j16eval[1]=((((-1.0)*x10487))+(((-1.0)*x10486)));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
CheckValue<IkReal> x10490 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10490.valid){
continue;
}
IkReal x10488=((1.0)*(x10490.value));
IkReal x10489=((-1.0)*r20);
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x10488)));
sj12=1.0;
cj12=0;
j12=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x10489);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10488)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x10489;
IkReal x10491=((1.0)*r01*r21);
IkReal x10492=((1.0)*r00*r20);
j16eval[0]=(((cj15*x10491))+((cj15*x10492)));
j16eval[1]=((((-1.0)*x10492))+(((-1.0)*x10491)));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
CheckValue<IkReal> x10495 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10495.valid){
continue;
}
IkReal x10493=((1.0)*(x10495.value));
IkReal x10494=((-1.0)*r20);
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x10493)));
sj12=1.0;
cj12=0;
j12=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x10494);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10493)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x10494;
IkReal x10496=((1.0)*cj15);
j16eval[0]=(((r00*r20*x10496))+((r01*r21*x10496)));
j16eval[1]=cj15;
j16eval[2]=r12;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x10497=((1.0)*gconst5);
CheckValue<IkReal> x10498=IKPowWithIntegerCheck(((((-1.0)*cj15*r00*x10497))+((cj15*gconst4*r01))),-1);
if(!x10498.valid){
continue;
}
CheckValue<IkReal> x10499=IKPowWithIntegerCheck(cj15,-1);
if(!x10499.valid){
continue;
}
CheckValue<IkReal> x10500=IKPowWithIntegerCheck(r12,-1);
if(!x10500.valid){
continue;
}
if( IKabs(((x10498.value)*(((((-1.0)*r01*sj15*x10497))+(((-1.0)*gconst4*r00*sj15)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10499.value)*(x10500.value)*(((((-1.0)*sj13*sj14))+((cj13*cj14)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10498.value)*(((((-1.0)*r01*sj15*x10497))+(((-1.0)*gconst4*r00*sj15))))))+IKsqr(((x10499.value)*(x10500.value)*(((((-1.0)*sj13*sj14))+((cj13*cj14))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x10498.value)*(((((-1.0)*r01*sj15*x10497))+(((-1.0)*gconst4*r00*sj15))))), ((x10499.value)*(x10500.value)*(((((-1.0)*sj13*sj14))+((cj13*cj14))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x10501=IKcos(j16);
IkReal x10502=IKsin(j16);
IkReal x10503=((1.0)*cj15);
IkReal x10504=(gconst5*r21);
IkReal x10505=(cj13*cj14);
IkReal x10506=((1.0)*sj15);
IkReal x10507=(gconst4*sj15);
IkReal x10508=(cj15*gconst4);
IkReal x10509=((1.0)*sj14);
IkReal x10510=(gconst5*r01);
IkReal x10511=((1.0)*cj14*sj13);
IkReal x10512=(cj13*x10509);
IkReal x10513=(r12*x10501);
IkReal x10514=(r01*x10502);
IkReal x10515=(gconst5*x10502);
IkReal x10516=(gconst5*x10501);
IkReal x10517=(r21*x10502);
IkReal x10518=((1.0)*gconst4*x10501);
IkReal x10519=(x10511+x10512);
evalcond[0]=((-1.0)*r12*x10502);
evalcond[1]=((((-1.0)*r21*x10518))+((r20*x10516)));
evalcond[2]=((-1.0)+((r00*x10516))+(((-1.0)*r01*x10518)));
evalcond[3]=((((-1.0)*x10503*x10513))+x10505+(((-1.0)*sj13*x10509)));
evalcond[4]=((((-1.0)*x10519))+(((-1.0)*x10506*x10513)));
evalcond[5]=(((r00*x10507))+(((-1.0)*r00*x10503*x10515))+((sj15*x10510))+((x10508*x10514)));
evalcond[6]=((((-1.0)*gconst4*r00*x10503))+(((-1.0)*x10503*x10510))+((x10507*x10514))+(((-1.0)*r00*x10506*x10515)));
evalcond[7]=(((r20*x10507))+((sj15*x10504))+(((-1.0)*x10519))+(((-1.0)*r20*x10503*x10515))+((x10508*x10517)));
evalcond[8]=((((-1.0)*r20*x10506*x10515))+(((-1.0)*x10503*x10504))+((x10507*x10517))+(((-1.0)*gconst4*r20*x10503))+((sj13*sj14))+(((-1.0)*x10505)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x10520=((1.0)*gconst5);
IkReal x10521=(gconst4*r01);
CheckValue<IkReal> x10522=IKPowWithIntegerCheck((((cj15*x10521))+(((-1.0)*cj15*r00*x10520))),-1);
if(!x10522.valid){
continue;
}
CheckValue<IkReal> x10523=IKPowWithIntegerCheck((((gconst5*r00))+(((-1.0)*x10521))),-1);
if(!x10523.valid){
continue;
}
if( IKabs(((x10522.value)*(((((-1.0)*gconst4*r00*sj15))+(((-1.0)*r01*sj15*x10520)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x10523.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10522.value)*(((((-1.0)*gconst4*r00*sj15))+(((-1.0)*r01*sj15*x10520))))))+IKsqr(x10523.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x10522.value)*(((((-1.0)*gconst4*r00*sj15))+(((-1.0)*r01*sj15*x10520))))), x10523.value);
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x10524=IKcos(j16);
IkReal x10525=IKsin(j16);
IkReal x10526=((1.0)*cj15);
IkReal x10527=(gconst5*r21);
IkReal x10528=(cj13*cj14);
IkReal x10529=((1.0)*sj15);
IkReal x10530=(gconst4*sj15);
IkReal x10531=(cj15*gconst4);
IkReal x10532=((1.0)*sj14);
IkReal x10533=(gconst5*r01);
IkReal x10534=((1.0)*cj14*sj13);
IkReal x10535=(cj13*x10532);
IkReal x10536=(r12*x10524);
IkReal x10537=(r01*x10525);
IkReal x10538=(gconst5*x10525);
IkReal x10539=(gconst5*x10524);
IkReal x10540=(r21*x10525);
IkReal x10541=((1.0)*gconst4*x10524);
IkReal x10542=(x10534+x10535);
evalcond[0]=((-1.0)*r12*x10525);
evalcond[1]=(((r20*x10539))+(((-1.0)*r21*x10541)));
evalcond[2]=((-1.0)+(((-1.0)*r01*x10541))+((r00*x10539)));
evalcond[3]=((((-1.0)*sj13*x10532))+x10528+(((-1.0)*x10526*x10536)));
evalcond[4]=((((-1.0)*x10529*x10536))+(((-1.0)*x10542)));
evalcond[5]=(((x10531*x10537))+((r00*x10530))+((sj15*x10533))+(((-1.0)*r00*x10526*x10538)));
evalcond[6]=(((x10530*x10537))+(((-1.0)*gconst4*r00*x10526))+(((-1.0)*r00*x10529*x10538))+(((-1.0)*x10526*x10533)));
evalcond[7]=((((-1.0)*x10542))+((x10531*x10540))+(((-1.0)*r20*x10526*x10538))+((r20*x10530))+((sj15*x10527)));
evalcond[8]=((((-1.0)*x10526*x10527))+(((-1.0)*gconst4*r20*x10526))+(((-1.0)*r20*x10529*x10538))+(((-1.0)*x10528))+((x10530*x10540))+((sj13*sj14)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x10543=(gconst5*r00);
IkReal x10544=(gconst4*r01);
CheckValue<IkReal> x10545=IKPowWithIntegerCheck((((sj15*x10544))+(((-1.0)*sj15*x10543))),-1);
if(!x10545.valid){
continue;
}
CheckValue<IkReal> x10546=IKPowWithIntegerCheck(((((-1.0)*x10544))+x10543),-1);
if(!x10546.valid){
continue;
}
if( IKabs(((x10545.value)*((((cj15*gconst4*r00))+((cj15*gconst5*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x10546.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10545.value)*((((cj15*gconst4*r00))+((cj15*gconst5*r01))))))+IKsqr(x10546.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x10545.value)*((((cj15*gconst4*r00))+((cj15*gconst5*r01))))), x10546.value);
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x10547=IKcos(j16);
IkReal x10548=IKsin(j16);
IkReal x10549=((1.0)*cj15);
IkReal x10550=(gconst5*r21);
IkReal x10551=(cj13*cj14);
IkReal x10552=((1.0)*sj15);
IkReal x10553=(gconst4*sj15);
IkReal x10554=(cj15*gconst4);
IkReal x10555=((1.0)*sj14);
IkReal x10556=(gconst5*r01);
IkReal x10557=((1.0)*cj14*sj13);
IkReal x10558=(cj13*x10555);
IkReal x10559=(r12*x10547);
IkReal x10560=(r01*x10548);
IkReal x10561=(gconst5*x10548);
IkReal x10562=(gconst5*x10547);
IkReal x10563=(r21*x10548);
IkReal x10564=((1.0)*gconst4*x10547);
IkReal x10565=(x10557+x10558);
evalcond[0]=((-1.0)*r12*x10548);
evalcond[1]=(((r20*x10562))+(((-1.0)*r21*x10564)));
evalcond[2]=((-1.0)+((r00*x10562))+(((-1.0)*r01*x10564)));
evalcond[3]=((((-1.0)*sj13*x10555))+x10551+(((-1.0)*x10549*x10559)));
evalcond[4]=((((-1.0)*x10565))+(((-1.0)*x10552*x10559)));
evalcond[5]=(((x10554*x10560))+(((-1.0)*r00*x10549*x10561))+((sj15*x10556))+((r00*x10553)));
evalcond[6]=(((x10553*x10560))+(((-1.0)*r00*x10552*x10561))+(((-1.0)*gconst4*r00*x10549))+(((-1.0)*x10549*x10556)));
evalcond[7]=(((x10554*x10563))+(((-1.0)*r20*x10549*x10561))+(((-1.0)*x10565))+((r20*x10553))+((sj15*x10550)));
evalcond[8]=((((-1.0)*gconst4*r20*x10549))+((x10553*x10563))+((sj13*sj14))+(((-1.0)*x10551))+(((-1.0)*x10549*x10550))+(((-1.0)*r20*x10552*x10561)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j16]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x10566=gconst4*gconst4;
IkReal x10567=gconst5*gconst5;
IkReal x10568=(cj15*r20);
IkReal x10569=(r00*sj15);
IkReal x10570=(r01*sj15);
IkReal x10571=(gconst4*gconst5);
IkReal x10572=(r21*x10566);
IkReal x10573=((1.0)*r01*x10571);
CheckValue<IkReal> x10574=IKPowWithIntegerCheck(IKsign((((r00*x10567*x10568))+(((-1.0)*x10568*x10573))+((cj15*r01*x10572))+(((-1.0)*cj15*r00*r21*x10571))+((cj15*r02*r22)))),-1);
if(!x10574.valid){
continue;
}
CheckValue<IkReal> x10575 = IKatan2WithCheck(IkReal((((r20*x10567*x10570))+(((-1.0)*r21*x10570*x10571))+(((-1.0)*x10569*x10572))+((r20*x10569*x10571)))),IkReal((((gconst5*r22*x10570))+((gconst4*r22*x10569)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10575.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10574.value)))+(x10575.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x10576=IKcos(j16);
IkReal x10577=IKsin(j16);
IkReal x10578=(gconst4*sj15);
IkReal x10579=((1.0)*cj15);
IkReal x10580=(gconst5*r21);
IkReal x10581=((1.0)*sj15);
IkReal x10582=(cj15*gconst4);
IkReal x10583=(cj13*cj14);
IkReal x10584=(gconst5*r11);
IkReal x10585=((1.0)*sj14);
IkReal x10586=(gconst5*r01);
IkReal x10587=((1.0)*cj14*sj13);
IkReal x10588=(cj13*x10585);
IkReal x10589=(r12*x10576);
IkReal x10590=(r02*x10576);
IkReal x10591=(gconst5*x10577);
IkReal x10592=(r01*x10577);
IkReal x10593=((1.0)*x10577);
IkReal x10594=(r22*x10576);
IkReal x10595=(gconst5*x10576);
IkReal x10596=(r11*x10577);
IkReal x10597=(r21*x10577);
IkReal x10598=((1.0)*gconst4*x10576);
IkReal x10599=(x10587+x10588);
evalcond[0]=((((-1.0)*r22*x10593))+((r20*x10595))+(((-1.0)*r21*x10598)));
evalcond[1]=((((-1.0)*r12*x10593))+(((-1.0)*r11*x10598))+((r10*x10595)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x10593))+((r00*x10595))+(((-1.0)*r01*x10598)));
evalcond[3]=(((r00*x10578))+((sj15*x10586))+(((-1.0)*r00*x10579*x10591))+(((-1.0)*x10579*x10590))+((x10582*x10592)));
evalcond[4]=((((-1.0)*gconst4*r00*x10579))+(((-1.0)*r00*x10581*x10591))+(((-1.0)*x10581*x10590))+((x10578*x10592))+(((-1.0)*x10579*x10586)));
evalcond[5]=((((-1.0)*r10*x10579*x10591))+((r10*x10578))+((sj15*x10584))+(((-1.0)*sj13*x10585))+x10583+(((-1.0)*x10579*x10589))+((x10582*x10596)));
evalcond[6]=(((r20*x10578))+(((-1.0)*x10599))+((sj15*x10580))+(((-1.0)*r20*x10579*x10591))+(((-1.0)*x10579*x10594))+((x10582*x10597)));
evalcond[7]=((((-1.0)*gconst4*r20*x10579))+(((-1.0)*x10581*x10594))+(((-1.0)*r20*x10581*x10591))+((sj13*sj14))+(((-1.0)*x10583))+((x10578*x10597))+(((-1.0)*x10579*x10580)));
evalcond[8]=((((-1.0)*gconst4*r10*x10579))+(((-1.0)*x10599))+(((-1.0)*x10581*x10589))+(((-1.0)*r10*x10581*x10591))+((x10578*x10596))+(((-1.0)*x10579*x10584)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x10600=((1.0)*gconst4);
CheckValue<IkReal> x10601=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x10600))+(((-1.0)*gconst5*r21)))),-1);
if(!x10601.valid){
continue;
}
CheckValue<IkReal> x10602 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x10600))+((gconst5*r10)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10602.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10601.value)))+(x10602.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x10603=IKcos(j16);
IkReal x10604=IKsin(j16);
IkReal x10605=(gconst4*sj15);
IkReal x10606=((1.0)*cj15);
IkReal x10607=(gconst5*r21);
IkReal x10608=((1.0)*sj15);
IkReal x10609=(cj15*gconst4);
IkReal x10610=(cj13*cj14);
IkReal x10611=(gconst5*r11);
IkReal x10612=((1.0)*sj14);
IkReal x10613=(gconst5*r01);
IkReal x10614=((1.0)*cj14*sj13);
IkReal x10615=(cj13*x10612);
IkReal x10616=(r12*x10603);
IkReal x10617=(r02*x10603);
IkReal x10618=(gconst5*x10604);
IkReal x10619=(r01*x10604);
IkReal x10620=((1.0)*x10604);
IkReal x10621=(r22*x10603);
IkReal x10622=(gconst5*x10603);
IkReal x10623=(r11*x10604);
IkReal x10624=(r21*x10604);
IkReal x10625=((1.0)*gconst4*x10603);
IkReal x10626=(x10615+x10614);
evalcond[0]=(((r20*x10622))+(((-1.0)*r22*x10620))+(((-1.0)*r21*x10625)));
evalcond[1]=((((-1.0)*r12*x10620))+((r10*x10622))+(((-1.0)*r11*x10625)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x10620))+((r00*x10622))+(((-1.0)*r01*x10625)));
evalcond[3]=(((x10609*x10619))+((r00*x10605))+((sj15*x10613))+(((-1.0)*r00*x10606*x10618))+(((-1.0)*x10606*x10617)));
evalcond[4]=((((-1.0)*gconst4*r00*x10606))+(((-1.0)*x10608*x10617))+((x10605*x10619))+(((-1.0)*x10606*x10613))+(((-1.0)*r00*x10608*x10618)));
evalcond[5]=(((sj15*x10611))+(((-1.0)*r10*x10606*x10618))+((r10*x10605))+(((-1.0)*sj13*x10612))+((x10609*x10623))+(((-1.0)*x10606*x10616))+x10610);
evalcond[6]=((((-1.0)*x10626))+((sj15*x10607))+((x10609*x10624))+(((-1.0)*r20*x10606*x10618))+((r20*x10605))+(((-1.0)*x10606*x10621)));
evalcond[7]=((((-1.0)*x10608*x10621))+(((-1.0)*gconst4*r20*x10606))+(((-1.0)*x10606*x10607))+((x10605*x10624))+((sj13*sj14))+(((-1.0)*r20*x10608*x10618))+(((-1.0)*x10610)));
evalcond[8]=((((-1.0)*r10*x10608*x10618))+(((-1.0)*gconst4*r10*x10606))+(((-1.0)*x10626))+((x10605*x10623))+(((-1.0)*x10608*x10616))+(((-1.0)*x10606*x10611)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x10627=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x10627.valid){
continue;
}
CheckValue<IkReal> x10628 = IKatan2WithCheck(IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x10628.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10627.value)))+(x10628.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x10629=IKcos(j16);
IkReal x10630=IKsin(j16);
IkReal x10631=(gconst4*sj15);
IkReal x10632=((1.0)*cj15);
IkReal x10633=(gconst5*r21);
IkReal x10634=((1.0)*sj15);
IkReal x10635=(cj15*gconst4);
IkReal x10636=(cj13*cj14);
IkReal x10637=(gconst5*r11);
IkReal x10638=((1.0)*sj14);
IkReal x10639=(gconst5*r01);
IkReal x10640=((1.0)*cj14*sj13);
IkReal x10641=(cj13*x10638);
IkReal x10642=(r12*x10629);
IkReal x10643=(r02*x10629);
IkReal x10644=(gconst5*x10630);
IkReal x10645=(r01*x10630);
IkReal x10646=((1.0)*x10630);
IkReal x10647=(r22*x10629);
IkReal x10648=(gconst5*x10629);
IkReal x10649=(r11*x10630);
IkReal x10650=(r21*x10630);
IkReal x10651=((1.0)*gconst4*x10629);
IkReal x10652=(x10640+x10641);
evalcond[0]=(((r20*x10648))+(((-1.0)*r22*x10646))+(((-1.0)*r21*x10651)));
evalcond[1]=((((-1.0)*r12*x10646))+((r10*x10648))+(((-1.0)*r11*x10651)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x10646))+((r00*x10648))+(((-1.0)*r01*x10651)));
evalcond[3]=(((r00*x10631))+(((-1.0)*x10632*x10643))+((x10635*x10645))+(((-1.0)*r00*x10632*x10644))+((sj15*x10639)));
evalcond[4]=((((-1.0)*r00*x10634*x10644))+(((-1.0)*x10632*x10639))+((x10631*x10645))+(((-1.0)*x10634*x10643))+(((-1.0)*gconst4*r00*x10632)));
evalcond[5]=((((-1.0)*x10632*x10642))+((r10*x10631))+((x10635*x10649))+(((-1.0)*sj13*x10638))+((sj15*x10637))+x10636+(((-1.0)*r10*x10632*x10644)));
evalcond[6]=((((-1.0)*x10632*x10647))+((r20*x10631))+((sj15*x10633))+((x10635*x10650))+(((-1.0)*r20*x10632*x10644))+(((-1.0)*x10652)));
evalcond[7]=((((-1.0)*x10632*x10633))+(((-1.0)*x10636))+(((-1.0)*r20*x10634*x10644))+((sj13*sj14))+(((-1.0)*x10634*x10647))+(((-1.0)*gconst4*r20*x10632))+((x10631*x10650)));
evalcond[8]=((((-1.0)*r10*x10634*x10644))+(((-1.0)*x10632*x10637))+((x10631*x10649))+(((-1.0)*gconst4*r10*x10632))+(((-1.0)*x10634*x10642))+(((-1.0)*x10652)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[4];
CheckValue<IkReal> x10655 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10655.valid){
continue;
}
IkReal x10653=((1.0)*(x10655.value));
IkReal x10654=x9565;
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x10653)));
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10653)));
IkReal gconst4=((1.0)*r21*x10654);
IkReal gconst5=((-1.0)*r20*x10654);
j16eval[0]=0;
j16eval[1]=r12;
j16eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j16eval[3]=0;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  || IKabs(j16eval[3]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x10658 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10658.valid){
continue;
}
IkReal x10656=((1.0)*(x10658.value));
IkReal x10657=x9565;
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x10656)));
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10656)));
IkReal gconst4=((1.0)*r21*x10657);
IkReal gconst5=((-1.0)*r20*x10657);
j16eval[0]=1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
CheckValue<IkReal> x10661 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10661.valid){
continue;
}
IkReal x10659=((1.0)*(x10661.value));
IkReal x10660=x9565;
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x10659)));
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10659)));
IkReal gconst4=((1.0)*r21*x10660);
IkReal gconst5=((-1.0)*r20*x10660);
j16eval[0]=r12;
j16eval[1]=sj15;
j16eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[4];
CheckValue<IkReal> x10664 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10664.valid){
continue;
}
IkReal x10662=((1.0)*(x10664.value));
IkReal x10663=x9565;
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x10662)));
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10662)));
IkReal gconst4=((1.0)*r21*x10663);
IkReal gconst5=((-1.0)*r20*x10663);
j16eval[0]=0;
j16eval[1]=r12;
j16eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j16eval[3]=0;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  || IKabs(j16eval[3]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x10667 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10667.valid){
continue;
}
IkReal x10665=((1.0)*(x10667.value));
IkReal x10666=x9565;
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x10665)));
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10665)));
IkReal gconst4=((1.0)*r21*x10666);
IkReal gconst5=((-1.0)*r20*x10666);
j16eval[0]=1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
CheckValue<IkReal> x10670 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10670.valid){
continue;
}
IkReal x10668=((1.0)*(x10670.value));
IkReal x10669=x9565;
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x10668)));
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10668)));
IkReal gconst4=((1.0)*r21*x10669);
IkReal gconst5=((-1.0)*r20*x10669);
j16eval[0]=r02;
j16eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x10671=(gconst4*r01);
IkReal x10672=(gconst5*r00);
CheckValue<IkReal> x10673=IKPowWithIntegerCheck(IKsign(((x10672*x10672)+(r02*r02)+(((-2.0)*x10671*x10672))+(x10671*x10671))),-1);
if(!x10673.valid){
continue;
}
CheckValue<IkReal> x10674 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x10672))+x10671)),IKFAST_ATAN2_MAGTHRESH);
if(!x10674.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10673.value)))+(x10674.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x10675=IKcos(j16);
IkReal x10676=IKsin(j16);
IkReal x10677=(gconst5*r10);
IkReal x10678=(gconst5*r00);
IkReal x10679=(gconst5*r20);
IkReal x10680=(gconst4*x10676);
IkReal x10681=((1.0)*x10676);
IkReal x10682=((1.0)*x10675);
IkReal x10683=(gconst4*x10682);
evalcond[0]=((((-1.0)*r21*x10683))+(((-1.0)*r22*x10681))+((x10675*x10679)));
evalcond[1]=((((-1.0)*r12*x10681))+(((-1.0)*r11*x10683))+((x10675*x10677)));
evalcond[2]=((((-1.0)*x10678*x10681))+(((-1.0)*r02*x10682))+((r01*x10680)));
evalcond[3]=((1.0)+(((-1.0)*r01*x10683))+(((-1.0)*r02*x10681))+((x10675*x10678)));
evalcond[4]=(((cj14*sj13))+(((-1.0)*r12*x10682))+((cj13*sj14))+((r11*x10680))+(((-1.0)*x10677*x10681)));
evalcond[5]=((((-1.0)*cj13*cj14))+(((-1.0)*r22*x10682))+(((-1.0)*x10679*x10681))+((sj13*sj14))+((r21*x10680)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x10684=((1.0)*gconst4);
CheckValue<IkReal> x10685 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x10684))+((gconst5*r20)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x10685.valid){
continue;
}
CheckValue<IkReal> x10686=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x10684))+(((-1.0)*gconst5*r11)))),-1);
if(!x10686.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x10685.value)+(((1.5707963267949)*(x10686.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x10687=IKcos(j16);
IkReal x10688=IKsin(j16);
IkReal x10689=(gconst5*r10);
IkReal x10690=(gconst5*r00);
IkReal x10691=(gconst5*r20);
IkReal x10692=(gconst4*x10688);
IkReal x10693=((1.0)*x10688);
IkReal x10694=((1.0)*x10687);
IkReal x10695=(gconst4*x10694);
evalcond[0]=((((-1.0)*r21*x10695))+(((-1.0)*r22*x10693))+((x10687*x10691)));
evalcond[1]=((((-1.0)*r11*x10695))+(((-1.0)*r12*x10693))+((x10687*x10689)));
evalcond[2]=((((-1.0)*x10690*x10693))+(((-1.0)*r02*x10694))+((r01*x10692)));
evalcond[3]=((1.0)+(((-1.0)*r01*x10695))+(((-1.0)*r02*x10693))+((x10687*x10690)));
evalcond[4]=(((r11*x10692))+((cj14*sj13))+(((-1.0)*r12*x10694))+((cj13*sj14))+(((-1.0)*x10689*x10693)));
evalcond[5]=((((-1.0)*cj13*cj14))+((r21*x10692))+(((-1.0)*x10691*x10693))+((sj13*sj14))+(((-1.0)*r22*x10694)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x10696 = IKatan2WithCheck(IkReal((((gconst5*r10))+(((-1.0)*gconst4*r11)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10696.valid){
continue;
}
CheckValue<IkReal> x10697=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10697.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x10696.value)+(((1.5707963267949)*(x10697.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x10698=IKcos(j16);
IkReal x10699=IKsin(j16);
IkReal x10700=(gconst5*r10);
IkReal x10701=(gconst5*r00);
IkReal x10702=(gconst5*r20);
IkReal x10703=(gconst4*x10699);
IkReal x10704=((1.0)*x10699);
IkReal x10705=((1.0)*x10698);
IkReal x10706=(gconst4*x10705);
evalcond[0]=((((-1.0)*r22*x10704))+((x10698*x10702))+(((-1.0)*r21*x10706)));
evalcond[1]=((((-1.0)*r12*x10704))+((x10698*x10700))+(((-1.0)*r11*x10706)));
evalcond[2]=(((r01*x10703))+(((-1.0)*r02*x10705))+(((-1.0)*x10701*x10704)));
evalcond[3]=((1.0)+((x10698*x10701))+(((-1.0)*r02*x10704))+(((-1.0)*r01*x10706)));
evalcond[4]=((((-1.0)*r12*x10705))+((cj14*sj13))+((r11*x10703))+((cj13*sj14))+(((-1.0)*x10700*x10704)));
evalcond[5]=((((-1.0)*cj13*cj14))+(((-1.0)*r22*x10705))+(((-1.0)*x10702*x10704))+((sj13*sj14))+((r21*x10703)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[4];
CheckValue<IkReal> x10709 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10709.valid){
continue;
}
IkReal x10707=((1.0)*(x10709.value));
IkReal x10708=x9565;
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x10707)));
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10707)));
IkReal gconst4=((1.0)*r21*x10708);
IkReal gconst5=((-1.0)*r20*x10708);
j16eval[0]=0;
j16eval[1]=r12;
j16eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j16eval[3]=0;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  || IKabs(j16eval[3]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x10712 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10712.valid){
continue;
}
IkReal x10710=((1.0)*(x10712.value));
IkReal x10711=x9565;
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x10710)));
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10710)));
IkReal gconst4=((1.0)*r21*x10711);
IkReal gconst5=((-1.0)*r20*x10711);
j16eval[0]=1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
CheckValue<IkReal> x10715 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10715.valid){
continue;
}
IkReal x10713=((1.0)*(x10715.value));
IkReal x10714=x9565;
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x10713)));
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10713)));
IkReal gconst4=((1.0)*r21*x10714);
IkReal gconst5=((-1.0)*r20*x10714);
j16eval[0]=r02;
j16eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x10716=(gconst4*r01);
IkReal x10717=(gconst5*r00);
CheckValue<IkReal> x10718 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x10717))+x10716)),IKFAST_ATAN2_MAGTHRESH);
if(!x10718.valid){
continue;
}
CheckValue<IkReal> x10719=IKPowWithIntegerCheck(IKsign(((((-2.0)*x10716*x10717))+(x10717*x10717)+(x10716*x10716)+(r02*r02))),-1);
if(!x10719.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x10718.value)+(((1.5707963267949)*(x10719.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x10720=IKsin(j16);
IkReal x10721=IKcos(j16);
IkReal x10722=(gconst5*r20);
IkReal x10723=(gconst4*r11);
IkReal x10724=(gconst4*r21);
IkReal x10725=(gconst4*r01);
IkReal x10726=((1.0)*x10720);
IkReal x10727=((1.0)*x10721);
IkReal x10728=(gconst5*x10721);
IkReal x10729=(gconst5*x10720);
evalcond[0]=(((r02*x10721))+((r00*x10729))+(((-1.0)*x10725*x10726)));
evalcond[1]=((((-1.0)*r22*x10726))+((x10721*x10722))+(((-1.0)*x10724*x10727)));
evalcond[2]=(((r10*x10728))+(((-1.0)*r12*x10726))+(((-1.0)*x10723*x10727)));
evalcond[3]=((1.0)+(((-1.0)*r02*x10726))+((r00*x10728))+(((-1.0)*x10725*x10727)));
evalcond[4]=(((r10*x10729))+((cj14*sj13))+((cj13*sj14))+(((-1.0)*x10723*x10726))+((r12*x10721)));
evalcond[5]=(((r22*x10721))+(((-1.0)*cj13*cj14))+((x10720*x10722))+((sj13*sj14))+(((-1.0)*x10724*x10726)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x10730=((1.0)*gconst4);
CheckValue<IkReal> x10731=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst5*r11))+(((-1.0)*r10*x10730)))),-1);
if(!x10731.valid){
continue;
}
CheckValue<IkReal> x10732 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x10730))+((gconst5*r20)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x10732.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10731.value)))+(x10732.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x10733=IKsin(j16);
IkReal x10734=IKcos(j16);
IkReal x10735=(gconst5*r20);
IkReal x10736=(gconst4*r11);
IkReal x10737=(gconst4*r21);
IkReal x10738=(gconst4*r01);
IkReal x10739=((1.0)*x10733);
IkReal x10740=((1.0)*x10734);
IkReal x10741=(gconst5*x10734);
IkReal x10742=(gconst5*x10733);
evalcond[0]=(((r02*x10734))+(((-1.0)*x10738*x10739))+((r00*x10742)));
evalcond[1]=((((-1.0)*r22*x10739))+(((-1.0)*x10737*x10740))+((x10734*x10735)));
evalcond[2]=(((r10*x10741))+(((-1.0)*r12*x10739))+(((-1.0)*x10736*x10740)));
evalcond[3]=((1.0)+(((-1.0)*x10738*x10740))+(((-1.0)*r02*x10739))+((r00*x10741)));
evalcond[4]=(((r10*x10742))+((cj14*sj13))+((cj13*sj14))+(((-1.0)*x10736*x10739))+((r12*x10734)));
evalcond[5]=((((-1.0)*cj13*cj14))+(((-1.0)*x10737*x10739))+((x10733*x10735))+((sj13*sj14))+((r22*x10734)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x10743 = IKatan2WithCheck(IkReal((((gconst5*r10))+(((-1.0)*gconst4*r11)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10743.valid){
continue;
}
CheckValue<IkReal> x10744=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10744.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x10743.value)+(((1.5707963267949)*(x10744.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x10745=IKsin(j16);
IkReal x10746=IKcos(j16);
IkReal x10747=(gconst5*r20);
IkReal x10748=(gconst4*r11);
IkReal x10749=(gconst4*r21);
IkReal x10750=(gconst4*r01);
IkReal x10751=((1.0)*x10745);
IkReal x10752=((1.0)*x10746);
IkReal x10753=(gconst5*x10746);
IkReal x10754=(gconst5*x10745);
evalcond[0]=((((-1.0)*x10750*x10751))+((r02*x10746))+((r00*x10754)));
evalcond[1]=(((x10746*x10747))+(((-1.0)*r22*x10751))+(((-1.0)*x10749*x10752)));
evalcond[2]=(((r10*x10753))+(((-1.0)*x10748*x10752))+(((-1.0)*r12*x10751)));
evalcond[3]=((1.0)+(((-1.0)*r02*x10751))+(((-1.0)*x10750*x10752))+((r00*x10753)));
evalcond[4]=(((cj14*sj13))+((r10*x10754))+((cj13*sj14))+(((-1.0)*x10748*x10751))+((r12*x10746)));
evalcond[5]=((((-1.0)*cj13*cj14))+((x10745*x10747))+((r22*x10746))+((sj13*sj14))+(((-1.0)*x10749*x10751)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j15))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[4];
CheckValue<IkReal> x10757 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10757.valid){
continue;
}
IkReal x10755=((1.0)*(x10757.value));
IkReal x10756=x9565;
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x10755)));
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
sj15=0;
cj15=1.0;
j15=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10755)));
IkReal gconst4=((1.0)*r21*x10756);
IkReal gconst5=((-1.0)*r20*x10756);
j16eval[0]=0;
j16eval[1]=r12;
j16eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j16eval[3]=0;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  || IKabs(j16eval[3]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x10760 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10760.valid){
continue;
}
IkReal x10758=((1.0)*(x10760.value));
IkReal x10759=x9565;
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x10758)));
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
sj15=0;
cj15=1.0;
j15=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10758)));
IkReal gconst4=((1.0)*r21*x10759);
IkReal gconst5=((-1.0)*r20*x10759);
j16eval[0]=1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
CheckValue<IkReal> x10763 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10763.valid){
continue;
}
IkReal x10761=((1.0)*(x10763.value));
IkReal x10762=x9565;
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x10761)));
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
sj15=0;
cj15=1.0;
j15=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10761)));
IkReal gconst4=((1.0)*r21*x10762);
IkReal gconst5=((-1.0)*r20*x10762);
j16eval[0]=r02;
j16eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x10764=(gconst4*r01);
IkReal x10765=(gconst5*r00);
CheckValue<IkReal> x10766 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x10765))+x10764)),IKFAST_ATAN2_MAGTHRESH);
if(!x10766.valid){
continue;
}
CheckValue<IkReal> x10767=IKPowWithIntegerCheck(IKsign(((((-2.0)*x10764*x10765))+(x10765*x10765)+(x10764*x10764)+(r02*r02))),-1);
if(!x10767.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x10766.value)+(((1.5707963267949)*(x10767.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x10768=IKcos(j16);
IkReal x10769=IKsin(j16);
IkReal x10770=((1.0)*cj13);
IkReal x10771=(gconst5*r10);
IkReal x10772=(gconst5*r00);
IkReal x10773=(gconst5*r20);
IkReal x10774=(gconst4*x10769);
IkReal x10775=((1.0)*x10768);
IkReal x10776=((1.0)*x10769);
evalcond[0]=((((-1.0)*gconst4*r21*x10775))+(((-1.0)*r22*x10776))+((x10768*x10773)));
evalcond[1]=((((-1.0)*r12*x10776))+(((-1.0)*gconst4*r11*x10775))+((x10768*x10771)));
evalcond[2]=((((-1.0)*r02*x10775))+(((-1.0)*x10772*x10776))+((r01*x10774)));
evalcond[3]=((1.0)+(((-1.0)*r02*x10776))+(((-1.0)*gconst4*r01*x10775))+((x10768*x10772)));
evalcond[4]=(((r11*x10774))+(((-1.0)*r12*x10775))+(((-1.0)*cj14*x10770))+(((-1.0)*x10771*x10776))+((sj13*sj14)));
evalcond[5]=((((-1.0)*x10773*x10776))+(((-1.0)*r22*x10775))+((r21*x10774))+(((-1.0)*sj14*x10770))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x10777=((1.0)*gconst4);
CheckValue<IkReal> x10778=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x10777))+(((-1.0)*gconst5*r11)))),-1);
if(!x10778.valid){
continue;
}
CheckValue<IkReal> x10779 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x10777))+((gconst5*r20)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x10779.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10778.value)))+(x10779.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x10780=IKcos(j16);
IkReal x10781=IKsin(j16);
IkReal x10782=((1.0)*cj13);
IkReal x10783=(gconst5*r10);
IkReal x10784=(gconst5*r00);
IkReal x10785=(gconst5*r20);
IkReal x10786=(gconst4*x10781);
IkReal x10787=((1.0)*x10780);
IkReal x10788=((1.0)*x10781);
evalcond[0]=((((-1.0)*gconst4*r21*x10787))+((x10780*x10785))+(((-1.0)*r22*x10788)));
evalcond[1]=((((-1.0)*gconst4*r11*x10787))+(((-1.0)*r12*x10788))+((x10780*x10783)));
evalcond[2]=((((-1.0)*x10784*x10788))+((r01*x10786))+(((-1.0)*r02*x10787)));
evalcond[3]=((1.0)+((x10780*x10784))+(((-1.0)*gconst4*r01*x10787))+(((-1.0)*r02*x10788)));
evalcond[4]=((((-1.0)*x10783*x10788))+((r11*x10786))+(((-1.0)*r12*x10787))+((sj13*sj14))+(((-1.0)*cj14*x10782)));
evalcond[5]=(((r21*x10786))+(((-1.0)*x10785*x10788))+(((-1.0)*sj14*x10782))+(((-1.0)*cj14*sj13))+(((-1.0)*r22*x10787)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x10789 = IKatan2WithCheck(IkReal((((gconst5*r10))+(((-1.0)*gconst4*r11)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10789.valid){
continue;
}
CheckValue<IkReal> x10790=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10790.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x10789.value)+(((1.5707963267949)*(x10790.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x10791=IKcos(j16);
IkReal x10792=IKsin(j16);
IkReal x10793=((1.0)*cj13);
IkReal x10794=(gconst5*r10);
IkReal x10795=(gconst5*r00);
IkReal x10796=(gconst5*r20);
IkReal x10797=(gconst4*x10792);
IkReal x10798=((1.0)*x10791);
IkReal x10799=((1.0)*x10792);
evalcond[0]=((((-1.0)*gconst4*r21*x10798))+((x10791*x10796))+(((-1.0)*r22*x10799)));
evalcond[1]=((((-1.0)*gconst4*r11*x10798))+(((-1.0)*r12*x10799))+((x10791*x10794)));
evalcond[2]=((((-1.0)*r02*x10798))+(((-1.0)*x10795*x10799))+((r01*x10797)));
evalcond[3]=((1.0)+(((-1.0)*r02*x10799))+((x10791*x10795))+(((-1.0)*gconst4*r01*x10798)));
evalcond[4]=((((-1.0)*r12*x10798))+((sj13*sj14))+(((-1.0)*cj14*x10793))+((r11*x10797))+(((-1.0)*x10794*x10799)));
evalcond[5]=((((-1.0)*x10796*x10799))+((r21*x10797))+(((-1.0)*sj14*x10793))+(((-1.0)*cj14*sj13))+(((-1.0)*r22*x10798)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[4];
CheckValue<IkReal> x10802 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10802.valid){
continue;
}
IkReal x10800=((1.0)*(x10802.value));
IkReal x10801=x9565;
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x10800)));
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10800)));
IkReal gconst4=((1.0)*r21*x10801);
IkReal gconst5=((-1.0)*r20*x10801);
j16eval[0]=0;
j16eval[1]=r12;
j16eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j16eval[3]=0;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  || IKabs(j16eval[3]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x10805 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10805.valid){
continue;
}
IkReal x10803=((1.0)*(x10805.value));
IkReal x10804=x9565;
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x10803)));
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10803)));
IkReal gconst4=((1.0)*r21*x10804);
IkReal gconst5=((-1.0)*r20*x10804);
j16eval[0]=1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
CheckValue<IkReal> x10808 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10808.valid){
continue;
}
IkReal x10806=((1.0)*(x10808.value));
IkReal x10807=x9565;
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x10806)));
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10806)));
IkReal gconst4=((1.0)*r21*x10807);
IkReal gconst5=((-1.0)*r20*x10807);
j16eval[0]=r02;
j16eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x10809=(gconst4*r01);
IkReal x10810=(gconst5*r00);
CheckValue<IkReal> x10811=IKPowWithIntegerCheck(IKsign(((x10810*x10810)+(x10809*x10809)+(((-2.0)*x10809*x10810))+(r02*r02))),-1);
if(!x10811.valid){
continue;
}
CheckValue<IkReal> x10812 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x10810))+x10809)),IKFAST_ATAN2_MAGTHRESH);
if(!x10812.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10811.value)))+(x10812.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x10813=IKsin(j16);
IkReal x10814=IKcos(j16);
IkReal x10815=(gconst5*r20);
IkReal x10816=((1.0)*cj13);
IkReal x10817=(gconst4*r11);
IkReal x10818=(gconst4*r21);
IkReal x10819=(gconst4*r01);
IkReal x10820=((1.0)*x10813);
IkReal x10821=((1.0)*x10814);
IkReal x10822=(gconst5*x10814);
IkReal x10823=(gconst5*x10813);
evalcond[0]=(((r02*x10814))+(((-1.0)*x10819*x10820))+((r00*x10823)));
evalcond[1]=(((x10814*x10815))+(((-1.0)*x10818*x10821))+(((-1.0)*r22*x10820)));
evalcond[2]=((((-1.0)*r12*x10820))+((r10*x10822))+(((-1.0)*x10817*x10821)));
evalcond[3]=((1.0)+(((-1.0)*r02*x10820))+(((-1.0)*x10819*x10821))+((r00*x10822)));
evalcond[4]=((((-1.0)*cj14*x10816))+((r10*x10823))+((sj13*sj14))+(((-1.0)*x10817*x10820))+((r12*x10814)));
evalcond[5]=(((r22*x10814))+(((-1.0)*sj14*x10816))+((x10813*x10815))+(((-1.0)*x10818*x10820))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x10824=((1.0)*gconst4);
CheckValue<IkReal> x10825 = IKatan2WithCheck(IkReal((((gconst5*r20))+(((-1.0)*r21*x10824)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x10825.valid){
continue;
}
CheckValue<IkReal> x10826=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x10824))+(((-1.0)*gconst5*r11)))),-1);
if(!x10826.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x10825.value)+(((1.5707963267949)*(x10826.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x10827=IKsin(j16);
IkReal x10828=IKcos(j16);
IkReal x10829=(gconst5*r20);
IkReal x10830=((1.0)*cj13);
IkReal x10831=(gconst4*r11);
IkReal x10832=(gconst4*r21);
IkReal x10833=(gconst4*r01);
IkReal x10834=((1.0)*x10827);
IkReal x10835=((1.0)*x10828);
IkReal x10836=(gconst5*x10828);
IkReal x10837=(gconst5*x10827);
evalcond[0]=(((r02*x10828))+(((-1.0)*x10833*x10834))+((r00*x10837)));
evalcond[1]=(((x10828*x10829))+(((-1.0)*x10832*x10835))+(((-1.0)*r22*x10834)));
evalcond[2]=(((r10*x10836))+(((-1.0)*r12*x10834))+(((-1.0)*x10831*x10835)));
evalcond[3]=((1.0)+(((-1.0)*x10833*x10835))+((r00*x10836))+(((-1.0)*r02*x10834)));
evalcond[4]=(((r12*x10828))+(((-1.0)*cj14*x10830))+((r10*x10837))+((sj13*sj14))+(((-1.0)*x10831*x10834)));
evalcond[5]=((((-1.0)*sj14*x10830))+((x10827*x10829))+(((-1.0)*x10832*x10834))+(((-1.0)*cj14*sj13))+((r22*x10828)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x10838 = IKatan2WithCheck(IkReal((((gconst5*r10))+(((-1.0)*gconst4*r11)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10838.valid){
continue;
}
CheckValue<IkReal> x10839=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10839.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x10838.value)+(((1.5707963267949)*(x10839.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x10840=IKsin(j16);
IkReal x10841=IKcos(j16);
IkReal x10842=(gconst5*r20);
IkReal x10843=((1.0)*cj13);
IkReal x10844=(gconst4*r11);
IkReal x10845=(gconst4*r21);
IkReal x10846=(gconst4*r01);
IkReal x10847=((1.0)*x10840);
IkReal x10848=((1.0)*x10841);
IkReal x10849=(gconst5*x10841);
IkReal x10850=(gconst5*x10840);
evalcond[0]=(((r02*x10841))+(((-1.0)*x10846*x10847))+((r00*x10850)));
evalcond[1]=(((x10841*x10842))+(((-1.0)*x10845*x10848))+(((-1.0)*r22*x10847)));
evalcond[2]=((((-1.0)*x10844*x10848))+(((-1.0)*r12*x10847))+((r10*x10849)));
evalcond[3]=((1.0)+((r00*x10849))+(((-1.0)*r02*x10847))+(((-1.0)*x10846*x10848)));
evalcond[4]=((((-1.0)*x10844*x10847))+((r10*x10850))+((sj13*sj14))+((r12*x10841))+(((-1.0)*cj14*x10843)));
evalcond[5]=(((x10840*x10842))+(((-1.0)*x10845*x10847))+(((-1.0)*sj14*x10843))+((r22*x10841))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r12);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
j16array[0]=0;
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j16]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x10851=gconst4*gconst4;
IkReal x10852=gconst5*gconst5;
IkReal x10853=(cj15*r20);
IkReal x10854=(r00*sj15);
IkReal x10855=(r01*sj15);
IkReal x10856=(gconst4*gconst5);
IkReal x10857=(r21*x10851);
IkReal x10858=((1.0)*r01*x10856);
CheckValue<IkReal> x10859=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj15*r00*r21*x10856))+((r00*x10852*x10853))+((cj15*r01*x10857))+(((-1.0)*x10853*x10858))+((cj15*r02*r22)))),-1);
if(!x10859.valid){
continue;
}
CheckValue<IkReal> x10860 = IKatan2WithCheck(IkReal(((((-1.0)*x10854*x10857))+(((-1.0)*r21*x10855*x10856))+((r20*x10852*x10855))+((r20*x10854*x10856)))),IkReal((((gconst5*r22*x10855))+((gconst4*r22*x10854)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10860.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10859.value)))+(x10860.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x10861=IKcos(j16);
IkReal x10862=IKsin(j16);
IkReal x10863=(sj13*sj14);
IkReal x10864=(gconst4*sj15);
IkReal x10865=((1.0)*cj15);
IkReal x10866=(gconst5*r21);
IkReal x10867=((1.0)*sj15);
IkReal x10868=(cj15*gconst4);
IkReal x10869=(cj14*sj13);
IkReal x10870=(gconst5*r11);
IkReal x10871=(cj13*sj14);
IkReal x10872=(gconst5*r01);
IkReal x10873=((1.0)*cj13*cj14);
IkReal x10874=(r12*x10861);
IkReal x10875=(r02*x10861);
IkReal x10876=(gconst5*x10862);
IkReal x10877=(r01*x10862);
IkReal x10878=((1.0)*x10862);
IkReal x10879=(r22*x10861);
IkReal x10880=(gconst5*x10861);
IkReal x10881=(r11*x10862);
IkReal x10882=(r21*x10862);
IkReal x10883=((1.0)*gconst4*x10861);
evalcond[0]=((((-1.0)*r22*x10878))+(((-1.0)*r21*x10883))+((r20*x10880)));
evalcond[1]=((((-1.0)*r12*x10878))+(((-1.0)*r11*x10883))+((r10*x10880)));
evalcond[2]=((1.0)+(((-1.0)*r01*x10883))+((r00*x10880))+(((-1.0)*r02*x10878)));
evalcond[3]=((((-1.0)*r00*x10865*x10876))+(((-1.0)*x10865*x10875))+((r00*x10864))+((x10868*x10877))+((sj15*x10872)));
evalcond[4]=(((x10864*x10877))+(((-1.0)*x10865*x10872))+(((-1.0)*x10867*x10875))+(((-1.0)*r00*x10867*x10876))+(((-1.0)*gconst4*r00*x10865)));
evalcond[5]=(((x10868*x10881))+(((-1.0)*r10*x10865*x10876))+(((-1.0)*x10865*x10874))+((r10*x10864))+(((-1.0)*x10873))+((sj15*x10870))+x10863);
evalcond[6]=(((x10868*x10882))+(((-1.0)*x10865*x10879))+(((-1.0)*r20*x10865*x10876))+((r20*x10864))+((sj15*x10866))+(((-1.0)*x10871))+(((-1.0)*x10869)));
evalcond[7]=((((-1.0)*r10*x10867*x10876))+(((-1.0)*gconst4*r10*x10865))+(((-1.0)*x10865*x10870))+(((-1.0)*x10867*x10874))+((x10864*x10881))+x10871+x10869);
evalcond[8]=((((-1.0)*x10865*x10866))+(((-1.0)*r20*x10867*x10876))+(((-1.0)*x10867*x10879))+((x10864*x10882))+(((-1.0)*x10873))+(((-1.0)*gconst4*r20*x10865))+x10863);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x10884=((1.0)*gconst4);
CheckValue<IkReal> x10885=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x10884))+(((-1.0)*gconst5*r11)))),-1);
if(!x10885.valid){
continue;
}
CheckValue<IkReal> x10886 = IKatan2WithCheck(IkReal((((gconst5*r20))+(((-1.0)*r21*x10884)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x10886.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10885.value)))+(x10886.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x10887=IKcos(j16);
IkReal x10888=IKsin(j16);
IkReal x10889=(sj13*sj14);
IkReal x10890=(gconst4*sj15);
IkReal x10891=((1.0)*cj15);
IkReal x10892=(gconst5*r21);
IkReal x10893=((1.0)*sj15);
IkReal x10894=(cj15*gconst4);
IkReal x10895=(cj14*sj13);
IkReal x10896=(gconst5*r11);
IkReal x10897=(cj13*sj14);
IkReal x10898=(gconst5*r01);
IkReal x10899=((1.0)*cj13*cj14);
IkReal x10900=(r12*x10887);
IkReal x10901=(r02*x10887);
IkReal x10902=(gconst5*x10888);
IkReal x10903=(r01*x10888);
IkReal x10904=((1.0)*x10888);
IkReal x10905=(r22*x10887);
IkReal x10906=(gconst5*x10887);
IkReal x10907=(r11*x10888);
IkReal x10908=(r21*x10888);
IkReal x10909=((1.0)*gconst4*x10887);
evalcond[0]=((((-1.0)*r21*x10909))+(((-1.0)*r22*x10904))+((r20*x10906)));
evalcond[1]=((((-1.0)*r11*x10909))+(((-1.0)*r12*x10904))+((r10*x10906)));
evalcond[2]=((1.0)+(((-1.0)*r01*x10909))+((r00*x10906))+(((-1.0)*r02*x10904)));
evalcond[3]=((((-1.0)*r00*x10891*x10902))+((sj15*x10898))+(((-1.0)*x10891*x10901))+((r00*x10890))+((x10894*x10903)));
evalcond[4]=((((-1.0)*r00*x10893*x10902))+(((-1.0)*x10891*x10898))+((x10890*x10903))+(((-1.0)*x10893*x10901))+(((-1.0)*gconst4*r00*x10891)));
evalcond[5]=((((-1.0)*r10*x10891*x10902))+(((-1.0)*x10899))+((sj15*x10896))+(((-1.0)*x10891*x10900))+((r10*x10890))+x10889+((x10894*x10907)));
evalcond[6]=(((r20*x10890))+(((-1.0)*x10897))+(((-1.0)*x10895))+(((-1.0)*r20*x10891*x10902))+((sj15*x10892))+(((-1.0)*x10891*x10905))+((x10894*x10908)));
evalcond[7]=((((-1.0)*x10891*x10896))+(((-1.0)*r10*x10893*x10902))+((x10890*x10907))+(((-1.0)*x10893*x10900))+(((-1.0)*gconst4*r10*x10891))+x10895+x10897);
evalcond[8]=((((-1.0)*x10891*x10892))+((x10890*x10908))+(((-1.0)*r20*x10893*x10902))+(((-1.0)*x10899))+(((-1.0)*x10893*x10905))+(((-1.0)*gconst4*r20*x10891))+x10889);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x10910 = IKatan2WithCheck(IkReal((((gconst5*r10))+(((-1.0)*gconst4*r11)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10910.valid){
continue;
}
CheckValue<IkReal> x10911=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10911.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x10910.value)+(((1.5707963267949)*(x10911.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x10912=IKcos(j16);
IkReal x10913=IKsin(j16);
IkReal x10914=(sj13*sj14);
IkReal x10915=(gconst4*sj15);
IkReal x10916=((1.0)*cj15);
IkReal x10917=(gconst5*r21);
IkReal x10918=((1.0)*sj15);
IkReal x10919=(cj15*gconst4);
IkReal x10920=(cj14*sj13);
IkReal x10921=(gconst5*r11);
IkReal x10922=(cj13*sj14);
IkReal x10923=(gconst5*r01);
IkReal x10924=((1.0)*cj13*cj14);
IkReal x10925=(r12*x10912);
IkReal x10926=(r02*x10912);
IkReal x10927=(gconst5*x10913);
IkReal x10928=(r01*x10913);
IkReal x10929=((1.0)*x10913);
IkReal x10930=(r22*x10912);
IkReal x10931=(gconst5*x10912);
IkReal x10932=(r11*x10913);
IkReal x10933=(r21*x10913);
IkReal x10934=((1.0)*gconst4*x10912);
evalcond[0]=((((-1.0)*r22*x10929))+(((-1.0)*r21*x10934))+((r20*x10931)));
evalcond[1]=((((-1.0)*r11*x10934))+((r10*x10931))+(((-1.0)*r12*x10929)));
evalcond[2]=((1.0)+(((-1.0)*r02*x10929))+((r00*x10931))+(((-1.0)*r01*x10934)));
evalcond[3]=(((r00*x10915))+(((-1.0)*r00*x10916*x10927))+((sj15*x10923))+((x10919*x10928))+(((-1.0)*x10916*x10926)));
evalcond[4]=((((-1.0)*r00*x10918*x10927))+((x10915*x10928))+(((-1.0)*x10918*x10926))+(((-1.0)*gconst4*r00*x10916))+(((-1.0)*x10916*x10923)));
evalcond[5]=((((-1.0)*r10*x10916*x10927))+(((-1.0)*x10924))+((x10919*x10932))+((sj15*x10921))+x10914+(((-1.0)*x10916*x10925))+((r10*x10915)));
evalcond[6]=((((-1.0)*x10920))+(((-1.0)*x10922))+(((-1.0)*x10916*x10930))+((x10919*x10933))+(((-1.0)*r20*x10916*x10927))+((r20*x10915))+((sj15*x10917)));
evalcond[7]=((((-1.0)*gconst4*r10*x10916))+((x10915*x10932))+(((-1.0)*x10918*x10925))+(((-1.0)*r10*x10918*x10927))+x10920+x10922+(((-1.0)*x10916*x10921)));
evalcond[8]=((((-1.0)*x10924))+((x10915*x10933))+(((-1.0)*r20*x10918*x10927))+(((-1.0)*x10918*x10930))+x10914+(((-1.0)*gconst4*r20*x10916))+(((-1.0)*x10916*x10917)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[2];
CheckValue<IkReal> x10937 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10937.valid){
continue;
}
IkReal x10935=((1.0)*(x10937.value));
IkReal x10936=((-1.0)*px);
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x10935)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10936);
rxp1_1=(px*r21);
rxp1_2=(r11*x10936);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10935)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=((-1.0)*r20);
j16eval[0]=r02;
j16eval[1]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
CheckValue<IkReal> x10940 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10940.valid){
continue;
}
IkReal x10938=((1.0)*(x10940.value));
IkReal x10939=((-1.0)*px);
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x10938)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10939);
rxp1_1=(px*r21);
rxp1_2=(r11*x10939);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10938)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=((-1.0)*r20);
IkReal x10941=((1.0)*cj15);
j16eval[0]=(((x10941*(r21*r21)))+(((-1.0)*x10941*(r10*r10)))+x10941);
j16eval[1]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
CheckValue<IkReal> x10944 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10944.valid){
continue;
}
IkReal x10942=((1.0)*(x10944.value));
IkReal x10943=((-1.0)*px);
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x10942)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10943);
rxp1_1=(px*r21);
rxp1_2=(r11*x10943);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10942)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=((-1.0)*r20);
j16eval[0]=r02;
j16eval[1]=cj15;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x10947 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10947.valid){
continue;
}
IkReal x10945=((1.0)*(x10947.value));
IkReal x10946=((-1.0)*px);
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x10945)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10946);
rxp1_1=(px*r21);
rxp1_2=(r11*x10946);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj15=1.0;
cj15=0;
j15=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10945)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=((-1.0)*r20);
j16eval[0]=((1.0)+(((1.0)*(r21*r21)))+(((-1.0)*(r10*r10))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
CheckValue<IkReal> x10949=IKPowWithIntegerCheck((((gconst4*r21))+(((-1.0)*gconst5*r20))),-1);
if(!x10949.valid){
continue;
}
IkReal x10948=x10949.value;
sj16array[0]=(((cj13*cj14*x10948))+(((-1.0)*sj13*sj14*x10948)));
if( sj16array[0] >= -1-IKFAST_SINCOS_THRESH && sj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKasin(sj16array[0]);
    cj16array[0] = IKcos(j16array[0]);
    sj16array[1] = sj16array[0];
    j16array[1] = j16array[0] > 0 ? (IKPI-j16array[0]) : (-IKPI-j16array[0]);
    cj16array[1] = -cj16array[0];
}
else if( isnan(sj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[3];
IkReal x10950=IKcos(j16);
IkReal x10951=(gconst5*x10950);
IkReal x10952=((1.0)*gconst4*x10950);
evalcond[0]=((-1.0)*r02*x10950);
evalcond[1]=((((-1.0)*r21*x10952))+((r20*x10951)));
evalcond[2]=(((r10*x10951))+(((-1.0)*r11*x10952)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x10955 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10955.valid){
continue;
}
IkReal x10953=((1.0)*(x10955.value));
IkReal x10954=((-1.0)*px);
sj17=gconst4;
cj17=gconst5;
j17=((3.14159265)+(((-1.0)*x10953)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10954);
rxp1_1=(px*r21);
rxp1_2=(r11*x10954);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10953)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=((-1.0)*r20);
j16eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(((1.0)*(r10*r10))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
CheckValue<IkReal> x10957=IKPowWithIntegerCheck((((gconst5*r20))+(((-1.0)*gconst4*r21))),-1);
if(!x10957.valid){
continue;
}
IkReal x10956=x10957.value;
sj16array[0]=((((-1.0)*sj13*sj14*x10956))+((cj13*cj14*x10956)));
if( sj16array[0] >= -1-IKFAST_SINCOS_THRESH && sj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKasin(sj16array[0]);
    cj16array[0] = IKcos(j16array[0]);
    sj16array[1] = sj16array[0];
    j16array[1] = j16array[0] > 0 ? (IKPI-j16array[0]) : (-IKPI-j16array[0]);
    cj16array[1] = -cj16array[0];
}
else if( isnan(sj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[3];
IkReal x10958=IKcos(j16);
IkReal x10959=(gconst5*x10958);
IkReal x10960=((1.0)*gconst4*x10958);
evalcond[0]=(r02*x10958);
evalcond[1]=((((-1.0)*r21*x10960))+((r20*x10959)));
evalcond[2]=(((r10*x10959))+(((-1.0)*r11*x10960)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j16]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x10962=IKPowWithIntegerCheck(r02,-1);
if(!x10962.valid){
continue;
}
IkReal x10961=x10962.value;
CheckValue<IkReal> x10963=IKPowWithIntegerCheck(cj15,-1);
if(!x10963.valid){
continue;
}
if( IKabs(((-1.0)*sj12*x10961)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x10961*(x10963.value)*((((cj12*cj13*cj14))+(((-1.0)*cj12*sj13*sj14)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj12*x10961))+IKsqr((x10961*(x10963.value)*((((cj12*cj13*cj14))+(((-1.0)*cj12*sj13*sj14))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((-1.0)*sj12*x10961), (x10961*(x10963.value)*((((cj12*cj13*cj14))+(((-1.0)*cj12*sj13*sj14))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x10964=IKcos(j16);
IkReal x10965=IKsin(j16);
IkReal x10966=(gconst4*sj15);
IkReal x10967=(cj13*cj14);
IkReal x10968=((1.0)*cj15);
IkReal x10969=(gconst5*r11);
IkReal x10970=(gconst5*r21);
IkReal x10971=(gconst4*r11);
IkReal x10972=((1.0)*sj12);
IkReal x10973=(sj13*sj14);
IkReal x10974=((1.0)*sj15);
IkReal x10975=(cj13*sj14);
IkReal x10976=(gconst4*r21);
IkReal x10977=(cj14*sj13);
IkReal x10978=((1.0)*cj12*sj13);
IkReal x10979=(gconst5*x10965);
IkReal x10980=((1.0)*x10964);
IkReal x10981=(gconst5*x10964);
IkReal x10982=(cj15*x10965);
evalcond[0]=((((-1.0)*x10972))+(((-1.0)*r02*x10965)));
evalcond[1]=(((r20*x10981))+(((-1.0)*x10976*x10980)));
evalcond[2]=((((-1.0)*x10971*x10980))+cj12+((r10*x10981)));
evalcond[3]=(((cj12*x10967))+(((-1.0)*r02*x10964*x10968))+(((-1.0)*cj12*x10973)));
evalcond[4]=((((-1.0)*r02*x10964*x10974))+(((-1.0)*cj12*x10977))+(((-1.0)*cj12*x10975)));
evalcond[5]=(((r20*x10966))+((sj15*x10970))+((x10976*x10982))+(((-1.0)*x10977))+(((-1.0)*x10975))+(((-1.0)*r20*x10968*x10979)));
evalcond[6]=((((-1.0)*x10968*x10970))+(((-1.0)*gconst4*r20*x10968))+(((-1.0)*r20*x10974*x10979))+((r21*x10965*x10966))+(((-1.0)*x10967))+x10973);
evalcond[7]=(((sj12*x10967))+(((-1.0)*r10*x10968*x10979))+(((-1.0)*x10972*x10973))+((sj15*x10969))+((x10971*x10982))+((r10*x10966)));
evalcond[8]=((((-1.0)*r10*x10974*x10979))+((r11*x10965*x10966))+(((-1.0)*x10968*x10969))+(((-1.0)*x10972*x10977))+(((-1.0)*x10972*x10975))+(((-1.0)*gconst4*r10*x10968)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x10983=((1.0)*gconst5);
IkReal x10984=((1.0)*gconst4);
CheckValue<IkReal> x10985=IKPowWithIntegerCheck(((((-1.0)*cj15*r20*x10983))+((cj15*gconst4*r21))),-1);
if(!x10985.valid){
continue;
}
CheckValue<IkReal> x10986=IKPowWithIntegerCheck((((gconst5*r10))+(((-1.0)*r11*x10984))),-1);
if(!x10986.valid){
continue;
}
if( IKabs(((x10985.value)*(((((-1.0)*r20*sj15*x10984))+((cj14*sj13))+(((-1.0)*r21*sj15*x10983))+((cj13*sj14)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj12*(x10986.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10985.value)*(((((-1.0)*r20*sj15*x10984))+((cj14*sj13))+(((-1.0)*r21*sj15*x10983))+((cj13*sj14))))))+IKsqr(((-1.0)*cj12*(x10986.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x10985.value)*(((((-1.0)*r20*sj15*x10984))+((cj14*sj13))+(((-1.0)*r21*sj15*x10983))+((cj13*sj14))))), ((-1.0)*cj12*(x10986.value)));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x10987=IKcos(j16);
IkReal x10988=IKsin(j16);
IkReal x10989=(gconst4*sj15);
IkReal x10990=(cj13*cj14);
IkReal x10991=((1.0)*cj15);
IkReal x10992=(gconst5*r11);
IkReal x10993=(gconst5*r21);
IkReal x10994=(gconst4*r11);
IkReal x10995=((1.0)*sj12);
IkReal x10996=(sj13*sj14);
IkReal x10997=((1.0)*sj15);
IkReal x10998=(cj13*sj14);
IkReal x10999=(gconst4*r21);
IkReal x11000=(cj14*sj13);
IkReal x11001=((1.0)*cj12*sj13);
IkReal x11002=(gconst5*x10988);
IkReal x11003=((1.0)*x10987);
IkReal x11004=(gconst5*x10987);
IkReal x11005=(cj15*x10988);
evalcond[0]=((((-1.0)*x10995))+(((-1.0)*r02*x10988)));
evalcond[1]=(((r20*x11004))+(((-1.0)*x10999*x11003)));
evalcond[2]=((((-1.0)*x10994*x11003))+((r10*x11004))+cj12);
evalcond[3]=((((-1.0)*r02*x10987*x10991))+(((-1.0)*cj12*x10996))+((cj12*x10990)));
evalcond[4]=((((-1.0)*r02*x10987*x10997))+(((-1.0)*cj12*x11000))+(((-1.0)*cj12*x10998)));
evalcond[5]=(((sj15*x10993))+(((-1.0)*x10998))+((r20*x10989))+(((-1.0)*r20*x10991*x11002))+(((-1.0)*x11000))+((x10999*x11005)));
evalcond[6]=((((-1.0)*r20*x10997*x11002))+(((-1.0)*x10991*x10993))+((r21*x10988*x10989))+(((-1.0)*x10990))+(((-1.0)*gconst4*r20*x10991))+x10996);
evalcond[7]=(((x10994*x11005))+(((-1.0)*r10*x10991*x11002))+((sj15*x10992))+(((-1.0)*x10995*x10996))+((r10*x10989))+((sj12*x10990)));
evalcond[8]=((((-1.0)*x10991*x10992))+(((-1.0)*r10*x10997*x11002))+(((-1.0)*x10995*x10998))+(((-1.0)*x10995*x11000))+((r11*x10988*x10989))+(((-1.0)*gconst4*r10*x10991)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x11006=IKPowWithIntegerCheck(r02,-1);
if(!x11006.valid){
continue;
}
CheckValue<IkReal> x11007=IKPowWithIntegerCheck((((gconst5*r10))+(((-1.0)*gconst4*r11))),-1);
if(!x11007.valid){
continue;
}
if( IKabs(((-1.0)*sj12*(x11006.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj12*(x11007.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj12*(x11006.value)))+IKsqr(((-1.0)*cj12*(x11007.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((-1.0)*sj12*(x11006.value)), ((-1.0)*cj12*(x11007.value)));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x11008=IKcos(j16);
IkReal x11009=IKsin(j16);
IkReal x11010=(gconst4*sj15);
IkReal x11011=(cj13*cj14);
IkReal x11012=((1.0)*cj15);
IkReal x11013=(gconst5*r11);
IkReal x11014=(gconst5*r21);
IkReal x11015=(gconst4*r11);
IkReal x11016=((1.0)*sj12);
IkReal x11017=(sj13*sj14);
IkReal x11018=((1.0)*sj15);
IkReal x11019=(cj13*sj14);
IkReal x11020=(gconst4*r21);
IkReal x11021=(cj14*sj13);
IkReal x11022=((1.0)*cj12*sj13);
IkReal x11023=(gconst5*x11009);
IkReal x11024=((1.0)*x11008);
IkReal x11025=(gconst5*x11008);
IkReal x11026=(cj15*x11009);
evalcond[0]=((((-1.0)*x11016))+(((-1.0)*r02*x11009)));
evalcond[1]=(((r20*x11025))+(((-1.0)*x11020*x11024)));
evalcond[2]=((((-1.0)*x11015*x11024))+((r10*x11025))+cj12);
evalcond[3]=((((-1.0)*r02*x11008*x11012))+(((-1.0)*cj12*x11017))+((cj12*x11011)));
evalcond[4]=((((-1.0)*r02*x11008*x11018))+(((-1.0)*cj12*x11019))+(((-1.0)*cj12*x11021)));
evalcond[5]=((((-1.0)*x11021))+((r20*x11010))+(((-1.0)*r20*x11012*x11023))+((x11020*x11026))+((sj15*x11014))+(((-1.0)*x11019)));
evalcond[6]=((((-1.0)*r20*x11018*x11023))+(((-1.0)*x11012*x11014))+(((-1.0)*gconst4*r20*x11012))+x11017+((r21*x11009*x11010))+(((-1.0)*x11011)));
evalcond[7]=(((sj12*x11011))+((x11015*x11026))+((r10*x11010))+(((-1.0)*r10*x11012*x11023))+((sj15*x11013))+(((-1.0)*x11016*x11017)));
evalcond[8]=((((-1.0)*x11012*x11013))+((r11*x11009*x11010))+(((-1.0)*gconst4*r10*x11012))+(((-1.0)*x11016*x11021))+(((-1.0)*r10*x11018*x11023))+(((-1.0)*x11016*x11019)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j16]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x11027=((1.0)*cj12);
IkReal x11028=((1.0)*sj12);
CheckValue<IkReal> x11029=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11029.valid){
continue;
}
CheckValue<IkReal> x11030 = IKatan2WithCheck(IkReal(((((-1.0)*gconst5*r00*x11027))+((cj12*gconst4*r01))+((gconst4*r11*sj12))+(((-1.0)*gconst5*r10*x11028)))),IkReal(((((-1.0)*r02*x11027))+(((-1.0)*r12*x11028)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11030.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11029.value)))+(x11030.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x11031=IKcos(j16);
IkReal x11032=IKsin(j16);
IkReal x11033=(gconst4*sj15);
IkReal x11034=((1.0)*cj14);
IkReal x11035=(sj12*sj13);
IkReal x11036=((1.0)*cj15);
IkReal x11037=(gconst5*r21);
IkReal x11038=((1.0)*sj15);
IkReal x11039=(cj12*sj13);
IkReal x11040=((1.0)*sj14);
IkReal x11041=(cj13*cj14);
IkReal x11042=(gconst5*r11);
IkReal x11043=(gconst5*r01);
IkReal x11044=(r12*x11031);
IkReal x11045=(gconst5*x11032);
IkReal x11046=((1.0)*x11032);
IkReal x11047=(r22*x11031);
IkReal x11048=(gconst5*x11031);
IkReal x11049=(r02*x11031);
IkReal x11050=(cj15*gconst4*x11032);
IkReal x11051=((1.0)*gconst4*x11031);
evalcond[0]=(((r20*x11048))+(((-1.0)*r22*x11046))+(((-1.0)*r21*x11051)));
evalcond[1]=(((r10*x11048))+(((-1.0)*r11*x11051))+(((-1.0)*r12*x11046))+cj12);
evalcond[2]=((((-1.0)*r01*x11051))+((r00*x11048))+(((-1.0)*sj12))+(((-1.0)*r02*x11046)));
evalcond[3]=(((r20*x11033))+(((-1.0)*sj13*x11034))+(((-1.0)*r20*x11036*x11045))+(((-1.0)*x11036*x11047))+((sj15*x11037))+(((-1.0)*cj13*x11040))+((r21*x11050)));
evalcond[4]=(((r21*x11032*x11033))+(((-1.0)*r20*x11038*x11045))+(((-1.0)*x11036*x11037))+((sj13*sj14))+(((-1.0)*cj13*x11034))+(((-1.0)*gconst4*r20*x11036))+(((-1.0)*x11038*x11047)));
evalcond[5]=(((r00*x11033))+(((-1.0)*x11036*x11049))+((r01*x11050))+((sj15*x11043))+((cj12*x11041))+(((-1.0)*x11039*x11040))+(((-1.0)*r00*x11036*x11045)));
evalcond[6]=((((-1.0)*r10*x11036*x11045))+((sj12*x11041))+(((-1.0)*x11036*x11044))+((r10*x11033))+(((-1.0)*x11035*x11040))+((sj15*x11042))+((r11*x11050)));
evalcond[7]=((((-1.0)*x11034*x11039))+(((-1.0)*gconst4*r00*x11036))+(((-1.0)*cj12*cj13*x11040))+(((-1.0)*x11036*x11043))+(((-1.0)*r00*x11038*x11045))+((r01*x11032*x11033))+(((-1.0)*x11038*x11049)));
evalcond[8]=((((-1.0)*x11034*x11035))+((r11*x11032*x11033))+(((-1.0)*cj13*sj12*x11040))+(((-1.0)*x11036*x11042))+(((-1.0)*r10*x11038*x11045))+(((-1.0)*x11038*x11044))+(((-1.0)*gconst4*r10*x11036)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x11052=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11052.valid){
continue;
}
CheckValue<IkReal> x11053 = IKatan2WithCheck(IkReal((((gconst5*r20*sj12))+(((-1.0)*gconst4*r21*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x11053.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11052.value)))+(x11053.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x11054=IKcos(j16);
IkReal x11055=IKsin(j16);
IkReal x11056=(gconst4*sj15);
IkReal x11057=((1.0)*cj14);
IkReal x11058=(sj12*sj13);
IkReal x11059=((1.0)*cj15);
IkReal x11060=(gconst5*r21);
IkReal x11061=((1.0)*sj15);
IkReal x11062=(cj12*sj13);
IkReal x11063=((1.0)*sj14);
IkReal x11064=(cj13*cj14);
IkReal x11065=(gconst5*r11);
IkReal x11066=(gconst5*r01);
IkReal x11067=(r12*x11054);
IkReal x11068=(gconst5*x11055);
IkReal x11069=((1.0)*x11055);
IkReal x11070=(r22*x11054);
IkReal x11071=(gconst5*x11054);
IkReal x11072=(r02*x11054);
IkReal x11073=(cj15*gconst4*x11055);
IkReal x11074=((1.0)*gconst4*x11054);
evalcond[0]=((((-1.0)*r22*x11069))+(((-1.0)*r21*x11074))+((r20*x11071)));
evalcond[1]=((((-1.0)*r11*x11074))+((r10*x11071))+cj12+(((-1.0)*r12*x11069)));
evalcond[2]=((((-1.0)*r02*x11069))+(((-1.0)*sj12))+(((-1.0)*r01*x11074))+((r00*x11071)));
evalcond[3]=(((r20*x11056))+(((-1.0)*sj13*x11057))+((r21*x11073))+(((-1.0)*x11059*x11070))+((sj15*x11060))+(((-1.0)*cj13*x11063))+(((-1.0)*r20*x11059*x11068)));
evalcond[4]=((((-1.0)*x11061*x11070))+(((-1.0)*gconst4*r20*x11059))+((r21*x11055*x11056))+((sj13*sj14))+(((-1.0)*r20*x11061*x11068))+(((-1.0)*cj13*x11057))+(((-1.0)*x11059*x11060)));
evalcond[5]=((((-1.0)*x11059*x11072))+(((-1.0)*r00*x11059*x11068))+((r00*x11056))+((sj15*x11066))+(((-1.0)*x11062*x11063))+((r01*x11073))+((cj12*x11064)));
evalcond[6]=(((sj12*x11064))+((r10*x11056))+(((-1.0)*x11058*x11063))+((r11*x11073))+(((-1.0)*r10*x11059*x11068))+((sj15*x11065))+(((-1.0)*x11059*x11067)));
evalcond[7]=(((r01*x11055*x11056))+(((-1.0)*x11061*x11072))+(((-1.0)*gconst4*r00*x11059))+(((-1.0)*x11057*x11062))+(((-1.0)*x11059*x11066))+(((-1.0)*cj12*cj13*x11063))+(((-1.0)*r00*x11061*x11068)));
evalcond[8]=(((r11*x11055*x11056))+(((-1.0)*x11061*x11067))+(((-1.0)*gconst4*r10*x11059))+(((-1.0)*r10*x11061*x11068))+(((-1.0)*x11059*x11065))+(((-1.0)*cj13*sj12*x11063))+(((-1.0)*x11057*x11058)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x11075 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*gconst4*r21))+((cj12*gconst5*r20)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x11075.valid){
continue;
}
CheckValue<IkReal> x11076=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x11076.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x11075.value)+(((1.5707963267949)*(x11076.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x11077=IKcos(j16);
IkReal x11078=IKsin(j16);
IkReal x11079=(gconst4*sj15);
IkReal x11080=((1.0)*cj14);
IkReal x11081=(sj12*sj13);
IkReal x11082=((1.0)*cj15);
IkReal x11083=(gconst5*r21);
IkReal x11084=((1.0)*sj15);
IkReal x11085=(cj12*sj13);
IkReal x11086=((1.0)*sj14);
IkReal x11087=(cj13*cj14);
IkReal x11088=(gconst5*r11);
IkReal x11089=(gconst5*r01);
IkReal x11090=(r12*x11077);
IkReal x11091=(gconst5*x11078);
IkReal x11092=((1.0)*x11078);
IkReal x11093=(r22*x11077);
IkReal x11094=(gconst5*x11077);
IkReal x11095=(r02*x11077);
IkReal x11096=(cj15*gconst4*x11078);
IkReal x11097=((1.0)*gconst4*x11077);
evalcond[0]=((((-1.0)*r22*x11092))+((r20*x11094))+(((-1.0)*r21*x11097)));
evalcond[1]=((((-1.0)*r12*x11092))+(((-1.0)*r11*x11097))+cj12+((r10*x11094)));
evalcond[2]=(((r00*x11094))+(((-1.0)*r02*x11092))+(((-1.0)*r01*x11097))+(((-1.0)*sj12)));
evalcond[3]=((((-1.0)*r20*x11082*x11091))+(((-1.0)*sj13*x11080))+((sj15*x11083))+((r20*x11079))+(((-1.0)*cj13*x11086))+(((-1.0)*x11082*x11093))+((r21*x11096)));
evalcond[4]=((((-1.0)*r20*x11084*x11091))+(((-1.0)*x11082*x11083))+(((-1.0)*x11084*x11093))+(((-1.0)*gconst4*r20*x11082))+((sj13*sj14))+((r21*x11078*x11079))+(((-1.0)*cj13*x11080)));
evalcond[5]=(((r01*x11096))+((sj15*x11089))+((cj12*x11087))+((r00*x11079))+(((-1.0)*r00*x11082*x11091))+(((-1.0)*x11085*x11086))+(((-1.0)*x11082*x11095)));
evalcond[6]=(((sj12*x11087))+(((-1.0)*x11081*x11086))+((r11*x11096))+((r10*x11079))+((sj15*x11088))+(((-1.0)*r10*x11082*x11091))+(((-1.0)*x11082*x11090)));
evalcond[7]=(((r01*x11078*x11079))+(((-1.0)*gconst4*r00*x11082))+(((-1.0)*x11080*x11085))+(((-1.0)*r00*x11084*x11091))+(((-1.0)*x11082*x11089))+(((-1.0)*x11084*x11095))+(((-1.0)*cj12*cj13*x11086)));
evalcond[8]=((((-1.0)*x11080*x11081))+(((-1.0)*x11082*x11088))+(((-1.0)*cj13*sj12*x11086))+(((-1.0)*x11084*x11090))+((r11*x11078*x11079))+(((-1.0)*gconst4*r10*x11082))+(((-1.0)*r10*x11084*x11091)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11099 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x11099)==0){
continue;
}
IkReal x11098=pow(x11099,-0.5);
CheckValue<IkReal> x11100 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x11100.valid){
continue;
}
IkReal gconst6=((-1.0)*(x11100.value));
IkReal gconst7=((-1.0)*r11*x11098);
IkReal gconst8=(r10*x11098);
CheckValue<IkReal> x11101 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x11101.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x11101.value)+j17)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
CheckValue<IkReal> x11104 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x11104.valid){
continue;
}
IkReal x11102=((-1.0)*(x11104.value));
IkReal x11103=x11098;
sj17=gconst7;
cj17=gconst8;
j17=x11102;
IkReal gconst6=x11102;
IkReal gconst7=((-1.0)*r11*x11103);
IkReal gconst8=(r10*x11103);
j16eval[0]=cj12;
j16eval[1]=r22;
j16eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x11105=((1.0)*sj12);
IkReal x11106=((1.0)*cj12);
CheckValue<IkReal> x11107 = IKatan2WithCheck(IkReal((((gconst7*r11*sj12))+((cj12*gconst7*r01))+(((-1.0)*gconst8*r10*x11105))+(((-1.0)*gconst8*r00*x11106)))),IkReal(((((-1.0)*r02*x11106))+(((-1.0)*r12*x11105)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11107.valid){
continue;
}
CheckValue<IkReal> x11108=IKPowWithIntegerCheck(IKsign((((gconst7*r20))+((gconst8*r21)))),-1);
if(!x11108.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x11107.value)+(((1.5707963267949)*(x11108.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x11109=IKcos(j16);
IkReal x11110=IKsin(j16);
IkReal x11111=((1.0)*cj15);
IkReal x11112=(gconst8*sj15);
IkReal x11113=(gconst7*r01);
IkReal x11114=((1.0)*sj15);
IkReal x11115=(cj12*cj14);
IkReal x11116=((1.0)*sj13);
IkReal x11117=((1.0)*sj12);
IkReal x11118=(gconst7*r20);
IkReal x11119=(cj13*sj14);
IkReal x11120=(gconst7*r00);
IkReal x11121=(gconst7*r10);
IkReal x11122=(gconst7*r11);
IkReal x11123=(cj13*cj14);
IkReal x11124=(gconst7*r21);
IkReal x11125=(gconst8*x11110);
IkReal x11126=((1.0)*x11109);
IkReal x11127=((1.0)*cj12*sj14);
IkReal x11128=((1.0)*x11110);
IkReal x11129=(gconst8*x11109);
IkReal x11130=(sj15*x11110);
IkReal x11131=(cj15*gconst7*x11110);
evalcond[0]=((((-1.0)*r22*x11128))+(((-1.0)*x11124*x11126))+((r20*x11129)));
evalcond[1]=((((-1.0)*r12*x11128))+((r10*x11129))+cj12+(((-1.0)*x11122*x11126)));
evalcond[2]=((((-1.0)*x11113*x11126))+(((-1.0)*r02*x11128))+(((-1.0)*x11117))+((r00*x11129)));
evalcond[3]=((((-1.0)*x11119))+(((-1.0)*r22*x11109*x11111))+((sj15*x11118))+((r21*x11112))+(((-1.0)*cj14*x11116))+(((-1.0)*r20*x11111*x11125))+((cj15*x11110*x11124)));
evalcond[4]=((((-1.0)*r22*x11109*x11114))+(((-1.0)*x11123))+((x11124*x11130))+(((-1.0)*x11111*x11118))+(((-1.0)*r20*x11112*x11128))+((sj13*sj14))+(((-1.0)*gconst8*r21*x11111)));
evalcond[5]=(((cj13*x11115))+(((-1.0)*r00*x11111*x11125))+(((-1.0)*r02*x11109*x11111))+((sj15*x11120))+((cj15*x11110*x11113))+((r01*x11112))+(((-1.0)*cj12*sj14*x11116)));
evalcond[6]=(((sj12*x11123))+(((-1.0)*r10*x11111*x11125))+(((-1.0)*sj12*sj14*x11116))+(((-1.0)*r12*x11109*x11111))+((sj15*x11121))+((r11*x11112))+((cj15*x11110*x11122)));
evalcond[7]=(((x11113*x11130))+(((-1.0)*x11115*x11116))+(((-1.0)*r02*x11109*x11114))+(((-1.0)*x11111*x11120))+(((-1.0)*r00*x11112*x11128))+(((-1.0)*cj12*x11119))+(((-1.0)*gconst8*r01*x11111)));
evalcond[8]=(((x11122*x11130))+(((-1.0)*r10*x11112*x11128))+(((-1.0)*gconst8*r11*x11111))+(((-1.0)*x11111*x11121))+(((-1.0)*r12*x11109*x11114))+(((-1.0)*x11117*x11119))+(((-1.0)*cj14*sj12*x11116)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x11132 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*gconst7*r21))+((cj12*gconst8*r20)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x11132.valid){
continue;
}
CheckValue<IkReal> x11133=IKPowWithIntegerCheck(IKsign((((gconst7*r00))+((gconst8*r01)))),-1);
if(!x11133.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x11132.value)+(((1.5707963267949)*(x11133.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x11134=IKcos(j16);
IkReal x11135=IKsin(j16);
IkReal x11136=((1.0)*cj15);
IkReal x11137=(gconst8*sj15);
IkReal x11138=(gconst7*r01);
IkReal x11139=((1.0)*sj15);
IkReal x11140=(cj12*cj14);
IkReal x11141=((1.0)*sj13);
IkReal x11142=((1.0)*sj12);
IkReal x11143=(gconst7*r20);
IkReal x11144=(cj13*sj14);
IkReal x11145=(gconst7*r00);
IkReal x11146=(gconst7*r10);
IkReal x11147=(gconst7*r11);
IkReal x11148=(cj13*cj14);
IkReal x11149=(gconst7*r21);
IkReal x11150=(gconst8*x11135);
IkReal x11151=((1.0)*x11134);
IkReal x11152=((1.0)*cj12*sj14);
IkReal x11153=((1.0)*x11135);
IkReal x11154=(gconst8*x11134);
IkReal x11155=(sj15*x11135);
IkReal x11156=(cj15*gconst7*x11135);
evalcond[0]=((((-1.0)*r22*x11153))+(((-1.0)*x11149*x11151))+((r20*x11154)));
evalcond[1]=(cj12+((r10*x11154))+(((-1.0)*x11147*x11151))+(((-1.0)*r12*x11153)));
evalcond[2]=((((-1.0)*x11138*x11151))+((r00*x11154))+(((-1.0)*r02*x11153))+(((-1.0)*x11142)));
evalcond[3]=((((-1.0)*r20*x11136*x11150))+((cj15*x11135*x11149))+((sj15*x11143))+(((-1.0)*x11144))+((r21*x11137))+(((-1.0)*cj14*x11141))+(((-1.0)*r22*x11134*x11136)));
evalcond[4]=((((-1.0)*x11148))+((x11149*x11155))+((sj13*sj14))+(((-1.0)*x11136*x11143))+(((-1.0)*r22*x11134*x11139))+(((-1.0)*gconst8*r21*x11136))+(((-1.0)*r20*x11137*x11153)));
evalcond[5]=((((-1.0)*r02*x11134*x11136))+((sj15*x11145))+((cj13*x11140))+(((-1.0)*r00*x11136*x11150))+((cj15*x11135*x11138))+((r01*x11137))+(((-1.0)*cj12*sj14*x11141)));
evalcond[6]=((((-1.0)*r10*x11136*x11150))+((cj15*x11135*x11147))+((sj15*x11146))+(((-1.0)*r12*x11134*x11136))+(((-1.0)*sj12*sj14*x11141))+((r11*x11137))+((sj12*x11148)));
evalcond[7]=((((-1.0)*r02*x11134*x11139))+(((-1.0)*x11140*x11141))+(((-1.0)*cj12*x11144))+((x11138*x11155))+(((-1.0)*r00*x11137*x11153))+(((-1.0)*x11136*x11145))+(((-1.0)*gconst8*r01*x11136)));
evalcond[8]=(((x11147*x11155))+(((-1.0)*r10*x11137*x11153))+(((-1.0)*x11142*x11144))+(((-1.0)*r12*x11134*x11139))+(((-1.0)*gconst8*r11*x11136))+(((-1.0)*cj14*sj12*x11141))+(((-1.0)*x11136*x11146)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11158 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x11158)==0){
continue;
}
IkReal x11157=pow(x11158,-0.5);
CheckValue<IkReal> x11159 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x11159.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x11159.value))));
IkReal gconst10=((1.0)*r11*x11157);
IkReal gconst11=((-1.0)*r10*x11157);
CheckValue<IkReal> x11160 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x11160.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x11160.value)+j17)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
CheckValue<IkReal> x11163 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x11163.valid){
continue;
}
IkReal x11161=((1.0)*(x11163.value));
IkReal x11162=x11157;
sj17=gconst10;
cj17=gconst11;
j17=((3.14159265)+(((-1.0)*x11161)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11161)));
IkReal gconst10=((1.0)*r11*x11162);
IkReal gconst11=((-1.0)*r10*x11162);
j16eval[0]=cj12;
j16eval[1]=r22;
j16eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[5];
CheckValue<IkReal> x11166 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x11166.valid){
continue;
}
IkReal x11164=((1.0)*(x11166.value));
IkReal x11165=x11157;
sj17=gconst10;
cj17=gconst11;
j17=((3.14159265)+(((-1.0)*x11164)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11164)));
IkReal gconst10=((1.0)*r11*x11165);
IkReal gconst11=((-1.0)*r10*x11165);
j16eval[0]=0;
j16eval[1]=r22;
j16eval[2]=sj12;
j16eval[3]=((1.0)+(((-1.0)*(r12*r12))));
j16eval[4]=0;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  || IKabs(j16eval[3]) < 0.0000010000000000  || IKabs(j16eval[4]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x11169 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x11169.valid){
continue;
}
IkReal x11167=((1.0)*(x11169.value));
IkReal x11168=x11157;
sj17=gconst10;
cj17=gconst11;
j17=((3.14159265)+(((-1.0)*x11167)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11167)));
IkReal gconst10=((1.0)*r11*x11168);
IkReal gconst11=((-1.0)*r10*x11168);
IkReal x11170=r12*r12;
IkReal x11171=(cj12*r02);
IkReal x11172=x11157;
IkReal x11173=(sj12*x11172);
j16eval[0]=((IKabs(((((-1.0)*x11171))+(((-1.0)*r12*sj12)))))+(IKabs((((r12*x11171*x11172))+(((-1.0)*x11173))+((x11170*x11173))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j12))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
IkReal x11174=(gconst11*r10);
IkReal x11175=(gconst10*r11);
op[0]=((1.0)+(((-1.0)*x11174))+x11175);
op[1]=((-2.0)*r12);
op[2]=((1.0)+(((-1.0)*x11175))+x11174);
polyroots2(op,zeror,numroots);
IkReal j16array[2], cj16array[2], sj16array[2], tempj16array[1];
int numsolutions = 0;
for(int ij16 = 0; ij16 < numroots; ++ij16)
{
IkReal htj16 = zeror[ij16];
tempj16array[0]=((2.0)*(atan(htj16)));
for(int kj16 = 0; kj16 < 1; ++kj16)
{
j16array[numsolutions] = tempj16array[kj16];
if( j16array[numsolutions] > IKPI )
{
    j16array[numsolutions]-=IK2PI;
}
else if( j16array[numsolutions] < -IKPI )
{
    j16array[numsolutions]+=IK2PI;
}
sj16array[numsolutions] = IKsin(j16array[numsolutions]);
cj16array[numsolutions] = IKcos(j16array[numsolutions]);
numsolutions++;
}
}
bool j16valid[2]={true,true};
_nj16 = 2;
for(int ij16 = 0; ij16 < numsolutions; ++ij16)
    {
if( !j16valid[ij16] )
{
    continue;
}
    j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
htj16 = IKtan(j16/2);

_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < numsolutions; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
IkReal x11176=(gconst11*r00);
IkReal x11177=(gconst10*r01);
op[0]=((((-1.0)*x11176))+x11177);
op[1]=((-2.0)*r02);
op[2]=((((-1.0)*x11177))+x11176);
polyroots2(op,zeror,numroots);
IkReal j16array[2], cj16array[2], sj16array[2], tempj16array[1];
int numsolutions = 0;
for(int ij16 = 0; ij16 < numroots; ++ij16)
{
IkReal htj16 = zeror[ij16];
tempj16array[0]=((2.0)*(atan(htj16)));
for(int kj16 = 0; kj16 < 1; ++kj16)
{
j16array[numsolutions] = tempj16array[kj16];
if( j16array[numsolutions] > IKPI )
{
    j16array[numsolutions]-=IK2PI;
}
else if( j16array[numsolutions] < -IKPI )
{
    j16array[numsolutions]+=IK2PI;
}
sj16array[numsolutions] = IKsin(j16array[numsolutions]);
cj16array[numsolutions] = IKcos(j16array[numsolutions]);
numsolutions++;
}
}
bool j16valid[2]={true,true};
_nj16 = 2;
for(int ij16 = 0; ij16 < numsolutions; ++ij16)
    {
if( !j16valid[ij16] )
{
    continue;
}
    j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
htj16 = IKtan(j16/2);

_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < numsolutions; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[4];
CheckValue<IkReal> x11180 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x11180.valid){
continue;
}
IkReal x11178=((1.0)*(x11180.value));
IkReal x11179=x11157;
sj17=gconst10;
cj17=gconst11;
j17=((3.14159265)+(((-1.0)*x11178)));
sj12=1.0;
cj12=0;
j12=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11178)));
IkReal gconst10=((1.0)*r11*x11179);
IkReal gconst11=((-1.0)*r10*x11179);
j16eval[0]=0;
j16eval[1]=r22;
j16eval[2]=((1.0)+(((-1.0)*(r12*r12))));
j16eval[3]=0;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  || IKabs(j16eval[3]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x11183 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x11183.valid){
continue;
}
IkReal x11181=((1.0)*(x11183.value));
IkReal x11182=x11157;
sj17=gconst10;
cj17=gconst11;
j17=((3.14159265)+(((-1.0)*x11181)));
sj12=1.0;
cj12=0;
j12=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11181)));
IkReal gconst10=((1.0)*r11*x11182);
IkReal gconst11=((-1.0)*r10*x11182);
j16eval[0]=1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x11184=gconst10*gconst10;
IkReal x11185=gconst11*gconst11;
IkReal x11186=(r20*sj15);
IkReal x11187=(gconst10*gconst11);
IkReal x11188=(r22*sj15);
IkReal x11189=((1.0)*cj15);
IkReal x11190=(r00*r21);
IkReal x11191=((1.0)*sj15);
IkReal x11192=(r01*r21);
CheckValue<IkReal> x11193 = IKatan2WithCheck(IkReal(((((-1.0)*x11184*x11190*x11191))+((r01*x11185*x11186))+(((-1.0)*x11187*x11191*x11192))+((r00*x11186*x11187)))),IkReal((((gconst10*r00*x11188))+((gconst11*r01*x11188)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11193.valid){
continue;
}
CheckValue<IkReal> x11194=IKPowWithIntegerCheck(IKsign(((((-1.0)*x11187*x11189*x11190))+((cj15*r00*r20*x11185))+((cj15*x11184*x11192))+(((-1.0)*r01*r20*x11187*x11189))+((cj15*r02*r22)))),-1);
if(!x11194.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x11193.value)+(((1.5707963267949)*(x11194.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x11195=IKcos(j16);
IkReal x11196=IKsin(j16);
IkReal x11197=((1.0)*cj15);
IkReal x11198=(gconst11*r01);
IkReal x11199=((1.0)*sj15);
IkReal x11200=(gconst11*r21);
IkReal x11201=(gconst10*r00);
IkReal x11202=(cj13*cj14);
IkReal x11203=(gconst10*r10);
IkReal x11204=(gconst10*r20);
IkReal x11205=(gconst11*r11);
IkReal x11206=((1.0)*sj14);
IkReal x11207=((1.0)*cj14*sj13);
IkReal x11208=(cj13*x11206);
IkReal x11209=(gconst11*x11195);
IkReal x11210=(r02*x11195);
IkReal x11211=(r12*x11195);
IkReal x11212=(gconst11*x11196);
IkReal x11213=((1.0)*x11196);
IkReal x11214=(r22*x11195);
IkReal x11215=(gconst10*r01*x11196);
IkReal x11216=(cj15*gconst10*x11196);
IkReal x11217=(gconst10*sj15*x11196);
IkReal x11218=((1.0)*gconst10*x11195);
IkReal x11219=(x11207+x11208);
evalcond[0]=(((r20*x11209))+(((-1.0)*r21*x11218))+(((-1.0)*r22*x11213)));
evalcond[1]=((((-1.0)*r11*x11218))+(((-1.0)*r12*x11213))+((r10*x11209)));
evalcond[2]=((-1.0)+(((-1.0)*r01*x11218))+((r00*x11209))+(((-1.0)*r02*x11213)));
evalcond[3]=((((-1.0)*x11197*x11210))+((sj15*x11201))+(((-1.0)*r00*x11197*x11212))+((cj15*x11215))+((sj15*x11198)));
evalcond[4]=(((sj15*x11215))+(((-1.0)*x11197*x11201))+(((-1.0)*x11199*x11210))+(((-1.0)*x11197*x11198))+(((-1.0)*r00*x11199*x11212)));
evalcond[5]=((((-1.0)*x11197*x11211))+((sj15*x11205))+((sj15*x11203))+(((-1.0)*sj13*x11206))+x11202+(((-1.0)*r10*x11197*x11212))+((r11*x11216)));
evalcond[6]=(((r21*x11216))+(((-1.0)*x11197*x11214))+(((-1.0)*x11219))+((sj15*x11200))+((sj15*x11204))+(((-1.0)*r20*x11197*x11212)));
evalcond[7]=(((r21*x11217))+(((-1.0)*x11197*x11204))+(((-1.0)*x11197*x11200))+(((-1.0)*x11199*x11214))+((sj13*sj14))+(((-1.0)*x11202))+(((-1.0)*r20*x11199*x11212)));
evalcond[8]=((((-1.0)*x11219))+(((-1.0)*x11197*x11203))+(((-1.0)*x11197*x11205))+(((-1.0)*x11199*x11211))+((r11*x11217))+(((-1.0)*r10*x11199*x11212)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x11220=((1.0)*gconst10);
CheckValue<IkReal> x11221=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11220))+(((-1.0)*gconst11*r21)))),-1);
if(!x11221.valid){
continue;
}
CheckValue<IkReal> x11222 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x11220))+((gconst11*r10)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x11222.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11221.value)))+(x11222.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x11223=IKcos(j16);
IkReal x11224=IKsin(j16);
IkReal x11225=((1.0)*cj15);
IkReal x11226=(gconst11*r01);
IkReal x11227=((1.0)*sj15);
IkReal x11228=(gconst11*r21);
IkReal x11229=(gconst10*r00);
IkReal x11230=(cj13*cj14);
IkReal x11231=(gconst10*r10);
IkReal x11232=(gconst10*r20);
IkReal x11233=(gconst11*r11);
IkReal x11234=((1.0)*sj14);
IkReal x11235=((1.0)*cj14*sj13);
IkReal x11236=(cj13*x11234);
IkReal x11237=(gconst11*x11223);
IkReal x11238=(r02*x11223);
IkReal x11239=(r12*x11223);
IkReal x11240=(gconst11*x11224);
IkReal x11241=((1.0)*x11224);
IkReal x11242=(r22*x11223);
IkReal x11243=(gconst10*r01*x11224);
IkReal x11244=(cj15*gconst10*x11224);
IkReal x11245=(gconst10*sj15*x11224);
IkReal x11246=((1.0)*gconst10*x11223);
IkReal x11247=(x11236+x11235);
evalcond[0]=(((r20*x11237))+(((-1.0)*r21*x11246))+(((-1.0)*r22*x11241)));
evalcond[1]=(((r10*x11237))+(((-1.0)*r11*x11246))+(((-1.0)*r12*x11241)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x11241))+(((-1.0)*r01*x11246))+((r00*x11237)));
evalcond[3]=((((-1.0)*x11225*x11238))+((sj15*x11226))+((sj15*x11229))+((cj15*x11243))+(((-1.0)*r00*x11225*x11240)));
evalcond[4]=((((-1.0)*x11225*x11229))+(((-1.0)*x11225*x11226))+((sj15*x11243))+(((-1.0)*r00*x11227*x11240))+(((-1.0)*x11227*x11238)));
evalcond[5]=((((-1.0)*sj13*x11234))+x11230+((r11*x11244))+(((-1.0)*x11225*x11239))+((sj15*x11233))+((sj15*x11231))+(((-1.0)*r10*x11225*x11240)));
evalcond[6]=((((-1.0)*x11247))+(((-1.0)*x11225*x11242))+((sj15*x11232))+((sj15*x11228))+((r21*x11244))+(((-1.0)*r20*x11225*x11240)));
evalcond[7]=((((-1.0)*x11230))+(((-1.0)*x11227*x11242))+(((-1.0)*x11225*x11228))+(((-1.0)*r20*x11227*x11240))+(((-1.0)*x11225*x11232))+((sj13*sj14))+((r21*x11245)));
evalcond[8]=((((-1.0)*x11247))+(((-1.0)*r10*x11227*x11240))+((r11*x11245))+(((-1.0)*x11225*x11231))+(((-1.0)*x11225*x11233))+(((-1.0)*x11227*x11239)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x11248=IKPowWithIntegerCheck(IKsign((((gconst10*r10))+((gconst11*r11)))),-1);
if(!x11248.valid){
continue;
}
CheckValue<IkReal> x11249 = IKatan2WithCheck(IkReal((((gconst11*r20))+(((-1.0)*gconst10*r21)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x11249.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11248.value)))+(x11249.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x11250=IKcos(j16);
IkReal x11251=IKsin(j16);
IkReal x11252=((1.0)*cj15);
IkReal x11253=(gconst11*r01);
IkReal x11254=((1.0)*sj15);
IkReal x11255=(gconst11*r21);
IkReal x11256=(gconst10*r00);
IkReal x11257=(cj13*cj14);
IkReal x11258=(gconst10*r10);
IkReal x11259=(gconst10*r20);
IkReal x11260=(gconst11*r11);
IkReal x11261=((1.0)*sj14);
IkReal x11262=((1.0)*cj14*sj13);
IkReal x11263=(cj13*x11261);
IkReal x11264=(gconst11*x11250);
IkReal x11265=(r02*x11250);
IkReal x11266=(r12*x11250);
IkReal x11267=(gconst11*x11251);
IkReal x11268=((1.0)*x11251);
IkReal x11269=(r22*x11250);
IkReal x11270=(gconst10*r01*x11251);
IkReal x11271=(cj15*gconst10*x11251);
IkReal x11272=(gconst10*sj15*x11251);
IkReal x11273=((1.0)*gconst10*x11250);
IkReal x11274=(x11263+x11262);
evalcond[0]=((((-1.0)*r21*x11273))+(((-1.0)*r22*x11268))+((r20*x11264)));
evalcond[1]=((((-1.0)*r11*x11273))+(((-1.0)*r12*x11268))+((r10*x11264)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x11268))+(((-1.0)*r01*x11273))+((r00*x11264)));
evalcond[3]=((((-1.0)*r00*x11252*x11267))+((sj15*x11256))+((sj15*x11253))+(((-1.0)*x11252*x11265))+((cj15*x11270)));
evalcond[4]=((((-1.0)*x11254*x11265))+((sj15*x11270))+(((-1.0)*r00*x11254*x11267))+(((-1.0)*x11252*x11256))+(((-1.0)*x11252*x11253)));
evalcond[5]=(x11257+((sj15*x11258))+(((-1.0)*x11252*x11266))+(((-1.0)*r10*x11252*x11267))+(((-1.0)*sj13*x11261))+((sj15*x11260))+((r11*x11271)));
evalcond[6]=((((-1.0)*r20*x11252*x11267))+((sj15*x11259))+((sj15*x11255))+(((-1.0)*x11252*x11269))+((r21*x11271))+(((-1.0)*x11274)));
evalcond[7]=((((-1.0)*x11257))+(((-1.0)*x11254*x11269))+((r21*x11272))+(((-1.0)*r20*x11254*x11267))+((sj13*sj14))+(((-1.0)*x11252*x11259))+(((-1.0)*x11252*x11255)));
evalcond[8]=((((-1.0)*x11254*x11266))+(((-1.0)*x11252*x11260))+(((-1.0)*x11274))+(((-1.0)*x11252*x11258))+(((-1.0)*r10*x11254*x11267))+((r11*x11272)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x11277 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x11277.valid){
continue;
}
IkReal x11275=((1.0)*(x11277.value));
IkReal x11276=x11157;
sj17=gconst10;
cj17=gconst11;
j17=((3.14159265)+(((-1.0)*x11275)));
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11275)));
IkReal gconst10=((1.0)*r11*x11276);
IkReal gconst11=((-1.0)*r10*x11276);
j16eval[0]=1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[4];
CheckValue<IkReal> x11280 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x11280.valid){
continue;
}
IkReal x11278=((1.0)*(x11280.value));
IkReal x11279=x11157;
sj17=gconst10;
cj17=gconst11;
j17=((3.14159265)+(((-1.0)*x11278)));
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11278)));
IkReal gconst10=((1.0)*r11*x11279);
IkReal gconst11=((-1.0)*r10*x11279);
j16eval[0]=0;
j16eval[1]=r22;
j16eval[2]=((1.0)+(((-1.0)*(r12*r12))));
j16eval[3]=0;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  || IKabs(j16eval[3]) < 0.0000010000000000  )
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x11281=gconst10*gconst10;
IkReal x11282=gconst11*gconst11;
IkReal x11283=(r20*sj15);
IkReal x11284=(gconst10*gconst11);
IkReal x11285=(r22*sj15);
IkReal x11286=((1.0)*cj15);
IkReal x11287=(r00*r21);
IkReal x11288=((1.0)*sj15);
IkReal x11289=(r01*r21);
CheckValue<IkReal> x11290=IKPowWithIntegerCheck(IKsign(((((-1.0)*x11284*x11286*x11287))+((cj15*r02*r22))+(((-1.0)*r01*r20*x11284*x11286))+((cj15*r00*r20*x11282))+((cj15*x11281*x11289)))),-1);
if(!x11290.valid){
continue;
}
CheckValue<IkReal> x11291 = IKatan2WithCheck(IkReal(((((-1.0)*x11284*x11288*x11289))+(((-1.0)*x11281*x11287*x11288))+((r00*x11283*x11284))+((r01*x11282*x11283)))),IkReal((((gconst10*r00*x11285))+((gconst11*r01*x11285)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11291.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11290.value)))+(x11291.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x11292=IKcos(j16);
IkReal x11293=IKsin(j16);
IkReal x11294=(sj13*sj14);
IkReal x11295=((1.0)*cj15);
IkReal x11296=(gconst11*r01);
IkReal x11297=((1.0)*sj15);
IkReal x11298=(gconst11*r21);
IkReal x11299=(gconst10*r00);
IkReal x11300=(cj14*sj13);
IkReal x11301=(gconst10*r10);
IkReal x11302=(gconst10*r20);
IkReal x11303=(gconst11*r11);
IkReal x11304=((1.0)*cj13);
IkReal x11305=(cj14*x11304);
IkReal x11306=(gconst11*x11292);
IkReal x11307=(r02*x11292);
IkReal x11308=(r12*x11292);
IkReal x11309=(gconst11*x11293);
IkReal x11310=((1.0)*x11293);
IkReal x11311=(r22*x11292);
IkReal x11312=(gconst10*r01*x11293);
IkReal x11313=(cj15*gconst10*x11293);
IkReal x11314=(gconst10*sj15*x11293);
IkReal x11315=((1.0)*gconst10*x11292);
evalcond[0]=(((r20*x11306))+(((-1.0)*r22*x11310))+(((-1.0)*r21*x11315)));
evalcond[1]=((((-1.0)*r11*x11315))+(((-1.0)*r12*x11310))+((r10*x11306)));
evalcond[2]=((1.0)+(((-1.0)*r02*x11310))+((r00*x11306))+(((-1.0)*r01*x11315)));
evalcond[3]=((((-1.0)*r00*x11295*x11309))+((sj15*x11296))+((sj15*x11299))+((cj15*x11312))+(((-1.0)*x11295*x11307)));
evalcond[4]=((((-1.0)*x11297*x11307))+(((-1.0)*x11295*x11299))+(((-1.0)*x11295*x11296))+((sj15*x11312))+(((-1.0)*r00*x11297*x11309)));
evalcond[5]=(((r11*x11313))+((sj15*x11303))+((sj15*x11301))+(((-1.0)*r10*x11295*x11309))+x11294+(((-1.0)*x11305))+(((-1.0)*x11295*x11308)));
evalcond[6]=((((-1.0)*x11295*x11311))+((sj15*x11302))+(((-1.0)*sj14*x11304))+((r21*x11313))+((sj15*x11298))+(((-1.0)*x11300))+(((-1.0)*r20*x11295*x11309)));
evalcond[7]=(((r11*x11314))+(((-1.0)*x11297*x11308))+x11300+((cj13*sj14))+(((-1.0)*x11295*x11303))+(((-1.0)*x11295*x11301))+(((-1.0)*r10*x11297*x11309)));
evalcond[8]=(x11294+(((-1.0)*x11305))+((r21*x11314))+(((-1.0)*x11295*x11298))+(((-1.0)*x11295*x11302))+(((-1.0)*x11297*x11311))+(((-1.0)*r20*x11297*x11309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x11316=((1.0)*gconst10);
CheckValue<IkReal> x11317=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst11*r11))+(((-1.0)*r10*x11316)))),-1);
if(!x11317.valid){
continue;
}
CheckValue<IkReal> x11318 = IKatan2WithCheck(IkReal((((gconst11*r20))+(((-1.0)*r21*x11316)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x11318.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11317.value)))+(x11318.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x11319=IKcos(j16);
IkReal x11320=IKsin(j16);
IkReal x11321=(sj13*sj14);
IkReal x11322=((1.0)*cj15);
IkReal x11323=(gconst11*r01);
IkReal x11324=((1.0)*sj15);
IkReal x11325=(gconst11*r21);
IkReal x11326=(gconst10*r00);
IkReal x11327=(cj14*sj13);
IkReal x11328=(gconst10*r10);
IkReal x11329=(gconst10*r20);
IkReal x11330=(gconst11*r11);
IkReal x11331=((1.0)*cj13);
IkReal x11332=(cj14*x11331);
IkReal x11333=(gconst11*x11319);
IkReal x11334=(r02*x11319);
IkReal x11335=(r12*x11319);
IkReal x11336=(gconst11*x11320);
IkReal x11337=((1.0)*x11320);
IkReal x11338=(r22*x11319);
IkReal x11339=(gconst10*r01*x11320);
IkReal x11340=(cj15*gconst10*x11320);
IkReal x11341=(gconst10*sj15*x11320);
IkReal x11342=((1.0)*gconst10*x11319);
evalcond[0]=((((-1.0)*r21*x11342))+(((-1.0)*r22*x11337))+((r20*x11333)));
evalcond[1]=((((-1.0)*r11*x11342))+(((-1.0)*r12*x11337))+((r10*x11333)));
evalcond[2]=((1.0)+(((-1.0)*r01*x11342))+((r00*x11333))+(((-1.0)*r02*x11337)));
evalcond[3]=(((cj15*x11339))+((sj15*x11326))+((sj15*x11323))+(((-1.0)*x11322*x11334))+(((-1.0)*r00*x11322*x11336)));
evalcond[4]=(((sj15*x11339))+(((-1.0)*x11324*x11334))+(((-1.0)*r00*x11324*x11336))+(((-1.0)*x11322*x11326))+(((-1.0)*x11322*x11323)));
evalcond[5]=(((sj15*x11330))+((r11*x11340))+x11321+(((-1.0)*x11332))+((sj15*x11328))+(((-1.0)*r10*x11322*x11336))+(((-1.0)*x11322*x11335)));
evalcond[6]=((((-1.0)*r20*x11322*x11336))+((sj15*x11325))+((sj15*x11329))+(((-1.0)*x11327))+(((-1.0)*x11322*x11338))+(((-1.0)*sj14*x11331))+((r21*x11340)));
evalcond[7]=(((r11*x11341))+(((-1.0)*x11324*x11335))+(((-1.0)*r10*x11324*x11336))+(((-1.0)*x11322*x11328))+x11327+((cj13*sj14))+(((-1.0)*x11322*x11330)));
evalcond[8]=((((-1.0)*x11324*x11338))+(((-1.0)*x11322*x11325))+(((-1.0)*x11322*x11329))+x11321+(((-1.0)*x11332))+(((-1.0)*r20*x11324*x11336))+((r21*x11341)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x11343 = IKatan2WithCheck(IkReal(((((-1.0)*gconst10*r11))+((gconst11*r10)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x11343.valid){
continue;
}
CheckValue<IkReal> x11344=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11344.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x11343.value)+(((1.5707963267949)*(x11344.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x11345=IKcos(j16);
IkReal x11346=IKsin(j16);
IkReal x11347=(sj13*sj14);
IkReal x11348=((1.0)*cj15);
IkReal x11349=(gconst11*r01);
IkReal x11350=((1.0)*sj15);
IkReal x11351=(gconst11*r21);
IkReal x11352=(gconst10*r00);
IkReal x11353=(cj14*sj13);
IkReal x11354=(gconst10*r10);
IkReal x11355=(gconst10*r20);
IkReal x11356=(gconst11*r11);
IkReal x11357=((1.0)*cj13);
IkReal x11358=(cj14*x11357);
IkReal x11359=(gconst11*x11345);
IkReal x11360=(r02*x11345);
IkReal x11361=(r12*x11345);
IkReal x11362=(gconst11*x11346);
IkReal x11363=((1.0)*x11346);
IkReal x11364=(r22*x11345);
IkReal x11365=(gconst10*r01*x11346);
IkReal x11366=(cj15*gconst10*x11346);
IkReal x11367=(gconst10*sj15*x11346);
IkReal x11368=((1.0)*gconst10*x11345);
evalcond[0]=((((-1.0)*r22*x11363))+((r20*x11359))+(((-1.0)*r21*x11368)));
evalcond[1]=(((r10*x11359))+(((-1.0)*r11*x11368))+(((-1.0)*r12*x11363)));
evalcond[2]=((1.0)+(((-1.0)*r02*x11363))+(((-1.0)*r01*x11368))+((r00*x11359)));
evalcond[3]=(((sj15*x11349))+(((-1.0)*r00*x11348*x11362))+((sj15*x11352))+(((-1.0)*x11348*x11360))+((cj15*x11365)));
evalcond[4]=((((-1.0)*x11348*x11349))+(((-1.0)*x11348*x11352))+(((-1.0)*r00*x11350*x11362))+((sj15*x11365))+(((-1.0)*x11350*x11360)));
evalcond[5]=(((sj15*x11354))+((sj15*x11356))+(((-1.0)*r10*x11348*x11362))+x11347+(((-1.0)*x11348*x11361))+(((-1.0)*x11358))+((r11*x11366)));
evalcond[6]=(((r21*x11366))+(((-1.0)*r20*x11348*x11362))+((sj15*x11355))+((sj15*x11351))+(((-1.0)*x11348*x11364))+(((-1.0)*x11353))+(((-1.0)*sj14*x11357)));
evalcond[7]=((((-1.0)*x11348*x11354))+(((-1.0)*x11348*x11356))+(((-1.0)*r10*x11350*x11362))+x11353+((cj13*sj14))+((r11*x11367))+(((-1.0)*x11350*x11361)));
evalcond[8]=(((r21*x11367))+(((-1.0)*x11348*x11355))+(((-1.0)*x11348*x11351))+x11347+(((-1.0)*x11358))+(((-1.0)*r20*x11350*x11362))+(((-1.0)*x11350*x11364)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[2];
CheckValue<IkReal> x11371 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x11371.valid){
continue;
}
IkReal x11369=((1.0)*(x11371.value));
IkReal x11370=((-1.0)*px);
sj17=gconst10;
cj17=gconst11;
j17=((3.14159265)+(((-1.0)*x11369)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11370);
rxp1_1=(px*r21);
rxp1_2=(r11*x11370);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11369)));
IkReal gconst10=((1.0)*r11);
IkReal gconst11=((-1.0)*r10);
j16eval[0]=r02;
j16eval[1]=-1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
CheckValue<IkReal> x11374 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x11374.valid){
continue;
}
IkReal x11372=((1.0)*(x11374.value));
IkReal x11373=((-1.0)*px);
sj17=gconst10;
cj17=gconst11;
j17=((3.14159265)+(((-1.0)*x11372)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11373);
rxp1_1=(px*r21);
rxp1_2=(r11*x11373);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11372)));
IkReal gconst10=((1.0)*r11);
IkReal gconst11=((-1.0)*r10);
IkReal x11375=((1.0)*cj15);
j16eval[0]=(((r10*r20*x11375))+((r11*r21*x11375)));
j16eval[1]=-1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
CheckValue<IkReal> x11378 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x11378.valid){
continue;
}
IkReal x11376=((1.0)*(x11378.value));
IkReal x11377=((-1.0)*px);
sj17=gconst10;
cj17=gconst11;
j17=((3.14159265)+(((-1.0)*x11376)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11377);
rxp1_1=(px*r21);
rxp1_2=(r11*x11377);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11376)));
IkReal gconst10=((1.0)*r11);
IkReal gconst11=((-1.0)*r10);
j16eval[0]=r02;
j16eval[1]=cj15;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x11381 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x11381.valid){
continue;
}
IkReal x11379=((1.0)*(x11381.value));
IkReal x11380=((-1.0)*px);
sj17=gconst10;
cj17=gconst11;
j17=((3.14159265)+(((-1.0)*x11379)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11380);
rxp1_1=(px*r21);
rxp1_2=(r11*x11380);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj15=1.0;
cj15=0;
j15=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11379)));
IkReal gconst10=((1.0)*r11);
IkReal gconst11=((-1.0)*r10);
j16eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
CheckValue<IkReal> x11383=IKPowWithIntegerCheck((((gconst10*r21))+(((-1.0)*gconst11*r20))),-1);
if(!x11383.valid){
continue;
}
IkReal x11382=x11383.value;
sj16array[0]=((((-1.0)*sj13*sj14*x11382))+((cj13*cj14*x11382)));
if( sj16array[0] >= -1-IKFAST_SINCOS_THRESH && sj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKasin(sj16array[0]);
    cj16array[0] = IKcos(j16array[0]);
    sj16array[1] = sj16array[0];
    j16array[1] = j16array[0] > 0 ? (IKPI-j16array[0]) : (-IKPI-j16array[0]);
    cj16array[1] = -cj16array[0];
}
else if( isnan(sj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[3];
IkReal x11384=IKcos(j16);
IkReal x11385=(gconst11*x11384);
IkReal x11386=((1.0)*gconst10*x11384);
evalcond[0]=((-1.0)*r02*x11384);
evalcond[1]=(((r20*x11385))+(((-1.0)*r21*x11386)));
evalcond[2]=(((r10*x11385))+(((-1.0)*r11*x11386)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x11389 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x11389.valid){
continue;
}
IkReal x11387=((1.0)*(x11389.value));
IkReal x11388=((-1.0)*px);
sj17=gconst10;
cj17=gconst11;
j17=((3.14159265)+(((-1.0)*x11387)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11388);
rxp1_1=(px*r21);
rxp1_2=(r11*x11388);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11387)));
IkReal gconst10=((1.0)*r11);
IkReal gconst11=((-1.0)*r10);
j16eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
CheckValue<IkReal> x11391=IKPowWithIntegerCheck((((gconst11*r20))+(((-1.0)*gconst10*r21))),-1);
if(!x11391.valid){
continue;
}
IkReal x11390=x11391.value;
sj16array[0]=(((cj13*cj14*x11390))+(((-1.0)*sj13*sj14*x11390)));
if( sj16array[0] >= -1-IKFAST_SINCOS_THRESH && sj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKasin(sj16array[0]);
    cj16array[0] = IKcos(j16array[0]);
    sj16array[1] = sj16array[0];
    j16array[1] = j16array[0] > 0 ? (IKPI-j16array[0]) : (-IKPI-j16array[0]);
    cj16array[1] = -cj16array[0];
}
else if( isnan(sj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[3];
IkReal x11392=IKcos(j16);
IkReal x11393=(gconst11*x11392);
IkReal x11394=((1.0)*gconst10*x11392);
evalcond[0]=(r02*x11392);
evalcond[1]=(((r20*x11393))+(((-1.0)*r21*x11394)));
evalcond[2]=(((r10*x11393))+(((-1.0)*r11*x11394)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j16]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x11396=IKPowWithIntegerCheck(r02,-1);
if(!x11396.valid){
continue;
}
IkReal x11395=x11396.value;
CheckValue<IkReal> x11397=IKPowWithIntegerCheck(cj15,-1);
if(!x11397.valid){
continue;
}
if( IKabs(((-1.0)*sj12*x11395)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x11395*(x11397.value)*((((cj12*cj13*cj14))+(((-1.0)*cj12*sj13*sj14)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj12*x11395))+IKsqr((x11395*(x11397.value)*((((cj12*cj13*cj14))+(((-1.0)*cj12*sj13*sj14))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((-1.0)*sj12*x11395), (x11395*(x11397.value)*((((cj12*cj13*cj14))+(((-1.0)*cj12*sj13*sj14))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x11398=IKcos(j16);
IkReal x11399=IKsin(j16);
IkReal x11400=((1.0)*cj14);
IkReal x11401=(sj12*sj13);
IkReal x11402=(r10*sj15);
IkReal x11403=(cj12*sj13);
IkReal x11404=((1.0)*sj14);
IkReal x11405=(cj15*r21);
IkReal x11406=(cj13*cj14);
IkReal x11407=((1.0)*gconst11);
IkReal x11408=(r20*sj15);
IkReal x11409=(cj15*r11);
IkReal x11410=((1.0)*r02);
IkReal x11411=(r11*sj15);
IkReal x11412=(r21*sj15);
IkReal x11413=(gconst11*x11398);
IkReal x11414=(gconst10*x11399);
IkReal x11415=((1.0)*cj15*gconst10);
IkReal x11416=(cj15*x11399);
IkReal x11417=((1.0)*gconst10*x11398);
evalcond[0]=((((-1.0)*x11399*x11410))+(((-1.0)*sj12)));
evalcond[1]=((((-1.0)*r21*x11417))+((r20*x11413)));
evalcond[2]=(((r10*x11413))+(((-1.0)*r11*x11417))+cj12);
evalcond[3]=((((-1.0)*x11403*x11404))+((cj12*x11406))+(((-1.0)*cj15*x11398*x11410)));
evalcond[4]=((((-1.0)*cj12*cj13*x11404))+(((-1.0)*x11400*x11403))+(((-1.0)*sj15*x11398*x11410)));
evalcond[5]=((((-1.0)*r20*x11407*x11416))+((x11405*x11414))+((gconst10*x11408))+(((-1.0)*cj13*x11404))+((gconst11*x11412))+(((-1.0)*sj13*x11400)));
evalcond[6]=((((-1.0)*r20*x11415))+(((-1.0)*x11405*x11407))+((sj13*sj14))+(((-1.0)*x11399*x11407*x11408))+(((-1.0)*cj13*x11400))+((x11412*x11414)));
evalcond[7]=((((-1.0)*r10*x11407*x11416))+((sj12*x11406))+(((-1.0)*x11401*x11404))+((gconst10*x11402))+((x11409*x11414))+((gconst11*x11411)));
evalcond[8]=(((x11411*x11414))+(((-1.0)*r10*x11415))+(((-1.0)*x11399*x11402*x11407))+(((-1.0)*x11400*x11401))+(((-1.0)*x11407*x11409))+(((-1.0)*cj13*sj12*x11404)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x11418=((1.0)*r20);
CheckValue<IkReal> x11419=IKPowWithIntegerCheck((((cj15*gconst10*r21))+(((-1.0)*cj15*gconst11*x11418))),-1);
if(!x11419.valid){
continue;
}
CheckValue<IkReal> x11420=IKPowWithIntegerCheck(((((-1.0)*gconst10*r11))+((gconst11*r10))),-1);
if(!x11420.valid){
continue;
}
if( IKabs(((x11419.value)*((((cj14*sj13))+(((-1.0)*gconst11*r21*sj15))+(((-1.0)*gconst10*sj15*x11418))+((cj13*sj14)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj12*(x11420.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11419.value)*((((cj14*sj13))+(((-1.0)*gconst11*r21*sj15))+(((-1.0)*gconst10*sj15*x11418))+((cj13*sj14))))))+IKsqr(((-1.0)*cj12*(x11420.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x11419.value)*((((cj14*sj13))+(((-1.0)*gconst11*r21*sj15))+(((-1.0)*gconst10*sj15*x11418))+((cj13*sj14))))), ((-1.0)*cj12*(x11420.value)));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x11421=IKcos(j16);
IkReal x11422=IKsin(j16);
IkReal x11423=((1.0)*cj14);
IkReal x11424=(sj12*sj13);
IkReal x11425=(r10*sj15);
IkReal x11426=(cj12*sj13);
IkReal x11427=((1.0)*sj14);
IkReal x11428=(cj15*r21);
IkReal x11429=(cj13*cj14);
IkReal x11430=((1.0)*gconst11);
IkReal x11431=(r20*sj15);
IkReal x11432=(cj15*r11);
IkReal x11433=((1.0)*r02);
IkReal x11434=(r11*sj15);
IkReal x11435=(r21*sj15);
IkReal x11436=(gconst11*x11421);
IkReal x11437=(gconst10*x11422);
IkReal x11438=((1.0)*cj15*gconst10);
IkReal x11439=(cj15*x11422);
IkReal x11440=((1.0)*gconst10*x11421);
evalcond[0]=((((-1.0)*sj12))+(((-1.0)*x11422*x11433)));
evalcond[1]=(((r20*x11436))+(((-1.0)*r21*x11440)));
evalcond[2]=((((-1.0)*r11*x11440))+((r10*x11436))+cj12);
evalcond[3]=(((cj12*x11429))+(((-1.0)*x11426*x11427))+(((-1.0)*cj15*x11421*x11433)));
evalcond[4]=((((-1.0)*cj12*cj13*x11427))+(((-1.0)*sj15*x11421*x11433))+(((-1.0)*x11423*x11426)));
evalcond[5]=(((x11428*x11437))+(((-1.0)*r20*x11430*x11439))+(((-1.0)*sj13*x11423))+(((-1.0)*cj13*x11427))+((gconst10*x11431))+((gconst11*x11435)));
evalcond[6]=((((-1.0)*x11428*x11430))+(((-1.0)*x11422*x11430*x11431))+((sj13*sj14))+((x11435*x11437))+(((-1.0)*cj13*x11423))+(((-1.0)*r20*x11438)));
evalcond[7]=(((sj12*x11429))+(((-1.0)*x11424*x11427))+(((-1.0)*r10*x11430*x11439))+((gconst10*x11425))+((gconst11*x11434))+((x11432*x11437)));
evalcond[8]=((((-1.0)*cj13*sj12*x11427))+((x11434*x11437))+(((-1.0)*x11422*x11425*x11430))+(((-1.0)*r10*x11438))+(((-1.0)*x11430*x11432))+(((-1.0)*x11423*x11424)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x11441=IKPowWithIntegerCheck(r02,-1);
if(!x11441.valid){
continue;
}
CheckValue<IkReal> x11442=IKPowWithIntegerCheck(((((-1.0)*gconst10*r11))+((gconst11*r10))),-1);
if(!x11442.valid){
continue;
}
if( IKabs(((-1.0)*sj12*(x11441.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj12*(x11442.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj12*(x11441.value)))+IKsqr(((-1.0)*cj12*(x11442.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((-1.0)*sj12*(x11441.value)), ((-1.0)*cj12*(x11442.value)));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x11443=IKcos(j16);
IkReal x11444=IKsin(j16);
IkReal x11445=((1.0)*cj14);
IkReal x11446=(sj12*sj13);
IkReal x11447=(r10*sj15);
IkReal x11448=(cj12*sj13);
IkReal x11449=((1.0)*sj14);
IkReal x11450=(cj15*r21);
IkReal x11451=(cj13*cj14);
IkReal x11452=((1.0)*gconst11);
IkReal x11453=(r20*sj15);
IkReal x11454=(cj15*r11);
IkReal x11455=((1.0)*r02);
IkReal x11456=(r11*sj15);
IkReal x11457=(r21*sj15);
IkReal x11458=(gconst11*x11443);
IkReal x11459=(gconst10*x11444);
IkReal x11460=((1.0)*cj15*gconst10);
IkReal x11461=(cj15*x11444);
IkReal x11462=((1.0)*gconst10*x11443);
evalcond[0]=((((-1.0)*x11444*x11455))+(((-1.0)*sj12)));
evalcond[1]=(((r20*x11458))+(((-1.0)*r21*x11462)));
evalcond[2]=(((r10*x11458))+(((-1.0)*r11*x11462))+cj12);
evalcond[3]=(((cj12*x11451))+(((-1.0)*cj15*x11443*x11455))+(((-1.0)*x11448*x11449)));
evalcond[4]=((((-1.0)*x11445*x11448))+(((-1.0)*cj12*cj13*x11449))+(((-1.0)*sj15*x11443*x11455)));
evalcond[5]=(((gconst10*x11453))+(((-1.0)*cj13*x11449))+((x11450*x11459))+(((-1.0)*r20*x11452*x11461))+((gconst11*x11457))+(((-1.0)*sj13*x11445)));
evalcond[6]=((((-1.0)*cj13*x11445))+(((-1.0)*x11444*x11452*x11453))+(((-1.0)*r20*x11460))+((x11457*x11459))+((sj13*sj14))+(((-1.0)*x11450*x11452)));
evalcond[7]=(((sj12*x11451))+(((-1.0)*x11446*x11449))+((gconst10*x11447))+((x11454*x11459))+(((-1.0)*r10*x11452*x11461))+((gconst11*x11456)));
evalcond[8]=((((-1.0)*x11452*x11454))+(((-1.0)*x11445*x11446))+((x11456*x11459))+(((-1.0)*r10*x11460))+(((-1.0)*cj13*sj12*x11449))+(((-1.0)*x11444*x11447*x11452)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x11465 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x11465.valid){
continue;
}
IkReal x11463=((1.0)*(x11465.value));
IkReal x11464=x11157;
sj17=gconst10;
cj17=gconst11;
j17=((3.14159265)+(((-1.0)*x11463)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11463)));
IkReal gconst10=((1.0)*r11*x11464);
IkReal gconst11=((-1.0)*r10*x11464);
IkReal x11466=r12*r12;
IkReal x11467=(cj12*r02);
IkReal x11468=x11157;
IkReal x11469=(sj12*x11468);
j16eval[0]=((IKabs(((((-1.0)*r12*sj12))+(((-1.0)*x11467)))))+(IKabs((((x11466*x11469))+((r12*x11467*x11468))+(((-1.0)*x11469))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x11470=(gconst11*r21);
IkReal x11471=(gconst10*sj15);
IkReal x11472=(cj15*r12);
IkReal x11473=(cj13*cj14);
IkReal x11474=(gconst10*r20);
IkReal x11475=((1.0)*r21);
IkReal x11476=(gconst11*r20*sj15);
IkReal x11477=((1.0)*sj13*sj14);
CheckValue<IkReal> x11478=IKPowWithIntegerCheck(((((-1.0)*x11476))+((r21*x11471))),-1);
if(!x11478.valid){
continue;
}
CheckValue<IkReal> x11479=IKPowWithIntegerCheck((((r10*x11470*x11471))+(((-1.0)*gconst10*r11*x11471*x11475))+(((-1.0)*gconst11*r10*x11476))+((gconst11*r11*r20*x11471))),-1);
if(!x11479.valid){
continue;
}
if( IKabs(((x11478.value)*((x11473+((cj15*x11470))+((cj15*x11474))+(((-1.0)*x11477)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11479.value)*((((r12*x11473))+(((-1.0)*r12*x11477))+((x11472*x11474))+((x11470*x11472))+(((-1.0)*cj12*x11471*x11475))+((cj12*x11476)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11478.value)*((x11473+((cj15*x11470))+((cj15*x11474))+(((-1.0)*x11477))))))+IKsqr(((x11479.value)*((((r12*x11473))+(((-1.0)*r12*x11477))+((x11472*x11474))+((x11470*x11472))+(((-1.0)*cj12*x11471*x11475))+((cj12*x11476))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x11478.value)*((x11473+((cj15*x11470))+((cj15*x11474))+(((-1.0)*x11477))))), ((x11479.value)*((((r12*x11473))+(((-1.0)*r12*x11477))+((x11472*x11474))+((x11470*x11472))+(((-1.0)*cj12*x11471*x11475))+((cj12*x11476))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x11480=IKcos(j16);
IkReal x11481=IKsin(j16);
IkReal x11482=((1.0)*cj14);
IkReal x11483=(sj12*sj13);
IkReal x11484=((1.0)*r00);
IkReal x11485=(cj15*gconst10);
IkReal x11486=((1.0)*sj15);
IkReal x11487=(cj12*sj13);
IkReal x11488=((1.0)*sj14);
IkReal x11489=((1.0)*cj15);
IkReal x11490=(gconst11*r21);
IkReal x11491=(gconst10*sj15);
IkReal x11492=(cj13*cj14);
IkReal x11493=(gconst11*r11);
IkReal x11494=(gconst11*r01);
IkReal x11495=(gconst11*x11480);
IkReal x11496=(r12*x11480);
IkReal x11497=(gconst11*x11481);
IkReal x11498=(r21*x11481);
IkReal x11499=(r11*x11481);
IkReal x11500=(r02*x11480);
IkReal x11501=((1.0)*x11481);
IkReal x11502=(gconst10*r01*x11481);
IkReal x11503=((1.0)*gconst10*x11480);
evalcond[0]=(((r20*x11495))+(((-1.0)*r21*x11503)));
evalcond[1]=((((-1.0)*r12*x11501))+(((-1.0)*r11*x11503))+((r10*x11495))+cj12);
evalcond[2]=(((r00*x11495))+(((-1.0)*r02*x11501))+(((-1.0)*sj12))+(((-1.0)*r01*x11503)));
evalcond[3]=((((-1.0)*r20*x11489*x11497))+(((-1.0)*sj13*x11482))+((r20*x11491))+((x11485*x11498))+(((-1.0)*cj13*x11488))+((sj15*x11490)));
evalcond[4]=((((-1.0)*r20*x11486*x11497))+((x11491*x11498))+(((-1.0)*x11489*x11490))+(((-1.0)*cj13*x11482))+((sj13*sj14))+(((-1.0)*r20*x11485)));
evalcond[5]=(((r00*x11491))+((r01*x11481*x11485))+(((-1.0)*x11489*x11500))+((cj12*x11492))+(((-1.0)*cj15*x11484*x11497))+((sj15*x11494))+(((-1.0)*x11487*x11488)));
evalcond[6]=((((-1.0)*x11483*x11488))+(((-1.0)*r10*x11489*x11497))+((sj12*x11492))+((r10*x11491))+((x11485*x11499))+(((-1.0)*x11489*x11496))+((sj15*x11493)));
evalcond[7]=((((-1.0)*x11486*x11500))+((r01*x11481*x11491))+(((-1.0)*x11482*x11487))+(((-1.0)*x11489*x11494))+(((-1.0)*x11484*x11485))+(((-1.0)*sj15*x11484*x11497))+(((-1.0)*cj12*cj13*x11488)));
evalcond[8]=((((-1.0)*x11482*x11483))+((x11491*x11499))+(((-1.0)*r10*x11486*x11497))+(((-1.0)*r10*x11485))+(((-1.0)*x11489*x11493))+(((-1.0)*cj13*sj12*x11488))+(((-1.0)*x11486*x11496)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x11504=((1.0)*sj12);
IkReal x11505=((1.0)*cj12);
CheckValue<IkReal> x11506 = IKatan2WithCheck(IkReal(((((-1.0)*gconst11*r10*x11504))+((gconst10*r11*sj12))+(((-1.0)*gconst11*r00*x11505))+((cj12*gconst10*r01)))),IkReal(((((-1.0)*r02*x11505))+(((-1.0)*r12*x11504)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11506.valid){
continue;
}
CheckValue<IkReal> x11507=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11507.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x11506.value)+(((1.5707963267949)*(x11507.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x11508=IKcos(j16);
IkReal x11509=IKsin(j16);
IkReal x11510=((1.0)*cj14);
IkReal x11511=(sj12*sj13);
IkReal x11512=((1.0)*r00);
IkReal x11513=(cj15*gconst10);
IkReal x11514=((1.0)*sj15);
IkReal x11515=(cj12*sj13);
IkReal x11516=((1.0)*sj14);
IkReal x11517=((1.0)*cj15);
IkReal x11518=(gconst11*r21);
IkReal x11519=(gconst10*sj15);
IkReal x11520=(cj13*cj14);
IkReal x11521=(gconst11*r11);
IkReal x11522=(gconst11*r01);
IkReal x11523=(gconst11*x11508);
IkReal x11524=(r12*x11508);
IkReal x11525=(gconst11*x11509);
IkReal x11526=(r21*x11509);
IkReal x11527=(r11*x11509);
IkReal x11528=(r02*x11508);
IkReal x11529=((1.0)*x11509);
IkReal x11530=(gconst10*r01*x11509);
IkReal x11531=((1.0)*gconst10*x11508);
evalcond[0]=(((r20*x11523))+(((-1.0)*r21*x11531)));
evalcond[1]=((((-1.0)*r11*x11531))+cj12+((r10*x11523))+(((-1.0)*r12*x11529)));
evalcond[2]=((((-1.0)*r02*x11529))+(((-1.0)*sj12))+((r00*x11523))+(((-1.0)*r01*x11531)));
evalcond[3]=((((-1.0)*cj13*x11516))+((x11513*x11526))+(((-1.0)*sj13*x11510))+((sj15*x11518))+((r20*x11519))+(((-1.0)*r20*x11517*x11525)));
evalcond[4]=((((-1.0)*cj13*x11510))+((x11519*x11526))+(((-1.0)*r20*x11513))+((sj13*sj14))+(((-1.0)*x11517*x11518))+(((-1.0)*r20*x11514*x11525)));
evalcond[5]=((((-1.0)*x11517*x11528))+((sj15*x11522))+((r01*x11509*x11513))+(((-1.0)*x11515*x11516))+((cj12*x11520))+((r00*x11519))+(((-1.0)*cj15*x11512*x11525)));
evalcond[6]=((((-1.0)*x11511*x11516))+((x11513*x11527))+(((-1.0)*x11517*x11524))+((sj15*x11521))+(((-1.0)*r10*x11517*x11525))+((r10*x11519))+((sj12*x11520)));
evalcond[7]=((((-1.0)*x11517*x11522))+(((-1.0)*x11514*x11528))+(((-1.0)*x11512*x11513))+(((-1.0)*cj12*cj13*x11516))+(((-1.0)*sj15*x11512*x11525))+(((-1.0)*x11510*x11515))+((r01*x11509*x11519)));
evalcond[8]=((((-1.0)*x11517*x11521))+(((-1.0)*r10*x11514*x11525))+(((-1.0)*x11514*x11524))+(((-1.0)*r10*x11513))+((x11519*x11527))+(((-1.0)*x11510*x11511))+(((-1.0)*cj13*sj12*x11516)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j16]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x11532=((1.0)*sj12);
IkReal x11533=((1.0)*cj12);
CheckValue<IkReal> x11534 = IKatan2WithCheck(IkReal(((((-1.0)*gconst11*r10*x11532))+((gconst10*r11*sj12))+((cj12*gconst10*r01))+(((-1.0)*gconst11*r00*x11533)))),IkReal(((((-1.0)*r12*x11532))+(((-1.0)*r02*x11533)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11534.valid){
continue;
}
CheckValue<IkReal> x11535=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11535.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x11534.value)+(((1.5707963267949)*(x11535.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x11536=IKcos(j16);
IkReal x11537=IKsin(j16);
IkReal x11538=((1.0)*cj14);
IkReal x11539=(sj12*sj13);
IkReal x11540=((1.0)*r00);
IkReal x11541=(cj15*gconst10);
IkReal x11542=((1.0)*sj15);
IkReal x11543=(cj12*sj13);
IkReal x11544=((1.0)*sj14);
IkReal x11545=((1.0)*cj15);
IkReal x11546=(gconst11*r21);
IkReal x11547=(gconst10*sj15);
IkReal x11548=(cj13*cj14);
IkReal x11549=(gconst11*r11);
IkReal x11550=(gconst11*r01);
IkReal x11551=(gconst11*x11536);
IkReal x11552=(r12*x11536);
IkReal x11553=(gconst11*x11537);
IkReal x11554=(r21*x11537);
IkReal x11555=((1.0)*x11537);
IkReal x11556=(r11*x11537);
IkReal x11557=(r22*x11536);
IkReal x11558=(r02*x11536);
IkReal x11559=(gconst10*r01*x11537);
IkReal x11560=((1.0)*gconst10*x11536);
evalcond[0]=((((-1.0)*r22*x11555))+(((-1.0)*r21*x11560))+((r20*x11551)));
evalcond[1]=((((-1.0)*r12*x11555))+cj12+((r10*x11551))+(((-1.0)*r11*x11560)));
evalcond[2]=((((-1.0)*r02*x11555))+(((-1.0)*r01*x11560))+(((-1.0)*sj12))+((r00*x11551)));
evalcond[3]=(((sj15*x11546))+(((-1.0)*r20*x11545*x11553))+((x11541*x11554))+(((-1.0)*cj13*x11544))+((r20*x11547))+(((-1.0)*sj13*x11538))+(((-1.0)*x11545*x11557)));
evalcond[4]=(((x11547*x11554))+(((-1.0)*r20*x11541))+(((-1.0)*x11545*x11546))+(((-1.0)*x11542*x11557))+(((-1.0)*r20*x11542*x11553))+((sj13*sj14))+(((-1.0)*cj13*x11538)));
evalcond[5]=(((r00*x11547))+(((-1.0)*cj15*x11540*x11553))+((r01*x11537*x11541))+((cj12*x11548))+((sj15*x11550))+(((-1.0)*x11543*x11544))+(((-1.0)*x11545*x11558)));
evalcond[6]=(((r10*x11547))+((sj15*x11549))+((x11541*x11556))+(((-1.0)*x11539*x11544))+(((-1.0)*r10*x11545*x11553))+((sj12*x11548))+(((-1.0)*x11545*x11552)));
evalcond[7]=((((-1.0)*sj15*x11540*x11553))+(((-1.0)*x11540*x11541))+(((-1.0)*x11542*x11558))+(((-1.0)*cj12*cj13*x11544))+((r01*x11537*x11547))+(((-1.0)*x11538*x11543))+(((-1.0)*x11545*x11550)));
evalcond[8]=((((-1.0)*r10*x11541))+(((-1.0)*x11538*x11539))+(((-1.0)*r10*x11542*x11553))+((x11547*x11556))+(((-1.0)*x11545*x11549))+(((-1.0)*x11542*x11552))+(((-1.0)*cj13*sj12*x11544)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x11561=IKPowWithIntegerCheck(IKsign((((gconst10*r10))+((gconst11*r11)))),-1);
if(!x11561.valid){
continue;
}
CheckValue<IkReal> x11562 = IKatan2WithCheck(IkReal(((((-1.0)*gconst10*r21*sj12))+((gconst11*r20*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x11562.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11561.value)))+(x11562.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x11563=IKcos(j16);
IkReal x11564=IKsin(j16);
IkReal x11565=((1.0)*cj14);
IkReal x11566=(sj12*sj13);
IkReal x11567=((1.0)*r00);
IkReal x11568=(cj15*gconst10);
IkReal x11569=((1.0)*sj15);
IkReal x11570=(cj12*sj13);
IkReal x11571=((1.0)*sj14);
IkReal x11572=((1.0)*cj15);
IkReal x11573=(gconst11*r21);
IkReal x11574=(gconst10*sj15);
IkReal x11575=(cj13*cj14);
IkReal x11576=(gconst11*r11);
IkReal x11577=(gconst11*r01);
IkReal x11578=(gconst11*x11563);
IkReal x11579=(r12*x11563);
IkReal x11580=(gconst11*x11564);
IkReal x11581=(r21*x11564);
IkReal x11582=((1.0)*x11564);
IkReal x11583=(r11*x11564);
IkReal x11584=(r22*x11563);
IkReal x11585=(r02*x11563);
IkReal x11586=(gconst10*r01*x11564);
IkReal x11587=((1.0)*gconst10*x11563);
evalcond[0]=(((r20*x11578))+(((-1.0)*r22*x11582))+(((-1.0)*r21*x11587)));
evalcond[1]=(((r10*x11578))+cj12+(((-1.0)*r12*x11582))+(((-1.0)*r11*x11587)));
evalcond[2]=(((r00*x11578))+(((-1.0)*r01*x11587))+(((-1.0)*r02*x11582))+(((-1.0)*sj12)));
evalcond[3]=((((-1.0)*sj13*x11565))+((sj15*x11573))+(((-1.0)*r20*x11572*x11580))+((r20*x11574))+(((-1.0)*cj13*x11571))+(((-1.0)*x11572*x11584))+((x11568*x11581)));
evalcond[4]=((((-1.0)*r20*x11568))+((x11574*x11581))+(((-1.0)*x11569*x11584))+(((-1.0)*x11572*x11573))+(((-1.0)*r20*x11569*x11580))+(((-1.0)*cj13*x11565))+((sj13*sj14)));
evalcond[5]=(((sj15*x11577))+((r00*x11574))+(((-1.0)*x11570*x11571))+(((-1.0)*cj15*x11567*x11580))+(((-1.0)*x11572*x11585))+((r01*x11564*x11568))+((cj12*x11575)));
evalcond[6]=((((-1.0)*x11566*x11571))+((sj15*x11576))+((r10*x11574))+(((-1.0)*x11572*x11579))+(((-1.0)*r10*x11572*x11580))+((sj12*x11575))+((x11568*x11583)));
evalcond[7]=((((-1.0)*sj15*x11567*x11580))+(((-1.0)*x11569*x11585))+(((-1.0)*x11572*x11577))+(((-1.0)*cj12*cj13*x11571))+((r01*x11564*x11574))+(((-1.0)*x11567*x11568))+(((-1.0)*x11565*x11570)));
evalcond[8]=((((-1.0)*r10*x11569*x11580))+((x11574*x11583))+(((-1.0)*r10*x11568))+(((-1.0)*x11572*x11576))+(((-1.0)*x11569*x11579))+(((-1.0)*x11565*x11566))+(((-1.0)*cj13*sj12*x11571)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x11588 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*gconst10*r21))+((cj12*gconst11*r20)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x11588.valid){
continue;
}
CheckValue<IkReal> x11589=IKPowWithIntegerCheck(IKsign((((gconst10*r00))+((gconst11*r01)))),-1);
if(!x11589.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x11588.value)+(((1.5707963267949)*(x11589.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x11590=IKcos(j16);
IkReal x11591=IKsin(j16);
IkReal x11592=((1.0)*cj14);
IkReal x11593=(sj12*sj13);
IkReal x11594=((1.0)*r00);
IkReal x11595=(cj15*gconst10);
IkReal x11596=((1.0)*sj15);
IkReal x11597=(cj12*sj13);
IkReal x11598=((1.0)*sj14);
IkReal x11599=((1.0)*cj15);
IkReal x11600=(gconst11*r21);
IkReal x11601=(gconst10*sj15);
IkReal x11602=(cj13*cj14);
IkReal x11603=(gconst11*r11);
IkReal x11604=(gconst11*r01);
IkReal x11605=(gconst11*x11590);
IkReal x11606=(r12*x11590);
IkReal x11607=(gconst11*x11591);
IkReal x11608=(r21*x11591);
IkReal x11609=((1.0)*x11591);
IkReal x11610=(r11*x11591);
IkReal x11611=(r22*x11590);
IkReal x11612=(r02*x11590);
IkReal x11613=(gconst10*r01*x11591);
IkReal x11614=((1.0)*gconst10*x11590);
evalcond[0]=((((-1.0)*r22*x11609))+(((-1.0)*r21*x11614))+((r20*x11605)));
evalcond[1]=((((-1.0)*r11*x11614))+(((-1.0)*r12*x11609))+cj12+((r10*x11605)));
evalcond[2]=((((-1.0)*r02*x11609))+((r00*x11605))+(((-1.0)*sj12))+(((-1.0)*r01*x11614)));
evalcond[3]=((((-1.0)*sj13*x11592))+((x11595*x11608))+(((-1.0)*cj13*x11598))+(((-1.0)*x11599*x11611))+((sj15*x11600))+(((-1.0)*r20*x11599*x11607))+((r20*x11601)));
evalcond[4]=((((-1.0)*r20*x11595))+(((-1.0)*r20*x11596*x11607))+(((-1.0)*x11599*x11600))+(((-1.0)*x11596*x11611))+((sj13*sj14))+((x11601*x11608))+(((-1.0)*cj13*x11592)));
evalcond[5]=(((r01*x11591*x11595))+((r00*x11601))+(((-1.0)*x11597*x11598))+((cj12*x11602))+(((-1.0)*x11599*x11612))+((sj15*x11604))+(((-1.0)*cj15*x11594*x11607)));
evalcond[6]=(((x11595*x11610))+(((-1.0)*x11593*x11598))+(((-1.0)*x11599*x11606))+((sj12*x11602))+((r10*x11601))+(((-1.0)*r10*x11599*x11607))+((sj15*x11603)));
evalcond[7]=(((r01*x11591*x11601))+(((-1.0)*x11599*x11604))+(((-1.0)*x11594*x11595))+(((-1.0)*x11596*x11612))+(((-1.0)*cj12*cj13*x11598))+(((-1.0)*sj15*x11594*x11607))+(((-1.0)*x11592*x11597)));
evalcond[8]=((((-1.0)*r10*x11595))+(((-1.0)*x11599*x11603))+(((-1.0)*x11596*x11606))+((x11601*x11610))+(((-1.0)*cj13*sj12*x11598))+(((-1.0)*x11592*x11593))+(((-1.0)*r10*x11596*x11607)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j12))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
sj12=0;
cj12=1.0;
j12=0;
IkReal x11615=(((r00*sj17))+((cj17*r01)));
j16eval[0]=x11615;
j16eval[1]=IKsign(x11615);
j16eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*r21*sj17))+((cj17*r20))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj12=0;
cj12=1.0;
j12=0;
IkReal x11616=((1.0)*sj17);
IkReal x11617=((((-1.0)*cj17*r21))+(((-1.0)*r20*x11616)));
j16eval[0]=x11617;
j16eval[1]=IKsign(x11617);
j16eval[2]=((IKabs(r02))+(IKabs((((cj17*r00))+(((-1.0)*r01*x11616))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
sj12=0;
cj12=1.0;
j12=0;
IkReal x11618=cj17*cj17;
IkReal x11619=(cj15*r11);
IkReal x11620=(cj15*r10);
IkReal x11621=((1.0)*cj17*sj17);
IkReal x11622=(((r20*x11618*x11620))+(((-1.0)*r21*x11618*x11619))+((cj15*r12*r22))+((r21*x11619))+(((-1.0)*r20*x11619*x11621))+(((-1.0)*r21*x11620*x11621)));
j16eval[0]=x11622;
j16eval[1]=IKsign(x11622);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
sj12=0;
cj12=1.0;
j12=0;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
IkReal x11623=(((r00*sj17))+((cj17*r01)));
j16eval[0]=x11623;
j16eval[1]=IKsign(x11623);
j16eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*r21*sj17))+((cj17*r20))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj12=0;
cj12=1.0;
j12=0;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
IkReal x11624=((1.0)*sj17);
IkReal x11625=((((-1.0)*cj17*r21))+(((-1.0)*r20*x11624)));
j16eval[0]=x11625;
j16eval[1]=IKsign(x11625);
j16eval[2]=((IKabs((((cj17*r00))+(((-1.0)*r01*x11624)))))+(IKabs(r02)));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj12=0;
cj12=1.0;
j12=0;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
IkReal x11626=cj17*cj17;
IkReal x11627=r11*r11;
IkReal x11628=(r11*sj17);
IkReal x11629=(cj17*r10);
IkReal x11630=((r12*r12)+x11627+((x11626*(r10*r10)))+(((-1.0)*x11626*x11627))+(((-2.0)*x11628*x11629)));
j16eval[0]=x11630;
j16eval[1]=((IKabs(r12))+(IKabs((x11628+(((-1.0)*x11629))))));
j16eval[2]=IKsign(x11630);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[2];
IkReal x11631=((-1.0)*pz);
sj12=0;
cj12=1.0;
j12=0;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x11631);
rxp1_0=(pz*r11);
rxp1_1=(r01*x11631);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j16eval[0]=((((-1.0)*cj17*r00))+((r01*sj17)));
j16eval[1]=(((cj17*r10))+(((-1.0)*r11*sj17)));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x11632=((-1.0)*pz);
sj12=0;
cj12=1.0;
j12=0;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x11632);
rxp1_0=(pz*r11);
rxp1_1=(r01*x11632);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j16eval[0]=((((-1.0)*cj17*r00))+((r01*sj17)));
j16eval[1]=r22;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x11633=IKPowWithIntegerCheck(((((-1.0)*cj17*r00))+((r01*sj17))),-1);
if(!x11633.valid){
continue;
}
CheckValue<IkReal> x11634=IKPowWithIntegerCheck(r22,-1);
if(!x11634.valid){
continue;
}
if( IKabs(((x11633.value)*((((cj14*sj13))+((cj13*sj14)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11634.value)*(((((-1.0)*cj13*cj14))+((sj13*sj14)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11633.value)*((((cj14*sj13))+((cj13*sj14))))))+IKsqr(((x11634.value)*(((((-1.0)*cj13*cj14))+((sj13*sj14))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x11633.value)*((((cj14*sj13))+((cj13*sj14))))), ((x11634.value)*(((((-1.0)*cj13*cj14))+((sj13*sj14))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x11635=IKcos(j16);
IkReal x11636=IKsin(j16);
IkReal x11637=(r01*sj17);
IkReal x11638=((1.0)*cj13);
IkReal x11639=(r11*sj17);
IkReal x11640=((1.0)*x11635);
IkReal x11641=(cj17*x11635);
IkReal x11642=((1.0)*cj17*x11636);
evalcond[0]=((-1.0)*r22*x11636);
evalcond[1]=((((-1.0)*x11637*x11640))+((r00*x11641)));
evalcond[2]=((((-1.0)*cj14*x11638))+(((-1.0)*r22*x11640))+((sj13*sj14)));
evalcond[3]=(((x11636*x11639))+(((-1.0)*r10*x11642)));
evalcond[4]=((1.0)+(((-1.0)*x11639*x11640))+((r10*x11641)));
evalcond[5]=(((x11636*x11637))+(((-1.0)*sj14*x11638))+(((-1.0)*r00*x11642))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x11643=IKPowWithIntegerCheck(((((-1.0)*cj17*r00))+((r01*sj17))),-1);
if(!x11643.valid){
continue;
}
CheckValue<IkReal> x11644=IKPowWithIntegerCheck((((cj17*r10))+(((-1.0)*r11*sj17))),-1);
if(!x11644.valid){
continue;
}
if( IKabs(((x11643.value)*((((cj14*sj13))+((cj13*sj14)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x11644.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11643.value)*((((cj14*sj13))+((cj13*sj14))))))+IKsqr(((-1.0)*(x11644.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x11643.value)*((((cj14*sj13))+((cj13*sj14))))), ((-1.0)*(x11644.value)));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x11645=IKcos(j16);
IkReal x11646=IKsin(j16);
IkReal x11647=(r01*sj17);
IkReal x11648=((1.0)*cj13);
IkReal x11649=(r11*sj17);
IkReal x11650=((1.0)*x11645);
IkReal x11651=(cj17*x11645);
IkReal x11652=((1.0)*cj17*x11646);
evalcond[0]=((-1.0)*r22*x11646);
evalcond[1]=((((-1.0)*x11647*x11650))+((r00*x11651)));
evalcond[2]=((((-1.0)*cj14*x11648))+(((-1.0)*r22*x11650))+((sj13*sj14)));
evalcond[3]=((((-1.0)*r10*x11652))+((x11646*x11649)));
evalcond[4]=((1.0)+((r10*x11651))+(((-1.0)*x11649*x11650)));
evalcond[5]=(((x11646*x11647))+(((-1.0)*sj14*x11648))+(((-1.0)*r00*x11652))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[2];
IkReal x11653=((-1.0)*px);
sj12=0;
cj12=1.0;
j12=0;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11653);
rxp1_1=(px*r21);
rxp1_2=(r11*x11653);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j16eval[0]=((((-1.0)*cj17*r20))+((r21*sj17)));
j16eval[1]=(((cj17*r10))+(((-1.0)*r11*sj17)));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x11654=((-1.0)*px);
sj12=0;
cj12=1.0;
j12=0;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11654);
rxp1_1=(px*r21);
rxp1_2=(r11*x11654);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j16eval[0]=((((-1.0)*cj17*r20))+((r21*sj17)));
j16eval[1]=r02;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x11655=((1.0)*sj13);
CheckValue<IkReal> x11656=IKPowWithIntegerCheck(((((-1.0)*cj17*r20))+((r21*sj17))),-1);
if(!x11656.valid){
continue;
}
CheckValue<IkReal> x11657=IKPowWithIntegerCheck(r02,-1);
if(!x11657.valid){
continue;
}
if( IKabs(((x11656.value)*(((((-1.0)*sj14*x11655))+((cj13*cj14)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11657.value)*(((((-1.0)*cj14*x11655))+(((-1.0)*cj13*sj14)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11656.value)*(((((-1.0)*sj14*x11655))+((cj13*cj14))))))+IKsqr(((x11657.value)*(((((-1.0)*cj14*x11655))+(((-1.0)*cj13*sj14))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x11656.value)*(((((-1.0)*sj14*x11655))+((cj13*cj14))))), ((x11657.value)*(((((-1.0)*cj14*x11655))+(((-1.0)*cj13*sj14))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x11658=IKcos(j16);
IkReal x11659=IKsin(j16);
IkReal x11660=((1.0)*cj13);
IkReal x11661=(r21*sj17);
IkReal x11662=(r11*sj17);
IkReal x11663=((1.0)*x11658);
IkReal x11664=(cj17*x11658);
IkReal x11665=((1.0)*cj17*x11659);
evalcond[0]=((-1.0)*r02*x11659);
evalcond[1]=(((r20*x11664))+(((-1.0)*x11661*x11663)));
evalcond[2]=(((x11659*x11662))+(((-1.0)*r10*x11665)));
evalcond[3]=((1.0)+(((-1.0)*x11662*x11663))+((r10*x11664)));
evalcond[4]=((((-1.0)*r02*x11663))+(((-1.0)*sj14*x11660))+(((-1.0)*cj14*sj13)));
evalcond[5]=((((-1.0)*r20*x11665))+((x11659*x11661))+(((-1.0)*cj14*x11660))+((sj13*sj14)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x11666=IKPowWithIntegerCheck(((((-1.0)*cj17*r20))+((r21*sj17))),-1);
if(!x11666.valid){
continue;
}
CheckValue<IkReal> x11667=IKPowWithIntegerCheck((((cj17*r10))+(((-1.0)*r11*sj17))),-1);
if(!x11667.valid){
continue;
}
if( IKabs(((x11666.value)*(((((-1.0)*sj13*sj14))+((cj13*cj14)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x11667.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11666.value)*(((((-1.0)*sj13*sj14))+((cj13*cj14))))))+IKsqr(((-1.0)*(x11667.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x11666.value)*(((((-1.0)*sj13*sj14))+((cj13*cj14))))), ((-1.0)*(x11667.value)));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x11668=IKcos(j16);
IkReal x11669=IKsin(j16);
IkReal x11670=((1.0)*cj13);
IkReal x11671=(r21*sj17);
IkReal x11672=(r11*sj17);
IkReal x11673=((1.0)*x11668);
IkReal x11674=(cj17*x11668);
IkReal x11675=((1.0)*cj17*x11669);
evalcond[0]=((-1.0)*r02*x11669);
evalcond[1]=((((-1.0)*x11671*x11673))+((r20*x11674)));
evalcond[2]=(((x11669*x11672))+(((-1.0)*r10*x11675)));
evalcond[3]=((1.0)+(((-1.0)*x11672*x11673))+((r10*x11674)));
evalcond[4]=((((-1.0)*sj14*x11670))+(((-1.0)*r02*x11673))+(((-1.0)*cj14*sj13)));
evalcond[5]=((((-1.0)*r20*x11675))+((x11669*x11671))+(((-1.0)*cj14*x11670))+((sj13*sj14)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j16]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x11676=cj17*cj17;
IkReal x11677=r11*r11;
IkReal x11678=(r11*sj17);
IkReal x11679=(cj17*r10);
CheckValue<IkReal> x11680=IKPowWithIntegerCheck(IKsign(((r12*r12)+x11677+(((-2.0)*x11678*x11679))+(((-1.0)*x11676*x11677))+((x11676*(r10*r10))))),-1);
if(!x11680.valid){
continue;
}
CheckValue<IkReal> x11681 = IKatan2WithCheck(IkReal(r12),IkReal((x11678+(((-1.0)*x11679)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11681.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11680.value)))+(x11681.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x11682=IKcos(j16);
IkReal x11683=IKsin(j16);
IkReal x11684=((1.0)*cj13);
IkReal x11685=(r11*sj17);
IkReal x11686=(cj17*x11682);
IkReal x11687=((1.0)*x11682);
IkReal x11688=((1.0)*x11683);
IkReal x11689=(sj17*x11683);
IkReal x11690=(cj17*x11688);
evalcond[0]=((((-1.0)*r22*x11688))+(((-1.0)*r21*sj17*x11687))+((r20*x11686)));
evalcond[1]=(((r00*x11686))+(((-1.0)*r02*x11688))+(((-1.0)*r01*sj17*x11687)));
evalcond[2]=(((x11683*x11685))+(((-1.0)*r12*x11687))+(((-1.0)*r10*x11690)));
evalcond[3]=((1.0)+((r10*x11686))+(((-1.0)*x11685*x11687))+(((-1.0)*r12*x11688)));
evalcond[4]=((((-1.0)*r20*x11690))+(((-1.0)*r22*x11687))+(((-1.0)*cj14*x11684))+((r21*x11689))+((sj13*sj14)));
evalcond[5]=((((-1.0)*r02*x11687))+(((-1.0)*sj14*x11684))+(((-1.0)*cj14*sj13))+(((-1.0)*r00*x11690))+((r01*x11689)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x11691=((1.0)*sj17);
CheckValue<IkReal> x11692=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj17*r21))+(((-1.0)*r20*x11691)))),-1);
if(!x11692.valid){
continue;
}
CheckValue<IkReal> x11693 = IKatan2WithCheck(IkReal((((cj17*r00))+(((-1.0)*r01*x11691)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11693.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11692.value)))+(x11693.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x11694=IKcos(j16);
IkReal x11695=IKsin(j16);
IkReal x11696=((1.0)*cj13);
IkReal x11697=(r11*sj17);
IkReal x11698=(cj17*x11694);
IkReal x11699=((1.0)*x11694);
IkReal x11700=((1.0)*x11695);
IkReal x11701=(sj17*x11695);
IkReal x11702=(cj17*x11700);
evalcond[0]=((((-1.0)*r22*x11700))+((r20*x11698))+(((-1.0)*r21*sj17*x11699)));
evalcond[1]=((((-1.0)*r01*sj17*x11699))+((r00*x11698))+(((-1.0)*r02*x11700)));
evalcond[2]=(((x11695*x11697))+(((-1.0)*r12*x11699))+(((-1.0)*r10*x11702)));
evalcond[3]=((1.0)+(((-1.0)*x11697*x11699))+((r10*x11698))+(((-1.0)*r12*x11700)));
evalcond[4]=((((-1.0)*r22*x11699))+(((-1.0)*cj14*x11696))+((r21*x11701))+(((-1.0)*r20*x11702))+((sj13*sj14)));
evalcond[5]=(((r01*x11701))+(((-1.0)*r02*x11699))+(((-1.0)*sj14*x11696))+(((-1.0)*cj14*sj13))+(((-1.0)*r00*x11702)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x11703 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj17))+((cj17*r20)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x11703.valid){
continue;
}
CheckValue<IkReal> x11704=IKPowWithIntegerCheck(IKsign((((r00*sj17))+((cj17*r01)))),-1);
if(!x11704.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x11703.value)+(((1.5707963267949)*(x11704.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x11705=IKcos(j16);
IkReal x11706=IKsin(j16);
IkReal x11707=((1.0)*cj13);
IkReal x11708=(r11*sj17);
IkReal x11709=(cj17*x11705);
IkReal x11710=((1.0)*x11705);
IkReal x11711=((1.0)*x11706);
IkReal x11712=(sj17*x11706);
IkReal x11713=(cj17*x11711);
evalcond[0]=((((-1.0)*r22*x11711))+((r20*x11709))+(((-1.0)*r21*sj17*x11710)));
evalcond[1]=(((r00*x11709))+(((-1.0)*r01*sj17*x11710))+(((-1.0)*r02*x11711)));
evalcond[2]=((((-1.0)*r10*x11713))+(((-1.0)*r12*x11710))+((x11706*x11708)));
evalcond[3]=((1.0)+(((-1.0)*x11708*x11710))+(((-1.0)*r12*x11711))+((r10*x11709)));
evalcond[4]=((((-1.0)*r20*x11713))+(((-1.0)*r22*x11710))+((sj13*sj14))+((r21*x11712))+(((-1.0)*cj14*x11707)));
evalcond[5]=(((r01*x11712))+(((-1.0)*r00*x11713))+(((-1.0)*sj14*x11707))+(((-1.0)*cj14*sj13))+(((-1.0)*r02*x11710)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
sj12=0;
cj12=1.0;
j12=0;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
IkReal x11714=(((r00*sj17))+((cj17*r01)));
j16eval[0]=x11714;
j16eval[1]=IKsign(x11714);
j16eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*r21*sj17))+((cj17*r20))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj12=0;
cj12=1.0;
j12=0;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
IkReal x11715=((1.0)*sj17);
IkReal x11716=((((-1.0)*cj17*r21))+(((-1.0)*r20*x11715)));
j16eval[0]=x11716;
j16eval[1]=IKsign(x11716);
j16eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x11715))+((cj17*r00))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj12=0;
cj12=1.0;
j12=0;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
IkReal x11717=cj17*cj17;
IkReal x11718=r11*r11;
IkReal x11719=(r11*sj17);
IkReal x11720=(cj17*r10);
IkReal x11721=(((x11717*(r10*r10)))+x11718+(((-2.0)*x11719*x11720))+(r12*r12)+(((-1.0)*x11717*x11718)));
j16eval[0]=x11721;
j16eval[1]=((IKabs(r12))+(IKabs((x11719+(((-1.0)*x11720))))));
j16eval[2]=IKsign(x11721);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[2];
IkReal x11722=((-1.0)*pz);
sj12=0;
cj12=1.0;
j12=0;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x11722);
rxp1_0=(pz*r11);
rxp1_1=(r01*x11722);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j16eval[0]=(((cj17*r00))+(((-1.0)*r01*sj17)));
j16eval[1]=r22;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x11723=((-1.0)*pz);
sj12=0;
cj12=1.0;
j12=0;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x11723);
rxp1_0=(pz*r11);
rxp1_1=(r01*x11723);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x11724=((1.0)*sj17);
j16eval[0]=((((-1.0)*r01*x11724))+((cj17*r00)));
j16eval[1]=((((-1.0)*r11*x11724))+((cj17*r10)));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x11725=((1.0)*sj17);
CheckValue<IkReal> x11726=IKPowWithIntegerCheck(((((-1.0)*r01*x11725))+((cj17*r00))),-1);
if(!x11726.valid){
continue;
}
CheckValue<IkReal> x11727=IKPowWithIntegerCheck(((((-1.0)*r11*x11725))+((cj17*r10))),-1);
if(!x11727.valid){
continue;
}
if( IKabs(((x11726.value)*((((cj14*sj13))+((cj13*sj14)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x11727.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11726.value)*((((cj14*sj13))+((cj13*sj14))))))+IKsqr(((-1.0)*(x11727.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x11726.value)*((((cj14*sj13))+((cj13*sj14))))), ((-1.0)*(x11727.value)));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x11728=IKcos(j16);
IkReal x11729=IKsin(j16);
IkReal x11730=(cj17*r00);
IkReal x11731=((1.0)*cj14);
IkReal x11732=(cj17*r10);
IkReal x11733=((1.0)*r01*sj17);
IkReal x11734=((1.0)*r11*sj17);
evalcond[0]=((-1.0)*r22*x11729);
evalcond[1]=((((-1.0)*cj13*x11731))+((sj13*sj14))+((r22*x11728)));
evalcond[2]=((((-1.0)*x11728*x11733))+((x11728*x11730)));
evalcond[3]=((((-1.0)*x11729*x11734))+((x11729*x11732)));
evalcond[4]=((1.0)+(((-1.0)*x11728*x11734))+((x11728*x11732)));
evalcond[5]=((((-1.0)*cj13*sj14))+(((-1.0)*x11729*x11733))+((x11729*x11730))+(((-1.0)*sj13*x11731)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x11735=IKPowWithIntegerCheck((((cj17*r00))+(((-1.0)*r01*sj17))),-1);
if(!x11735.valid){
continue;
}
CheckValue<IkReal> x11736=IKPowWithIntegerCheck(r22,-1);
if(!x11736.valid){
continue;
}
if( IKabs(((x11735.value)*((((cj14*sj13))+((cj13*sj14)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11736.value)*(((((-1.0)*sj13*sj14))+((cj13*cj14)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11735.value)*((((cj14*sj13))+((cj13*sj14))))))+IKsqr(((x11736.value)*(((((-1.0)*sj13*sj14))+((cj13*cj14))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x11735.value)*((((cj14*sj13))+((cj13*sj14))))), ((x11736.value)*(((((-1.0)*sj13*sj14))+((cj13*cj14))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x11737=IKcos(j16);
IkReal x11738=IKsin(j16);
IkReal x11739=(cj17*r00);
IkReal x11740=((1.0)*cj14);
IkReal x11741=(cj17*r10);
IkReal x11742=((1.0)*r01*sj17);
IkReal x11743=((1.0)*r11*sj17);
evalcond[0]=((-1.0)*r22*x11738);
evalcond[1]=((((-1.0)*cj13*x11740))+((sj13*sj14))+((r22*x11737)));
evalcond[2]=(((x11737*x11739))+(((-1.0)*x11737*x11742)));
evalcond[3]=((((-1.0)*x11738*x11743))+((x11738*x11741)));
evalcond[4]=((1.0)+(((-1.0)*x11737*x11743))+((x11737*x11741)));
evalcond[5]=((((-1.0)*x11738*x11742))+(((-1.0)*cj13*sj14))+(((-1.0)*sj13*x11740))+((x11738*x11739)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[2];
IkReal x11744=((-1.0)*px);
sj12=0;
cj12=1.0;
j12=0;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11744);
rxp1_1=(px*r21);
rxp1_2=(r11*x11744);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j16eval[0]=((((-1.0)*r21*sj17))+((cj17*r20)));
j16eval[1]=r02;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x11745=((-1.0)*px);
sj12=0;
cj12=1.0;
j12=0;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11745);
rxp1_1=(px*r21);
rxp1_2=(r11*x11745);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x11746=((1.0)*sj17);
j16eval[0]=((((-1.0)*r21*x11746))+((cj17*r20)));
j16eval[1]=((((-1.0)*r11*x11746))+((cj17*r10)));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x11747=((1.0)*sj17);
CheckValue<IkReal> x11748=IKPowWithIntegerCheck(((((-1.0)*r21*x11747))+((cj17*r20))),-1);
if(!x11748.valid){
continue;
}
CheckValue<IkReal> x11749=IKPowWithIntegerCheck(((((-1.0)*r11*x11747))+((cj17*r10))),-1);
if(!x11749.valid){
continue;
}
if( IKabs(((x11748.value)*(((((-1.0)*sj13*sj14))+((cj13*cj14)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x11749.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11748.value)*(((((-1.0)*sj13*sj14))+((cj13*cj14))))))+IKsqr(((-1.0)*(x11749.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x11748.value)*(((((-1.0)*sj13*sj14))+((cj13*cj14))))), ((-1.0)*(x11749.value)));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x11750=IKcos(j16);
IkReal x11751=IKsin(j16);
IkReal x11752=(cj17*r10);
IkReal x11753=((1.0)*sj17);
IkReal x11754=(cj17*r20);
IkReal x11755=((1.0)*cj14);
evalcond[0]=((-1.0)*r02*x11751);
evalcond[1]=((((-1.0)*r21*x11750*x11753))+((x11750*x11754)));
evalcond[2]=((((-1.0)*cj13*sj14))+((r02*x11750))+(((-1.0)*sj13*x11755)));
evalcond[3]=((((-1.0)*r11*x11751*x11753))+((x11751*x11752)));
evalcond[4]=((1.0)+(((-1.0)*r11*x11750*x11753))+((x11750*x11752)));
evalcond[5]=((((-1.0)*r21*x11751*x11753))+(((-1.0)*cj13*x11755))+((sj13*sj14))+((x11751*x11754)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x11756=IKPowWithIntegerCheck(((((-1.0)*r21*sj17))+((cj17*r20))),-1);
if(!x11756.valid){
continue;
}
CheckValue<IkReal> x11757=IKPowWithIntegerCheck(r02,-1);
if(!x11757.valid){
continue;
}
if( IKabs(((x11756.value)*(((((-1.0)*sj13*sj14))+((cj13*cj14)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11757.value)*((((cj14*sj13))+((cj13*sj14)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11756.value)*(((((-1.0)*sj13*sj14))+((cj13*cj14))))))+IKsqr(((x11757.value)*((((cj14*sj13))+((cj13*sj14))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x11756.value)*(((((-1.0)*sj13*sj14))+((cj13*cj14))))), ((x11757.value)*((((cj14*sj13))+((cj13*sj14))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x11758=IKcos(j16);
IkReal x11759=IKsin(j16);
IkReal x11760=(cj17*r10);
IkReal x11761=((1.0)*sj17);
IkReal x11762=(cj17*r20);
IkReal x11763=((1.0)*cj14);
evalcond[0]=((-1.0)*r02*x11759);
evalcond[1]=((((-1.0)*r21*x11758*x11761))+((x11758*x11762)));
evalcond[2]=((((-1.0)*cj13*sj14))+(((-1.0)*sj13*x11763))+((r02*x11758)));
evalcond[3]=(((x11759*x11760))+(((-1.0)*r11*x11759*x11761)));
evalcond[4]=((1.0)+(((-1.0)*r11*x11758*x11761))+((x11758*x11760)));
evalcond[5]=(((x11759*x11762))+(((-1.0)*cj13*x11763))+((sj13*sj14))+(((-1.0)*r21*x11759*x11761)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j16]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x11764=cj17*cj17;
IkReal x11765=r11*r11;
IkReal x11766=(r11*sj17);
IkReal x11767=(cj17*r10);
CheckValue<IkReal> x11768=IKPowWithIntegerCheck(IKsign((x11765+(r12*r12)+(((-1.0)*x11764*x11765))+((x11764*(r10*r10)))+(((-2.0)*x11766*x11767)))),-1);
if(!x11768.valid){
continue;
}
CheckValue<IkReal> x11769 = IKatan2WithCheck(IkReal(r12),IkReal((x11766+(((-1.0)*x11767)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11769.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11768.value)))+(x11769.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x11770=IKsin(j16);
IkReal x11771=IKcos(j16);
IkReal x11772=((1.0)*cj13);
IkReal x11773=((1.0)*sj17);
IkReal x11774=(cj17*x11770);
IkReal x11775=(cj17*x11771);
IkReal x11776=((1.0)*x11770);
evalcond[0]=(((r10*x11774))+((r12*x11771))+(((-1.0)*r11*x11770*x11773)));
evalcond[1]=(((r20*x11775))+(((-1.0)*r22*x11776))+(((-1.0)*r21*x11771*x11773)));
evalcond[2]=((((-1.0)*r01*x11771*x11773))+(((-1.0)*r02*x11776))+((r00*x11775)));
evalcond[3]=((1.0)+((r10*x11775))+(((-1.0)*r12*x11776))+(((-1.0)*r11*x11771*x11773)));
evalcond[4]=((((-1.0)*r21*x11770*x11773))+((r20*x11774))+((sj13*sj14))+(((-1.0)*cj14*x11772))+((r22*x11771)));
evalcond[5]=((((-1.0)*sj14*x11772))+((r02*x11771))+((r00*x11774))+(((-1.0)*cj14*sj13))+(((-1.0)*r01*x11770*x11773)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x11777=((1.0)*sj17);
CheckValue<IkReal> x11778 = IKatan2WithCheck(IkReal((((cj17*r00))+(((-1.0)*r01*x11777)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11778.valid){
continue;
}
CheckValue<IkReal> x11779=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj17*r21))+(((-1.0)*r20*x11777)))),-1);
if(!x11779.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x11778.value)+(((1.5707963267949)*(x11779.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x11780=IKsin(j16);
IkReal x11781=IKcos(j16);
IkReal x11782=((1.0)*cj13);
IkReal x11783=((1.0)*sj17);
IkReal x11784=(cj17*x11780);
IkReal x11785=(cj17*x11781);
IkReal x11786=((1.0)*x11780);
evalcond[0]=(((r12*x11781))+((r10*x11784))+(((-1.0)*r11*x11780*x11783)));
evalcond[1]=((((-1.0)*r21*x11781*x11783))+((r20*x11785))+(((-1.0)*r22*x11786)));
evalcond[2]=((((-1.0)*r01*x11781*x11783))+(((-1.0)*r02*x11786))+((r00*x11785)));
evalcond[3]=((1.0)+(((-1.0)*r11*x11781*x11783))+(((-1.0)*r12*x11786))+((r10*x11785)));
evalcond[4]=((((-1.0)*r21*x11780*x11783))+((r20*x11784))+(((-1.0)*cj14*x11782))+((r22*x11781))+((sj13*sj14)));
evalcond[5]=((((-1.0)*sj14*x11782))+((r02*x11781))+(((-1.0)*r01*x11780*x11783))+(((-1.0)*cj14*sj13))+((r00*x11784)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x11787 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj17))+((cj17*r20)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x11787.valid){
continue;
}
CheckValue<IkReal> x11788=IKPowWithIntegerCheck(IKsign((((r00*sj17))+((cj17*r01)))),-1);
if(!x11788.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x11787.value)+(((1.5707963267949)*(x11788.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x11789=IKsin(j16);
IkReal x11790=IKcos(j16);
IkReal x11791=((1.0)*cj13);
IkReal x11792=((1.0)*sj17);
IkReal x11793=(cj17*x11789);
IkReal x11794=(cj17*x11790);
IkReal x11795=((1.0)*x11789);
evalcond[0]=(((r12*x11790))+((r10*x11793))+(((-1.0)*r11*x11789*x11792)));
evalcond[1]=((((-1.0)*r21*x11790*x11792))+((r20*x11794))+(((-1.0)*r22*x11795)));
evalcond[2]=((((-1.0)*r02*x11795))+(((-1.0)*r01*x11790*x11792))+((r00*x11794)));
evalcond[3]=((1.0)+(((-1.0)*r11*x11790*x11792))+((r10*x11794))+(((-1.0)*r12*x11795)));
evalcond[4]=(((r20*x11793))+(((-1.0)*cj14*x11791))+((sj13*sj14))+((r22*x11790))+(((-1.0)*r21*x11789*x11792)));
evalcond[5]=((((-1.0)*r01*x11789*x11792))+((r02*x11790))+(((-1.0)*cj14*sj13))+((r00*x11793))+(((-1.0)*sj14*x11791)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11796=((-1.0)*r20);
IkReal x11798 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x11798)==0){
continue;
}
IkReal x11797=pow(x11798,-0.5);
CheckValue<IkReal> x11799 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x11796),IKFAST_ATAN2_MAGTHRESH);
if(!x11799.valid){
continue;
}
IkReal gconst18=((-1.0)*(x11799.value));
IkReal gconst19=(r21*x11797);
IkReal gconst20=(x11796*x11797);
CheckValue<IkReal> x11800 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11800.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j17+(x11800.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
IkReal x11801=((-1.0)*r20);
IkReal x11802=x11797;
CheckValue<IkReal> x11804 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x11801),IKFAST_ATAN2_MAGTHRESH);
if(!x11804.valid){
continue;
}
IkReal x11803=((-1.0)*(x11804.value));
sj12=0;
cj12=1.0;
j12=0;
sj17=gconst19;
cj17=gconst20;
j17=x11803;
IkReal gconst18=x11803;
IkReal gconst19=(r21*x11802);
IkReal gconst20=(x11801*x11802);
j16eval[0]=1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
IkReal x11805=((-1.0)*r20);
IkReal x11806=x11797;
CheckValue<IkReal> x11808 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x11805),IKFAST_ATAN2_MAGTHRESH);
if(!x11808.valid){
continue;
}
IkReal x11807=((-1.0)*(x11808.value));
sj12=0;
cj12=1.0;
j12=0;
sj17=gconst19;
cj17=gconst20;
j17=x11807;
IkReal gconst18=x11807;
IkReal gconst19=(r21*x11806);
IkReal gconst20=(x11805*x11806);
CheckValue<IkReal> x11816=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x11816.valid){
continue;
}
IkReal x11809=x11816.value;
IkReal x11810=(cj15*x11809);
IkReal x11811=(r11*x11810);
IkReal x11812=(r01*x11810);
IkReal x11813=(r00*x11810);
IkReal x11814=(r10*x11810);
IkReal x11815=(r20*r21*x11810);
j16eval[0]=IKsign((((r01*x11811*(r21*r21)))+((r10*x11813*(r20*r20)))+((cj15*r02*r12))+((r00*r20*r21*x11811))+((r10*r20*r21*x11812))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
IkReal x11817=((-1.0)*r20);
IkReal x11818=x11797;
CheckValue<IkReal> x11820 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x11817),IKFAST_ATAN2_MAGTHRESH);
if(!x11820.valid){
continue;
}
IkReal x11819=((-1.0)*(x11820.value));
sj12=0;
cj12=1.0;
j12=0;
sj17=gconst19;
cj17=gconst20;
j17=x11819;
IkReal gconst18=x11819;
IkReal gconst19=(r21*x11818);
IkReal gconst20=(x11817*x11818);
CheckValue<IkReal> x11828=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x11828.valid){
continue;
}
IkReal x11821=x11828.value;
IkReal x11822=(sj15*x11821);
IkReal x11823=(r11*x11822);
IkReal x11824=(r00*x11822);
IkReal x11825=(r01*x11822);
IkReal x11826=(r10*x11822);
IkReal x11827=(r20*r21*x11822);
j16eval[0]=IKsign((((r02*r12*sj15))+((r00*r20*r21*x11823))+((r10*r20*r21*x11825))+((r10*x11824*(r20*r20)))+((r01*x11823*(r21*r21)))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j15))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
IkReal x11829=((-1.0)*r20);
IkReal x11830=x11797;
CheckValue<IkReal> x11832 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x11829),IKFAST_ATAN2_MAGTHRESH);
if(!x11832.valid){
continue;
}
IkReal x11831=((-1.0)*(x11832.value));
sj12=0;
cj12=1.0;
j12=0;
sj17=gconst19;
cj17=gconst20;
j17=x11831;
sj15=0;
cj15=1.0;
j15=0;
IkReal gconst18=x11831;
IkReal gconst19=(r21*x11830);
IkReal gconst20=(x11829*x11830);
j16eval[0]=1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x11833=((-1.0)*r20);
IkReal x11834=x11797;
CheckValue<IkReal> x11836 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x11833),IKFAST_ATAN2_MAGTHRESH);
if(!x11836.valid){
continue;
}
IkReal x11835=((-1.0)*(x11836.value));
sj12=0;
cj12=1.0;
j12=0;
sj17=gconst19;
cj17=gconst20;
j17=x11835;
sj15=0;
cj15=1.0;
j15=0;
IkReal gconst18=x11835;
IkReal gconst19=(r21*x11834);
IkReal gconst20=(x11833*x11834);
j16eval[0]=r12;
j16eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
IkReal x11837=((-1.0)*r20);
IkReal x11838=x11797;
CheckValue<IkReal> x11840 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x11837),IKFAST_ATAN2_MAGTHRESH);
if(!x11840.valid){
continue;
}
IkReal x11839=((-1.0)*(x11840.value));
sj12=0;
cj12=1.0;
j12=0;
sj17=gconst19;
cj17=gconst20;
j17=x11839;
sj15=0;
cj15=1.0;
j15=0;
IkReal gconst18=x11839;
IkReal gconst19=(r21*x11838);
IkReal gconst20=(x11837*x11838);
IkReal x11841=r22*r22;
IkReal x11842=(cj13*cj14*r02);
IkReal x11843=(r02*sj13*sj14);
CheckValue<IkReal> x11847=IKPowWithIntegerCheck(((-1.0)+x11841),-1);
if(!x11847.valid){
continue;
}
IkReal x11844=x11847.value;
if((((1.0)+(((-1.0)*x11841)))) < -0.00001)
continue;
IkReal x11845=IKsqrt(((1.0)+(((-1.0)*x11841))));
IkReal x11846=(r22*x11844*x11845);
j16eval[0]=((IKabs(((((-1.0)*x11843))+x11842)))+(IKabs(((((-1.0)*x11842*x11846))+((x11843*x11846))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x11848=(sj13*sj14);
IkReal x11849=(gconst19*r01);
IkReal x11850=(cj13*cj14);
IkReal x11851=(gconst20*r00);
CheckValue<IkReal> x11852=IKPowWithIntegerCheck(IKsign(((x11849*x11849)+(((-2.0)*x11849*x11851))+(r02*r02)+(x11851*x11851))),-1);
if(!x11852.valid){
continue;
}
CheckValue<IkReal> x11853 = IKatan2WithCheck(IkReal((((x11848*x11849))+(((-1.0)*x11848*x11851))+(((-1.0)*x11849*x11850))+((x11850*x11851)))),IkReal(((((-1.0)*r02*x11848))+((r02*x11850)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11853.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11852.value)))+(x11853.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x11854=IKcos(j16);
IkReal x11855=IKsin(j16);
IkReal x11856=(gconst19*r11);
IkReal x11857=(gconst19*r21);
IkReal x11858=((1.0)*sj14);
IkReal x11859=(gconst19*r01);
IkReal x11860=(gconst20*x11854);
IkReal x11861=((1.0)*x11854);
IkReal x11862=((1.0)*x11855);
evalcond[0]=((((-1.0)*r22*x11862))+((r20*x11860))+(((-1.0)*x11857*x11861)));
evalcond[1]=((((-1.0)*x11859*x11861))+((r00*x11860))+(((-1.0)*r02*x11862)));
evalcond[2]=((((-1.0)*gconst20*r10*x11862))+(((-1.0)*r12*x11861))+((x11855*x11856)));
evalcond[3]=((1.0)+(((-1.0)*x11856*x11861))+((r10*x11860))+(((-1.0)*r12*x11862)));
evalcond[4]=((((-1.0)*sj13*x11858))+(((-1.0)*gconst20*r00*x11862))+((cj13*cj14))+((x11855*x11859))+(((-1.0)*r02*x11861)));
evalcond[5]=((((-1.0)*r22*x11861))+(((-1.0)*cj13*x11858))+(((-1.0)*gconst20*r20*x11862))+(((-1.0)*cj14*sj13))+((x11855*x11857)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x11863=(gconst20*r10);
IkReal x11864=(gconst19*r11);
CheckValue<IkReal> x11865=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x11863*x11863)+(((-2.0)*x11863*x11864))+(x11864*x11864))),-1);
if(!x11865.valid){
continue;
}
CheckValue<IkReal> x11866 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x11863))+x11864)),IKFAST_ATAN2_MAGTHRESH);
if(!x11866.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11865.value)))+(x11866.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x11867=IKcos(j16);
IkReal x11868=IKsin(j16);
IkReal x11869=(gconst19*r11);
IkReal x11870=(gconst19*r21);
IkReal x11871=((1.0)*sj14);
IkReal x11872=(gconst19*r01);
IkReal x11873=(gconst20*x11867);
IkReal x11874=((1.0)*x11867);
IkReal x11875=((1.0)*x11868);
evalcond[0]=((((-1.0)*r22*x11875))+((r20*x11873))+(((-1.0)*x11870*x11874)));
evalcond[1]=((((-1.0)*x11872*x11874))+((r00*x11873))+(((-1.0)*r02*x11875)));
evalcond[2]=((((-1.0)*gconst20*r10*x11875))+((x11868*x11869))+(((-1.0)*r12*x11874)));
evalcond[3]=((1.0)+(((-1.0)*x11869*x11874))+((r10*x11873))+(((-1.0)*r12*x11875)));
evalcond[4]=(((x11868*x11872))+(((-1.0)*sj13*x11871))+(((-1.0)*gconst20*r00*x11875))+(((-1.0)*r02*x11874))+((cj13*cj14)));
evalcond[5]=((((-1.0)*r22*x11874))+(((-1.0)*cj13*x11871))+((x11868*x11870))+(((-1.0)*gconst20*r20*x11875))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x11876 = IKatan2WithCheck(IkReal(((((-1.0)*gconst19*r21))+((gconst20*r20)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x11876.valid){
continue;
}
CheckValue<IkReal> x11877=IKPowWithIntegerCheck(IKsign((((gconst20*r01))+((gconst19*r00)))),-1);
if(!x11877.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x11876.value)+(((1.5707963267949)*(x11877.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x11878=IKcos(j16);
IkReal x11879=IKsin(j16);
IkReal x11880=(gconst19*r11);
IkReal x11881=(gconst19*r21);
IkReal x11882=((1.0)*sj14);
IkReal x11883=(gconst19*r01);
IkReal x11884=(gconst20*x11878);
IkReal x11885=((1.0)*x11878);
IkReal x11886=((1.0)*x11879);
evalcond[0]=((((-1.0)*x11881*x11885))+(((-1.0)*r22*x11886))+((r20*x11884)));
evalcond[1]=((((-1.0)*x11883*x11885))+((r00*x11884))+(((-1.0)*r02*x11886)));
evalcond[2]=((((-1.0)*r12*x11885))+(((-1.0)*gconst20*r10*x11886))+((x11879*x11880)));
evalcond[3]=((1.0)+(((-1.0)*x11880*x11885))+((r10*x11884))+(((-1.0)*r12*x11886)));
evalcond[4]=((((-1.0)*gconst20*r00*x11886))+(((-1.0)*r02*x11885))+(((-1.0)*sj13*x11882))+((cj13*cj14))+((x11879*x11883)));
evalcond[5]=((((-1.0)*gconst20*r20*x11886))+(((-1.0)*r22*x11885))+(((-1.0)*cj14*sj13))+(((-1.0)*cj13*x11882))+((x11879*x11881)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
IkReal x11887=((-1.0)*r20);
IkReal x11888=x11797;
CheckValue<IkReal> x11890 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x11887),IKFAST_ATAN2_MAGTHRESH);
if(!x11890.valid){
continue;
}
IkReal x11889=((-1.0)*(x11890.value));
sj12=0;
cj12=1.0;
j12=0;
sj17=gconst19;
cj17=gconst20;
j17=x11889;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
IkReal gconst18=x11889;
IkReal gconst19=(r21*x11888);
IkReal gconst20=(x11887*x11888);
j16eval[0]=1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x11891=((-1.0)*r20);
IkReal x11892=x11797;
CheckValue<IkReal> x11894 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x11891),IKFAST_ATAN2_MAGTHRESH);
if(!x11894.valid){
continue;
}
IkReal x11893=((-1.0)*(x11894.value));
sj12=0;
cj12=1.0;
j12=0;
sj17=gconst19;
cj17=gconst20;
j17=x11893;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
IkReal gconst18=x11893;
IkReal gconst19=(r21*x11892);
IkReal gconst20=(x11891*x11892);
j16eval[0]=r12;
j16eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
IkReal x11895=((-1.0)*r20);
IkReal x11896=x11797;
CheckValue<IkReal> x11898 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x11895),IKFAST_ATAN2_MAGTHRESH);
if(!x11898.valid){
continue;
}
IkReal x11897=((-1.0)*(x11898.value));
sj12=0;
cj12=1.0;
j12=0;
sj17=gconst19;
cj17=gconst20;
j17=x11897;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
IkReal gconst18=x11897;
IkReal gconst19=(r21*x11896);
IkReal gconst20=(x11895*x11896);
IkReal x11899=r22*r22;
CheckValue<IkReal> x11905=IKPowWithIntegerCheck(((-1.0)+x11899),-1);
if(!x11905.valid){
continue;
}
IkReal x11900=x11905.value;
IkReal x11901=((1.0)*cj14*r12*sj13);
IkReal x11902=((1.0)*cj13*r12*sj14);
if((((1.0)+(((-1.0)*x11899)))) < -0.00001)
continue;
IkReal x11903=IKsqrt(((1.0)+(((-1.0)*x11899))));
IkReal x11904=(r22*x11900*x11903);
j16eval[0]=((IKabs(((((-1.0)*x11901))+(((-1.0)*x11902)))))+(IKabs(((((-1.0)*x11901*x11904))+(((-1.0)*x11902*x11904))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x11906=((1.0)*gconst19);
IkReal x11907=(cj14*sj13);
IkReal x11908=(gconst20*r10);
IkReal x11909=((1.0)*cj13*sj14);
CheckValue<IkReal> x11910 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x11907))+(((-1.0)*r12*x11909)))),IkReal(((((-1.0)*r11*x11906*x11907))+((x11907*x11908))+(((-1.0)*cj13*r11*sj14*x11906))+((cj13*sj14*x11908)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11910.valid){
continue;
}
CheckValue<IkReal> x11911=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x11906))+(((-1.0)*gconst20*r01)))),-1);
if(!x11911.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x11910.value)+(((1.5707963267949)*(x11911.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x11912=IKsin(j16);
IkReal x11913=IKcos(j16);
IkReal x11914=(gconst20*r00);
IkReal x11915=((1.0)*sj14);
IkReal x11916=((1.0)*x11912);
IkReal x11917=(gconst20*x11912);
IkReal x11918=(gconst20*x11913);
IkReal x11919=(gconst19*x11916);
IkReal x11920=((1.0)*gconst19*x11913);
evalcond[0]=(((r10*x11917))+(((-1.0)*r11*x11919))+((r12*x11913)));
evalcond[1]=((((-1.0)*r22*x11916))+((r20*x11918))+(((-1.0)*r21*x11920)));
evalcond[2]=(((x11913*x11914))+(((-1.0)*r01*x11920))+(((-1.0)*r02*x11916)));
evalcond[3]=((1.0)+((r10*x11918))+(((-1.0)*r12*x11916))+(((-1.0)*r11*x11920)));
evalcond[4]=(((x11912*x11914))+((r02*x11913))+((cj13*cj14))+(((-1.0)*sj13*x11915))+(((-1.0)*r01*x11919)));
evalcond[5]=(((r22*x11913))+(((-1.0)*cj13*x11915))+(((-1.0)*r21*x11919))+(((-1.0)*cj14*sj13))+((r20*x11917)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x11921=(gconst20*r10);
IkReal x11922=(gconst19*r11);
CheckValue<IkReal> x11923=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x11922*x11922)+(x11921*x11921)+(((-2.0)*x11921*x11922)))),-1);
if(!x11923.valid){
continue;
}
CheckValue<IkReal> x11924 = IKatan2WithCheck(IkReal(r12),IkReal((x11922+(((-1.0)*x11921)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11924.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11923.value)))+(x11924.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x11925=IKsin(j16);
IkReal x11926=IKcos(j16);
IkReal x11927=(gconst20*r00);
IkReal x11928=((1.0)*sj14);
IkReal x11929=((1.0)*x11925);
IkReal x11930=(gconst20*x11925);
IkReal x11931=(gconst20*x11926);
IkReal x11932=(gconst19*x11929);
IkReal x11933=((1.0)*gconst19*x11926);
evalcond[0]=(((r10*x11930))+((r12*x11926))+(((-1.0)*r11*x11932)));
evalcond[1]=((((-1.0)*r21*x11933))+((r20*x11931))+(((-1.0)*r22*x11929)));
evalcond[2]=((((-1.0)*r02*x11929))+((x11926*x11927))+(((-1.0)*r01*x11933)));
evalcond[3]=((1.0)+((r10*x11931))+(((-1.0)*r12*x11929))+(((-1.0)*r11*x11933)));
evalcond[4]=(((r02*x11926))+((x11925*x11927))+(((-1.0)*sj13*x11928))+(((-1.0)*r01*x11932))+((cj13*cj14)));
evalcond[5]=((((-1.0)*r21*x11932))+(((-1.0)*cj13*x11928))+((r20*x11930))+((r22*x11926))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x11934 = IKatan2WithCheck(IkReal(((((-1.0)*gconst19*r21))+((gconst20*r20)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x11934.valid){
continue;
}
CheckValue<IkReal> x11935=IKPowWithIntegerCheck(IKsign((((gconst20*r01))+((gconst19*r00)))),-1);
if(!x11935.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x11934.value)+(((1.5707963267949)*(x11935.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x11936=IKsin(j16);
IkReal x11937=IKcos(j16);
IkReal x11938=(gconst20*r00);
IkReal x11939=((1.0)*sj14);
IkReal x11940=((1.0)*x11936);
IkReal x11941=(gconst20*x11936);
IkReal x11942=(gconst20*x11937);
IkReal x11943=(gconst19*x11940);
IkReal x11944=((1.0)*gconst19*x11937);
evalcond[0]=(((r10*x11941))+((r12*x11937))+(((-1.0)*r11*x11943)));
evalcond[1]=((((-1.0)*r21*x11944))+((r20*x11942))+(((-1.0)*r22*x11940)));
evalcond[2]=((((-1.0)*r02*x11940))+((x11937*x11938))+(((-1.0)*r01*x11944)));
evalcond[3]=((1.0)+((r10*x11942))+(((-1.0)*r12*x11940))+(((-1.0)*r11*x11944)));
evalcond[4]=(((r02*x11937))+((x11936*x11938))+(((-1.0)*sj13*x11939))+(((-1.0)*r01*x11943))+((cj13*cj14)));
evalcond[5]=((((-1.0)*cj13*x11939))+(((-1.0)*r21*x11943))+((r20*x11941))+((r22*x11937))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
IkReal x11945=((-1.0)*r20);
IkReal x11946=x11797;
CheckValue<IkReal> x11948 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x11945),IKFAST_ATAN2_MAGTHRESH);
if(!x11948.valid){
continue;
}
IkReal x11947=((-1.0)*(x11948.value));
sj12=0;
cj12=1.0;
j12=0;
sj17=gconst19;
cj17=gconst20;
j17=x11947;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
IkReal gconst18=x11947;
IkReal gconst19=(r21*x11946);
IkReal gconst20=(x11945*x11946);
j16eval[0]=1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x11949=((-1.0)*r20);
IkReal x11950=x11797;
CheckValue<IkReal> x11952 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x11949),IKFAST_ATAN2_MAGTHRESH);
if(!x11952.valid){
continue;
}
IkReal x11951=((-1.0)*(x11952.value));
sj12=0;
cj12=1.0;
j12=0;
sj17=gconst19;
cj17=gconst20;
j17=x11951;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
IkReal gconst18=x11951;
IkReal gconst19=(r21*x11950);
IkReal gconst20=(x11949*x11950);
j16eval[0]=r12;
j16eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
IkReal x11953=((-1.0)*r20);
IkReal x11954=x11797;
CheckValue<IkReal> x11956 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x11953),IKFAST_ATAN2_MAGTHRESH);
if(!x11956.valid){
continue;
}
IkReal x11955=((-1.0)*(x11956.value));
sj12=0;
cj12=1.0;
j12=0;
sj17=gconst19;
cj17=gconst20;
j17=x11955;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
IkReal gconst18=x11955;
IkReal gconst19=(r21*x11954);
IkReal gconst20=(x11953*x11954);
IkReal x11957=r22*r22;
IkReal x11958=(r12*sj13*sj14);
CheckValue<IkReal> x11963=IKPowWithIntegerCheck(((-1.0)+x11957),-1);
if(!x11963.valid){
continue;
}
IkReal x11959=x11963.value;
IkReal x11960=((1.0)*cj13*cj14*r12);
if((((1.0)+(((-1.0)*x11957)))) < -0.00001)
continue;
IkReal x11961=IKsqrt(((1.0)+(((-1.0)*x11957))));
IkReal x11962=(r22*x11959*x11961);
j16eval[0]=((IKabs((((x11958*x11962))+(((-1.0)*x11960*x11962)))))+(IKabs((x11958+(((-1.0)*x11960))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x11964=(gconst19*r11);
IkReal x11965=(sj13*sj14);
IkReal x11966=(gconst20*r10);
IkReal x11967=((1.0)*cj13*cj14);
CheckValue<IkReal> x11968 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x11967))+((r12*x11965)))),IkReal(((((-1.0)*x11965*x11966))+(((-1.0)*x11964*x11967))+((x11964*x11965))+((cj13*cj14*x11966)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11968.valid){
continue;
}
CheckValue<IkReal> x11969=IKPowWithIntegerCheck(IKsign((((gconst20*r01))+((gconst19*r00)))),-1);
if(!x11969.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x11968.value)+(((1.5707963267949)*(x11969.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x11970=IKcos(j16);
IkReal x11971=IKsin(j16);
IkReal x11972=(gconst19*r11);
IkReal x11973=((1.0)*cj13);
IkReal x11974=(gconst19*r21);
IkReal x11975=(gconst19*r01);
IkReal x11976=(gconst20*x11970);
IkReal x11977=((1.0)*x11970);
IkReal x11978=((1.0)*x11971);
evalcond[0]=((((-1.0)*x11974*x11977))+((r20*x11976))+(((-1.0)*r22*x11978)));
evalcond[1]=(((r00*x11976))+(((-1.0)*r02*x11978))+(((-1.0)*x11975*x11977)));
evalcond[2]=((((-1.0)*r12*x11977))+(((-1.0)*gconst20*r10*x11978))+((x11971*x11972)));
evalcond[3]=((1.0)+(((-1.0)*r12*x11978))+((r10*x11976))+(((-1.0)*x11972*x11977)));
evalcond[4]=((((-1.0)*gconst20*r20*x11978))+(((-1.0)*r22*x11977))+((sj13*sj14))+((x11971*x11974))+(((-1.0)*cj14*x11973)));
evalcond[5]=((((-1.0)*sj14*x11973))+(((-1.0)*gconst20*r00*x11978))+((x11971*x11975))+(((-1.0)*r02*x11977))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x11979=(gconst20*r10);
IkReal x11980=(gconst19*r11);
CheckValue<IkReal> x11981 = IKatan2WithCheck(IkReal(r12),IkReal((x11980+(((-1.0)*x11979)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11981.valid){
continue;
}
CheckValue<IkReal> x11982=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x11979*x11980))+(x11980*x11980)+(x11979*x11979))),-1);
if(!x11982.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x11981.value)+(((1.5707963267949)*(x11982.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x11983=IKcos(j16);
IkReal x11984=IKsin(j16);
IkReal x11985=(gconst19*r11);
IkReal x11986=((1.0)*cj13);
IkReal x11987=(gconst19*r21);
IkReal x11988=(gconst19*r01);
IkReal x11989=(gconst20*x11983);
IkReal x11990=((1.0)*x11983);
IkReal x11991=((1.0)*x11984);
evalcond[0]=(((r20*x11989))+(((-1.0)*x11987*x11990))+(((-1.0)*r22*x11991)));
evalcond[1]=((((-1.0)*r02*x11991))+(((-1.0)*x11988*x11990))+((r00*x11989)));
evalcond[2]=(((x11984*x11985))+(((-1.0)*r12*x11990))+(((-1.0)*gconst20*r10*x11991)));
evalcond[3]=((1.0)+((r10*x11989))+(((-1.0)*r12*x11991))+(((-1.0)*x11985*x11990)));
evalcond[4]=(((x11984*x11987))+(((-1.0)*cj14*x11986))+((sj13*sj14))+(((-1.0)*r22*x11990))+(((-1.0)*gconst20*r20*x11991)));
evalcond[5]=((((-1.0)*r02*x11990))+((x11984*x11988))+(((-1.0)*gconst20*r00*x11991))+(((-1.0)*sj14*x11986))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x11992 = IKatan2WithCheck(IkReal(((((-1.0)*gconst19*r21))+((gconst20*r20)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x11992.valid){
continue;
}
CheckValue<IkReal> x11993=IKPowWithIntegerCheck(IKsign((((gconst20*r01))+((gconst19*r00)))),-1);
if(!x11993.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x11992.value)+(((1.5707963267949)*(x11993.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x11994=IKcos(j16);
IkReal x11995=IKsin(j16);
IkReal x11996=(gconst19*r11);
IkReal x11997=((1.0)*cj13);
IkReal x11998=(gconst19*r21);
IkReal x11999=(gconst19*r01);
IkReal x12000=(gconst20*x11994);
IkReal x12001=((1.0)*x11994);
IkReal x12002=((1.0)*x11995);
evalcond[0]=((((-1.0)*x11998*x12001))+((r20*x12000))+(((-1.0)*r22*x12002)));
evalcond[1]=((((-1.0)*x11999*x12001))+((r00*x12000))+(((-1.0)*r02*x12002)));
evalcond[2]=((((-1.0)*gconst20*r10*x12002))+((x11995*x11996))+(((-1.0)*r12*x12001)));
evalcond[3]=((1.0)+(((-1.0)*r12*x12002))+((r10*x12000))+(((-1.0)*x11996*x12001)));
evalcond[4]=(((x11995*x11998))+(((-1.0)*cj14*x11997))+(((-1.0)*gconst20*r20*x12002))+((sj13*sj14))+(((-1.0)*r22*x12001)));
evalcond[5]=(((x11995*x11999))+(((-1.0)*r02*x12001))+(((-1.0)*gconst20*r00*x12002))+(((-1.0)*sj14*x11997))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
IkReal x12003=((-1.0)*r20);
IkReal x12004=x11797;
CheckValue<IkReal> x12006 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x12003),IKFAST_ATAN2_MAGTHRESH);
if(!x12006.valid){
continue;
}
IkReal x12005=((-1.0)*(x12006.value));
sj12=0;
cj12=1.0;
j12=0;
sj17=gconst19;
cj17=gconst20;
j17=x12005;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
IkReal gconst18=x12005;
IkReal gconst19=(r21*x12004);
IkReal gconst20=(x12003*x12004);
j16eval[0]=1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x12007=((-1.0)*r20);
IkReal x12008=x11797;
CheckValue<IkReal> x12010 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x12007),IKFAST_ATAN2_MAGTHRESH);
if(!x12010.valid){
continue;
}
IkReal x12009=((-1.0)*(x12010.value));
sj12=0;
cj12=1.0;
j12=0;
sj17=gconst19;
cj17=gconst20;
j17=x12009;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
IkReal gconst18=x12009;
IkReal gconst19=(r21*x12008);
IkReal gconst20=(x12007*x12008);
j16eval[0]=r12;
j16eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
IkReal x12011=((-1.0)*r20);
IkReal x12012=x11797;
CheckValue<IkReal> x12014 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x12011),IKFAST_ATAN2_MAGTHRESH);
if(!x12014.valid){
continue;
}
IkReal x12013=((-1.0)*(x12014.value));
sj12=0;
cj12=1.0;
j12=0;
sj17=gconst19;
cj17=gconst20;
j17=x12013;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
IkReal gconst18=x12013;
IkReal gconst19=(r21*x12012);
IkReal gconst20=(x12011*x12012);
IkReal x12015=r22*r22;
IkReal x12016=(r12*sj13*sj14);
CheckValue<IkReal> x12021=IKPowWithIntegerCheck(((-1.0)+x12015),-1);
if(!x12021.valid){
continue;
}
IkReal x12017=x12021.value;
IkReal x12018=((1.0)*cj13*cj14*r12);
if((((1.0)+(((-1.0)*x12015)))) < -0.00001)
continue;
IkReal x12019=IKsqrt(((1.0)+(((-1.0)*x12015))));
IkReal x12020=(r22*x12017*x12019);
j16eval[0]=((IKabs((((x12016*x12020))+(((-1.0)*x12018*x12020)))))+(IKabs((x12016+(((-1.0)*x12018))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x12022=((1.0)*gconst20);
IkReal x12023=(gconst19*r11);
IkReal x12024=(sj13*sj14);
IkReal x12025=((1.0)*cj13*cj14);
CheckValue<IkReal> x12026 = IKatan2WithCheck(IkReal((((r12*x12024))+(((-1.0)*r12*x12025)))),IkReal((((x12023*x12024))+((cj13*cj14*gconst20*r10))+(((-1.0)*r10*x12022*x12024))+(((-1.0)*x12023*x12025)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12026.valid){
continue;
}
CheckValue<IkReal> x12027=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x12022))+(((-1.0)*gconst19*r00)))),-1);
if(!x12027.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x12026.value)+(((1.5707963267949)*(x12027.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x12028=IKsin(j16);
IkReal x12029=IKcos(j16);
IkReal x12030=((1.0)*cj13);
IkReal x12031=(gconst20*r00);
IkReal x12032=((1.0)*x12028);
IkReal x12033=(gconst20*x12028);
IkReal x12034=(gconst20*x12029);
IkReal x12035=(gconst19*x12032);
IkReal x12036=((1.0)*gconst19*x12029);
evalcond[0]=(((r12*x12029))+(((-1.0)*r11*x12035))+((r10*x12033)));
evalcond[1]=(((r20*x12034))+(((-1.0)*r22*x12032))+(((-1.0)*r21*x12036)));
evalcond[2]=((((-1.0)*r01*x12036))+(((-1.0)*r02*x12032))+((x12029*x12031)));
evalcond[3]=((1.0)+(((-1.0)*r11*x12036))+(((-1.0)*r12*x12032))+((r10*x12034)));
evalcond[4]=(((r20*x12033))+(((-1.0)*cj14*x12030))+((r22*x12029))+((sj13*sj14))+(((-1.0)*r21*x12035)));
evalcond[5]=((((-1.0)*r01*x12035))+((x12028*x12031))+(((-1.0)*sj14*x12030))+((r02*x12029))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x12037=(gconst20*r10);
IkReal x12038=(gconst19*r11);
CheckValue<IkReal> x12039 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x12037))+x12038)),IKFAST_ATAN2_MAGTHRESH);
if(!x12039.valid){
continue;
}
CheckValue<IkReal> x12040=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x12037*x12037)+(x12038*x12038)+(((-2.0)*x12037*x12038)))),-1);
if(!x12040.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x12039.value)+(((1.5707963267949)*(x12040.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x12041=IKsin(j16);
IkReal x12042=IKcos(j16);
IkReal x12043=((1.0)*cj13);
IkReal x12044=(gconst20*r00);
IkReal x12045=((1.0)*x12041);
IkReal x12046=(gconst20*x12041);
IkReal x12047=(gconst20*x12042);
IkReal x12048=(gconst19*x12045);
IkReal x12049=((1.0)*gconst19*x12042);
evalcond[0]=(((r10*x12046))+(((-1.0)*r11*x12048))+((r12*x12042)));
evalcond[1]=((((-1.0)*r21*x12049))+((r20*x12047))+(((-1.0)*r22*x12045)));
evalcond[2]=((((-1.0)*r01*x12049))+(((-1.0)*r02*x12045))+((x12042*x12044)));
evalcond[3]=((1.0)+((r10*x12047))+(((-1.0)*r12*x12045))+(((-1.0)*r11*x12049)));
evalcond[4]=((((-1.0)*r21*x12048))+((r20*x12046))+(((-1.0)*cj14*x12043))+((sj13*sj14))+((r22*x12042)));
evalcond[5]=(((r02*x12042))+(((-1.0)*r01*x12048))+(((-1.0)*sj14*x12043))+((x12041*x12044))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x12050 = IKatan2WithCheck(IkReal(((((-1.0)*gconst19*r21))+((gconst20*r20)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x12050.valid){
continue;
}
CheckValue<IkReal> x12051=IKPowWithIntegerCheck(IKsign((((gconst20*r01))+((gconst19*r00)))),-1);
if(!x12051.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x12050.value)+(((1.5707963267949)*(x12051.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x12052=IKsin(j16);
IkReal x12053=IKcos(j16);
IkReal x12054=((1.0)*cj13);
IkReal x12055=(gconst20*r00);
IkReal x12056=((1.0)*x12052);
IkReal x12057=(gconst20*x12052);
IkReal x12058=(gconst20*x12053);
IkReal x12059=(gconst19*x12056);
IkReal x12060=((1.0)*gconst19*x12053);
evalcond[0]=(((r10*x12057))+(((-1.0)*r11*x12059))+((r12*x12053)));
evalcond[1]=(((r20*x12058))+(((-1.0)*r21*x12060))+(((-1.0)*r22*x12056)));
evalcond[2]=(((x12053*x12055))+(((-1.0)*r02*x12056))+(((-1.0)*r01*x12060)));
evalcond[3]=((1.0)+((r10*x12058))+(((-1.0)*r11*x12060))+(((-1.0)*r12*x12056)));
evalcond[4]=(((r20*x12057))+(((-1.0)*r21*x12059))+(((-1.0)*cj14*x12054))+((r22*x12053))+((sj13*sj14)));
evalcond[5]=(((x12052*x12055))+(((-1.0)*r01*x12059))+((r02*x12053))+(((-1.0)*sj14*x12054))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[2];
IkReal x12061=((-1.0)*r20);
IkReal x12062=((-1.0)*px);
CheckValue<IkReal> x12064 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x12061),IKFAST_ATAN2_MAGTHRESH);
if(!x12064.valid){
continue;
}
IkReal x12063=((-1.0)*(x12064.value));
sj12=0;
cj12=1.0;
j12=0;
sj17=gconst19;
cj17=gconst20;
j17=x12063;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12062);
rxp1_1=(px*r21);
rxp1_2=(r11*x12062);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst18=x12063;
IkReal gconst19=r21;
IkReal gconst20=x12061;
IkReal x12065=(r11*r21);
IkReal x12066=(r10*r20);
j16eval[0]=(((sj15*x12066))+((sj15*x12065)));
j16eval[1]=((((-1.0)*x12066))+(((-1.0)*x12065)));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x12067=((-1.0)*r20);
IkReal x12068=((-1.0)*px);
CheckValue<IkReal> x12070 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x12067),IKFAST_ATAN2_MAGTHRESH);
if(!x12070.valid){
continue;
}
IkReal x12069=((-1.0)*(x12070.value));
sj12=0;
cj12=1.0;
j12=0;
sj17=gconst19;
cj17=gconst20;
j17=x12069;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12068);
rxp1_1=(px*r21);
rxp1_2=(r11*x12068);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst18=x12069;
IkReal gconst19=r21;
IkReal gconst20=x12067;
IkReal x12071=(r10*r20);
IkReal x12072=(r11*r21);
j16eval[0]=(((cj15*x12071))+((cj15*x12072)));
j16eval[1]=((((-1.0)*x12072))+(((-1.0)*x12071)));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
IkReal x12073=((-1.0)*r20);
IkReal x12074=((-1.0)*px);
CheckValue<IkReal> x12076 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x12073),IKFAST_ATAN2_MAGTHRESH);
if(!x12076.valid){
continue;
}
IkReal x12075=((-1.0)*(x12076.value));
sj12=0;
cj12=1.0;
j12=0;
sj17=gconst19;
cj17=gconst20;
j17=x12075;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12074);
rxp1_1=(px*r21);
rxp1_2=(r11*x12074);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst18=x12075;
IkReal gconst19=r21;
IkReal gconst20=x12073;
j16eval[0]=(((cj15*r11*r21))+((cj15*r10*r20)));
j16eval[1]=cj15;
j16eval[2]=r02;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x12077=((1.0)*sj15);
CheckValue<IkReal> x12078=IKPowWithIntegerCheck((((cj15*gconst19*r11))+(((-1.0)*cj15*gconst20*r10))),-1);
if(!x12078.valid){
continue;
}
CheckValue<IkReal> x12079=IKPowWithIntegerCheck(cj15,-1);
if(!x12079.valid){
continue;
}
CheckValue<IkReal> x12080=IKPowWithIntegerCheck(r02,-1);
if(!x12080.valid){
continue;
}
if( IKabs(((x12078.value)*(((((-1.0)*gconst20*r11*x12077))+(((-1.0)*gconst19*r10*x12077)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12079.value)*(x12080.value)*(((((-1.0)*sj13*sj14))+((cj13*cj14)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12078.value)*(((((-1.0)*gconst20*r11*x12077))+(((-1.0)*gconst19*r10*x12077))))))+IKsqr(((x12079.value)*(x12080.value)*(((((-1.0)*sj13*sj14))+((cj13*cj14))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x12078.value)*(((((-1.0)*gconst20*r11*x12077))+(((-1.0)*gconst19*r10*x12077))))), ((x12079.value)*(x12080.value)*(((((-1.0)*sj13*sj14))+((cj13*cj14))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x12081=IKcos(j16);
IkReal x12082=IKsin(j16);
IkReal x12083=((1.0)*cj15);
IkReal x12084=(gconst19*sj15);
IkReal x12085=(gconst20*sj15);
IkReal x12086=(cj15*gconst19);
IkReal x12087=(cj13*cj14);
IkReal x12088=((1.0)*sj14);
IkReal x12089=((1.0)*cj14*sj13);
IkReal x12090=(cj13*x12088);
IkReal x12091=(r02*x12081);
IkReal x12092=(r21*x12082);
IkReal x12093=(r10*x12082);
IkReal x12094=(r20*x12082);
IkReal x12095=(r11*x12082);
IkReal x12096=(gconst20*x12081);
IkReal x12097=((1.0)*gconst19*x12081);
IkReal x12098=(x12090+x12089);
evalcond[0]=((-1.0)*r02*x12082);
evalcond[1]=((((-1.0)*r21*x12097))+((r20*x12096)));
evalcond[2]=((1.0)+(((-1.0)*r11*x12097))+((r10*x12096)));
evalcond[3]=((((-1.0)*sj13*x12088))+x12087+(((-1.0)*x12083*x12091)));
evalcond[4]=((((-1.0)*sj15*x12091))+(((-1.0)*x12098)));
evalcond[5]=(((x12086*x12095))+((r10*x12084))+((r11*x12085))+(((-1.0)*gconst20*x12083*x12093)));
evalcond[6]=((((-1.0)*gconst20*r11*x12083))+(((-1.0)*gconst19*r10*x12083))+((x12084*x12095))+(((-1.0)*x12085*x12093)));
evalcond[7]=(((r20*x12084))+((x12086*x12092))+((r21*x12085))+(((-1.0)*x12098))+(((-1.0)*gconst20*x12083*x12094)));
evalcond[8]=((((-1.0)*x12087))+((x12084*x12092))+((sj13*sj14))+(((-1.0)*gconst20*r21*x12083))+(((-1.0)*x12085*x12094))+(((-1.0)*gconst19*r20*x12083)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x12099=(gconst19*r11);
IkReal x12100=((1.0)*sj15);
IkReal x12101=(gconst20*r10);
CheckValue<IkReal> x12102=IKPowWithIntegerCheck((((cj15*x12099))+(((-1.0)*cj15*x12101))),-1);
if(!x12102.valid){
continue;
}
CheckValue<IkReal> x12103=IKPowWithIntegerCheck(((((-1.0)*x12099))+x12101),-1);
if(!x12103.valid){
continue;
}
if( IKabs(((x12102.value)*(((((-1.0)*gconst19*r10*x12100))+(((-1.0)*gconst20*r11*x12100)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x12103.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12102.value)*(((((-1.0)*gconst19*r10*x12100))+(((-1.0)*gconst20*r11*x12100))))))+IKsqr(((-1.0)*(x12103.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x12102.value)*(((((-1.0)*gconst19*r10*x12100))+(((-1.0)*gconst20*r11*x12100))))), ((-1.0)*(x12103.value)));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x12104=IKcos(j16);
IkReal x12105=IKsin(j16);
IkReal x12106=((1.0)*cj15);
IkReal x12107=(gconst19*sj15);
IkReal x12108=(gconst20*sj15);
IkReal x12109=(cj15*gconst19);
IkReal x12110=(cj13*cj14);
IkReal x12111=((1.0)*sj14);
IkReal x12112=((1.0)*cj14*sj13);
IkReal x12113=(cj13*x12111);
IkReal x12114=(r02*x12104);
IkReal x12115=(r21*x12105);
IkReal x12116=(r10*x12105);
IkReal x12117=(r20*x12105);
IkReal x12118=(r11*x12105);
IkReal x12119=(gconst20*x12104);
IkReal x12120=((1.0)*gconst19*x12104);
IkReal x12121=(x12112+x12113);
evalcond[0]=((-1.0)*r02*x12105);
evalcond[1]=((((-1.0)*r21*x12120))+((r20*x12119)));
evalcond[2]=((1.0)+((r10*x12119))+(((-1.0)*r11*x12120)));
evalcond[3]=((((-1.0)*x12106*x12114))+x12110+(((-1.0)*sj13*x12111)));
evalcond[4]=((((-1.0)*x12121))+(((-1.0)*sj15*x12114)));
evalcond[5]=(((r10*x12107))+((x12109*x12118))+(((-1.0)*gconst20*x12106*x12116))+((r11*x12108)));
evalcond[6]=((((-1.0)*gconst19*r10*x12106))+(((-1.0)*x12108*x12116))+((x12107*x12118))+(((-1.0)*gconst20*r11*x12106)));
evalcond[7]=((((-1.0)*x12121))+((x12109*x12115))+((r20*x12107))+(((-1.0)*gconst20*x12106*x12117))+((r21*x12108)));
evalcond[8]=((((-1.0)*x12110))+(((-1.0)*gconst19*r20*x12106))+(((-1.0)*x12108*x12117))+((x12107*x12115))+((sj13*sj14))+(((-1.0)*gconst20*r21*x12106)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x12122=(gconst20*r10);
IkReal x12123=(gconst19*r11);
CheckValue<IkReal> x12124=IKPowWithIntegerCheck(((((-1.0)*sj15*x12122))+((sj15*x12123))),-1);
if(!x12124.valid){
continue;
}
CheckValue<IkReal> x12125=IKPowWithIntegerCheck((x12122+(((-1.0)*x12123))),-1);
if(!x12125.valid){
continue;
}
if( IKabs(((x12124.value)*((((cj15*gconst19*r10))+((cj15*gconst20*r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x12125.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12124.value)*((((cj15*gconst19*r10))+((cj15*gconst20*r11))))))+IKsqr(((-1.0)*(x12125.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x12124.value)*((((cj15*gconst19*r10))+((cj15*gconst20*r11))))), ((-1.0)*(x12125.value)));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x12126=IKcos(j16);
IkReal x12127=IKsin(j16);
IkReal x12128=((1.0)*cj15);
IkReal x12129=(gconst19*sj15);
IkReal x12130=(gconst20*sj15);
IkReal x12131=(cj15*gconst19);
IkReal x12132=(cj13*cj14);
IkReal x12133=((1.0)*sj14);
IkReal x12134=((1.0)*cj14*sj13);
IkReal x12135=(cj13*x12133);
IkReal x12136=(r02*x12126);
IkReal x12137=(r21*x12127);
IkReal x12138=(r10*x12127);
IkReal x12139=(r20*x12127);
IkReal x12140=(r11*x12127);
IkReal x12141=(gconst20*x12126);
IkReal x12142=((1.0)*gconst19*x12126);
IkReal x12143=(x12134+x12135);
evalcond[0]=((-1.0)*r02*x12127);
evalcond[1]=(((r20*x12141))+(((-1.0)*r21*x12142)));
evalcond[2]=((1.0)+((r10*x12141))+(((-1.0)*r11*x12142)));
evalcond[3]=((((-1.0)*sj13*x12133))+x12132+(((-1.0)*x12128*x12136)));
evalcond[4]=((((-1.0)*sj15*x12136))+(((-1.0)*x12143)));
evalcond[5]=((((-1.0)*gconst20*x12128*x12138))+((x12131*x12140))+((r10*x12129))+((r11*x12130)));
evalcond[6]=((((-1.0)*x12130*x12138))+(((-1.0)*gconst19*r10*x12128))+(((-1.0)*gconst20*r11*x12128))+((x12129*x12140)));
evalcond[7]=((((-1.0)*gconst20*x12128*x12139))+((x12131*x12137))+((r21*x12130))+(((-1.0)*x12143))+((r20*x12129)));
evalcond[8]=((((-1.0)*x12130*x12139))+((x12129*x12137))+(((-1.0)*gconst19*r20*x12128))+((sj13*sj14))+(((-1.0)*gconst20*r21*x12128))+(((-1.0)*x12132)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j16]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x12144=gconst19*gconst19;
IkReal x12145=gconst20*gconst20;
IkReal x12146=(r00*r10);
IkReal x12147=(r11*sj15);
IkReal x12148=(r01*r10);
IkReal x12149=(cj15*r11);
IkReal x12150=((1.0)*r02);
IkReal x12151=((1.0)*gconst19*gconst20);
CheckValue<IkReal> x12152=IKPowWithIntegerCheck(IKsign((((r01*x12144*x12147))+(((-1.0)*sj15*x12148*x12151))+((r02*r12*sj15))+(((-1.0)*r00*x12147*x12151))+((sj15*x12145*x12146)))),-1);
if(!x12152.valid){
continue;
}
CheckValue<IkReal> x12153 = IKatan2WithCheck(IkReal((((gconst19*gconst20*r01*x12149))+(((-1.0)*cj15*x12146*x12151))+((cj15*x12144*x12148))+(((-1.0)*r00*x12145*x12149)))),IkReal(((((-1.0)*cj15*gconst19*r10*x12150))+(((-1.0)*gconst20*x12149*x12150)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12153.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12152.value)))+(x12153.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x12154=IKcos(j16);
IkReal x12155=IKsin(j16);
IkReal x12156=(r01*sj15);
IkReal x12157=(gconst19*sj15);
IkReal x12158=(gconst20*sj15);
IkReal x12159=(cj15*r21);
IkReal x12160=(gconst20*r00);
IkReal x12161=(cj13*cj14);
IkReal x12162=((1.0)*gconst19);
IkReal x12163=((1.0)*gconst20);
IkReal x12164=(cj15*r11);
IkReal x12165=(cj15*r01);
IkReal x12166=((1.0)*sj14);
IkReal x12167=(cj15*r20);
IkReal x12168=((1.0)*cj14*sj13);
IkReal x12169=(cj13*x12166);
IkReal x12170=(gconst19*x12155);
IkReal x12171=((1.0)*cj15*r10);
IkReal x12172=(gconst20*x12155);
IkReal x12173=((1.0)*x12155);
IkReal x12174=(gconst20*x12154);
IkReal x12175=((1.0)*cj15*x12154);
IkReal x12176=((1.0)*sj15*x12154);
IkReal x12177=(x12169+x12168);
evalcond[0]=((((-1.0)*r22*x12173))+((r20*x12174))+(((-1.0)*r21*x12154*x12162)));
evalcond[1]=((((-1.0)*r01*x12154*x12162))+((x12154*x12160))+(((-1.0)*r02*x12173)));
evalcond[2]=((1.0)+((r10*x12174))+(((-1.0)*r11*x12154*x12162))+(((-1.0)*r12*x12173)));
evalcond[3]=(((r10*x12157))+(((-1.0)*cj15*r10*x12155*x12163))+((x12164*x12170))+((r11*x12158))+(((-1.0)*r12*x12175)));
evalcond[4]=(((r11*x12155*x12157))+(((-1.0)*r10*x12158*x12173))+(((-1.0)*cj15*r10*x12162))+(((-1.0)*r12*x12176))+(((-1.0)*x12163*x12164)));
evalcond[5]=((((-1.0)*sj13*x12166))+(((-1.0)*cj15*x12160*x12173))+((gconst20*x12156))+x12161+((x12165*x12170))+((r00*x12157))+(((-1.0)*r02*x12175)));
evalcond[6]=((((-1.0)*r22*x12175))+((x12159*x12170))+(((-1.0)*x12155*x12163*x12167))+(((-1.0)*x12177))+((r20*x12157))+((r21*x12158)));
evalcond[7]=((((-1.0)*r22*x12176))+(((-1.0)*x12161))+(((-1.0)*x12162*x12167))+((r21*x12155*x12157))+(((-1.0)*r20*x12158*x12173))+((sj13*sj14))+(((-1.0)*x12159*x12163)));
evalcond[8]=((((-1.0)*cj15*r00*x12162))+(((-1.0)*r00*x12158*x12173))+((x12156*x12170))+(((-1.0)*x12177))+(((-1.0)*r02*x12176))+(((-1.0)*x12163*x12165)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x12178=gconst19*gconst19;
IkReal x12179=gconst20*gconst20;
IkReal x12180=(r00*r10);
IkReal x12181=(r01*r11);
IkReal x12182=(r10*sj15);
IkReal x12183=((1.0)*r01);
IkReal x12184=(r00*r11);
IkReal x12185=(gconst19*gconst20*sj15);
IkReal x12186=(cj15*gconst19*gconst20);
CheckValue<IkReal> x12187=IKPowWithIntegerCheck(IKsign((((cj15*r02*r12))+((cj15*x12178*x12181))+((cj15*x12179*x12180))+(((-1.0)*x12184*x12186))+(((-1.0)*r10*x12183*x12186)))),-1);
if(!x12187.valid){
continue;
}
CheckValue<IkReal> x12188 = IKatan2WithCheck(IkReal((((sj15*x12179*x12184))+((x12180*x12185))+(((-1.0)*x12178*x12182*x12183))+(((-1.0)*x12181*x12185)))),IkReal((((gconst20*r02*r11*sj15))+((gconst19*r02*x12182)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12188.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12187.value)))+(x12188.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x12189=IKcos(j16);
IkReal x12190=IKsin(j16);
IkReal x12191=(r01*sj15);
IkReal x12192=(gconst19*sj15);
IkReal x12193=(gconst20*sj15);
IkReal x12194=(cj15*r21);
IkReal x12195=(gconst20*r00);
IkReal x12196=(cj13*cj14);
IkReal x12197=((1.0)*gconst19);
IkReal x12198=((1.0)*gconst20);
IkReal x12199=(cj15*r11);
IkReal x12200=(cj15*r01);
IkReal x12201=((1.0)*sj14);
IkReal x12202=(cj15*r20);
IkReal x12203=((1.0)*cj14*sj13);
IkReal x12204=(cj13*x12201);
IkReal x12205=(gconst19*x12190);
IkReal x12206=((1.0)*cj15*r10);
IkReal x12207=(gconst20*x12190);
IkReal x12208=((1.0)*x12190);
IkReal x12209=(gconst20*x12189);
IkReal x12210=((1.0)*cj15*x12189);
IkReal x12211=((1.0)*sj15*x12189);
IkReal x12212=(x12204+x12203);
evalcond[0]=((((-1.0)*r21*x12189*x12197))+(((-1.0)*r22*x12208))+((r20*x12209)));
evalcond[1]=((((-1.0)*r02*x12208))+((x12189*x12195))+(((-1.0)*r01*x12189*x12197)));
evalcond[2]=((1.0)+(((-1.0)*r11*x12189*x12197))+(((-1.0)*r12*x12208))+((r10*x12209)));
evalcond[3]=((((-1.0)*r12*x12210))+((r11*x12193))+((r10*x12192))+(((-1.0)*cj15*r10*x12190*x12198))+((x12199*x12205)));
evalcond[4]=(((r11*x12190*x12192))+(((-1.0)*r12*x12211))+(((-1.0)*x12198*x12199))+(((-1.0)*cj15*r10*x12197))+(((-1.0)*r10*x12193*x12208)));
evalcond[5]=((((-1.0)*cj15*x12195*x12208))+(((-1.0)*r02*x12210))+((x12200*x12205))+(((-1.0)*sj13*x12201))+x12196+((gconst20*x12191))+((r00*x12192)));
evalcond[6]=((((-1.0)*x12212))+((r21*x12193))+(((-1.0)*r22*x12210))+(((-1.0)*x12190*x12198*x12202))+((x12194*x12205))+((r20*x12192)));
evalcond[7]=((((-1.0)*x12197*x12202))+(((-1.0)*x12194*x12198))+(((-1.0)*r22*x12211))+(((-1.0)*x12196))+((sj13*sj14))+(((-1.0)*r20*x12193*x12208))+((r21*x12190*x12192)));
evalcond[8]=((((-1.0)*x12212))+(((-1.0)*r02*x12211))+(((-1.0)*r00*x12193*x12208))+((x12191*x12205))+(((-1.0)*cj15*r00*x12197))+(((-1.0)*x12198*x12200)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x12213 = IKatan2WithCheck(IkReal(((((-1.0)*gconst19*r21))+((gconst20*r20)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x12213.valid){
continue;
}
CheckValue<IkReal> x12214=IKPowWithIntegerCheck(IKsign((((gconst20*r01))+((gconst19*r00)))),-1);
if(!x12214.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x12213.value)+(((1.5707963267949)*(x12214.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x12215=IKcos(j16);
IkReal x12216=IKsin(j16);
IkReal x12217=(r01*sj15);
IkReal x12218=(gconst19*sj15);
IkReal x12219=(gconst20*sj15);
IkReal x12220=(cj15*r21);
IkReal x12221=(gconst20*r00);
IkReal x12222=(cj13*cj14);
IkReal x12223=((1.0)*gconst19);
IkReal x12224=((1.0)*gconst20);
IkReal x12225=(cj15*r11);
IkReal x12226=(cj15*r01);
IkReal x12227=((1.0)*sj14);
IkReal x12228=(cj15*r20);
IkReal x12229=((1.0)*cj14*sj13);
IkReal x12230=(cj13*x12227);
IkReal x12231=(gconst19*x12216);
IkReal x12232=((1.0)*cj15*r10);
IkReal x12233=(gconst20*x12216);
IkReal x12234=((1.0)*x12216);
IkReal x12235=(gconst20*x12215);
IkReal x12236=((1.0)*cj15*x12215);
IkReal x12237=((1.0)*sj15*x12215);
IkReal x12238=(x12229+x12230);
evalcond[0]=((((-1.0)*r22*x12234))+((r20*x12235))+(((-1.0)*r21*x12215*x12223)));
evalcond[1]=(((x12215*x12221))+(((-1.0)*r02*x12234))+(((-1.0)*r01*x12215*x12223)));
evalcond[2]=((1.0)+((r10*x12235))+(((-1.0)*r12*x12234))+(((-1.0)*r11*x12215*x12223)));
evalcond[3]=((((-1.0)*r12*x12236))+((x12225*x12231))+(((-1.0)*cj15*r10*x12216*x12224))+((r10*x12218))+((r11*x12219)));
evalcond[4]=((((-1.0)*r12*x12237))+(((-1.0)*x12224*x12225))+(((-1.0)*r10*x12219*x12234))+(((-1.0)*cj15*r10*x12223))+((r11*x12216*x12218)));
evalcond[5]=((((-1.0)*sj13*x12227))+x12222+(((-1.0)*r02*x12236))+((gconst20*x12217))+((x12226*x12231))+(((-1.0)*cj15*x12221*x12234))+((r00*x12218)));
evalcond[6]=((((-1.0)*r22*x12236))+((x12220*x12231))+(((-1.0)*x12216*x12224*x12228))+(((-1.0)*x12238))+((r21*x12219))+((r20*x12218)));
evalcond[7]=((((-1.0)*r22*x12237))+(((-1.0)*x12220*x12224))+(((-1.0)*r20*x12219*x12234))+(((-1.0)*x12223*x12228))+((sj13*sj14))+((r21*x12216*x12218))+(((-1.0)*x12222)));
evalcond[8]=((((-1.0)*x12224*x12226))+(((-1.0)*cj15*r00*x12223))+(((-1.0)*r02*x12237))+(((-1.0)*x12238))+(((-1.0)*r00*x12219*x12234))+((x12217*x12231)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12239=((-1.0)*r21);
IkReal x12241 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x12241)==0){
continue;
}
IkReal x12240=pow(x12241,-0.5);
CheckValue<IkReal> x12242 = IKatan2WithCheck(IkReal(x12239),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x12242.valid){
continue;
}
IkReal gconst21=((3.14159265358979)+(((-1.0)*(x12242.value))));
IkReal gconst22=(x12239*x12240);
IkReal gconst23=((1.0)*r20*x12240);
CheckValue<IkReal> x12243 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x12243.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j17+(x12243.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
IkReal x12244=((-1.0)*r21);
CheckValue<IkReal> x12247 = IKatan2WithCheck(IkReal(x12244),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x12247.valid){
continue;
}
IkReal x12245=((1.0)*(x12247.value));
IkReal x12246=x12240;
sj12=0;
cj12=1.0;
j12=0;
sj17=gconst22;
cj17=gconst23;
j17=((3.14159265)+(((-1.0)*x12245)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x12245)));
IkReal gconst22=(x12244*x12246);
IkReal gconst23=((1.0)*r20*x12246);
j16eval[0]=1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[4];
IkReal x12248=((-1.0)*r21);
CheckValue<IkReal> x12251 = IKatan2WithCheck(IkReal(x12248),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x12251.valid){
continue;
}
IkReal x12249=((1.0)*(x12251.value));
IkReal x12250=x12240;
sj12=0;
cj12=1.0;
j12=0;
sj17=gconst22;
cj17=gconst23;
j17=((3.14159265)+(((-1.0)*x12249)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x12249)));
IkReal gconst22=(x12248*x12250);
IkReal gconst23=((1.0)*r20*x12250);
j16eval[0]=0;
j16eval[1]=0;
j16eval[2]=r02;
j16eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  || IKabs(j16eval[3]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
IkReal x12252=((-1.0)*r21);
CheckValue<IkReal> x12255 = IKatan2WithCheck(IkReal(x12252),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x12255.valid){
continue;
}
IkReal x12253=((1.0)*(x12255.value));
IkReal x12254=x12240;
sj12=0;
cj12=1.0;
j12=0;
sj17=gconst22;
cj17=gconst23;
j17=((3.14159265)+(((-1.0)*x12253)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x12253)));
IkReal gconst22=(x12252*x12254);
IkReal gconst23=((1.0)*r20*x12254);
j16eval[0]=r02;
j16eval[1]=sj15;
j16eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
IkReal x12256=((-1.0)*r21);
CheckValue<IkReal> x12259 = IKatan2WithCheck(IkReal(x12256),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x12259.valid){
continue;
}
IkReal x12257=((1.0)*(x12259.value));
IkReal x12258=x12240;
sj12=0;
cj12=1.0;
j12=0;
sj17=gconst22;
cj17=gconst23;
j17=((3.14159265)+(((-1.0)*x12257)));
sj15=1.0;
cj15=0;
j15=1.5707963267949;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x12257)));
IkReal gconst22=(x12256*x12258);
IkReal gconst23=((1.0)*r20*x12258);
j16eval[0]=1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[4];
IkReal x12260=((-1.0)*r21);
CheckValue<IkReal> x12263 = IKatan2WithCheck(IkReal(x12260),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x12263.valid){
continue;
}
IkReal x12261=((1.0)*(x12263.value));
IkReal x12262=x12240;
sj12=0;
cj12=1.0;
j12=0;
sj17=gconst22;
cj17=gconst23;
j17=((3.14159265)+(((-1.0)*x12261)));
sj15=1.0;
cj15=0;
j15=1.5707963267949;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x12261)));
IkReal gconst22=(x12260*x12262);
IkReal gconst23=((1.0)*r20*x12262);
j16eval[0]=0;
j16eval[1]=0;
j16eval[2]=r02;
j16eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  || IKabs(j16eval[3]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x12264=((-1.0)*r21);
CheckValue<IkReal> x12267 = IKatan2WithCheck(IkReal(x12264),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x12267.valid){
continue;
}
IkReal x12265=((1.0)*(x12267.value));
IkReal x12266=x12240;
sj12=0;
cj12=1.0;
j12=0;
sj17=gconst22;
cj17=gconst23;
j17=((3.14159265)+(((-1.0)*x12265)));
sj15=1.0;
cj15=0;
j15=1.5707963267949;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x12265)));
IkReal gconst22=(x12264*x12266);
IkReal gconst23=((1.0)*r20*x12266);
j16eval[0]=r12;
j16eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x12268=(gconst23*r10);
IkReal x12269=(gconst22*r11);
CheckValue<IkReal> x12270 = IKatan2WithCheck(IkReal(r12),IkReal((x12269+(((-1.0)*x12268)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12270.valid){
continue;
}
CheckValue<IkReal> x12271=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x12268*x12268)+(((-2.0)*x12268*x12269))+(x12269*x12269))),-1);
if(!x12271.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x12270.value)+(((1.5707963267949)*(x12271.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x12272=IKcos(j16);
IkReal x12273=IKsin(j16);
IkReal x12274=((1.0)*cj13);
IkReal x12275=(gconst23*r00);
IkReal x12276=(gconst23*r10);
IkReal x12277=(gconst23*r20);
IkReal x12278=((1.0)*x12272);
IkReal x12279=((1.0)*x12273);
IkReal x12280=(gconst22*x12273);
IkReal x12281=(gconst22*x12278);
evalcond[0]=(((x12272*x12277))+(((-1.0)*r22*x12279))+(((-1.0)*r21*x12281)));
evalcond[1]=((((-1.0)*r02*x12279))+((x12272*x12275))+(((-1.0)*r01*x12281)));
evalcond[2]=(((r11*x12280))+(((-1.0)*r12*x12278))+(((-1.0)*x12276*x12279)));
evalcond[3]=((1.0)+(((-1.0)*r11*x12281))+((x12272*x12276))+(((-1.0)*r12*x12279)));
evalcond[4]=((((-1.0)*r22*x12278))+((sj13*sj14))+(((-1.0)*x12277*x12279))+((r21*x12280))+(((-1.0)*cj14*x12274)));
evalcond[5]=((((-1.0)*r02*x12278))+((r01*x12280))+(((-1.0)*x12275*x12279))+(((-1.0)*cj14*sj13))+(((-1.0)*sj14*x12274)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x12282=((1.0)*gconst22);
CheckValue<IkReal> x12283 = IKatan2WithCheck(IkReal((((gconst23*r00))+(((-1.0)*r01*x12282)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x12283.valid){
continue;
}
CheckValue<IkReal> x12284=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst23*r21))+(((-1.0)*r20*x12282)))),-1);
if(!x12284.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x12283.value)+(((1.5707963267949)*(x12284.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x12285=IKcos(j16);
IkReal x12286=IKsin(j16);
IkReal x12287=((1.0)*cj13);
IkReal x12288=(gconst23*r00);
IkReal x12289=(gconst23*r10);
IkReal x12290=(gconst23*r20);
IkReal x12291=((1.0)*x12285);
IkReal x12292=((1.0)*x12286);
IkReal x12293=(gconst22*x12286);
IkReal x12294=(gconst22*x12291);
evalcond[0]=((((-1.0)*r21*x12294))+((x12285*x12290))+(((-1.0)*r22*x12292)));
evalcond[1]=((((-1.0)*r01*x12294))+((x12285*x12288))+(((-1.0)*r02*x12292)));
evalcond[2]=(((r11*x12293))+(((-1.0)*x12289*x12292))+(((-1.0)*r12*x12291)));
evalcond[3]=((1.0)+((x12285*x12289))+(((-1.0)*r11*x12294))+(((-1.0)*r12*x12292)));
evalcond[4]=(((r21*x12293))+(((-1.0)*x12290*x12292))+(((-1.0)*cj14*x12287))+((sj13*sj14))+(((-1.0)*r22*x12291)));
evalcond[5]=((((-1.0)*sj14*x12287))+((r01*x12293))+(((-1.0)*r02*x12291))+(((-1.0)*cj14*sj13))+(((-1.0)*x12288*x12292)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x12295=IKPowWithIntegerCheck(IKsign((((gconst22*r00))+((gconst23*r01)))),-1);
if(!x12295.valid){
continue;
}
CheckValue<IkReal> x12296 = IKatan2WithCheck(IkReal((((gconst23*r20))+(((-1.0)*gconst22*r21)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x12296.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12295.value)))+(x12296.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x12297=IKcos(j16);
IkReal x12298=IKsin(j16);
IkReal x12299=((1.0)*cj13);
IkReal x12300=(gconst23*r00);
IkReal x12301=(gconst23*r10);
IkReal x12302=(gconst23*r20);
IkReal x12303=((1.0)*x12297);
IkReal x12304=((1.0)*x12298);
IkReal x12305=(gconst22*x12298);
IkReal x12306=(gconst22*x12303);
evalcond[0]=((((-1.0)*r21*x12306))+(((-1.0)*r22*x12304))+((x12297*x12302)));
evalcond[1]=((((-1.0)*r02*x12304))+(((-1.0)*r01*x12306))+((x12297*x12300)));
evalcond[2]=(((r11*x12305))+(((-1.0)*x12301*x12304))+(((-1.0)*r12*x12303)));
evalcond[3]=((1.0)+(((-1.0)*r11*x12306))+((x12297*x12301))+(((-1.0)*r12*x12304)));
evalcond[4]=(((r21*x12305))+(((-1.0)*cj14*x12299))+(((-1.0)*x12302*x12304))+((sj13*sj14))+(((-1.0)*r22*x12303)));
evalcond[5]=((((-1.0)*r02*x12303))+(((-1.0)*sj14*x12299))+((r01*x12305))+(((-1.0)*cj14*sj13))+(((-1.0)*x12300*x12304)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
IkReal x12307=((-1.0)*r21);
CheckValue<IkReal> x12310 = IKatan2WithCheck(IkReal(x12307),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x12310.valid){
continue;
}
IkReal x12308=((1.0)*(x12310.value));
IkReal x12309=x12240;
sj12=0;
cj12=1.0;
j12=0;
sj17=gconst22;
cj17=gconst23;
j17=((3.14159265)+(((-1.0)*x12308)));
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x12308)));
IkReal gconst22=(x12307*x12309);
IkReal gconst23=((1.0)*r20*x12309);
j16eval[0]=1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[4];
IkReal x12311=((-1.0)*r21);
CheckValue<IkReal> x12314 = IKatan2WithCheck(IkReal(x12311),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x12314.valid){
continue;
}
IkReal x12312=((1.0)*(x12314.value));
IkReal x12313=x12240;
sj12=0;
cj12=1.0;
j12=0;
sj17=gconst22;
cj17=gconst23;
j17=((3.14159265)+(((-1.0)*x12312)));
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x12312)));
IkReal gconst22=(x12311*x12313);
IkReal gconst23=((1.0)*r20*x12313);
j16eval[0]=0;
j16eval[1]=0;
j16eval[2]=r02;
j16eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  || IKabs(j16eval[3]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x12315=((-1.0)*r21);
CheckValue<IkReal> x12318 = IKatan2WithCheck(IkReal(x12315),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x12318.valid){
continue;
}
IkReal x12316=((1.0)*(x12318.value));
IkReal x12317=x12240;
sj12=0;
cj12=1.0;
j12=0;
sj17=gconst22;
cj17=gconst23;
j17=((3.14159265)+(((-1.0)*x12316)));
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x12316)));
IkReal gconst22=(x12315*x12317);
IkReal gconst23=((1.0)*r20*x12317);
j16eval[0]=r12;
j16eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x12319=(gconst23*r10);
IkReal x12320=(gconst22*r11);
CheckValue<IkReal> x12321=IKPowWithIntegerCheck(IKsign(((((-2.0)*x12319*x12320))+(r12*r12)+(x12320*x12320)+(x12319*x12319))),-1);
if(!x12321.valid){
continue;
}
CheckValue<IkReal> x12322 = IKatan2WithCheck(IkReal(r12),IkReal((x12320+(((-1.0)*x12319)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12322.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12321.value)))+(x12322.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x12323=IKsin(j16);
IkReal x12324=IKcos(j16);
IkReal x12325=((1.0)*cj13);
IkReal x12326=((1.0)*gconst22);
IkReal x12327=(gconst23*x12323);
IkReal x12328=((1.0)*x12323);
IkReal x12329=(gconst23*x12324);
evalcond[0]=((((-1.0)*r11*x12323*x12326))+((r10*x12327))+((r12*x12324)));
evalcond[1]=((((-1.0)*r22*x12328))+((r20*x12329))+(((-1.0)*r21*x12324*x12326)));
evalcond[2]=((((-1.0)*r01*x12324*x12326))+((r00*x12329))+(((-1.0)*r02*x12328)));
evalcond[3]=((1.0)+((r10*x12329))+(((-1.0)*r12*x12328))+(((-1.0)*r11*x12324*x12326)));
evalcond[4]=(((r20*x12327))+(((-1.0)*r21*x12323*x12326))+((r22*x12324))+((sj13*sj14))+(((-1.0)*cj14*x12325)));
evalcond[5]=(((r00*x12327))+(((-1.0)*sj14*x12325))+((r02*x12324))+(((-1.0)*cj14*sj13))+(((-1.0)*r01*x12323*x12326)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x12330=((1.0)*gconst22);
CheckValue<IkReal> x12331=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst23*r21))+(((-1.0)*r20*x12330)))),-1);
if(!x12331.valid){
continue;
}
CheckValue<IkReal> x12332 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x12330))+((gconst23*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x12332.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12331.value)))+(x12332.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x12333=IKsin(j16);
IkReal x12334=IKcos(j16);
IkReal x12335=((1.0)*cj13);
IkReal x12336=((1.0)*gconst22);
IkReal x12337=(gconst23*x12333);
IkReal x12338=((1.0)*x12333);
IkReal x12339=(gconst23*x12334);
evalcond[0]=(((r12*x12334))+((r10*x12337))+(((-1.0)*r11*x12333*x12336)));
evalcond[1]=((((-1.0)*r22*x12338))+((r20*x12339))+(((-1.0)*r21*x12334*x12336)));
evalcond[2]=(((r00*x12339))+(((-1.0)*r02*x12338))+(((-1.0)*r01*x12334*x12336)));
evalcond[3]=((1.0)+(((-1.0)*r11*x12334*x12336))+((r10*x12339))+(((-1.0)*r12*x12338)));
evalcond[4]=((((-1.0)*r21*x12333*x12336))+((r20*x12337))+((sj13*sj14))+((r22*x12334))+(((-1.0)*cj14*x12335)));
evalcond[5]=((((-1.0)*r01*x12333*x12336))+((r00*x12337))+(((-1.0)*sj14*x12335))+((r02*x12334))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x12340=IKPowWithIntegerCheck(IKsign((((gconst22*r00))+((gconst23*r01)))),-1);
if(!x12340.valid){
continue;
}
CheckValue<IkReal> x12341 = IKatan2WithCheck(IkReal((((gconst23*r20))+(((-1.0)*gconst22*r21)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x12341.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12340.value)))+(x12341.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x12342=IKsin(j16);
IkReal x12343=IKcos(j16);
IkReal x12344=((1.0)*cj13);
IkReal x12345=((1.0)*gconst22);
IkReal x12346=(gconst23*x12342);
IkReal x12347=((1.0)*x12342);
IkReal x12348=(gconst23*x12343);
evalcond[0]=((((-1.0)*r11*x12342*x12345))+((r10*x12346))+((r12*x12343)));
evalcond[1]=(((r20*x12348))+(((-1.0)*r21*x12343*x12345))+(((-1.0)*r22*x12347)));
evalcond[2]=((((-1.0)*r02*x12347))+((r00*x12348))+(((-1.0)*r01*x12343*x12345)));
evalcond[3]=((1.0)+(((-1.0)*r12*x12347))+(((-1.0)*r11*x12343*x12345))+((r10*x12348)));
evalcond[4]=(((r20*x12346))+((r22*x12343))+(((-1.0)*r21*x12342*x12345))+((sj13*sj14))+(((-1.0)*cj14*x12344)));
evalcond[5]=((((-1.0)*r01*x12342*x12345))+((r00*x12346))+((r02*x12343))+(((-1.0)*sj14*x12344))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j15))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
IkReal x12349=((-1.0)*r21);
CheckValue<IkReal> x12352 = IKatan2WithCheck(IkReal(x12349),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x12352.valid){
continue;
}
IkReal x12350=((1.0)*(x12352.value));
IkReal x12351=x12240;
sj12=0;
cj12=1.0;
j12=0;
sj17=gconst22;
cj17=gconst23;
j17=((3.14159265)+(((-1.0)*x12350)));
sj15=0;
cj15=1.0;
j15=0;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x12350)));
IkReal gconst22=(x12349*x12351);
IkReal gconst23=((1.0)*r20*x12351);
j16eval[0]=1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[4];
IkReal x12353=((-1.0)*r21);
CheckValue<IkReal> x12356 = IKatan2WithCheck(IkReal(x12353),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x12356.valid){
continue;
}
IkReal x12354=((1.0)*(x12356.value));
IkReal x12355=x12240;
sj12=0;
cj12=1.0;
j12=0;
sj17=gconst22;
cj17=gconst23;
j17=((3.14159265)+(((-1.0)*x12354)));
sj15=0;
cj15=1.0;
j15=0;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x12354)));
IkReal gconst22=(x12353*x12355);
IkReal gconst23=((1.0)*r20*x12355);
j16eval[0]=0;
j16eval[1]=0;
j16eval[2]=r02;
j16eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  || IKabs(j16eval[3]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x12357=((-1.0)*r21);
CheckValue<IkReal> x12360 = IKatan2WithCheck(IkReal(x12357),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x12360.valid){
continue;
}
IkReal x12358=((1.0)*(x12360.value));
IkReal x12359=x12240;
sj12=0;
cj12=1.0;
j12=0;
sj17=gconst22;
cj17=gconst23;
j17=((3.14159265)+(((-1.0)*x12358)));
sj15=0;
cj15=1.0;
j15=0;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x12358)));
IkReal gconst22=(x12357*x12359);
IkReal gconst23=((1.0)*r20*x12359);
j16eval[0]=r12;
j16eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x12361=(gconst23*r10);
IkReal x12362=(gconst22*r11);
CheckValue<IkReal> x12363 = IKatan2WithCheck(IkReal(r12),IkReal((x12362+(((-1.0)*x12361)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12363.valid){
continue;
}
CheckValue<IkReal> x12364=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x12361*x12362))+(x12362*x12362)+(x12361*x12361))),-1);
if(!x12364.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x12363.value)+(((1.5707963267949)*(x12364.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x12365=IKcos(j16);
IkReal x12366=IKsin(j16);
IkReal x12367=(gconst23*r00);
IkReal x12368=((1.0)*sj14);
IkReal x12369=(gconst23*r10);
IkReal x12370=(gconst23*r20);
IkReal x12371=((1.0)*x12365);
IkReal x12372=((1.0)*x12366);
IkReal x12373=(gconst22*x12366);
IkReal x12374=(gconst22*x12371);
evalcond[0]=((((-1.0)*r22*x12372))+(((-1.0)*r21*x12374))+((x12365*x12370)));
evalcond[1]=((((-1.0)*r01*x12374))+((x12365*x12367))+(((-1.0)*r02*x12372)));
evalcond[2]=(((r11*x12373))+(((-1.0)*x12369*x12372))+(((-1.0)*r12*x12371)));
evalcond[3]=((1.0)+((x12365*x12369))+(((-1.0)*r11*x12374))+(((-1.0)*r12*x12372)));
evalcond[4]=((((-1.0)*r02*x12371))+(((-1.0)*x12367*x12372))+((cj13*cj14))+((r01*x12373))+(((-1.0)*sj13*x12368)));
evalcond[5]=((((-1.0)*cj13*x12368))+(((-1.0)*r22*x12371))+((r21*x12373))+(((-1.0)*x12370*x12372))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x12375=((1.0)*gconst22);
CheckValue<IkReal> x12376=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst23*r21))+(((-1.0)*r20*x12375)))),-1);
if(!x12376.valid){
continue;
}
CheckValue<IkReal> x12377 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x12375))+((gconst23*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x12377.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12376.value)))+(x12377.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x12378=IKcos(j16);
IkReal x12379=IKsin(j16);
IkReal x12380=(gconst23*r00);
IkReal x12381=((1.0)*sj14);
IkReal x12382=(gconst23*r10);
IkReal x12383=(gconst23*r20);
IkReal x12384=((1.0)*x12378);
IkReal x12385=((1.0)*x12379);
IkReal x12386=(gconst22*x12379);
IkReal x12387=(gconst22*x12384);
evalcond[0]=((((-1.0)*r21*x12387))+(((-1.0)*r22*x12385))+((x12378*x12383)));
evalcond[1]=((((-1.0)*r02*x12385))+(((-1.0)*r01*x12387))+((x12378*x12380)));
evalcond[2]=(((r11*x12386))+(((-1.0)*x12382*x12385))+(((-1.0)*r12*x12384)));
evalcond[3]=((1.0)+(((-1.0)*r11*x12387))+((x12378*x12382))+(((-1.0)*r12*x12385)));
evalcond[4]=((((-1.0)*r02*x12384))+(((-1.0)*sj13*x12381))+(((-1.0)*x12380*x12385))+((r01*x12386))+((cj13*cj14)));
evalcond[5]=((((-1.0)*cj13*x12381))+(((-1.0)*x12383*x12385))+((r21*x12386))+(((-1.0)*r22*x12384))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x12388=IKPowWithIntegerCheck(IKsign((((gconst22*r00))+((gconst23*r01)))),-1);
if(!x12388.valid){
continue;
}
CheckValue<IkReal> x12389 = IKatan2WithCheck(IkReal((((gconst23*r20))+(((-1.0)*gconst22*r21)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x12389.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12388.value)))+(x12389.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x12390=IKcos(j16);
IkReal x12391=IKsin(j16);
IkReal x12392=(gconst23*r00);
IkReal x12393=((1.0)*sj14);
IkReal x12394=(gconst23*r10);
IkReal x12395=(gconst23*r20);
IkReal x12396=((1.0)*x12390);
IkReal x12397=((1.0)*x12391);
IkReal x12398=(gconst22*x12391);
IkReal x12399=(gconst22*x12396);
evalcond[0]=((((-1.0)*r21*x12399))+((x12390*x12395))+(((-1.0)*r22*x12397)));
evalcond[1]=((((-1.0)*r02*x12397))+((x12390*x12392))+(((-1.0)*r01*x12399)));
evalcond[2]=((((-1.0)*r12*x12396))+(((-1.0)*x12394*x12397))+((r11*x12398)));
evalcond[3]=((1.0)+(((-1.0)*r11*x12399))+(((-1.0)*r12*x12397))+((x12390*x12394)));
evalcond[4]=((((-1.0)*r02*x12396))+(((-1.0)*sj13*x12393))+((r01*x12398))+((cj13*cj14))+(((-1.0)*x12392*x12397)));
evalcond[5]=((((-1.0)*cj13*x12393))+(((-1.0)*r22*x12396))+((r21*x12398))+(((-1.0)*cj14*sj13))+(((-1.0)*x12395*x12397)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
IkReal x12400=((-1.0)*r21);
CheckValue<IkReal> x12403 = IKatan2WithCheck(IkReal(x12400),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x12403.valid){
continue;
}
IkReal x12401=((1.0)*(x12403.value));
IkReal x12402=x12240;
sj12=0;
cj12=1.0;
j12=0;
sj17=gconst22;
cj17=gconst23;
j17=((3.14159265)+(((-1.0)*x12401)));
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x12401)));
IkReal gconst22=(x12400*x12402);
IkReal gconst23=((1.0)*r20*x12402);
j16eval[0]=1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[4];
IkReal x12404=((-1.0)*r21);
CheckValue<IkReal> x12407 = IKatan2WithCheck(IkReal(x12404),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x12407.valid){
continue;
}
IkReal x12405=((1.0)*(x12407.value));
IkReal x12406=x12240;
sj12=0;
cj12=1.0;
j12=0;
sj17=gconst22;
cj17=gconst23;
j17=((3.14159265)+(((-1.0)*x12405)));
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x12405)));
IkReal gconst22=(x12404*x12406);
IkReal gconst23=((1.0)*r20*x12406);
j16eval[0]=0;
j16eval[1]=0;
j16eval[2]=r02;
j16eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  || IKabs(j16eval[3]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x12408=((-1.0)*r21);
CheckValue<IkReal> x12411 = IKatan2WithCheck(IkReal(x12408),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x12411.valid){
continue;
}
IkReal x12409=((1.0)*(x12411.value));
IkReal x12410=x12240;
sj12=0;
cj12=1.0;
j12=0;
sj17=gconst22;
cj17=gconst23;
j17=((3.14159265)+(((-1.0)*x12409)));
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x12409)));
IkReal gconst22=(x12408*x12410);
IkReal gconst23=((1.0)*r20*x12410);
j16eval[0]=r12;
j16eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x12412=(gconst23*r10);
IkReal x12413=(gconst22*r11);
CheckValue<IkReal> x12414 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x12412))+x12413)),IKFAST_ATAN2_MAGTHRESH);
if(!x12414.valid){
continue;
}
CheckValue<IkReal> x12415=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x12412*x12412)+(x12413*x12413)+(((-2.0)*x12412*x12413)))),-1);
if(!x12415.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x12414.value)+(((1.5707963267949)*(x12415.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x12416=IKsin(j16);
IkReal x12417=IKcos(j16);
IkReal x12418=((1.0)*gconst22);
IkReal x12419=((1.0)*sj14);
IkReal x12420=(gconst23*x12416);
IkReal x12421=((1.0)*x12416);
IkReal x12422=(gconst23*x12417);
evalcond[0]=((((-1.0)*r11*x12416*x12418))+((r12*x12417))+((r10*x12420)));
evalcond[1]=(((r20*x12422))+(((-1.0)*r22*x12421))+(((-1.0)*r21*x12417*x12418)));
evalcond[2]=((((-1.0)*r01*x12417*x12418))+(((-1.0)*r02*x12421))+((r00*x12422)));
evalcond[3]=((1.0)+(((-1.0)*r11*x12417*x12418))+((r10*x12422))+(((-1.0)*r12*x12421)));
evalcond[4]=((((-1.0)*sj13*x12419))+((r02*x12417))+(((-1.0)*r01*x12416*x12418))+((cj13*cj14))+((r00*x12420)));
evalcond[5]=(((r20*x12420))+((r22*x12417))+(((-1.0)*r21*x12416*x12418))+(((-1.0)*cj14*sj13))+(((-1.0)*cj13*x12419)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x12423=((1.0)*gconst22);
CheckValue<IkReal> x12424 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x12423))+((gconst23*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x12424.valid){
continue;
}
CheckValue<IkReal> x12425=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12423))+(((-1.0)*gconst23*r21)))),-1);
if(!x12425.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x12424.value)+(((1.5707963267949)*(x12425.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x12426=IKsin(j16);
IkReal x12427=IKcos(j16);
IkReal x12428=((1.0)*gconst22);
IkReal x12429=((1.0)*sj14);
IkReal x12430=(gconst23*x12426);
IkReal x12431=((1.0)*x12426);
IkReal x12432=(gconst23*x12427);
evalcond[0]=(((r12*x12427))+(((-1.0)*r11*x12426*x12428))+((r10*x12430)));
evalcond[1]=(((r20*x12432))+(((-1.0)*r22*x12431))+(((-1.0)*r21*x12427*x12428)));
evalcond[2]=((((-1.0)*r01*x12427*x12428))+((r00*x12432))+(((-1.0)*r02*x12431)));
evalcond[3]=((1.0)+((r10*x12432))+(((-1.0)*r12*x12431))+(((-1.0)*r11*x12427*x12428)));
evalcond[4]=((((-1.0)*sj13*x12429))+((r02*x12427))+((r00*x12430))+(((-1.0)*r01*x12426*x12428))+((cj13*cj14)));
evalcond[5]=(((r20*x12430))+(((-1.0)*cj13*x12429))+((r22*x12427))+(((-1.0)*cj14*sj13))+(((-1.0)*r21*x12426*x12428)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x12433=IKPowWithIntegerCheck(IKsign((((gconst22*r00))+((gconst23*r01)))),-1);
if(!x12433.valid){
continue;
}
CheckValue<IkReal> x12434 = IKatan2WithCheck(IkReal((((gconst23*r20))+(((-1.0)*gconst22*r21)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x12434.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12433.value)))+(x12434.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x12435=IKsin(j16);
IkReal x12436=IKcos(j16);
IkReal x12437=((1.0)*gconst22);
IkReal x12438=((1.0)*sj14);
IkReal x12439=(gconst23*x12435);
IkReal x12440=((1.0)*x12435);
IkReal x12441=(gconst23*x12436);
evalcond[0]=(((r10*x12439))+((r12*x12436))+(((-1.0)*r11*x12435*x12437)));
evalcond[1]=((((-1.0)*r22*x12440))+(((-1.0)*r21*x12436*x12437))+((r20*x12441)));
evalcond[2]=((((-1.0)*r02*x12440))+((r00*x12441))+(((-1.0)*r01*x12436*x12437)));
evalcond[3]=((1.0)+(((-1.0)*r12*x12440))+(((-1.0)*r11*x12436*x12437))+((r10*x12441)));
evalcond[4]=((((-1.0)*sj13*x12438))+(((-1.0)*r01*x12435*x12437))+((r02*x12436))+((r00*x12439))+((cj13*cj14)));
evalcond[5]=(((r20*x12439))+(((-1.0)*cj13*x12438))+((r22*x12436))+(((-1.0)*r21*x12435*x12437))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[2];
IkReal x12442=((-1.0)*r21);
IkReal x12443=((-1.0)*px);
CheckValue<IkReal> x12445 = IKatan2WithCheck(IkReal(x12442),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x12445.valid){
continue;
}
IkReal x12444=((1.0)*(x12445.value));
sj12=0;
cj12=1.0;
j12=0;
sj17=gconst22;
cj17=gconst23;
j17=((3.14159265)+(((-1.0)*x12444)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12443);
rxp1_1=(px*r21);
rxp1_2=(r11*x12443);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst21=((3.14159265358979)+(((-1.0)*x12444)));
IkReal gconst22=x12442;
IkReal gconst23=((1.0)*r20);
IkReal x12446=((1.0)*sj15);
IkReal x12447=(r11*r21);
IkReal x12448=(r10*r20);
j16eval[0]=((((-1.0)*x12446*x12447))+(((-1.0)*x12446*x12448)));
j16eval[1]=((((1.0)*x12447))+(((1.0)*x12448)));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x12449=((-1.0)*r21);
IkReal x12450=((-1.0)*px);
CheckValue<IkReal> x12452 = IKatan2WithCheck(IkReal(x12449),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x12452.valid){
continue;
}
IkReal x12451=((1.0)*(x12452.value));
sj12=0;
cj12=1.0;
j12=0;
sj17=gconst22;
cj17=gconst23;
j17=((3.14159265)+(((-1.0)*x12451)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12450);
rxp1_1=(px*r21);
rxp1_2=(r11*x12450);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst21=((3.14159265358979)+(((-1.0)*x12451)));
IkReal gconst22=x12449;
IkReal gconst23=((1.0)*r20);
IkReal x12453=((1.0)*cj15);
IkReal x12454=(r10*r20);
IkReal x12455=(r11*r21);
j16eval[0]=((((-1.0)*x12453*x12454))+(((-1.0)*x12453*x12455)));
j16eval[1]=((((1.0)*x12455))+(((1.0)*x12454)));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
IkReal x12456=((-1.0)*r21);
IkReal x12457=((-1.0)*px);
CheckValue<IkReal> x12459 = IKatan2WithCheck(IkReal(x12456),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x12459.valid){
continue;
}
IkReal x12458=((1.0)*(x12459.value));
sj12=0;
cj12=1.0;
j12=0;
sj17=gconst22;
cj17=gconst23;
j17=((3.14159265)+(((-1.0)*x12458)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12457);
rxp1_1=(px*r21);
rxp1_2=(r11*x12457);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst21=((3.14159265358979)+(((-1.0)*x12458)));
IkReal gconst22=x12456;
IkReal gconst23=((1.0)*r20);
IkReal x12460=((1.0)*cj15);
j16eval[0]=((((-1.0)*r10*r20*x12460))+(((-1.0)*r11*r21*x12460)));
j16eval[1]=cj15;
j16eval[2]=r02;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x12461=((1.0)*sj15);
CheckValue<IkReal> x12462=IKPowWithIntegerCheck(((((-1.0)*cj15*gconst23*r10))+((cj15*gconst22*r11))),-1);
if(!x12462.valid){
continue;
}
CheckValue<IkReal> x12463=IKPowWithIntegerCheck(cj15,-1);
if(!x12463.valid){
continue;
}
CheckValue<IkReal> x12464=IKPowWithIntegerCheck(r02,-1);
if(!x12464.valid){
continue;
}
if( IKabs(((x12462.value)*(((((-1.0)*gconst22*r10*x12461))+(((-1.0)*gconst23*r11*x12461)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12463.value)*(x12464.value)*(((((-1.0)*sj13*sj14))+((cj13*cj14)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12462.value)*(((((-1.0)*gconst22*r10*x12461))+(((-1.0)*gconst23*r11*x12461))))))+IKsqr(((x12463.value)*(x12464.value)*(((((-1.0)*sj13*sj14))+((cj13*cj14))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x12462.value)*(((((-1.0)*gconst22*r10*x12461))+(((-1.0)*gconst23*r11*x12461))))), ((x12463.value)*(x12464.value)*(((((-1.0)*sj13*sj14))+((cj13*cj14))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x12465=IKcos(j16);
IkReal x12466=IKsin(j16);
IkReal x12467=(gconst22*r11);
IkReal x12468=(gconst22*sj15);
IkReal x12469=(gconst23*sj15);
IkReal x12470=(cj13*cj14);
IkReal x12471=((1.0)*sj14);
IkReal x12472=((1.0)*gconst23);
IkReal x12473=((1.0)*cj14*sj13);
IkReal x12474=(cj13*x12471);
IkReal x12475=((1.0)*x12465);
IkReal x12476=((1.0)*cj15*gconst22);
IkReal x12477=(r21*x12466);
IkReal x12478=(cj15*x12466);
IkReal x12479=(gconst23*x12465);
IkReal x12480=((1.0)*x12466);
IkReal x12481=(x12473+x12474);
evalcond[0]=((-1.0)*r02*x12466);
evalcond[1]=((((-1.0)*gconst22*r21*x12475))+((r20*x12479)));
evalcond[2]=((1.0)+(((-1.0)*x12467*x12475))+((r10*x12479)));
evalcond[3]=((((-1.0)*cj15*r02*x12475))+x12470+(((-1.0)*sj13*x12471)));
evalcond[4]=((((-1.0)*x12481))+(((-1.0)*r02*sj15*x12475)));
evalcond[5]=((((-1.0)*r10*x12472*x12478))+((r11*x12469))+((r10*x12468))+((x12467*x12478)));
evalcond[6]=(((sj15*x12466*x12467))+(((-1.0)*r10*x12469*x12480))+(((-1.0)*cj15*r11*x12472))+(((-1.0)*r10*x12476)));
evalcond[7]=(((cj15*gconst22*x12477))+(((-1.0)*x12481))+((r20*x12468))+(((-1.0)*r20*x12472*x12478))+((r21*x12469)));
evalcond[8]=((((-1.0)*cj15*r21*x12472))+(((-1.0)*r20*x12476))+(((-1.0)*x12470))+(((-1.0)*r20*x12469*x12480))+((sj13*sj14))+((x12468*x12477)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x12482=((1.0)*sj15);
IkReal x12483=(gconst22*r11);
IkReal x12484=(gconst23*r10);
CheckValue<IkReal> x12485=IKPowWithIntegerCheck((((cj15*x12483))+(((-1.0)*cj15*x12484))),-1);
if(!x12485.valid){
continue;
}
CheckValue<IkReal> x12486=IKPowWithIntegerCheck(((((-1.0)*x12483))+x12484),-1);
if(!x12486.valid){
continue;
}
if( IKabs(((x12485.value)*(((((-1.0)*gconst22*r10*x12482))+(((-1.0)*gconst23*r11*x12482)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x12486.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12485.value)*(((((-1.0)*gconst22*r10*x12482))+(((-1.0)*gconst23*r11*x12482))))))+IKsqr(((-1.0)*(x12486.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x12485.value)*(((((-1.0)*gconst22*r10*x12482))+(((-1.0)*gconst23*r11*x12482))))), ((-1.0)*(x12486.value)));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x12487=IKcos(j16);
IkReal x12488=IKsin(j16);
IkReal x12489=(gconst22*r11);
IkReal x12490=(gconst22*sj15);
IkReal x12491=(gconst23*sj15);
IkReal x12492=(cj13*cj14);
IkReal x12493=((1.0)*sj14);
IkReal x12494=((1.0)*gconst23);
IkReal x12495=((1.0)*cj14*sj13);
IkReal x12496=(cj13*x12493);
IkReal x12497=((1.0)*x12487);
IkReal x12498=((1.0)*cj15*gconst22);
IkReal x12499=(r21*x12488);
IkReal x12500=(cj15*x12488);
IkReal x12501=(gconst23*x12487);
IkReal x12502=((1.0)*x12488);
IkReal x12503=(x12496+x12495);
evalcond[0]=((-1.0)*r02*x12488);
evalcond[1]=((((-1.0)*gconst22*r21*x12497))+((r20*x12501)));
evalcond[2]=((1.0)+((r10*x12501))+(((-1.0)*x12489*x12497)));
evalcond[3]=((((-1.0)*cj15*r02*x12497))+x12492+(((-1.0)*sj13*x12493)));
evalcond[4]=((((-1.0)*x12503))+(((-1.0)*r02*sj15*x12497)));
evalcond[5]=(((r10*x12490))+(((-1.0)*r10*x12494*x12500))+((x12489*x12500))+((r11*x12491)));
evalcond[6]=((((-1.0)*r10*x12491*x12502))+(((-1.0)*r10*x12498))+(((-1.0)*cj15*r11*x12494))+((sj15*x12488*x12489)));
evalcond[7]=((((-1.0)*x12503))+((r20*x12490))+((r21*x12491))+(((-1.0)*r20*x12494*x12500))+((cj15*gconst22*x12499)));
evalcond[8]=((((-1.0)*r20*x12498))+(((-1.0)*cj15*r21*x12494))+((sj13*sj14))+((x12490*x12499))+(((-1.0)*r20*x12491*x12502))+(((-1.0)*x12492)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x12504=(gconst23*r10);
IkReal x12505=(gconst22*r11);
CheckValue<IkReal> x12506=IKPowWithIntegerCheck(((((-1.0)*sj15*x12504))+((sj15*x12505))),-1);
if(!x12506.valid){
continue;
}
CheckValue<IkReal> x12507=IKPowWithIntegerCheck(((((-1.0)*x12505))+x12504),-1);
if(!x12507.valid){
continue;
}
if( IKabs(((x12506.value)*((((cj15*gconst23*r11))+((cj15*gconst22*r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x12507.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12506.value)*((((cj15*gconst23*r11))+((cj15*gconst22*r10))))))+IKsqr(((-1.0)*(x12507.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x12506.value)*((((cj15*gconst23*r11))+((cj15*gconst22*r10))))), ((-1.0)*(x12507.value)));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x12508=IKcos(j16);
IkReal x12509=IKsin(j16);
IkReal x12510=(gconst22*r11);
IkReal x12511=(gconst22*sj15);
IkReal x12512=(gconst23*sj15);
IkReal x12513=(cj13*cj14);
IkReal x12514=((1.0)*sj14);
IkReal x12515=((1.0)*gconst23);
IkReal x12516=((1.0)*cj14*sj13);
IkReal x12517=(cj13*x12514);
IkReal x12518=((1.0)*x12508);
IkReal x12519=((1.0)*cj15*gconst22);
IkReal x12520=(r21*x12509);
IkReal x12521=(cj15*x12509);
IkReal x12522=(gconst23*x12508);
IkReal x12523=((1.0)*x12509);
IkReal x12524=(x12516+x12517);
evalcond[0]=((-1.0)*r02*x12509);
evalcond[1]=(((r20*x12522))+(((-1.0)*gconst22*r21*x12518)));
evalcond[2]=((1.0)+((r10*x12522))+(((-1.0)*x12510*x12518)));
evalcond[3]=((((-1.0)*sj13*x12514))+x12513+(((-1.0)*cj15*r02*x12518)));
evalcond[4]=((((-1.0)*x12524))+(((-1.0)*r02*sj15*x12518)));
evalcond[5]=((((-1.0)*r10*x12515*x12521))+((x12510*x12521))+((r10*x12511))+((r11*x12512)));
evalcond[6]=((((-1.0)*r10*x12519))+(((-1.0)*r10*x12512*x12523))+((sj15*x12509*x12510))+(((-1.0)*cj15*r11*x12515)));
evalcond[7]=(((cj15*gconst22*x12520))+(((-1.0)*x12524))+((r20*x12511))+((r21*x12512))+(((-1.0)*r20*x12515*x12521)));
evalcond[8]=((((-1.0)*cj15*r21*x12515))+((x12511*x12520))+(((-1.0)*x12513))+((sj13*sj14))+(((-1.0)*r20*x12512*x12523))+(((-1.0)*r20*x12519)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j16]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x12525=gconst22*gconst22;
IkReal x12526=gconst23*gconst23;
IkReal x12527=(cj15*r21);
IkReal x12528=(gconst22*r10);
IkReal x12529=((1.0)*gconst23);
IkReal x12530=(r11*sj15);
IkReal x12531=(r20*x12526);
CheckValue<IkReal> x12532 = IKatan2WithCheck(IkReal(((((-1.0)*gconst22*r21*x12529*x12530))+((gconst23*r20*sj15*x12528))+(((-1.0)*r10*r21*sj15*x12525))+((x12530*x12531)))),IkReal((((gconst23*r22*x12530))+((r22*sj15*x12528)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12532.valid){
continue;
}
CheckValue<IkReal> x12533=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12527*x12528*x12529))+((r11*x12525*x12527))+((cj15*r10*x12531))+((cj15*r12*r22))+(((-1.0)*cj15*gconst22*r11*r20*x12529)))),-1);
if(!x12533.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x12532.value)+(((1.5707963267949)*(x12533.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x12534=IKcos(j16);
IkReal x12535=IKsin(j16);
IkReal x12536=((1.0)*gconst22);
IkReal x12537=(cj15*r10);
IkReal x12538=(gconst22*sj15);
IkReal x12539=(gconst23*sj15);
IkReal x12540=(cj13*cj14);
IkReal x12541=(cj15*gconst22);
IkReal x12542=(cj15*gconst23);
IkReal x12543=((1.0)*sj14);
IkReal x12544=((1.0)*cj14*sj13);
IkReal x12545=(cj13*x12543);
IkReal x12546=((1.0)*x12535);
IkReal x12547=(gconst23*x12534);
IkReal x12548=(r01*x12535);
IkReal x12549=(r11*x12535);
IkReal x12550=(r21*x12535);
IkReal x12551=((1.0)*cj15*x12534);
IkReal x12552=((1.0)*sj15*x12534);
IkReal x12553=(x12545+x12544);
evalcond[0]=(((r20*x12547))+(((-1.0)*r22*x12546))+(((-1.0)*r21*x12534*x12536)));
evalcond[1]=(((r00*x12547))+(((-1.0)*r02*x12546))+(((-1.0)*r01*x12534*x12536)));
evalcond[2]=((1.0)+((r10*x12547))+(((-1.0)*r11*x12534*x12536))+(((-1.0)*r12*x12546)));
evalcond[3]=((((-1.0)*r12*x12551))+((r11*x12539))+(((-1.0)*gconst23*x12537*x12546))+((x12541*x12549))+((r10*x12538)));
evalcond[4]=((((-1.0)*r12*x12552))+(((-1.0)*r11*x12542))+(((-1.0)*r10*x12539*x12546))+((x12538*x12549))+(((-1.0)*x12536*x12537)));
evalcond[5]=(((r00*x12538))+(((-1.0)*r00*x12542*x12546))+(((-1.0)*sj13*x12543))+x12540+((x12541*x12548))+(((-1.0)*r02*x12551))+((r01*x12539)));
evalcond[6]=(((r20*x12538))+((r21*x12539))+(((-1.0)*r22*x12551))+(((-1.0)*r20*x12542*x12546))+((x12541*x12550))+(((-1.0)*x12553)));
evalcond[7]=((((-1.0)*x12540))+(((-1.0)*r21*x12542))+(((-1.0)*r22*x12552))+((x12538*x12550))+((sj13*sj14))+(((-1.0)*r20*x12539*x12546))+(((-1.0)*cj15*r20*x12536)));
evalcond[8]=(((x12538*x12548))+(((-1.0)*cj15*r00*x12536))+(((-1.0)*r00*x12539*x12546))+(((-1.0)*r01*x12542))+(((-1.0)*r02*x12552))+(((-1.0)*x12553)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x12554=((1.0)*gconst22);
CheckValue<IkReal> x12555 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x12554))+((gconst23*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x12555.valid){
continue;
}
CheckValue<IkReal> x12556=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst23*r21))+(((-1.0)*r20*x12554)))),-1);
if(!x12556.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x12555.value)+(((1.5707963267949)*(x12556.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x12557=IKcos(j16);
IkReal x12558=IKsin(j16);
IkReal x12559=((1.0)*gconst22);
IkReal x12560=(cj15*r10);
IkReal x12561=(gconst22*sj15);
IkReal x12562=(gconst23*sj15);
IkReal x12563=(cj13*cj14);
IkReal x12564=(cj15*gconst22);
IkReal x12565=(cj15*gconst23);
IkReal x12566=((1.0)*sj14);
IkReal x12567=((1.0)*cj14*sj13);
IkReal x12568=(cj13*x12566);
IkReal x12569=((1.0)*x12558);
IkReal x12570=(gconst23*x12557);
IkReal x12571=(r01*x12558);
IkReal x12572=(r11*x12558);
IkReal x12573=(r21*x12558);
IkReal x12574=((1.0)*cj15*x12557);
IkReal x12575=((1.0)*sj15*x12557);
IkReal x12576=(x12568+x12567);
evalcond[0]=((((-1.0)*r22*x12569))+((r20*x12570))+(((-1.0)*r21*x12557*x12559)));
evalcond[1]=((((-1.0)*r02*x12569))+(((-1.0)*r01*x12557*x12559))+((r00*x12570)));
evalcond[2]=((1.0)+(((-1.0)*r12*x12569))+((r10*x12570))+(((-1.0)*r11*x12557*x12559)));
evalcond[3]=(((r11*x12562))+(((-1.0)*r12*x12574))+(((-1.0)*gconst23*x12560*x12569))+((r10*x12561))+((x12564*x12572)));
evalcond[4]=((((-1.0)*r10*x12562*x12569))+(((-1.0)*r12*x12575))+(((-1.0)*x12559*x12560))+((x12561*x12572))+(((-1.0)*r11*x12565)));
evalcond[5]=(((r01*x12562))+((r00*x12561))+(((-1.0)*r02*x12574))+(((-1.0)*r00*x12565*x12569))+x12563+(((-1.0)*sj13*x12566))+((x12564*x12571)));
evalcond[6]=(((r20*x12561))+(((-1.0)*x12576))+(((-1.0)*r20*x12565*x12569))+((r21*x12562))+((x12564*x12573))+(((-1.0)*r22*x12574)));
evalcond[7]=((((-1.0)*cj15*r20*x12559))+(((-1.0)*r20*x12562*x12569))+(((-1.0)*r21*x12565))+(((-1.0)*x12563))+((sj13*sj14))+((x12561*x12573))+(((-1.0)*r22*x12575)));
evalcond[8]=((((-1.0)*cj15*r00*x12559))+(((-1.0)*r00*x12562*x12569))+(((-1.0)*x12576))+(((-1.0)*r02*x12575))+(((-1.0)*r01*x12565))+((x12561*x12571)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x12577=IKPowWithIntegerCheck(IKsign((((gconst22*r00))+((gconst23*r01)))),-1);
if(!x12577.valid){
continue;
}
CheckValue<IkReal> x12578 = IKatan2WithCheck(IkReal((((gconst23*r20))+(((-1.0)*gconst22*r21)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x12578.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12577.value)))+(x12578.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x12579=IKcos(j16);
IkReal x12580=IKsin(j16);
IkReal x12581=((1.0)*gconst22);
IkReal x12582=(cj15*r10);
IkReal x12583=(gconst22*sj15);
IkReal x12584=(gconst23*sj15);
IkReal x12585=(cj13*cj14);
IkReal x12586=(cj15*gconst22);
IkReal x12587=(cj15*gconst23);
IkReal x12588=((1.0)*sj14);
IkReal x12589=((1.0)*cj14*sj13);
IkReal x12590=(cj13*x12588);
IkReal x12591=((1.0)*x12580);
IkReal x12592=(gconst23*x12579);
IkReal x12593=(r01*x12580);
IkReal x12594=(r11*x12580);
IkReal x12595=(r21*x12580);
IkReal x12596=((1.0)*cj15*x12579);
IkReal x12597=((1.0)*sj15*x12579);
IkReal x12598=(x12589+x12590);
evalcond[0]=((((-1.0)*r22*x12591))+(((-1.0)*r21*x12579*x12581))+((r20*x12592)));
evalcond[1]=(((r00*x12592))+(((-1.0)*r02*x12591))+(((-1.0)*r01*x12579*x12581)));
evalcond[2]=((1.0)+(((-1.0)*r12*x12591))+(((-1.0)*r11*x12579*x12581))+((r10*x12592)));
evalcond[3]=((((-1.0)*r12*x12596))+((x12586*x12594))+(((-1.0)*gconst23*x12582*x12591))+((r11*x12584))+((r10*x12583)));
evalcond[4]=((((-1.0)*r11*x12587))+(((-1.0)*r12*x12597))+(((-1.0)*r10*x12584*x12591))+(((-1.0)*x12581*x12582))+((x12583*x12594)));
evalcond[5]=(((r00*x12583))+((r01*x12584))+(((-1.0)*r00*x12587*x12591))+(((-1.0)*r02*x12596))+x12585+((x12586*x12593))+(((-1.0)*sj13*x12588)));
evalcond[6]=(((r20*x12583))+(((-1.0)*r22*x12596))+(((-1.0)*r20*x12587*x12591))+((r21*x12584))+(((-1.0)*x12598))+((x12586*x12595)));
evalcond[7]=((((-1.0)*r22*x12597))+(((-1.0)*r20*x12584*x12591))+(((-1.0)*r21*x12587))+((sj13*sj14))+((x12583*x12595))+(((-1.0)*x12585))+(((-1.0)*cj15*r20*x12581)));
evalcond[8]=((((-1.0)*r00*x12584*x12591))+(((-1.0)*cj15*r00*x12581))+(((-1.0)*r02*x12597))+(((-1.0)*r01*x12587))+(((-1.0)*x12598))+((x12583*x12593)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12600 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x12600)==0){
continue;
}
IkReal x12599=pow(x12600,-0.5);
CheckValue<IkReal> x12601 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x12601.valid){
continue;
}
IkReal gconst24=((-1.0)*(x12601.value));
IkReal gconst25=((-1.0)*r01*x12599);
IkReal gconst26=(r00*x12599);
CheckValue<IkReal> x12602 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x12602.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x12602.value)+j17)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x12605 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x12605.valid){
continue;
}
IkReal x12603=((-1.0)*(x12605.value));
IkReal x12604=x12599;
sj12=0;
cj12=1.0;
j12=0;
sj17=gconst25;
cj17=gconst26;
j17=x12603;
IkReal gconst24=x12603;
IkReal gconst25=((-1.0)*r01*x12604);
IkReal gconst26=(r00*x12604);
j16eval[0]=1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x12608 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x12608.valid){
continue;
}
IkReal x12606=((-1.0)*(x12608.value));
IkReal x12607=x12599;
sj12=0;
cj12=1.0;
j12=0;
sj17=gconst25;
cj17=gconst26;
j17=x12606;
IkReal gconst24=x12606;
IkReal gconst25=((-1.0)*r01*x12607);
IkReal gconst26=(r00*x12607);
CheckValue<IkReal> x12616=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x12616.valid){
continue;
}
IkReal x12609=x12616.value;
IkReal x12610=(cj15*x12609);
IkReal x12611=(r21*x12610);
IkReal x12612=(r10*x12610);
IkReal x12613=(r11*x12610);
IkReal x12614=(r20*x12610);
IkReal x12615=(r00*r01*x12610);
j16eval[0]=IKsign((((r20*x12612*(r00*r00)))+((cj15*r12*r22))+((r00*r01*r20*x12613))+((r00*r01*r10*x12611))+((r11*x12611*(r01*r01)))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x12619 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x12619.valid){
continue;
}
IkReal x12617=((-1.0)*(x12619.value));
IkReal x12618=x12599;
sj12=0;
cj12=1.0;
j12=0;
sj17=gconst25;
cj17=gconst26;
j17=x12617;
IkReal gconst24=x12617;
IkReal gconst25=((-1.0)*r01*x12618);
IkReal gconst26=(r00*x12618);
CheckValue<IkReal> x12627=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x12627.valid){
continue;
}
IkReal x12620=x12627.value;
IkReal x12621=(sj15*x12620);
IkReal x12622=(r21*x12621);
IkReal x12623=(r10*x12621);
IkReal x12624=(r11*x12621);
IkReal x12625=(r20*x12621);
IkReal x12626=(r00*r01*x12621);
j16eval[0]=IKsign((((r20*x12623*(r00*r00)))+((r11*x12622*(r01*r01)))+((r12*r22*sj15))+((r00*r01*r20*x12624))+((r00*r01*r10*x12622))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j15))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x12630 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x12630.valid){
continue;
}
IkReal x12628=((-1.0)*(x12630.value));
IkReal x12629=x12599;
sj12=0;
cj12=1.0;
j12=0;
sj17=gconst25;
cj17=gconst26;
j17=x12628;
sj15=0;
cj15=1.0;
j15=0;
IkReal gconst24=x12628;
IkReal gconst25=((-1.0)*r01*x12629);
IkReal gconst26=(r00*x12629);
j16eval[0]=1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
CheckValue<IkReal> x12633 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x12633.valid){
continue;
}
IkReal x12631=((-1.0)*(x12633.value));
IkReal x12632=x12599;
sj12=0;
cj12=1.0;
j12=0;
sj17=gconst25;
cj17=gconst26;
j17=x12631;
sj15=0;
cj15=1.0;
j15=0;
IkReal gconst24=x12631;
IkReal gconst25=((-1.0)*r01*x12632);
IkReal gconst26=(r00*x12632);
j16eval[0]=r12;
j16eval[1]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x12636 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x12636.valid){
continue;
}
IkReal x12634=((-1.0)*(x12636.value));
IkReal x12635=x12599;
sj12=0;
cj12=1.0;
j12=0;
sj17=gconst25;
cj17=gconst26;
j17=x12634;
sj15=0;
cj15=1.0;
j15=0;
IkReal gconst24=x12634;
IkReal gconst25=((-1.0)*r01*x12635);
IkReal gconst26=(r00*x12635);
IkReal x12637=r02*r02;
IkReal x12638=((1.0)*r12);
IkReal x12639=(cj13*cj14);
IkReal x12640=(sj13*sj14);
CheckValue<IkReal> x12644=IKPowWithIntegerCheck(((-1.0)+x12637),-1);
if(!x12644.valid){
continue;
}
IkReal x12641=x12644.value;
if((((1.0)+(((-1.0)*x12637)))) < -0.00001)
continue;
IkReal x12642=IKsqrt(((1.0)+(((-1.0)*x12637))));
IkReal x12643=(r02*x12641*x12642);
j16eval[0]=((IKabs((((r12*x12640*x12643))+(((-1.0)*x12638*x12639*x12643)))))+(IKabs((((r12*x12639))+(((-1.0)*x12638*x12640))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x12645=((1.0)*gconst25);
IkReal x12646=(sj13*sj14);
IkReal x12647=(cj13*cj14);
IkReal x12648=((1.0)*gconst26);
CheckValue<IkReal> x12649 = IKatan2WithCheck(IkReal((((r12*x12647))+(((-1.0)*r12*x12646)))),IkReal(((((-1.0)*r11*x12645*x12646))+((gconst26*r10*x12646))+((gconst25*r11*x12647))+(((-1.0)*r10*x12647*x12648)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12649.valid){
continue;
}
CheckValue<IkReal> x12650=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12645))+(((-1.0)*r21*x12648)))),-1);
if(!x12650.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x12649.value)+(((1.5707963267949)*(x12650.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x12651=IKcos(j16);
IkReal x12652=IKsin(j16);
IkReal x12653=(gconst25*r21);
IkReal x12654=(gconst26*r10);
IkReal x12655=(gconst26*r20);
IkReal x12656=(gconst26*r00);
IkReal x12657=((1.0)*sj14);
IkReal x12658=((1.0)*x12652);
IkReal x12659=((1.0)*x12651);
IkReal x12660=(gconst25*x12652);
IkReal x12661=(gconst25*x12659);
evalcond[0]=(((x12651*x12655))+(((-1.0)*x12653*x12659))+(((-1.0)*r22*x12658)));
evalcond[1]=(((x12651*x12656))+(((-1.0)*r01*x12661))+(((-1.0)*r02*x12658)));
evalcond[2]=((((-1.0)*r12*x12659))+((r11*x12660))+(((-1.0)*x12654*x12658)));
evalcond[3]=((1.0)+((x12651*x12654))+(((-1.0)*r12*x12658))+(((-1.0)*r11*x12661)));
evalcond[4]=((((-1.0)*x12656*x12658))+(((-1.0)*sj13*x12657))+(((-1.0)*r02*x12659))+((r01*x12660))+((cj13*cj14)));
evalcond[5]=((((-1.0)*cj13*x12657))+((x12652*x12653))+(((-1.0)*cj14*sj13))+(((-1.0)*r22*x12659))+(((-1.0)*x12655*x12658)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x12662=(gconst25*r11);
IkReal x12663=(gconst26*r10);
CheckValue<IkReal> x12664=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x12663*x12663)+(((-2.0)*x12662*x12663))+(x12662*x12662))),-1);
if(!x12664.valid){
continue;
}
CheckValue<IkReal> x12665 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x12663))+x12662)),IKFAST_ATAN2_MAGTHRESH);
if(!x12665.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12664.value)))+(x12665.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x12666=IKcos(j16);
IkReal x12667=IKsin(j16);
IkReal x12668=(gconst25*r21);
IkReal x12669=(gconst26*r10);
IkReal x12670=(gconst26*r20);
IkReal x12671=(gconst26*r00);
IkReal x12672=((1.0)*sj14);
IkReal x12673=((1.0)*x12667);
IkReal x12674=((1.0)*x12666);
IkReal x12675=(gconst25*x12667);
IkReal x12676=(gconst25*x12674);
evalcond[0]=((((-1.0)*r22*x12673))+((x12666*x12670))+(((-1.0)*x12668*x12674)));
evalcond[1]=((((-1.0)*r01*x12676))+(((-1.0)*r02*x12673))+((x12666*x12671)));
evalcond[2]=((((-1.0)*x12669*x12673))+(((-1.0)*r12*x12674))+((r11*x12675)));
evalcond[3]=((1.0)+(((-1.0)*r12*x12673))+(((-1.0)*r11*x12676))+((x12666*x12669)));
evalcond[4]=((((-1.0)*sj13*x12672))+(((-1.0)*r02*x12674))+(((-1.0)*x12671*x12673))+((cj13*cj14))+((r01*x12675)));
evalcond[5]=((((-1.0)*r22*x12674))+(((-1.0)*x12670*x12673))+((x12667*x12668))+(((-1.0)*cj13*x12672))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x12677=((1.0)*gconst25);
CheckValue<IkReal> x12678 = IKatan2WithCheck(IkReal((((gconst26*r00))+(((-1.0)*r01*x12677)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x12678.valid){
continue;
}
CheckValue<IkReal> x12679=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12677))+(((-1.0)*gconst26*r21)))),-1);
if(!x12679.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x12678.value)+(((1.5707963267949)*(x12679.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x12680=IKcos(j16);
IkReal x12681=IKsin(j16);
IkReal x12682=(gconst25*r21);
IkReal x12683=(gconst26*r10);
IkReal x12684=(gconst26*r20);
IkReal x12685=(gconst26*r00);
IkReal x12686=((1.0)*sj14);
IkReal x12687=((1.0)*x12681);
IkReal x12688=((1.0)*x12680);
IkReal x12689=(gconst25*x12681);
IkReal x12690=(gconst25*x12688);
evalcond[0]=(((x12680*x12684))+(((-1.0)*r22*x12687))+(((-1.0)*x12682*x12688)));
evalcond[1]=((((-1.0)*r02*x12687))+(((-1.0)*r01*x12690))+((x12680*x12685)));
evalcond[2]=(((r11*x12689))+(((-1.0)*r12*x12688))+(((-1.0)*x12683*x12687)));
evalcond[3]=((1.0)+(((-1.0)*r11*x12690))+(((-1.0)*r12*x12687))+((x12680*x12683)));
evalcond[4]=(((r01*x12689))+(((-1.0)*r02*x12688))+(((-1.0)*sj13*x12686))+(((-1.0)*x12685*x12687))+((cj13*cj14)));
evalcond[5]=((((-1.0)*x12684*x12687))+(((-1.0)*cj13*x12686))+(((-1.0)*cj14*sj13))+((x12681*x12682))+(((-1.0)*r22*x12688)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x12693 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x12693.valid){
continue;
}
IkReal x12691=((-1.0)*(x12693.value));
IkReal x12692=x12599;
sj12=0;
cj12=1.0;
j12=0;
sj17=gconst25;
cj17=gconst26;
j17=x12691;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
IkReal gconst24=x12691;
IkReal gconst25=((-1.0)*r01*x12692);
IkReal gconst26=(r00*x12692);
j16eval[0]=1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
CheckValue<IkReal> x12696 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x12696.valid){
continue;
}
IkReal x12694=((-1.0)*(x12696.value));
IkReal x12695=x12599;
sj12=0;
cj12=1.0;
j12=0;
sj17=gconst25;
cj17=gconst26;
j17=x12694;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
IkReal gconst24=x12694;
IkReal gconst25=((-1.0)*r01*x12695);
IkReal gconst26=(r00*x12695);
j16eval[0]=r12;
j16eval[1]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x12699 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x12699.valid){
continue;
}
IkReal x12697=((-1.0)*(x12699.value));
IkReal x12698=x12599;
sj12=0;
cj12=1.0;
j12=0;
sj17=gconst25;
cj17=gconst26;
j17=x12697;
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
IkReal gconst24=x12697;
IkReal gconst25=((-1.0)*r01*x12698);
IkReal gconst26=(r00*x12698);
IkReal x12700=r02*r02;
IkReal x12701=((1.0)*r12);
IkReal x12702=(cj13*cj14);
IkReal x12703=(sj13*sj14);
CheckValue<IkReal> x12707=IKPowWithIntegerCheck(((-1.0)+x12700),-1);
if(!x12707.valid){
continue;
}
IkReal x12704=x12707.value;
if((((1.0)+(((-1.0)*x12700)))) < -0.00001)
continue;
IkReal x12705=IKsqrt(((1.0)+(((-1.0)*x12700))));
IkReal x12706=(r02*x12704*x12705);
j16eval[0]=((IKabs(((((-1.0)*x12701*x12703))+((r12*x12702)))))+(IKabs(((((-1.0)*x12701*x12702*x12706))+((r12*x12703*x12706))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x12708=(gconst25*r11);
IkReal x12709=(cj13*cj14);
IkReal x12710=(gconst26*r10);
IkReal x12711=((1.0)*sj13*sj14);
CheckValue<IkReal> x12712 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x12711))+((r12*x12709)))),IkReal((((x12708*x12709))+(((-1.0)*x12709*x12710))+((sj13*sj14*x12710))+(((-1.0)*x12708*x12711)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12712.valid){
continue;
}
CheckValue<IkReal> x12713=IKPowWithIntegerCheck(IKsign((((gconst26*r21))+((gconst25*r20)))),-1);
if(!x12713.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x12712.value)+(((1.5707963267949)*(x12713.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x12714=IKsin(j16);
IkReal x12715=IKcos(j16);
IkReal x12716=(gconst26*r10);
IkReal x12717=((1.0)*sj14);
IkReal x12718=((1.0)*x12714);
IkReal x12719=(gconst26*x12715);
IkReal x12720=(gconst26*x12714);
IkReal x12721=((1.0)*gconst25*x12715);
evalcond[0]=(((r12*x12715))+((x12714*x12716))+(((-1.0)*gconst25*r11*x12718)));
evalcond[1]=((((-1.0)*r22*x12718))+((r20*x12719))+(((-1.0)*r21*x12721)));
evalcond[2]=((((-1.0)*r01*x12721))+((r00*x12719))+(((-1.0)*r02*x12718)));
evalcond[3]=((1.0)+((x12715*x12716))+(((-1.0)*r12*x12718))+(((-1.0)*r11*x12721)));
evalcond[4]=(((r02*x12715))+(((-1.0)*gconst25*r01*x12718))+(((-1.0)*sj13*x12717))+((r00*x12720))+((cj13*cj14)));
evalcond[5]=((((-1.0)*cj13*x12717))+((r22*x12715))+(((-1.0)*gconst25*r21*x12718))+((r20*x12720))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x12722=(gconst25*r11);
IkReal x12723=(gconst26*r10);
CheckValue<IkReal> x12724 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x12723))+x12722)),IKFAST_ATAN2_MAGTHRESH);
if(!x12724.valid){
continue;
}
CheckValue<IkReal> x12725=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x12723*x12723)+(x12722*x12722)+(((-2.0)*x12722*x12723)))),-1);
if(!x12725.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x12724.value)+(((1.5707963267949)*(x12725.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x12726=IKsin(j16);
IkReal x12727=IKcos(j16);
IkReal x12728=(gconst26*r10);
IkReal x12729=((1.0)*sj14);
IkReal x12730=((1.0)*x12726);
IkReal x12731=(gconst26*x12727);
IkReal x12732=(gconst26*x12726);
IkReal x12733=((1.0)*gconst25*x12727);
evalcond[0]=(((r12*x12727))+(((-1.0)*gconst25*r11*x12730))+((x12726*x12728)));
evalcond[1]=((((-1.0)*r22*x12730))+((r20*x12731))+(((-1.0)*r21*x12733)));
evalcond[2]=((((-1.0)*r01*x12733))+(((-1.0)*r02*x12730))+((r00*x12731)));
evalcond[3]=((1.0)+((x12727*x12728))+(((-1.0)*r12*x12730))+(((-1.0)*r11*x12733)));
evalcond[4]=(((r02*x12727))+(((-1.0)*sj13*x12729))+((r00*x12732))+(((-1.0)*gconst25*r01*x12730))+((cj13*cj14)));
evalcond[5]=((((-1.0)*cj13*x12729))+((r20*x12732))+(((-1.0)*cj14*sj13))+((r22*x12727))+(((-1.0)*gconst25*r21*x12730)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x12734=((1.0)*gconst25);
CheckValue<IkReal> x12735 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x12734))+((gconst26*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x12735.valid){
continue;
}
CheckValue<IkReal> x12736=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst26*r21))+(((-1.0)*r20*x12734)))),-1);
if(!x12736.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x12735.value)+(((1.5707963267949)*(x12736.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x12737=IKsin(j16);
IkReal x12738=IKcos(j16);
IkReal x12739=(gconst26*r10);
IkReal x12740=((1.0)*sj14);
IkReal x12741=((1.0)*x12737);
IkReal x12742=(gconst26*x12738);
IkReal x12743=(gconst26*x12737);
IkReal x12744=((1.0)*gconst25*x12738);
evalcond[0]=(((x12737*x12739))+((r12*x12738))+(((-1.0)*gconst25*r11*x12741)));
evalcond[1]=((((-1.0)*r22*x12741))+((r20*x12742))+(((-1.0)*r21*x12744)));
evalcond[2]=((((-1.0)*r02*x12741))+((r00*x12742))+(((-1.0)*r01*x12744)));
evalcond[3]=((1.0)+(((-1.0)*r12*x12741))+(((-1.0)*r11*x12744))+((x12738*x12739)));
evalcond[4]=(((r02*x12738))+(((-1.0)*sj13*x12740))+(((-1.0)*gconst25*r01*x12741))+((r00*x12743))+((cj13*cj14)));
evalcond[5]=((((-1.0)*cj13*x12740))+(((-1.0)*gconst25*r21*x12741))+((r20*x12743))+(((-1.0)*cj14*sj13))+((r22*x12738)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x12747 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x12747.valid){
continue;
}
IkReal x12745=((-1.0)*(x12747.value));
IkReal x12746=x12599;
sj12=0;
cj12=1.0;
j12=0;
sj17=gconst25;
cj17=gconst26;
j17=x12745;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
IkReal gconst24=x12745;
IkReal gconst25=((-1.0)*r01*x12746);
IkReal gconst26=(r00*x12746);
j16eval[0]=1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
CheckValue<IkReal> x12750 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x12750.valid){
continue;
}
IkReal x12748=((-1.0)*(x12750.value));
IkReal x12749=x12599;
sj12=0;
cj12=1.0;
j12=0;
sj17=gconst25;
cj17=gconst26;
j17=x12748;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
IkReal gconst24=x12748;
IkReal gconst25=((-1.0)*r01*x12749);
IkReal gconst26=(r00*x12749);
j16eval[0]=r12;
j16eval[1]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x12753 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x12753.valid){
continue;
}
IkReal x12751=((-1.0)*(x12753.value));
IkReal x12752=x12599;
sj12=0;
cj12=1.0;
j12=0;
sj17=gconst25;
cj17=gconst26;
j17=x12751;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
IkReal gconst24=x12751;
IkReal gconst25=((-1.0)*r01*x12752);
IkReal gconst26=(r00*x12752);
IkReal x12754=r02*r02;
IkReal x12755=(r22*sj13*sj14);
CheckValue<IkReal> x12760=IKPowWithIntegerCheck(((-1.0)+x12754),-1);
if(!x12760.valid){
continue;
}
IkReal x12756=x12760.value;
IkReal x12757=((1.0)*cj13*cj14*r22);
if((((1.0)+(((-1.0)*x12754)))) < -0.00001)
continue;
IkReal x12758=IKsqrt(((1.0)+(((-1.0)*x12754))));
IkReal x12759=(r02*x12756*x12758);
j16eval[0]=((IKabs(((((-1.0)*x12757))+x12755)))+(IKabs((((x12755*x12759))+(((-1.0)*x12757*x12759))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x12761=(cj13*cj14);
IkReal x12762=(gconst25*r21);
IkReal x12763=(gconst26*r20);
IkReal x12764=(sj13*sj14);
CheckValue<IkReal> x12765 = IKatan2WithCheck(IkReal(((((-1.0)*x12762*x12764))+((x12763*x12764))+(((-1.0)*x12761*x12763))+((x12761*x12762)))),IkReal((((r22*x12764))+(((-1.0)*r22*x12761)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12765.valid){
continue;
}
CheckValue<IkReal> x12766=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x12762*x12763))+(x12762*x12762)+(x12763*x12763))),-1);
if(!x12766.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x12765.value)+(((1.5707963267949)*(x12766.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x12767=IKcos(j16);
IkReal x12768=IKsin(j16);
IkReal x12769=(gconst25*r21);
IkReal x12770=((1.0)*cj13);
IkReal x12771=(gconst26*r10);
IkReal x12772=(gconst26*r20);
IkReal x12773=(gconst26*r00);
IkReal x12774=((1.0)*x12768);
IkReal x12775=((1.0)*x12767);
IkReal x12776=(gconst25*x12768);
IkReal x12777=(gconst25*x12775);
evalcond[0]=((((-1.0)*r22*x12774))+((x12767*x12772))+(((-1.0)*x12769*x12775)));
evalcond[1]=(((x12767*x12773))+(((-1.0)*r02*x12774))+(((-1.0)*r01*x12777)));
evalcond[2]=((((-1.0)*x12771*x12774))+(((-1.0)*r12*x12775))+((r11*x12776)));
evalcond[3]=((1.0)+((x12767*x12771))+(((-1.0)*r12*x12774))+(((-1.0)*r11*x12777)));
evalcond[4]=((((-1.0)*r22*x12775))+((x12768*x12769))+(((-1.0)*x12772*x12774))+((sj13*sj14))+(((-1.0)*cj14*x12770)));
evalcond[5]=(((r01*x12776))+(((-1.0)*sj14*x12770))+(((-1.0)*x12773*x12774))+(((-1.0)*r02*x12775))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x12778=(gconst25*r11);
IkReal x12779=(gconst26*r10);
CheckValue<IkReal> x12780 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x12779))+x12778)),IKFAST_ATAN2_MAGTHRESH);
if(!x12780.valid){
continue;
}
CheckValue<IkReal> x12781=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x12779*x12779)+(x12778*x12778)+(((-2.0)*x12778*x12779)))),-1);
if(!x12781.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x12780.value)+(((1.5707963267949)*(x12781.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x12782=IKcos(j16);
IkReal x12783=IKsin(j16);
IkReal x12784=(gconst25*r21);
IkReal x12785=((1.0)*cj13);
IkReal x12786=(gconst26*r10);
IkReal x12787=(gconst26*r20);
IkReal x12788=(gconst26*r00);
IkReal x12789=((1.0)*x12783);
IkReal x12790=((1.0)*x12782);
IkReal x12791=(gconst25*x12783);
IkReal x12792=(gconst25*x12790);
evalcond[0]=(((x12782*x12787))+(((-1.0)*r22*x12789))+(((-1.0)*x12784*x12790)));
evalcond[1]=(((x12782*x12788))+(((-1.0)*r01*x12792))+(((-1.0)*r02*x12789)));
evalcond[2]=((((-1.0)*x12786*x12789))+((r11*x12791))+(((-1.0)*r12*x12790)));
evalcond[3]=((1.0)+((x12782*x12786))+(((-1.0)*r11*x12792))+(((-1.0)*r12*x12789)));
evalcond[4]=((((-1.0)*r22*x12790))+((x12783*x12784))+(((-1.0)*cj14*x12785))+((sj13*sj14))+(((-1.0)*x12787*x12789)));
evalcond[5]=((((-1.0)*x12788*x12789))+(((-1.0)*r02*x12790))+((r01*x12791))+(((-1.0)*cj14*sj13))+(((-1.0)*sj14*x12785)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x12793=((1.0)*gconst25);
CheckValue<IkReal> x12794=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12793))+(((-1.0)*gconst26*r21)))),-1);
if(!x12794.valid){
continue;
}
CheckValue<IkReal> x12795 = IKatan2WithCheck(IkReal((((gconst26*r00))+(((-1.0)*r01*x12793)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x12795.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12794.value)))+(x12795.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x12796=IKcos(j16);
IkReal x12797=IKsin(j16);
IkReal x12798=(gconst25*r21);
IkReal x12799=((1.0)*cj13);
IkReal x12800=(gconst26*r10);
IkReal x12801=(gconst26*r20);
IkReal x12802=(gconst26*r00);
IkReal x12803=((1.0)*x12797);
IkReal x12804=((1.0)*x12796);
IkReal x12805=(gconst25*x12797);
IkReal x12806=(gconst25*x12804);
evalcond[0]=((((-1.0)*r22*x12803))+((x12796*x12801))+(((-1.0)*x12798*x12804)));
evalcond[1]=((((-1.0)*r02*x12803))+(((-1.0)*r01*x12806))+((x12796*x12802)));
evalcond[2]=((((-1.0)*x12800*x12803))+(((-1.0)*r12*x12804))+((r11*x12805)));
evalcond[3]=((1.0)+(((-1.0)*r11*x12806))+(((-1.0)*r12*x12803))+((x12796*x12800)));
evalcond[4]=(((x12797*x12798))+(((-1.0)*cj14*x12799))+(((-1.0)*r22*x12804))+(((-1.0)*x12801*x12803))+((sj13*sj14)));
evalcond[5]=((((-1.0)*r02*x12804))+((r01*x12805))+(((-1.0)*x12802*x12803))+(((-1.0)*sj14*x12799))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x12809 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x12809.valid){
continue;
}
IkReal x12807=((-1.0)*(x12809.value));
IkReal x12808=x12599;
sj12=0;
cj12=1.0;
j12=0;
sj17=gconst25;
cj17=gconst26;
j17=x12807;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
IkReal gconst24=x12807;
IkReal gconst25=((-1.0)*r01*x12808);
IkReal gconst26=(r00*x12808);
j16eval[0]=1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
CheckValue<IkReal> x12812 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x12812.valid){
continue;
}
IkReal x12810=((-1.0)*(x12812.value));
IkReal x12811=x12599;
sj12=0;
cj12=1.0;
j12=0;
sj17=gconst25;
cj17=gconst26;
j17=x12810;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
IkReal gconst24=x12810;
IkReal gconst25=((-1.0)*r01*x12811);
IkReal gconst26=(r00*x12811);
j16eval[0]=r12;
j16eval[1]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x12815 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x12815.valid){
continue;
}
IkReal x12813=((-1.0)*(x12815.value));
IkReal x12814=x12599;
sj12=0;
cj12=1.0;
j12=0;
sj17=gconst25;
cj17=gconst26;
j17=x12813;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
IkReal gconst24=x12813;
IkReal gconst25=((-1.0)*r01*x12814);
IkReal gconst26=(r00*x12814);
IkReal x12816=(cj13*sj14);
IkReal x12817=(cj14*sj13);
IkReal x12818=((1.0)*r12);
IkReal x12819=x12599;
IkReal x12820=(r02*r12*x12819);
j16eval[0]=((IKabs(((((-1.0)*x12817*x12818))+(((-1.0)*x12816*x12818)))))+(IKabs((((x12817*x12820))+((x12816*x12820))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x12821=(cj13*sj14);
IkReal x12822=(gconst26*r10);
IkReal x12823=((1.0)*r12);
IkReal x12824=(cj14*sj13);
IkReal x12825=((1.0)*gconst25*r11);
CheckValue<IkReal> x12826 = IKatan2WithCheck(IkReal(((((-1.0)*x12823*x12824))+(((-1.0)*x12821*x12823)))),IkReal((((x12822*x12824))+(((-1.0)*x12824*x12825))+((x12821*x12822))+(((-1.0)*x12821*x12825)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12826.valid){
continue;
}
CheckValue<IkReal> x12827=IKPowWithIntegerCheck(IKsign((((gconst26*r21))+((gconst25*r20)))),-1);
if(!x12827.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x12826.value)+(((1.5707963267949)*(x12827.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x12828=IKsin(j16);
IkReal x12829=IKcos(j16);
IkReal x12830=((1.0)*cj13);
IkReal x12831=(gconst26*r10);
IkReal x12832=((1.0)*x12828);
IkReal x12833=(gconst26*x12829);
IkReal x12834=(gconst26*x12828);
IkReal x12835=((1.0)*gconst25*x12829);
evalcond[0]=(((x12828*x12831))+(((-1.0)*gconst25*r11*x12832))+((r12*x12829)));
evalcond[1]=((((-1.0)*r22*x12832))+(((-1.0)*r21*x12835))+((r20*x12833)));
evalcond[2]=((((-1.0)*r01*x12835))+(((-1.0)*r02*x12832))+((r00*x12833)));
evalcond[3]=((1.0)+(((-1.0)*r12*x12832))+(((-1.0)*r11*x12835))+((x12829*x12831)));
evalcond[4]=(((r22*x12829))+((sj13*sj14))+((r20*x12834))+(((-1.0)*gconst25*r21*x12832))+(((-1.0)*cj14*x12830)));
evalcond[5]=((((-1.0)*sj14*x12830))+(((-1.0)*gconst25*r01*x12832))+((r00*x12834))+((r02*x12829))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x12836=(gconst25*r11);
IkReal x12837=(gconst26*r10);
CheckValue<IkReal> x12838 = IKatan2WithCheck(IkReal(r12),IkReal((x12836+(((-1.0)*x12837)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12838.valid){
continue;
}
CheckValue<IkReal> x12839=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x12836*x12836)+(x12837*x12837)+(((-2.0)*x12836*x12837)))),-1);
if(!x12839.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x12838.value)+(((1.5707963267949)*(x12839.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x12840=IKsin(j16);
IkReal x12841=IKcos(j16);
IkReal x12842=((1.0)*cj13);
IkReal x12843=(gconst26*r10);
IkReal x12844=((1.0)*x12840);
IkReal x12845=(gconst26*x12841);
IkReal x12846=(gconst26*x12840);
IkReal x12847=((1.0)*gconst25*x12841);
evalcond[0]=(((x12840*x12843))+((r12*x12841))+(((-1.0)*gconst25*r11*x12844)));
evalcond[1]=((((-1.0)*r22*x12844))+(((-1.0)*r21*x12847))+((r20*x12845)));
evalcond[2]=((((-1.0)*r02*x12844))+((r00*x12845))+(((-1.0)*r01*x12847)));
evalcond[3]=((1.0)+((x12841*x12843))+(((-1.0)*r11*x12847))+(((-1.0)*r12*x12844)));
evalcond[4]=(((r22*x12841))+(((-1.0)*cj14*x12842))+((sj13*sj14))+((r20*x12846))+(((-1.0)*gconst25*r21*x12844)));
evalcond[5]=(((r00*x12846))+(((-1.0)*sj14*x12842))+(((-1.0)*gconst25*r01*x12844))+((r02*x12841))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x12848=((1.0)*gconst25);
CheckValue<IkReal> x12849=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12848))+(((-1.0)*gconst26*r21)))),-1);
if(!x12849.valid){
continue;
}
CheckValue<IkReal> x12850 = IKatan2WithCheck(IkReal((((gconst26*r00))+(((-1.0)*r01*x12848)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x12850.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12849.value)))+(x12850.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x12851=IKsin(j16);
IkReal x12852=IKcos(j16);
IkReal x12853=((1.0)*cj13);
IkReal x12854=(gconst26*r10);
IkReal x12855=((1.0)*x12851);
IkReal x12856=(gconst26*x12852);
IkReal x12857=(gconst26*x12851);
IkReal x12858=((1.0)*gconst25*x12852);
evalcond[0]=(((r12*x12852))+((x12851*x12854))+(((-1.0)*gconst25*r11*x12855)));
evalcond[1]=((((-1.0)*r22*x12855))+(((-1.0)*r21*x12858))+((r20*x12856)));
evalcond[2]=(((r00*x12856))+(((-1.0)*r02*x12855))+(((-1.0)*r01*x12858)));
evalcond[3]=((1.0)+((x12852*x12854))+(((-1.0)*r12*x12855))+(((-1.0)*r11*x12858)));
evalcond[4]=(((r22*x12852))+(((-1.0)*cj14*x12853))+((sj13*sj14))+(((-1.0)*gconst25*r21*x12855))+((r20*x12857)));
evalcond[5]=(((r00*x12857))+(((-1.0)*sj14*x12853))+(((-1.0)*gconst25*r01*x12855))+((r02*x12852))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[2];
IkReal x12859=((-1.0)*r01);
CheckValue<IkReal> x12861 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x12861.valid){
continue;
}
IkReal x12860=((-1.0)*(x12861.value));
sj12=0;
cj12=1.0;
j12=0;
sj17=gconst25;
cj17=gconst26;
j17=x12860;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*pz*r00);
rxp1_0=(pz*r11);
rxp1_1=(pz*x12859);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal gconst24=x12860;
IkReal gconst25=x12859;
IkReal gconst26=r00;
IkReal x12862=(r00*r10);
IkReal x12863=((1.0)*sj15);
IkReal x12864=(r01*r11);
j16eval[0]=((((-1.0)*x12863*x12864))+(((-1.0)*x12862*x12863)));
j16eval[1]=(x12862+x12864);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x12865=((-1.0)*r01);
CheckValue<IkReal> x12867 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x12867.valid){
continue;
}
IkReal x12866=((-1.0)*(x12867.value));
sj12=0;
cj12=1.0;
j12=0;
sj17=gconst25;
cj17=gconst26;
j17=x12866;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*pz*r00);
rxp1_0=(pz*r11);
rxp1_1=(pz*x12865);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal gconst24=x12866;
IkReal gconst25=x12865;
IkReal gconst26=r00;
IkReal x12868=(r01*r11);
IkReal x12869=((1.0)*cj15);
IkReal x12870=(r00*r10);
j16eval[0]=((((-1.0)*x12869*x12870))+(((-1.0)*x12868*x12869)));
j16eval[1]=(x12868+x12870);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
IkReal x12871=((-1.0)*r01);
CheckValue<IkReal> x12873 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x12873.valid){
continue;
}
IkReal x12872=((-1.0)*(x12873.value));
sj12=0;
cj12=1.0;
j12=0;
sj17=gconst25;
cj17=gconst26;
j17=x12872;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*pz*r00);
rxp1_0=(pz*r11);
rxp1_1=(pz*x12871);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal gconst24=x12872;
IkReal gconst25=x12871;
IkReal gconst26=r00;
IkReal x12874=((1.0)*cj15);
j16eval[0]=((((-1.0)*r01*r11*x12874))+(((-1.0)*r00*r10*x12874)));
j16eval[1]=r22;
j16eval[2]=sj15;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x12875=((1.0)*r10);
CheckValue<IkReal> x12876=IKPowWithIntegerCheck((((cj15*gconst25*r11))+(((-1.0)*cj15*gconst26*x12875))),-1);
if(!x12876.valid){
continue;
}
CheckValue<IkReal> x12877=IKPowWithIntegerCheck(r22,-1);
if(!x12877.valid){
continue;
}
CheckValue<IkReal> x12878=IKPowWithIntegerCheck(sj15,-1);
if(!x12878.valid){
continue;
}
if( IKabs(((x12876.value)*(((((-1.0)*gconst25*sj15*x12875))+(((-1.0)*gconst26*r11*sj15)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12877.value)*(x12878.value)*(((((-1.0)*cj13*cj14))+((sj13*sj14)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12876.value)*(((((-1.0)*gconst25*sj15*x12875))+(((-1.0)*gconst26*r11*sj15))))))+IKsqr(((x12877.value)*(x12878.value)*(((((-1.0)*cj13*cj14))+((sj13*sj14))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x12876.value)*(((((-1.0)*gconst25*sj15*x12875))+(((-1.0)*gconst26*r11*sj15))))), ((x12877.value)*(x12878.value)*(((((-1.0)*cj13*cj14))+((sj13*sj14))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x12879=IKcos(j16);
IkReal x12880=IKsin(j16);
IkReal x12881=((1.0)*gconst25);
IkReal x12882=(cj15*r10);
IkReal x12883=(cj13*cj14);
IkReal x12884=((1.0)*gconst26);
IkReal x12885=(cj15*r11);
IkReal x12886=(cj15*r00);
IkReal x12887=(gconst25*sj15);
IkReal x12888=((1.0)*sj14);
IkReal x12889=(cj15*r01);
IkReal x12890=(gconst26*sj15);
IkReal x12891=((1.0)*cj14*sj13);
IkReal x12892=(cj13*x12888);
IkReal x12893=(gconst26*x12879);
IkReal x12894=(sj15*x12880);
IkReal x12895=(gconst25*x12880);
IkReal x12896=((1.0)*r22*x12879);
IkReal x12897=(x12892+x12891);
evalcond[0]=((-1.0)*r22*x12880);
evalcond[1]=(((r00*x12893))+(((-1.0)*r01*x12879*x12881)));
evalcond[2]=((1.0)+(((-1.0)*r11*x12879*x12881))+((r10*x12893)));
evalcond[3]=((((-1.0)*x12883))+((sj13*sj14))+(((-1.0)*sj15*x12896)));
evalcond[4]=((((-1.0)*x12897))+(((-1.0)*cj15*x12896)));
evalcond[5]=(((x12885*x12895))+(((-1.0)*x12880*x12882*x12884))+((r10*x12887))+((r11*x12890)));
evalcond[6]=((((-1.0)*r10*x12884*x12894))+(((-1.0)*x12884*x12885))+(((-1.0)*x12881*x12882))+((r11*x12880*x12887)));
evalcond[7]=(x12883+((r01*x12890))+((r00*x12887))+(((-1.0)*sj13*x12888))+(((-1.0)*x12880*x12884*x12886))+((x12889*x12895)));
evalcond[8]=(((r01*x12880*x12887))+(((-1.0)*x12884*x12889))+(((-1.0)*r00*x12884*x12894))+(((-1.0)*x12881*x12886))+(((-1.0)*x12897)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x12898=(gconst26*r10);
IkReal x12899=((1.0)*gconst25);
CheckValue<IkReal> x12900=IKPowWithIntegerCheck((((cj15*gconst25*r11))+(((-1.0)*cj15*x12898))),-1);
if(!x12900.valid){
continue;
}
CheckValue<IkReal> x12901=IKPowWithIntegerCheck((x12898+(((-1.0)*r11*x12899))),-1);
if(!x12901.valid){
continue;
}
if( IKabs(((x12900.value)*(((((-1.0)*r10*sj15*x12899))+(((-1.0)*gconst26*r11*sj15)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x12901.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12900.value)*(((((-1.0)*r10*sj15*x12899))+(((-1.0)*gconst26*r11*sj15))))))+IKsqr(((-1.0)*(x12901.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x12900.value)*(((((-1.0)*r10*sj15*x12899))+(((-1.0)*gconst26*r11*sj15))))), ((-1.0)*(x12901.value)));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x12902=IKcos(j16);
IkReal x12903=IKsin(j16);
IkReal x12904=((1.0)*gconst25);
IkReal x12905=(cj15*r10);
IkReal x12906=(cj13*cj14);
IkReal x12907=((1.0)*gconst26);
IkReal x12908=(cj15*r11);
IkReal x12909=(cj15*r00);
IkReal x12910=(gconst25*sj15);
IkReal x12911=((1.0)*sj14);
IkReal x12912=(cj15*r01);
IkReal x12913=(gconst26*sj15);
IkReal x12914=((1.0)*cj14*sj13);
IkReal x12915=(cj13*x12911);
IkReal x12916=(gconst26*x12902);
IkReal x12917=(sj15*x12903);
IkReal x12918=(gconst25*x12903);
IkReal x12919=((1.0)*r22*x12902);
IkReal x12920=(x12914+x12915);
evalcond[0]=((-1.0)*r22*x12903);
evalcond[1]=(((r00*x12916))+(((-1.0)*r01*x12902*x12904)));
evalcond[2]=((1.0)+(((-1.0)*r11*x12902*x12904))+((r10*x12916)));
evalcond[3]=((((-1.0)*x12906))+(((-1.0)*sj15*x12919))+((sj13*sj14)));
evalcond[4]=((((-1.0)*cj15*x12919))+(((-1.0)*x12920)));
evalcond[5]=(((x12908*x12918))+(((-1.0)*x12903*x12905*x12907))+((r10*x12910))+((r11*x12913)));
evalcond[6]=((((-1.0)*r10*x12907*x12917))+(((-1.0)*x12907*x12908))+(((-1.0)*x12904*x12905))+((r11*x12903*x12910)));
evalcond[7]=(x12906+((r00*x12910))+(((-1.0)*x12903*x12907*x12909))+(((-1.0)*sj13*x12911))+((x12912*x12918))+((r01*x12913)));
evalcond[8]=(((r01*x12903*x12910))+(((-1.0)*r00*x12907*x12917))+(((-1.0)*x12907*x12912))+(((-1.0)*x12904*x12909))+(((-1.0)*x12920)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x12921=(gconst25*r11);
IkReal x12922=(gconst26*r10);
CheckValue<IkReal> x12923=IKPowWithIntegerCheck((((sj15*x12921))+(((-1.0)*sj15*x12922))),-1);
if(!x12923.valid){
continue;
}
CheckValue<IkReal> x12924=IKPowWithIntegerCheck((x12922+(((-1.0)*x12921))),-1);
if(!x12924.valid){
continue;
}
if( IKabs(((x12923.value)*((((cj15*gconst25*r10))+((cj15*gconst26*r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x12924.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12923.value)*((((cj15*gconst25*r10))+((cj15*gconst26*r11))))))+IKsqr(((-1.0)*(x12924.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x12923.value)*((((cj15*gconst25*r10))+((cj15*gconst26*r11))))), ((-1.0)*(x12924.value)));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x12925=IKcos(j16);
IkReal x12926=IKsin(j16);
IkReal x12927=((1.0)*gconst25);
IkReal x12928=(cj15*r10);
IkReal x12929=(cj13*cj14);
IkReal x12930=((1.0)*gconst26);
IkReal x12931=(cj15*r11);
IkReal x12932=(cj15*r00);
IkReal x12933=(gconst25*sj15);
IkReal x12934=((1.0)*sj14);
IkReal x12935=(cj15*r01);
IkReal x12936=(gconst26*sj15);
IkReal x12937=((1.0)*cj14*sj13);
IkReal x12938=(cj13*x12934);
IkReal x12939=(gconst26*x12925);
IkReal x12940=(sj15*x12926);
IkReal x12941=(gconst25*x12926);
IkReal x12942=((1.0)*r22*x12925);
IkReal x12943=(x12937+x12938);
evalcond[0]=((-1.0)*r22*x12926);
evalcond[1]=((((-1.0)*r01*x12925*x12927))+((r00*x12939)));
evalcond[2]=((1.0)+(((-1.0)*r11*x12925*x12927))+((r10*x12939)));
evalcond[3]=((((-1.0)*sj15*x12942))+(((-1.0)*x12929))+((sj13*sj14)));
evalcond[4]=((((-1.0)*cj15*x12942))+(((-1.0)*x12943)));
evalcond[5]=((((-1.0)*x12926*x12928*x12930))+((r11*x12936))+((r10*x12933))+((x12931*x12941)));
evalcond[6]=(((r11*x12926*x12933))+(((-1.0)*x12927*x12928))+(((-1.0)*x12930*x12931))+(((-1.0)*r10*x12930*x12940)));
evalcond[7]=(x12929+(((-1.0)*sj13*x12934))+((x12935*x12941))+(((-1.0)*x12926*x12930*x12932))+((r01*x12936))+((r00*x12933)));
evalcond[8]=((((-1.0)*r00*x12930*x12940))+(((-1.0)*x12927*x12932))+((r01*x12926*x12933))+(((-1.0)*x12930*x12935))+(((-1.0)*x12943)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j16]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x12944=gconst25*gconst25;
IkReal x12945=gconst26*gconst26;
IkReal x12946=(gconst26*r21);
IkReal x12947=(cj15*r22);
IkReal x12948=(cj15*r11);
IkReal x12949=((1.0)*r20);
IkReal x12950=(gconst26*r11);
IkReal x12951=((1.0)*gconst25*r10);
IkReal x12952=(r21*x12944);
CheckValue<IkReal> x12953=IKPowWithIntegerCheck(IKsign((((r10*r20*sj15*x12945))+(((-1.0)*sj15*x12946*x12951))+(((-1.0)*gconst25*sj15*x12949*x12950))+((r12*r22*sj15))+((r11*sj15*x12952)))),-1);
if(!x12953.valid){
continue;
}
CheckValue<IkReal> x12954 = IKatan2WithCheck(IkReal((((gconst25*x12946*x12948))+(((-1.0)*x12945*x12948*x12949))+(((-1.0)*cj15*gconst25*gconst26*r10*x12949))+((cj15*r10*x12952)))),IkReal(((((-1.0)*x12947*x12951))+(((-1.0)*x12947*x12950)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12954.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12953.value)))+(x12954.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x12955=IKcos(j16);
IkReal x12956=IKsin(j16);
IkReal x12957=((1.0)*cj15);
IkReal x12958=(gconst25*r10);
IkReal x12959=(gconst25*r20);
IkReal x12960=(gconst26*r11);
IkReal x12961=(gconst26*r10);
IkReal x12962=(gconst26*sj15);
IkReal x12963=((1.0)*sj15);
IkReal x12964=(cj13*cj14);
IkReal x12965=(gconst25*r00);
IkReal x12966=((1.0)*sj14);
IkReal x12967=((1.0)*cj14*sj13);
IkReal x12968=(cj13*x12966);
IkReal x12969=(r12*x12955);
IkReal x12970=(r02*x12955);
IkReal x12971=((1.0)*x12956);
IkReal x12972=(r22*x12955);
IkReal x12973=(gconst25*x12956);
IkReal x12974=(gconst26*x12955);
IkReal x12975=(gconst26*x12956);
IkReal x12976=((1.0)*gconst25*x12955);
IkReal x12977=(x12968+x12967);
evalcond[0]=(((r20*x12974))+(((-1.0)*r21*x12976))+(((-1.0)*r22*x12971)));
evalcond[1]=((((-1.0)*r01*x12976))+((r00*x12974))+(((-1.0)*r02*x12971)));
evalcond[2]=((1.0)+((x12955*x12961))+(((-1.0)*r11*x12976))+(((-1.0)*r12*x12971)));
evalcond[3]=(((cj15*r11*x12973))+((sj15*x12960))+((sj15*x12958))+(((-1.0)*x12957*x12969))+(((-1.0)*x12956*x12957*x12961)));
evalcond[4]=((((-1.0)*x12957*x12958))+(((-1.0)*x12956*x12961*x12963))+((r11*sj15*x12973))+(((-1.0)*x12957*x12960))+(((-1.0)*x12963*x12969)));
evalcond[5]=(x12964+((sj15*x12965))+((r01*x12962))+(((-1.0)*r00*x12957*x12975))+(((-1.0)*x12957*x12970))+((cj15*r01*x12973))+(((-1.0)*sj13*x12966)));
evalcond[6]=((((-1.0)*x12977))+(((-1.0)*r20*x12957*x12975))+((sj15*x12959))+(((-1.0)*x12957*x12972))+((cj15*r21*x12973))+((r21*x12962)));
evalcond[7]=((((-1.0)*x12957*x12959))+((r21*sj15*x12973))+(((-1.0)*r20*x12962*x12971))+(((-1.0)*gconst26*r21*x12957))+(((-1.0)*x12964))+((sj13*sj14))+(((-1.0)*x12963*x12972)));
evalcond[8]=(((r01*sj15*x12973))+(((-1.0)*x12977))+(((-1.0)*gconst26*r01*x12957))+(((-1.0)*x12957*x12965))+(((-1.0)*r00*x12962*x12971))+(((-1.0)*x12963*x12970)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x12978=gconst25*gconst25;
IkReal x12979=gconst26*gconst26;
IkReal x12980=(r20*sj15);
IkReal x12981=(gconst25*r10);
IkReal x12982=(r22*sj15);
IkReal x12983=((1.0)*sj15);
IkReal x12984=(cj15*r11);
IkReal x12985=(gconst26*r21);
IkReal x12986=(r21*x12978);
CheckValue<IkReal> x12987=IKPowWithIntegerCheck(IKsign((((cj15*r12*r22))+((x12984*x12986))+((cj15*r10*r20*x12979))+(((-1.0)*cj15*x12981*x12985))+(((-1.0)*gconst25*gconst26*r20*x12984)))),-1);
if(!x12987.valid){
continue;
}
CheckValue<IkReal> x12988 = IKatan2WithCheck(IkReal((((gconst26*x12980*x12981))+((r11*x12979*x12980))+(((-1.0)*gconst25*r11*x12983*x12985))+(((-1.0)*r10*x12983*x12986)))),IkReal((((x12981*x12982))+((gconst26*r11*x12982)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12988.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12987.value)))+(x12988.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x12989=IKcos(j16);
IkReal x12990=IKsin(j16);
IkReal x12991=((1.0)*cj15);
IkReal x12992=(gconst25*r10);
IkReal x12993=(gconst25*r20);
IkReal x12994=(gconst26*r11);
IkReal x12995=(gconst26*r10);
IkReal x12996=(gconst26*sj15);
IkReal x12997=((1.0)*sj15);
IkReal x12998=(cj13*cj14);
IkReal x12999=(gconst25*r00);
IkReal x13000=((1.0)*sj14);
IkReal x13001=((1.0)*cj14*sj13);
IkReal x13002=(cj13*x13000);
IkReal x13003=(r12*x12989);
IkReal x13004=(r02*x12989);
IkReal x13005=((1.0)*x12990);
IkReal x13006=(r22*x12989);
IkReal x13007=(gconst25*x12990);
IkReal x13008=(gconst26*x12989);
IkReal x13009=(gconst26*x12990);
IkReal x13010=((1.0)*gconst25*x12989);
IkReal x13011=(x13002+x13001);
evalcond[0]=((((-1.0)*r22*x13005))+((r20*x13008))+(((-1.0)*r21*x13010)));
evalcond[1]=(((r00*x13008))+(((-1.0)*r02*x13005))+(((-1.0)*r01*x13010)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13005))+((x12989*x12995))+(((-1.0)*r11*x13010)));
evalcond[3]=(((sj15*x12994))+((sj15*x12992))+(((-1.0)*x12990*x12991*x12995))+(((-1.0)*x12991*x13003))+((cj15*r11*x13007)));
evalcond[4]=(((r11*sj15*x13007))+(((-1.0)*x12990*x12995*x12997))+(((-1.0)*x12991*x12994))+(((-1.0)*x12991*x12992))+(((-1.0)*x12997*x13003)));
evalcond[5]=(x12998+(((-1.0)*sj13*x13000))+((r01*x12996))+((sj15*x12999))+((cj15*r01*x13007))+(((-1.0)*x12991*x13004))+(((-1.0)*r00*x12991*x13009)));
evalcond[6]=((((-1.0)*x13011))+((sj15*x12993))+(((-1.0)*r20*x12991*x13009))+((r21*x12996))+(((-1.0)*x12991*x13006))+((cj15*r21*x13007)));
evalcond[7]=(((r21*sj15*x13007))+(((-1.0)*r20*x12996*x13005))+(((-1.0)*x12991*x12993))+((sj13*sj14))+(((-1.0)*gconst26*r21*x12991))+(((-1.0)*x12998))+(((-1.0)*x12997*x13006)));
evalcond[8]=((((-1.0)*gconst26*r01*x12991))+(((-1.0)*x13011))+(((-1.0)*r00*x12996*x13005))+(((-1.0)*x12991*x12999))+((r01*sj15*x13007))+(((-1.0)*x12997*x13004)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x13012=((1.0)*gconst25);
CheckValue<IkReal> x13013=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x13012))+(((-1.0)*gconst26*r21)))),-1);
if(!x13013.valid){
continue;
}
CheckValue<IkReal> x13014 = IKatan2WithCheck(IkReal((((gconst26*r00))+(((-1.0)*r01*x13012)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x13014.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13013.value)))+(x13014.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x13015=IKcos(j16);
IkReal x13016=IKsin(j16);
IkReal x13017=((1.0)*cj15);
IkReal x13018=(gconst25*r10);
IkReal x13019=(gconst25*r20);
IkReal x13020=(gconst26*r11);
IkReal x13021=(gconst26*r10);
IkReal x13022=(gconst26*sj15);
IkReal x13023=((1.0)*sj15);
IkReal x13024=(cj13*cj14);
IkReal x13025=(gconst25*r00);
IkReal x13026=((1.0)*sj14);
IkReal x13027=((1.0)*cj14*sj13);
IkReal x13028=(cj13*x13026);
IkReal x13029=(r12*x13015);
IkReal x13030=(r02*x13015);
IkReal x13031=((1.0)*x13016);
IkReal x13032=(r22*x13015);
IkReal x13033=(gconst25*x13016);
IkReal x13034=(gconst26*x13015);
IkReal x13035=(gconst26*x13016);
IkReal x13036=((1.0)*gconst25*x13015);
IkReal x13037=(x13027+x13028);
evalcond[0]=((((-1.0)*r22*x13031))+((r20*x13034))+(((-1.0)*r21*x13036)));
evalcond[1]=((((-1.0)*r01*x13036))+(((-1.0)*r02*x13031))+((r00*x13034)));
evalcond[2]=((1.0)+(((-1.0)*r11*x13036))+(((-1.0)*r12*x13031))+((x13015*x13021)));
evalcond[3]=((((-1.0)*x13016*x13017*x13021))+((cj15*r11*x13033))+((sj15*x13020))+(((-1.0)*x13017*x13029))+((sj15*x13018)));
evalcond[4]=(((r11*sj15*x13033))+(((-1.0)*x13023*x13029))+(((-1.0)*x13017*x13018))+(((-1.0)*x13017*x13020))+(((-1.0)*x13016*x13021*x13023)));
evalcond[5]=(((r01*x13022))+(((-1.0)*sj13*x13026))+(((-1.0)*x13017*x13030))+x13024+(((-1.0)*r00*x13017*x13035))+((sj15*x13025))+((cj15*r01*x13033)));
evalcond[6]=(((r21*x13022))+(((-1.0)*x13017*x13032))+(((-1.0)*r20*x13017*x13035))+((cj15*r21*x13033))+(((-1.0)*x13037))+((sj15*x13019)));
evalcond[7]=((((-1.0)*x13023*x13032))+(((-1.0)*gconst26*r21*x13017))+(((-1.0)*x13024))+((sj13*sj14))+((r21*sj15*x13033))+(((-1.0)*r20*x13022*x13031))+(((-1.0)*x13017*x13019)));
evalcond[8]=((((-1.0)*r00*x13022*x13031))+(((-1.0)*x13023*x13030))+((r01*sj15*x13033))+(((-1.0)*gconst26*r01*x13017))+(((-1.0)*x13037))+(((-1.0)*x13017*x13025)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13039 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13039)==0){
continue;
}
IkReal x13038=pow(x13039,-0.5);
CheckValue<IkReal> x13040 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13040.valid){
continue;
}
IkReal gconst27=((3.14159265358979)+(((-1.0)*(x13040.value))));
IkReal gconst28=((1.0)*r01*x13038);
IkReal gconst29=((-1.0)*r00*x13038);
CheckValue<IkReal> x13041 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13041.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13041.value)+j17)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[4];
CheckValue<IkReal> x13044 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13044.valid){
continue;
}
IkReal x13042=((1.0)*(x13044.value));
IkReal x13043=x13038;
sj12=0;
cj12=1.0;
j12=0;
sj17=gconst28;
cj17=gconst29;
j17=((3.14159265)+(((-1.0)*x13042)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13042)));
IkReal gconst28=((1.0)*r01*x13043);
IkReal gconst29=((-1.0)*r00*x13043);
j16eval[0]=0;
j16eval[1]=0;
j16eval[2]=r22;
j16eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  || IKabs(j16eval[3]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x13047 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13047.valid){
continue;
}
IkReal x13045=((1.0)*(x13047.value));
IkReal x13046=x13038;
sj12=0;
cj12=1.0;
j12=0;
sj17=gconst28;
cj17=gconst29;
j17=((3.14159265)+(((-1.0)*x13045)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13045)));
IkReal gconst28=((1.0)*r01*x13046);
IkReal gconst29=((-1.0)*r00*x13046);
j16eval[0]=1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x13048=gconst29*gconst29;
IkReal x13049=gconst28*gconst28;
IkReal x13050=((1.0)*r10);
IkReal x13051=(cj15*r11);
IkReal x13052=(r20*sj15);
IkReal x13053=(gconst28*gconst29);
IkReal x13054=(r22*sj15);
IkReal x13055=(r21*x13049);
CheckValue<IkReal> x13056=IKPowWithIntegerCheck(IKsign((((cj15*r10*r20*x13048))+(((-1.0)*cj15*r21*x13050*x13053))+(((-1.0)*r20*x13051*x13053))+((cj15*r12*r22))+((x13051*x13055)))),-1);
if(!x13056.valid){
continue;
}
CheckValue<IkReal> x13057 = IKatan2WithCheck(IkReal(((((-1.0)*sj15*x13050*x13055))+((r11*x13048*x13052))+((r10*x13052*x13053))+(((-1.0)*r11*r21*sj15*x13053)))),IkReal((((gconst28*r10*x13054))+((gconst29*r11*x13054)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13057.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13056.value)))+(x13057.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x13058=IKcos(j16);
IkReal x13059=IKsin(j16);
IkReal x13060=(gconst28*r11);
IkReal x13061=(r00*sj15);
IkReal x13062=(r21*sj15);
IkReal x13063=(r20*sj15);
IkReal x13064=(r01*sj15);
IkReal x13065=(cj13*cj14);
IkReal x13066=((1.0)*sj13);
IkReal x13067=(r10*sj15);
IkReal x13068=(cj14*x13066);
IkReal x13069=((1.0)*cj13*sj14);
IkReal x13070=((1.0)*x13058);
IkReal x13071=(gconst28*x13059);
IkReal x13072=((1.0)*cj15*gconst29);
IkReal x13073=((1.0)*x13059);
IkReal x13074=(gconst29*x13058);
IkReal x13075=((1.0)*cj15*gconst28);
IkReal x13076=(gconst29*x13073);
IkReal x13077=(x13069+x13068);
evalcond[0]=((((-1.0)*gconst28*r21*x13070))+((r20*x13074))+(((-1.0)*r22*x13073)));
evalcond[1]=((((-1.0)*r02*x13073))+((r00*x13074))+(((-1.0)*gconst28*r01*x13070)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13073))+((r10*x13074))+(((-1.0)*x13060*x13070)));
evalcond[3]=(((gconst28*x13067))+((cj15*x13059*x13060))+((gconst29*r11*sj15))+(((-1.0)*r10*x13059*x13072))+(((-1.0)*cj15*r12*x13070)));
evalcond[4]=((((-1.0)*r11*x13072))+(((-1.0)*r10*x13075))+(((-1.0)*x13067*x13076))+((sj15*x13059*x13060))+(((-1.0)*r12*sj15*x13070)));
evalcond[5]=(((gconst29*x13064))+((gconst28*x13061))+(((-1.0)*cj15*r02*x13070))+(((-1.0)*sj14*x13066))+((cj15*r01*x13071))+x13065+(((-1.0)*r00*x13059*x13072)));
evalcond[6]=(((gconst29*x13062))+((gconst28*x13063))+((cj15*r21*x13071))+(((-1.0)*r20*x13059*x13072))+(((-1.0)*x13077))+(((-1.0)*cj15*r22*x13070)));
evalcond[7]=((((-1.0)*x13063*x13076))+(((-1.0)*x13065))+((sj13*sj14))+(((-1.0)*r20*x13075))+(((-1.0)*r21*x13072))+(((-1.0)*r22*sj15*x13070))+((x13062*x13071)));
evalcond[8]=(((x13064*x13071))+(((-1.0)*r00*x13075))+(((-1.0)*r01*x13072))+(((-1.0)*x13077))+(((-1.0)*x13061*x13076))+(((-1.0)*r02*sj15*x13070)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x13078=((1.0)*gconst28);
CheckValue<IkReal> x13079 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x13078))+((gconst29*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x13079.valid){
continue;
}
CheckValue<IkReal> x13080=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x13078))+(((-1.0)*gconst29*r21)))),-1);
if(!x13080.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x13079.value)+(((1.5707963267949)*(x13080.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x13081=IKcos(j16);
IkReal x13082=IKsin(j16);
IkReal x13083=(gconst28*r11);
IkReal x13084=(r00*sj15);
IkReal x13085=(r21*sj15);
IkReal x13086=(r20*sj15);
IkReal x13087=(r01*sj15);
IkReal x13088=(cj13*cj14);
IkReal x13089=((1.0)*sj13);
IkReal x13090=(r10*sj15);
IkReal x13091=(cj14*x13089);
IkReal x13092=((1.0)*cj13*sj14);
IkReal x13093=((1.0)*x13081);
IkReal x13094=(gconst28*x13082);
IkReal x13095=((1.0)*cj15*gconst29);
IkReal x13096=((1.0)*x13082);
IkReal x13097=(gconst29*x13081);
IkReal x13098=((1.0)*cj15*gconst28);
IkReal x13099=(gconst29*x13096);
IkReal x13100=(x13091+x13092);
evalcond[0]=((((-1.0)*r22*x13096))+(((-1.0)*gconst28*r21*x13093))+((r20*x13097)));
evalcond[1]=((((-1.0)*gconst28*r01*x13093))+((r00*x13097))+(((-1.0)*r02*x13096)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13096))+(((-1.0)*x13083*x13093))+((r10*x13097)));
evalcond[3]=(((gconst29*r11*sj15))+(((-1.0)*r10*x13082*x13095))+((gconst28*x13090))+(((-1.0)*cj15*r12*x13093))+((cj15*x13082*x13083)));
evalcond[4]=(((sj15*x13082*x13083))+(((-1.0)*r10*x13098))+(((-1.0)*x13090*x13099))+(((-1.0)*r12*sj15*x13093))+(((-1.0)*r11*x13095)));
evalcond[5]=(((gconst29*x13087))+((gconst28*x13084))+(((-1.0)*sj14*x13089))+x13088+(((-1.0)*r00*x13082*x13095))+(((-1.0)*cj15*r02*x13093))+((cj15*r01*x13094)));
evalcond[6]=((((-1.0)*r20*x13082*x13095))+((gconst29*x13085))+((gconst28*x13086))+(((-1.0)*cj15*r22*x13093))+(((-1.0)*x13100))+((cj15*r21*x13094)));
evalcond[7]=((((-1.0)*r20*x13098))+(((-1.0)*x13086*x13099))+((x13085*x13094))+(((-1.0)*r22*sj15*x13093))+((sj13*sj14))+(((-1.0)*x13088))+(((-1.0)*r21*x13095)));
evalcond[8]=((((-1.0)*r02*sj15*x13093))+(((-1.0)*x13084*x13099))+(((-1.0)*r01*x13095))+(((-1.0)*r00*x13098))+(((-1.0)*x13100))+((x13087*x13094)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x13101 = IKatan2WithCheck(IkReal(((((-1.0)*gconst28*r21))+((gconst29*r20)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x13101.valid){
continue;
}
CheckValue<IkReal> x13102=IKPowWithIntegerCheck(IKsign((((gconst29*r01))+((gconst28*r00)))),-1);
if(!x13102.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x13101.value)+(((1.5707963267949)*(x13102.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x13103=IKcos(j16);
IkReal x13104=IKsin(j16);
IkReal x13105=(gconst28*r11);
IkReal x13106=(r00*sj15);
IkReal x13107=(r21*sj15);
IkReal x13108=(r20*sj15);
IkReal x13109=(r01*sj15);
IkReal x13110=(cj13*cj14);
IkReal x13111=((1.0)*sj13);
IkReal x13112=(r10*sj15);
IkReal x13113=(cj14*x13111);
IkReal x13114=((1.0)*cj13*sj14);
IkReal x13115=((1.0)*x13103);
IkReal x13116=(gconst28*x13104);
IkReal x13117=((1.0)*cj15*gconst29);
IkReal x13118=((1.0)*x13104);
IkReal x13119=(gconst29*x13103);
IkReal x13120=((1.0)*cj15*gconst28);
IkReal x13121=(gconst29*x13118);
IkReal x13122=(x13113+x13114);
evalcond[0]=((((-1.0)*gconst28*r21*x13115))+((r20*x13119))+(((-1.0)*r22*x13118)));
evalcond[1]=((((-1.0)*gconst28*r01*x13115))+(((-1.0)*r02*x13118))+((r00*x13119)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13118))+(((-1.0)*x13105*x13115))+((r10*x13119)));
evalcond[3]=(((gconst29*r11*sj15))+(((-1.0)*cj15*r12*x13115))+(((-1.0)*r10*x13104*x13117))+((cj15*x13104*x13105))+((gconst28*x13112)));
evalcond[4]=((((-1.0)*r11*x13117))+((sj15*x13104*x13105))+(((-1.0)*x13112*x13121))+(((-1.0)*r12*sj15*x13115))+(((-1.0)*r10*x13120)));
evalcond[5]=(((gconst29*x13109))+((gconst28*x13106))+(((-1.0)*sj14*x13111))+x13110+(((-1.0)*r00*x13104*x13117))+(((-1.0)*cj15*r02*x13115))+((cj15*r01*x13116)));
evalcond[6]=(((gconst29*x13107))+((gconst28*x13108))+(((-1.0)*x13122))+((cj15*r21*x13116))+(((-1.0)*cj15*r22*x13115))+(((-1.0)*r20*x13104*x13117)));
evalcond[7]=(((x13107*x13116))+(((-1.0)*r20*x13120))+(((-1.0)*x13110))+(((-1.0)*r22*sj15*x13115))+((sj13*sj14))+(((-1.0)*x13108*x13121))+(((-1.0)*r21*x13117)));
evalcond[8]=((((-1.0)*r00*x13120))+((x13109*x13116))+(((-1.0)*x13106*x13121))+(((-1.0)*r01*x13117))+(((-1.0)*r02*sj15*x13115))+(((-1.0)*x13122)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[2];
IkReal x13123=((-1.0)*px);
sj12=0;
cj12=1.0;
j12=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13123);
rxp1_1=(px*r21);
rxp1_2=(r11*x13123);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x13124=(r11*sj17);
IkReal x13125=(cj17*r10);
j16eval[0]=(((sj15*x13124))+(((-1.0)*sj15*x13125)));
j16eval[1]=(x13125+(((-1.0)*x13124)));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x13126=((-1.0)*px);
sj12=0;
cj12=1.0;
j12=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13126);
rxp1_1=(px*r21);
rxp1_2=(r11*x13126);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x13127=(cj17*r10);
IkReal x13128=(r11*sj17);
j16eval[0]=((((-1.0)*cj15*x13127))+((cj15*x13128)));
j16eval[1]=(x13127+(((-1.0)*x13128)));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
IkReal x13129=((-1.0)*px);
sj12=0;
cj12=1.0;
j12=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13129);
rxp1_1=(px*r21);
rxp1_2=(r11*x13129);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j16eval[0]=((((-1.0)*cj15*cj17*r10))+((cj15*r11*sj17)));
j16eval[1]=cj15;
j16eval[2]=r02;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j15))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[2];
IkReal x13130=((-1.0)*px);
sj12=0;
cj12=1.0;
j12=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13130);
rxp1_1=(px*r21);
rxp1_2=(r11*x13130);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj15=0;
cj15=1.0;
j15=0;
j16eval[0]=((((-1.0)*cj17*r20))+((r21*sj17)));
j16eval[1]=(((cj17*r10))+(((-1.0)*r11*sj17)));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x13131=((-1.0)*px);
sj12=0;
cj12=1.0;
j12=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13131);
rxp1_1=(px*r21);
rxp1_2=(r11*x13131);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj15=0;
cj15=1.0;
j15=0;
j16eval[0]=((((-1.0)*cj17*r20))+((r21*sj17)));
j16eval[1]=r02;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x13132=IKPowWithIntegerCheck(((((-1.0)*cj17*r20))+((r21*sj17))),-1);
if(!x13132.valid){
continue;
}
CheckValue<IkReal> x13133=IKPowWithIntegerCheck(r02,-1);
if(!x13133.valid){
continue;
}
if( IKabs(((x13132.value)*((((cj14*sj13))+((cj13*sj14)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13133.value)*(((((-1.0)*sj13*sj14))+((cj13*cj14)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13132.value)*((((cj14*sj13))+((cj13*sj14))))))+IKsqr(((x13133.value)*(((((-1.0)*sj13*sj14))+((cj13*cj14))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x13132.value)*((((cj14*sj13))+((cj13*sj14))))), ((x13133.value)*(((((-1.0)*sj13*sj14))+((cj13*cj14))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x13134=IKcos(j16);
IkReal x13135=IKsin(j16);
IkReal x13136=(r21*sj17);
IkReal x13137=((1.0)*sj14);
IkReal x13138=(r11*sj17);
IkReal x13139=((1.0)*x13134);
IkReal x13140=(cj17*x13134);
IkReal x13141=((1.0)*cj17*x13135);
evalcond[0]=((-1.0)*r02*x13135);
evalcond[1]=((((-1.0)*x13136*x13139))+((r20*x13140)));
evalcond[2]=((((-1.0)*sj13*x13137))+((cj13*cj14))+(((-1.0)*r02*x13139)));
evalcond[3]=((((-1.0)*r10*x13141))+((x13135*x13138)));
evalcond[4]=((1.0)+(((-1.0)*x13138*x13139))+((r10*x13140)));
evalcond[5]=((((-1.0)*cj13*x13137))+(((-1.0)*r20*x13141))+((x13135*x13136))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x13142=IKPowWithIntegerCheck(((((-1.0)*cj17*r20))+((r21*sj17))),-1);
if(!x13142.valid){
continue;
}
CheckValue<IkReal> x13143=IKPowWithIntegerCheck((((cj17*r10))+(((-1.0)*r11*sj17))),-1);
if(!x13143.valid){
continue;
}
if( IKabs(((x13142.value)*((((cj14*sj13))+((cj13*sj14)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x13143.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13142.value)*((((cj14*sj13))+((cj13*sj14))))))+IKsqr(((-1.0)*(x13143.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x13142.value)*((((cj14*sj13))+((cj13*sj14))))), ((-1.0)*(x13143.value)));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x13144=IKcos(j16);
IkReal x13145=IKsin(j16);
IkReal x13146=(r21*sj17);
IkReal x13147=((1.0)*sj14);
IkReal x13148=(r11*sj17);
IkReal x13149=((1.0)*x13144);
IkReal x13150=(cj17*x13144);
IkReal x13151=((1.0)*cj17*x13145);
evalcond[0]=((-1.0)*r02*x13145);
evalcond[1]=(((r20*x13150))+(((-1.0)*x13146*x13149)));
evalcond[2]=((((-1.0)*sj13*x13147))+(((-1.0)*r02*x13149))+((cj13*cj14)));
evalcond[3]=((((-1.0)*r10*x13151))+((x13145*x13148)));
evalcond[4]=((1.0)+((r10*x13150))+(((-1.0)*x13148*x13149)));
evalcond[5]=((((-1.0)*r20*x13151))+(((-1.0)*cj13*x13147))+((x13145*x13146))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[2];
IkReal x13152=((-1.0)*px);
sj12=0;
cj12=1.0;
j12=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13152);
rxp1_1=(px*r21);
rxp1_2=(r11*x13152);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
j16eval[0]=((((-1.0)*r21*sj17))+((cj17*r20)));
j16eval[1]=r02;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x13153=((-1.0)*px);
sj12=0;
cj12=1.0;
j12=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13153);
rxp1_1=(px*r21);
rxp1_2=(r11*x13153);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj15=0;
cj15=-1.0;
j15=3.14159265358979;
IkReal x13154=((1.0)*sj17);
j16eval[0]=(((cj17*r20))+(((-1.0)*r21*x13154)));
j16eval[1]=((((-1.0)*r11*x13154))+((cj17*r10)));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x13155=((1.0)*sj17);
CheckValue<IkReal> x13156=IKPowWithIntegerCheck((((cj17*r20))+(((-1.0)*r21*x13155))),-1);
if(!x13156.valid){
continue;
}
CheckValue<IkReal> x13157=IKPowWithIntegerCheck(((((-1.0)*r11*x13155))+((cj17*r10))),-1);
if(!x13157.valid){
continue;
}
if( IKabs(((x13156.value)*((((cj14*sj13))+((cj13*sj14)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x13157.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13156.value)*((((cj14*sj13))+((cj13*sj14))))))+IKsqr(((-1.0)*(x13157.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x13156.value)*((((cj14*sj13))+((cj13*sj14))))), ((-1.0)*(x13157.value)));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x13158=IKcos(j16);
IkReal x13159=IKsin(j16);
IkReal x13160=((1.0)*sj17);
IkReal x13161=((1.0)*sj13);
IkReal x13162=(cj17*x13158);
IkReal x13163=(cj17*x13159);
evalcond[0]=((-1.0)*r02*x13159);
evalcond[1]=(((r02*x13158))+(((-1.0)*sj14*x13161))+((cj13*cj14)));
evalcond[2]=(((r20*x13162))+(((-1.0)*r21*x13158*x13160)));
evalcond[3]=((((-1.0)*r11*x13159*x13160))+((r10*x13163)));
evalcond[4]=((1.0)+(((-1.0)*r11*x13158*x13160))+((r10*x13162)));
evalcond[5]=(((r20*x13163))+(((-1.0)*cj13*sj14))+(((-1.0)*cj14*x13161))+(((-1.0)*r21*x13159*x13160)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x13164=IKPowWithIntegerCheck(((((-1.0)*r21*sj17))+((cj17*r20))),-1);
if(!x13164.valid){
continue;
}
CheckValue<IkReal> x13165=IKPowWithIntegerCheck(r02,-1);
if(!x13165.valid){
continue;
}
if( IKabs(((x13164.value)*((((cj14*sj13))+((cj13*sj14)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13165.value)*(((((-1.0)*cj13*cj14))+((sj13*sj14)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13164.value)*((((cj14*sj13))+((cj13*sj14))))))+IKsqr(((x13165.value)*(((((-1.0)*cj13*cj14))+((sj13*sj14))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x13164.value)*((((cj14*sj13))+((cj13*sj14))))), ((x13165.value)*(((((-1.0)*cj13*cj14))+((sj13*sj14))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x13166=IKcos(j16);
IkReal x13167=IKsin(j16);
IkReal x13168=((1.0)*sj17);
IkReal x13169=((1.0)*sj13);
IkReal x13170=(cj17*x13166);
IkReal x13171=(cj17*x13167);
evalcond[0]=((-1.0)*r02*x13167);
evalcond[1]=(((r02*x13166))+(((-1.0)*sj14*x13169))+((cj13*cj14)));
evalcond[2]=(((r20*x13170))+(((-1.0)*r21*x13166*x13168)));
evalcond[3]=((((-1.0)*r11*x13167*x13168))+((r10*x13171)));
evalcond[4]=((1.0)+(((-1.0)*r11*x13166*x13168))+((r10*x13170)));
evalcond[5]=(((r20*x13171))+(((-1.0)*cj13*sj14))+(((-1.0)*cj14*x13169))+(((-1.0)*r21*x13167*x13168)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j16]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x13172=((1.0)*cj17);
CheckValue<IkReal> x13173=IKPowWithIntegerCheck(((((-1.0)*cj15*r10*x13172))+((cj15*r11*sj17))),-1);
if(!x13173.valid){
continue;
}
CheckValue<IkReal> x13174=IKPowWithIntegerCheck(cj15,-1);
if(!x13174.valid){
continue;
}
CheckValue<IkReal> x13175=IKPowWithIntegerCheck(r02,-1);
if(!x13175.valid){
continue;
}
if( IKabs(((x13173.value)*(((((-1.0)*r10*sj15*sj17))+(((-1.0)*r11*sj15*x13172)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13174.value)*(x13175.value)*(((((-1.0)*sj13*sj14))+((cj13*cj14)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13173.value)*(((((-1.0)*r10*sj15*sj17))+(((-1.0)*r11*sj15*x13172))))))+IKsqr(((x13174.value)*(x13175.value)*(((((-1.0)*sj13*sj14))+((cj13*cj14))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x13173.value)*(((((-1.0)*r10*sj15*sj17))+(((-1.0)*r11*sj15*x13172))))), ((x13174.value)*(x13175.value)*(((((-1.0)*sj13*sj14))+((cj13*cj14))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x13176=IKcos(j16);
IkReal x13177=IKsin(j16);
IkReal x13178=(cj17*sj15);
IkReal x13179=((1.0)*cj15);
IkReal x13180=(cj15*cj17);
IkReal x13181=(sj15*sj17);
IkReal x13182=(cj13*cj14);
IkReal x13183=((1.0)*sj14);
IkReal x13184=(cj15*sj17);
IkReal x13185=((1.0)*cj14*sj13);
IkReal x13186=(cj13*x13183);
IkReal x13187=((1.0)*x13177);
IkReal x13188=(r02*x13176);
IkReal x13189=(r21*x13177);
IkReal x13190=(cj17*x13176);
IkReal x13191=(r11*x13177);
IkReal x13192=((1.0)*sj17*x13176);
IkReal x13193=(x13186+x13185);
evalcond[0]=((-1.0)*r02*x13177);
evalcond[1]=((((-1.0)*r21*x13192))+((r20*x13190)));
evalcond[2]=((1.0)+(((-1.0)*r11*x13192))+((r10*x13190)));
evalcond[3]=((((-1.0)*x13179*x13188))+(((-1.0)*sj13*x13183))+x13182);
evalcond[4]=((((-1.0)*x13193))+(((-1.0)*sj15*x13188)));
evalcond[5]=((((-1.0)*cj17*r10*x13177*x13179))+((r10*x13181))+((x13184*x13191))+((r11*x13178)));
evalcond[6]=((((-1.0)*r10*x13178*x13187))+(((-1.0)*r10*sj17*x13179))+(((-1.0)*cj17*r11*x13179))+((x13181*x13191)));
evalcond[7]=((((-1.0)*x13193))+(((-1.0)*cj17*r20*x13177*x13179))+((r20*x13181))+((x13184*x13189))+((r21*x13178)));
evalcond[8]=((((-1.0)*cj17*r21*x13179))+(((-1.0)*x13182))+(((-1.0)*r20*sj17*x13179))+((sj13*sj14))+((x13181*x13189))+(((-1.0)*r20*x13178*x13187)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x13194=((1.0)*r11);
IkReal x13195=(cj17*r10);
CheckValue<IkReal> x13196=IKPowWithIntegerCheck(((((-1.0)*cj15*x13195))+((cj15*r11*sj17))),-1);
if(!x13196.valid){
continue;
}
CheckValue<IkReal> x13197=IKPowWithIntegerCheck(((((-1.0)*sj17*x13194))+x13195),-1);
if(!x13197.valid){
continue;
}
if( IKabs(((x13196.value)*(((((-1.0)*r10*sj15*sj17))+(((-1.0)*cj17*sj15*x13194)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x13197.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13196.value)*(((((-1.0)*r10*sj15*sj17))+(((-1.0)*cj17*sj15*x13194))))))+IKsqr(((-1.0)*(x13197.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x13196.value)*(((((-1.0)*r10*sj15*sj17))+(((-1.0)*cj17*sj15*x13194))))), ((-1.0)*(x13197.value)));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x13198=IKcos(j16);
IkReal x13199=IKsin(j16);
IkReal x13200=(cj17*sj15);
IkReal x13201=((1.0)*cj15);
IkReal x13202=(cj15*cj17);
IkReal x13203=(sj15*sj17);
IkReal x13204=(cj13*cj14);
IkReal x13205=((1.0)*sj14);
IkReal x13206=(cj15*sj17);
IkReal x13207=((1.0)*cj14*sj13);
IkReal x13208=(cj13*x13205);
IkReal x13209=((1.0)*x13199);
IkReal x13210=(r02*x13198);
IkReal x13211=(r21*x13199);
IkReal x13212=(cj17*x13198);
IkReal x13213=(r11*x13199);
IkReal x13214=((1.0)*sj17*x13198);
IkReal x13215=(x13207+x13208);
evalcond[0]=((-1.0)*r02*x13199);
evalcond[1]=(((r20*x13212))+(((-1.0)*r21*x13214)));
evalcond[2]=((1.0)+((r10*x13212))+(((-1.0)*r11*x13214)));
evalcond[3]=((((-1.0)*x13201*x13210))+(((-1.0)*sj13*x13205))+x13204);
evalcond[4]=((((-1.0)*x13215))+(((-1.0)*sj15*x13210)));
evalcond[5]=(((r10*x13203))+((x13206*x13213))+(((-1.0)*cj17*r10*x13199*x13201))+((r11*x13200)));
evalcond[6]=((((-1.0)*r10*sj17*x13201))+((x13203*x13213))+(((-1.0)*r10*x13200*x13209))+(((-1.0)*cj17*r11*x13201)));
evalcond[7]=((((-1.0)*x13215))+((x13206*x13211))+((r21*x13200))+(((-1.0)*cj17*r20*x13199*x13201))+((r20*x13203)));
evalcond[8]=(((x13203*x13211))+(((-1.0)*r20*sj17*x13201))+((sj13*sj14))+(((-1.0)*r20*x13200*x13209))+(((-1.0)*cj17*r21*x13201))+(((-1.0)*x13204)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x13216=(cj17*r10);
IkReal x13217=(r11*sj17);
CheckValue<IkReal> x13218=IKPowWithIntegerCheck((((sj15*x13217))+(((-1.0)*sj15*x13216))),-1);
if(!x13218.valid){
continue;
}
CheckValue<IkReal> x13219=IKPowWithIntegerCheck(((((-1.0)*x13217))+x13216),-1);
if(!x13219.valid){
continue;
}
if( IKabs(((x13218.value)*((((cj15*r10*sj17))+((cj15*cj17*r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x13219.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13218.value)*((((cj15*r10*sj17))+((cj15*cj17*r11))))))+IKsqr(((-1.0)*(x13219.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x13218.value)*((((cj15*r10*sj17))+((cj15*cj17*r11))))), ((-1.0)*(x13219.value)));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x13220=IKcos(j16);
IkReal x13221=IKsin(j16);
IkReal x13222=(cj17*sj15);
IkReal x13223=((1.0)*cj15);
IkReal x13224=(cj15*cj17);
IkReal x13225=(sj15*sj17);
IkReal x13226=(cj13*cj14);
IkReal x13227=((1.0)*sj14);
IkReal x13228=(cj15*sj17);
IkReal x13229=((1.0)*cj14*sj13);
IkReal x13230=(cj13*x13227);
IkReal x13231=((1.0)*x13221);
IkReal x13232=(r02*x13220);
IkReal x13233=(r21*x13221);
IkReal x13234=(cj17*x13220);
IkReal x13235=(r11*x13221);
IkReal x13236=((1.0)*sj17*x13220);
IkReal x13237=(x13230+x13229);
evalcond[0]=((-1.0)*r02*x13221);
evalcond[1]=(((r20*x13234))+(((-1.0)*r21*x13236)));
evalcond[2]=((1.0)+((r10*x13234))+(((-1.0)*r11*x13236)));
evalcond[3]=((((-1.0)*x13223*x13232))+(((-1.0)*sj13*x13227))+x13226);
evalcond[4]=((((-1.0)*sj15*x13232))+(((-1.0)*x13237)));
evalcond[5]=(((x13228*x13235))+((r10*x13225))+((r11*x13222))+(((-1.0)*cj17*r10*x13221*x13223)));
evalcond[6]=((((-1.0)*cj17*r11*x13223))+((x13225*x13235))+(((-1.0)*r10*sj17*x13223))+(((-1.0)*r10*x13222*x13231)));
evalcond[7]=(((x13228*x13233))+((r21*x13222))+(((-1.0)*cj17*r20*x13221*x13223))+((r20*x13225))+(((-1.0)*x13237)));
evalcond[8]=((((-1.0)*r20*sj17*x13223))+(((-1.0)*x13226))+(((-1.0)*r20*x13222*x13231))+((x13225*x13233))+(((-1.0)*cj17*r21*x13223))+((sj13*sj14)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j16]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x13238=cj17*cj17;
IkReal x13239=(cj17*r20);
IkReal x13240=(r21*sj15);
IkReal x13241=(r11*sj15);
IkReal x13242=((1.0)*r10);
IkReal x13243=(r10*sj15*sj17);
IkReal x13244=(r10*x13238);
IkReal x13245=((1.0)*r11*sj17);
IkReal x13246=(cj15*r11*r21);
CheckValue<IkReal> x13247=IKPowWithIntegerCheck(IKsign((((cj15*r20*x13244))+(((-1.0)*cj15*x13239*x13245))+((cj15*r12*r22))+(((-1.0)*cj15*cj17*r21*sj17*x13242))+(((-1.0)*x13238*x13246))+x13246)),-1);
if(!x13247.valid){
continue;
}
CheckValue<IkReal> x13248 = IKatan2WithCheck(IkReal((((r20*x13238*x13241))+((x13239*x13243))+((x13240*x13244))+(((-1.0)*cj17*x13240*x13245))+(((-1.0)*x13240*x13242)))),IkReal((((r22*x13243))+((cj17*r22*x13241)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13248.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13247.value)))+(x13248.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x13249=IKcos(j16);
IkReal x13250=IKsin(j16);
IkReal x13251=(cj17*r00);
IkReal x13252=(cj17*sj15);
IkReal x13253=(cj15*cj17);
IkReal x13254=(r11*sj17);
IkReal x13255=(sj15*sj17);
IkReal x13256=(cj13*cj14);
IkReal x13257=((1.0)*sj14);
IkReal x13258=((1.0)*cj14*sj13);
IkReal x13259=(cj13*x13257);
IkReal x13260=((1.0)*x13250);
IkReal x13261=((1.0)*x13249);
IkReal x13262=(cj17*x13249);
IkReal x13263=(r21*x13250);
IkReal x13264=((1.0)*cj15*sj17);
IkReal x13265=(cj15*x13261);
IkReal x13266=(r01*sj17*x13250);
IkReal x13267=(x13258+x13259);
evalcond[0]=((((-1.0)*r21*sj17*x13261))+((r20*x13262))+(((-1.0)*r22*x13260)));
evalcond[1]=(((x13249*x13251))+(((-1.0)*r01*sj17*x13261))+(((-1.0)*r02*x13260)));
evalcond[2]=((1.0)+((r10*x13262))+(((-1.0)*r12*x13260))+(((-1.0)*x13254*x13261)));
evalcond[3]=((((-1.0)*r10*x13253*x13260))+((r10*x13255))+((cj15*x13250*x13254))+((r11*x13252))+(((-1.0)*r12*x13265)));
evalcond[4]=((((-1.0)*r11*x13253))+(((-1.0)*r10*x13252*x13260))+((sj15*x13250*x13254))+(((-1.0)*r12*sj15*x13261))+(((-1.0)*r10*x13264)));
evalcond[5]=((((-1.0)*cj15*x13251*x13260))+((cj15*x13266))+((r01*x13252))+((r00*x13255))+(((-1.0)*sj13*x13257))+(((-1.0)*r02*x13265))+x13256);
evalcond[6]=(((r21*x13252))+(((-1.0)*x13267))+((cj15*sj17*x13263))+(((-1.0)*r22*x13265))+(((-1.0)*r20*x13253*x13260))+((r20*x13255)));
evalcond[7]=(((x13255*x13263))+(((-1.0)*x13256))+(((-1.0)*r22*sj15*x13261))+((sj13*sj14))+(((-1.0)*r20*x13252*x13260))+(((-1.0)*r21*x13253))+(((-1.0)*r20*x13264)));
evalcond[8]=((((-1.0)*r00*x13264))+(((-1.0)*x13267))+((r01*x13250*x13255))+(((-1.0)*r02*sj15*x13261))+(((-1.0)*sj15*x13251*x13260))+(((-1.0)*r01*x13253)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x13268=((1.0)*sj17);
CheckValue<IkReal> x13269 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x13268))+((cj17*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x13269.valid){
continue;
}
CheckValue<IkReal> x13270=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj17*r21))+(((-1.0)*r20*x13268)))),-1);
if(!x13270.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x13269.value)+(((1.5707963267949)*(x13270.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x13271=IKcos(j16);
IkReal x13272=IKsin(j16);
IkReal x13273=(cj17*r00);
IkReal x13274=(cj17*sj15);
IkReal x13275=(cj15*cj17);
IkReal x13276=(r11*sj17);
IkReal x13277=(sj15*sj17);
IkReal x13278=(cj13*cj14);
IkReal x13279=((1.0)*sj14);
IkReal x13280=((1.0)*cj14*sj13);
IkReal x13281=(cj13*x13279);
IkReal x13282=((1.0)*x13272);
IkReal x13283=((1.0)*x13271);
IkReal x13284=(cj17*x13271);
IkReal x13285=(r21*x13272);
IkReal x13286=((1.0)*cj15*sj17);
IkReal x13287=(cj15*x13283);
IkReal x13288=(r01*sj17*x13272);
IkReal x13289=(x13281+x13280);
evalcond[0]=((((-1.0)*r22*x13282))+((r20*x13284))+(((-1.0)*r21*sj17*x13283)));
evalcond[1]=(((x13271*x13273))+(((-1.0)*r02*x13282))+(((-1.0)*r01*sj17*x13283)));
evalcond[2]=((1.0)+(((-1.0)*x13276*x13283))+((r10*x13284))+(((-1.0)*r12*x13282)));
evalcond[3]=(((cj15*x13272*x13276))+((r11*x13274))+((r10*x13277))+(((-1.0)*r10*x13275*x13282))+(((-1.0)*r12*x13287)));
evalcond[4]=((((-1.0)*r10*x13286))+((sj15*x13272*x13276))+(((-1.0)*r11*x13275))+(((-1.0)*r10*x13274*x13282))+(((-1.0)*r12*sj15*x13283)));
evalcond[5]=(((r01*x13274))+(((-1.0)*sj13*x13279))+((r00*x13277))+(((-1.0)*r02*x13287))+x13278+(((-1.0)*cj15*x13273*x13282))+((cj15*x13288)));
evalcond[6]=((((-1.0)*r22*x13287))+((cj15*sj17*x13285))+((r21*x13274))+((r20*x13277))+(((-1.0)*r20*x13275*x13282))+(((-1.0)*x13289)));
evalcond[7]=((((-1.0)*r20*x13286))+(((-1.0)*x13278))+(((-1.0)*r22*sj15*x13283))+((sj13*sj14))+((x13277*x13285))+(((-1.0)*r21*x13275))+(((-1.0)*r20*x13274*x13282)));
evalcond[8]=(((r01*x13272*x13277))+(((-1.0)*r00*x13286))+(((-1.0)*r02*sj15*x13283))+(((-1.0)*r01*x13275))+(((-1.0)*sj15*x13273*x13282))+(((-1.0)*x13289)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x13290 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj17))+((cj17*r20)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x13290.valid){
continue;
}
CheckValue<IkReal> x13291=IKPowWithIntegerCheck(IKsign((((r00*sj17))+((cj17*r01)))),-1);
if(!x13291.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x13290.value)+(((1.5707963267949)*(x13291.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x13292=IKcos(j16);
IkReal x13293=IKsin(j16);
IkReal x13294=(cj17*r00);
IkReal x13295=(cj17*sj15);
IkReal x13296=(cj15*cj17);
IkReal x13297=(r11*sj17);
IkReal x13298=(sj15*sj17);
IkReal x13299=(cj13*cj14);
IkReal x13300=((1.0)*sj14);
IkReal x13301=((1.0)*cj14*sj13);
IkReal x13302=(cj13*x13300);
IkReal x13303=((1.0)*x13293);
IkReal x13304=((1.0)*x13292);
IkReal x13305=(cj17*x13292);
IkReal x13306=(r21*x13293);
IkReal x13307=((1.0)*cj15*sj17);
IkReal x13308=(cj15*x13304);
IkReal x13309=(r01*sj17*x13293);
IkReal x13310=(x13301+x13302);
evalcond[0]=(((r20*x13305))+(((-1.0)*r22*x13303))+(((-1.0)*r21*sj17*x13304)));
evalcond[1]=(((x13292*x13294))+(((-1.0)*r02*x13303))+(((-1.0)*r01*sj17*x13304)));
evalcond[2]=((1.0)+((r10*x13305))+(((-1.0)*x13297*x13304))+(((-1.0)*r12*x13303)));
evalcond[3]=(((r11*x13295))+(((-1.0)*r10*x13296*x13303))+((r10*x13298))+(((-1.0)*r12*x13308))+((cj15*x13293*x13297)));
evalcond[4]=((((-1.0)*r10*x13307))+(((-1.0)*r10*x13295*x13303))+((sj15*x13293*x13297))+(((-1.0)*r11*x13296))+(((-1.0)*r12*sj15*x13304)));
evalcond[5]=(((cj15*x13309))+(((-1.0)*sj13*x13300))+(((-1.0)*cj15*x13294*x13303))+(((-1.0)*r02*x13308))+x13299+((r00*x13298))+((r01*x13295)));
evalcond[6]=(((r20*x13298))+(((-1.0)*r20*x13296*x13303))+((cj15*sj17*x13306))+(((-1.0)*r22*x13308))+(((-1.0)*x13310))+((r21*x13295)));
evalcond[7]=((((-1.0)*r22*sj15*x13304))+(((-1.0)*r20*x13307))+(((-1.0)*r20*x13295*x13303))+(((-1.0)*x13299))+((sj13*sj14))+((x13298*x13306))+(((-1.0)*r21*x13296)));
evalcond[8]=((((-1.0)*r02*sj15*x13304))+(((-1.0)*r01*x13296))+((r01*x13293*x13298))+(((-1.0)*x13310))+(((-1.0)*r00*x13307))+(((-1.0)*sj15*x13294*x13303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
IkReal x13311=(((r20*sj17))+((cj17*r21)));
j16eval[0]=x13311;
j16eval[1]=IKsign(x13311);
j16eval[2]=((IKabs(r02))+(IKabs((((cj17*r00))+(((-1.0)*r01*sj17))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
IkReal x13312=((1.0)*sj17);
IkReal x13313=((((-1.0)*cj17*r01))+(((-1.0)*r00*x13312)));
j16eval[0]=x13313;
j16eval[1]=IKsign(x13313);
j16eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*r21*x13312))+((cj17*r20))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
IkReal x13314=cj17*cj17;
IkReal x13315=(cj15*r11);
IkReal x13316=(cj15*r10);
IkReal x13317=((1.0)*cj17*sj17);
IkReal x13318=(((cj15*r12*r22))+((r20*x13314*x13316))+(((-1.0)*r20*x13315*x13317))+(((-1.0)*r21*x13314*x13315))+((r21*x13315))+(((-1.0)*r21*x13316*x13317)));
j16eval[0]=x13318;
j16eval[1]=IKsign(x13318);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
IkReal x13319=(((r20*sj17))+((cj17*r21)));
j16eval[0]=x13319;
j16eval[1]=IKsign(x13319);
j16eval[2]=((IKabs(r02))+(IKabs((((cj17*r00))+(((-1.0)*r01*sj17))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
IkReal x13320=((1.0)*sj17);
IkReal x13321=((((-1.0)*cj17*r01))+(((-1.0)*r00*x13320)));
j16eval[0]=x13321;
j16eval[1]=IKsign(x13321);
j16eval[2]=((IKabs(r22))+(IKabs((((cj17*r20))+(((-1.0)*r21*x13320))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
IkReal x13322=cj17*cj17;
IkReal x13323=r11*r11;
IkReal x13324=(r11*sj17);
IkReal x13325=(cj17*r10);
IkReal x13326=((((2.0)*x13324*x13325))+(((-1.0)*x13323))+(((-1.0)*x13322*(r10*r10)))+(((-1.0)*(r12*r12)))+((x13322*x13323)));
j16eval[0]=x13326;
j16eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x13325))+x13324))));
j16eval[2]=IKsign(x13326);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[2];
IkReal x13327=((-1.0)*px);
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13327);
rxp1_1=(px*r21);
rxp1_2=(r11*x13327);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j16eval[0]=((((-1.0)*cj17*r20))+((r21*sj17)));
j16eval[1]=(((cj17*r10))+(((-1.0)*r11*sj17)));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x13328=((-1.0)*px);
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13328);
rxp1_1=(px*r21);
rxp1_2=(r11*x13328);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j16eval[0]=((((-1.0)*cj17*r20))+((r21*sj17)));
j16eval[1]=r02;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x13329=IKPowWithIntegerCheck(((((-1.0)*cj17*r20))+((r21*sj17))),-1);
if(!x13329.valid){
continue;
}
CheckValue<IkReal> x13330=IKPowWithIntegerCheck(r02,-1);
if(!x13330.valid){
continue;
}
if( IKabs(((x13329.value)*(((((-1.0)*sj13*sj14))+((cj13*cj14)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13330.value)*((((cj14*sj13))+((cj13*sj14)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13329.value)*(((((-1.0)*sj13*sj14))+((cj13*cj14))))))+IKsqr(((x13330.value)*((((cj14*sj13))+((cj13*sj14))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x13329.value)*(((((-1.0)*sj13*sj14))+((cj13*cj14))))), ((x13330.value)*((((cj14*sj13))+((cj13*sj14))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x13331=IKcos(j16);
IkReal x13332=IKsin(j16);
IkReal x13333=(r21*sj17);
IkReal x13334=(r11*sj17);
IkReal x13335=((1.0)*x13331);
IkReal x13336=(cj17*x13331);
IkReal x13337=((1.0)*cj17*x13332);
evalcond[0]=((-1.0)*r02*x13332);
evalcond[1]=(((cj14*sj13))+((cj13*sj14))+(((-1.0)*r02*x13335)));
evalcond[2]=(((r20*x13336))+(((-1.0)*x13333*x13335)));
evalcond[3]=(((x13332*x13334))+(((-1.0)*r10*x13337)));
evalcond[4]=((-1.0)+((r10*x13336))+(((-1.0)*x13334*x13335)));
evalcond[5]=((((-1.0)*cj13*cj14))+((x13332*x13333))+((sj13*sj14))+(((-1.0)*r20*x13337)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x13338=IKPowWithIntegerCheck(((((-1.0)*cj17*r20))+((r21*sj17))),-1);
if(!x13338.valid){
continue;
}
CheckValue<IkReal> x13339=IKPowWithIntegerCheck((((cj17*r10))+(((-1.0)*r11*sj17))),-1);
if(!x13339.valid){
continue;
}
if( IKabs(((x13338.value)*(((((-1.0)*sj13*sj14))+((cj13*cj14)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x13339.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13338.value)*(((((-1.0)*sj13*sj14))+((cj13*cj14))))))+IKsqr(x13339.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x13338.value)*(((((-1.0)*sj13*sj14))+((cj13*cj14))))), x13339.value);
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x13340=IKcos(j16);
IkReal x13341=IKsin(j16);
IkReal x13342=(r21*sj17);
IkReal x13343=(r11*sj17);
IkReal x13344=((1.0)*x13340);
IkReal x13345=(cj17*x13340);
IkReal x13346=((1.0)*cj17*x13341);
evalcond[0]=((-1.0)*r02*x13341);
evalcond[1]=(((cj14*sj13))+(((-1.0)*r02*x13344))+((cj13*sj14)));
evalcond[2]=((((-1.0)*x13342*x13344))+((r20*x13345)));
evalcond[3]=(((x13341*x13343))+(((-1.0)*r10*x13346)));
evalcond[4]=((-1.0)+((r10*x13345))+(((-1.0)*x13343*x13344)));
evalcond[5]=((((-1.0)*cj13*cj14))+((x13341*x13342))+((sj13*sj14))+(((-1.0)*r20*x13346)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[2];
IkReal x13347=((-1.0)*pz);
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13347);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13347);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j16eval[0]=((((-1.0)*cj17*r00))+((r01*sj17)));
j16eval[1]=(((cj17*r10))+(((-1.0)*r11*sj17)));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x13348=((-1.0)*pz);
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13348);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13348);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j16eval[0]=((((-1.0)*cj17*r00))+((r01*sj17)));
j16eval[1]=r22;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x13349=((1.0)*cj14);
CheckValue<IkReal> x13350=IKPowWithIntegerCheck(((((-1.0)*cj17*r00))+((r01*sj17))),-1);
if(!x13350.valid){
continue;
}
CheckValue<IkReal> x13351=IKPowWithIntegerCheck(r22,-1);
if(!x13351.valid){
continue;
}
if( IKabs(((x13350.value)*(((((-1.0)*cj13*sj14))+(((-1.0)*sj13*x13349)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13351.value)*((((sj13*sj14))+(((-1.0)*cj13*x13349)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13350.value)*(((((-1.0)*cj13*sj14))+(((-1.0)*sj13*x13349))))))+IKsqr(((x13351.value)*((((sj13*sj14))+(((-1.0)*cj13*x13349))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x13350.value)*(((((-1.0)*cj13*sj14))+(((-1.0)*sj13*x13349))))), ((x13351.value)*((((sj13*sj14))+(((-1.0)*cj13*x13349))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x13352=IKcos(j16);
IkReal x13353=IKsin(j16);
IkReal x13354=(r01*sj17);
IkReal x13355=(r11*sj17);
IkReal x13356=((1.0)*x13352);
IkReal x13357=(cj17*x13352);
IkReal x13358=((1.0)*cj17*x13353);
evalcond[0]=((-1.0)*r22*x13353);
evalcond[1]=((((-1.0)*x13354*x13356))+((r00*x13357)));
evalcond[2]=((((-1.0)*cj13*cj14))+(((-1.0)*r22*x13356))+((sj13*sj14)));
evalcond[3]=(((x13353*x13355))+(((-1.0)*r10*x13358)));
evalcond[4]=((-1.0)+(((-1.0)*x13355*x13356))+((r10*x13357)));
evalcond[5]=(((cj14*sj13))+((x13353*x13354))+(((-1.0)*r00*x13358))+((cj13*sj14)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x13359=IKPowWithIntegerCheck(((((-1.0)*cj17*r00))+((r01*sj17))),-1);
if(!x13359.valid){
continue;
}
CheckValue<IkReal> x13360=IKPowWithIntegerCheck((((cj17*r10))+(((-1.0)*r11*sj17))),-1);
if(!x13360.valid){
continue;
}
if( IKabs(((x13359.value)*(((((-1.0)*cj13*sj14))+(((-1.0)*cj14*sj13)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x13360.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13359.value)*(((((-1.0)*cj13*sj14))+(((-1.0)*cj14*sj13))))))+IKsqr(x13360.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x13359.value)*(((((-1.0)*cj13*sj14))+(((-1.0)*cj14*sj13))))), x13360.value);
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x13361=IKcos(j16);
IkReal x13362=IKsin(j16);
IkReal x13363=(r01*sj17);
IkReal x13364=(r11*sj17);
IkReal x13365=((1.0)*x13361);
IkReal x13366=(cj17*x13361);
IkReal x13367=((1.0)*cj17*x13362);
evalcond[0]=((-1.0)*r22*x13362);
evalcond[1]=((((-1.0)*x13363*x13365))+((r00*x13366)));
evalcond[2]=((((-1.0)*cj13*cj14))+(((-1.0)*r22*x13365))+((sj13*sj14)));
evalcond[3]=((((-1.0)*r10*x13367))+((x13362*x13364)));
evalcond[4]=((-1.0)+((r10*x13366))+(((-1.0)*x13364*x13365)));
evalcond[5]=(((x13362*x13363))+((cj14*sj13))+(((-1.0)*r00*x13367))+((cj13*sj14)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j16]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x13368=cj17*cj17;
IkReal x13369=r11*r11;
IkReal x13370=(r11*sj17);
IkReal x13371=(cj17*r10);
CheckValue<IkReal> x13372=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13369))+((x13368*x13369))+(((2.0)*x13370*x13371))+(((-1.0)*(r12*r12)))+(((-1.0)*x13368*(r10*r10))))),-1);
if(!x13372.valid){
continue;
}
CheckValue<IkReal> x13373 = IKatan2WithCheck(IkReal(r12),IkReal((x13370+(((-1.0)*x13371)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13373.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13372.value)))+(x13373.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x13374=IKcos(j16);
IkReal x13375=IKsin(j16);
IkReal x13376=(r11*sj17);
IkReal x13377=(cj17*x13374);
IkReal x13378=((1.0)*x13374);
IkReal x13379=((1.0)*x13375);
IkReal x13380=(sj17*x13375);
IkReal x13381=(cj17*x13379);
evalcond[0]=((((-1.0)*r21*sj17*x13378))+(((-1.0)*r22*x13379))+((r20*x13377)));
evalcond[1]=((((-1.0)*r01*sj17*x13378))+((r00*x13377))+(((-1.0)*r02*x13379)));
evalcond[2]=((((-1.0)*r10*x13381))+((x13375*x13376))+(((-1.0)*r12*x13378)));
evalcond[3]=((-1.0)+((r10*x13377))+(((-1.0)*x13376*x13378))+(((-1.0)*r12*x13379)));
evalcond[4]=(((cj14*sj13))+((r01*x13380))+((cj13*sj14))+(((-1.0)*r00*x13381))+(((-1.0)*r02*x13378)));
evalcond[5]=((((-1.0)*cj13*cj14))+(((-1.0)*r22*x13378))+(((-1.0)*r20*x13381))+((sj13*sj14))+((r21*x13380)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x13382=((1.0)*sj17);
CheckValue<IkReal> x13383 = IKatan2WithCheck(IkReal((((cj17*r20))+(((-1.0)*r21*x13382)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x13383.valid){
continue;
}
CheckValue<IkReal> x13384=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj17*r01))+(((-1.0)*r00*x13382)))),-1);
if(!x13384.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x13383.value)+(((1.5707963267949)*(x13384.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x13385=IKcos(j16);
IkReal x13386=IKsin(j16);
IkReal x13387=(r11*sj17);
IkReal x13388=(cj17*x13385);
IkReal x13389=((1.0)*x13385);
IkReal x13390=((1.0)*x13386);
IkReal x13391=(sj17*x13386);
IkReal x13392=(cj17*x13390);
evalcond[0]=((((-1.0)*r21*sj17*x13389))+(((-1.0)*r22*x13390))+((r20*x13388)));
evalcond[1]=((((-1.0)*r01*sj17*x13389))+((r00*x13388))+(((-1.0)*r02*x13390)));
evalcond[2]=(((x13386*x13387))+(((-1.0)*r10*x13392))+(((-1.0)*r12*x13389)));
evalcond[3]=((-1.0)+((r10*x13388))+(((-1.0)*x13387*x13389))+(((-1.0)*r12*x13390)));
evalcond[4]=(((cj14*sj13))+((r01*x13391))+(((-1.0)*r00*x13392))+((cj13*sj14))+(((-1.0)*r02*x13389)));
evalcond[5]=((((-1.0)*cj13*cj14))+((r21*x13391))+(((-1.0)*r22*x13389))+(((-1.0)*r20*x13392))+((sj13*sj14)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x13393 = IKatan2WithCheck(IkReal((((cj17*r00))+(((-1.0)*r01*sj17)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x13393.valid){
continue;
}
CheckValue<IkReal> x13394=IKPowWithIntegerCheck(IKsign((((r20*sj17))+((cj17*r21)))),-1);
if(!x13394.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x13393.value)+(((1.5707963267949)*(x13394.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x13395=IKcos(j16);
IkReal x13396=IKsin(j16);
IkReal x13397=(r11*sj17);
IkReal x13398=(cj17*x13395);
IkReal x13399=((1.0)*x13395);
IkReal x13400=((1.0)*x13396);
IkReal x13401=(sj17*x13396);
IkReal x13402=(cj17*x13400);
evalcond[0]=((((-1.0)*r21*sj17*x13399))+((r20*x13398))+(((-1.0)*r22*x13400)));
evalcond[1]=((((-1.0)*r02*x13400))+(((-1.0)*r01*sj17*x13399))+((r00*x13398)));
evalcond[2]=((((-1.0)*r10*x13402))+(((-1.0)*r12*x13399))+((x13396*x13397)));
evalcond[3]=((-1.0)+((r10*x13398))+(((-1.0)*x13397*x13399))+(((-1.0)*r12*x13400)));
evalcond[4]=(((r01*x13401))+((cj14*sj13))+((cj13*sj14))+(((-1.0)*r00*x13402))+(((-1.0)*r02*x13399)));
evalcond[5]=((((-1.0)*cj13*cj14))+(((-1.0)*r22*x13399))+((r21*x13401))+((sj13*sj14))+(((-1.0)*r20*x13402)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
IkReal x13403=(((r20*sj17))+((cj17*r21)));
j16eval[0]=x13403;
j16eval[1]=IKsign(x13403);
j16eval[2]=((IKabs(r02))+(IKabs((((cj17*r00))+(((-1.0)*r01*sj17))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
IkReal x13404=((1.0)*sj17);
IkReal x13405=((((-1.0)*cj17*r01))+(((-1.0)*r00*x13404)));
j16eval[0]=x13405;
j16eval[1]=IKsign(x13405);
j16eval[2]=((IKabs((((cj17*r20))+(((-1.0)*r21*x13404)))))+(IKabs(r22)));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
IkReal x13406=(cj14*sj13);
IkReal x13407=(r11*sj17);
IkReal x13408=(cj13*sj14);
IkReal x13409=((1.0)*cj17*r10);
IkReal x13410=(((r20*sj17))+((cj17*r21)));
j16eval[0]=x13410;
j16eval[1]=IKsign(x13410);
j16eval[2]=((IKabs((((r12*x13408))+((r12*x13406)))))+(IKabs(((((-1.0)*x13406*x13409))+((x13406*x13407))+(((-1.0)*x13408*x13409))+((x13407*x13408))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[2];
IkReal x13411=((-1.0)*pz);
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13411);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13411);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13412=((1.0)*sj17);
j16eval[0]=((((-1.0)*r01*x13412))+((cj17*r00)));
j16eval[1]=((((-1.0)*r11*x13412))+((cj17*r10)));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x13413=((-1.0)*pz);
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13413);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13413);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j16eval[0]=(((cj17*r00))+(((-1.0)*r01*sj17)));
j16eval[1]=r22;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x13414=((1.0)*sj13);
CheckValue<IkReal> x13415=IKPowWithIntegerCheck((((cj17*r00))+(((-1.0)*r01*sj17))),-1);
if(!x13415.valid){
continue;
}
CheckValue<IkReal> x13416=IKPowWithIntegerCheck(r22,-1);
if(!x13416.valid){
continue;
}
if( IKabs(((x13415.value)*(((((-1.0)*cj13*sj14))+(((-1.0)*cj14*x13414)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13416.value)*(((((-1.0)*sj14*x13414))+((cj13*cj14)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13415.value)*(((((-1.0)*cj13*sj14))+(((-1.0)*cj14*x13414))))))+IKsqr(((x13416.value)*(((((-1.0)*sj14*x13414))+((cj13*cj14))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x13415.value)*(((((-1.0)*cj13*sj14))+(((-1.0)*cj14*x13414))))), ((x13416.value)*(((((-1.0)*sj14*x13414))+((cj13*cj14))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x13417=IKcos(j16);
IkReal x13418=IKsin(j16);
IkReal x13419=((1.0)*sj17);
IkReal x13420=(cj17*r00);
IkReal x13421=(cj17*r10);
evalcond[0]=((-1.0)*r22*x13418);
evalcond[1]=((((-1.0)*cj13*cj14))+((r22*x13417))+((sj13*sj14)));
evalcond[2]=((((-1.0)*r01*x13417*x13419))+((x13417*x13420)));
evalcond[3]=(((x13418*x13421))+(((-1.0)*r11*x13418*x13419)));
evalcond[4]=((-1.0)+(((-1.0)*r11*x13417*x13419))+((x13417*x13421)));
evalcond[5]=((((-1.0)*r01*x13418*x13419))+((cj14*sj13))+((x13418*x13420))+((cj13*sj14)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x13422=((1.0)*sj17);
CheckValue<IkReal> x13423=IKPowWithIntegerCheck((((cj17*r00))+(((-1.0)*r01*x13422))),-1);
if(!x13423.valid){
continue;
}
CheckValue<IkReal> x13424=IKPowWithIntegerCheck(((((-1.0)*r11*x13422))+((cj17*r10))),-1);
if(!x13424.valid){
continue;
}
if( IKabs(((x13423.value)*(((((-1.0)*cj13*sj14))+(((-1.0)*cj14*sj13)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x13424.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13423.value)*(((((-1.0)*cj13*sj14))+(((-1.0)*cj14*sj13))))))+IKsqr(x13424.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x13423.value)*(((((-1.0)*cj13*sj14))+(((-1.0)*cj14*sj13))))), x13424.value);
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x13425=IKcos(j16);
IkReal x13426=IKsin(j16);
IkReal x13427=((1.0)*sj17);
IkReal x13428=(cj17*r00);
IkReal x13429=(cj17*r10);
evalcond[0]=((-1.0)*r22*x13426);
evalcond[1]=((((-1.0)*cj13*cj14))+((r22*x13425))+((sj13*sj14)));
evalcond[2]=(((x13425*x13428))+(((-1.0)*r01*x13425*x13427)));
evalcond[3]=((((-1.0)*r11*x13426*x13427))+((x13426*x13429)));
evalcond[4]=((-1.0)+((x13425*x13429))+(((-1.0)*r11*x13425*x13427)));
evalcond[5]=(((cj14*sj13))+(((-1.0)*r01*x13426*x13427))+((cj13*sj14))+((x13426*x13428)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j13), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j14), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
j13=0;
sj13=0;
cj13=1.0;
j14=0;
sj14=0;
cj14=1.0;
IkReal x13430=(((r00*sj17))+((cj17*r01)));
j16eval[0]=x13430;
j16eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*cj17*r10))+((r11*sj17))))));
j16eval[2]=IKsign(x13430);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
j13=0;
sj13=0;
cj13=1.0;
j14=0;
sj14=0;
cj14=1.0;
IkReal x13431=((1.0)*cj17);
IkReal x13432=((((-1.0)*r11*x13431))+(((-1.0)*r10*sj17)));
j16eval[0]=x13432;
j16eval[1]=IKsign(x13432);
j16eval[2]=((IKabs(r02))+(IKabs((((r01*sj17))+(((-1.0)*r00*x13431))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
j13=0;
sj13=0;
cj13=1.0;
j14=0;
sj14=0;
cj14=1.0;
IkReal x13433=cj17*cj17;
IkReal x13434=(r01*r11);
IkReal x13435=(cj17*sj17);
IkReal x13436=((1.0)*r00);
IkReal x13437=((((-1.0)*r02*r12))+(((-1.0)*x13434))+((r01*r10*x13435))+(((-1.0)*r10*x13433*x13436))+((x13433*x13434))+((r00*r11*x13435)));
j16eval[0]=x13437;
j16eval[1]=IKsign(x13437);
j16eval[2]=((IKabs(r02))+(IKabs((((r01*sj17))+(((-1.0)*cj17*x13436))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x13438=cj17*cj17;
IkReal x13439=(r01*r11);
IkReal x13440=(cj17*sj17);
IkReal x13441=((1.0)*r00);
CheckValue<IkReal> x13442=IKPowWithIntegerCheck(IKsign((((x13438*x13439))+((r00*r11*x13440))+(((-1.0)*r02*r12))+(((-1.0)*x13439))+((r01*r10*x13440))+(((-1.0)*r10*x13438*x13441)))),-1);
if(!x13442.valid){
continue;
}
CheckValue<IkReal> x13443 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*cj17*x13441))+((r01*sj17)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13443.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13442.value)))+(x13443.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x13444=IKsin(j16);
IkReal x13445=IKcos(j16);
IkReal x13446=(r11*sj17);
IkReal x13447=(r21*sj17);
IkReal x13448=((1.0)*r01*sj17);
IkReal x13449=(cj17*x13444);
IkReal x13450=((1.0)*x13444);
IkReal x13451=(cj17*x13445);
IkReal x13452=((1.0)*x13445);
evalcond[0]=(((r02*x13445))+((r00*x13449))+(((-1.0)*x13444*x13448)));
evalcond[1]=((((-1.0)*x13446*x13450))+((r12*x13445))+((r10*x13449)));
evalcond[2]=((((-1.0)*r22*x13450))+((r20*x13451))+(((-1.0)*x13447*x13452)));
evalcond[3]=((((-1.0)*x13445*x13448))+(((-1.0)*r02*x13450))+((r00*x13451)));
evalcond[4]=((-1.0)+((r22*x13445))+(((-1.0)*x13447*x13450))+((r20*x13449)));
evalcond[5]=((-1.0)+((r10*x13451))+(((-1.0)*x13446*x13452))+(((-1.0)*r12*x13450)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x13453=((1.0)*cj17);
CheckValue<IkReal> x13454 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj17))+(((-1.0)*r00*x13453)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13454.valid){
continue;
}
CheckValue<IkReal> x13455=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x13453))+(((-1.0)*r10*sj17)))),-1);
if(!x13455.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x13454.value)+(((1.5707963267949)*(x13455.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x13456=IKsin(j16);
IkReal x13457=IKcos(j16);
IkReal x13458=(r11*sj17);
IkReal x13459=(r21*sj17);
IkReal x13460=((1.0)*r01*sj17);
IkReal x13461=(cj17*x13456);
IkReal x13462=((1.0)*x13456);
IkReal x13463=(cj17*x13457);
IkReal x13464=((1.0)*x13457);
evalcond[0]=((((-1.0)*x13456*x13460))+((r02*x13457))+((r00*x13461)));
evalcond[1]=(((r10*x13461))+((r12*x13457))+(((-1.0)*x13458*x13462)));
evalcond[2]=(((r20*x13463))+(((-1.0)*r22*x13462))+(((-1.0)*x13459*x13464)));
evalcond[3]=((((-1.0)*x13457*x13460))+(((-1.0)*r02*x13462))+((r00*x13463)));
evalcond[4]=((-1.0)+((r20*x13461))+(((-1.0)*x13459*x13462))+((r22*x13457)));
evalcond[5]=((-1.0)+((r10*x13463))+(((-1.0)*x13458*x13464))+(((-1.0)*r12*x13462)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x13465 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj17*r10))+((r11*sj17)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13465.valid){
continue;
}
CheckValue<IkReal> x13466=IKPowWithIntegerCheck(IKsign((((r00*sj17))+((cj17*r01)))),-1);
if(!x13466.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x13465.value)+(((1.5707963267949)*(x13466.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x13467=IKsin(j16);
IkReal x13468=IKcos(j16);
IkReal x13469=(r11*sj17);
IkReal x13470=(r21*sj17);
IkReal x13471=((1.0)*r01*sj17);
IkReal x13472=(cj17*x13467);
IkReal x13473=((1.0)*x13467);
IkReal x13474=(cj17*x13468);
IkReal x13475=((1.0)*x13468);
evalcond[0]=(((r00*x13472))+(((-1.0)*x13467*x13471))+((r02*x13468)));
evalcond[1]=(((r10*x13472))+((r12*x13468))+(((-1.0)*x13469*x13473)));
evalcond[2]=(((r20*x13474))+(((-1.0)*r22*x13473))+(((-1.0)*x13470*x13475)));
evalcond[3]=(((r00*x13474))+(((-1.0)*r02*x13473))+(((-1.0)*x13468*x13471)));
evalcond[4]=((-1.0)+((r22*x13468))+((r20*x13472))+(((-1.0)*x13470*x13473)));
evalcond[5]=((-1.0)+((r10*x13474))+(((-1.0)*x13469*x13475))+(((-1.0)*r12*x13473)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j13), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j14, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
j13=0;
sj13=0;
cj13=1.0;
j14=3.14159265358979;
sj14=0;
cj14=-1.0;
IkReal x13476=(((cj17*r11))+((r10*sj17)));
j16eval[0]=x13476;
j16eval[1]=IKsign(x13476);
j16eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*cj17*r00))+((r01*sj17))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
j13=0;
sj13=0;
cj13=1.0;
j14=3.14159265358979;
sj14=0;
cj14=-1.0;
IkReal x13477=((1.0)*cj17);
IkReal x13478=((((-1.0)*r00*sj17))+(((-1.0)*r01*x13477)));
j16eval[0]=x13478;
j16eval[1]=IKsign(x13478);
j16eval[2]=((IKabs(r12))+(IKabs((((r11*sj17))+(((-1.0)*r10*x13477))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
j13=0;
sj13=0;
cj13=1.0;
j14=3.14159265358979;
sj14=0;
cj14=-1.0;
IkReal x13479=cj17*cj17;
IkReal x13480=(r01*r11);
IkReal x13481=(cj17*sj17);
IkReal x13482=((1.0)*r00);
IkReal x13483=(((r00*r11*x13481))+(((-1.0)*x13480))+(((-1.0)*r02*r12))+(((-1.0)*r10*x13479*x13482))+((x13479*x13480))+((r01*r10*x13481)));
j16eval[0]=x13483;
j16eval[1]=IKsign(x13483);
j16eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*cj17*x13482))+((r01*sj17))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x13484=cj17*cj17;
IkReal x13485=(r01*r11);
IkReal x13486=(cj17*sj17);
IkReal x13487=((1.0)*r00);
CheckValue<IkReal> x13488=IKPowWithIntegerCheck(IKsign((((r00*r11*x13486))+(((-1.0)*x13485))+(((-1.0)*r10*x13484*x13487))+(((-1.0)*r02*r12))+((x13484*x13485))+((r01*r10*x13486)))),-1);
if(!x13488.valid){
continue;
}
CheckValue<IkReal> x13489 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*cj17*x13487))+((r01*sj17)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13489.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13488.value)))+(x13489.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x13490=IKsin(j16);
IkReal x13491=IKcos(j16);
IkReal x13492=(r11*sj17);
IkReal x13493=(r21*sj17);
IkReal x13494=((1.0)*r01*sj17);
IkReal x13495=(cj17*x13490);
IkReal x13496=((1.0)*x13490);
IkReal x13497=(cj17*x13491);
IkReal x13498=((1.0)*x13491);
evalcond[0]=(((r02*x13491))+(((-1.0)*x13490*x13494))+((r00*x13495)));
evalcond[1]=((((-1.0)*x13492*x13496))+((r10*x13495))+((r12*x13491)));
evalcond[2]=((((-1.0)*x13493*x13498))+(((-1.0)*r22*x13496))+((r20*x13497)));
evalcond[3]=((((-1.0)*x13491*x13494))+(((-1.0)*r02*x13496))+((r00*x13497)));
evalcond[4]=((1.0)+((r22*x13491))+(((-1.0)*x13493*x13496))+((r20*x13495)));
evalcond[5]=((-1.0)+(((-1.0)*r12*x13496))+(((-1.0)*x13492*x13498))+((r10*x13497)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x13499=((1.0)*cj17);
CheckValue<IkReal> x13500 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x13499))+((r11*sj17)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13500.valid){
continue;
}
CheckValue<IkReal> x13501=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13499))+(((-1.0)*r00*sj17)))),-1);
if(!x13501.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x13500.value)+(((1.5707963267949)*(x13501.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x13502=IKsin(j16);
IkReal x13503=IKcos(j16);
IkReal x13504=(r11*sj17);
IkReal x13505=(r21*sj17);
IkReal x13506=((1.0)*r01*sj17);
IkReal x13507=(cj17*x13502);
IkReal x13508=((1.0)*x13502);
IkReal x13509=(cj17*x13503);
IkReal x13510=((1.0)*x13503);
evalcond[0]=(((r02*x13503))+(((-1.0)*x13502*x13506))+((r00*x13507)));
evalcond[1]=(((r10*x13507))+((r12*x13503))+(((-1.0)*x13504*x13508)));
evalcond[2]=(((r20*x13509))+(((-1.0)*x13505*x13510))+(((-1.0)*r22*x13508)));
evalcond[3]=((((-1.0)*x13503*x13506))+(((-1.0)*r02*x13508))+((r00*x13509)));
evalcond[4]=((1.0)+((r20*x13507))+((r22*x13503))+(((-1.0)*x13505*x13508)));
evalcond[5]=((-1.0)+((r10*x13509))+(((-1.0)*r12*x13508))+(((-1.0)*x13504*x13510)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x13511=IKPowWithIntegerCheck(IKsign((((cj17*r11))+((r10*sj17)))),-1);
if(!x13511.valid){
continue;
}
CheckValue<IkReal> x13512 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*cj17*r00))+((r01*sj17)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13512.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13511.value)))+(x13512.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x13513=IKsin(j16);
IkReal x13514=IKcos(j16);
IkReal x13515=(r11*sj17);
IkReal x13516=(r21*sj17);
IkReal x13517=((1.0)*r01*sj17);
IkReal x13518=(cj17*x13513);
IkReal x13519=((1.0)*x13513);
IkReal x13520=(cj17*x13514);
IkReal x13521=((1.0)*x13514);
evalcond[0]=(((r02*x13514))+(((-1.0)*x13513*x13517))+((r00*x13518)));
evalcond[1]=((((-1.0)*x13515*x13519))+((r12*x13514))+((r10*x13518)));
evalcond[2]=((((-1.0)*r22*x13519))+((r20*x13520))+(((-1.0)*x13516*x13521)));
evalcond[3]=((((-1.0)*x13514*x13517))+((r00*x13520))+(((-1.0)*r02*x13519)));
evalcond[4]=((1.0)+((r20*x13518))+((r22*x13514))+(((-1.0)*x13516*x13519)));
evalcond[5]=((-1.0)+(((-1.0)*r12*x13519))+(((-1.0)*x13515*x13521))+((r10*x13520)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j14), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j13), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
j13=1.5707963267949;
sj13=1.0;
cj13=0;
j14=1.5707963267949;
sj14=1.0;
cj14=0;
IkReal x13522=(((cj17*r11))+((r10*sj17)));
j16eval[0]=x13522;
j16eval[1]=IKsign(x13522);
j16eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*cj17*r00))+((r01*sj17))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
j13=1.5707963267949;
sj13=1.0;
cj13=0;
j14=1.5707963267949;
sj14=1.0;
cj14=0;
IkReal x13523=((1.0)*cj17);
IkReal x13524=((((-1.0)*r00*sj17))+(((-1.0)*r01*x13523)));
j16eval[0]=x13524;
j16eval[1]=IKsign(x13524);
j16eval[2]=((IKabs(r12))+(IKabs((((r11*sj17))+(((-1.0)*r10*x13523))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
j13=1.5707963267949;
sj13=1.0;
cj13=0;
j14=1.5707963267949;
sj14=1.0;
cj14=0;
IkReal x13525=cj17*cj17;
IkReal x13526=(r01*r11);
IkReal x13527=(cj17*sj17);
IkReal x13528=((1.0)*r00);
IkReal x13529=((((-1.0)*r02*r12))+((x13525*x13526))+(((-1.0)*x13526))+((r01*r10*x13527))+(((-1.0)*r10*x13525*x13528))+((r00*r11*x13527)));
j16eval[0]=x13529;
j16eval[1]=IKsign(x13529);
j16eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*cj17*x13528))+((r01*sj17))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x13530=cj17*cj17;
IkReal x13531=(r01*r11);
IkReal x13532=(cj17*sj17);
IkReal x13533=((1.0)*r00);
CheckValue<IkReal> x13534=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x13530*x13533))+((x13530*x13531))+(((-1.0)*r02*r12))+(((-1.0)*x13531))+((r01*r10*x13532))+((r00*r11*x13532)))),-1);
if(!x13534.valid){
continue;
}
CheckValue<IkReal> x13535 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*cj17*x13533))+((r01*sj17)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13535.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13534.value)))+(x13535.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x13536=IKsin(j16);
IkReal x13537=IKcos(j16);
IkReal x13538=(r11*sj17);
IkReal x13539=(r21*sj17);
IkReal x13540=((1.0)*r01*sj17);
IkReal x13541=(cj17*x13536);
IkReal x13542=((1.0)*x13536);
IkReal x13543=(cj17*x13537);
IkReal x13544=((1.0)*x13537);
evalcond[0]=((((-1.0)*x13536*x13540))+((r02*x13537))+((r00*x13541)));
evalcond[1]=(((r10*x13541))+(((-1.0)*x13538*x13542))+((r12*x13537)));
evalcond[2]=((((-1.0)*x13539*x13544))+((r20*x13543))+(((-1.0)*r22*x13542)));
evalcond[3]=(((r00*x13543))+(((-1.0)*r02*x13542))+(((-1.0)*x13537*x13540)));
evalcond[4]=((1.0)+(((-1.0)*x13539*x13542))+((r22*x13537))+((r20*x13541)));
evalcond[5]=((-1.0)+((r10*x13543))+(((-1.0)*x13538*x13544))+(((-1.0)*r12*x13542)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x13545=((1.0)*cj17);
CheckValue<IkReal> x13546=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13545))+(((-1.0)*r00*sj17)))),-1);
if(!x13546.valid){
continue;
}
CheckValue<IkReal> x13547 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj17))+(((-1.0)*r10*x13545)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13547.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13546.value)))+(x13547.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x13548=IKsin(j16);
IkReal x13549=IKcos(j16);
IkReal x13550=(r11*sj17);
IkReal x13551=(r21*sj17);
IkReal x13552=((1.0)*r01*sj17);
IkReal x13553=(cj17*x13548);
IkReal x13554=((1.0)*x13548);
IkReal x13555=(cj17*x13549);
IkReal x13556=((1.0)*x13549);
evalcond[0]=(((r00*x13553))+(((-1.0)*x13548*x13552))+((r02*x13549)));
evalcond[1]=(((r12*x13549))+((r10*x13553))+(((-1.0)*x13550*x13554)));
evalcond[2]=((((-1.0)*x13551*x13556))+((r20*x13555))+(((-1.0)*r22*x13554)));
evalcond[3]=(((r00*x13555))+(((-1.0)*r02*x13554))+(((-1.0)*x13549*x13552)));
evalcond[4]=((1.0)+(((-1.0)*x13551*x13554))+((r22*x13549))+((r20*x13553)));
evalcond[5]=((-1.0)+((r10*x13555))+(((-1.0)*x13550*x13556))+(((-1.0)*r12*x13554)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x13557=IKPowWithIntegerCheck(IKsign((((cj17*r11))+((r10*sj17)))),-1);
if(!x13557.valid){
continue;
}
CheckValue<IkReal> x13558 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*cj17*r00))+((r01*sj17)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13558.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13557.value)))+(x13558.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x13559=IKsin(j16);
IkReal x13560=IKcos(j16);
IkReal x13561=(r11*sj17);
IkReal x13562=(r21*sj17);
IkReal x13563=((1.0)*r01*sj17);
IkReal x13564=(cj17*x13559);
IkReal x13565=((1.0)*x13559);
IkReal x13566=(cj17*x13560);
IkReal x13567=((1.0)*x13560);
evalcond[0]=(((r00*x13564))+((r02*x13560))+(((-1.0)*x13559*x13563)));
evalcond[1]=(((r10*x13564))+((r12*x13560))+(((-1.0)*x13561*x13565)));
evalcond[2]=((((-1.0)*x13562*x13567))+((r20*x13566))+(((-1.0)*r22*x13565)));
evalcond[3]=(((r00*x13566))+(((-1.0)*r02*x13565))+(((-1.0)*x13560*x13563)));
evalcond[4]=((1.0)+(((-1.0)*x13562*x13565))+((r20*x13564))+((r22*x13560)));
evalcond[5]=((-1.0)+((r10*x13566))+(((-1.0)*r12*x13565))+(((-1.0)*x13561*x13567)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j14), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j13), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
j13=1.5707963267949;
sj13=1.0;
cj13=0;
j14=-1.5707963267949;
sj14=-1.0;
cj14=0;
IkReal x13568=(((r00*sj17))+((cj17*r01)));
j16eval[0]=x13568;
j16eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*cj17*r10))+((r11*sj17))))));
j16eval[2]=IKsign(x13568);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
j13=1.5707963267949;
sj13=1.0;
cj13=0;
j14=-1.5707963267949;
sj14=-1.0;
cj14=0;
IkReal x13569=((1.0)*cj17);
IkReal x13570=((((-1.0)*r11*x13569))+(((-1.0)*r10*sj17)));
j16eval[0]=x13570;
j16eval[1]=IKsign(x13570);
j16eval[2]=((IKabs(r02))+(IKabs((((r01*sj17))+(((-1.0)*r00*x13569))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
j13=1.5707963267949;
sj13=1.0;
cj13=0;
j14=-1.5707963267949;
sj14=-1.0;
cj14=0;
IkReal x13571=cj17*cj17;
IkReal x13572=(r01*r11);
IkReal x13573=(cj17*sj17);
IkReal x13574=((1.0)*r00);
IkReal x13575=((((-1.0)*r10*x13571*x13574))+((r01*r10*x13573))+(((-1.0)*r02*r12))+(((-1.0)*x13572))+((r00*r11*x13573))+((x13571*x13572)));
j16eval[0]=x13575;
j16eval[1]=IKsign(x13575);
j16eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*cj17*x13574))+((r01*sj17))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x13576=cj17*cj17;
IkReal x13577=(r01*r11);
IkReal x13578=(cj17*sj17);
IkReal x13579=((1.0)*r00);
CheckValue<IkReal> x13580 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*cj17*x13579))+((r01*sj17)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13580.valid){
continue;
}
CheckValue<IkReal> x13581=IKPowWithIntegerCheck(IKsign((((r01*r10*x13578))+(((-1.0)*r02*r12))+(((-1.0)*x13577))+((r00*r11*x13578))+((x13576*x13577))+(((-1.0)*r10*x13576*x13579)))),-1);
if(!x13581.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x13580.value)+(((1.5707963267949)*(x13581.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x13582=IKsin(j16);
IkReal x13583=IKcos(j16);
IkReal x13584=(r11*sj17);
IkReal x13585=(r21*sj17);
IkReal x13586=((1.0)*r01*sj17);
IkReal x13587=(cj17*x13582);
IkReal x13588=((1.0)*x13582);
IkReal x13589=(cj17*x13583);
IkReal x13590=((1.0)*x13583);
evalcond[0]=(((r00*x13587))+((r02*x13583))+(((-1.0)*x13582*x13586)));
evalcond[1]=(((r12*x13583))+(((-1.0)*x13584*x13588))+((r10*x13587)));
evalcond[2]=((((-1.0)*x13585*x13590))+((r20*x13589))+(((-1.0)*r22*x13588)));
evalcond[3]=((((-1.0)*r02*x13588))+((r00*x13589))+(((-1.0)*x13583*x13586)));
evalcond[4]=((-1.0)+(((-1.0)*x13585*x13588))+((r20*x13587))+((r22*x13583)));
evalcond[5]=((-1.0)+((r10*x13589))+(((-1.0)*r12*x13588))+(((-1.0)*x13584*x13590)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x13591=((1.0)*cj17);
CheckValue<IkReal> x13592 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x13591))+((r01*sj17)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13592.valid){
continue;
}
CheckValue<IkReal> x13593=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x13591))+(((-1.0)*r10*sj17)))),-1);
if(!x13593.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x13592.value)+(((1.5707963267949)*(x13593.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x13594=IKsin(j16);
IkReal x13595=IKcos(j16);
IkReal x13596=(r11*sj17);
IkReal x13597=(r21*sj17);
IkReal x13598=((1.0)*r01*sj17);
IkReal x13599=(cj17*x13594);
IkReal x13600=((1.0)*x13594);
IkReal x13601=(cj17*x13595);
IkReal x13602=((1.0)*x13595);
evalcond[0]=(((r00*x13599))+((r02*x13595))+(((-1.0)*x13594*x13598)));
evalcond[1]=(((r10*x13599))+(((-1.0)*x13596*x13600))+((r12*x13595)));
evalcond[2]=((((-1.0)*x13597*x13602))+(((-1.0)*r22*x13600))+((r20*x13601)));
evalcond[3]=((((-1.0)*r02*x13600))+((r00*x13601))+(((-1.0)*x13595*x13598)));
evalcond[4]=((-1.0)+(((-1.0)*x13597*x13600))+((r22*x13595))+((r20*x13599)));
evalcond[5]=((-1.0)+((r10*x13601))+(((-1.0)*x13596*x13602))+(((-1.0)*r12*x13600)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x13603 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj17*r10))+((r11*sj17)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13603.valid){
continue;
}
CheckValue<IkReal> x13604=IKPowWithIntegerCheck(IKsign((((r00*sj17))+((cj17*r01)))),-1);
if(!x13604.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x13603.value)+(((1.5707963267949)*(x13604.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x13605=IKsin(j16);
IkReal x13606=IKcos(j16);
IkReal x13607=(r11*sj17);
IkReal x13608=(r21*sj17);
IkReal x13609=((1.0)*r01*sj17);
IkReal x13610=(cj17*x13605);
IkReal x13611=((1.0)*x13605);
IkReal x13612=(cj17*x13606);
IkReal x13613=((1.0)*x13606);
evalcond[0]=((((-1.0)*x13605*x13609))+((r02*x13606))+((r00*x13610)));
evalcond[1]=(((r12*x13606))+(((-1.0)*x13607*x13611))+((r10*x13610)));
evalcond[2]=((((-1.0)*x13608*x13613))+((r20*x13612))+(((-1.0)*r22*x13611)));
evalcond[3]=((((-1.0)*r02*x13611))+((r00*x13612))+(((-1.0)*x13606*x13609)));
evalcond[4]=((-1.0)+(((-1.0)*x13608*x13611))+((r20*x13610))+((r22*x13606)));
evalcond[5]=((-1.0)+(((-1.0)*x13607*x13613))+((r10*x13612))+(((-1.0)*r12*x13611)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j13, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j14), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
j13=3.14159265358979;
sj13=0;
cj13=-1.0;
j14=0;
sj14=0;
cj14=1.0;
IkReal x13614=(((cj17*r11))+((r10*sj17)));
j16eval[0]=x13614;
j16eval[1]=IKsign(x13614);
j16eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*cj17*r00))+((r01*sj17))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
j13=3.14159265358979;
sj13=0;
cj13=-1.0;
j14=0;
sj14=0;
cj14=1.0;
IkReal x13615=((1.0)*cj17);
IkReal x13616=((((-1.0)*r00*sj17))+(((-1.0)*r01*x13615)));
j16eval[0]=x13616;
j16eval[1]=IKsign(x13616);
j16eval[2]=((IKabs(r12))+(IKabs((((r11*sj17))+(((-1.0)*r10*x13615))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
j13=3.14159265358979;
sj13=0;
cj13=-1.0;
j14=0;
sj14=0;
cj14=1.0;
IkReal x13617=cj17*cj17;
IkReal x13618=(r01*r11);
IkReal x13619=(cj17*sj17);
IkReal x13620=((1.0)*r00);
IkReal x13621=((((-1.0)*r02*r12))+(((-1.0)*r10*x13617*x13620))+((r00*r11*x13619))+(((-1.0)*x13618))+((r01*r10*x13619))+((x13617*x13618)));
j16eval[0]=x13621;
j16eval[1]=IKsign(x13621);
j16eval[2]=((IKabs(((((-1.0)*cj17*x13620))+((r01*sj17)))))+(IKabs(r02)));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x13622=cj17*cj17;
IkReal x13623=(r01*r11);
IkReal x13624=(cj17*sj17);
IkReal x13625=((1.0)*r00);
CheckValue<IkReal> x13626 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*cj17*x13625))+((r01*sj17)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13626.valid){
continue;
}
CheckValue<IkReal> x13627=IKPowWithIntegerCheck(IKsign((((r01*r10*x13624))+(((-1.0)*r02*r12))+((x13622*x13623))+(((-1.0)*r10*x13622*x13625))+((r00*r11*x13624))+(((-1.0)*x13623)))),-1);
if(!x13627.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x13626.value)+(((1.5707963267949)*(x13627.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x13628=IKsin(j16);
IkReal x13629=IKcos(j16);
IkReal x13630=(r11*sj17);
IkReal x13631=(r21*sj17);
IkReal x13632=((1.0)*r01*sj17);
IkReal x13633=(cj17*x13628);
IkReal x13634=((1.0)*x13628);
IkReal x13635=(cj17*x13629);
IkReal x13636=((1.0)*x13629);
evalcond[0]=(((r02*x13629))+(((-1.0)*x13628*x13632))+((r00*x13633)));
evalcond[1]=(((r12*x13629))+((r10*x13633))+(((-1.0)*x13630*x13634)));
evalcond[2]=((((-1.0)*x13631*x13636))+(((-1.0)*r22*x13634))+((r20*x13635)));
evalcond[3]=((((-1.0)*r02*x13634))+(((-1.0)*x13629*x13632))+((r00*x13635)));
evalcond[4]=((1.0)+(((-1.0)*x13631*x13634))+((r22*x13629))+((r20*x13633)));
evalcond[5]=((-1.0)+((r10*x13635))+(((-1.0)*x13630*x13636))+(((-1.0)*r12*x13634)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x13637=((1.0)*cj17);
CheckValue<IkReal> x13638 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj17))+(((-1.0)*r10*x13637)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13638.valid){
continue;
}
CheckValue<IkReal> x13639=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13637))+(((-1.0)*r00*sj17)))),-1);
if(!x13639.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x13638.value)+(((1.5707963267949)*(x13639.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x13640=IKsin(j16);
IkReal x13641=IKcos(j16);
IkReal x13642=(r11*sj17);
IkReal x13643=(r21*sj17);
IkReal x13644=((1.0)*r01*sj17);
IkReal x13645=(cj17*x13640);
IkReal x13646=((1.0)*x13640);
IkReal x13647=(cj17*x13641);
IkReal x13648=((1.0)*x13641);
evalcond[0]=(((r02*x13641))+(((-1.0)*x13640*x13644))+((r00*x13645)));
evalcond[1]=(((r12*x13641))+((r10*x13645))+(((-1.0)*x13642*x13646)));
evalcond[2]=((((-1.0)*x13643*x13648))+((r20*x13647))+(((-1.0)*r22*x13646)));
evalcond[3]=((((-1.0)*x13641*x13644))+((r00*x13647))+(((-1.0)*r02*x13646)));
evalcond[4]=((1.0)+((r22*x13641))+(((-1.0)*x13643*x13646))+((r20*x13645)));
evalcond[5]=((-1.0)+(((-1.0)*r12*x13646))+((r10*x13647))+(((-1.0)*x13642*x13648)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x13649=IKPowWithIntegerCheck(IKsign((((cj17*r11))+((r10*sj17)))),-1);
if(!x13649.valid){
continue;
}
CheckValue<IkReal> x13650 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*cj17*r00))+((r01*sj17)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13650.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13649.value)))+(x13650.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x13651=IKsin(j16);
IkReal x13652=IKcos(j16);
IkReal x13653=(r11*sj17);
IkReal x13654=(r21*sj17);
IkReal x13655=((1.0)*r01*sj17);
IkReal x13656=(cj17*x13651);
IkReal x13657=((1.0)*x13651);
IkReal x13658=(cj17*x13652);
IkReal x13659=((1.0)*x13652);
evalcond[0]=(((r00*x13656))+(((-1.0)*x13651*x13655))+((r02*x13652)));
evalcond[1]=(((r12*x13652))+((r10*x13656))+(((-1.0)*x13653*x13657)));
evalcond[2]=(((r20*x13658))+(((-1.0)*r22*x13657))+(((-1.0)*x13654*x13659)));
evalcond[3]=(((r00*x13658))+(((-1.0)*r02*x13657))+(((-1.0)*x13652*x13655)));
evalcond[4]=((1.0)+((r20*x13656))+(((-1.0)*x13654*x13657))+((r22*x13652)));
evalcond[5]=((-1.0)+((r10*x13658))+(((-1.0)*r12*x13657))+(((-1.0)*x13653*x13659)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j13, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j14, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
j13=3.14159265358979;
sj13=0;
cj13=-1.0;
j14=3.14159265358979;
sj14=0;
cj14=-1.0;
IkReal x13660=(((r00*sj17))+((cj17*r01)));
j16eval[0]=x13660;
j16eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*cj17*r10))+((r11*sj17))))));
j16eval[2]=IKsign(x13660);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
j13=3.14159265358979;
sj13=0;
cj13=-1.0;
j14=3.14159265358979;
sj14=0;
cj14=-1.0;
IkReal x13661=((1.0)*cj17);
IkReal x13662=((((-1.0)*r11*x13661))+(((-1.0)*r10*sj17)));
j16eval[0]=x13662;
j16eval[1]=IKsign(x13662);
j16eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x13661))+((r01*sj17))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
j13=3.14159265358979;
sj13=0;
cj13=-1.0;
j14=3.14159265358979;
sj14=0;
cj14=-1.0;
IkReal x13663=cj17*cj17;
IkReal x13664=(r01*r11);
IkReal x13665=(cj17*sj17);
IkReal x13666=((1.0)*r00);
IkReal x13667=((((-1.0)*r10*x13663*x13666))+((r00*r11*x13665))+((r01*r10*x13665))+(((-1.0)*r02*r12))+(((-1.0)*x13664))+((x13663*x13664)));
j16eval[0]=x13667;
j16eval[1]=IKsign(x13667);
j16eval[2]=((IKabs(r02))+(IKabs((((r01*sj17))+(((-1.0)*cj17*x13666))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x13668=cj17*cj17;
IkReal x13669=(r01*r11);
IkReal x13670=(cj17*sj17);
IkReal x13671=((1.0)*r00);
CheckValue<IkReal> x13672 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj17))+(((-1.0)*cj17*x13671)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13672.valid){
continue;
}
CheckValue<IkReal> x13673=IKPowWithIntegerCheck(IKsign((((r00*r11*x13670))+(((-1.0)*r02*r12))+((r01*r10*x13670))+(((-1.0)*r10*x13668*x13671))+((x13668*x13669))+(((-1.0)*x13669)))),-1);
if(!x13673.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x13672.value)+(((1.5707963267949)*(x13673.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x13674=IKsin(j16);
IkReal x13675=IKcos(j16);
IkReal x13676=(r11*sj17);
IkReal x13677=(r21*sj17);
IkReal x13678=((1.0)*r01*sj17);
IkReal x13679=(cj17*x13674);
IkReal x13680=((1.0)*x13674);
IkReal x13681=(cj17*x13675);
IkReal x13682=((1.0)*x13675);
evalcond[0]=((((-1.0)*x13674*x13678))+((r02*x13675))+((r00*x13679)));
evalcond[1]=((((-1.0)*x13676*x13680))+((r12*x13675))+((r10*x13679)));
evalcond[2]=((((-1.0)*r22*x13680))+(((-1.0)*x13677*x13682))+((r20*x13681)));
evalcond[3]=((((-1.0)*x13675*x13678))+((r00*x13681))+(((-1.0)*r02*x13680)));
evalcond[4]=((-1.0)+(((-1.0)*x13677*x13680))+((r22*x13675))+((r20*x13679)));
evalcond[5]=((-1.0)+(((-1.0)*x13676*x13682))+(((-1.0)*r12*x13680))+((r10*x13681)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x13683=((1.0)*cj17);
CheckValue<IkReal> x13684 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x13683))+((r01*sj17)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13684.valid){
continue;
}
CheckValue<IkReal> x13685=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x13683))+(((-1.0)*r10*sj17)))),-1);
if(!x13685.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x13684.value)+(((1.5707963267949)*(x13685.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x13686=IKsin(j16);
IkReal x13687=IKcos(j16);
IkReal x13688=(r11*sj17);
IkReal x13689=(r21*sj17);
IkReal x13690=((1.0)*r01*sj17);
IkReal x13691=(cj17*x13686);
IkReal x13692=((1.0)*x13686);
IkReal x13693=(cj17*x13687);
IkReal x13694=((1.0)*x13687);
evalcond[0]=(((r00*x13691))+((r02*x13687))+(((-1.0)*x13686*x13690)));
evalcond[1]=(((r12*x13687))+((r10*x13691))+(((-1.0)*x13688*x13692)));
evalcond[2]=(((r20*x13693))+(((-1.0)*x13689*x13694))+(((-1.0)*r22*x13692)));
evalcond[3]=(((r00*x13693))+(((-1.0)*x13687*x13690))+(((-1.0)*r02*x13692)));
evalcond[4]=((-1.0)+((r22*x13687))+((r20*x13691))+(((-1.0)*x13689*x13692)));
evalcond[5]=((-1.0)+((r10*x13693))+(((-1.0)*x13688*x13694))+(((-1.0)*r12*x13692)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x13695 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj17*r10))+((r11*sj17)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13695.valid){
continue;
}
CheckValue<IkReal> x13696=IKPowWithIntegerCheck(IKsign((((r00*sj17))+((cj17*r01)))),-1);
if(!x13696.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x13695.value)+(((1.5707963267949)*(x13696.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x13697=IKsin(j16);
IkReal x13698=IKcos(j16);
IkReal x13699=(r11*sj17);
IkReal x13700=(r21*sj17);
IkReal x13701=((1.0)*r01*sj17);
IkReal x13702=(cj17*x13697);
IkReal x13703=((1.0)*x13697);
IkReal x13704=(cj17*x13698);
IkReal x13705=((1.0)*x13698);
evalcond[0]=(((r00*x13702))+(((-1.0)*x13697*x13701))+((r02*x13698)));
evalcond[1]=(((r10*x13702))+(((-1.0)*x13699*x13703))+((r12*x13698)));
evalcond[2]=((((-1.0)*r22*x13703))+((r20*x13704))+(((-1.0)*x13700*x13705)));
evalcond[3]=(((r00*x13704))+(((-1.0)*r02*x13703))+(((-1.0)*x13698*x13701)));
evalcond[4]=((-1.0)+((r20*x13702))+(((-1.0)*x13700*x13703))+((r22*x13698)));
evalcond[5]=((-1.0)+(((-1.0)*r12*x13703))+((r10*x13704))+(((-1.0)*x13699*x13705)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j14), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j13), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
j13=-1.5707963267949;
sj13=-1.0;
cj13=0;
j14=1.5707963267949;
sj14=1.0;
cj14=0;
IkReal x13706=(((r00*sj17))+((cj17*r01)));
j16eval[0]=x13706;
j16eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*cj17*r10))+((r11*sj17))))));
j16eval[2]=IKsign(x13706);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
j13=-1.5707963267949;
sj13=-1.0;
cj13=0;
j14=1.5707963267949;
sj14=1.0;
cj14=0;
IkReal x13707=((1.0)*cj17);
IkReal x13708=((((-1.0)*r11*x13707))+(((-1.0)*r10*sj17)));
j16eval[0]=x13708;
j16eval[1]=IKsign(x13708);
j16eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x13707))+((r01*sj17))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
j13=-1.5707963267949;
sj13=-1.0;
cj13=0;
j14=1.5707963267949;
sj14=1.0;
cj14=0;
IkReal x13709=cj17*cj17;
IkReal x13710=(r01*r11);
IkReal x13711=(cj17*sj17);
IkReal x13712=((1.0)*r00);
IkReal x13713=(((r00*r11*x13711))+((r01*r10*x13711))+(((-1.0)*x13710))+(((-1.0)*r02*r12))+((x13709*x13710))+(((-1.0)*r10*x13709*x13712)));
j16eval[0]=x13713;
j16eval[1]=IKsign(x13713);
j16eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*cj17*x13712))+((r01*sj17))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x13714=cj17*cj17;
IkReal x13715=(r01*r11);
IkReal x13716=(cj17*sj17);
IkReal x13717=((1.0)*r00);
CheckValue<IkReal> x13718=IKPowWithIntegerCheck(IKsign((((r00*r11*x13716))+((r01*r10*x13716))+(((-1.0)*x13715))+(((-1.0)*r02*r12))+(((-1.0)*r10*x13714*x13717))+((x13714*x13715)))),-1);
if(!x13718.valid){
continue;
}
CheckValue<IkReal> x13719 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*cj17*x13717))+((r01*sj17)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13719.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13718.value)))+(x13719.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x13720=IKsin(j16);
IkReal x13721=IKcos(j16);
IkReal x13722=(r11*sj17);
IkReal x13723=(r21*sj17);
IkReal x13724=((1.0)*r01*sj17);
IkReal x13725=(cj17*x13720);
IkReal x13726=((1.0)*x13720);
IkReal x13727=(cj17*x13721);
IkReal x13728=((1.0)*x13721);
evalcond[0]=(((r00*x13725))+(((-1.0)*x13720*x13724))+((r02*x13721)));
evalcond[1]=((((-1.0)*x13722*x13726))+((r12*x13721))+((r10*x13725)));
evalcond[2]=(((r20*x13727))+(((-1.0)*r22*x13726))+(((-1.0)*x13723*x13728)));
evalcond[3]=(((r00*x13727))+(((-1.0)*r02*x13726))+(((-1.0)*x13721*x13724)));
evalcond[4]=((-1.0)+((r20*x13725))+((r22*x13721))+(((-1.0)*x13723*x13726)));
evalcond[5]=((-1.0)+(((-1.0)*x13722*x13728))+((r10*x13727))+(((-1.0)*r12*x13726)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x13729=((1.0)*cj17);
CheckValue<IkReal> x13730 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj17))+(((-1.0)*r00*x13729)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13730.valid){
continue;
}
CheckValue<IkReal> x13731=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x13729))+(((-1.0)*r10*sj17)))),-1);
if(!x13731.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x13730.value)+(((1.5707963267949)*(x13731.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x13732=IKsin(j16);
IkReal x13733=IKcos(j16);
IkReal x13734=(r11*sj17);
IkReal x13735=(r21*sj17);
IkReal x13736=((1.0)*r01*sj17);
IkReal x13737=(cj17*x13732);
IkReal x13738=((1.0)*x13732);
IkReal x13739=(cj17*x13733);
IkReal x13740=((1.0)*x13733);
evalcond[0]=(((r00*x13737))+((r02*x13733))+(((-1.0)*x13732*x13736)));
evalcond[1]=(((r10*x13737))+(((-1.0)*x13734*x13738))+((r12*x13733)));
evalcond[2]=((((-1.0)*r22*x13738))+(((-1.0)*x13735*x13740))+((r20*x13739)));
evalcond[3]=((((-1.0)*x13733*x13736))+((r00*x13739))+(((-1.0)*r02*x13738)));
evalcond[4]=((-1.0)+(((-1.0)*x13735*x13738))+((r22*x13733))+((r20*x13737)));
evalcond[5]=((-1.0)+(((-1.0)*r12*x13738))+((r10*x13739))+(((-1.0)*x13734*x13740)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x13741 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj17*r10))+((r11*sj17)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13741.valid){
continue;
}
CheckValue<IkReal> x13742=IKPowWithIntegerCheck(IKsign((((r00*sj17))+((cj17*r01)))),-1);
if(!x13742.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x13741.value)+(((1.5707963267949)*(x13742.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x13743=IKsin(j16);
IkReal x13744=IKcos(j16);
IkReal x13745=(r11*sj17);
IkReal x13746=(r21*sj17);
IkReal x13747=((1.0)*r01*sj17);
IkReal x13748=(cj17*x13743);
IkReal x13749=((1.0)*x13743);
IkReal x13750=(cj17*x13744);
IkReal x13751=((1.0)*x13744);
evalcond[0]=(((r02*x13744))+(((-1.0)*x13743*x13747))+((r00*x13748)));
evalcond[1]=((((-1.0)*x13745*x13749))+((r10*x13748))+((r12*x13744)));
evalcond[2]=((((-1.0)*x13746*x13751))+(((-1.0)*r22*x13749))+((r20*x13750)));
evalcond[3]=((((-1.0)*r02*x13749))+(((-1.0)*x13744*x13747))+((r00*x13750)));
evalcond[4]=((-1.0)+((r20*x13748))+(((-1.0)*x13746*x13749))+((r22*x13744)));
evalcond[5]=((-1.0)+(((-1.0)*r12*x13749))+((r10*x13750))+(((-1.0)*x13745*x13751)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j14), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j13), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
j13=-1.5707963267949;
sj13=-1.0;
cj13=0;
j14=-1.5707963267949;
sj14=-1.0;
cj14=0;
IkReal x13752=(((cj17*r11))+((r10*sj17)));
j16eval[0]=x13752;
j16eval[1]=IKsign(x13752);
j16eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*cj17*r00))+((r01*sj17))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
j13=-1.5707963267949;
sj13=-1.0;
cj13=0;
j14=-1.5707963267949;
sj14=-1.0;
cj14=0;
IkReal x13753=((1.0)*cj17);
IkReal x13754=((((-1.0)*r00*sj17))+(((-1.0)*r01*x13753)));
j16eval[0]=x13754;
j16eval[1]=IKsign(x13754);
j16eval[2]=((IKabs(r12))+(IKabs((((r11*sj17))+(((-1.0)*r10*x13753))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
j13=-1.5707963267949;
sj13=-1.0;
cj13=0;
j14=-1.5707963267949;
sj14=-1.0;
cj14=0;
IkReal x13755=cj17*cj17;
IkReal x13756=(r01*r11);
IkReal x13757=(cj17*sj17);
IkReal x13758=((1.0)*r00);
IkReal x13759=(((r00*r11*x13757))+(((-1.0)*x13756))+(((-1.0)*r02*r12))+((r01*r10*x13757))+(((-1.0)*r10*x13755*x13758))+((x13755*x13756)));
j16eval[0]=x13759;
j16eval[1]=IKsign(x13759);
j16eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*cj17*x13758))+((r01*sj17))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x13760=cj17*cj17;
IkReal x13761=(r01*r11);
IkReal x13762=(cj17*sj17);
IkReal x13763=((1.0)*r00);
CheckValue<IkReal> x13764=IKPowWithIntegerCheck(IKsign((((r01*r10*x13762))+((x13760*x13761))+(((-1.0)*x13761))+(((-1.0)*r02*r12))+((r00*r11*x13762))+(((-1.0)*r10*x13760*x13763)))),-1);
if(!x13764.valid){
continue;
}
CheckValue<IkReal> x13765 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*cj17*x13763))+((r01*sj17)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13765.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13764.value)))+(x13765.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x13766=IKsin(j16);
IkReal x13767=IKcos(j16);
IkReal x13768=(r11*sj17);
IkReal x13769=(r21*sj17);
IkReal x13770=((1.0)*r01*sj17);
IkReal x13771=(cj17*x13766);
IkReal x13772=((1.0)*x13766);
IkReal x13773=(cj17*x13767);
IkReal x13774=((1.0)*x13767);
evalcond[0]=(((r00*x13771))+(((-1.0)*x13766*x13770))+((r02*x13767)));
evalcond[1]=(((r10*x13771))+(((-1.0)*x13768*x13772))+((r12*x13767)));
evalcond[2]=((((-1.0)*r22*x13772))+((r20*x13773))+(((-1.0)*x13769*x13774)));
evalcond[3]=(((r00*x13773))+(((-1.0)*r02*x13772))+(((-1.0)*x13767*x13770)));
evalcond[4]=((1.0)+((r20*x13771))+(((-1.0)*x13769*x13772))+((r22*x13767)));
evalcond[5]=((-1.0)+((r10*x13773))+(((-1.0)*r12*x13772))+(((-1.0)*x13768*x13774)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x13775=((1.0)*cj17);
CheckValue<IkReal> x13776=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13775))+(((-1.0)*r00*sj17)))),-1);
if(!x13776.valid){
continue;
}
CheckValue<IkReal> x13777 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj17))+(((-1.0)*r10*x13775)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13777.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13776.value)))+(x13777.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x13778=IKsin(j16);
IkReal x13779=IKcos(j16);
IkReal x13780=(r11*sj17);
IkReal x13781=(r21*sj17);
IkReal x13782=((1.0)*r01*sj17);
IkReal x13783=(cj17*x13778);
IkReal x13784=((1.0)*x13778);
IkReal x13785=(cj17*x13779);
IkReal x13786=((1.0)*x13779);
evalcond[0]=(((r00*x13783))+(((-1.0)*x13778*x13782))+((r02*x13779)));
evalcond[1]=((((-1.0)*x13780*x13784))+((r10*x13783))+((r12*x13779)));
evalcond[2]=((((-1.0)*x13781*x13786))+((r20*x13785))+(((-1.0)*r22*x13784)));
evalcond[3]=((((-1.0)*r02*x13784))+((r00*x13785))+(((-1.0)*x13779*x13782)));
evalcond[4]=((1.0)+(((-1.0)*x13781*x13784))+((r22*x13779))+((r20*x13783)));
evalcond[5]=((-1.0)+(((-1.0)*r12*x13784))+(((-1.0)*x13780*x13786))+((r10*x13785)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x13787=IKPowWithIntegerCheck(IKsign((((cj17*r11))+((r10*sj17)))),-1);
if(!x13787.valid){
continue;
}
CheckValue<IkReal> x13788 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*cj17*r00))+((r01*sj17)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13788.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13787.value)))+(x13788.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x13789=IKsin(j16);
IkReal x13790=IKcos(j16);
IkReal x13791=(r11*sj17);
IkReal x13792=(r21*sj17);
IkReal x13793=((1.0)*r01*sj17);
IkReal x13794=(cj17*x13789);
IkReal x13795=((1.0)*x13789);
IkReal x13796=(cj17*x13790);
IkReal x13797=((1.0)*x13790);
evalcond[0]=(((r00*x13794))+((r02*x13790))+(((-1.0)*x13789*x13793)));
evalcond[1]=((((-1.0)*x13791*x13795))+((r10*x13794))+((r12*x13790)));
evalcond[2]=((((-1.0)*x13792*x13797))+((r20*x13796))+(((-1.0)*r22*x13795)));
evalcond[3]=((((-1.0)*x13790*x13793))+(((-1.0)*r02*x13795))+((r00*x13796)));
evalcond[4]=((1.0)+(((-1.0)*x13792*x13795))+((r22*x13790))+((r20*x13794)));
evalcond[5]=((-1.0)+(((-1.0)*x13791*x13797))+((r10*x13796))+(((-1.0)*r12*x13795)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j16]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x13798=(cj14*sj13);
IkReal x13799=(r11*sj17);
IkReal x13800=(cj13*sj14);
IkReal x13801=((1.0)*cj17*r10);
CheckValue<IkReal> x13802 = IKatan2WithCheck(IkReal((((r12*x13800))+((r12*x13798)))),IkReal((((x13799*x13800))+(((-1.0)*x13800*x13801))+(((-1.0)*x13798*x13801))+((x13798*x13799)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13802.valid){
continue;
}
CheckValue<IkReal> x13803=IKPowWithIntegerCheck(IKsign((((r20*sj17))+((cj17*r21)))),-1);
if(!x13803.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x13802.value)+(((1.5707963267949)*(x13803.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x13804=IKsin(j16);
IkReal x13805=IKcos(j16);
IkReal x13806=((1.0)*sj17);
IkReal x13807=(cj17*x13804);
IkReal x13808=(cj17*x13805);
IkReal x13809=((1.0)*x13804);
evalcond[0]=(((r12*x13805))+(((-1.0)*r11*x13804*x13806))+((r10*x13807)));
evalcond[1]=((((-1.0)*r22*x13809))+((r20*x13808))+(((-1.0)*r21*x13805*x13806)));
evalcond[2]=(((r00*x13808))+(((-1.0)*r02*x13809))+(((-1.0)*r01*x13805*x13806)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x13805*x13806))+(((-1.0)*r12*x13809))+((r10*x13808)));
evalcond[4]=(((cj14*sj13))+((r00*x13807))+((cj13*sj14))+(((-1.0)*r01*x13804*x13806))+((r02*x13805)));
evalcond[5]=((((-1.0)*cj13*cj14))+(((-1.0)*r21*x13804*x13806))+((sj13*sj14))+((r22*x13805))+((r20*x13807)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x13810=((1.0)*sj17);
CheckValue<IkReal> x13811=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj17*r01))+(((-1.0)*r00*x13810)))),-1);
if(!x13811.valid){
continue;
}
CheckValue<IkReal> x13812 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x13810))+((cj17*r20)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x13812.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13811.value)))+(x13812.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x13813=IKsin(j16);
IkReal x13814=IKcos(j16);
IkReal x13815=((1.0)*sj17);
IkReal x13816=(cj17*x13813);
IkReal x13817=(cj17*x13814);
IkReal x13818=((1.0)*x13813);
evalcond[0]=(((r10*x13816))+((r12*x13814))+(((-1.0)*r11*x13813*x13815)));
evalcond[1]=((((-1.0)*r22*x13818))+(((-1.0)*r21*x13814*x13815))+((r20*x13817)));
evalcond[2]=(((r00*x13817))+(((-1.0)*r01*x13814*x13815))+(((-1.0)*r02*x13818)));
evalcond[3]=((-1.0)+((r10*x13817))+(((-1.0)*r12*x13818))+(((-1.0)*r11*x13814*x13815)));
evalcond[4]=(((cj14*sj13))+((r00*x13816))+((cj13*sj14))+(((-1.0)*r01*x13813*x13815))+((r02*x13814)));
evalcond[5]=((((-1.0)*cj13*cj14))+(((-1.0)*r21*x13813*x13815))+((r22*x13814))+((sj13*sj14))+((r20*x13816)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x13819 = IKatan2WithCheck(IkReal((((cj17*r00))+(((-1.0)*r01*sj17)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x13819.valid){
continue;
}
CheckValue<IkReal> x13820=IKPowWithIntegerCheck(IKsign((((r20*sj17))+((cj17*r21)))),-1);
if(!x13820.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x13819.value)+(((1.5707963267949)*(x13820.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x13821=IKsin(j16);
IkReal x13822=IKcos(j16);
IkReal x13823=((1.0)*sj17);
IkReal x13824=(cj17*x13821);
IkReal x13825=(cj17*x13822);
IkReal x13826=((1.0)*x13821);
evalcond[0]=((((-1.0)*r11*x13821*x13823))+((r10*x13824))+((r12*x13822)));
evalcond[1]=((((-1.0)*r22*x13826))+(((-1.0)*r21*x13822*x13823))+((r20*x13825)));
evalcond[2]=(((r00*x13825))+(((-1.0)*r01*x13822*x13823))+(((-1.0)*r02*x13826)));
evalcond[3]=((-1.0)+((r10*x13825))+(((-1.0)*r12*x13826))+(((-1.0)*r11*x13822*x13823)));
evalcond[4]=(((cj14*sj13))+((r00*x13824))+((cj13*sj14))+((r02*x13822))+(((-1.0)*r01*x13821*x13823)));
evalcond[5]=((((-1.0)*cj13*cj14))+(((-1.0)*r21*x13821*x13823))+((r22*x13822))+((sj13*sj14))+((r20*x13824)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13827=((-1.0)*r00);
IkReal x13829 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13829)==0){
continue;
}
IkReal x13828=pow(x13829,-0.5);
CheckValue<IkReal> x13830 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13827),IKFAST_ATAN2_MAGTHRESH);
if(!x13830.valid){
continue;
}
IkReal gconst30=((-1.0)*(x13830.value));
IkReal gconst31=(r01*x13828);
IkReal gconst32=(x13827*x13828);
CheckValue<IkReal> x13831 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13831.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j17+(x13831.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
IkReal x13832=((-1.0)*r00);
IkReal x13833=x13828;
CheckValue<IkReal> x13835 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13832),IKFAST_ATAN2_MAGTHRESH);
if(!x13835.valid){
continue;
}
IkReal x13834=((-1.0)*(x13835.value));
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj17=gconst31;
cj17=gconst32;
j17=x13834;
IkReal gconst30=x13834;
IkReal gconst31=(r01*x13833);
IkReal gconst32=(x13832*x13833);
j16eval[0]=1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
IkReal x13836=((-1.0)*r00);
IkReal x13837=x13828;
CheckValue<IkReal> x13839 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13836),IKFAST_ATAN2_MAGTHRESH);
if(!x13839.valid){
continue;
}
IkReal x13838=((-1.0)*(x13839.value));
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj17=gconst31;
cj17=gconst32;
j17=x13838;
IkReal gconst30=x13838;
IkReal gconst31=(r01*x13837);
IkReal gconst32=(x13836*x13837);
CheckValue<IkReal> x13847=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x13847.valid){
continue;
}
IkReal x13840=x13847.value;
IkReal x13841=(cj15*x13840);
IkReal x13842=(r21*x13841);
IkReal x13843=(r10*x13841);
IkReal x13844=(r11*x13841);
IkReal x13845=(r20*x13841);
IkReal x13846=(r00*r01*x13841);
j16eval[0]=IKsign((((r20*x13843*(r00*r00)))+((r11*x13842*(r01*r01)))+((cj15*r12*r22))+((r00*r01*r20*x13844))+((r00*r01*r10*x13842))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
IkReal x13848=((-1.0)*r00);
IkReal x13849=x13828;
CheckValue<IkReal> x13851 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13848),IKFAST_ATAN2_MAGTHRESH);
if(!x13851.valid){
continue;
}
IkReal x13850=((-1.0)*(x13851.value));
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj17=gconst31;
cj17=gconst32;
j17=x13850;
IkReal gconst30=x13850;
IkReal gconst31=(r01*x13849);
IkReal gconst32=(x13848*x13849);
CheckValue<IkReal> x13859=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x13859.valid){
continue;
}
IkReal x13852=x13859.value;
IkReal x13853=(sj15*x13852);
IkReal x13854=(r21*x13853);
IkReal x13855=(r10*x13853);
IkReal x13856=(r11*x13853);
IkReal x13857=(r20*x13853);
IkReal x13858=(r00*r01*x13853);
j16eval[0]=IKsign((((r00*r01*r20*x13856))+((r00*r01*r10*x13854))+((r12*r22*sj15))+((r11*x13854*(r01*r01)))+((r20*x13855*(r00*r00)))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x13860=gconst31*gconst31;
IkReal x13861=gconst32*gconst32;
IkReal x13862=(cj15*r22);
IkReal x13863=(r21*sj15);
IkReal x13864=(cj15*r21);
IkReal x13865=((1.0)*r11);
IkReal x13866=(gconst31*gconst32);
IkReal x13867=((1.0)*gconst31*r10);
IkReal x13868=(r20*x13861);
CheckValue<IkReal> x13869 = IKatan2WithCheck(IkReal(((((-1.0)*cj15*r10*r20*x13866))+(((-1.0)*cj15*x13865*x13868))+((r11*x13864*x13866))+((r10*x13860*x13864)))),IkReal(((((-1.0)*x13862*x13867))+(((-1.0)*gconst32*x13862*x13865)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13869.valid){
continue;
}
CheckValue<IkReal> x13870=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj15*x13865*x13866))+((r11*x13860*x13863))+((r10*sj15*x13868))+((r12*r22*sj15))+(((-1.0)*r10*x13863*x13866)))),-1);
if(!x13870.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x13869.value)+(((1.5707963267949)*(x13870.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x13871=IKcos(j16);
IkReal x13872=IKsin(j16);
IkReal x13873=(sj13*sj14);
IkReal x13874=(gconst31*r11);
IkReal x13875=(cj15*gconst31);
IkReal x13876=((1.0)*r10);
IkReal x13877=((1.0)*gconst32);
IkReal x13878=((1.0)*cj14);
IkReal x13879=(gconst31*sj15);
IkReal x13880=(gconst31*r21);
IkReal x13881=(cj13*sj14);
IkReal x13882=(gconst32*sj15);
IkReal x13883=(cj13*x13878);
IkReal x13884=((1.0)*x13871);
IkReal x13885=(r01*x13872);
IkReal x13886=(sj15*x13872);
IkReal x13887=((1.0)*x13872);
IkReal x13888=(cj15*x13872);
IkReal x13889=(gconst32*x13871);
evalcond[0]=(((r20*x13889))+(((-1.0)*x13880*x13884))+(((-1.0)*r22*x13887)));
evalcond[1]=((((-1.0)*r02*x13887))+(((-1.0)*gconst31*r01*x13884))+((r00*x13889)));
evalcond[2]=((-1.0)+((r10*x13889))+(((-1.0)*x13874*x13884))+(((-1.0)*r12*x13887)));
evalcond[3]=((((-1.0)*cj15*r12*x13884))+(((-1.0)*gconst32*x13876*x13888))+((r11*x13882))+((r10*x13879))+((x13874*x13888)));
evalcond[4]=((((-1.0)*cj15*r11*x13877))+(((-1.0)*r12*sj15*x13884))+(((-1.0)*x13875*x13876))+(((-1.0)*x13872*x13876*x13882))+((x13874*x13886)));
evalcond[5]=((((-1.0)*r00*x13877*x13888))+x13873+((r00*x13879))+((r01*x13882))+(((-1.0)*x13883))+((x13875*x13885))+(((-1.0)*cj15*r02*x13884)));
evalcond[6]=((((-1.0)*cj15*r22*x13884))+((r21*x13872*x13875))+((r20*x13879))+(((-1.0)*sj13*x13878))+(((-1.0)*r20*x13877*x13888))+(((-1.0)*x13881))+((r21*x13882)));
evalcond[7]=((((-1.0)*r02*sj15*x13884))+(((-1.0)*cj15*r01*x13877))+(((-1.0)*r00*x13877*x13886))+((cj14*sj13))+x13881+((x13879*x13885))+(((-1.0)*r00*x13875)));
evalcond[8]=((((-1.0)*r22*sj15*x13884))+x13873+(((-1.0)*r20*x13875))+((r21*x13872*x13879))+(((-1.0)*r20*x13877*x13886))+(((-1.0)*x13883))+(((-1.0)*cj15*r21*x13877)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x13890=gconst32*gconst32;
IkReal x13891=gconst31*gconst31;
IkReal x13892=((1.0)*r21);
IkReal x13893=(r20*sj15);
IkReal x13894=(gconst31*sj15);
IkReal x13895=(gconst32*r11);
IkReal x13896=(cj15*r20);
IkReal x13897=(gconst31*gconst32*r10);
CheckValue<IkReal> x13898=IKPowWithIntegerCheck(IKsign((((cj15*r12*r22))+(((-1.0)*cj15*x13892*x13897))+((cj15*r11*r21*x13891))+(((-1.0)*gconst31*x13895*x13896))+((r10*x13890*x13896)))),-1);
if(!x13898.valid){
continue;
}
CheckValue<IkReal> x13899 = IKatan2WithCheck(IkReal(((((-1.0)*r10*sj15*x13891*x13892))+(((-1.0)*x13892*x13894*x13895))+((r11*x13890*x13893))+((x13893*x13897)))),IkReal((((r10*r22*x13894))+((r22*sj15*x13895)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13899.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13898.value)))+(x13899.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x13900=IKcos(j16);
IkReal x13901=IKsin(j16);
IkReal x13902=(sj13*sj14);
IkReal x13903=(gconst31*r11);
IkReal x13904=(cj15*gconst31);
IkReal x13905=((1.0)*r10);
IkReal x13906=((1.0)*gconst32);
IkReal x13907=((1.0)*cj14);
IkReal x13908=(gconst31*sj15);
IkReal x13909=(gconst31*r21);
IkReal x13910=(cj13*sj14);
IkReal x13911=(gconst32*sj15);
IkReal x13912=(cj13*x13907);
IkReal x13913=((1.0)*x13900);
IkReal x13914=(r01*x13901);
IkReal x13915=(sj15*x13901);
IkReal x13916=((1.0)*x13901);
IkReal x13917=(cj15*x13901);
IkReal x13918=(gconst32*x13900);
evalcond[0]=((((-1.0)*x13909*x13913))+(((-1.0)*r22*x13916))+((r20*x13918)));
evalcond[1]=((((-1.0)*gconst31*r01*x13913))+((r00*x13918))+(((-1.0)*r02*x13916)));
evalcond[2]=((-1.0)+((r10*x13918))+(((-1.0)*r12*x13916))+(((-1.0)*x13903*x13913)));
evalcond[3]=(((r10*x13908))+(((-1.0)*gconst32*x13905*x13917))+((x13903*x13917))+((r11*x13911))+(((-1.0)*cj15*r12*x13913)));
evalcond[4]=((((-1.0)*x13901*x13905*x13911))+(((-1.0)*r12*sj15*x13913))+((x13903*x13915))+(((-1.0)*x13904*x13905))+(((-1.0)*cj15*r11*x13906)));
evalcond[5]=((((-1.0)*cj15*r02*x13913))+(((-1.0)*r00*x13906*x13917))+x13902+((r00*x13908))+((r01*x13911))+((x13904*x13914))+(((-1.0)*x13912)));
evalcond[6]=((((-1.0)*r20*x13906*x13917))+(((-1.0)*x13910))+(((-1.0)*sj13*x13907))+((r20*x13908))+((r21*x13911))+((r21*x13901*x13904))+(((-1.0)*cj15*r22*x13913)));
evalcond[7]=((((-1.0)*r02*sj15*x13913))+((cj14*sj13))+(((-1.0)*r00*x13906*x13915))+x13910+(((-1.0)*r00*x13904))+(((-1.0)*cj15*r01*x13906))+((x13908*x13914)));
evalcond[8]=((((-1.0)*r20*x13904))+(((-1.0)*r20*x13906*x13915))+(((-1.0)*r22*sj15*x13913))+x13902+(((-1.0)*cj15*r21*x13906))+(((-1.0)*x13912))+((r21*x13901*x13908)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x13919 = IKatan2WithCheck(IkReal((((gconst32*r00))+(((-1.0)*gconst31*r01)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x13919.valid){
continue;
}
CheckValue<IkReal> x13920=IKPowWithIntegerCheck(IKsign((((gconst31*r20))+((gconst32*r21)))),-1);
if(!x13920.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x13919.value)+(((1.5707963267949)*(x13920.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x13921=IKcos(j16);
IkReal x13922=IKsin(j16);
IkReal x13923=(sj13*sj14);
IkReal x13924=(gconst31*r11);
IkReal x13925=(cj15*gconst31);
IkReal x13926=((1.0)*r10);
IkReal x13927=((1.0)*gconst32);
IkReal x13928=((1.0)*cj14);
IkReal x13929=(gconst31*sj15);
IkReal x13930=(gconst31*r21);
IkReal x13931=(cj13*sj14);
IkReal x13932=(gconst32*sj15);
IkReal x13933=(cj13*x13928);
IkReal x13934=((1.0)*x13921);
IkReal x13935=(r01*x13922);
IkReal x13936=(sj15*x13922);
IkReal x13937=((1.0)*x13922);
IkReal x13938=(cj15*x13922);
IkReal x13939=(gconst32*x13921);
evalcond[0]=(((r20*x13939))+(((-1.0)*r22*x13937))+(((-1.0)*x13930*x13934)));
evalcond[1]=((((-1.0)*gconst31*r01*x13934))+((r00*x13939))+(((-1.0)*r02*x13937)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x13937))+(((-1.0)*x13924*x13934))+((r10*x13939)));
evalcond[3]=(((r11*x13932))+(((-1.0)*cj15*r12*x13934))+((r10*x13929))+(((-1.0)*gconst32*x13926*x13938))+((x13924*x13938)));
evalcond[4]=((((-1.0)*r12*sj15*x13934))+(((-1.0)*x13925*x13926))+((x13924*x13936))+(((-1.0)*x13922*x13926*x13932))+(((-1.0)*cj15*r11*x13927)));
evalcond[5]=(((x13925*x13935))+(((-1.0)*cj15*r02*x13934))+((r01*x13932))+x13923+(((-1.0)*x13933))+((r00*x13929))+(((-1.0)*r00*x13927*x13938)));
evalcond[6]=(((r21*x13922*x13925))+((r20*x13929))+((r21*x13932))+(((-1.0)*x13931))+(((-1.0)*sj13*x13928))+(((-1.0)*r20*x13927*x13938))+(((-1.0)*cj15*r22*x13934)));
evalcond[7]=((((-1.0)*r02*sj15*x13934))+((cj14*sj13))+x13931+((x13929*x13935))+(((-1.0)*r00*x13925))+(((-1.0)*r00*x13927*x13936))+(((-1.0)*cj15*r01*x13927)));
evalcond[8]=((((-1.0)*r20*x13925))+((r21*x13922*x13929))+(((-1.0)*cj15*r21*x13927))+(((-1.0)*r22*sj15*x13934))+x13923+(((-1.0)*x13933))+(((-1.0)*r20*x13927*x13936)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13940=((-1.0)*r01);
IkReal x13942 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13942)==0){
continue;
}
IkReal x13941=pow(x13942,-0.5);
CheckValue<IkReal> x13943 = IKatan2WithCheck(IkReal(x13940),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13943.valid){
continue;
}
IkReal gconst33=((3.14159265358979)+(((-1.0)*(x13943.value))));
IkReal gconst34=(x13940*x13941);
IkReal gconst35=((1.0)*r00*x13941);
CheckValue<IkReal> x13944 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13944.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j17+(x13944.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
IkReal x13945=((-1.0)*r01);
CheckValue<IkReal> x13948 = IKatan2WithCheck(IkReal(x13945),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13948.valid){
continue;
}
IkReal x13946=((1.0)*(x13948.value));
IkReal x13947=x13941;
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj17=gconst34;
cj17=gconst35;
j17=((3.14159265)+(((-1.0)*x13946)));
IkReal gconst33=((3.14159265358979)+(((-1.0)*x13946)));
IkReal gconst34=(x13945*x13947);
IkReal gconst35=((1.0)*r00*x13947);
j16eval[0]=1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[4];
IkReal x13949=((-1.0)*r01);
CheckValue<IkReal> x13952 = IKatan2WithCheck(IkReal(x13949),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13952.valid){
continue;
}
IkReal x13950=((1.0)*(x13952.value));
IkReal x13951=x13941;
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj17=gconst34;
cj17=gconst35;
j17=((3.14159265)+(((-1.0)*x13950)));
IkReal gconst33=((3.14159265358979)+(((-1.0)*x13950)));
IkReal gconst34=(x13949*x13951);
IkReal gconst35=((1.0)*r00*x13951);
j16eval[0]=0;
j16eval[1]=r22;
j16eval[2]=((1.0)+(((-1.0)*(r02*r02))));
j16eval[3]=0;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  || IKabs(j16eval[3]) < 0.0000010000000000  )
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x13953=gconst35*gconst35;
IkReal x13954=gconst34*gconst34;
IkReal x13955=(r10*sj15);
IkReal x13956=(r11*sj15);
IkReal x13957=(cj15*r11);
IkReal x13958=(cj15*r10);
IkReal x13959=(r20*x13953);
IkReal x13960=(r21*x13954);
IkReal x13961=(gconst34*gconst35*r20);
IkReal x13962=((1.0)*gconst34*gconst35*r21);
CheckValue<IkReal> x13963=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13957*x13961))+((x13957*x13960))+((cj15*r12*r22))+((x13958*x13959))+(((-1.0)*x13958*x13962)))),-1);
if(!x13963.valid){
continue;
}
CheckValue<IkReal> x13964 = IKatan2WithCheck(IkReal(((((-1.0)*x13955*x13960))+((x13955*x13961))+((x13956*x13959))+(((-1.0)*x13956*x13962)))),IkReal((((gconst34*r22*x13955))+((gconst35*r22*x13956)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13964.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13963.value)))+(x13964.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x13965=IKcos(j16);
IkReal x13966=IKsin(j16);
IkReal x13967=(sj13*sj14);
IkReal x13968=((1.0)*gconst34);
IkReal x13969=(cj15*r10);
IkReal x13970=((1.0)*cj15);
IkReal x13971=(r01*sj15);
IkReal x13972=(gconst35*r21);
IkReal x13973=((1.0)*cj13);
IkReal x13974=((1.0)*sj15);
IkReal x13975=(cj14*sj13);
IkReal x13976=(r11*sj15);
IkReal x13977=(gconst34*sj15);
IkReal x13978=(cj14*x13973);
IkReal x13979=(r12*x13965);
IkReal x13980=(gconst35*x13966);
IkReal x13981=(gconst35*x13965);
IkReal x13982=(gconst34*x13966);
IkReal x13983=((1.0)*x13966);
IkReal x13984=(r22*x13965);
IkReal x13985=(r02*x13965);
evalcond[0]=(((r20*x13981))+(((-1.0)*r22*x13983))+(((-1.0)*r21*x13965*x13968)));
evalcond[1]=(((r00*x13981))+(((-1.0)*r02*x13983))+(((-1.0)*r01*x13965*x13968)));
evalcond[2]=((-1.0)+(((-1.0)*r11*x13965*x13968))+((r10*x13981))+(((-1.0)*r12*x13983)));
evalcond[3]=(((cj15*r11*x13982))+((r10*x13977))+((gconst35*x13976))+(((-1.0)*x13970*x13979))+(((-1.0)*x13969*x13980)));
evalcond[4]=(((x13976*x13982))+(((-1.0)*gconst35*r11*x13970))+(((-1.0)*x13968*x13969))+(((-1.0)*r10*x13974*x13980))+(((-1.0)*x13974*x13979)));
evalcond[5]=(((cj15*r01*x13982))+x13967+(((-1.0)*x13970*x13985))+((r00*x13977))+(((-1.0)*x13978))+((gconst35*x13971))+(((-1.0)*r00*x13970*x13980)));
evalcond[6]=((((-1.0)*x13970*x13984))+((r20*x13977))+(((-1.0)*x13975))+((sj15*x13972))+(((-1.0)*sj14*x13973))+((cj15*r21*x13982))+(((-1.0)*r20*x13970*x13980)));
evalcond[7]=(((x13971*x13982))+x13975+(((-1.0)*x13974*x13985))+((cj13*sj14))+(((-1.0)*cj15*r00*x13968))+(((-1.0)*gconst35*r01*x13970))+(((-1.0)*r00*x13974*x13980)));
evalcond[8]=(x13967+(((-1.0)*x13974*x13984))+(((-1.0)*r20*x13974*x13980))+(((-1.0)*cj15*r20*x13968))+((r21*x13966*x13977))+(((-1.0)*x13978))+(((-1.0)*x13970*x13972)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x13986=((1.0)*gconst34);
CheckValue<IkReal> x13987=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst35*r01))+(((-1.0)*r00*x13986)))),-1);
if(!x13987.valid){
continue;
}
CheckValue<IkReal> x13988 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x13986))+((gconst35*r20)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x13988.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13987.value)))+(x13988.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x13989=IKcos(j16);
IkReal x13990=IKsin(j16);
IkReal x13991=(sj13*sj14);
IkReal x13992=((1.0)*gconst34);
IkReal x13993=(cj15*r10);
IkReal x13994=((1.0)*cj15);
IkReal x13995=(r01*sj15);
IkReal x13996=(gconst35*r21);
IkReal x13997=((1.0)*cj13);
IkReal x13998=((1.0)*sj15);
IkReal x13999=(cj14*sj13);
IkReal x14000=(r11*sj15);
IkReal x14001=(gconst34*sj15);
IkReal x14002=(cj14*x13997);
IkReal x14003=(r12*x13989);
IkReal x14004=(gconst35*x13990);
IkReal x14005=(gconst35*x13989);
IkReal x14006=(gconst34*x13990);
IkReal x14007=((1.0)*x13990);
IkReal x14008=(r22*x13989);
IkReal x14009=(r02*x13989);
evalcond[0]=((((-1.0)*r21*x13989*x13992))+((r20*x14005))+(((-1.0)*r22*x14007)));
evalcond[1]=((((-1.0)*r01*x13989*x13992))+(((-1.0)*r02*x14007))+((r00*x14005)));
evalcond[2]=((-1.0)+((r10*x14005))+(((-1.0)*r11*x13989*x13992))+(((-1.0)*r12*x14007)));
evalcond[3]=(((r10*x14001))+(((-1.0)*x13994*x14003))+((gconst35*x14000))+((cj15*r11*x14006))+(((-1.0)*x13993*x14004)));
evalcond[4]=((((-1.0)*x13992*x13993))+(((-1.0)*gconst35*r11*x13994))+((x14000*x14006))+(((-1.0)*r10*x13998*x14004))+(((-1.0)*x13998*x14003)));
evalcond[5]=(((gconst35*x13995))+x13991+(((-1.0)*r00*x13994*x14004))+(((-1.0)*x13994*x14009))+((r00*x14001))+((cj15*r01*x14006))+(((-1.0)*x14002)));
evalcond[6]=((((-1.0)*sj14*x13997))+((cj15*r21*x14006))+(((-1.0)*x13994*x14008))+((r20*x14001))+((sj15*x13996))+(((-1.0)*r20*x13994*x14004))+(((-1.0)*x13999)));
evalcond[7]=(((x13995*x14006))+(((-1.0)*r00*x13998*x14004))+(((-1.0)*gconst35*r01*x13994))+x13999+(((-1.0)*x13998*x14009))+((cj13*sj14))+(((-1.0)*cj15*r00*x13992)));
evalcond[8]=(x13991+(((-1.0)*x13998*x14008))+((r21*x13990*x14001))+(((-1.0)*cj15*r20*x13992))+(((-1.0)*x13994*x13996))+(((-1.0)*r20*x13998*x14004))+(((-1.0)*x14002)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x14010=IKPowWithIntegerCheck(IKsign((((gconst34*r20))+((gconst35*r21)))),-1);
if(!x14010.valid){
continue;
}
CheckValue<IkReal> x14011 = IKatan2WithCheck(IkReal((((gconst35*r00))+(((-1.0)*gconst34*r01)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x14011.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14010.value)))+(x14011.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x14012=IKcos(j16);
IkReal x14013=IKsin(j16);
IkReal x14014=(sj13*sj14);
IkReal x14015=((1.0)*gconst34);
IkReal x14016=(cj15*r10);
IkReal x14017=((1.0)*cj15);
IkReal x14018=(r01*sj15);
IkReal x14019=(gconst35*r21);
IkReal x14020=((1.0)*cj13);
IkReal x14021=((1.0)*sj15);
IkReal x14022=(cj14*sj13);
IkReal x14023=(r11*sj15);
IkReal x14024=(gconst34*sj15);
IkReal x14025=(cj14*x14020);
IkReal x14026=(r12*x14012);
IkReal x14027=(gconst35*x14013);
IkReal x14028=(gconst35*x14012);
IkReal x14029=(gconst34*x14013);
IkReal x14030=((1.0)*x14013);
IkReal x14031=(r22*x14012);
IkReal x14032=(r02*x14012);
evalcond[0]=(((r20*x14028))+(((-1.0)*r22*x14030))+(((-1.0)*r21*x14012*x14015)));
evalcond[1]=(((r00*x14028))+(((-1.0)*r01*x14012*x14015))+(((-1.0)*r02*x14030)));
evalcond[2]=((-1.0)+((r10*x14028))+(((-1.0)*r12*x14030))+(((-1.0)*r11*x14012*x14015)));
evalcond[3]=(((cj15*r11*x14029))+((r10*x14024))+((gconst35*x14023))+(((-1.0)*x14016*x14027))+(((-1.0)*x14017*x14026)));
evalcond[4]=((((-1.0)*x14015*x14016))+((x14023*x14029))+(((-1.0)*gconst35*r11*x14017))+(((-1.0)*x14021*x14026))+(((-1.0)*r10*x14021*x14027)));
evalcond[5]=(((r00*x14024))+((cj15*r01*x14029))+(((-1.0)*x14025))+((gconst35*x14018))+(((-1.0)*r00*x14017*x14027))+x14014+(((-1.0)*x14017*x14032)));
evalcond[6]=((((-1.0)*x14022))+((r20*x14024))+(((-1.0)*r20*x14017*x14027))+((sj15*x14019))+(((-1.0)*sj14*x14020))+((cj15*r21*x14029))+(((-1.0)*x14017*x14031)));
evalcond[7]=((((-1.0)*cj15*r00*x14015))+(((-1.0)*gconst35*r01*x14017))+(((-1.0)*r00*x14021*x14027))+((x14018*x14029))+((cj13*sj14))+(((-1.0)*x14021*x14032))+x14022);
evalcond[8]=((((-1.0)*cj15*r20*x14015))+(((-1.0)*r20*x14021*x14027))+(((-1.0)*x14021*x14031))+(((-1.0)*x14025))+(((-1.0)*x14017*x14019))+((r21*x14013*x14024))+x14014);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[2];
IkReal x14033=((-1.0)*pz);
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14033);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14033);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14034=(r11*sj17);
IkReal x14035=(cj17*r10);
j16eval[0]=(((sj15*x14034))+(((-1.0)*sj15*x14035)));
j16eval[1]=((((-1.0)*x14034))+x14035);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x14036=((-1.0)*pz);
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14036);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14036);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14037=(cj17*r10);
IkReal x14038=(r11*sj17);
j16eval[0]=((((-1.0)*cj15*x14037))+((cj15*x14038)));
j16eval[1]=((((-1.0)*x14038))+x14037);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
IkReal x14039=((-1.0)*pz);
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14039);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14039);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j16eval[0]=((((-1.0)*cj15*cj17*r10))+((cj15*r11*sj17)));
j16eval[1]=r22;
j16eval[2]=sj15;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x14040=((1.0)*cj17);
CheckValue<IkReal> x14041=IKPowWithIntegerCheck((((cj15*r11*sj17))+(((-1.0)*cj15*r10*x14040))),-1);
if(!x14041.valid){
continue;
}
CheckValue<IkReal> x14042=IKPowWithIntegerCheck(r22,-1);
if(!x14042.valid){
continue;
}
CheckValue<IkReal> x14043=IKPowWithIntegerCheck(sj15,-1);
if(!x14043.valid){
continue;
}
if( IKabs(((x14041.value)*(((((-1.0)*r10*sj15*sj17))+(((-1.0)*r11*sj15*x14040)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14042.value)*(x14043.value)*(((((-1.0)*cj13*cj14))+((sj13*sj14)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14041.value)*(((((-1.0)*r10*sj15*sj17))+(((-1.0)*r11*sj15*x14040))))))+IKsqr(((x14042.value)*(x14043.value)*(((((-1.0)*cj13*cj14))+((sj13*sj14))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x14041.value)*(((((-1.0)*r10*sj15*sj17))+(((-1.0)*r11*sj15*x14040))))), ((x14042.value)*(x14043.value)*(((((-1.0)*cj13*cj14))+((sj13*sj14))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x14044=IKcos(j16);
IkReal x14045=IKsin(j16);
IkReal x14046=(sj13*sj14);
IkReal x14047=(cj17*r00);
IkReal x14048=(cj17*r11);
IkReal x14049=((1.0)*cj13);
IkReal x14050=((1.0)*cj15);
IkReal x14051=(r11*sj17);
IkReal x14052=(cj17*r10);
IkReal x14053=(cj14*sj13);
IkReal x14054=(r01*sj17);
IkReal x14055=(r00*sj17);
IkReal x14056=(r10*sj17);
IkReal x14057=(cj17*r01);
IkReal x14058=(cj14*x14049);
IkReal x14059=((1.0)*x14044);
IkReal x14060=(sj15*x14045);
IkReal x14061=(cj15*x14045);
evalcond[0]=((-1.0)*r22*x14045);
evalcond[1]=((((-1.0)*x14054*x14059))+((x14044*x14047)));
evalcond[2]=((-1.0)+(((-1.0)*x14051*x14059))+((x14044*x14052)));
evalcond[3]=((((-1.0)*r22*sj15*x14059))+(((-1.0)*x14058))+x14046);
evalcond[4]=((((-1.0)*x14053))+(((-1.0)*r22*x14044*x14050))+(((-1.0)*sj14*x14049)));
evalcond[5]=(((sj15*x14048))+(((-1.0)*x14045*x14050*x14052))+((x14051*x14061))+((sj15*x14056)));
evalcond[6]=((((-1.0)*x14048*x14050))+(((-1.0)*x14050*x14056))+((x14051*x14060))+(((-1.0)*x14052*x14060)));
evalcond[7]=((((-1.0)*x14058))+(((-1.0)*x14045*x14047*x14050))+x14046+((x14054*x14061))+((sj15*x14055))+((sj15*x14057)));
evalcond[8]=((((-1.0)*x14050*x14055))+(((-1.0)*x14050*x14057))+(((-1.0)*x14047*x14060))+((cj13*sj14))+x14053+((x14054*x14060)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x14062=((1.0)*r11);
IkReal x14063=(cj17*r10);
CheckValue<IkReal> x14064=IKPowWithIntegerCheck((((cj15*r11*sj17))+(((-1.0)*cj15*x14063))),-1);
if(!x14064.valid){
continue;
}
CheckValue<IkReal> x14065=IKPowWithIntegerCheck(((((-1.0)*sj17*x14062))+x14063),-1);
if(!x14065.valid){
continue;
}
if( IKabs(((x14064.value)*(((((-1.0)*r10*sj15*sj17))+(((-1.0)*cj17*sj15*x14062)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x14065.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14064.value)*(((((-1.0)*r10*sj15*sj17))+(((-1.0)*cj17*sj15*x14062))))))+IKsqr(x14065.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x14064.value)*(((((-1.0)*r10*sj15*sj17))+(((-1.0)*cj17*sj15*x14062))))), x14065.value);
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x14066=IKcos(j16);
IkReal x14067=IKsin(j16);
IkReal x14068=(sj13*sj14);
IkReal x14069=(cj17*r00);
IkReal x14070=(cj17*r11);
IkReal x14071=((1.0)*cj13);
IkReal x14072=((1.0)*cj15);
IkReal x14073=(r11*sj17);
IkReal x14074=(cj17*r10);
IkReal x14075=(cj14*sj13);
IkReal x14076=(r01*sj17);
IkReal x14077=(r00*sj17);
IkReal x14078=(r10*sj17);
IkReal x14079=(cj17*r01);
IkReal x14080=(cj14*x14071);
IkReal x14081=((1.0)*x14066);
IkReal x14082=(sj15*x14067);
IkReal x14083=(cj15*x14067);
evalcond[0]=((-1.0)*r22*x14067);
evalcond[1]=((((-1.0)*x14076*x14081))+((x14066*x14069)));
evalcond[2]=((-1.0)+((x14066*x14074))+(((-1.0)*x14073*x14081)));
evalcond[3]=((((-1.0)*r22*sj15*x14081))+(((-1.0)*x14080))+x14068);
evalcond[4]=((((-1.0)*r22*x14066*x14072))+(((-1.0)*x14075))+(((-1.0)*sj14*x14071)));
evalcond[5]=(((sj15*x14070))+((sj15*x14078))+(((-1.0)*x14067*x14072*x14074))+((x14073*x14083)));
evalcond[6]=((((-1.0)*x14072*x14078))+(((-1.0)*x14070*x14072))+(((-1.0)*x14074*x14082))+((x14073*x14082)));
evalcond[7]=((((-1.0)*x14080))+(((-1.0)*x14067*x14069*x14072))+((x14076*x14083))+((sj15*x14079))+((sj15*x14077))+x14068);
evalcond[8]=((((-1.0)*x14072*x14077))+(((-1.0)*x14072*x14079))+((x14076*x14082))+((cj13*sj14))+x14075+(((-1.0)*x14069*x14082)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x14084=(cj17*r10);
IkReal x14085=(r11*sj17);
CheckValue<IkReal> x14086=IKPowWithIntegerCheck((((sj15*x14085))+(((-1.0)*sj15*x14084))),-1);
if(!x14086.valid){
continue;
}
CheckValue<IkReal> x14087=IKPowWithIntegerCheck(((((-1.0)*x14085))+x14084),-1);
if(!x14087.valid){
continue;
}
if( IKabs(((x14086.value)*((((cj15*r10*sj17))+((cj15*cj17*r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x14087.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14086.value)*((((cj15*r10*sj17))+((cj15*cj17*r11))))))+IKsqr(x14087.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x14086.value)*((((cj15*r10*sj17))+((cj15*cj17*r11))))), x14087.value);
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x14088=IKcos(j16);
IkReal x14089=IKsin(j16);
IkReal x14090=(sj13*sj14);
IkReal x14091=(cj17*r00);
IkReal x14092=(cj17*r11);
IkReal x14093=((1.0)*cj13);
IkReal x14094=((1.0)*cj15);
IkReal x14095=(r11*sj17);
IkReal x14096=(cj17*r10);
IkReal x14097=(cj14*sj13);
IkReal x14098=(r01*sj17);
IkReal x14099=(r00*sj17);
IkReal x14100=(r10*sj17);
IkReal x14101=(cj17*r01);
IkReal x14102=(cj14*x14093);
IkReal x14103=((1.0)*x14088);
IkReal x14104=(sj15*x14089);
IkReal x14105=(cj15*x14089);
evalcond[0]=((-1.0)*r22*x14089);
evalcond[1]=(((x14088*x14091))+(((-1.0)*x14098*x14103)));
evalcond[2]=((-1.0)+((x14088*x14096))+(((-1.0)*x14095*x14103)));
evalcond[3]=((((-1.0)*r22*sj15*x14103))+(((-1.0)*x14102))+x14090);
evalcond[4]=((((-1.0)*sj14*x14093))+(((-1.0)*r22*x14088*x14094))+(((-1.0)*x14097)));
evalcond[5]=(((sj15*x14100))+((x14095*x14105))+((sj15*x14092))+(((-1.0)*x14089*x14094*x14096)));
evalcond[6]=((((-1.0)*x14092*x14094))+(((-1.0)*x14096*x14104))+(((-1.0)*x14094*x14100))+((x14095*x14104)));
evalcond[7]=(((sj15*x14101))+(((-1.0)*x14089*x14091*x14094))+((x14098*x14105))+(((-1.0)*x14102))+x14090+((sj15*x14099)));
evalcond[8]=((((-1.0)*x14091*x14104))+((x14098*x14104))+((cj13*sj14))+(((-1.0)*x14094*x14099))+(((-1.0)*x14094*x14101))+x14097);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j16]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x14106=cj17*cj17;
IkReal x14107=(cj17*r20);
IkReal x14108=(r21*sj15);
IkReal x14109=(r11*sj15);
IkReal x14110=((1.0)*r10);
IkReal x14111=(r10*sj15*sj17);
IkReal x14112=(r10*x14106);
IkReal x14113=((1.0)*r11*sj17);
IkReal x14114=(cj15*r11*r21);
CheckValue<IkReal> x14115=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14106*x14114))+((cj15*r12*r22))+((cj15*r20*x14112))+x14114+(((-1.0)*cj15*cj17*r21*sj17*x14110))+(((-1.0)*cj15*x14107*x14113)))),-1);
if(!x14115.valid){
continue;
}
CheckValue<IkReal> x14116 = IKatan2WithCheck(IkReal(((((-1.0)*x14108*x14110))+((x14108*x14112))+(((-1.0)*cj17*x14108*x14113))+((r20*x14106*x14109))+((x14107*x14111)))),IkReal((((cj17*r22*x14109))+((r22*x14111)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14116.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14115.value)))+(x14116.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x14117=IKcos(j16);
IkReal x14118=IKsin(j16);
IkReal x14119=(sj13*sj14);
IkReal x14120=(cj17*r00);
IkReal x14121=(cj17*sj15);
IkReal x14122=((1.0)*cj13);
IkReal x14123=((1.0)*r11);
IkReal x14124=(cj15*cj17);
IkReal x14125=(sj15*sj17);
IkReal x14126=((1.0)*r21);
IkReal x14127=((1.0)*r01);
IkReal x14128=(cj14*sj13);
IkReal x14129=(cj15*sj17);
IkReal x14130=(cj14*x14122);
IkReal x14131=((1.0)*x14118);
IkReal x14132=(sj17*x14117);
IkReal x14133=(cj17*x14117);
IkReal x14134=(r21*x14118);
IkReal x14135=((1.0)*x14129);
IkReal x14136=(r11*x14118);
IkReal x14137=((1.0)*r12*x14117);
IkReal x14138=(r01*sj17*x14118);
IkReal x14139=((1.0)*r22*x14117);
IkReal x14140=((1.0)*r02*x14117);
evalcond[0]=(((r20*x14133))+(((-1.0)*x14126*x14132))+(((-1.0)*r22*x14131)));
evalcond[1]=((((-1.0)*r02*x14131))+((x14117*x14120))+(((-1.0)*x14127*x14132)));
evalcond[2]=((-1.0)+((r10*x14133))+(((-1.0)*x14123*x14132))+(((-1.0)*r12*x14131)));
evalcond[3]=((((-1.0)*cj15*x14137))+((x14129*x14136))+((r10*x14125))+((r11*x14121))+(((-1.0)*r10*x14124*x14131)));
evalcond[4]=((((-1.0)*r10*x14121*x14131))+(((-1.0)*sj15*x14137))+(((-1.0)*r10*x14135))+(((-1.0)*x14123*x14124))+((x14125*x14136)));
evalcond[5]=(((r01*x14118*x14129))+((r00*x14125))+((r01*x14121))+(((-1.0)*cj15*x14120*x14131))+x14119+(((-1.0)*cj15*x14140))+(((-1.0)*x14130)));
evalcond[6]=(((r21*x14121))+((r20*x14125))+(((-1.0)*x14128))+(((-1.0)*cj15*x14139))+((x14129*x14134))+(((-1.0)*r20*x14124*x14131))+(((-1.0)*sj14*x14122)));
evalcond[7]=(((r01*x14118*x14125))+(((-1.0)*x14124*x14127))+((cj13*sj14))+(((-1.0)*r00*x14135))+x14128+(((-1.0)*sj15*x14140))+(((-1.0)*sj15*x14120*x14131)));
evalcond[8]=((((-1.0)*x14124*x14126))+(((-1.0)*r20*x14121*x14131))+(((-1.0)*r20*x14135))+(((-1.0)*sj15*x14139))+x14119+((x14125*x14134))+(((-1.0)*x14130)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x14141=((1.0)*sj17);
CheckValue<IkReal> x14142=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj17*r01))+(((-1.0)*r00*x14141)))),-1);
if(!x14142.valid){
continue;
}
CheckValue<IkReal> x14143 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x14141))+((cj17*r20)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x14143.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14142.value)))+(x14143.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x14144=IKcos(j16);
IkReal x14145=IKsin(j16);
IkReal x14146=(sj13*sj14);
IkReal x14147=(cj17*r00);
IkReal x14148=(cj17*sj15);
IkReal x14149=((1.0)*cj13);
IkReal x14150=((1.0)*r11);
IkReal x14151=(cj15*cj17);
IkReal x14152=(sj15*sj17);
IkReal x14153=((1.0)*r21);
IkReal x14154=((1.0)*r01);
IkReal x14155=(cj14*sj13);
IkReal x14156=(cj15*sj17);
IkReal x14157=(cj14*x14149);
IkReal x14158=((1.0)*x14145);
IkReal x14159=(sj17*x14144);
IkReal x14160=(cj17*x14144);
IkReal x14161=(r21*x14145);
IkReal x14162=((1.0)*x14156);
IkReal x14163=(r11*x14145);
IkReal x14164=((1.0)*r12*x14144);
IkReal x14165=(r01*sj17*x14145);
IkReal x14166=((1.0)*r22*x14144);
IkReal x14167=((1.0)*r02*x14144);
evalcond[0]=((((-1.0)*r22*x14158))+(((-1.0)*x14153*x14159))+((r20*x14160)));
evalcond[1]=((((-1.0)*r02*x14158))+(((-1.0)*x14154*x14159))+((x14144*x14147)));
evalcond[2]=((-1.0)+((r10*x14160))+(((-1.0)*r12*x14158))+(((-1.0)*x14150*x14159)));
evalcond[3]=(((r10*x14152))+(((-1.0)*r10*x14151*x14158))+(((-1.0)*cj15*x14164))+((r11*x14148))+((x14156*x14163)));
evalcond[4]=((((-1.0)*r10*x14148*x14158))+(((-1.0)*sj15*x14164))+(((-1.0)*r10*x14162))+((x14152*x14163))+(((-1.0)*x14150*x14151)));
evalcond[5]=(((r01*x14145*x14156))+((r01*x14148))+(((-1.0)*x14157))+((r00*x14152))+x14146+(((-1.0)*cj15*x14147*x14158))+(((-1.0)*cj15*x14167)));
evalcond[6]=((((-1.0)*r20*x14151*x14158))+(((-1.0)*sj14*x14149))+((r21*x14148))+(((-1.0)*cj15*x14166))+((r20*x14152))+((x14156*x14161))+(((-1.0)*x14155)));
evalcond[7]=((((-1.0)*x14151*x14154))+((r01*x14145*x14152))+((cj13*sj14))+(((-1.0)*sj15*x14147*x14158))+x14155+(((-1.0)*sj15*x14167))+(((-1.0)*r00*x14162)));
evalcond[8]=((((-1.0)*x14151*x14153))+(((-1.0)*r20*x14148*x14158))+(((-1.0)*r20*x14162))+(((-1.0)*x14157))+x14146+(((-1.0)*sj15*x14166))+((x14152*x14161)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x14168 = IKatan2WithCheck(IkReal((((cj17*r00))+(((-1.0)*r01*sj17)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x14168.valid){
continue;
}
CheckValue<IkReal> x14169=IKPowWithIntegerCheck(IKsign((((r20*sj17))+((cj17*r21)))),-1);
if(!x14169.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x14168.value)+(((1.5707963267949)*(x14169.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x14170=IKcos(j16);
IkReal x14171=IKsin(j16);
IkReal x14172=(sj13*sj14);
IkReal x14173=(cj17*r00);
IkReal x14174=(cj17*sj15);
IkReal x14175=((1.0)*cj13);
IkReal x14176=((1.0)*r11);
IkReal x14177=(cj15*cj17);
IkReal x14178=(sj15*sj17);
IkReal x14179=((1.0)*r21);
IkReal x14180=((1.0)*r01);
IkReal x14181=(cj14*sj13);
IkReal x14182=(cj15*sj17);
IkReal x14183=(cj14*x14175);
IkReal x14184=((1.0)*x14171);
IkReal x14185=(sj17*x14170);
IkReal x14186=(cj17*x14170);
IkReal x14187=(r21*x14171);
IkReal x14188=((1.0)*x14182);
IkReal x14189=(r11*x14171);
IkReal x14190=((1.0)*r12*x14170);
IkReal x14191=(r01*sj17*x14171);
IkReal x14192=((1.0)*r22*x14170);
IkReal x14193=((1.0)*r02*x14170);
evalcond[0]=(((r20*x14186))+(((-1.0)*r22*x14184))+(((-1.0)*x14179*x14185)));
evalcond[1]=((((-1.0)*x14180*x14185))+((x14170*x14173))+(((-1.0)*r02*x14184)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14184))+(((-1.0)*x14176*x14185))+((r10*x14186)));
evalcond[3]=((((-1.0)*cj15*x14190))+((r11*x14174))+((x14182*x14189))+(((-1.0)*r10*x14177*x14184))+((r10*x14178)));
evalcond[4]=(((x14178*x14189))+(((-1.0)*r10*x14174*x14184))+(((-1.0)*x14176*x14177))+(((-1.0)*r10*x14188))+(((-1.0)*sj15*x14190)));
evalcond[5]=((((-1.0)*cj15*x14193))+(((-1.0)*cj15*x14173*x14184))+((r01*x14171*x14182))+((r01*x14174))+((r00*x14178))+x14172+(((-1.0)*x14183)));
evalcond[6]=((((-1.0)*sj14*x14175))+(((-1.0)*cj15*x14192))+((r21*x14174))+((x14182*x14187))+((r20*x14178))+(((-1.0)*r20*x14177*x14184))+(((-1.0)*x14181)));
evalcond[7]=((((-1.0)*r00*x14188))+(((-1.0)*sj15*x14173*x14184))+(((-1.0)*x14177*x14180))+((cj13*sj14))+x14181+((r01*x14171*x14178))+(((-1.0)*sj15*x14193)));
evalcond[8]=(((x14178*x14187))+(((-1.0)*x14177*x14179))+(((-1.0)*r20*x14188))+x14172+(((-1.0)*sj15*x14192))+(((-1.0)*x14183))+(((-1.0)*r20*x14174*x14184)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14195 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14195)==0){
continue;
}
IkReal x14194=pow(x14195,-0.5);
CheckValue<IkReal> x14196 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14196.valid){
continue;
}
IkReal gconst12=((-1.0)*(x14196.value));
IkReal gconst13=((-1.0)*r01*x14194);
IkReal gconst14=(r00*x14194);
CheckValue<IkReal> x14197 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14197.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14197.value)+j17)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
CheckValue<IkReal> x14200 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14200.valid){
continue;
}
IkReal x14198=((-1.0)*(x14200.value));
IkReal x14199=x14194;
sj17=gconst13;
cj17=gconst14;
j17=x14198;
IkReal gconst12=x14198;
IkReal gconst13=((-1.0)*r01*x14199);
IkReal gconst14=(r00*x14199);
j16eval[0]=r22;
j16eval[1]=sj12;
j16eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x14201=((1.0)*sj12);
IkReal x14202=((1.0)*cj12);
CheckValue<IkReal> x14203=IKPowWithIntegerCheck(IKsign((((gconst14*r21))+((gconst13*r20)))),-1);
if(!x14203.valid){
continue;
}
CheckValue<IkReal> x14204 = IKatan2WithCheck(IkReal(((((-1.0)*gconst14*r00*x14202))+((gconst13*r11*sj12))+(((-1.0)*gconst14*r10*x14201))+((cj12*gconst13*r01)))),IkReal(((((-1.0)*r12*x14201))+(((-1.0)*r02*x14202)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14204.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14203.value)))+(x14204.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x14205=IKcos(j16);
IkReal x14206=IKsin(j16);
IkReal x14207=((1.0)*cj14);
IkReal x14208=(sj12*sj13);
IkReal x14209=(gconst14*r20);
IkReal x14210=((1.0)*cj15);
IkReal x14211=(gconst13*r10);
IkReal x14212=(gconst13*r20);
IkReal x14213=((1.0)*sj15);
IkReal x14214=(cj12*sj13);
IkReal x14215=((1.0)*sj14);
IkReal x14216=(r01*sj15);
IkReal x14217=(cj13*cj14);
IkReal x14218=(gconst13*r00);
IkReal x14219=(gconst13*r21);
IkReal x14220=(gconst14*r10);
IkReal x14221=(gconst14*r11);
IkReal x14222=(gconst14*r21);
IkReal x14223=(r12*x14205);
IkReal x14224=(r02*x14205);
IkReal x14225=((1.0)*x14205);
IkReal x14226=((1.0)*x14206);
IkReal x14227=(r22*x14205);
IkReal x14228=(gconst13*x14206);
IkReal x14229=(gconst14*r00*x14206);
evalcond[0]=((((-1.0)*x14219*x14225))+((x14205*x14209))+(((-1.0)*r22*x14226)));
evalcond[1]=((((-1.0)*gconst13*r11*x14225))+(((-1.0)*r12*x14226))+((x14205*x14220))+cj12);
evalcond[2]=((((-1.0)*sj12))+(((-1.0)*gconst13*r01*x14225))+(((-1.0)*r02*x14226))+((gconst14*r00*x14205)));
evalcond[3]=(((cj15*x14206*x14219))+((sj15*x14212))+(((-1.0)*cj13*x14215))+(((-1.0)*x14206*x14209*x14210))+(((-1.0)*sj13*x14207))+(((-1.0)*x14210*x14227))+((sj15*x14222)));
evalcond[4]=((((-1.0)*x14210*x14212))+(((-1.0)*cj13*x14207))+(((-1.0)*x14213*x14227))+((sj15*x14206*x14219))+((sj13*sj14))+(((-1.0)*x14206*x14209*x14213))+(((-1.0)*x14210*x14222)));
evalcond[5]=(((gconst14*x14216))+((cj12*x14217))+((sj15*x14218))+(((-1.0)*x14214*x14215))+((cj15*r01*x14228))+(((-1.0)*x14210*x14224))+(((-1.0)*x14210*x14229)));
evalcond[6]=((((-1.0)*x14206*x14210*x14220))+((sj15*x14211))+((cj15*r11*x14228))+(((-1.0)*x14208*x14215))+(((-1.0)*x14210*x14223))+((sj15*x14221))+((sj12*x14217)));
evalcond[7]=((((-1.0)*x14210*x14218))+(((-1.0)*x14207*x14214))+(((-1.0)*cj12*cj13*x14215))+(((-1.0)*x14213*x14224))+(((-1.0)*x14213*x14229))+((x14216*x14228))+(((-1.0)*gconst14*r01*x14210)));
evalcond[8]=((((-1.0)*x14210*x14211))+(((-1.0)*x14207*x14208))+(((-1.0)*x14206*x14213*x14220))+(((-1.0)*x14213*x14223))+(((-1.0)*cj13*sj12*x14215))+((r11*sj15*x14228))+(((-1.0)*x14210*x14221)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x14230 = IKatan2WithCheck(IkReal(((((-1.0)*gconst13*r21*sj12))+((gconst14*r20*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x14230.valid){
continue;
}
CheckValue<IkReal> x14231=IKPowWithIntegerCheck(IKsign((((gconst14*r11))+((gconst13*r10)))),-1);
if(!x14231.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x14230.value)+(((1.5707963267949)*(x14231.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x14232=IKcos(j16);
IkReal x14233=IKsin(j16);
IkReal x14234=((1.0)*cj14);
IkReal x14235=(sj12*sj13);
IkReal x14236=(gconst14*r20);
IkReal x14237=((1.0)*cj15);
IkReal x14238=(gconst13*r10);
IkReal x14239=(gconst13*r20);
IkReal x14240=((1.0)*sj15);
IkReal x14241=(cj12*sj13);
IkReal x14242=((1.0)*sj14);
IkReal x14243=(r01*sj15);
IkReal x14244=(cj13*cj14);
IkReal x14245=(gconst13*r00);
IkReal x14246=(gconst13*r21);
IkReal x14247=(gconst14*r10);
IkReal x14248=(gconst14*r11);
IkReal x14249=(gconst14*r21);
IkReal x14250=(r12*x14232);
IkReal x14251=(r02*x14232);
IkReal x14252=((1.0)*x14232);
IkReal x14253=((1.0)*x14233);
IkReal x14254=(r22*x14232);
IkReal x14255=(gconst13*x14233);
IkReal x14256=(gconst14*r00*x14233);
evalcond[0]=((((-1.0)*x14246*x14252))+(((-1.0)*r22*x14253))+((x14232*x14236)));
evalcond[1]=((((-1.0)*gconst13*r11*x14252))+cj12+(((-1.0)*r12*x14253))+((x14232*x14247)));
evalcond[2]=((((-1.0)*gconst13*r01*x14252))+(((-1.0)*sj12))+((gconst14*r00*x14232))+(((-1.0)*r02*x14253)));
evalcond[3]=(((cj15*x14233*x14246))+((sj15*x14249))+(((-1.0)*x14237*x14254))+(((-1.0)*x14233*x14236*x14237))+(((-1.0)*cj13*x14242))+(((-1.0)*sj13*x14234))+((sj15*x14239)));
evalcond[4]=((((-1.0)*x14237*x14249))+(((-1.0)*x14233*x14236*x14240))+(((-1.0)*x14237*x14239))+(((-1.0)*cj13*x14234))+((sj13*sj14))+(((-1.0)*x14240*x14254))+((sj15*x14233*x14246)));
evalcond[5]=(((sj15*x14245))+(((-1.0)*x14237*x14256))+(((-1.0)*x14237*x14251))+((gconst14*x14243))+((cj12*x14244))+(((-1.0)*x14241*x14242))+((cj15*r01*x14255)));
evalcond[6]=((((-1.0)*x14233*x14237*x14247))+((sj15*x14248))+(((-1.0)*x14237*x14250))+(((-1.0)*x14235*x14242))+((sj12*x14244))+((sj15*x14238))+((cj15*r11*x14255)));
evalcond[7]=((((-1.0)*x14237*x14245))+(((-1.0)*x14234*x14241))+(((-1.0)*gconst14*r01*x14237))+((x14243*x14255))+(((-1.0)*cj12*cj13*x14242))+(((-1.0)*x14240*x14256))+(((-1.0)*x14240*x14251)));
evalcond[8]=((((-1.0)*x14237*x14248))+(((-1.0)*x14237*x14238))+(((-1.0)*cj13*sj12*x14242))+(((-1.0)*x14234*x14235))+(((-1.0)*x14233*x14240*x14247))+((r11*sj15*x14255))+(((-1.0)*x14240*x14250)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14258 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14258)==0){
continue;
}
IkReal x14257=pow(x14258,-0.5);
CheckValue<IkReal> x14259 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14259.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x14259.value))));
IkReal gconst16=((1.0)*r01*x14257);
IkReal gconst17=((-1.0)*r00*x14257);
CheckValue<IkReal> x14260 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14260.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14260.value)+j17)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[5];
CheckValue<IkReal> x14263 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14263.valid){
continue;
}
IkReal x14261=((1.0)*(x14263.value));
IkReal x14262=x14257;
sj17=gconst16;
cj17=gconst17;
j17=((3.14159265)+(((-1.0)*x14261)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14261)));
IkReal gconst16=((1.0)*r01*x14262);
IkReal gconst17=((-1.0)*r00*x14262);
j16eval[0]=0;
j16eval[1]=cj12;
j16eval[2]=r22;
j16eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j16eval[4]=0;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  || IKabs(j16eval[3]) < 0.0000010000000000  || IKabs(j16eval[4]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
CheckValue<IkReal> x14266 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14266.valid){
continue;
}
IkReal x14264=((1.0)*(x14266.value));
IkReal x14265=x14257;
sj17=gconst16;
cj17=gconst17;
j17=((3.14159265)+(((-1.0)*x14264)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14264)));
IkReal gconst16=((1.0)*r01*x14265);
IkReal gconst17=((-1.0)*r00*x14265);
j16eval[0]=r22;
j16eval[1]=sj12;
j16eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
CheckValue<IkReal> x14269 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14269.valid){
continue;
}
IkReal x14267=((1.0)*(x14269.value));
IkReal x14268=x14257;
sj17=gconst16;
cj17=gconst17;
j17=((3.14159265)+(((-1.0)*x14267)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14267)));
IkReal gconst16=((1.0)*r01*x14268);
IkReal gconst17=((-1.0)*r00*x14268);
IkReal x14270=r02*r02;
IkReal x14271=(r12*sj12);
IkReal x14272=x14257;
IkReal x14273=(cj12*x14272);
j16eval[0]=((IKabs(((((-1.0)*cj12*r02))+(((-1.0)*x14271)))))+(IKabs(((((-1.0)*x14273))+((x14270*x14273))+((r02*x14271*x14272))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x14276 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14276.valid){
continue;
}
IkReal x14274=((1.0)*(x14276.value));
IkReal x14275=x14257;
sj17=gconst16;
cj17=gconst17;
j17=((3.14159265)+(((-1.0)*x14274)));
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14274)));
IkReal gconst16=((1.0)*r01*x14275);
IkReal gconst17=((-1.0)*r00*x14275);
j16eval[0]=1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[4];
CheckValue<IkReal> x14279 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14279.valid){
continue;
}
IkReal x14277=((1.0)*(x14279.value));
IkReal x14278=x14257;
sj17=gconst16;
cj17=gconst17;
j17=((3.14159265)+(((-1.0)*x14277)));
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14277)));
IkReal gconst16=((1.0)*r01*x14278);
IkReal gconst17=((-1.0)*r00*x14278);
j16eval[0]=0;
j16eval[1]=0;
j16eval[2]=r22;
j16eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  || IKabs(j16eval[3]) < 0.0000010000000000  )
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x14280=gconst17*gconst17;
IkReal x14281=gconst16*gconst16;
IkReal x14282=(cj15*r11);
IkReal x14283=(r11*sj15);
IkReal x14284=(cj15*r10);
IkReal x14285=(r10*sj15);
IkReal x14286=(r21*x14281);
IkReal x14287=(gconst16*gconst17*r20);
IkReal x14288=(r20*x14280);
IkReal x14289=((1.0)*gconst16*gconst17*r21);
CheckValue<IkReal> x14290=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14284*x14289))+(((-1.0)*x14282*x14287))+((x14282*x14286))+((cj15*r12*r22))+((x14284*x14288)))),-1);
if(!x14290.valid){
continue;
}
CheckValue<IkReal> x14291 = IKatan2WithCheck(IkReal(((((-1.0)*x14283*x14289))+(((-1.0)*x14285*x14286))+((x14283*x14288))+((x14285*x14287)))),IkReal((((gconst16*r22*x14285))+((gconst17*r22*x14283)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14291.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14290.value)))+(x14291.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x14292=IKcos(j16);
IkReal x14293=IKsin(j16);
IkReal x14294=(sj13*sj14);
IkReal x14295=((1.0)*cj15);
IkReal x14296=(gconst17*sj15);
IkReal x14297=(gconst16*sj15);
IkReal x14298=((1.0)*sj15);
IkReal x14299=(cj14*sj13);
IkReal x14300=(cj15*gconst16);
IkReal x14301=((1.0)*cj13);
IkReal x14302=(cj14*x14301);
IkReal x14303=(gconst17*x14293);
IkReal x14304=(gconst17*x14292);
IkReal x14305=(r12*x14292);
IkReal x14306=(r02*x14292);
IkReal x14307=(r01*x14293);
IkReal x14308=((1.0)*x14293);
IkReal x14309=(r22*x14292);
IkReal x14310=(r21*x14293);
IkReal x14311=(r11*x14293);
IkReal x14312=((1.0)*gconst16*x14292);
evalcond[0]=(((r20*x14304))+(((-1.0)*r22*x14308))+(((-1.0)*r21*x14312)));
evalcond[1]=((((-1.0)*r01*x14312))+(((-1.0)*r02*x14308))+((r00*x14304)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14308))+(((-1.0)*r11*x14312))+((r10*x14304)));
evalcond[3]=((((-1.0)*x14295*x14305))+((r10*x14297))+((x14300*x14311))+((r11*x14296))+(((-1.0)*r10*x14295*x14303)));
evalcond[4]=((((-1.0)*x14298*x14305))+(((-1.0)*r10*x14296*x14308))+(((-1.0)*gconst17*r11*x14295))+((x14297*x14311))+(((-1.0)*gconst16*r10*x14295)));
evalcond[5]=((((-1.0)*r00*x14295*x14303))+(((-1.0)*x14295*x14306))+((r00*x14297))+((r01*x14296))+((x14300*x14307))+x14294+(((-1.0)*x14302)));
evalcond[6]=(((r20*x14297))+(((-1.0)*r20*x14295*x14303))+((r21*x14296))+(((-1.0)*x14295*x14309))+((x14300*x14310))+(((-1.0)*x14299))+(((-1.0)*sj14*x14301)));
evalcond[7]=(((x14297*x14307))+(((-1.0)*gconst16*r00*x14295))+(((-1.0)*x14298*x14306))+(((-1.0)*gconst17*r01*x14295))+(((-1.0)*r00*x14296*x14308))+((cj13*sj14))+x14299);
evalcond[8]=((((-1.0)*x14298*x14309))+(((-1.0)*gconst16*r20*x14295))+(((-1.0)*r20*x14296*x14308))+((x14297*x14310))+(((-1.0)*gconst17*r21*x14295))+x14294+(((-1.0)*x14302)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x14313=((1.0)*gconst16);
CheckValue<IkReal> x14314 = IKatan2WithCheck(IkReal((((gconst17*r20))+(((-1.0)*r21*x14313)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x14314.valid){
continue;
}
CheckValue<IkReal> x14315=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst17*r01))+(((-1.0)*r00*x14313)))),-1);
if(!x14315.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x14314.value)+(((1.5707963267949)*(x14315.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x14316=IKcos(j16);
IkReal x14317=IKsin(j16);
IkReal x14318=(sj13*sj14);
IkReal x14319=((1.0)*cj15);
IkReal x14320=(gconst17*sj15);
IkReal x14321=(gconst16*sj15);
IkReal x14322=((1.0)*sj15);
IkReal x14323=(cj14*sj13);
IkReal x14324=(cj15*gconst16);
IkReal x14325=((1.0)*cj13);
IkReal x14326=(cj14*x14325);
IkReal x14327=(gconst17*x14317);
IkReal x14328=(gconst17*x14316);
IkReal x14329=(r12*x14316);
IkReal x14330=(r02*x14316);
IkReal x14331=(r01*x14317);
IkReal x14332=((1.0)*x14317);
IkReal x14333=(r22*x14316);
IkReal x14334=(r21*x14317);
IkReal x14335=(r11*x14317);
IkReal x14336=((1.0)*gconst16*x14316);
evalcond[0]=((((-1.0)*r22*x14332))+(((-1.0)*r21*x14336))+((r20*x14328)));
evalcond[1]=(((r00*x14328))+(((-1.0)*r02*x14332))+(((-1.0)*r01*x14336)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14332))+(((-1.0)*r11*x14336))+((r10*x14328)));
evalcond[3]=((((-1.0)*r10*x14319*x14327))+((x14324*x14335))+((r10*x14321))+(((-1.0)*x14319*x14329))+((r11*x14320)));
evalcond[4]=((((-1.0)*gconst17*r11*x14319))+(((-1.0)*r10*x14320*x14332))+((x14321*x14335))+(((-1.0)*x14322*x14329))+(((-1.0)*gconst16*r10*x14319)));
evalcond[5]=(((r00*x14321))+((r01*x14320))+((x14324*x14331))+(((-1.0)*r00*x14319*x14327))+(((-1.0)*x14326))+x14318+(((-1.0)*x14319*x14330)));
evalcond[6]=(((x14324*x14334))+((r21*x14320))+((r20*x14321))+(((-1.0)*x14319*x14333))+(((-1.0)*sj14*x14325))+(((-1.0)*r20*x14319*x14327))+(((-1.0)*x14323)));
evalcond[7]=((((-1.0)*x14322*x14330))+(((-1.0)*gconst17*r01*x14319))+(((-1.0)*gconst16*r00*x14319))+((cj13*sj14))+((x14321*x14331))+x14323+(((-1.0)*r00*x14320*x14332)));
evalcond[8]=((((-1.0)*x14322*x14333))+(((-1.0)*gconst16*r20*x14319))+(((-1.0)*r20*x14320*x14332))+((x14321*x14334))+(((-1.0)*gconst17*r21*x14319))+(((-1.0)*x14326))+x14318);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x14337=IKPowWithIntegerCheck(IKsign((((gconst17*r21))+((gconst16*r20)))),-1);
if(!x14337.valid){
continue;
}
CheckValue<IkReal> x14338 = IKatan2WithCheck(IkReal(((((-1.0)*gconst16*r01))+((gconst17*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x14338.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14337.value)))+(x14338.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x14339=IKcos(j16);
IkReal x14340=IKsin(j16);
IkReal x14341=(sj13*sj14);
IkReal x14342=((1.0)*cj15);
IkReal x14343=(gconst17*sj15);
IkReal x14344=(gconst16*sj15);
IkReal x14345=((1.0)*sj15);
IkReal x14346=(cj14*sj13);
IkReal x14347=(cj15*gconst16);
IkReal x14348=((1.0)*cj13);
IkReal x14349=(cj14*x14348);
IkReal x14350=(gconst17*x14340);
IkReal x14351=(gconst17*x14339);
IkReal x14352=(r12*x14339);
IkReal x14353=(r02*x14339);
IkReal x14354=(r01*x14340);
IkReal x14355=((1.0)*x14340);
IkReal x14356=(r22*x14339);
IkReal x14357=(r21*x14340);
IkReal x14358=(r11*x14340);
IkReal x14359=((1.0)*gconst16*x14339);
evalcond[0]=(((r20*x14351))+(((-1.0)*r22*x14355))+(((-1.0)*r21*x14359)));
evalcond[1]=((((-1.0)*r02*x14355))+((r00*x14351))+(((-1.0)*r01*x14359)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14355))+(((-1.0)*r11*x14359))+((r10*x14351)));
evalcond[3]=(((x14347*x14358))+((r11*x14343))+((r10*x14344))+(((-1.0)*x14342*x14352))+(((-1.0)*r10*x14342*x14350)));
evalcond[4]=((((-1.0)*gconst17*r11*x14342))+(((-1.0)*x14345*x14352))+(((-1.0)*r10*x14343*x14355))+(((-1.0)*gconst16*r10*x14342))+((x14344*x14358)));
evalcond[5]=(((x14347*x14354))+((r00*x14344))+((r01*x14343))+(((-1.0)*r00*x14342*x14350))+(((-1.0)*x14342*x14353))+(((-1.0)*x14349))+x14341);
evalcond[6]=(((x14347*x14357))+((r21*x14343))+(((-1.0)*x14346))+(((-1.0)*x14342*x14356))+((r20*x14344))+(((-1.0)*r20*x14342*x14350))+(((-1.0)*sj14*x14348)));
evalcond[7]=((((-1.0)*x14345*x14353))+(((-1.0)*gconst16*r00*x14342))+(((-1.0)*r00*x14343*x14355))+((cj13*sj14))+(((-1.0)*gconst17*r01*x14342))+x14346+((x14344*x14354)));
evalcond[8]=((((-1.0)*x14345*x14356))+(((-1.0)*r20*x14343*x14355))+(((-1.0)*gconst16*r20*x14342))+(((-1.0)*x14349))+(((-1.0)*gconst17*r21*x14342))+x14341+((x14344*x14357)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
j16array[0]=0;
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
j16array[0]=0;
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
CheckValue<IkReal> x14362 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14362.valid){
continue;
}
IkReal x14360=((1.0)*(x14362.value));
IkReal x14361=x14257;
sj17=gconst16;
cj17=gconst17;
j17=((3.14159265)+(((-1.0)*x14360)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14360)));
IkReal gconst16=((1.0)*r01*x14361);
IkReal gconst17=((-1.0)*r00*x14361);
IkReal x14363=r02*r02;
IkReal x14364=(r12*sj12);
IkReal x14365=x14257;
IkReal x14366=(cj12*x14365);
j16eval[0]=((IKabs((((r02*x14364*x14365))+((x14363*x14366))+(((-1.0)*x14366)))))+(IKabs(((((-1.0)*cj12*r02))+(((-1.0)*x14364))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x14367=(cj13*cj14);
IkReal x14368=(gconst16*r20);
IkReal x14369=(gconst17*sj15);
IkReal x14370=(cj15*r12);
IkReal x14371=((1.0)*sj15);
IkReal x14372=(gconst17*r21);
IkReal x14373=(gconst16*r21*sj15);
IkReal x14374=((1.0)*sj13*sj14);
CheckValue<IkReal> x14375=IKPowWithIntegerCheck(((((-1.0)*r20*x14369))+x14373),-1);
if(!x14375.valid){
continue;
}
CheckValue<IkReal> x14376=IKPowWithIntegerCheck(((((-1.0)*r11*r21*x14371*(gconst16*gconst16)))+((r11*x14368*x14369))+(((-1.0)*gconst17*r10*r20*x14369))+((gconst16*r10*r21*x14369))),-1);
if(!x14376.valid){
continue;
}
if( IKabs(((x14375.value)*((((cj15*x14368))+((cj15*x14372))+x14367+(((-1.0)*x14374)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14376.value)*(((((-1.0)*r12*x14374))+(((-1.0)*cj12*gconst16*r21*x14371))+((x14368*x14370))+((x14370*x14372))+((cj12*r20*x14369))+((r12*x14367)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14375.value)*((((cj15*x14368))+((cj15*x14372))+x14367+(((-1.0)*x14374))))))+IKsqr(((x14376.value)*(((((-1.0)*r12*x14374))+(((-1.0)*cj12*gconst16*r21*x14371))+((x14368*x14370))+((x14370*x14372))+((cj12*r20*x14369))+((r12*x14367))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x14375.value)*((((cj15*x14368))+((cj15*x14372))+x14367+(((-1.0)*x14374))))), ((x14376.value)*(((((-1.0)*r12*x14374))+(((-1.0)*cj12*gconst16*r21*x14371))+((x14368*x14370))+((x14370*x14372))+((cj12*r20*x14369))+((r12*x14367))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x14377=IKcos(j16);
IkReal x14378=IKsin(j16);
IkReal x14379=(r21*sj15);
IkReal x14380=(gconst17*r00);
IkReal x14381=(gconst16*sj15);
IkReal x14382=((1.0)*cj14);
IkReal x14383=(cj12*sj13);
IkReal x14384=((1.0)*sj14);
IkReal x14385=(gconst16*r21);
IkReal x14386=((1.0)*cj15);
IkReal x14387=(gconst17*r11);
IkReal x14388=(sj12*sj13);
IkReal x14389=(cj13*sj12);
IkReal x14390=(gconst17*r01);
IkReal x14391=(cj15*gconst16);
IkReal x14392=(cj12*cj13);
IkReal x14393=((1.0)*x14377);
IkReal x14394=(r01*x14378);
IkReal x14395=(gconst16*x14386);
IkReal x14396=(r11*x14378);
IkReal x14397=(gconst17*x14377);
IkReal x14398=((1.0)*x14378);
IkReal x14399=(sj15*x14398);
IkReal x14400=(gconst17*x14378*x14386);
evalcond[0]=((((-1.0)*x14385*x14393))+((r20*x14397)));
evalcond[1]=((((-1.0)*gconst16*r11*x14393))+(((-1.0)*r12*x14398))+cj12+((r10*x14397)));
evalcond[2]=(((x14377*x14380))+(((-1.0)*sj12))+(((-1.0)*gconst16*r01*x14393))+(((-1.0)*r02*x14398)));
evalcond[3]=(((r20*x14381))+(((-1.0)*sj13*x14382))+((gconst17*x14379))+(((-1.0)*cj13*x14384))+((cj15*x14378*x14385))+(((-1.0)*r20*x14400)));
evalcond[4]=((((-1.0)*gconst17*r20*x14399))+(((-1.0)*r20*x14395))+((gconst16*x14378*x14379))+((sj13*sj14))+(((-1.0)*cj13*x14382))+(((-1.0)*gconst17*r21*x14386)));
evalcond[5]=(((r00*x14381))+(((-1.0)*r02*x14377*x14386))+(((-1.0)*x14383*x14384))+((x14391*x14394))+((sj15*x14390))+(((-1.0)*x14378*x14380*x14386))+((cj14*x14392)));
evalcond[6]=((((-1.0)*r12*x14377*x14386))+(((-1.0)*x14384*x14388))+(((-1.0)*r10*x14400))+((r10*x14381))+((x14391*x14396))+((sj15*x14387))+((cj14*x14389)));
evalcond[7]=((((-1.0)*x14384*x14392))+(((-1.0)*x14380*x14399))+(((-1.0)*x14382*x14383))+(((-1.0)*r02*sj15*x14393))+(((-1.0)*r00*x14395))+((x14381*x14394))+(((-1.0)*x14386*x14390)));
evalcond[8]=((((-1.0)*x14386*x14387))+(((-1.0)*x14384*x14389))+(((-1.0)*gconst17*r10*x14399))+(((-1.0)*x14382*x14388))+(((-1.0)*r10*x14395))+((x14381*x14396))+(((-1.0)*r12*sj15*x14393)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x14401=((1.0)*gconst17);
CheckValue<IkReal> x14402 = IKatan2WithCheck(IkReal((((gconst16*r11*sj12))+((cj12*gconst16*r01))+(((-1.0)*cj12*r00*x14401))+(((-1.0)*r10*sj12*x14401)))),IkReal(((((-1.0)*cj12*r02))+(((-1.0)*r12*sj12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14402.valid){
continue;
}
CheckValue<IkReal> x14403=IKPowWithIntegerCheck(IKsign((((gconst17*r21))+((gconst16*r20)))),-1);
if(!x14403.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x14402.value)+(((1.5707963267949)*(x14403.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x14404=IKcos(j16);
IkReal x14405=IKsin(j16);
IkReal x14406=(r21*sj15);
IkReal x14407=(gconst17*r00);
IkReal x14408=(gconst16*sj15);
IkReal x14409=((1.0)*cj14);
IkReal x14410=(cj12*sj13);
IkReal x14411=((1.0)*sj14);
IkReal x14412=(gconst16*r21);
IkReal x14413=((1.0)*cj15);
IkReal x14414=(gconst17*r11);
IkReal x14415=(sj12*sj13);
IkReal x14416=(cj13*sj12);
IkReal x14417=(gconst17*r01);
IkReal x14418=(cj15*gconst16);
IkReal x14419=(cj12*cj13);
IkReal x14420=((1.0)*x14404);
IkReal x14421=(r01*x14405);
IkReal x14422=(gconst16*x14413);
IkReal x14423=(r11*x14405);
IkReal x14424=(gconst17*x14404);
IkReal x14425=((1.0)*x14405);
IkReal x14426=(sj15*x14425);
IkReal x14427=(gconst17*x14405*x14413);
evalcond[0]=(((r20*x14424))+(((-1.0)*x14412*x14420)));
evalcond[1]=(cj12+((r10*x14424))+(((-1.0)*gconst16*r11*x14420))+(((-1.0)*r12*x14425)));
evalcond[2]=(((x14404*x14407))+(((-1.0)*sj12))+(((-1.0)*r02*x14425))+(((-1.0)*gconst16*r01*x14420)));
evalcond[3]=(((cj15*x14405*x14412))+(((-1.0)*sj13*x14409))+((gconst17*x14406))+(((-1.0)*cj13*x14411))+((r20*x14408))+(((-1.0)*r20*x14427)));
evalcond[4]=((((-1.0)*gconst17*r21*x14413))+(((-1.0)*gconst17*r20*x14426))+((sj13*sj14))+((gconst16*x14405*x14406))+(((-1.0)*cj13*x14409))+(((-1.0)*r20*x14422)));
evalcond[5]=((((-1.0)*x14405*x14407*x14413))+(((-1.0)*r02*x14404*x14413))+((x14418*x14421))+((sj15*x14417))+((cj14*x14419))+((r00*x14408))+(((-1.0)*x14410*x14411)));
evalcond[6]=(((r10*x14408))+(((-1.0)*r10*x14427))+((x14418*x14423))+((sj15*x14414))+((cj14*x14416))+(((-1.0)*r12*x14404*x14413))+(((-1.0)*x14411*x14415)));
evalcond[7]=((((-1.0)*x14407*x14426))+(((-1.0)*x14413*x14417))+((x14408*x14421))+(((-1.0)*x14411*x14419))+(((-1.0)*r00*x14422))+(((-1.0)*x14409*x14410))+(((-1.0)*r02*sj15*x14420)));
evalcond[8]=((((-1.0)*r10*x14422))+(((-1.0)*x14413*x14414))+((x14408*x14423))+(((-1.0)*gconst17*r10*x14426))+(((-1.0)*x14411*x14416))+(((-1.0)*r12*sj15*x14420))+(((-1.0)*x14409*x14415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j16]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x14428=((1.0)*gconst17);
CheckValue<IkReal> x14429=IKPowWithIntegerCheck(IKsign((((gconst17*r21))+((gconst16*r20)))),-1);
if(!x14429.valid){
continue;
}
CheckValue<IkReal> x14430 = IKatan2WithCheck(IkReal(((((-1.0)*r10*sj12*x14428))+(((-1.0)*cj12*r00*x14428))+((gconst16*r11*sj12))+((cj12*gconst16*r01)))),IkReal(((((-1.0)*cj12*r02))+(((-1.0)*r12*sj12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14430.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14429.value)))+(x14430.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x14431=IKcos(j16);
IkReal x14432=IKsin(j16);
IkReal x14433=(r21*sj15);
IkReal x14434=(gconst17*r00);
IkReal x14435=(gconst16*sj15);
IkReal x14436=((1.0)*cj14);
IkReal x14437=(cj12*sj13);
IkReal x14438=((1.0)*sj14);
IkReal x14439=(gconst16*r21);
IkReal x14440=(gconst17*r11);
IkReal x14441=((1.0)*cj15);
IkReal x14442=(gconst17*sj15);
IkReal x14443=(sj12*sj13);
IkReal x14444=(cj13*sj12);
IkReal x14445=(cj15*gconst16);
IkReal x14446=(cj12*cj13);
IkReal x14447=((1.0)*x14431);
IkReal x14448=(r01*x14432);
IkReal x14449=(gconst16*x14441);
IkReal x14450=(r11*x14432);
IkReal x14451=((1.0)*x14432);
IkReal x14452=(gconst17*x14431);
IkReal x14453=(gconst17*x14432*x14441);
evalcond[0]=((((-1.0)*x14439*x14447))+((r20*x14452))+(((-1.0)*r22*x14451)));
evalcond[1]=(((r10*x14452))+cj12+(((-1.0)*gconst16*r11*x14447))+(((-1.0)*r12*x14451)));
evalcond[2]=((((-1.0)*sj12))+(((-1.0)*gconst16*r01*x14447))+(((-1.0)*r02*x14451))+((x14431*x14434)));
evalcond[3]=(((r20*x14435))+((gconst17*x14433))+(((-1.0)*cj13*x14438))+((cj15*x14432*x14439))+(((-1.0)*sj13*x14436))+(((-1.0)*r20*x14453))+(((-1.0)*r22*x14431*x14441)));
evalcond[4]=((((-1.0)*r20*x14442*x14451))+(((-1.0)*gconst17*r21*x14441))+((gconst16*x14432*x14433))+(((-1.0)*cj13*x14436))+((sj13*sj14))+(((-1.0)*r22*sj15*x14447))+(((-1.0)*r20*x14449)));
evalcond[5]=(((r01*x14442))+(((-1.0)*x14432*x14434*x14441))+((r00*x14435))+(((-1.0)*r02*x14431*x14441))+(((-1.0)*x14437*x14438))+((cj14*x14446))+((x14445*x14448)));
evalcond[6]=((((-1.0)*x14438*x14443))+((sj15*x14440))+((r10*x14435))+((cj14*x14444))+((x14445*x14450))+(((-1.0)*r12*x14431*x14441))+(((-1.0)*r10*x14453)));
evalcond[7]=((((-1.0)*x14438*x14446))+(((-1.0)*x14436*x14437))+(((-1.0)*gconst17*r01*x14441))+(((-1.0)*r00*x14449))+(((-1.0)*r02*sj15*x14447))+((x14435*x14448))+(((-1.0)*sj15*x14434*x14451)));
evalcond[8]=((((-1.0)*x14438*x14444))+(((-1.0)*x14440*x14441))+(((-1.0)*x14436*x14443))+(((-1.0)*r10*x14442*x14451))+((x14435*x14450))+(((-1.0)*r12*sj15*x14447))+(((-1.0)*r10*x14449)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x14454 = IKatan2WithCheck(IkReal(((((-1.0)*gconst16*r21*sj12))+((gconst17*r20*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x14454.valid){
continue;
}
CheckValue<IkReal> x14455=IKPowWithIntegerCheck(IKsign((((gconst17*r11))+((gconst16*r10)))),-1);
if(!x14455.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x14454.value)+(((1.5707963267949)*(x14455.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x14456=IKcos(j16);
IkReal x14457=IKsin(j16);
IkReal x14458=(r21*sj15);
IkReal x14459=(gconst17*r00);
IkReal x14460=(gconst16*sj15);
IkReal x14461=((1.0)*cj14);
IkReal x14462=(cj12*sj13);
IkReal x14463=((1.0)*sj14);
IkReal x14464=(gconst16*r21);
IkReal x14465=(gconst17*r11);
IkReal x14466=((1.0)*cj15);
IkReal x14467=(gconst17*sj15);
IkReal x14468=(sj12*sj13);
IkReal x14469=(cj13*sj12);
IkReal x14470=(cj15*gconst16);
IkReal x14471=(cj12*cj13);
IkReal x14472=((1.0)*x14456);
IkReal x14473=(r01*x14457);
IkReal x14474=(gconst16*x14466);
IkReal x14475=(r11*x14457);
IkReal x14476=((1.0)*x14457);
IkReal x14477=(gconst17*x14456);
IkReal x14478=(gconst17*x14457*x14466);
evalcond[0]=((((-1.0)*x14464*x14472))+(((-1.0)*r22*x14476))+((r20*x14477)));
evalcond[1]=(((r10*x14477))+(((-1.0)*gconst16*r11*x14472))+(((-1.0)*r12*x14476))+cj12);
evalcond[2]=(((x14456*x14459))+(((-1.0)*r02*x14476))+(((-1.0)*sj12))+(((-1.0)*gconst16*r01*x14472)));
evalcond[3]=((((-1.0)*cj13*x14463))+((gconst17*x14458))+(((-1.0)*r20*x14478))+(((-1.0)*r22*x14456*x14466))+((r20*x14460))+((cj15*x14457*x14464))+(((-1.0)*sj13*x14461)));
evalcond[4]=((((-1.0)*r22*sj15*x14472))+(((-1.0)*cj13*x14461))+(((-1.0)*gconst17*r21*x14466))+((gconst16*x14457*x14458))+(((-1.0)*r20*x14467*x14476))+(((-1.0)*r20*x14474))+((sj13*sj14)));
evalcond[5]=((((-1.0)*r02*x14456*x14466))+(((-1.0)*x14462*x14463))+((r01*x14467))+((r00*x14460))+(((-1.0)*x14457*x14459*x14466))+((cj14*x14471))+((x14470*x14473)));
evalcond[6]=((((-1.0)*x14463*x14468))+((cj14*x14469))+((r10*x14460))+(((-1.0)*r10*x14478))+(((-1.0)*r12*x14456*x14466))+((sj15*x14465))+((x14470*x14475)));
evalcond[7]=((((-1.0)*r00*x14474))+((x14460*x14473))+(((-1.0)*x14463*x14471))+(((-1.0)*gconst17*r01*x14466))+(((-1.0)*r02*sj15*x14472))+(((-1.0)*sj15*x14459*x14476))+(((-1.0)*x14461*x14462)));
evalcond[8]=((((-1.0)*x14463*x14469))+((x14460*x14475))+(((-1.0)*r12*sj15*x14472))+(((-1.0)*r10*x14474))+(((-1.0)*x14465*x14466))+(((-1.0)*r10*x14467*x14476))+(((-1.0)*x14461*x14468)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x14479 = IKatan2WithCheck(IkReal((((cj12*gconst17*r20))+(((-1.0)*cj12*gconst16*r21)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x14479.valid){
continue;
}
CheckValue<IkReal> x14480=IKPowWithIntegerCheck(IKsign((((gconst17*r01))+((gconst16*r00)))),-1);
if(!x14480.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x14479.value)+(((1.5707963267949)*(x14480.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x14481=IKcos(j16);
IkReal x14482=IKsin(j16);
IkReal x14483=(r21*sj15);
IkReal x14484=(gconst17*r00);
IkReal x14485=(gconst16*sj15);
IkReal x14486=((1.0)*cj14);
IkReal x14487=(cj12*sj13);
IkReal x14488=((1.0)*sj14);
IkReal x14489=(gconst16*r21);
IkReal x14490=(gconst17*r11);
IkReal x14491=((1.0)*cj15);
IkReal x14492=(gconst17*sj15);
IkReal x14493=(sj12*sj13);
IkReal x14494=(cj13*sj12);
IkReal x14495=(cj15*gconst16);
IkReal x14496=(cj12*cj13);
IkReal x14497=((1.0)*x14481);
IkReal x14498=(r01*x14482);
IkReal x14499=(gconst16*x14491);
IkReal x14500=(r11*x14482);
IkReal x14501=((1.0)*x14482);
IkReal x14502=(gconst17*x14481);
IkReal x14503=(gconst17*x14482*x14491);
evalcond[0]=(((r20*x14502))+(((-1.0)*r22*x14501))+(((-1.0)*x14489*x14497)));
evalcond[1]=((((-1.0)*gconst16*r11*x14497))+(((-1.0)*r12*x14501))+((r10*x14502))+cj12);
evalcond[2]=((((-1.0)*gconst16*r01*x14497))+(((-1.0)*r02*x14501))+(((-1.0)*sj12))+((x14481*x14484)));
evalcond[3]=((((-1.0)*sj13*x14486))+((cj15*x14482*x14489))+(((-1.0)*r20*x14503))+(((-1.0)*r22*x14481*x14491))+((gconst17*x14483))+((r20*x14485))+(((-1.0)*cj13*x14488)));
evalcond[4]=((((-1.0)*gconst17*r21*x14491))+(((-1.0)*r20*x14492*x14501))+(((-1.0)*r20*x14499))+((sj13*sj14))+(((-1.0)*r22*sj15*x14497))+((gconst16*x14482*x14483))+(((-1.0)*cj13*x14486)));
evalcond[5]=((((-1.0)*r02*x14481*x14491))+(((-1.0)*x14487*x14488))+((cj14*x14496))+(((-1.0)*x14482*x14484*x14491))+((r00*x14485))+((x14495*x14498))+((r01*x14492)));
evalcond[6]=(((r10*x14485))+(((-1.0)*x14488*x14493))+((sj15*x14490))+(((-1.0)*r10*x14503))+((x14495*x14500))+((cj14*x14494))+(((-1.0)*r12*x14481*x14491)));
evalcond[7]=((((-1.0)*r00*x14499))+(((-1.0)*gconst17*r01*x14491))+(((-1.0)*x14486*x14487))+(((-1.0)*x14488*x14496))+((x14485*x14498))+(((-1.0)*r02*sj15*x14497))+(((-1.0)*sj15*x14484*x14501)));
evalcond[8]=((((-1.0)*x14488*x14494))+(((-1.0)*r10*x14499))+(((-1.0)*r10*x14492*x14501))+(((-1.0)*x14490*x14491))+((x14485*x14500))+(((-1.0)*r12*sj15*x14497))+(((-1.0)*x14486*x14493)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
sj12=1.0;
cj12=0;
j12=1.5707963267949;
IkReal x14504=(((cj17*r11))+((r10*sj17)));
j16eval[0]=x14504;
j16eval[1]=IKsign(x14504);
j16eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*r21*sj17))+((cj17*r20))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj12=1.0;
cj12=0;
j12=1.5707963267949;
IkReal x14505=((1.0)*sj17);
IkReal x14506=((((-1.0)*cj17*r21))+(((-1.0)*r20*x14505)));
j16eval[0]=x14506;
j16eval[1]=IKsign(x14506);
j16eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*r11*x14505))+((cj17*r10))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
sj12=1.0;
cj12=0;
j12=1.5707963267949;
IkReal x14507=cj17*cj17;
IkReal x14508=(cj15*r01);
IkReal x14509=(cj15*r00);
IkReal x14510=((1.0)*cj17*sj17);
IkReal x14511=(((r20*x14507*x14509))+(((-1.0)*r21*x14507*x14508))+(((-1.0)*r21*x14509*x14510))+(((-1.0)*r20*x14508*x14510))+((r21*x14508))+((cj15*r02*r22)));
j16eval[0]=x14511;
j16eval[1]=IKsign(x14511);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
sj12=1.0;
cj12=0;
j12=1.5707963267949;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
IkReal x14512=(((cj17*r11))+((r10*sj17)));
j16eval[0]=x14512;
j16eval[1]=IKsign(x14512);
j16eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*r21*sj17))+((cj17*r20))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj12=1.0;
cj12=0;
j12=1.5707963267949;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
IkReal x14513=((1.0)*sj17);
IkReal x14514=((((-1.0)*cj17*r21))+(((-1.0)*r20*x14513)));
j16eval[0]=x14514;
j16eval[1]=IKsign(x14514);
j16eval[2]=((IKabs(r12))+(IKabs((((cj17*r10))+(((-1.0)*r11*x14513))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj12=1.0;
cj12=0;
j12=1.5707963267949;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
IkReal x14515=cj17*cj17;
IkReal x14516=r01*r01;
IkReal x14517=(r01*sj17);
IkReal x14518=(cj17*r00);
IkReal x14519=((((-1.0)*x14515*(r00*r00)))+(((-1.0)*(r02*r02)))+((x14515*x14516))+(((2.0)*x14517*x14518))+(((-1.0)*x14516)));
j16eval[0]=x14519;
j16eval[1]=IKsign(x14519);
j16eval[2]=((IKabs(r02))+(IKabs((x14517+(((-1.0)*x14518))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x14520=cj17*cj17;
IkReal x14521=r01*r01;
IkReal x14522=(r01*sj17);
IkReal x14523=(cj17*r00);
CheckValue<IkReal> x14524=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14521))+((x14520*x14521))+(((2.0)*x14522*x14523))+(((-1.0)*(r02*r02)))+(((-1.0)*x14520*(r00*r00))))),-1);
if(!x14524.valid){
continue;
}
CheckValue<IkReal> x14525 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x14523))+x14522)),IKFAST_ATAN2_MAGTHRESH);
if(!x14525.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14524.value)))+(x14525.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x14526=IKcos(j16);
IkReal x14527=IKsin(j16);
IkReal x14528=((1.0)*cj13);
IkReal x14529=(r11*sj17);
IkReal x14530=(cj17*x14526);
IkReal x14531=((1.0)*x14526);
IkReal x14532=((1.0)*x14527);
IkReal x14533=(sj17*x14527);
IkReal x14534=(cj17*x14532);
evalcond[0]=((((-1.0)*r22*x14532))+(((-1.0)*r21*sj17*x14531))+((r20*x14530)));
evalcond[1]=((((-1.0)*r12*x14532))+(((-1.0)*x14529*x14531))+((r10*x14530)));
evalcond[2]=((((-1.0)*r00*x14534))+((r01*x14533))+(((-1.0)*r02*x14531)));
evalcond[3]=((-1.0)+((r00*x14530))+(((-1.0)*r02*x14532))+(((-1.0)*r01*sj17*x14531)));
evalcond[4]=((((-1.0)*r22*x14531))+(((-1.0)*r20*x14534))+((r21*x14533))+(((-1.0)*cj14*x14528))+((sj13*sj14)));
evalcond[5]=((((-1.0)*r12*x14531))+(((-1.0)*r10*x14534))+((x14527*x14529))+(((-1.0)*sj14*x14528))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x14535=((1.0)*sj17);
CheckValue<IkReal> x14536 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x14535))+((cj17*r10)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x14536.valid){
continue;
}
CheckValue<IkReal> x14537=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x14535))+(((-1.0)*cj17*r21)))),-1);
if(!x14537.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x14536.value)+(((1.5707963267949)*(x14537.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x14538=IKcos(j16);
IkReal x14539=IKsin(j16);
IkReal x14540=((1.0)*cj13);
IkReal x14541=(r11*sj17);
IkReal x14542=(cj17*x14538);
IkReal x14543=((1.0)*x14538);
IkReal x14544=((1.0)*x14539);
IkReal x14545=(sj17*x14539);
IkReal x14546=(cj17*x14544);
evalcond[0]=((((-1.0)*r21*sj17*x14543))+((r20*x14542))+(((-1.0)*r22*x14544)));
evalcond[1]=(((r10*x14542))+(((-1.0)*r12*x14544))+(((-1.0)*x14541*x14543)));
evalcond[2]=((((-1.0)*r00*x14546))+((r01*x14545))+(((-1.0)*r02*x14543)));
evalcond[3]=((-1.0)+(((-1.0)*r01*sj17*x14543))+((r00*x14542))+(((-1.0)*r02*x14544)));
evalcond[4]=((((-1.0)*r20*x14546))+((r21*x14545))+(((-1.0)*cj14*x14540))+((sj13*sj14))+(((-1.0)*r22*x14543)));
evalcond[5]=((((-1.0)*r10*x14546))+((x14539*x14541))+(((-1.0)*sj14*x14540))+(((-1.0)*r12*x14543))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x14547 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj17))+((cj17*r20)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x14547.valid){
continue;
}
CheckValue<IkReal> x14548=IKPowWithIntegerCheck(IKsign((((cj17*r11))+((r10*sj17)))),-1);
if(!x14548.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x14547.value)+(((1.5707963267949)*(x14548.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x14549=IKcos(j16);
IkReal x14550=IKsin(j16);
IkReal x14551=((1.0)*cj13);
IkReal x14552=(r11*sj17);
IkReal x14553=(cj17*x14549);
IkReal x14554=((1.0)*x14549);
IkReal x14555=((1.0)*x14550);
IkReal x14556=(sj17*x14550);
IkReal x14557=(cj17*x14555);
evalcond[0]=(((r20*x14553))+(((-1.0)*r22*x14555))+(((-1.0)*r21*sj17*x14554)));
evalcond[1]=((((-1.0)*x14552*x14554))+((r10*x14553))+(((-1.0)*r12*x14555)));
evalcond[2]=((((-1.0)*r02*x14554))+(((-1.0)*r00*x14557))+((r01*x14556)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14555))+(((-1.0)*r01*sj17*x14554))+((r00*x14553)));
evalcond[4]=((((-1.0)*r22*x14554))+(((-1.0)*r20*x14557))+((sj13*sj14))+((r21*x14556))+(((-1.0)*cj14*x14551)));
evalcond[5]=(((x14550*x14552))+(((-1.0)*sj14*x14551))+(((-1.0)*r12*x14554))+(((-1.0)*r10*x14557))+(((-1.0)*cj14*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
sj12=1.0;
cj12=0;
j12=1.5707963267949;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
IkReal x14558=(((cj17*r11))+((r10*sj17)));
j16eval[0]=x14558;
j16eval[1]=IKsign(x14558);
j16eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*r21*sj17))+((cj17*r20))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj12=1.0;
cj12=0;
j12=1.5707963267949;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
IkReal x14559=((1.0)*sj17);
IkReal x14560=((((-1.0)*cj17*r21))+(((-1.0)*r20*x14559)));
j16eval[0]=x14560;
j16eval[1]=IKsign(x14560);
j16eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*r11*x14559))+((cj17*r10))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj12=1.0;
cj12=0;
j12=1.5707963267949;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
IkReal x14561=(sj13*sj14);
IkReal x14562=(cj17*r00);
IkReal x14563=(r01*sj17);
IkReal x14564=((1.0)*cj13*cj14);
IkReal x14565=(((cj17*r11))+((r10*sj17)));
j16eval[0]=x14565;
j16eval[1]=((IKabs(((((-1.0)*r02*x14564))+((r02*x14561)))))+(IKabs(((((-1.0)*x14561*x14562))+(((-1.0)*x14563*x14564))+((x14561*x14563))+((cj13*cj14*x14562))))));
j16eval[2]=IKsign(x14565);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x14566=(sj13*sj14);
IkReal x14567=(cj17*r00);
IkReal x14568=(r01*sj17);
IkReal x14569=((1.0)*cj13*cj14);
CheckValue<IkReal> x14570=IKPowWithIntegerCheck(IKsign((((cj17*r11))+((r10*sj17)))),-1);
if(!x14570.valid){
continue;
}
CheckValue<IkReal> x14571 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x14569))+((r02*x14566)))),IkReal(((((-1.0)*x14566*x14567))+((x14566*x14568))+((cj13*cj14*x14567))+(((-1.0)*x14568*x14569)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14571.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14570.value)))+(x14571.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x14572=IKsin(j16);
IkReal x14573=IKcos(j16);
IkReal x14574=((1.0)*cj13);
IkReal x14575=((1.0)*sj17);
IkReal x14576=(cj17*x14572);
IkReal x14577=(cj17*x14573);
IkReal x14578=((1.0)*x14572);
evalcond[0]=(((r02*x14573))+(((-1.0)*r01*x14572*x14575))+((r00*x14576)));
evalcond[1]=((((-1.0)*r21*x14573*x14575))+((r20*x14577))+(((-1.0)*r22*x14578)));
evalcond[2]=((((-1.0)*r12*x14578))+(((-1.0)*r11*x14573*x14575))+((r10*x14577)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14578))+(((-1.0)*r01*x14573*x14575))+((r00*x14577)));
evalcond[4]=((((-1.0)*r21*x14572*x14575))+(((-1.0)*cj14*x14574))+((r20*x14576))+((sj13*sj14))+((r22*x14573)));
evalcond[5]=((((-1.0)*r11*x14572*x14575))+((r10*x14576))+((r12*x14573))+(((-1.0)*cj14*sj13))+(((-1.0)*sj14*x14574)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x14579=((1.0)*sj17);
CheckValue<IkReal> x14580 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x14579))+((cj17*r10)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x14580.valid){
continue;
}
CheckValue<IkReal> x14581=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj17*r21))+(((-1.0)*r20*x14579)))),-1);
if(!x14581.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x14580.value)+(((1.5707963267949)*(x14581.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x14582=IKsin(j16);
IkReal x14583=IKcos(j16);
IkReal x14584=((1.0)*cj13);
IkReal x14585=((1.0)*sj17);
IkReal x14586=(cj17*x14582);
IkReal x14587=(cj17*x14583);
IkReal x14588=((1.0)*x14582);
evalcond[0]=(((r02*x14583))+((r00*x14586))+(((-1.0)*r01*x14582*x14585)));
evalcond[1]=((((-1.0)*r21*x14583*x14585))+((r20*x14587))+(((-1.0)*r22*x14588)));
evalcond[2]=((((-1.0)*r12*x14588))+((r10*x14587))+(((-1.0)*r11*x14583*x14585)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14588))+(((-1.0)*r01*x14583*x14585))+((r00*x14587)));
evalcond[4]=(((r20*x14586))+((r22*x14583))+(((-1.0)*cj14*x14584))+((sj13*sj14))+(((-1.0)*r21*x14582*x14585)));
evalcond[5]=(((r10*x14586))+(((-1.0)*r11*x14582*x14585))+(((-1.0)*cj14*sj13))+((r12*x14583))+(((-1.0)*sj14*x14584)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x14589 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj17))+((cj17*r20)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x14589.valid){
continue;
}
CheckValue<IkReal> x14590=IKPowWithIntegerCheck(IKsign((((cj17*r11))+((r10*sj17)))),-1);
if(!x14590.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x14589.value)+(((1.5707963267949)*(x14590.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x14591=IKsin(j16);
IkReal x14592=IKcos(j16);
IkReal x14593=((1.0)*cj13);
IkReal x14594=((1.0)*sj17);
IkReal x14595=(cj17*x14591);
IkReal x14596=(cj17*x14592);
IkReal x14597=((1.0)*x14591);
evalcond[0]=((((-1.0)*r01*x14591*x14594))+((r00*x14595))+((r02*x14592)));
evalcond[1]=(((r20*x14596))+(((-1.0)*r21*x14592*x14594))+(((-1.0)*r22*x14597)));
evalcond[2]=((((-1.0)*r11*x14592*x14594))+(((-1.0)*r12*x14597))+((r10*x14596)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14597))+(((-1.0)*r01*x14592*x14594))+((r00*x14596)));
evalcond[4]=(((r20*x14595))+((r22*x14592))+(((-1.0)*r21*x14591*x14594))+((sj13*sj14))+(((-1.0)*cj14*x14593)));
evalcond[5]=(((r10*x14595))+(((-1.0)*r11*x14591*x14594))+(((-1.0)*cj14*sj13))+((r12*x14592))+(((-1.0)*sj14*x14593)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14598=((-1.0)*r20);
IkReal x14600 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14600)==0){
continue;
}
IkReal x14599=pow(x14600,-0.5);
CheckValue<IkReal> x14601 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x14598),IKFAST_ATAN2_MAGTHRESH);
if(!x14601.valid){
continue;
}
IkReal gconst42=((-1.0)*(x14601.value));
IkReal gconst43=(r21*x14599);
IkReal gconst44=(x14598*x14599);
CheckValue<IkReal> x14602 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x14602.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j17+(x14602.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
IkReal x14603=((-1.0)*r20);
IkReal x14604=x14599;
CheckValue<IkReal> x14606 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x14603),IKFAST_ATAN2_MAGTHRESH);
if(!x14606.valid){
continue;
}
IkReal x14605=((-1.0)*(x14606.value));
sj12=1.0;
cj12=0;
j12=1.5707963267949;
sj17=gconst43;
cj17=gconst44;
j17=x14605;
IkReal gconst42=x14605;
IkReal gconst43=(r21*x14604);
IkReal gconst44=(x14603*x14604);
j16eval[0]=1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
IkReal x14607=((-1.0)*r20);
IkReal x14608=x14599;
CheckValue<IkReal> x14610 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x14607),IKFAST_ATAN2_MAGTHRESH);
if(!x14610.valid){
continue;
}
IkReal x14609=((-1.0)*(x14610.value));
sj12=1.0;
cj12=0;
j12=1.5707963267949;
sj17=gconst43;
cj17=gconst44;
j17=x14609;
IkReal gconst42=x14609;
IkReal gconst43=(r21*x14608);
IkReal gconst44=(x14607*x14608);
CheckValue<IkReal> x14618=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x14618.valid){
continue;
}
IkReal x14611=x14618.value;
IkReal x14612=(cj15*x14611);
IkReal x14613=(r11*x14612);
IkReal x14614=(r01*x14612);
IkReal x14615=(r00*x14612);
IkReal x14616=(r10*x14612);
IkReal x14617=(r20*r21*x14612);
j16eval[0]=IKsign((((r00*r20*r21*x14613))+((cj15*r02*r12))+((r10*r20*r21*x14614))+((r01*x14613*(r21*r21)))+((r10*x14615*(r20*r20)))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
IkReal x14619=((-1.0)*r20);
IkReal x14620=x14599;
CheckValue<IkReal> x14622 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x14619),IKFAST_ATAN2_MAGTHRESH);
if(!x14622.valid){
continue;
}
IkReal x14621=((-1.0)*(x14622.value));
sj12=1.0;
cj12=0;
j12=1.5707963267949;
sj17=gconst43;
cj17=gconst44;
j17=x14621;
IkReal gconst42=x14621;
IkReal gconst43=(r21*x14620);
IkReal gconst44=(x14619*x14620);
CheckValue<IkReal> x14630=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x14630.valid){
continue;
}
IkReal x14623=x14630.value;
IkReal x14624=(sj15*x14623);
IkReal x14625=(r11*x14624);
IkReal x14626=(r00*x14624);
IkReal x14627=(r01*x14624);
IkReal x14628=(r10*x14624);
IkReal x14629=(r20*r21*x14624);
j16eval[0]=IKsign((((r01*x14625*(r21*r21)))+((r10*x14626*(r20*r20)))+((r02*r12*sj15))+((r10*r20*r21*x14627))+((r00*r20*r21*x14625))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x14631=gconst44*gconst44;
IkReal x14632=gconst43*gconst43;
IkReal x14633=(r11*sj15);
IkReal x14634=(cj15*r11);
IkReal x14635=(cj15*r12);
IkReal x14636=(r10*sj15);
IkReal x14637=(cj15*r10);
IkReal x14638=((1.0)*r01);
IkReal x14639=((1.0)*gconst43*r00);
IkReal x14640=(gconst43*gconst44*r01);
CheckValue<IkReal> x14641=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst44*x14633*x14639))+((r02*r12*sj15))+((r00*x14631*x14636))+((r01*x14632*x14633))+(((-1.0)*gconst43*gconst44*x14636*x14638)))),-1);
if(!x14641.valid){
continue;
}
CheckValue<IkReal> x14642 = IKatan2WithCheck(IkReal(((((-1.0)*gconst44*x14637*x14639))+(((-1.0)*x14631*x14637*x14638))+((r00*x14632*x14634))+((x14634*x14640)))),IkReal(((((-1.0)*x14635*x14639))+(((-1.0)*gconst44*x14635*x14638)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14642.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14641.value)))+(x14642.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x14643=IKcos(j16);
IkReal x14644=IKsin(j16);
IkReal x14645=((1.0)*cj15);
IkReal x14646=(gconst43*r00);
IkReal x14647=(gconst44*r11);
IkReal x14648=(gconst44*r10);
IkReal x14649=(gconst43*r01);
IkReal x14650=(gconst43*r10);
IkReal x14651=((1.0)*gconst44);
IkReal x14652=(cj13*cj14);
IkReal x14653=(gconst43*r20);
IkReal x14654=(gconst44*r21);
IkReal x14655=((1.0)*sj14);
IkReal x14656=(gconst44*r01);
IkReal x14657=(gconst44*r00);
IkReal x14658=(gconst44*r20);
IkReal x14659=(gconst43*r11);
IkReal x14660=(gconst43*r21);
IkReal x14661=((1.0)*cj14*sj13);
IkReal x14662=(cj13*x14655);
IkReal x14663=((1.0)*x14643);
IkReal x14664=(sj15*x14644);
IkReal x14665=((1.0)*x14644);
IkReal x14666=(cj15*gconst43*x14644);
IkReal x14667=(x14662+x14661);
evalcond[0]=((((-1.0)*x14660*x14663))+(((-1.0)*r22*x14665))+((x14643*x14658)));
evalcond[1]=((((-1.0)*x14659*x14663))+(((-1.0)*r12*x14665))+((x14643*x14648)));
evalcond[2]=((-1.0)+(((-1.0)*x14649*x14663))+((x14643*x14657))+(((-1.0)*r02*x14665)));
evalcond[3]=((((-1.0)*r02*x14643*x14645))+(((-1.0)*x14644*x14645*x14657))+((cj15*x14644*x14649))+((sj15*x14646))+((sj15*x14656)));
evalcond[4]=((((-1.0)*r00*x14651*x14664))+(((-1.0)*r02*sj15*x14663))+(((-1.0)*x14645*x14646))+(((-1.0)*x14645*x14656))+((x14649*x14664)));
evalcond[5]=((((-1.0)*x14644*x14645*x14648))+(((-1.0)*r12*x14643*x14645))+((cj15*x14644*x14659))+x14652+(((-1.0)*sj13*x14655))+((sj15*x14647))+((sj15*x14650)));
evalcond[6]=((((-1.0)*r22*x14643*x14645))+(((-1.0)*x14644*x14645*x14658))+((sj15*x14654))+((sj15*x14653))+(((-1.0)*x14667))+((cj15*x14644*x14660)));
evalcond[7]=((((-1.0)*r20*x14651*x14664))+(((-1.0)*x14652))+((x14660*x14664))+(((-1.0)*r22*sj15*x14663))+((sj13*sj14))+(((-1.0)*x14645*x14654))+(((-1.0)*x14645*x14653)));
evalcond[8]=((((-1.0)*x14648*x14664))+(((-1.0)*r12*sj15*x14663))+((x14659*x14664))+(((-1.0)*x14645*x14647))+(((-1.0)*x14645*x14650))+(((-1.0)*x14667)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x14668=gconst43*gconst43;
IkReal x14669=gconst44*gconst44;
IkReal x14670=(r10*sj15);
IkReal x14671=((1.0)*r11);
IkReal x14672=(r00*sj15);
IkReal x14673=(cj15*r10);
IkReal x14674=(gconst43*gconst44*r00);
IkReal x14675=(gconst44*r01*sj15);
CheckValue<IkReal> x14676 = IKatan2WithCheck(IkReal(((((-1.0)*gconst43*x14671*x14675))+((x14670*x14674))+((r01*x14669*x14670))+(((-1.0)*x14668*x14671*x14672)))),IkReal((((r12*x14675))+((gconst43*r12*x14672)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14676.valid){
continue;
}
CheckValue<IkReal> x14677=IKPowWithIntegerCheck(IKsign((((cj15*r02*r12))+((cj15*r01*r11*x14668))+((r00*x14669*x14673))+(((-1.0)*cj15*x14671*x14674))+(((-1.0)*gconst43*gconst44*r01*x14673)))),-1);
if(!x14677.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x14676.value)+(((1.5707963267949)*(x14677.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x14678=IKcos(j16);
IkReal x14679=IKsin(j16);
IkReal x14680=((1.0)*cj15);
IkReal x14681=(gconst43*r00);
IkReal x14682=(gconst44*r11);
IkReal x14683=(gconst44*r10);
IkReal x14684=(gconst43*r01);
IkReal x14685=(gconst43*r10);
IkReal x14686=((1.0)*gconst44);
IkReal x14687=(cj13*cj14);
IkReal x14688=(gconst43*r20);
IkReal x14689=(gconst44*r21);
IkReal x14690=((1.0)*sj14);
IkReal x14691=(gconst44*r01);
IkReal x14692=(gconst44*r00);
IkReal x14693=(gconst44*r20);
IkReal x14694=(gconst43*r11);
IkReal x14695=(gconst43*r21);
IkReal x14696=((1.0)*cj14*sj13);
IkReal x14697=(cj13*x14690);
IkReal x14698=((1.0)*x14678);
IkReal x14699=(sj15*x14679);
IkReal x14700=((1.0)*x14679);
IkReal x14701=(cj15*gconst43*x14679);
IkReal x14702=(x14697+x14696);
evalcond[0]=(((x14678*x14693))+(((-1.0)*x14695*x14698))+(((-1.0)*r22*x14700)));
evalcond[1]=((((-1.0)*x14694*x14698))+((x14678*x14683))+(((-1.0)*r12*x14700)));
evalcond[2]=((-1.0)+(((-1.0)*x14684*x14698))+((x14678*x14692))+(((-1.0)*r02*x14700)));
evalcond[3]=(((cj15*x14679*x14684))+(((-1.0)*r02*x14678*x14680))+(((-1.0)*x14679*x14680*x14692))+((sj15*x14681))+((sj15*x14691)));
evalcond[4]=((((-1.0)*r02*sj15*x14698))+(((-1.0)*x14680*x14691))+((x14684*x14699))+(((-1.0)*x14680*x14681))+(((-1.0)*r00*x14686*x14699)));
evalcond[5]=(((cj15*x14679*x14694))+(((-1.0)*x14679*x14680*x14683))+x14687+((sj15*x14682))+((sj15*x14685))+(((-1.0)*r12*x14678*x14680))+(((-1.0)*sj13*x14690)));
evalcond[6]=((((-1.0)*r22*x14678*x14680))+(((-1.0)*x14702))+((cj15*x14679*x14695))+(((-1.0)*x14679*x14680*x14693))+((sj15*x14688))+((sj15*x14689)));
evalcond[7]=((((-1.0)*r20*x14686*x14699))+(((-1.0)*x14680*x14688))+(((-1.0)*x14680*x14689))+((x14695*x14699))+((sj13*sj14))+(((-1.0)*r22*sj15*x14698))+(((-1.0)*x14687)));
evalcond[8]=((((-1.0)*x14702))+(((-1.0)*x14680*x14685))+(((-1.0)*x14680*x14682))+((x14694*x14699))+(((-1.0)*r12*sj15*x14698))+(((-1.0)*x14683*x14699)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x14703=IKPowWithIntegerCheck(IKsign((((gconst43*r10))+((gconst44*r11)))),-1);
if(!x14703.valid){
continue;
}
CheckValue<IkReal> x14704 = IKatan2WithCheck(IkReal((((gconst44*r20))+(((-1.0)*gconst43*r21)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x14704.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14703.value)))+(x14704.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x14705=IKcos(j16);
IkReal x14706=IKsin(j16);
IkReal x14707=((1.0)*cj15);
IkReal x14708=(gconst43*r00);
IkReal x14709=(gconst44*r11);
IkReal x14710=(gconst44*r10);
IkReal x14711=(gconst43*r01);
IkReal x14712=(gconst43*r10);
IkReal x14713=((1.0)*gconst44);
IkReal x14714=(cj13*cj14);
IkReal x14715=(gconst43*r20);
IkReal x14716=(gconst44*r21);
IkReal x14717=((1.0)*sj14);
IkReal x14718=(gconst44*r01);
IkReal x14719=(gconst44*r00);
IkReal x14720=(gconst44*r20);
IkReal x14721=(gconst43*r11);
IkReal x14722=(gconst43*r21);
IkReal x14723=((1.0)*cj14*sj13);
IkReal x14724=(cj13*x14717);
IkReal x14725=((1.0)*x14705);
IkReal x14726=(sj15*x14706);
IkReal x14727=((1.0)*x14706);
IkReal x14728=(cj15*gconst43*x14706);
IkReal x14729=(x14723+x14724);
evalcond[0]=((((-1.0)*x14722*x14725))+((x14705*x14720))+(((-1.0)*r22*x14727)));
evalcond[1]=((((-1.0)*r12*x14727))+(((-1.0)*x14721*x14725))+((x14705*x14710)));
evalcond[2]=((-1.0)+(((-1.0)*x14711*x14725))+((x14705*x14719))+(((-1.0)*r02*x14727)));
evalcond[3]=(((sj15*x14718))+((cj15*x14706*x14711))+(((-1.0)*x14706*x14707*x14719))+((sj15*x14708))+(((-1.0)*r02*x14705*x14707)));
evalcond[4]=((((-1.0)*r02*sj15*x14725))+((x14711*x14726))+(((-1.0)*x14707*x14718))+(((-1.0)*r00*x14713*x14726))+(((-1.0)*x14707*x14708)));
evalcond[5]=((((-1.0)*r12*x14705*x14707))+((sj15*x14712))+(((-1.0)*x14706*x14707*x14710))+((cj15*x14706*x14721))+x14714+((sj15*x14709))+(((-1.0)*sj13*x14717)));
evalcond[6]=(((sj15*x14716))+((sj15*x14715))+(((-1.0)*x14706*x14707*x14720))+(((-1.0)*r22*x14705*x14707))+((cj15*x14706*x14722))+(((-1.0)*x14729)));
evalcond[7]=((((-1.0)*r20*x14713*x14726))+(((-1.0)*x14707*x14715))+(((-1.0)*x14707*x14716))+((x14722*x14726))+(((-1.0)*r22*sj15*x14725))+((sj13*sj14))+(((-1.0)*x14714)));
evalcond[8]=((((-1.0)*x14707*x14712))+((x14721*x14726))+(((-1.0)*r12*sj15*x14725))+(((-1.0)*x14710*x14726))+(((-1.0)*x14729))+(((-1.0)*x14707*x14709)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14730=((-1.0)*r21);
IkReal x14732 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14732)==0){
continue;
}
IkReal x14731=pow(x14732,-0.5);
CheckValue<IkReal> x14733 = IKatan2WithCheck(IkReal(x14730),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x14733.valid){
continue;
}
IkReal gconst45=((3.14159265358979)+(((-1.0)*(x14733.value))));
IkReal gconst46=(x14730*x14731);
IkReal gconst47=((1.0)*r20*x14731);
CheckValue<IkReal> x14734 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x14734.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j17+(x14734.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
IkReal x14735=((-1.0)*r21);
CheckValue<IkReal> x14738 = IKatan2WithCheck(IkReal(x14735),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x14738.valid){
continue;
}
IkReal x14736=((1.0)*(x14738.value));
IkReal x14737=x14731;
sj12=1.0;
cj12=0;
j12=1.5707963267949;
sj17=gconst46;
cj17=gconst47;
j17=((3.14159265)+(((-1.0)*x14736)));
IkReal gconst45=((3.14159265358979)+(((-1.0)*x14736)));
IkReal gconst46=(x14735*x14737);
IkReal gconst47=((1.0)*r20*x14737);
j16eval[0]=1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[4];
IkReal x14739=((-1.0)*r21);
CheckValue<IkReal> x14742 = IKatan2WithCheck(IkReal(x14739),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x14742.valid){
continue;
}
IkReal x14740=((1.0)*(x14742.value));
IkReal x14741=x14731;
sj12=1.0;
cj12=0;
j12=1.5707963267949;
sj17=gconst46;
cj17=gconst47;
j17=((3.14159265)+(((-1.0)*x14740)));
IkReal gconst45=((3.14159265358979)+(((-1.0)*x14740)));
IkReal gconst46=(x14739*x14741);
IkReal gconst47=((1.0)*r20*x14741);
j16eval[0]=0;
j16eval[1]=0;
j16eval[2]=r12;
j16eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  || IKabs(j16eval[3]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
IkReal x14743=((-1.0)*r21);
CheckValue<IkReal> x14746 = IKatan2WithCheck(IkReal(x14743),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x14746.valid){
continue;
}
IkReal x14744=((1.0)*(x14746.value));
IkReal x14745=x14731;
sj12=1.0;
cj12=0;
j12=1.5707963267949;
sj17=gconst46;
cj17=gconst47;
j17=((3.14159265)+(((-1.0)*x14744)));
IkReal gconst45=((3.14159265358979)+(((-1.0)*x14744)));
IkReal gconst46=(x14743*x14745);
IkReal gconst47=((1.0)*r20*x14745);
j16eval[0]=r12;
j16eval[1]=sj15;
j16eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x14747=gconst47*gconst47;
IkReal x14748=gconst46*gconst46;
IkReal x14749=(r01*sj15);
IkReal x14750=(r00*sj15);
IkReal x14751=(cj15*r01);
IkReal x14752=(cj15*r00);
IkReal x14753=(r20*x14747);
IkReal x14754=(r21*x14748);
IkReal x14755=((1.0)*gconst46*gconst47);
CheckValue<IkReal> x14756=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14752*x14755))+((cj15*r02*r22))+((x14751*x14754))+((x14752*x14753))+(((-1.0)*r20*x14751*x14755)))),-1);
if(!x14756.valid){
continue;
}
CheckValue<IkReal> x14757 = IKatan2WithCheck(IkReal((((x14749*x14753))+(((-1.0)*r21*x14749*x14755))+((gconst46*gconst47*r20*x14750))+(((-1.0)*x14750*x14754)))),IkReal((((gconst46*r22*x14750))+((gconst47*r22*x14749)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14757.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14756.value)))+(x14757.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x14758=IKcos(j16);
IkReal x14759=IKsin(j16);
IkReal x14760=((1.0)*gconst46);
IkReal x14761=(cj15*r00);
IkReal x14762=(gconst47*sj15);
IkReal x14763=(gconst46*sj15);
IkReal x14764=(gconst47*r20);
IkReal x14765=(cj15*r10);
IkReal x14766=(cj13*cj14);
IkReal x14767=((1.0)*sj14);
IkReal x14768=((1.0)*cj14*sj13);
IkReal x14769=(cj13*x14767);
IkReal x14770=((1.0)*x14758);
IkReal x14771=((1.0)*x14759);
IkReal x14772=((1.0)*cj15*gconst47);
IkReal x14773=(gconst47*x14758);
IkReal x14774=(cj15*gconst46*x14759);
IkReal x14775=(x14769+x14768);
evalcond[0]=(((x14758*x14764))+(((-1.0)*r22*x14771))+(((-1.0)*r21*x14758*x14760)));
evalcond[1]=(((r10*x14773))+(((-1.0)*r11*x14758*x14760))+(((-1.0)*r12*x14771)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14771))+(((-1.0)*r01*x14758*x14760))+((r00*x14773)));
evalcond[3]=((((-1.0)*gconst47*x14761*x14771))+((r01*x14762))+((r00*x14763))+((r01*x14774))+(((-1.0)*cj15*r02*x14770)));
evalcond[4]=((((-1.0)*r00*x14762*x14771))+((r01*x14759*x14763))+(((-1.0)*x14760*x14761))+(((-1.0)*r02*sj15*x14770))+(((-1.0)*r01*x14772)));
evalcond[5]=(((r10*x14763))+((r11*x14774))+(((-1.0)*gconst47*x14765*x14771))+((r11*x14762))+x14766+(((-1.0)*sj13*x14767))+(((-1.0)*cj15*r12*x14770)));
evalcond[6]=((((-1.0)*cj15*x14764*x14771))+(((-1.0)*cj15*r22*x14770))+((r20*x14763))+(((-1.0)*x14775))+((r21*x14774))+((r21*x14762)));
evalcond[7]=((((-1.0)*r22*sj15*x14770))+(((-1.0)*x14766))+(((-1.0)*cj15*r20*x14760))+((sj13*sj14))+(((-1.0)*r21*x14772))+((r21*x14759*x14763))+(((-1.0)*r20*x14762*x14771)));
evalcond[8]=((((-1.0)*x14760*x14765))+(((-1.0)*r12*sj15*x14770))+(((-1.0)*x14775))+((r11*x14759*x14763))+(((-1.0)*r10*x14762*x14771))+(((-1.0)*r11*x14772)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x14776=((1.0)*gconst46);
CheckValue<IkReal> x14777=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x14776))+(((-1.0)*gconst47*r21)))),-1);
if(!x14777.valid){
continue;
}
CheckValue<IkReal> x14778 = IKatan2WithCheck(IkReal((((gconst47*r10))+(((-1.0)*r11*x14776)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x14778.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14777.value)))+(x14778.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x14779=IKcos(j16);
IkReal x14780=IKsin(j16);
IkReal x14781=((1.0)*gconst46);
IkReal x14782=(cj15*r00);
IkReal x14783=(gconst47*sj15);
IkReal x14784=(gconst46*sj15);
IkReal x14785=(gconst47*r20);
IkReal x14786=(cj15*r10);
IkReal x14787=(cj13*cj14);
IkReal x14788=((1.0)*sj14);
IkReal x14789=((1.0)*cj14*sj13);
IkReal x14790=(cj13*x14788);
IkReal x14791=((1.0)*x14779);
IkReal x14792=((1.0)*x14780);
IkReal x14793=((1.0)*cj15*gconst47);
IkReal x14794=(gconst47*x14779);
IkReal x14795=(cj15*gconst46*x14780);
IkReal x14796=(x14789+x14790);
evalcond[0]=((((-1.0)*r21*x14779*x14781))+((x14779*x14785))+(((-1.0)*r22*x14792)));
evalcond[1]=(((r10*x14794))+(((-1.0)*r12*x14792))+(((-1.0)*r11*x14779*x14781)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14792))+((r00*x14794))+(((-1.0)*r01*x14779*x14781)));
evalcond[3]=(((r01*x14783))+(((-1.0)*gconst47*x14782*x14792))+((r00*x14784))+((r01*x14795))+(((-1.0)*cj15*r02*x14791)));
evalcond[4]=(((r01*x14780*x14784))+(((-1.0)*r01*x14793))+(((-1.0)*r02*sj15*x14791))+(((-1.0)*x14781*x14782))+(((-1.0)*r00*x14783*x14792)));
evalcond[5]=(((r10*x14784))+((r11*x14795))+(((-1.0)*cj15*r12*x14791))+(((-1.0)*sj13*x14788))+(((-1.0)*gconst47*x14786*x14792))+((r11*x14783))+x14787);
evalcond[6]=((((-1.0)*cj15*r22*x14791))+(((-1.0)*cj15*x14785*x14792))+((r20*x14784))+((r21*x14783))+((r21*x14795))+(((-1.0)*x14796)));
evalcond[7]=((((-1.0)*r20*x14783*x14792))+(((-1.0)*x14787))+(((-1.0)*cj15*r20*x14781))+(((-1.0)*r21*x14793))+((r21*x14780*x14784))+(((-1.0)*r22*sj15*x14791))+((sj13*sj14)));
evalcond[8]=((((-1.0)*r12*sj15*x14791))+(((-1.0)*r11*x14793))+(((-1.0)*r10*x14783*x14792))+(((-1.0)*x14781*x14786))+((r11*x14780*x14784))+(((-1.0)*x14796)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x14797 = IKatan2WithCheck(IkReal(((((-1.0)*gconst46*r21))+((gconst47*r20)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x14797.valid){
continue;
}
CheckValue<IkReal> x14798=IKPowWithIntegerCheck(IKsign((((gconst47*r11))+((gconst46*r10)))),-1);
if(!x14798.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x14797.value)+(((1.5707963267949)*(x14798.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x14799=IKcos(j16);
IkReal x14800=IKsin(j16);
IkReal x14801=((1.0)*gconst46);
IkReal x14802=(cj15*r00);
IkReal x14803=(gconst47*sj15);
IkReal x14804=(gconst46*sj15);
IkReal x14805=(gconst47*r20);
IkReal x14806=(cj15*r10);
IkReal x14807=(cj13*cj14);
IkReal x14808=((1.0)*sj14);
IkReal x14809=((1.0)*cj14*sj13);
IkReal x14810=(cj13*x14808);
IkReal x14811=((1.0)*x14799);
IkReal x14812=((1.0)*x14800);
IkReal x14813=((1.0)*cj15*gconst47);
IkReal x14814=(gconst47*x14799);
IkReal x14815=(cj15*gconst46*x14800);
IkReal x14816=(x14810+x14809);
evalcond[0]=((((-1.0)*r22*x14812))+((x14799*x14805))+(((-1.0)*r21*x14799*x14801)));
evalcond[1]=(((r10*x14814))+(((-1.0)*r12*x14812))+(((-1.0)*r11*x14799*x14801)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14812))+(((-1.0)*r01*x14799*x14801))+((r00*x14814)));
evalcond[3]=((((-1.0)*gconst47*x14802*x14812))+((r01*x14803))+((r01*x14815))+((r00*x14804))+(((-1.0)*cj15*r02*x14811)));
evalcond[4]=((((-1.0)*x14801*x14802))+(((-1.0)*r01*x14813))+((r01*x14800*x14804))+(((-1.0)*r00*x14803*x14812))+(((-1.0)*r02*sj15*x14811)));
evalcond[5]=((((-1.0)*sj13*x14808))+(((-1.0)*gconst47*x14806*x14812))+x14807+((r10*x14804))+(((-1.0)*cj15*r12*x14811))+((r11*x14815))+((r11*x14803)));
evalcond[6]=((((-1.0)*cj15*x14805*x14812))+((r21*x14803))+((r21*x14815))+(((-1.0)*x14816))+((r20*x14804))+(((-1.0)*cj15*r22*x14811)));
evalcond[7]=((((-1.0)*r21*x14813))+(((-1.0)*r20*x14803*x14812))+(((-1.0)*cj15*r20*x14801))+((sj13*sj14))+(((-1.0)*x14807))+((r21*x14800*x14804))+(((-1.0)*r22*sj15*x14811)));
evalcond[8]=((((-1.0)*r10*x14803*x14812))+(((-1.0)*r12*sj15*x14811))+(((-1.0)*x14801*x14806))+(((-1.0)*x14816))+(((-1.0)*r11*x14813))+((r11*x14800*x14804)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[2];
IkReal x14817=((-1.0)*py);
sj12=1.0;
cj12=0;
j12=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14817);
rxp0_2=(py*r00);
rxp1_0=(r21*x14817);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x14818=(cj17*r00);
IkReal x14819=(r01*sj17);
j16eval[0]=(((sj15*x14819))+(((-1.0)*sj15*x14818)));
j16eval[1]=(x14818+(((-1.0)*x14819)));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x14820=((-1.0)*py);
sj12=1.0;
cj12=0;
j12=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14820);
rxp0_2=(py*r00);
rxp1_0=(r21*x14820);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x14821=(cj17*r00);
IkReal x14822=(r01*sj17);
j16eval[0]=(((cj15*x14822))+(((-1.0)*cj15*x14821)));
j16eval[1]=(x14821+(((-1.0)*x14822)));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
IkReal x14823=((-1.0)*py);
sj12=1.0;
cj12=0;
j12=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14823);
rxp0_2=(py*r00);
rxp1_0=(r21*x14823);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j16eval[0]=((((-1.0)*cj15*cj17*r00))+((cj15*r01*sj17)));
j16eval[1]=cj15;
j16eval[2]=r12;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x14824=((1.0)*cj17);
CheckValue<IkReal> x14825=IKPowWithIntegerCheck((((cj15*r01*sj17))+(((-1.0)*cj15*r00*x14824))),-1);
if(!x14825.valid){
continue;
}
CheckValue<IkReal> x14826=IKPowWithIntegerCheck(cj15,-1);
if(!x14826.valid){
continue;
}
CheckValue<IkReal> x14827=IKPowWithIntegerCheck(r12,-1);
if(!x14827.valid){
continue;
}
if( IKabs(((x14825.value)*(((((-1.0)*r00*sj15*sj17))+(((-1.0)*r01*sj15*x14824)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14826.value)*(x14827.value)*(((((-1.0)*sj13*sj14))+((cj13*cj14)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14825.value)*(((((-1.0)*r00*sj15*sj17))+(((-1.0)*r01*sj15*x14824))))))+IKsqr(((x14826.value)*(x14827.value)*(((((-1.0)*sj13*sj14))+((cj13*cj14))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x14825.value)*(((((-1.0)*r00*sj15*sj17))+(((-1.0)*r01*sj15*x14824))))), ((x14826.value)*(x14827.value)*(((((-1.0)*sj13*sj14))+((cj13*cj14))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x14828=IKcos(j16);
IkReal x14829=IKsin(j16);
IkReal x14830=(cj17*r00);
IkReal x14831=(r20*sj15);
IkReal x14832=(cj13*cj14);
IkReal x14833=(cj15*cj17);
IkReal x14834=((1.0)*r21);
IkReal x14835=(cj17*sj15);
IkReal x14836=(r00*sj17);
IkReal x14837=((1.0)*cj15);
IkReal x14838=((1.0)*r01);
IkReal x14839=((1.0)*sj14);
IkReal x14840=((1.0)*cj14*sj13);
IkReal x14841=(cj13*x14839);
IkReal x14842=((1.0)*x14829);
IkReal x14843=(sj17*x14828);
IkReal x14844=((1.0)*r12*x14828);
IkReal x14845=(sj15*sj17*x14829);
IkReal x14846=(cj15*sj17*x14829);
IkReal x14847=(x14840+x14841);
evalcond[0]=((-1.0)*r12*x14829);
evalcond[1]=(((cj17*r20*x14828))+(((-1.0)*x14834*x14843)));
evalcond[2]=((-1.0)+(((-1.0)*x14838*x14843))+((x14828*x14830)));
evalcond[3]=((((-1.0)*r12*x14828*x14837))+x14832+(((-1.0)*sj13*x14839)));
evalcond[4]=((((-1.0)*sj15*x14844))+(((-1.0)*x14847)));
evalcond[5]=((((-1.0)*x14829*x14830*x14837))+((sj15*x14836))+((r01*x14846))+((r01*x14835)));
evalcond[6]=((((-1.0)*x14836*x14837))+(((-1.0)*x14833*x14838))+(((-1.0)*sj15*x14830*x14842))+((r01*x14845)));
evalcond[7]=((((-1.0)*r20*x14833*x14842))+((r21*x14835))+(((-1.0)*x14847))+((sj17*x14831))+((r21*x14846)));
evalcond[8]=((((-1.0)*x14833*x14834))+(((-1.0)*x14832))+(((-1.0)*r20*sj17*x14837))+((sj13*sj14))+(((-1.0)*cj17*x14831*x14842))+((r21*x14845)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x14848=((1.0)*cj17);
IkReal x14849=((1.0)*sj17);
CheckValue<IkReal> x14850=IKPowWithIntegerCheck((((cj15*r01*sj17))+(((-1.0)*cj15*r00*x14848))),-1);
if(!x14850.valid){
continue;
}
CheckValue<IkReal> x14851=IKPowWithIntegerCheck((((cj17*r00))+(((-1.0)*r01*x14849))),-1);
if(!x14851.valid){
continue;
}
if( IKabs(((x14850.value)*(((((-1.0)*r01*sj15*x14848))+(((-1.0)*r00*sj15*x14849)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x14851.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14850.value)*(((((-1.0)*r01*sj15*x14848))+(((-1.0)*r00*sj15*x14849))))))+IKsqr(x14851.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x14850.value)*(((((-1.0)*r01*sj15*x14848))+(((-1.0)*r00*sj15*x14849))))), x14851.value);
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x14852=IKcos(j16);
IkReal x14853=IKsin(j16);
IkReal x14854=(cj17*r00);
IkReal x14855=(r20*sj15);
IkReal x14856=(cj13*cj14);
IkReal x14857=(cj15*cj17);
IkReal x14858=((1.0)*r21);
IkReal x14859=(cj17*sj15);
IkReal x14860=(r00*sj17);
IkReal x14861=((1.0)*cj15);
IkReal x14862=((1.0)*r01);
IkReal x14863=((1.0)*sj14);
IkReal x14864=((1.0)*cj14*sj13);
IkReal x14865=(cj13*x14863);
IkReal x14866=((1.0)*x14853);
IkReal x14867=(sj17*x14852);
IkReal x14868=((1.0)*r12*x14852);
IkReal x14869=(sj15*sj17*x14853);
IkReal x14870=(cj15*sj17*x14853);
IkReal x14871=(x14864+x14865);
evalcond[0]=((-1.0)*r12*x14853);
evalcond[1]=((((-1.0)*x14858*x14867))+((cj17*r20*x14852)));
evalcond[2]=((-1.0)+((x14852*x14854))+(((-1.0)*x14862*x14867)));
evalcond[3]=(x14856+(((-1.0)*r12*x14852*x14861))+(((-1.0)*sj13*x14863)));
evalcond[4]=((((-1.0)*sj15*x14868))+(((-1.0)*x14871)));
evalcond[5]=((((-1.0)*x14853*x14854*x14861))+((r01*x14870))+((sj15*x14860))+((r01*x14859)));
evalcond[6]=((((-1.0)*sj15*x14854*x14866))+(((-1.0)*x14857*x14862))+((r01*x14869))+(((-1.0)*x14860*x14861)));
evalcond[7]=(((r21*x14859))+((sj17*x14855))+(((-1.0)*r20*x14857*x14866))+((r21*x14870))+(((-1.0)*x14871)));
evalcond[8]=((((-1.0)*r20*sj17*x14861))+(((-1.0)*x14857*x14858))+(((-1.0)*cj17*x14855*x14866))+((sj13*sj14))+((r21*x14869))+(((-1.0)*x14856)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x14872=(cj17*r00);
IkReal x14873=(r01*sj17);
CheckValue<IkReal> x14874=IKPowWithIntegerCheck((((sj15*x14873))+(((-1.0)*sj15*x14872))),-1);
if(!x14874.valid){
continue;
}
CheckValue<IkReal> x14875=IKPowWithIntegerCheck((x14872+(((-1.0)*x14873))),-1);
if(!x14875.valid){
continue;
}
if( IKabs(((x14874.value)*((((cj15*cj17*r01))+((cj15*r00*sj17)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x14875.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14874.value)*((((cj15*cj17*r01))+((cj15*r00*sj17))))))+IKsqr(x14875.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x14874.value)*((((cj15*cj17*r01))+((cj15*r00*sj17))))), x14875.value);
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x14876=IKcos(j16);
IkReal x14877=IKsin(j16);
IkReal x14878=(cj17*r00);
IkReal x14879=(r20*sj15);
IkReal x14880=(cj13*cj14);
IkReal x14881=(cj15*cj17);
IkReal x14882=((1.0)*r21);
IkReal x14883=(cj17*sj15);
IkReal x14884=(r00*sj17);
IkReal x14885=((1.0)*cj15);
IkReal x14886=((1.0)*r01);
IkReal x14887=((1.0)*sj14);
IkReal x14888=((1.0)*cj14*sj13);
IkReal x14889=(cj13*x14887);
IkReal x14890=((1.0)*x14877);
IkReal x14891=(sj17*x14876);
IkReal x14892=((1.0)*r12*x14876);
IkReal x14893=(sj15*sj17*x14877);
IkReal x14894=(cj15*sj17*x14877);
IkReal x14895=(x14888+x14889);
evalcond[0]=((-1.0)*r12*x14877);
evalcond[1]=(((cj17*r20*x14876))+(((-1.0)*x14882*x14891)));
evalcond[2]=((-1.0)+((x14876*x14878))+(((-1.0)*x14886*x14891)));
evalcond[3]=(x14880+(((-1.0)*sj13*x14887))+(((-1.0)*r12*x14876*x14885)));
evalcond[4]=((((-1.0)*x14895))+(((-1.0)*sj15*x14892)));
evalcond[5]=(((r01*x14894))+((sj15*x14884))+((r01*x14883))+(((-1.0)*x14877*x14878*x14885)));
evalcond[6]=((((-1.0)*sj15*x14878*x14890))+((r01*x14893))+(((-1.0)*x14884*x14885))+(((-1.0)*x14881*x14886)));
evalcond[7]=((((-1.0)*r20*x14881*x14890))+((r21*x14894))+((r21*x14883))+(((-1.0)*x14895))+((sj17*x14879)));
evalcond[8]=(((r21*x14893))+(((-1.0)*r20*sj17*x14885))+((sj13*sj14))+(((-1.0)*x14881*x14882))+(((-1.0)*x14880))+(((-1.0)*cj17*x14879*x14890)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j16]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x14896=cj17*cj17;
IkReal x14897=(r00*sj15);
IkReal x14898=(cj17*sj17);
IkReal x14899=(r01*sj15);
IkReal x14900=(cj15*r21);
IkReal x14901=((1.0)*r21);
IkReal x14902=(cj15*r20);
IkReal x14903=((1.0)*r01);
IkReal x14904=(r21*x14896);
CheckValue<IkReal> x14905 = IKatan2WithCheck(IkReal(((((-1.0)*x14897*x14901))+((r20*x14896*x14899))+(((-1.0)*x14898*x14899*x14901))+((r20*x14897*x14898))+((x14897*x14904)))),IkReal((((cj17*r22*x14899))+((r22*sj17*x14897)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14905.valid){
continue;
}
CheckValue<IkReal> x14906=IKPowWithIntegerCheck(IKsign((((r01*x14900))+(((-1.0)*x14898*x14902*x14903))+(((-1.0)*x14896*x14900*x14903))+((cj15*r02*r22))+((r00*x14896*x14902))+(((-1.0)*r00*x14898*x14900)))),-1);
if(!x14906.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x14905.value)+(((1.5707963267949)*(x14906.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x14907=IKcos(j16);
IkReal x14908=IKsin(j16);
IkReal x14909=((1.0)*cj15);
IkReal x14910=(cj17*r11);
IkReal x14911=((1.0)*sj15);
IkReal x14912=(sj15*sj17);
IkReal x14913=(cj13*cj14);
IkReal x14914=(cj17*r21);
IkReal x14915=(cj17*r01);
IkReal x14916=((1.0)*sj14);
IkReal x14917=(cj15*sj17);
IkReal x14918=((1.0)*cj14*sj13);
IkReal x14919=(cj13*x14916);
IkReal x14920=(r12*x14907);
IkReal x14921=(cj17*x14908);
IkReal x14922=(r02*x14907);
IkReal x14923=((1.0)*x14908);
IkReal x14924=(cj17*x14907);
IkReal x14925=(r01*x14908);
IkReal x14926=(r21*x14908);
IkReal x14927=(r11*x14908);
IkReal x14928=(r22*x14907);
IkReal x14929=((1.0)*sj17*x14907);
IkReal x14930=(x14918+x14919);
evalcond[0]=((((-1.0)*r21*x14929))+(((-1.0)*r22*x14923))+((r20*x14924)));
evalcond[1]=(((r10*x14924))+(((-1.0)*r11*x14929))+(((-1.0)*r12*x14923)));
evalcond[2]=((-1.0)+(((-1.0)*r01*x14929))+((r00*x14924))+(((-1.0)*r02*x14923)));
evalcond[3]=(((r00*x14912))+(((-1.0)*r00*x14909*x14921))+(((-1.0)*x14909*x14922))+((sj15*x14915))+((x14917*x14925)));
evalcond[4]=((((-1.0)*r00*x14911*x14921))+((x14912*x14925))+(((-1.0)*x14911*x14922))+(((-1.0)*r00*sj17*x14909))+(((-1.0)*x14909*x14915)));
evalcond[5]=(((r10*x14912))+x14913+(((-1.0)*x14909*x14920))+(((-1.0)*sj13*x14916))+((sj15*x14910))+(((-1.0)*r10*x14909*x14921))+((x14917*x14927)));
evalcond[6]=((((-1.0)*r20*x14909*x14921))+(((-1.0)*x14909*x14928))+(((-1.0)*x14930))+((r20*x14912))+((sj15*x14914))+((x14917*x14926)));
evalcond[7]=(((x14912*x14926))+(((-1.0)*x14913))+(((-1.0)*r20*sj17*x14909))+(((-1.0)*r20*x14911*x14921))+(((-1.0)*x14911*x14928))+((sj13*sj14))+(((-1.0)*x14909*x14914)));
evalcond[8]=((((-1.0)*r10*sj17*x14909))+(((-1.0)*r10*x14911*x14921))+((x14912*x14927))+(((-1.0)*x14930))+(((-1.0)*x14911*x14920))+(((-1.0)*x14909*x14910)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x14931=((1.0)*sj17);
CheckValue<IkReal> x14932=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj17*r21))+(((-1.0)*r20*x14931)))),-1);
if(!x14932.valid){
continue;
}
CheckValue<IkReal> x14933 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x14931))+((cj17*r10)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x14933.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14932.value)))+(x14933.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x14934=IKcos(j16);
IkReal x14935=IKsin(j16);
IkReal x14936=((1.0)*cj15);
IkReal x14937=(cj17*r11);
IkReal x14938=((1.0)*sj15);
IkReal x14939=(sj15*sj17);
IkReal x14940=(cj13*cj14);
IkReal x14941=(cj17*r21);
IkReal x14942=(cj17*r01);
IkReal x14943=((1.0)*sj14);
IkReal x14944=(cj15*sj17);
IkReal x14945=((1.0)*cj14*sj13);
IkReal x14946=(cj13*x14943);
IkReal x14947=(r12*x14934);
IkReal x14948=(cj17*x14935);
IkReal x14949=(r02*x14934);
IkReal x14950=((1.0)*x14935);
IkReal x14951=(cj17*x14934);
IkReal x14952=(r01*x14935);
IkReal x14953=(r21*x14935);
IkReal x14954=(r11*x14935);
IkReal x14955=(r22*x14934);
IkReal x14956=((1.0)*sj17*x14934);
IkReal x14957=(x14946+x14945);
evalcond[0]=((((-1.0)*r21*x14956))+(((-1.0)*r22*x14950))+((r20*x14951)));
evalcond[1]=(((r10*x14951))+(((-1.0)*r11*x14956))+(((-1.0)*r12*x14950)));
evalcond[2]=((-1.0)+(((-1.0)*r01*x14956))+((r00*x14951))+(((-1.0)*r02*x14950)));
evalcond[3]=(((sj15*x14942))+(((-1.0)*x14936*x14949))+((r00*x14939))+((x14944*x14952))+(((-1.0)*r00*x14936*x14948)));
evalcond[4]=((((-1.0)*r00*sj17*x14936))+(((-1.0)*x14936*x14942))+(((-1.0)*r00*x14938*x14948))+((x14939*x14952))+(((-1.0)*x14938*x14949)));
evalcond[5]=((((-1.0)*r10*x14936*x14948))+(((-1.0)*sj13*x14943))+x14940+(((-1.0)*x14936*x14947))+((r10*x14939))+((sj15*x14937))+((x14944*x14954)));
evalcond[6]=(((sj15*x14941))+(((-1.0)*r20*x14936*x14948))+(((-1.0)*x14936*x14955))+((x14944*x14953))+(((-1.0)*x14957))+((r20*x14939)));
evalcond[7]=((((-1.0)*x14936*x14941))+(((-1.0)*x14940))+((x14939*x14953))+(((-1.0)*x14938*x14955))+((sj13*sj14))+(((-1.0)*r20*sj17*x14936))+(((-1.0)*r20*x14938*x14948)));
evalcond[8]=((((-1.0)*r10*x14938*x14948))+(((-1.0)*r10*sj17*x14936))+(((-1.0)*x14936*x14937))+(((-1.0)*x14957))+((x14939*x14954))+(((-1.0)*x14938*x14947)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x14958 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj17))+((cj17*r20)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x14958.valid){
continue;
}
CheckValue<IkReal> x14959=IKPowWithIntegerCheck(IKsign((((cj17*r11))+((r10*sj17)))),-1);
if(!x14959.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x14958.value)+(((1.5707963267949)*(x14959.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x14960=IKcos(j16);
IkReal x14961=IKsin(j16);
IkReal x14962=((1.0)*cj15);
IkReal x14963=(cj17*r11);
IkReal x14964=((1.0)*sj15);
IkReal x14965=(sj15*sj17);
IkReal x14966=(cj13*cj14);
IkReal x14967=(cj17*r21);
IkReal x14968=(cj17*r01);
IkReal x14969=((1.0)*sj14);
IkReal x14970=(cj15*sj17);
IkReal x14971=((1.0)*cj14*sj13);
IkReal x14972=(cj13*x14969);
IkReal x14973=(r12*x14960);
IkReal x14974=(cj17*x14961);
IkReal x14975=(r02*x14960);
IkReal x14976=((1.0)*x14961);
IkReal x14977=(cj17*x14960);
IkReal x14978=(r01*x14961);
IkReal x14979=(r21*x14961);
IkReal x14980=(r11*x14961);
IkReal x14981=(r22*x14960);
IkReal x14982=((1.0)*sj17*x14960);
IkReal x14983=(x14972+x14971);
evalcond[0]=((((-1.0)*r22*x14976))+(((-1.0)*r21*x14982))+((r20*x14977)));
evalcond[1]=((((-1.0)*r12*x14976))+(((-1.0)*r11*x14982))+((r10*x14977)));
evalcond[2]=((-1.0)+(((-1.0)*r01*x14982))+((r00*x14977))+(((-1.0)*r02*x14976)));
evalcond[3]=(((sj15*x14968))+(((-1.0)*x14962*x14975))+(((-1.0)*r00*x14962*x14974))+((x14970*x14978))+((r00*x14965)));
evalcond[4]=((((-1.0)*x14962*x14968))+(((-1.0)*r00*x14964*x14974))+((x14965*x14978))+(((-1.0)*r00*sj17*x14962))+(((-1.0)*x14964*x14975)));
evalcond[5]=(((sj15*x14963))+((x14970*x14980))+x14966+(((-1.0)*x14962*x14973))+(((-1.0)*sj13*x14969))+(((-1.0)*r10*x14962*x14974))+((r10*x14965)));
evalcond[6]=(((sj15*x14967))+(((-1.0)*x14962*x14981))+(((-1.0)*r20*x14962*x14974))+(((-1.0)*x14983))+((r20*x14965))+((x14970*x14979)));
evalcond[7]=((((-1.0)*x14966))+(((-1.0)*x14962*x14967))+(((-1.0)*x14964*x14981))+(((-1.0)*r20*sj17*x14962))+((sj13*sj14))+((x14965*x14979))+(((-1.0)*r20*x14964*x14974)));
evalcond[8]=(((x14965*x14980))+(((-1.0)*x14962*x14963))+(((-1.0)*r10*x14964*x14974))+(((-1.0)*x14983))+(((-1.0)*x14964*x14973))+(((-1.0)*r10*sj17*x14962)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
IkReal x14984=(((r20*sj17))+((cj17*r21)));
j16eval[0]=x14984;
j16eval[1]=IKsign(x14984);
j16eval[2]=((IKabs(r12))+(IKabs((((cj17*r10))+(((-1.0)*r11*sj17))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
IkReal x14985=((1.0)*sj17);
IkReal x14986=((((-1.0)*cj17*r11))+(((-1.0)*r10*x14985)));
j16eval[0]=x14986;
j16eval[1]=IKsign(x14986);
j16eval[2]=((IKabs((((cj17*r20))+(((-1.0)*r21*x14985)))))+(IKabs(r22)));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
IkReal x14987=cj17*cj17;
IkReal x14988=(cj15*r01);
IkReal x14989=(cj15*r00);
IkReal x14990=((1.0)*cj17*sj17);
IkReal x14991=((((-1.0)*r21*x14987*x14988))+((r20*x14987*x14989))+(((-1.0)*r20*x14988*x14990))+((r21*x14988))+(((-1.0)*r21*x14989*x14990))+((cj15*r02*r22)));
j16eval[0]=x14991;
j16eval[1]=IKsign(x14991);
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
IkReal x14992=(((r20*sj17))+((cj17*r21)));
j16eval[0]=x14992;
j16eval[1]=IKsign(x14992);
j16eval[2]=((IKabs(r12))+(IKabs((((cj17*r10))+(((-1.0)*r11*sj17))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
IkReal x14993=((1.0)*sj17);
IkReal x14994=((((-1.0)*cj17*r11))+(((-1.0)*r10*x14993)));
j16eval[0]=x14994;
j16eval[1]=IKsign(x14994);
j16eval[2]=((IKabs((((cj17*r20))+(((-1.0)*r21*x14993)))))+(IKabs(r22)));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
sj15=1.0;
cj15=0;
j15=1.5707963267949;
IkReal x14995=cj17*cj17;
IkReal x14996=r01*r01;
IkReal x14997=(cj17*r00);
IkReal x14998=(r01*sj17);
IkReal x14999=(x14996+((x14995*(r00*r00)))+(((-2.0)*x14997*x14998))+(r02*r02)+(((-1.0)*x14995*x14996)));
j16eval[0]=x14999;
j16eval[1]=IKsign(x14999);
j16eval[2]=((IKabs(r02))+(IKabs((x14998+(((-1.0)*x14997))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x15000=cj17*cj17;
IkReal x15001=r01*r01;
IkReal x15002=(r01*sj17);
IkReal x15003=(cj17*r00);
CheckValue<IkReal> x15004=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15000*x15001))+(((-2.0)*x15002*x15003))+((x15000*(r00*r00)))+x15001+(r02*r02))),-1);
if(!x15004.valid){
continue;
}
CheckValue<IkReal> x15005 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x15003))+x15002)),IKFAST_ATAN2_MAGTHRESH);
if(!x15005.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15004.value)))+(x15005.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x15006=IKcos(j16);
IkReal x15007=IKsin(j16);
IkReal x15008=(cj17*x15006);
IkReal x15009=((1.0)*x15007);
IkReal x15010=(sj17*x15007);
IkReal x15011=((1.0)*x15006);
IkReal x15012=(cj17*x15009);
IkReal x15013=(sj17*x15011);
evalcond[0]=((((-1.0)*r21*x15013))+((r20*x15008))+(((-1.0)*r22*x15009)));
evalcond[1]=((((-1.0)*r11*x15013))+((r10*x15008))+(((-1.0)*r12*x15009)));
evalcond[2]=(((r01*x15010))+(((-1.0)*r02*x15011))+(((-1.0)*r00*x15012)));
evalcond[3]=((1.0)+(((-1.0)*r01*x15013))+((r00*x15008))+(((-1.0)*r02*x15009)));
evalcond[4]=((((-1.0)*r12*x15011))+((cj14*sj13))+(((-1.0)*r10*x15012))+((cj13*sj14))+((r11*x15010)));
evalcond[5]=((((-1.0)*cj13*cj14))+((r21*x15010))+(((-1.0)*r22*x15011))+((sj13*sj14))+(((-1.0)*r20*x15012)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x15014=((1.0)*sj17);
CheckValue<IkReal> x15015=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj17*r11))+(((-1.0)*r10*x15014)))),-1);
if(!x15015.valid){
continue;
}
CheckValue<IkReal> x15016 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x15014))+((cj17*r20)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x15016.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15015.value)))+(x15016.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x15017=IKcos(j16);
IkReal x15018=IKsin(j16);
IkReal x15019=(cj17*x15017);
IkReal x15020=((1.0)*x15018);
IkReal x15021=(sj17*x15018);
IkReal x15022=((1.0)*x15017);
IkReal x15023=(cj17*x15020);
IkReal x15024=(sj17*x15022);
evalcond[0]=((((-1.0)*r21*x15024))+((r20*x15019))+(((-1.0)*r22*x15020)));
evalcond[1]=(((r10*x15019))+(((-1.0)*r11*x15024))+(((-1.0)*r12*x15020)));
evalcond[2]=((((-1.0)*r02*x15022))+(((-1.0)*r00*x15023))+((r01*x15021)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15020))+(((-1.0)*r01*x15024))+((r00*x15019)));
evalcond[4]=(((cj14*sj13))+(((-1.0)*r10*x15023))+(((-1.0)*r12*x15022))+((cj13*sj14))+((r11*x15021)));
evalcond[5]=((((-1.0)*cj13*cj14))+((r21*x15021))+(((-1.0)*r20*x15023))+((sj13*sj14))+(((-1.0)*r22*x15022)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x15025 = IKatan2WithCheck(IkReal((((cj17*r10))+(((-1.0)*r11*sj17)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x15025.valid){
continue;
}
CheckValue<IkReal> x15026=IKPowWithIntegerCheck(IKsign((((r20*sj17))+((cj17*r21)))),-1);
if(!x15026.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x15025.value)+(((1.5707963267949)*(x15026.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x15027=IKcos(j16);
IkReal x15028=IKsin(j16);
IkReal x15029=(cj17*x15027);
IkReal x15030=((1.0)*x15028);
IkReal x15031=(sj17*x15028);
IkReal x15032=((1.0)*x15027);
IkReal x15033=(cj17*x15030);
IkReal x15034=(sj17*x15032);
evalcond[0]=((((-1.0)*r22*x15030))+(((-1.0)*r21*x15034))+((r20*x15029)));
evalcond[1]=(((r10*x15029))+(((-1.0)*r12*x15030))+(((-1.0)*r11*x15034)));
evalcond[2]=(((r01*x15031))+(((-1.0)*r02*x15032))+(((-1.0)*r00*x15033)));
evalcond[3]=((1.0)+((r00*x15029))+(((-1.0)*r01*x15034))+(((-1.0)*r02*x15030)));
evalcond[4]=(((cj14*sj13))+((cj13*sj14))+((r11*x15031))+(((-1.0)*r12*x15032))+(((-1.0)*r10*x15033)));
evalcond[5]=((((-1.0)*cj13*cj14))+((r21*x15031))+(((-1.0)*r22*x15032))+((sj13*sj14))+(((-1.0)*r20*x15033)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[3];
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
IkReal x15035=(((r20*sj17))+((cj17*r21)));
j16eval[0]=x15035;
j16eval[1]=IKsign(x15035);
j16eval[2]=((IKabs(r12))+(IKabs((((cj17*r10))+(((-1.0)*r11*sj17))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
IkReal x15036=((1.0)*sj17);
IkReal x15037=((((-1.0)*cj17*r11))+(((-1.0)*r10*x15036)));
j16eval[0]=x15037;
j16eval[1]=IKsign(x15037);
j16eval[2]=((IKabs((((cj17*r20))+(((-1.0)*r21*x15036)))))+(IKabs(r22)));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
IkReal x15038=cj17*cj17;
IkReal x15039=r01*r01;
IkReal x15040=(cj17*r00);
IkReal x15041=(r01*sj17);
IkReal x15042=((((-1.0)*x15038*x15039))+(((-2.0)*x15040*x15041))+x15039+(r02*r02)+((x15038*(r00*r00))));
j16eval[0]=x15042;
j16eval[1]=IKsign(x15042);
j16eval[2]=((IKabs(r02))+(IKabs((x15041+(((-1.0)*x15040))))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x15043=cj17*cj17;
IkReal x15044=r01*r01;
IkReal x15045=(r01*sj17);
IkReal x15046=(cj17*r00);
CheckValue<IkReal> x15047 = IKatan2WithCheck(IkReal(r02),IkReal((x15045+(((-1.0)*x15046)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15047.valid){
continue;
}
CheckValue<IkReal> x15048=IKPowWithIntegerCheck(IKsign((x15044+(((-1.0)*x15043*x15044))+(((-2.0)*x15045*x15046))+((x15043*(r00*r00)))+(r02*r02))),-1);
if(!x15048.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x15047.value)+(((1.5707963267949)*(x15048.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x15049=IKsin(j16);
IkReal x15050=IKcos(j16);
IkReal x15051=((1.0)*sj17);
IkReal x15052=(cj17*x15049);
IkReal x15053=(cj17*x15050);
IkReal x15054=((1.0)*x15049);
evalcond[0]=((((-1.0)*r01*x15049*x15051))+((r02*x15050))+((r00*x15052)));
evalcond[1]=(((r20*x15053))+(((-1.0)*r22*x15054))+(((-1.0)*r21*x15050*x15051)));
evalcond[2]=(((r10*x15053))+(((-1.0)*r12*x15054))+(((-1.0)*r11*x15050*x15051)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15054))+(((-1.0)*r01*x15050*x15051))+((r00*x15053)));
evalcond[4]=(((cj14*sj13))+((r10*x15052))+(((-1.0)*r11*x15049*x15051))+((cj13*sj14))+((r12*x15050)));
evalcond[5]=(((r20*x15052))+(((-1.0)*cj13*cj14))+((r22*x15050))+((sj13*sj14))+(((-1.0)*r21*x15049*x15051)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x15055=((1.0)*sj17);
CheckValue<IkReal> x15056 = IKatan2WithCheck(IkReal((((cj17*r20))+(((-1.0)*r21*x15055)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x15056.valid){
continue;
}
CheckValue<IkReal> x15057=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj17*r11))+(((-1.0)*r10*x15055)))),-1);
if(!x15057.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x15056.value)+(((1.5707963267949)*(x15057.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x15058=IKsin(j16);
IkReal x15059=IKcos(j16);
IkReal x15060=((1.0)*sj17);
IkReal x15061=(cj17*x15058);
IkReal x15062=(cj17*x15059);
IkReal x15063=((1.0)*x15058);
evalcond[0]=(((r00*x15061))+((r02*x15059))+(((-1.0)*r01*x15058*x15060)));
evalcond[1]=((((-1.0)*r21*x15059*x15060))+((r20*x15062))+(((-1.0)*r22*x15063)));
evalcond[2]=((((-1.0)*r11*x15059*x15060))+((r10*x15062))+(((-1.0)*r12*x15063)));
evalcond[3]=((1.0)+((r00*x15062))+(((-1.0)*r02*x15063))+(((-1.0)*r01*x15059*x15060)));
evalcond[4]=((((-1.0)*r11*x15058*x15060))+((cj14*sj13))+((cj13*sj14))+((r10*x15061))+((r12*x15059)));
evalcond[5]=((((-1.0)*cj13*cj14))+((r20*x15061))+(((-1.0)*r21*x15058*x15060))+((r22*x15059))+((sj13*sj14)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x15064 = IKatan2WithCheck(IkReal((((cj17*r10))+(((-1.0)*r11*sj17)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x15064.valid){
continue;
}
CheckValue<IkReal> x15065=IKPowWithIntegerCheck(IKsign((((r20*sj17))+((cj17*r21)))),-1);
if(!x15065.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x15064.value)+(((1.5707963267949)*(x15065.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x15066=IKsin(j16);
IkReal x15067=IKcos(j16);
IkReal x15068=((1.0)*sj17);
IkReal x15069=(cj17*x15066);
IkReal x15070=(cj17*x15067);
IkReal x15071=((1.0)*x15066);
evalcond[0]=(((r00*x15069))+(((-1.0)*r01*x15066*x15068))+((r02*x15067)));
evalcond[1]=((((-1.0)*r22*x15071))+((r20*x15070))+(((-1.0)*r21*x15067*x15068)));
evalcond[2]=((((-1.0)*r12*x15071))+(((-1.0)*r11*x15067*x15068))+((r10*x15070)));
evalcond[3]=((1.0)+((r00*x15070))+(((-1.0)*r02*x15071))+(((-1.0)*r01*x15067*x15068)));
evalcond[4]=(((cj14*sj13))+(((-1.0)*r11*x15066*x15068))+((cj13*sj14))+((r12*x15067))+((r10*x15069)));
evalcond[5]=((((-1.0)*cj13*cj14))+((r20*x15069))+((sj13*sj14))+(((-1.0)*r21*x15066*x15068))+((r22*x15067)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15072=((-1.0)*r10);
IkReal x15074 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x15074)==0){
continue;
}
IkReal x15073=pow(x15074,-0.5);
CheckValue<IkReal> x15075 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x15072),IKFAST_ATAN2_MAGTHRESH);
if(!x15075.valid){
continue;
}
IkReal gconst54=((-1.0)*(x15075.value));
IkReal gconst55=(r11*x15073);
IkReal gconst56=(x15072*x15073);
CheckValue<IkReal> x15076 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x15076.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j17+(x15076.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
IkReal x15077=((-1.0)*r10);
IkReal x15078=x15073;
CheckValue<IkReal> x15080 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x15077),IKFAST_ATAN2_MAGTHRESH);
if(!x15080.valid){
continue;
}
IkReal x15079=((-1.0)*(x15080.value));
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
sj17=gconst55;
cj17=gconst56;
j17=x15079;
IkReal gconst54=x15079;
IkReal gconst55=(r11*x15078);
IkReal gconst56=(x15077*x15078);
j16eval[0]=1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
IkReal x15081=((-1.0)*r10);
IkReal x15082=x15073;
CheckValue<IkReal> x15084 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x15081),IKFAST_ATAN2_MAGTHRESH);
if(!x15084.valid){
continue;
}
IkReal x15083=((-1.0)*(x15084.value));
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
sj17=gconst55;
cj17=gconst56;
j17=x15083;
IkReal gconst54=x15083;
IkReal gconst55=(r11*x15082);
IkReal gconst56=(x15081*x15082);
CheckValue<IkReal> x15092=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x15092.valid){
continue;
}
IkReal x15085=x15092.value;
IkReal x15086=(cj15*x15085);
IkReal x15087=(r00*x15086);
IkReal x15088=(r21*x15086);
IkReal x15089=(r20*x15086);
IkReal x15090=(r01*x15086);
IkReal x15091=(r10*r11*x15086);
j16eval[0]=IKsign((((r20*x15087*(r10*r10)))+((r01*x15088*(r11*r11)))+((r10*r11*r21*x15087))+((r01*r10*r11*x15089))+((cj15*r02*r22))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
IkReal x15093=((-1.0)*r10);
IkReal x15094=x15073;
CheckValue<IkReal> x15096 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x15093),IKFAST_ATAN2_MAGTHRESH);
if(!x15096.valid){
continue;
}
IkReal x15095=((-1.0)*(x15096.value));
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
sj17=gconst55;
cj17=gconst56;
j17=x15095;
IkReal gconst54=x15095;
IkReal gconst55=(r11*x15094);
IkReal gconst56=(x15093*x15094);
CheckValue<IkReal> x15104=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x15104.valid){
continue;
}
IkReal x15097=x15104.value;
IkReal x15098=(sj15*x15097);
IkReal x15099=(r01*x15098);
IkReal x15100=(r20*x15098);
IkReal x15101=(r21*x15098);
IkReal x15102=(r00*x15098);
IkReal x15103=(r10*r11*x15098);
j16eval[0]=IKsign((((r00*x15100*(r10*r10)))+((r21*x15099*(r11*r11)))+((r10*r11*r20*x15099))+((r00*r10*r11*x15101))+((r02*r22*sj15))));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x15105=gconst56*gconst56;
IkReal x15106=gconst55*gconst55;
IkReal x15107=(cj15*r00);
IkReal x15108=(r01*sj15);
IkReal x15109=(r00*sj15);
IkReal x15110=(cj15*r01);
IkReal x15111=((1.0)*r22);
IkReal x15112=(gconst55*gconst56*r21);
IkReal x15113=(r20*x15105);
IkReal x15114=(r21*x15106);
IkReal x15115=((1.0)*gconst55*gconst56*r20);
CheckValue<IkReal> x15116=IKPowWithIntegerCheck(IKsign((((x15109*x15113))+((x15108*x15114))+(((-1.0)*x15108*x15115))+(((-1.0)*x15109*x15112))+((r02*r22*sj15)))),-1);
if(!x15116.valid){
continue;
}
CheckValue<IkReal> x15117 = IKatan2WithCheck(IkReal(((((-1.0)*x15110*x15113))+((x15110*x15112))+((x15107*x15114))+(((-1.0)*x15107*x15115)))),IkReal(((((-1.0)*gconst55*x15107*x15111))+(((-1.0)*gconst56*x15110*x15111)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15117.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15116.value)))+(x15117.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x15118=IKcos(j16);
IkReal x15119=IKsin(j16);
IkReal x15120=(sj13*sj14);
IkReal x15121=(gconst56*sj15);
IkReal x15122=((1.0)*cj15);
IkReal x15123=(gconst55*sj15);
IkReal x15124=((1.0)*sj15);
IkReal x15125=(cj15*gconst55);
IkReal x15126=(cj14*sj13);
IkReal x15127=((1.0)*cj13);
IkReal x15128=(cj14*x15127);
IkReal x15129=(gconst56*x15119);
IkReal x15130=(r12*x15118);
IkReal x15131=((1.0)*x15119);
IkReal x15132=(r02*x15118);
IkReal x15133=(gconst56*x15118);
IkReal x15134=(r21*x15119);
IkReal x15135=(r22*x15118);
IkReal x15136=(r11*x15119);
IkReal x15137=(r01*x15119);
IkReal x15138=((1.0)*gconst55*x15118);
evalcond[0]=((((-1.0)*r21*x15138))+((r20*x15133))+(((-1.0)*r22*x15131)));
evalcond[1]=((((-1.0)*r12*x15131))+(((-1.0)*r11*x15138))+((r10*x15133)));
evalcond[2]=((1.0)+(((-1.0)*r02*x15131))+((r00*x15133))+(((-1.0)*r01*x15138)));
evalcond[3]=((((-1.0)*r00*x15122*x15129))+((r01*x15121))+((r00*x15123))+(((-1.0)*x15122*x15132))+((x15125*x15137)));
evalcond[4]=((((-1.0)*gconst56*r01*x15122))+(((-1.0)*r00*x15121*x15131))+(((-1.0)*x15124*x15132))+(((-1.0)*gconst55*r00*x15122))+((x15123*x15137)));
evalcond[5]=((((-1.0)*x15128))+x15120+(((-1.0)*x15122*x15130))+((r10*x15123))+((x15125*x15136))+(((-1.0)*r10*x15122*x15129))+((r11*x15121)));
evalcond[6]=(((r20*x15123))+(((-1.0)*r20*x15122*x15129))+((r21*x15121))+(((-1.0)*x15122*x15135))+(((-1.0)*x15126))+((x15125*x15134))+(((-1.0)*sj14*x15127)));
evalcond[7]=((((-1.0)*gconst56*r11*x15122))+(((-1.0)*x15124*x15130))+x15126+((cj13*sj14))+(((-1.0)*r10*x15121*x15131))+(((-1.0)*gconst55*r10*x15122))+((x15123*x15136)));
evalcond[8]=((((-1.0)*x15128))+(((-1.0)*gconst55*r20*x15122))+(((-1.0)*x15124*x15135))+x15120+(((-1.0)*gconst56*r21*x15122))+((x15123*x15134))+(((-1.0)*r20*x15121*x15131)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x15139=gconst56*gconst56;
IkReal x15140=gconst55*gconst55;
IkReal x15141=(r00*r20);
IkReal x15142=((1.0)*r21);
IkReal x15143=(r00*sj15);
IkReal x15144=(cj15*r01);
IkReal x15145=(r01*sj15);
IkReal x15146=(gconst55*gconst56);
IkReal x15147=(sj15*x15146);
CheckValue<IkReal> x15148=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x15144*x15146))+((cj15*x15139*x15141))+(((-1.0)*cj15*r00*x15142*x15146))+((cj15*r02*r22))+((r21*x15140*x15144)))),-1);
if(!x15148.valid){
continue;
}
CheckValue<IkReal> x15149 = IKatan2WithCheck(IkReal(((((-1.0)*x15140*x15142*x15143))+(((-1.0)*x15142*x15145*x15146))+((x15141*x15147))+((r20*x15139*x15145)))),IkReal((((gconst55*r22*x15143))+((gconst56*r22*x15145)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15149.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15148.value)))+(x15149.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x15150=IKcos(j16);
IkReal x15151=IKsin(j16);
IkReal x15152=(sj13*sj14);
IkReal x15153=(gconst56*sj15);
IkReal x15154=((1.0)*cj15);
IkReal x15155=(gconst55*sj15);
IkReal x15156=((1.0)*sj15);
IkReal x15157=(cj15*gconst55);
IkReal x15158=(cj14*sj13);
IkReal x15159=((1.0)*cj13);
IkReal x15160=(cj14*x15159);
IkReal x15161=(gconst56*x15151);
IkReal x15162=(r12*x15150);
IkReal x15163=((1.0)*x15151);
IkReal x15164=(r02*x15150);
IkReal x15165=(gconst56*x15150);
IkReal x15166=(r21*x15151);
IkReal x15167=(r22*x15150);
IkReal x15168=(r11*x15151);
IkReal x15169=(r01*x15151);
IkReal x15170=((1.0)*gconst55*x15150);
evalcond[0]=(((r20*x15165))+(((-1.0)*r21*x15170))+(((-1.0)*r22*x15163)));
evalcond[1]=(((r10*x15165))+(((-1.0)*r11*x15170))+(((-1.0)*r12*x15163)));
evalcond[2]=((1.0)+(((-1.0)*r01*x15170))+(((-1.0)*r02*x15163))+((r00*x15165)));
evalcond[3]=(((x15157*x15169))+(((-1.0)*x15154*x15164))+((r01*x15153))+((r00*x15155))+(((-1.0)*r00*x15154*x15161)));
evalcond[4]=((((-1.0)*gconst56*r01*x15154))+(((-1.0)*r00*x15153*x15163))+(((-1.0)*gconst55*r00*x15154))+((x15155*x15169))+(((-1.0)*x15156*x15164)));
evalcond[5]=((((-1.0)*r10*x15154*x15161))+((x15157*x15168))+(((-1.0)*x15154*x15162))+(((-1.0)*x15160))+x15152+((r10*x15155))+((r11*x15153)));
evalcond[6]=(((r21*x15153))+((x15157*x15166))+(((-1.0)*x15154*x15167))+(((-1.0)*r20*x15154*x15161))+(((-1.0)*x15158))+(((-1.0)*sj14*x15159))+((r20*x15155)));
evalcond[7]=((((-1.0)*gconst56*r11*x15154))+x15158+((cj13*sj14))+((x15155*x15168))+(((-1.0)*gconst55*r10*x15154))+(((-1.0)*x15156*x15162))+(((-1.0)*r10*x15153*x15163)));
evalcond[8]=((((-1.0)*gconst55*r20*x15154))+(((-1.0)*x15160))+x15152+((x15155*x15166))+(((-1.0)*gconst56*r21*x15154))+(((-1.0)*x15156*x15167))+(((-1.0)*r20*x15153*x15163)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x15171 = IKatan2WithCheck(IkReal(((((-1.0)*gconst55*r11))+((gconst56*r10)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x15171.valid){
continue;
}
CheckValue<IkReal> x15172=IKPowWithIntegerCheck(IKsign((((gconst56*r21))+((gconst55*r20)))),-1);
if(!x15172.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x15171.value)+(((1.5707963267949)*(x15172.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x15173=IKcos(j16);
IkReal x15174=IKsin(j16);
IkReal x15175=(sj13*sj14);
IkReal x15176=(gconst56*sj15);
IkReal x15177=((1.0)*cj15);
IkReal x15178=(gconst55*sj15);
IkReal x15179=((1.0)*sj15);
IkReal x15180=(cj15*gconst55);
IkReal x15181=(cj14*sj13);
IkReal x15182=((1.0)*cj13);
IkReal x15183=(cj14*x15182);
IkReal x15184=(gconst56*x15174);
IkReal x15185=(r12*x15173);
IkReal x15186=((1.0)*x15174);
IkReal x15187=(r02*x15173);
IkReal x15188=(gconst56*x15173);
IkReal x15189=(r21*x15174);
IkReal x15190=(r22*x15173);
IkReal x15191=(r11*x15174);
IkReal x15192=(r01*x15174);
IkReal x15193=((1.0)*gconst55*x15173);
evalcond[0]=(((r20*x15188))+(((-1.0)*r21*x15193))+(((-1.0)*r22*x15186)));
evalcond[1]=((((-1.0)*r11*x15193))+(((-1.0)*r12*x15186))+((r10*x15188)));
evalcond[2]=((1.0)+(((-1.0)*r02*x15186))+((r00*x15188))+(((-1.0)*r01*x15193)));
evalcond[3]=((((-1.0)*r00*x15177*x15184))+((x15180*x15192))+(((-1.0)*x15177*x15187))+((r00*x15178))+((r01*x15176)));
evalcond[4]=((((-1.0)*gconst56*r01*x15177))+(((-1.0)*r00*x15176*x15186))+(((-1.0)*gconst55*r00*x15177))+(((-1.0)*x15179*x15187))+((x15178*x15192)));
evalcond[5]=(((r11*x15176))+((r10*x15178))+(((-1.0)*x15183))+(((-1.0)*r10*x15177*x15184))+x15175+((x15180*x15191))+(((-1.0)*x15177*x15185)));
evalcond[6]=((((-1.0)*x15181))+(((-1.0)*x15177*x15190))+(((-1.0)*r20*x15177*x15184))+((r20*x15178))+(((-1.0)*sj14*x15182))+((r21*x15176))+((x15180*x15189)));
evalcond[7]=((((-1.0)*gconst56*r11*x15177))+(((-1.0)*r10*x15176*x15186))+x15181+((cj13*sj14))+(((-1.0)*gconst55*r10*x15177))+(((-1.0)*x15179*x15185))+((x15178*x15191)));
evalcond[8]=((((-1.0)*r20*x15176*x15186))+(((-1.0)*gconst55*r20*x15177))+(((-1.0)*x15179*x15190))+(((-1.0)*x15183))+((x15178*x15189))+x15175+(((-1.0)*gconst56*r21*x15177)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15194=((-1.0)*r11);
IkReal x15196 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x15196)==0){
continue;
}
IkReal x15195=pow(x15196,-0.5);
CheckValue<IkReal> x15197 = IKatan2WithCheck(IkReal(x15194),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x15197.valid){
continue;
}
IkReal gconst57=((3.14159265358979)+(((-1.0)*(x15197.value))));
IkReal gconst58=(x15194*x15195);
IkReal gconst59=((1.0)*r10*x15195);
CheckValue<IkReal> x15198 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x15198.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j17+(x15198.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
IkReal x15199=((-1.0)*r11);
CheckValue<IkReal> x15202 = IKatan2WithCheck(IkReal(x15199),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x15202.valid){
continue;
}
IkReal x15200=((1.0)*(x15202.value));
IkReal x15201=x15195;
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
sj17=gconst58;
cj17=gconst59;
j17=((3.14159265)+(((-1.0)*x15200)));
IkReal gconst57=((3.14159265358979)+(((-1.0)*x15200)));
IkReal gconst58=(x15199*x15201);
IkReal gconst59=((1.0)*r10*x15201);
j16eval[0]=1.0;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[4];
IkReal x15203=((-1.0)*r11);
CheckValue<IkReal> x15206 = IKatan2WithCheck(IkReal(x15203),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x15206.valid){
continue;
}
IkReal x15204=((1.0)*(x15206.value));
IkReal x15205=x15195;
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
sj17=gconst58;
cj17=gconst59;
j17=((3.14159265)+(((-1.0)*x15204)));
IkReal gconst57=((3.14159265358979)+(((-1.0)*x15204)));
IkReal gconst58=(x15203*x15205);
IkReal gconst59=((1.0)*r10*x15205);
j16eval[0]=0;
j16eval[1]=0;
j16eval[2]=r22;
j16eval[3]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  || IKabs(j16eval[3]) < 0.0000010000000000  )
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x15207=gconst59*gconst59;
IkReal x15208=gconst58*gconst58;
IkReal x15209=(r22*sj15);
IkReal x15210=(gconst59*r01);
IkReal x15211=(gconst58*r00);
IkReal x15212=(r20*sj15);
IkReal x15213=((1.0)*cj15);
IkReal x15214=((1.0)*sj15);
IkReal x15215=(r21*x15208);
CheckValue<IkReal> x15216 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x15214*x15215))+(((-1.0)*gconst58*r21*x15210*x15214))+((r01*x15207*x15212))+((gconst59*x15211*x15212)))),IkReal((((x15209*x15211))+((x15209*x15210)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15216.valid){
continue;
}
CheckValue<IkReal> x15217=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst59*r21*x15211*x15213))+((cj15*r00*r20*x15207))+(((-1.0)*gconst58*r20*x15210*x15213))+((cj15*r02*r22))+((cj15*r01*x15215)))),-1);
if(!x15217.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x15216.value)+(((1.5707963267949)*(x15217.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x15218=IKcos(j16);
IkReal x15219=IKsin(j16);
IkReal x15220=(sj13*sj14);
IkReal x15221=(gconst59*sj15);
IkReal x15222=(gconst58*r01);
IkReal x15223=(gconst59*r10);
IkReal x15224=(gconst58*sj15);
IkReal x15225=(gconst58*r11);
IkReal x15226=((1.0)*cj15);
IkReal x15227=(cj14*sj13);
IkReal x15228=(cj15*gconst59);
IkReal x15229=((1.0)*cj13);
IkReal x15230=(cj14*x15229);
IkReal x15231=((1.0)*x15218);
IkReal x15232=((1.0)*x15219);
IkReal x15233=(r21*x15219);
IkReal x15234=(cj15*x15219);
IkReal x15235=(gconst59*x15218);
evalcond[0]=((((-1.0)*r22*x15232))+(((-1.0)*gconst58*r21*x15231))+((r20*x15235)));
evalcond[1]=((((-1.0)*x15225*x15231))+(((-1.0)*r12*x15232))+((x15218*x15223)));
evalcond[2]=((1.0)+((r00*x15235))+(((-1.0)*r02*x15232))+(((-1.0)*x15222*x15231)));
evalcond[3]=(((r00*x15224))+(((-1.0)*r02*x15218*x15226))+((x15222*x15234))+(((-1.0)*gconst59*r00*x15219*x15226))+((r01*x15221)));
evalcond[4]=((((-1.0)*r00*x15221*x15232))+(((-1.0)*r02*sj15*x15231))+(((-1.0)*gconst59*r01*x15226))+(((-1.0)*gconst58*r00*x15226))+((sj15*x15219*x15222)));
evalcond[5]=(((x15225*x15234))+(((-1.0)*x15230))+x15220+(((-1.0)*r12*x15218*x15226))+((r10*x15224))+(((-1.0)*x15219*x15223*x15226))+((r11*x15221)));
evalcond[6]=((((-1.0)*x15227))+((cj15*gconst58*x15233))+((r20*x15224))+(((-1.0)*gconst59*r20*x15219*x15226))+(((-1.0)*sj14*x15229))+(((-1.0)*r22*x15218*x15226))+((r21*x15221)));
evalcond[7]=((((-1.0)*r12*sj15*x15231))+((r11*x15219*x15224))+x15227+(((-1.0)*gconst59*r11*x15226))+((cj13*sj14))+(((-1.0)*gconst58*r10*x15226))+(((-1.0)*r10*x15221*x15232)));
evalcond[8]=((((-1.0)*gconst59*r21*x15226))+((x15224*x15233))+(((-1.0)*gconst58*r20*x15226))+(((-1.0)*x15230))+x15220+(((-1.0)*r20*x15221*x15232))+(((-1.0)*r22*sj15*x15231)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x15236=((1.0)*gconst58);
CheckValue<IkReal> x15237=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst59*r11))+(((-1.0)*r10*x15236)))),-1);
if(!x15237.valid){
continue;
}
CheckValue<IkReal> x15238 = IKatan2WithCheck(IkReal((((gconst59*r20))+(((-1.0)*r21*x15236)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x15238.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15237.value)))+(x15238.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x15239=IKcos(j16);
IkReal x15240=IKsin(j16);
IkReal x15241=(sj13*sj14);
IkReal x15242=(gconst59*sj15);
IkReal x15243=(gconst58*r01);
IkReal x15244=(gconst59*r10);
IkReal x15245=(gconst58*sj15);
IkReal x15246=(gconst58*r11);
IkReal x15247=((1.0)*cj15);
IkReal x15248=(cj14*sj13);
IkReal x15249=(cj15*gconst59);
IkReal x15250=((1.0)*cj13);
IkReal x15251=(cj14*x15250);
IkReal x15252=((1.0)*x15239);
IkReal x15253=((1.0)*x15240);
IkReal x15254=(r21*x15240);
IkReal x15255=(cj15*x15240);
IkReal x15256=(gconst59*x15239);
evalcond[0]=((((-1.0)*r22*x15253))+(((-1.0)*gconst58*r21*x15252))+((r20*x15256)));
evalcond[1]=((((-1.0)*r12*x15253))+(((-1.0)*x15246*x15252))+((x15239*x15244)));
evalcond[2]=((1.0)+(((-1.0)*x15243*x15252))+((r00*x15256))+(((-1.0)*r02*x15253)));
evalcond[3]=(((x15243*x15255))+((r01*x15242))+(((-1.0)*r02*x15239*x15247))+((r00*x15245))+(((-1.0)*gconst59*r00*x15240*x15247)));
evalcond[4]=((((-1.0)*gconst58*r00*x15247))+(((-1.0)*r00*x15242*x15253))+(((-1.0)*gconst59*r01*x15247))+(((-1.0)*r02*sj15*x15252))+((sj15*x15240*x15243)));
evalcond[5]=(((x15246*x15255))+(((-1.0)*x15251))+x15241+(((-1.0)*x15240*x15244*x15247))+((r10*x15245))+((r11*x15242))+(((-1.0)*r12*x15239*x15247)));
evalcond[6]=((((-1.0)*gconst59*r20*x15240*x15247))+(((-1.0)*x15248))+(((-1.0)*sj14*x15250))+((r21*x15242))+((cj15*gconst58*x15254))+(((-1.0)*r22*x15239*x15247))+((r20*x15245)));
evalcond[7]=((((-1.0)*gconst58*r10*x15247))+x15248+(((-1.0)*r10*x15242*x15253))+((cj13*sj14))+((r11*x15240*x15245))+(((-1.0)*r12*sj15*x15252))+(((-1.0)*gconst59*r11*x15247)));
evalcond[8]=((((-1.0)*x15251))+(((-1.0)*r20*x15242*x15253))+x15241+(((-1.0)*gconst59*r21*x15247))+((x15245*x15254))+(((-1.0)*gconst58*r20*x15247))+(((-1.0)*r22*sj15*x15252)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x15257=IKPowWithIntegerCheck(IKsign((((gconst59*r21))+((gconst58*r20)))),-1);
if(!x15257.valid){
continue;
}
CheckValue<IkReal> x15258 = IKatan2WithCheck(IkReal(((((-1.0)*gconst58*r11))+((gconst59*r10)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x15258.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15257.value)))+(x15258.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x15259=IKcos(j16);
IkReal x15260=IKsin(j16);
IkReal x15261=(sj13*sj14);
IkReal x15262=(gconst59*sj15);
IkReal x15263=(gconst58*r01);
IkReal x15264=(gconst59*r10);
IkReal x15265=(gconst58*sj15);
IkReal x15266=(gconst58*r11);
IkReal x15267=((1.0)*cj15);
IkReal x15268=(cj14*sj13);
IkReal x15269=(cj15*gconst59);
IkReal x15270=((1.0)*cj13);
IkReal x15271=(cj14*x15270);
IkReal x15272=((1.0)*x15259);
IkReal x15273=((1.0)*x15260);
IkReal x15274=(r21*x15260);
IkReal x15275=(cj15*x15260);
IkReal x15276=(gconst59*x15259);
evalcond[0]=((((-1.0)*r22*x15273))+((r20*x15276))+(((-1.0)*gconst58*r21*x15272)));
evalcond[1]=(((x15259*x15264))+(((-1.0)*r12*x15273))+(((-1.0)*x15266*x15272)));
evalcond[2]=((1.0)+(((-1.0)*r02*x15273))+(((-1.0)*x15263*x15272))+((r00*x15276)));
evalcond[3]=(((x15263*x15275))+(((-1.0)*gconst59*r00*x15260*x15267))+(((-1.0)*r02*x15259*x15267))+((r01*x15262))+((r00*x15265)));
evalcond[4]=((((-1.0)*r00*x15262*x15273))+(((-1.0)*gconst59*r01*x15267))+((sj15*x15260*x15263))+(((-1.0)*gconst58*r00*x15267))+(((-1.0)*r02*sj15*x15272)));
evalcond[5]=((((-1.0)*r12*x15259*x15267))+x15261+((x15266*x15275))+(((-1.0)*x15260*x15264*x15267))+((r10*x15265))+(((-1.0)*x15271))+((r11*x15262)));
evalcond[6]=(((r20*x15265))+((cj15*gconst58*x15274))+(((-1.0)*r22*x15259*x15267))+(((-1.0)*sj14*x15270))+(((-1.0)*gconst59*r20*x15260*x15267))+(((-1.0)*x15268))+((r21*x15262)));
evalcond[7]=((((-1.0)*gconst58*r10*x15267))+x15268+((cj13*sj14))+(((-1.0)*gconst59*r11*x15267))+(((-1.0)*r12*sj15*x15272))+((r11*x15260*x15265))+(((-1.0)*r10*x15262*x15273)));
evalcond[8]=((((-1.0)*r22*sj15*x15272))+((x15265*x15274))+x15261+(((-1.0)*r20*x15262*x15273))+(((-1.0)*gconst58*r20*x15267))+(((-1.0)*gconst59*r21*x15267))+(((-1.0)*x15271)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[2];
IkReal x15277=((-1.0)*pz);
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x15277);
rxp1_0=(pz*r11);
rxp1_1=(r01*x15277);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x15278=(cj17*r00);
IkReal x15279=(r01*sj17);
j16eval[0]=(((sj15*x15279))+(((-1.0)*sj15*x15278)));
j16eval[1]=(x15278+(((-1.0)*x15279)));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x15280=((-1.0)*pz);
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x15280);
rxp1_0=(pz*r11);
rxp1_1=(r01*x15280);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x15281=(cj17*r00);
IkReal x15282=(r01*sj17);
j16eval[0]=(((cj15*x15282))+(((-1.0)*cj15*x15281)));
j16eval[1]=(x15281+(((-1.0)*x15282)));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
IkReal x15283=((-1.0)*pz);
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x15283);
rxp1_0=(pz*r11);
rxp1_1=(r01*x15283);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j16eval[0]=((((-1.0)*cj15*cj17*r00))+((cj15*r01*sj17)));
j16eval[1]=r22;
j16eval[2]=sj15;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x15284=((1.0)*cj17);
CheckValue<IkReal> x15285=IKPowWithIntegerCheck((((cj15*r01*sj17))+(((-1.0)*cj15*r00*x15284))),-1);
if(!x15285.valid){
continue;
}
CheckValue<IkReal> x15286=IKPowWithIntegerCheck(r22,-1);
if(!x15286.valid){
continue;
}
CheckValue<IkReal> x15287=IKPowWithIntegerCheck(sj15,-1);
if(!x15287.valid){
continue;
}
if( IKabs(((x15285.value)*(((((-1.0)*r01*sj15*x15284))+(((-1.0)*r00*sj15*sj17)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15286.value)*(x15287.value)*(((((-1.0)*cj13*cj14))+((sj13*sj14)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15285.value)*(((((-1.0)*r01*sj15*x15284))+(((-1.0)*r00*sj15*sj17))))))+IKsqr(((x15286.value)*(x15287.value)*(((((-1.0)*cj13*cj14))+((sj13*sj14))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x15285.value)*(((((-1.0)*r01*sj15*x15284))+(((-1.0)*r00*sj15*sj17))))), ((x15286.value)*(x15287.value)*(((((-1.0)*cj13*cj14))+((sj13*sj14))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x15288=IKcos(j16);
IkReal x15289=IKsin(j16);
IkReal x15290=(sj13*sj14);
IkReal x15291=(cj17*r00);
IkReal x15292=(cj17*r11);
IkReal x15293=((1.0)*cj13);
IkReal x15294=((1.0)*cj15);
IkReal x15295=(r11*sj17);
IkReal x15296=(cj17*r10);
IkReal x15297=(cj14*sj13);
IkReal x15298=(r01*sj17);
IkReal x15299=(r00*sj17);
IkReal x15300=(r10*sj17);
IkReal x15301=(cj17*r01);
IkReal x15302=(cj14*x15293);
IkReal x15303=((1.0)*x15288);
IkReal x15304=(sj15*x15289);
IkReal x15305=(cj15*x15289);
evalcond[0]=((-1.0)*r22*x15289);
evalcond[1]=((((-1.0)*x15295*x15303))+((x15288*x15296)));
evalcond[2]=((1.0)+(((-1.0)*x15298*x15303))+((x15288*x15291)));
evalcond[3]=((((-1.0)*r22*sj15*x15303))+x15290+(((-1.0)*x15302)));
evalcond[4]=((((-1.0)*r22*x15288*x15294))+(((-1.0)*x15297))+(((-1.0)*sj14*x15293)));
evalcond[5]=((((-1.0)*x15289*x15291*x15294))+((sj15*x15301))+((sj15*x15299))+((x15298*x15305)));
evalcond[6]=((((-1.0)*x15294*x15299))+(((-1.0)*x15291*x15304))+((x15298*x15304))+(((-1.0)*x15294*x15301)));
evalcond[7]=(((x15295*x15305))+x15290+((sj15*x15300))+((sj15*x15292))+(((-1.0)*x15289*x15294*x15296))+(((-1.0)*x15302)));
evalcond[8]=(((x15295*x15304))+x15297+((cj13*sj14))+(((-1.0)*x15296*x15304))+(((-1.0)*x15292*x15294))+(((-1.0)*x15294*x15300)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x15306=((1.0)*cj17);
IkReal x15307=((1.0)*sj17);
CheckValue<IkReal> x15308=IKPowWithIntegerCheck(((((-1.0)*cj15*r00*x15306))+((cj15*r01*sj17))),-1);
if(!x15308.valid){
continue;
}
CheckValue<IkReal> x15309=IKPowWithIntegerCheck(((((-1.0)*r01*x15307))+((cj17*r00))),-1);
if(!x15309.valid){
continue;
}
if( IKabs(((x15308.value)*(((((-1.0)*r01*sj15*x15306))+(((-1.0)*r00*sj15*x15307)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x15309.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15308.value)*(((((-1.0)*r01*sj15*x15306))+(((-1.0)*r00*sj15*x15307))))))+IKsqr(((-1.0)*(x15309.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x15308.value)*(((((-1.0)*r01*sj15*x15306))+(((-1.0)*r00*sj15*x15307))))), ((-1.0)*(x15309.value)));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x15310=IKcos(j16);
IkReal x15311=IKsin(j16);
IkReal x15312=(sj13*sj14);
IkReal x15313=(cj17*r00);
IkReal x15314=(cj17*r11);
IkReal x15315=((1.0)*cj13);
IkReal x15316=((1.0)*cj15);
IkReal x15317=(r11*sj17);
IkReal x15318=(cj17*r10);
IkReal x15319=(cj14*sj13);
IkReal x15320=(r01*sj17);
IkReal x15321=(r00*sj17);
IkReal x15322=(r10*sj17);
IkReal x15323=(cj17*r01);
IkReal x15324=(cj14*x15315);
IkReal x15325=((1.0)*x15310);
IkReal x15326=(sj15*x15311);
IkReal x15327=(cj15*x15311);
evalcond[0]=((-1.0)*r22*x15311);
evalcond[1]=((((-1.0)*x15317*x15325))+((x15310*x15318)));
evalcond[2]=((1.0)+(((-1.0)*x15320*x15325))+((x15310*x15313)));
evalcond[3]=((((-1.0)*r22*sj15*x15325))+x15312+(((-1.0)*x15324)));
evalcond[4]=((((-1.0)*x15319))+(((-1.0)*r22*x15310*x15316))+(((-1.0)*sj14*x15315)));
evalcond[5]=(((sj15*x15321))+((sj15*x15323))+(((-1.0)*x15311*x15313*x15316))+((x15320*x15327)));
evalcond[6]=(((x15320*x15326))+(((-1.0)*x15316*x15323))+(((-1.0)*x15316*x15321))+(((-1.0)*x15313*x15326)));
evalcond[7]=(((sj15*x15322))+(((-1.0)*x15311*x15316*x15318))+x15312+(((-1.0)*x15324))+((x15317*x15327))+((sj15*x15314)));
evalcond[8]=((((-1.0)*x15318*x15326))+x15319+((cj13*sj14))+(((-1.0)*x15316*x15322))+(((-1.0)*x15314*x15316))+((x15317*x15326)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x15328=(cj17*r00);
IkReal x15329=(r01*sj17);
CheckValue<IkReal> x15330=IKPowWithIntegerCheck((((sj15*x15329))+(((-1.0)*sj15*x15328))),-1);
if(!x15330.valid){
continue;
}
CheckValue<IkReal> x15331=IKPowWithIntegerCheck(((((-1.0)*x15329))+x15328),-1);
if(!x15331.valid){
continue;
}
if( IKabs(((x15330.value)*((((cj15*cj17*r01))+((cj15*r00*sj17)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x15331.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15330.value)*((((cj15*cj17*r01))+((cj15*r00*sj17))))))+IKsqr(((-1.0)*(x15331.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x15330.value)*((((cj15*cj17*r01))+((cj15*r00*sj17))))), ((-1.0)*(x15331.value)));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x15332=IKcos(j16);
IkReal x15333=IKsin(j16);
IkReal x15334=(sj13*sj14);
IkReal x15335=(cj17*r00);
IkReal x15336=(cj17*r11);
IkReal x15337=((1.0)*cj13);
IkReal x15338=((1.0)*cj15);
IkReal x15339=(r11*sj17);
IkReal x15340=(cj17*r10);
IkReal x15341=(cj14*sj13);
IkReal x15342=(r01*sj17);
IkReal x15343=(r00*sj17);
IkReal x15344=(r10*sj17);
IkReal x15345=(cj17*r01);
IkReal x15346=(cj14*x15337);
IkReal x15347=((1.0)*x15332);
IkReal x15348=(sj15*x15333);
IkReal x15349=(cj15*x15333);
evalcond[0]=((-1.0)*r22*x15333);
evalcond[1]=((((-1.0)*x15339*x15347))+((x15332*x15340)));
evalcond[2]=((1.0)+(((-1.0)*x15342*x15347))+((x15332*x15335)));
evalcond[3]=((((-1.0)*x15346))+x15334+(((-1.0)*r22*sj15*x15347)));
evalcond[4]=((((-1.0)*sj14*x15337))+(((-1.0)*r22*x15332*x15338))+(((-1.0)*x15341)));
evalcond[5]=(((x15342*x15349))+(((-1.0)*x15333*x15335*x15338))+((sj15*x15343))+((sj15*x15345)));
evalcond[6]=(((x15342*x15348))+(((-1.0)*x15335*x15348))+(((-1.0)*x15338*x15343))+(((-1.0)*x15338*x15345)));
evalcond[7]=(((sj15*x15336))+(((-1.0)*x15346))+x15334+((sj15*x15344))+((x15339*x15349))+(((-1.0)*x15333*x15338*x15340)));
evalcond[8]=(x15341+((cj13*sj14))+(((-1.0)*x15338*x15344))+((x15339*x15348))+(((-1.0)*x15336*x15338))+(((-1.0)*x15340*x15348)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j16]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x15350=cj17*cj17;
IkReal x15351=(r00*sj15);
IkReal x15352=(cj17*sj17);
IkReal x15353=(r01*sj15);
IkReal x15354=(cj15*r21);
IkReal x15355=((1.0)*r21);
IkReal x15356=(cj15*r20);
IkReal x15357=((1.0)*r01);
IkReal x15358=(r21*x15350);
CheckValue<IkReal> x15359=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x15352*x15354))+(((-1.0)*x15350*x15354*x15357))+(((-1.0)*x15352*x15356*x15357))+((r00*x15350*x15356))+((cj15*r02*r22))+((r01*x15354)))),-1);
if(!x15359.valid){
continue;
}
CheckValue<IkReal> x15360 = IKatan2WithCheck(IkReal((((r20*x15350*x15353))+((r20*x15351*x15352))+((x15351*x15358))+(((-1.0)*x15351*x15355))+(((-1.0)*x15352*x15353*x15355)))),IkReal((((cj17*r22*x15353))+((r22*sj17*x15351)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15360.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15359.value)))+(x15360.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x15361=IKcos(j16);
IkReal x15362=IKsin(j16);
IkReal x15363=(sj13*sj14);
IkReal x15364=((1.0)*cj15);
IkReal x15365=(cj17*r11);
IkReal x15366=((1.0)*sj15);
IkReal x15367=(sj15*sj17);
IkReal x15368=(cj17*r21);
IkReal x15369=((1.0)*cj13);
IkReal x15370=(cj17*r01);
IkReal x15371=(cj14*sj13);
IkReal x15372=(cj15*sj17);
IkReal x15373=(cj14*x15369);
IkReal x15374=(r12*x15361);
IkReal x15375=(cj17*x15362);
IkReal x15376=(r02*x15361);
IkReal x15377=((1.0)*x15362);
IkReal x15378=(cj17*x15361);
IkReal x15379=(r01*x15362);
IkReal x15380=(r21*x15362);
IkReal x15381=(r11*x15362);
IkReal x15382=(r22*x15361);
IkReal x15383=((1.0)*sj17*x15361);
evalcond[0]=((((-1.0)*r21*x15383))+((r20*x15378))+(((-1.0)*r22*x15377)));
evalcond[1]=((((-1.0)*r11*x15383))+((r10*x15378))+(((-1.0)*r12*x15377)));
evalcond[2]=((1.0)+((r00*x15378))+(((-1.0)*r01*x15383))+(((-1.0)*r02*x15377)));
evalcond[3]=(((sj15*x15370))+((x15372*x15379))+(((-1.0)*r00*x15364*x15375))+(((-1.0)*x15364*x15376))+((r00*x15367)));
evalcond[4]=((((-1.0)*r00*x15366*x15375))+(((-1.0)*x15366*x15376))+(((-1.0)*r00*sj17*x15364))+(((-1.0)*x15364*x15370))+((x15367*x15379)));
evalcond[5]=(((r10*x15367))+((x15372*x15381))+x15363+(((-1.0)*r10*x15364*x15375))+(((-1.0)*x15373))+(((-1.0)*x15364*x15374))+((sj15*x15365)));
evalcond[6]=((((-1.0)*x15371))+((x15372*x15380))+(((-1.0)*x15364*x15382))+(((-1.0)*sj14*x15369))+((r20*x15367))+(((-1.0)*r20*x15364*x15375))+((sj15*x15368)));
evalcond[7]=((((-1.0)*x15366*x15374))+(((-1.0)*x15364*x15365))+x15371+((cj13*sj14))+((x15367*x15381))+(((-1.0)*r10*x15366*x15375))+(((-1.0)*r10*sj17*x15364)));
evalcond[8]=((((-1.0)*r20*sj17*x15364))+(((-1.0)*x15364*x15368))+x15363+((x15367*x15380))+(((-1.0)*x15366*x15382))+(((-1.0)*x15373))+(((-1.0)*r20*x15366*x15375)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x15384=((1.0)*sj17);
CheckValue<IkReal> x15385=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj17*r11))+(((-1.0)*r10*x15384)))),-1);
if(!x15385.valid){
continue;
}
CheckValue<IkReal> x15386 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x15384))+((cj17*r20)))),IkReal(r22),IKFAST_ATAN2_MAGTHRESH);
if(!x15386.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15385.value)))+(x15386.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x15387=IKcos(j16);
IkReal x15388=IKsin(j16);
IkReal x15389=(sj13*sj14);
IkReal x15390=((1.0)*cj15);
IkReal x15391=(cj17*r11);
IkReal x15392=((1.0)*sj15);
IkReal x15393=(sj15*sj17);
IkReal x15394=(cj17*r21);
IkReal x15395=((1.0)*cj13);
IkReal x15396=(cj17*r01);
IkReal x15397=(cj14*sj13);
IkReal x15398=(cj15*sj17);
IkReal x15399=(cj14*x15395);
IkReal x15400=(r12*x15387);
IkReal x15401=(cj17*x15388);
IkReal x15402=(r02*x15387);
IkReal x15403=((1.0)*x15388);
IkReal x15404=(cj17*x15387);
IkReal x15405=(r01*x15388);
IkReal x15406=(r21*x15388);
IkReal x15407=(r11*x15388);
IkReal x15408=(r22*x15387);
IkReal x15409=((1.0)*sj17*x15387);
evalcond[0]=((((-1.0)*r21*x15409))+(((-1.0)*r22*x15403))+((r20*x15404)));
evalcond[1]=((((-1.0)*r12*x15403))+(((-1.0)*r11*x15409))+((r10*x15404)));
evalcond[2]=((1.0)+(((-1.0)*r01*x15409))+((r00*x15404))+(((-1.0)*r02*x15403)));
evalcond[3]=(((sj15*x15396))+(((-1.0)*r00*x15390*x15401))+((x15398*x15405))+((r00*x15393))+(((-1.0)*x15390*x15402)));
evalcond[4]=((((-1.0)*r00*sj17*x15390))+(((-1.0)*r00*x15392*x15401))+((x15393*x15405))+(((-1.0)*x15392*x15402))+(((-1.0)*x15390*x15396)));
evalcond[5]=(((r10*x15393))+x15389+((sj15*x15391))+((x15398*x15407))+(((-1.0)*x15390*x15400))+(((-1.0)*r10*x15390*x15401))+(((-1.0)*x15399)));
evalcond[6]=((((-1.0)*sj14*x15395))+((r20*x15393))+((sj15*x15394))+(((-1.0)*r20*x15390*x15401))+((x15398*x15406))+(((-1.0)*x15397))+(((-1.0)*x15390*x15408)));
evalcond[7]=((((-1.0)*r10*sj17*x15390))+((x15393*x15407))+x15397+((cj13*sj14))+(((-1.0)*r10*x15392*x15401))+(((-1.0)*x15392*x15400))+(((-1.0)*x15390*x15391)));
evalcond[8]=((((-1.0)*r20*x15392*x15401))+(((-1.0)*r20*sj17*x15390))+((x15393*x15406))+x15389+(((-1.0)*x15392*x15408))+(((-1.0)*x15390*x15394))+(((-1.0)*x15399)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x15410 = IKatan2WithCheck(IkReal((((cj17*r10))+(((-1.0)*r11*sj17)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x15410.valid){
continue;
}
CheckValue<IkReal> x15411=IKPowWithIntegerCheck(IKsign((((r20*sj17))+((cj17*r21)))),-1);
if(!x15411.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x15410.value)+(((1.5707963267949)*(x15411.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x15412=IKcos(j16);
IkReal x15413=IKsin(j16);
IkReal x15414=(sj13*sj14);
IkReal x15415=((1.0)*cj15);
IkReal x15416=(cj17*r11);
IkReal x15417=((1.0)*sj15);
IkReal x15418=(sj15*sj17);
IkReal x15419=(cj17*r21);
IkReal x15420=((1.0)*cj13);
IkReal x15421=(cj17*r01);
IkReal x15422=(cj14*sj13);
IkReal x15423=(cj15*sj17);
IkReal x15424=(cj14*x15420);
IkReal x15425=(r12*x15412);
IkReal x15426=(cj17*x15413);
IkReal x15427=(r02*x15412);
IkReal x15428=((1.0)*x15413);
IkReal x15429=(cj17*x15412);
IkReal x15430=(r01*x15413);
IkReal x15431=(r21*x15413);
IkReal x15432=(r11*x15413);
IkReal x15433=(r22*x15412);
IkReal x15434=((1.0)*sj17*x15412);
evalcond[0]=(((r20*x15429))+(((-1.0)*r22*x15428))+(((-1.0)*r21*x15434)));
evalcond[1]=(((r10*x15429))+(((-1.0)*r11*x15434))+(((-1.0)*r12*x15428)));
evalcond[2]=((1.0)+(((-1.0)*r02*x15428))+(((-1.0)*r01*x15434))+((r00*x15429)));
evalcond[3]=((((-1.0)*r00*x15415*x15426))+(((-1.0)*x15415*x15427))+((x15423*x15430))+((r00*x15418))+((sj15*x15421)));
evalcond[4]=((((-1.0)*x15415*x15421))+(((-1.0)*x15417*x15427))+((x15418*x15430))+(((-1.0)*r00*sj17*x15415))+(((-1.0)*r00*x15417*x15426)));
evalcond[5]=(((sj15*x15416))+(((-1.0)*r10*x15415*x15426))+(((-1.0)*x15415*x15425))+((x15423*x15432))+(((-1.0)*x15424))+x15414+((r10*x15418)));
evalcond[6]=(((sj15*x15419))+(((-1.0)*r20*x15415*x15426))+((r20*x15418))+(((-1.0)*x15415*x15433))+((x15423*x15431))+(((-1.0)*x15422))+(((-1.0)*sj14*x15420)));
evalcond[7]=((((-1.0)*r10*x15417*x15426))+(((-1.0)*r10*sj17*x15415))+(((-1.0)*x15417*x15425))+((cj13*sj14))+((x15418*x15432))+x15422+(((-1.0)*x15415*x15416)));
evalcond[8]=((((-1.0)*r20*x15417*x15426))+(((-1.0)*r20*sj17*x15415))+(((-1.0)*x15417*x15433))+((x15418*x15431))+(((-1.0)*x15424))+x15414+(((-1.0)*x15415*x15419)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[2];
IkReal x15435=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15435);
rxp1_1=(px*r21);
rxp1_2=(r11*x15435);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j16eval[0]=r02;
j16eval[1]=(((cj17*r10))+(((-1.0)*r11*sj17)));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x15436=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15436);
rxp1_1=(px*r21);
rxp1_2=(r11*x15436);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j16eval[0]=((((-1.0)*cj15*cj17*r20))+((cj15*r21*sj17)));
j16eval[1]=(((cj17*r10))+(((-1.0)*r11*sj17)));
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x15437=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15437);
rxp1_1=(px*r21);
rxp1_2=(r11*x15437);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j16eval[0]=r02;
j16eval[1]=cj15;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
IkReal x15438=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15438);
rxp1_1=(px*r21);
rxp1_2=(r11*x15438);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj15=1.0;
cj15=0;
j15=1.5707963267949;
j16eval[0]=r02;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
IkReal x15439=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15439);
rxp1_1=(px*r21);
rxp1_2=(r11*x15439);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj15=1.0;
cj15=0;
j15=1.5707963267949;
j16eval[0]=((((-1.0)*cj17*r20))+((r21*sj17)));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
CheckValue<IkReal> x15441=IKPowWithIntegerCheck(((((-1.0)*cj17*r20))+((r21*sj17))),-1);
if(!x15441.valid){
continue;
}
IkReal x15440=x15441.value;
sj16array[0]=(((cj13*cj14*x15440))+(((-1.0)*sj13*sj14*x15440)));
if( sj16array[0] >= -1-IKFAST_SINCOS_THRESH && sj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKasin(sj16array[0]);
    cj16array[0] = IKcos(j16array[0]);
    sj16array[1] = sj16array[0];
    j16array[1] = j16array[0] > 0 ? (IKPI-j16array[0]) : (-IKPI-j16array[0]);
    cj16array[1] = -cj16array[0];
}
else if( isnan(sj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x15442=IKcos(j16);
IkReal x15443=(cj17*x15442);
IkReal x15444=((1.0)*sj17*x15442);
evalcond[0]=((-1.0)*r02*x15442);
evalcond[1]=((((-1.0)*r02*(IKsin(j16))))+(((-1.0)*sj12)));
evalcond[2]=(((r20*x15443))+(((-1.0)*r21*x15444)));
evalcond[3]=((((-1.0)*r11*x15444))+((r10*x15443)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
CheckValue<IkReal> x15445=IKPowWithIntegerCheck(r02,-1);
if(!x15445.valid){
continue;
}
sj16array[0]=((-1.0)*sj12*(x15445.value));
if( sj16array[0] >= -1-IKFAST_SINCOS_THRESH && sj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKasin(sj16array[0]);
    cj16array[0] = IKcos(j16array[0]);
    sj16array[1] = sj16array[0];
    j16array[1] = j16array[0] > 0 ? (IKPI-j16array[0]) : (-IKPI-j16array[0]);
    cj16array[1] = -cj16array[0];
}
else if( isnan(sj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x15446=IKcos(j16);
IkReal x15447=IKsin(j16);
IkReal x15448=(cj17*r20);
IkReal x15449=(r21*sj17);
IkReal x15450=((1.0)*x15446);
evalcond[0]=((-1.0)*r02*x15446);
evalcond[1]=(((x15446*x15448))+(((-1.0)*x15449*x15450)));
evalcond[2]=(((cj17*r10*x15446))+(((-1.0)*r11*sj17*x15450)));
evalcond[3]=((((-1.0)*cj13*cj14))+((sj13*sj14))+((x15447*x15449))+(((-1.0)*x15447*x15448)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[1];
IkReal x15451=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15451);
rxp1_1=(px*r21);
rxp1_2=(r11*x15451);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
j16eval[0]=r02;
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
{
IkReal j16eval[1];
IkReal x15452=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15452);
rxp1_1=(px*r21);
rxp1_2=(r11*x15452);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj15=-1.0;
cj15=0;
j15=-1.5707963267949;
j16eval[0]=((((-1.0)*r21*sj17))+((cj17*r20)));
if( IKabs(j16eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
CheckValue<IkReal> x15454=IKPowWithIntegerCheck(((((-1.0)*r21*sj17))+((cj17*r20))),-1);
if(!x15454.valid){
continue;
}
IkReal x15453=x15454.value;
sj16array[0]=((((-1.0)*sj13*sj14*x15453))+((cj13*cj14*x15453)));
if( sj16array[0] >= -1-IKFAST_SINCOS_THRESH && sj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKasin(sj16array[0]);
    cj16array[0] = IKcos(j16array[0]);
    sj16array[1] = sj16array[0];
    j16array[1] = j16array[0] > 0 ? (IKPI-j16array[0]) : (-IKPI-j16array[0]);
    cj16array[1] = -cj16array[0];
}
else if( isnan(sj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x15455=IKcos(j16);
IkReal x15456=(cj17*x15455);
IkReal x15457=((1.0)*sj17*x15455);
evalcond[0]=(r02*x15455);
evalcond[1]=((((-1.0)*r02*(IKsin(j16))))+(((-1.0)*sj12)));
evalcond[2]=(((r20*x15456))+(((-1.0)*r21*x15457)));
evalcond[3]=((((-1.0)*r11*x15457))+((r10*x15456)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[2], cj16array[2], sj16array[2];
bool j16valid[2]={false};
_nj16 = 2;
CheckValue<IkReal> x15458=IKPowWithIntegerCheck(r02,-1);
if(!x15458.valid){
continue;
}
sj16array[0]=((-1.0)*sj12*(x15458.value));
if( sj16array[0] >= -1-IKFAST_SINCOS_THRESH && sj16array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j16valid[0] = j16valid[1] = true;
    j16array[0] = IKasin(sj16array[0]);
    cj16array[0] = IKcos(j16array[0]);
    sj16array[1] = sj16array[0];
    j16array[1] = j16array[0] > 0 ? (IKPI-j16array[0]) : (-IKPI-j16array[0]);
    cj16array[1] = -cj16array[0];
}
else if( isnan(sj16array[0]) )
{
    // probably any value will work
    j16valid[0] = true;
    cj16array[0] = 1; sj16array[0] = 0; j16array[0] = 0;
}
for(int ij16 = 0; ij16 < 2; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 2; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x15459=IKcos(j16);
IkReal x15460=IKsin(j16);
IkReal x15461=(cj17*x15459);
IkReal x15462=((1.0)*sj17*x15459);
evalcond[0]=(r02*x15459);
evalcond[1]=((((-1.0)*r21*x15462))+((r20*x15461)));
evalcond[2]=(((r10*x15461))+(((-1.0)*r11*x15462)));
evalcond[3]=((((-1.0)*cj13*cj14))+(((-1.0)*r21*sj17*x15460))+((cj17*r20*x15460))+((sj13*sj14)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15463=((-1.0)*r11);
CheckValue<IkReal> x15464 = IKatan2WithCheck(IkReal(r10),IkReal(x15463),IKFAST_ATAN2_MAGTHRESH);
if(!x15464.valid){
continue;
}
IkReal gconst66=((-1.0)*(x15464.value));
IkReal gconst67=((-1.0)*r10);
IkReal gconst68=x15463;
CheckValue<IkReal> x15465 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x15465.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j17+(x15465.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[2];
IkReal x15466=((-1.0)*r11);
IkReal x15467=((-1.0)*r10);
CheckValue<IkReal> x15469 = IKatan2WithCheck(IkReal(r10),IkReal(x15466),IKFAST_ATAN2_MAGTHRESH);
if(!x15469.valid){
continue;
}
IkReal x15468=((-1.0)*(x15469.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15467);
rxp1_1=(px*r21);
rxp1_2=(px*x15466);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj17=gconst67;
cj17=gconst68;
j17=x15468;
IkReal gconst66=x15468;
IkReal gconst67=x15467;
IkReal gconst68=x15466;
j16eval[0]=r02;
j16eval[1]=cj15;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x15470=((-1.0)*r11);
IkReal x15471=((-1.0)*r10);
CheckValue<IkReal> x15473 = IKatan2WithCheck(IkReal(r10),IkReal(x15470),IKFAST_ATAN2_MAGTHRESH);
if(!x15473.valid){
continue;
}
IkReal x15472=((-1.0)*(x15473.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15471);
rxp1_1=(px*r21);
rxp1_2=(px*x15470);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj17=gconst67;
cj17=gconst68;
j17=x15472;
IkReal gconst66=x15472;
IkReal gconst67=x15471;
IkReal gconst68=x15470;
j16eval[0]=r02;
j16eval[1]=sj15;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
IkReal x15474=((-1.0)*r11);
IkReal x15475=((-1.0)*r10);
CheckValue<IkReal> x15477 = IKatan2WithCheck(IkReal(r10),IkReal(x15474),IKFAST_ATAN2_MAGTHRESH);
if(!x15477.valid){
continue;
}
IkReal x15476=((-1.0)*(x15477.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15475);
rxp1_1=(px*r21);
rxp1_2=(px*x15474);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj17=gconst67;
cj17=gconst68;
j17=x15476;
IkReal gconst66=x15476;
IkReal gconst67=x15475;
IkReal gconst68=x15474;
j16eval[0]=(((r11*r20*sj15))+(((-1.0)*r10*r21*sj15)));
j16eval[1]=cj15;
j16eval[2]=r02;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x15478=(cj13*cj14);
IkReal x15479=((1.0)*sj13*sj14);
CheckValue<IkReal> x15480=IKPowWithIntegerCheck((((gconst67*r21*sj15))+(((-1.0)*gconst68*r20*sj15))),-1);
if(!x15480.valid){
continue;
}
CheckValue<IkReal> x15481=IKPowWithIntegerCheck(cj15,-1);
if(!x15481.valid){
continue;
}
CheckValue<IkReal> x15482=IKPowWithIntegerCheck(r02,-1);
if(!x15482.valid){
continue;
}
if( IKabs(((x15480.value)*((((cj15*gconst67*r20))+((cj15*gconst68*r21))+(((-1.0)*x15479))+x15478)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15481.value)*(x15482.value)*(((((-1.0)*cj12*x15479))+((cj12*x15478)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15480.value)*((((cj15*gconst67*r20))+((cj15*gconst68*r21))+(((-1.0)*x15479))+x15478))))+IKsqr(((x15481.value)*(x15482.value)*(((((-1.0)*cj12*x15479))+((cj12*x15478))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x15480.value)*((((cj15*gconst67*r20))+((cj15*gconst68*r21))+(((-1.0)*x15479))+x15478))), ((x15481.value)*(x15482.value)*(((((-1.0)*cj12*x15479))+((cj12*x15478))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x15483=IKcos(j16);
IkReal x15484=IKsin(j16);
IkReal x15485=((1.0)*cj15);
IkReal x15486=(gconst68*r11);
IkReal x15487=(gconst67*sj15);
IkReal x15488=((1.0)*cj14);
IkReal x15489=(cj12*sj13);
IkReal x15490=((1.0)*sj14);
IkReal x15491=(cj13*cj14);
IkReal x15492=(gconst68*r21);
IkReal x15493=(cj15*gconst67);
IkReal x15494=((1.0)*sj15);
IkReal x15495=(sj12*sj13);
IkReal x15496=(r21*x15484);
IkReal x15497=(gconst68*x15484);
IkReal x15498=((1.0)*x15483);
IkReal x15499=(gconst68*x15483);
IkReal x15500=(r11*x15484);
evalcond[0]=((((-1.0)*sj12))+(((-1.0)*r02*x15484)));
evalcond[1]=(((r20*x15499))+(((-1.0)*gconst67*r21*x15498)));
evalcond[2]=(((r10*x15499))+(((-1.0)*gconst67*r11*x15498))+cj12);
evalcond[3]=(((cj12*x15491))+(((-1.0)*r02*x15483*x15485))+(((-1.0)*x15489*x15490)));
evalcond[4]=((((-1.0)*r02*x15483*x15494))+(((-1.0)*cj12*cj13*x15490))+(((-1.0)*x15488*x15489)));
evalcond[5]=((((-1.0)*cj13*x15490))+((sj15*x15492))+((x15493*x15496))+(((-1.0)*r20*x15485*x15497))+(((-1.0)*sj13*x15488))+((r20*x15487)));
evalcond[6]=((((-1.0)*x15485*x15492))+((x15487*x15496))+((sj13*sj14))+(((-1.0)*gconst67*r20*x15485))+(((-1.0)*r20*x15494*x15497))+(((-1.0)*cj13*x15488)));
evalcond[7]=(((x15493*x15500))+((r10*x15487))+(((-1.0)*r10*x15485*x15497))+((sj12*x15491))+((sj15*x15486))+(((-1.0)*x15490*x15495)));
evalcond[8]=(((x15487*x15500))+(((-1.0)*gconst67*r10*x15485))+(((-1.0)*r10*x15494*x15497))+(((-1.0)*cj13*sj12*x15490))+(((-1.0)*x15488*x15495))+(((-1.0)*x15485*x15486)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x15503=IKPowWithIntegerCheck(r02,-1);
if(!x15503.valid){
continue;
}
IkReal x15501=x15503.value;
IkReal x15502=((1.0)*cj12);
CheckValue<IkReal> x15504=IKPowWithIntegerCheck(sj15,-1);
if(!x15504.valid){
continue;
}
if( IKabs(((-1.0)*sj12*x15501)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x15501*(x15504.value)*(((((-1.0)*cj13*sj14*x15502))+(((-1.0)*cj14*sj13*x15502)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj12*x15501))+IKsqr((x15501*(x15504.value)*(((((-1.0)*cj13*sj14*x15502))+(((-1.0)*cj14*sj13*x15502))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((-1.0)*sj12*x15501), (x15501*(x15504.value)*(((((-1.0)*cj13*sj14*x15502))+(((-1.0)*cj14*sj13*x15502))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x15505=IKcos(j16);
IkReal x15506=IKsin(j16);
IkReal x15507=((1.0)*cj15);
IkReal x15508=(gconst68*r11);
IkReal x15509=(gconst67*sj15);
IkReal x15510=((1.0)*cj14);
IkReal x15511=(cj12*sj13);
IkReal x15512=((1.0)*sj14);
IkReal x15513=(cj13*cj14);
IkReal x15514=(gconst68*r21);
IkReal x15515=(cj15*gconst67);
IkReal x15516=((1.0)*sj15);
IkReal x15517=(sj12*sj13);
IkReal x15518=(r21*x15506);
IkReal x15519=(gconst68*x15506);
IkReal x15520=((1.0)*x15505);
IkReal x15521=(gconst68*x15505);
IkReal x15522=(r11*x15506);
evalcond[0]=((((-1.0)*r02*x15506))+(((-1.0)*sj12)));
evalcond[1]=((((-1.0)*gconst67*r21*x15520))+((r20*x15521)));
evalcond[2]=(((r10*x15521))+cj12+(((-1.0)*gconst67*r11*x15520)));
evalcond[3]=((((-1.0)*x15511*x15512))+((cj12*x15513))+(((-1.0)*r02*x15505*x15507)));
evalcond[4]=((((-1.0)*cj12*cj13*x15512))+(((-1.0)*r02*x15505*x15516))+(((-1.0)*x15510*x15511)));
evalcond[5]=(((x15515*x15518))+(((-1.0)*r20*x15507*x15519))+(((-1.0)*sj13*x15510))+(((-1.0)*cj13*x15512))+((sj15*x15514))+((r20*x15509)));
evalcond[6]=((((-1.0)*gconst67*r20*x15507))+((x15509*x15518))+(((-1.0)*r20*x15516*x15519))+((sj13*sj14))+(((-1.0)*cj13*x15510))+(((-1.0)*x15507*x15514)));
evalcond[7]=(((sj12*x15513))+((r10*x15509))+(((-1.0)*r10*x15507*x15519))+(((-1.0)*x15512*x15517))+((sj15*x15508))+((x15515*x15522)));
evalcond[8]=(((x15509*x15522))+(((-1.0)*r10*x15516*x15519))+(((-1.0)*cj13*sj12*x15512))+(((-1.0)*x15510*x15517))+(((-1.0)*gconst67*r10*x15507))+(((-1.0)*x15507*x15508)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x15524=IKPowWithIntegerCheck(r02,-1);
if(!x15524.valid){
continue;
}
IkReal x15523=x15524.value;
CheckValue<IkReal> x15525=IKPowWithIntegerCheck(cj15,-1);
if(!x15525.valid){
continue;
}
if( IKabs(((-1.0)*sj12*x15523)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x15523*(x15525.value)*((((cj12*cj13*cj14))+(((-1.0)*cj12*sj13*sj14)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj12*x15523))+IKsqr((x15523*(x15525.value)*((((cj12*cj13*cj14))+(((-1.0)*cj12*sj13*sj14))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((-1.0)*sj12*x15523), (x15523*(x15525.value)*((((cj12*cj13*cj14))+(((-1.0)*cj12*sj13*sj14))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x15526=IKcos(j16);
IkReal x15527=IKsin(j16);
IkReal x15528=((1.0)*cj15);
IkReal x15529=(gconst68*r11);
IkReal x15530=(gconst67*sj15);
IkReal x15531=((1.0)*cj14);
IkReal x15532=(cj12*sj13);
IkReal x15533=((1.0)*sj14);
IkReal x15534=(cj13*cj14);
IkReal x15535=(gconst68*r21);
IkReal x15536=(cj15*gconst67);
IkReal x15537=((1.0)*sj15);
IkReal x15538=(sj12*sj13);
IkReal x15539=(r21*x15527);
IkReal x15540=(gconst68*x15527);
IkReal x15541=((1.0)*x15526);
IkReal x15542=(gconst68*x15526);
IkReal x15543=(r11*x15527);
evalcond[0]=((((-1.0)*r02*x15527))+(((-1.0)*sj12)));
evalcond[1]=((((-1.0)*gconst67*r21*x15541))+((r20*x15542)));
evalcond[2]=((((-1.0)*gconst67*r11*x15541))+((r10*x15542))+cj12);
evalcond[3]=((((-1.0)*x15532*x15533))+((cj12*x15534))+(((-1.0)*r02*x15526*x15528)));
evalcond[4]=((((-1.0)*cj12*cj13*x15533))+(((-1.0)*x15531*x15532))+(((-1.0)*r02*x15526*x15537)));
evalcond[5]=((((-1.0)*cj13*x15533))+((x15536*x15539))+((r20*x15530))+((sj15*x15535))+(((-1.0)*sj13*x15531))+(((-1.0)*r20*x15528*x15540)));
evalcond[6]=((((-1.0)*x15528*x15535))+((x15530*x15539))+(((-1.0)*cj13*x15531))+((sj13*sj14))+(((-1.0)*gconst67*r20*x15528))+(((-1.0)*r20*x15537*x15540)));
evalcond[7]=(((r10*x15530))+(((-1.0)*x15533*x15538))+((sj12*x15534))+(((-1.0)*r10*x15528*x15540))+((x15536*x15543))+((sj15*x15529)));
evalcond[8]=((((-1.0)*cj13*sj12*x15533))+(((-1.0)*x15528*x15529))+((x15530*x15543))+(((-1.0)*gconst67*r10*x15528))+(((-1.0)*r10*x15537*x15540))+(((-1.0)*x15531*x15538)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x15544 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x15544.valid){
continue;
}
IkReal gconst69=((3.14159265358979)+(((-1.0)*(x15544.value))));
IkReal gconst70=((1.0)*r10);
IkReal gconst71=((1.0)*r11);
CheckValue<IkReal> x15545 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x15545.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j17+(x15545.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j16eval[2];
IkReal x15546=((-1.0)*px);
CheckValue<IkReal> x15548 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x15548.valid){
continue;
}
IkReal x15547=((1.0)*(x15548.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15546);
rxp1_1=(px*r21);
rxp1_2=(r11*x15546);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj17=gconst70;
cj17=gconst71;
j17=((3.14159265)+(((-1.0)*x15547)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15547)));
IkReal gconst70=((1.0)*r10);
IkReal gconst71=((1.0)*r11);
j16eval[0]=r02;
j16eval[1]=cj15;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[2];
IkReal x15549=((-1.0)*px);
CheckValue<IkReal> x15551 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x15551.valid){
continue;
}
IkReal x15550=((1.0)*(x15551.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15549);
rxp1_1=(px*r21);
rxp1_2=(r11*x15549);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj17=gconst70;
cj17=gconst71;
j17=((3.14159265)+(((-1.0)*x15550)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15550)));
IkReal gconst70=((1.0)*r10);
IkReal gconst71=((1.0)*r11);
j16eval[0]=r02;
j16eval[1]=sj15;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  )
{
{
IkReal j16eval[3];
IkReal x15552=((-1.0)*px);
CheckValue<IkReal> x15554 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x15554.valid){
continue;
}
IkReal x15553=((1.0)*(x15554.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15552);
rxp1_1=(px*r21);
rxp1_2=(r11*x15552);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj17=gconst70;
cj17=gconst71;
j17=((3.14159265)+(((-1.0)*x15553)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15553)));
IkReal gconst70=((1.0)*r10);
IkReal gconst71=((1.0)*r11);
IkReal x15555=((1.0)*sj15);
j16eval[0]=(((r10*r21*x15555))+(((-1.0)*r11*r20*x15555)));
j16eval[1]=cj15;
j16eval[2]=r02;
if( IKabs(j16eval[0]) < 0.0000010000000000  || IKabs(j16eval[1]) < 0.0000010000000000  || IKabs(j16eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x15556=(cj13*cj14);
IkReal x15557=((1.0)*sj13*sj14);
CheckValue<IkReal> x15558=IKPowWithIntegerCheck((((gconst70*r21*sj15))+(((-1.0)*gconst71*r20*sj15))),-1);
if(!x15558.valid){
continue;
}
CheckValue<IkReal> x15559=IKPowWithIntegerCheck(cj15,-1);
if(!x15559.valid){
continue;
}
CheckValue<IkReal> x15560=IKPowWithIntegerCheck(r02,-1);
if(!x15560.valid){
continue;
}
if( IKabs(((x15558.value)*((((cj15*gconst70*r20))+((cj15*gconst71*r21))+x15556+(((-1.0)*x15557)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15559.value)*(x15560.value)*(((((-1.0)*cj12*x15557))+((cj12*x15556)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15558.value)*((((cj15*gconst70*r20))+((cj15*gconst71*r21))+x15556+(((-1.0)*x15557))))))+IKsqr(((x15559.value)*(x15560.value)*(((((-1.0)*cj12*x15557))+((cj12*x15556))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x15558.value)*((((cj15*gconst70*r20))+((cj15*gconst71*r21))+x15556+(((-1.0)*x15557))))), ((x15559.value)*(x15560.value)*(((((-1.0)*cj12*x15557))+((cj12*x15556))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x15561=IKcos(j16);
IkReal x15562=IKsin(j16);
IkReal x15563=(r21*sj15);
IkReal x15564=(gconst70*r10);
IkReal x15565=((1.0)*cj14);
IkReal x15566=(cj12*sj13);
IkReal x15567=((1.0)*sj14);
IkReal x15568=((1.0)*cj15);
IkReal x15569=(cj13*cj14);
IkReal x15570=(r11*sj15);
IkReal x15571=((1.0)*sj15);
IkReal x15572=(gconst70*r20);
IkReal x15573=(sj12*sj13);
IkReal x15574=(gconst70*x15562);
IkReal x15575=(gconst71*x15561);
IkReal x15576=(r02*x15561);
IkReal x15577=(gconst71*x15562);
IkReal x15578=((1.0)*gconst70*x15561);
IkReal x15579=(x15568*x15577);
evalcond[0]=((((-1.0)*r02*x15562))+(((-1.0)*sj12)));
evalcond[1]=((((-1.0)*r21*x15578))+((r20*x15575)));
evalcond[2]=(((r10*x15575))+(((-1.0)*r11*x15578))+cj12);
evalcond[3]=((((-1.0)*x15568*x15576))+(((-1.0)*x15566*x15567))+((cj12*x15569)));
evalcond[4]=((((-1.0)*x15565*x15566))+(((-1.0)*x15571*x15576))+(((-1.0)*cj12*cj13*x15567)));
evalcond[5]=((((-1.0)*r20*x15579))+((cj15*r21*x15574))+(((-1.0)*sj13*x15565))+(((-1.0)*cj13*x15567))+((gconst71*x15563))+((sj15*x15572)));
evalcond[6]=((((-1.0)*x15568*x15572))+(((-1.0)*gconst71*r21*x15568))+((x15563*x15574))+(((-1.0)*r20*x15571*x15577))+(((-1.0)*cj13*x15565))+((sj13*sj14)));
evalcond[7]=(((cj15*r11*x15574))+((sj12*x15569))+(((-1.0)*x15567*x15573))+(((-1.0)*r10*x15579))+((sj15*x15564))+((gconst71*x15570)));
evalcond[8]=((((-1.0)*r10*x15571*x15577))+(((-1.0)*x15564*x15568))+(((-1.0)*x15565*x15573))+((x15570*x15574))+(((-1.0)*gconst71*r11*x15568))+(((-1.0)*cj13*sj12*x15567)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x15582=IKPowWithIntegerCheck(r02,-1);
if(!x15582.valid){
continue;
}
IkReal x15580=x15582.value;
IkReal x15581=((1.0)*cj12);
CheckValue<IkReal> x15583=IKPowWithIntegerCheck(sj15,-1);
if(!x15583.valid){
continue;
}
if( IKabs(((-1.0)*sj12*x15580)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x15580*(x15583.value)*(((((-1.0)*cj14*sj13*x15581))+(((-1.0)*cj13*sj14*x15581)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj12*x15580))+IKsqr((x15580*(x15583.value)*(((((-1.0)*cj14*sj13*x15581))+(((-1.0)*cj13*sj14*x15581))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((-1.0)*sj12*x15580), (x15580*(x15583.value)*(((((-1.0)*cj14*sj13*x15581))+(((-1.0)*cj13*sj14*x15581))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x15584=IKcos(j16);
IkReal x15585=IKsin(j16);
IkReal x15586=(r21*sj15);
IkReal x15587=(gconst70*r10);
IkReal x15588=((1.0)*cj14);
IkReal x15589=(cj12*sj13);
IkReal x15590=((1.0)*sj14);
IkReal x15591=((1.0)*cj15);
IkReal x15592=(cj13*cj14);
IkReal x15593=(r11*sj15);
IkReal x15594=((1.0)*sj15);
IkReal x15595=(gconst70*r20);
IkReal x15596=(sj12*sj13);
IkReal x15597=(gconst70*x15585);
IkReal x15598=(gconst71*x15584);
IkReal x15599=(r02*x15584);
IkReal x15600=(gconst71*x15585);
IkReal x15601=((1.0)*gconst70*x15584);
IkReal x15602=(x15591*x15600);
evalcond[0]=((((-1.0)*sj12))+(((-1.0)*r02*x15585)));
evalcond[1]=(((r20*x15598))+(((-1.0)*r21*x15601)));
evalcond[2]=((((-1.0)*r11*x15601))+cj12+((r10*x15598)));
evalcond[3]=((((-1.0)*x15591*x15599))+((cj12*x15592))+(((-1.0)*x15589*x15590)));
evalcond[4]=((((-1.0)*x15588*x15589))+(((-1.0)*x15594*x15599))+(((-1.0)*cj12*cj13*x15590)));
evalcond[5]=((((-1.0)*sj13*x15588))+((cj15*r21*x15597))+((sj15*x15595))+(((-1.0)*cj13*x15590))+(((-1.0)*r20*x15602))+((gconst71*x15586)));
evalcond[6]=((((-1.0)*x15591*x15595))+(((-1.0)*gconst71*r21*x15591))+(((-1.0)*r20*x15594*x15600))+(((-1.0)*cj13*x15588))+((sj13*sj14))+((x15586*x15597)));
evalcond[7]=(((sj15*x15587))+((sj12*x15592))+((cj15*r11*x15597))+((gconst71*x15593))+(((-1.0)*r10*x15602))+(((-1.0)*x15590*x15596)));
evalcond[8]=((((-1.0)*r10*x15594*x15600))+(((-1.0)*cj13*sj12*x15590))+((x15593*x15597))+(((-1.0)*x15587*x15591))+(((-1.0)*x15588*x15596))+(((-1.0)*gconst71*r11*x15591)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x15604=IKPowWithIntegerCheck(r02,-1);
if(!x15604.valid){
continue;
}
IkReal x15603=x15604.value;
CheckValue<IkReal> x15605=IKPowWithIntegerCheck(cj15,-1);
if(!x15605.valid){
continue;
}
if( IKabs(((-1.0)*sj12*x15603)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x15603*(x15605.value)*((((cj12*cj13*cj14))+(((-1.0)*cj12*sj13*sj14)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj12*x15603))+IKsqr((x15603*(x15605.value)*((((cj12*cj13*cj14))+(((-1.0)*cj12*sj13*sj14))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((-1.0)*sj12*x15603), (x15603*(x15605.value)*((((cj12*cj13*cj14))+(((-1.0)*cj12*sj13*sj14))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x15606=IKcos(j16);
IkReal x15607=IKsin(j16);
IkReal x15608=(r21*sj15);
IkReal x15609=(gconst70*r10);
IkReal x15610=((1.0)*cj14);
IkReal x15611=(cj12*sj13);
IkReal x15612=((1.0)*sj14);
IkReal x15613=((1.0)*cj15);
IkReal x15614=(cj13*cj14);
IkReal x15615=(r11*sj15);
IkReal x15616=((1.0)*sj15);
IkReal x15617=(gconst70*r20);
IkReal x15618=(sj12*sj13);
IkReal x15619=(gconst70*x15607);
IkReal x15620=(gconst71*x15606);
IkReal x15621=(r02*x15606);
IkReal x15622=(gconst71*x15607);
IkReal x15623=((1.0)*gconst70*x15606);
IkReal x15624=(x15613*x15622);
evalcond[0]=((((-1.0)*sj12))+(((-1.0)*r02*x15607)));
evalcond[1]=(((r20*x15620))+(((-1.0)*r21*x15623)));
evalcond[2]=(cj12+((r10*x15620))+(((-1.0)*r11*x15623)));
evalcond[3]=((((-1.0)*x15611*x15612))+(((-1.0)*x15613*x15621))+((cj12*x15614)));
evalcond[4]=((((-1.0)*x15616*x15621))+(((-1.0)*x15610*x15611))+(((-1.0)*cj12*cj13*x15612)));
evalcond[5]=((((-1.0)*cj13*x15612))+((gconst71*x15608))+(((-1.0)*sj13*x15610))+((sj15*x15617))+((cj15*r21*x15619))+(((-1.0)*r20*x15624)));
evalcond[6]=((((-1.0)*cj13*x15610))+((x15608*x15619))+(((-1.0)*gconst71*r21*x15613))+(((-1.0)*r20*x15616*x15622))+(((-1.0)*x15613*x15617))+((sj13*sj14)));
evalcond[7]=(((gconst71*x15615))+((sj15*x15609))+(((-1.0)*x15612*x15618))+(((-1.0)*r10*x15624))+((cj15*r11*x15619))+((sj12*x15614)));
evalcond[8]=((((-1.0)*x15609*x15613))+((x15615*x15619))+(((-1.0)*r10*x15616*x15622))+(((-1.0)*x15610*x15618))+(((-1.0)*cj13*sj12*x15612))+(((-1.0)*gconst71*r11*x15613)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j16]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x15626=IKPowWithIntegerCheck(r02,-1);
if(!x15626.valid){
continue;
}
IkReal x15625=x15626.value;
CheckValue<IkReal> x15627=IKPowWithIntegerCheck(cj15,-1);
if(!x15627.valid){
continue;
}
if( IKabs(((-1.0)*sj12*x15625)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x15625*(x15627.value)*((((cj12*cj13*cj14))+(((-1.0)*cj12*sj13*sj14)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj12*x15625))+IKsqr((x15625*(x15627.value)*((((cj12*cj13*cj14))+(((-1.0)*cj12*sj13*sj14))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((-1.0)*sj12*x15625), (x15625*(x15627.value)*((((cj12*cj13*cj14))+(((-1.0)*cj12*sj13*sj14))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x15628=IKcos(j16);
IkReal x15629=IKsin(j16);
IkReal x15630=(cj17*sj15);
IkReal x15631=((1.0)*cj14);
IkReal x15632=(cj12*sj13);
IkReal x15633=((1.0)*sj14);
IkReal x15634=(r11*sj17);
IkReal x15635=(cj13*cj14);
IkReal x15636=(cj15*cj17);
IkReal x15637=(sj15*sj17);
IkReal x15638=(sj12*sj13);
IkReal x15639=(cj15*sj17);
IkReal x15640=((1.0)*x15629);
IkReal x15641=((1.0)*x15628);
IkReal x15642=(r21*x15629);
IkReal x15643=(cj17*x15628);
evalcond[0]=((((-1.0)*sj12))+(((-1.0)*r02*x15640)));
evalcond[1]=((((-1.0)*r21*sj17*x15641))+((r20*x15643)));
evalcond[2]=((((-1.0)*x15634*x15641))+cj12+((r10*x15643)));
evalcond[3]=((((-1.0)*x15632*x15633))+((cj12*x15635))+(((-1.0)*cj15*r02*x15641)));
evalcond[4]=((((-1.0)*x15631*x15632))+(((-1.0)*r02*sj15*x15641))+(((-1.0)*cj12*cj13*x15633)));
evalcond[5]=(((r20*x15637))+(((-1.0)*cj13*x15633))+((x15639*x15642))+(((-1.0)*r20*x15636*x15640))+((r21*x15630))+(((-1.0)*sj13*x15631)));
evalcond[6]=((((-1.0)*cj13*x15631))+(((-1.0)*r20*x15639))+((sj13*sj14))+(((-1.0)*r20*x15630*x15640))+((x15637*x15642))+(((-1.0)*r21*x15636)));
evalcond[7]=((((-1.0)*x15633*x15638))+(((-1.0)*r10*x15636*x15640))+((sj12*x15635))+((r11*x15630))+((r10*x15637))+((cj15*x15629*x15634)));
evalcond[8]=((((-1.0)*r10*x15639))+(((-1.0)*x15631*x15638))+((sj15*x15629*x15634))+(((-1.0)*r10*x15630*x15640))+(((-1.0)*cj13*sj12*x15633))+(((-1.0)*r11*x15636)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x15644=((1.0)*sj15);
CheckValue<IkReal> x15645=IKPowWithIntegerCheck(((((-1.0)*cj15*cj17*r20))+((cj15*r21*sj17))),-1);
if(!x15645.valid){
continue;
}
CheckValue<IkReal> x15646=IKPowWithIntegerCheck((((cj17*r10))+(((-1.0)*r11*sj17))),-1);
if(!x15646.valid){
continue;
}
if( IKabs(((x15645.value)*((((cj14*sj13))+(((-1.0)*cj17*r21*x15644))+(((-1.0)*r20*sj17*x15644))+((cj13*sj14)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj12*(x15646.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15645.value)*((((cj14*sj13))+(((-1.0)*cj17*r21*x15644))+(((-1.0)*r20*sj17*x15644))+((cj13*sj14))))))+IKsqr(((-1.0)*cj12*(x15646.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x15645.value)*((((cj14*sj13))+(((-1.0)*cj17*r21*x15644))+(((-1.0)*r20*sj17*x15644))+((cj13*sj14))))), ((-1.0)*cj12*(x15646.value)));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x15647=IKcos(j16);
IkReal x15648=IKsin(j16);
IkReal x15649=(cj17*sj15);
IkReal x15650=((1.0)*cj14);
IkReal x15651=(cj12*sj13);
IkReal x15652=((1.0)*sj14);
IkReal x15653=(r11*sj17);
IkReal x15654=(cj13*cj14);
IkReal x15655=(cj15*cj17);
IkReal x15656=(sj15*sj17);
IkReal x15657=(sj12*sj13);
IkReal x15658=(cj15*sj17);
IkReal x15659=((1.0)*x15648);
IkReal x15660=((1.0)*x15647);
IkReal x15661=(r21*x15648);
IkReal x15662=(cj17*x15647);
evalcond[0]=((((-1.0)*sj12))+(((-1.0)*r02*x15659)));
evalcond[1]=((((-1.0)*r21*sj17*x15660))+((r20*x15662)));
evalcond[2]=((((-1.0)*x15653*x15660))+((r10*x15662))+cj12);
evalcond[3]=((((-1.0)*cj15*r02*x15660))+((cj12*x15654))+(((-1.0)*x15651*x15652)));
evalcond[4]=((((-1.0)*cj12*cj13*x15652))+(((-1.0)*r02*sj15*x15660))+(((-1.0)*x15650*x15651)));
evalcond[5]=(((x15658*x15661))+(((-1.0)*cj13*x15652))+((r21*x15649))+(((-1.0)*r20*x15655*x15659))+((r20*x15656))+(((-1.0)*sj13*x15650)));
evalcond[6]=((((-1.0)*cj13*x15650))+(((-1.0)*r20*x15649*x15659))+(((-1.0)*r20*x15658))+((sj13*sj14))+(((-1.0)*r21*x15655))+((x15656*x15661)));
evalcond[7]=(((r10*x15656))+((sj12*x15654))+((cj15*x15648*x15653))+(((-1.0)*r10*x15655*x15659))+((r11*x15649))+(((-1.0)*x15652*x15657)));
evalcond[8]=(((sj15*x15648*x15653))+(((-1.0)*cj13*sj12*x15652))+(((-1.0)*x15650*x15657))+(((-1.0)*r10*x15649*x15659))+(((-1.0)*r10*x15658))+(((-1.0)*r11*x15655)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x15663=IKPowWithIntegerCheck(r02,-1);
if(!x15663.valid){
continue;
}
CheckValue<IkReal> x15664=IKPowWithIntegerCheck((((cj17*r10))+(((-1.0)*r11*sj17))),-1);
if(!x15664.valid){
continue;
}
if( IKabs(((-1.0)*sj12*(x15663.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj12*(x15664.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj12*(x15663.value)))+IKsqr(((-1.0)*cj12*(x15664.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((-1.0)*sj12*(x15663.value)), ((-1.0)*cj12*(x15664.value)));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x15665=IKcos(j16);
IkReal x15666=IKsin(j16);
IkReal x15667=(cj17*sj15);
IkReal x15668=((1.0)*cj14);
IkReal x15669=(cj12*sj13);
IkReal x15670=((1.0)*sj14);
IkReal x15671=(r11*sj17);
IkReal x15672=(cj13*cj14);
IkReal x15673=(cj15*cj17);
IkReal x15674=(sj15*sj17);
IkReal x15675=(sj12*sj13);
IkReal x15676=(cj15*sj17);
IkReal x15677=((1.0)*x15666);
IkReal x15678=((1.0)*x15665);
IkReal x15679=(r21*x15666);
IkReal x15680=(cj17*x15665);
evalcond[0]=((((-1.0)*sj12))+(((-1.0)*r02*x15677)));
evalcond[1]=(((r20*x15680))+(((-1.0)*r21*sj17*x15678)));
evalcond[2]=(((r10*x15680))+(((-1.0)*x15671*x15678))+cj12);
evalcond[3]=(((cj12*x15672))+(((-1.0)*x15669*x15670))+(((-1.0)*cj15*r02*x15678)));
evalcond[4]=((((-1.0)*r02*sj15*x15678))+(((-1.0)*cj12*cj13*x15670))+(((-1.0)*x15668*x15669)));
evalcond[5]=((((-1.0)*sj13*x15668))+(((-1.0)*cj13*x15670))+((r20*x15674))+((r21*x15667))+((x15676*x15679))+(((-1.0)*r20*x15673*x15677)));
evalcond[6]=((((-1.0)*cj13*x15668))+(((-1.0)*r20*x15676))+((sj13*sj14))+((x15674*x15679))+(((-1.0)*r21*x15673))+(((-1.0)*r20*x15667*x15677)));
evalcond[7]=((((-1.0)*r10*x15673*x15677))+((r10*x15674))+((r11*x15667))+((sj12*x15672))+(((-1.0)*x15670*x15675))+((cj15*x15666*x15671)));
evalcond[8]=((((-1.0)*r10*x15676))+(((-1.0)*r10*x15667*x15677))+((sj15*x15666*x15671))+(((-1.0)*cj13*sj12*x15670))+(((-1.0)*x15668*x15675))+(((-1.0)*r11*x15673)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j16]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x15681=((1.0)*cj12);
IkReal x15682=((1.0)*sj12);
CheckValue<IkReal> x15683 = IKatan2WithCheck(IkReal(((((-1.0)*cj17*r00*x15681))+((cj12*r01*sj17))+((r11*sj12*sj17))+(((-1.0)*cj17*r10*x15682)))),IkReal(((((-1.0)*r02*x15681))+(((-1.0)*r12*x15682)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15683.valid){
continue;
}
CheckValue<IkReal> x15684=IKPowWithIntegerCheck(IKsign((((r20*sj17))+((cj17*r21)))),-1);
if(!x15684.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x15683.value)+(((1.5707963267949)*(x15684.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x15685=IKcos(j16);
IkReal x15686=IKsin(j16);
IkReal x15687=(cj17*r00);
IkReal x15688=(cj17*sj15);
IkReal x15689=(cj15*r01);
IkReal x15690=(cj13*cj14);
IkReal x15691=(cj15*cj17);
IkReal x15692=(sj15*sj17);
IkReal x15693=((1.0)*sj12);
IkReal x15694=(sj13*sj14);
IkReal x15695=(cj13*sj14);
IkReal x15696=(cj14*sj13);
IkReal x15697=((1.0)*x15686);
IkReal x15698=(sj17*x15686);
IkReal x15699=((1.0)*x15685);
IkReal x15700=((1.0)*cj12*sj13);
IkReal x15701=(cj17*x15685);
IkReal x15702=((1.0)*cj15*sj17);
IkReal x15703=(cj15*x15699);
evalcond[0]=(((r20*x15701))+(((-1.0)*r22*x15697))+(((-1.0)*r21*sj17*x15699)));
evalcond[1]=((((-1.0)*r12*x15697))+cj12+(((-1.0)*r11*sj17*x15699))+((r10*x15701)));
evalcond[2]=((((-1.0)*x15693))+((x15685*x15687))+(((-1.0)*r02*x15697))+(((-1.0)*r01*sj17*x15699)));
evalcond[3]=((((-1.0)*r22*x15703))+((cj15*r21*x15698))+((r20*x15692))+(((-1.0)*x15695))+(((-1.0)*x15696))+(((-1.0)*r20*x15691*x15697))+((r21*x15688)));
evalcond[4]=(x15694+((r21*x15686*x15692))+(((-1.0)*r20*x15688*x15697))+(((-1.0)*x15690))+(((-1.0)*r22*sj15*x15699))+(((-1.0)*r21*x15691))+(((-1.0)*r20*x15702)));
evalcond[5]=(((x15689*x15698))+(((-1.0)*r02*x15703))+((r00*x15692))+((r01*x15688))+((cj12*x15690))+(((-1.0)*cj15*x15687*x15697))+(((-1.0)*cj12*x15694)));
evalcond[6]=((((-1.0)*x15693*x15694))+((r10*x15692))+(((-1.0)*r12*x15703))+(((-1.0)*r10*x15691*x15697))+((sj12*x15690))+((r11*x15688))+((cj15*r11*x15698)));
evalcond[7]=((((-1.0)*cj17*x15689))+(((-1.0)*sj15*x15687*x15697))+(((-1.0)*r00*x15702))+((r01*x15686*x15692))+(((-1.0)*r02*sj15*x15699))+(((-1.0)*cj12*x15695))+(((-1.0)*cj12*x15696)));
evalcond[8]=((((-1.0)*x15693*x15696))+(((-1.0)*x15693*x15695))+(((-1.0)*r10*x15702))+((r11*x15686*x15692))+(((-1.0)*r10*x15688*x15697))+(((-1.0)*r11*x15691))+(((-1.0)*r12*sj15*x15699)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x15704=IKPowWithIntegerCheck(IKsign((((cj17*r11))+((r10*sj17)))),-1);
if(!x15704.valid){
continue;
}
CheckValue<IkReal> x15705 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj12*sj17))+((cj17*r20*sj12)))),IkReal((r22*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x15705.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15704.value)))+(x15705.value));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x15706=IKcos(j16);
IkReal x15707=IKsin(j16);
IkReal x15708=(cj17*r00);
IkReal x15709=(cj17*sj15);
IkReal x15710=(cj15*r01);
IkReal x15711=(cj13*cj14);
IkReal x15712=(cj15*cj17);
IkReal x15713=(sj15*sj17);
IkReal x15714=((1.0)*sj12);
IkReal x15715=(sj13*sj14);
IkReal x15716=(cj13*sj14);
IkReal x15717=(cj14*sj13);
IkReal x15718=((1.0)*x15707);
IkReal x15719=(sj17*x15707);
IkReal x15720=((1.0)*x15706);
IkReal x15721=((1.0)*cj12*sj13);
IkReal x15722=(cj17*x15706);
IkReal x15723=((1.0)*cj15*sj17);
IkReal x15724=(cj15*x15720);
evalcond[0]=(((r20*x15722))+(((-1.0)*r21*sj17*x15720))+(((-1.0)*r22*x15718)));
evalcond[1]=((((-1.0)*r12*x15718))+(((-1.0)*r11*sj17*x15720))+cj12+((r10*x15722)));
evalcond[2]=((((-1.0)*x15714))+(((-1.0)*r01*sj17*x15720))+(((-1.0)*r02*x15718))+((x15706*x15708)));
evalcond[3]=(((r20*x15713))+((cj15*r21*x15719))+(((-1.0)*x15717))+(((-1.0)*x15716))+(((-1.0)*r22*x15724))+(((-1.0)*r20*x15712*x15718))+((r21*x15709)));
evalcond[4]=((((-1.0)*r22*sj15*x15720))+(((-1.0)*r20*x15723))+(((-1.0)*x15711))+((r21*x15707*x15713))+(((-1.0)*r20*x15709*x15718))+x15715+(((-1.0)*r21*x15712)));
evalcond[5]=((((-1.0)*r02*x15724))+((r00*x15713))+(((-1.0)*cj15*x15708*x15718))+((x15710*x15719))+(((-1.0)*cj12*x15715))+((cj12*x15711))+((r01*x15709)));
evalcond[6]=(((r11*x15709))+(((-1.0)*x15714*x15715))+((cj15*r11*x15719))+(((-1.0)*r12*x15724))+((sj12*x15711))+(((-1.0)*r10*x15712*x15718))+((r10*x15713)));
evalcond[7]=(((r01*x15707*x15713))+(((-1.0)*r02*sj15*x15720))+(((-1.0)*sj15*x15708*x15718))+(((-1.0)*cj12*x15716))+(((-1.0)*cj12*x15717))+(((-1.0)*cj17*x15710))+(((-1.0)*r00*x15723)));
evalcond[8]=((((-1.0)*r11*x15712))+(((-1.0)*r10*x15723))+(((-1.0)*x15714*x15717))+(((-1.0)*x15714*x15716))+((r11*x15707*x15713))+(((-1.0)*r10*x15709*x15718))+(((-1.0)*r12*sj15*x15720)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
CheckValue<IkReal> x15725 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*r21*sj17))+((cj12*cj17*r20)))),IkReal((cj12*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x15725.valid){
continue;
}
CheckValue<IkReal> x15726=IKPowWithIntegerCheck(IKsign((((r00*sj17))+((cj17*r01)))),-1);
if(!x15726.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x15725.value)+(((1.5707963267949)*(x15726.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[9];
IkReal x15727=IKcos(j16);
IkReal x15728=IKsin(j16);
IkReal x15729=(cj17*r00);
IkReal x15730=(cj17*sj15);
IkReal x15731=(cj15*r01);
IkReal x15732=(cj13*cj14);
IkReal x15733=(cj15*cj17);
IkReal x15734=(sj15*sj17);
IkReal x15735=((1.0)*sj12);
IkReal x15736=(sj13*sj14);
IkReal x15737=(cj13*sj14);
IkReal x15738=(cj14*sj13);
IkReal x15739=((1.0)*x15728);
IkReal x15740=(sj17*x15728);
IkReal x15741=((1.0)*x15727);
IkReal x15742=((1.0)*cj12*sj13);
IkReal x15743=(cj17*x15727);
IkReal x15744=((1.0)*cj15*sj17);
IkReal x15745=(cj15*x15741);
evalcond[0]=((((-1.0)*r21*sj17*x15741))+((r20*x15743))+(((-1.0)*r22*x15739)));
evalcond[1]=((((-1.0)*r12*x15739))+cj12+((r10*x15743))+(((-1.0)*r11*sj17*x15741)));
evalcond[2]=((((-1.0)*x15735))+(((-1.0)*r02*x15739))+(((-1.0)*r01*sj17*x15741))+((x15727*x15729)));
evalcond[3]=((((-1.0)*x15737))+(((-1.0)*x15738))+((r20*x15734))+((r21*x15730))+(((-1.0)*r20*x15733*x15739))+((cj15*r21*x15740))+(((-1.0)*r22*x15745)));
evalcond[4]=((((-1.0)*x15732))+(((-1.0)*r20*x15744))+x15736+(((-1.0)*r20*x15730*x15739))+((r21*x15728*x15734))+(((-1.0)*r22*sj15*x15741))+(((-1.0)*r21*x15733)));
evalcond[5]=(((r00*x15734))+((r01*x15730))+(((-1.0)*r02*x15745))+((x15731*x15740))+(((-1.0)*cj12*x15736))+((cj12*x15732))+(((-1.0)*cj15*x15729*x15739)));
evalcond[6]=(((r11*x15730))+((cj15*r11*x15740))+(((-1.0)*x15735*x15736))+(((-1.0)*r10*x15733*x15739))+(((-1.0)*r12*x15745))+((r10*x15734))+((sj12*x15732)));
evalcond[7]=((((-1.0)*r02*sj15*x15741))+(((-1.0)*r00*x15744))+(((-1.0)*sj15*x15729*x15739))+((r01*x15728*x15734))+(((-1.0)*cj17*x15731))+(((-1.0)*cj12*x15738))+(((-1.0)*cj12*x15737)));
evalcond[8]=((((-1.0)*r11*x15733))+(((-1.0)*x15735*x15738))+(((-1.0)*x15735*x15737))+((r11*x15728*x15734))+(((-1.0)*r10*x15730*x15739))+(((-1.0)*r12*sj15*x15741))+(((-1.0)*r10*x15744)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x15746=cj17*cj17;
IkReal x15747=r20*r20;
IkReal x15748=r21*r21;
IkReal x15749=(r20*r21);
IkReal x15750=((1.0)*r21);
IkReal x15751=(sj13*sj14);
IkReal x15752=(cj17*sj17);
IkReal x15753=(cj13*cj14);
IkReal x15754=(cj17*r20);
IkReal x15755=((1.0)*cj15*sj17);
IkReal x15756=(sj15*x15748);
CheckValue<IkReal> x15757 = IKatan2WithCheck(IkReal(((((-1.0)*x15753*x15754))+(((-2.0)*cj15*x15746*x15749))+((cj15*x15749))+(((-1.0)*sj17*x15750*x15751))+(((-1.0)*cj15*x15747*x15752))+((cj15*x15748*x15752))+((r21*sj17*x15753))+((x15751*x15754)))),IkReal((((r22*x15751))+(((-1.0)*r22*x15753))+(((-1.0)*cj15*cj17*r22*x15750))+(((-1.0)*r20*r22*x15755)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15757.valid){
continue;
}
CheckValue<IkReal> x15758=IKPowWithIntegerCheck(IKsign((x15756+((sj15*x15746*x15747))+(((-1.0)*x15746*x15756))+(((-2.0)*sj15*x15749*x15752))+((sj15*(r22*r22))))),-1);
if(!x15758.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x15757.value)+(((1.5707963267949)*(x15758.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[3];
IkReal x15759=IKcos(j16);
IkReal x15760=IKsin(j16);
IkReal x15761=((1.0)*cj17);
IkReal x15762=(cj15*r21);
IkReal x15763=(r20*sj15);
IkReal x15764=((1.0)*r22);
IkReal x15765=(cj15*r20);
IkReal x15766=((1.0)*sj17);
IkReal x15767=(r21*sj15);
IkReal x15768=((1.0)*cj14);
IkReal x15769=(sj17*x15760);
evalcond[0]=((((-1.0)*x15760*x15764))+(((-1.0)*r21*x15759*x15766))+((cj17*r20*x15759)));
evalcond[1]=((((-1.0)*cj13*sj14))+(((-1.0)*cj15*x15759*x15764))+(((-1.0)*sj13*x15768))+((cj17*x15767))+((sj17*x15763))+((x15762*x15769))+(((-1.0)*x15760*x15761*x15765)));
evalcond[2]=(((x15767*x15769))+(((-1.0)*sj15*x15759*x15764))+(((-1.0)*cj13*x15768))+((sj13*sj14))+(((-1.0)*x15765*x15766))+(((-1.0)*x15760*x15761*x15763))+(((-1.0)*x15761*x15762)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x15770=(cj16*sj17);
IkReal x15771=(cj16*cj17);
if( IKabs((((r00*x15771))+(((-1.0)*r01*x15770))+(((-1.0)*r02*sj16)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r12*sj16))+(((-1.0)*r10*x15771))+((r11*x15770)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x15771))+(((-1.0)*r01*x15770))+(((-1.0)*r02*sj16))))+IKsqr((((r12*sj16))+(((-1.0)*r10*x15771))+((r11*x15770))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2((((r00*x15771))+(((-1.0)*r01*x15770))+(((-1.0)*r02*sj16))), (((r12*sj16))+(((-1.0)*r10*x15771))+((r11*x15770))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x15772=IKcos(j12);
IkReal x15773=IKsin(j12);
IkReal x15774=((1.0)*r02);
IkReal x15775=(cj16*sj15);
IkReal x15776=((1.0)*sj14);
IkReal x15777=((1.0)*cj14);
IkReal x15778=(cj17*r01);
IkReal x15779=((0.09465)*sj17);
IkReal x15780=(cj15*cj16);
IkReal x15781=((1.0)*r12);
IkReal x15782=((1.0)*r11);
IkReal x15783=(cj16*sj17);
IkReal x15784=(r11*sj15);
IkReal x15785=(cj17*r10);
IkReal x15786=(cj15*cj17);
IkReal x15787=((1.0)*sj16);
IkReal x15788=((0.39225)*sj14);
IkReal x15789=(r00*sj17);
IkReal x15790=((1.0)*cj15);
IkReal x15791=(sj16*sj17);
IkReal x15792=(r10*sj17);
IkReal x15793=(cj17*r00);
IkReal x15794=((0.39225)*cj14);
IkReal x15795=(cj13*x15773);
IkReal x15796=(sj13*x15772);
IkReal x15797=(r01*x15791);
IkReal x15798=(cj13*x15772);
IkReal x15799=(sj13*x15773);
evalcond[0]=((((-1.0)*sj16*x15781))+(((-1.0)*x15782*x15783))+((cj16*x15785))+x15772);
evalcond[1]=((((-1.0)*r01*x15783))+(((-1.0)*x15773))+(((-1.0)*sj16*x15774))+((cj16*x15793)));
evalcond[2]=((((-0.09465)*x15778))+((x15794*x15796))+(((0.425)*x15796))+(((-1.0)*px))+(((-1.0)*r00*x15779))+((x15788*x15798))+(((-0.10915)*x15773)));
evalcond[3]=((((-0.09465)*cj17*r11))+((x15794*x15799))+(((0.10915)*x15772))+(((0.425)*x15799))+(((-1.0)*py))+((x15788*x15795))+(((-1.0)*r10*x15779)));
evalcond[4]=(((cj15*x15797))+(((-1.0)*r00*x15786*x15787))+(((-1.0)*x15774*x15780))+((cj14*x15798))+((sj15*x15778))+((sj15*x15789))+(((-1.0)*x15776*x15796)));
evalcond[5]=(((cj15*r11*x15791))+((cj14*x15795))+((sj15*x15792))+((cj17*x15784))+(((-1.0)*x15780*x15781))+(((-1.0)*cj15*x15785*x15787))+(((-1.0)*x15776*x15799)));
evalcond[6]=((((-1.0)*x15789*x15790))+((sj15*x15797))+(((-1.0)*x15778*x15790))+(((-1.0)*x15777*x15796))+(((-1.0)*sj15*x15787*x15793))+(((-1.0)*x15776*x15798))+(((-1.0)*x15774*x15775)));
evalcond[7]=((((-1.0)*sj15*x15785*x15787))+(((-1.0)*x15782*x15786))+(((-1.0)*x15775*x15781))+(((-1.0)*x15777*x15799))+((x15784*x15791))+(((-1.0)*x15790*x15792))+(((-1.0)*x15776*x15795)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x15800=r21*r21;
IkReal x15801=cj17*cj17;
IkReal x15802=r20*r20;
IkReal x15803=((1.0)*r20);
IkReal x15804=(r21*sj15);
IkReal x15805=(cj14*sj13);
IkReal x15806=(cj13*sj14);
IkReal x15807=(r21*sj17);
IkReal x15808=((2.0)*r20);
IkReal x15809=(sj15*sj17);
IkReal x15810=((1.0)*r22);
IkReal x15811=(cj15*x15800);
CheckValue<IkReal> x15812 = IKatan2WithCheck(IkReal(((((-1.0)*cj17*x15800*x15809))+(((-1.0)*cj17*x15803*x15805))+(((-1.0)*cj17*x15803*x15806))+((x15805*x15807))+((x15801*x15804*x15808))+(((-1.0)*x15803*x15804))+((x15806*x15807))+((cj17*x15802*x15809)))),IkReal(((((-1.0)*x15805*x15810))+(((-1.0)*x15806*x15810))+((cj17*r22*x15804))+((r20*r22*x15809)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15812.valid){
continue;
}
CheckValue<IkReal> x15813=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj15*cj17*x15807*x15808))+(((-1.0)*x15801*x15811))+((cj15*x15801*x15802))+x15811+((cj15*(r22*r22))))),-1);
if(!x15813.valid){
continue;
}
j16array[0]=((-1.5707963267949)+(x15812.value)+(((1.5707963267949)*(x15813.value))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[3];
IkReal x15814=IKcos(j16);
IkReal x15815=IKsin(j16);
IkReal x15816=((1.0)*cj17);
IkReal x15817=(cj15*r21);
IkReal x15818=(r20*sj15);
IkReal x15819=((1.0)*r22);
IkReal x15820=(cj15*r20);
IkReal x15821=((1.0)*sj17);
IkReal x15822=(r21*sj15);
IkReal x15823=((1.0)*cj14);
IkReal x15824=(sj17*x15815);
evalcond[0]=(((cj17*r20*x15814))+(((-1.0)*x15815*x15819))+(((-1.0)*r21*x15814*x15821)));
evalcond[1]=(((sj17*x15818))+(((-1.0)*cj13*sj14))+(((-1.0)*cj15*x15814*x15819))+((x15817*x15824))+((cj17*x15822))+(((-1.0)*sj13*x15823))+(((-1.0)*x15815*x15816*x15820)));
evalcond[2]=((((-1.0)*cj13*x15823))+((x15822*x15824))+((sj13*sj14))+(((-1.0)*x15816*x15817))+(((-1.0)*x15815*x15816*x15818))+(((-1.0)*x15820*x15821))+(((-1.0)*sj15*x15814*x15819)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x15825=(cj16*sj17);
IkReal x15826=(cj16*cj17);
if( IKabs(((((-1.0)*r01*x15825))+((r00*x15826))+(((-1.0)*r02*sj16)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x15826))+((r12*sj16))+((r11*x15825)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x15825))+((r00*x15826))+(((-1.0)*r02*sj16))))+IKsqr(((((-1.0)*r10*x15826))+((r12*sj16))+((r11*x15825))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((((-1.0)*r01*x15825))+((r00*x15826))+(((-1.0)*r02*sj16))), ((((-1.0)*r10*x15826))+((r12*sj16))+((r11*x15825))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x15827=IKcos(j12);
IkReal x15828=IKsin(j12);
IkReal x15829=((1.0)*r02);
IkReal x15830=(cj16*sj15);
IkReal x15831=((1.0)*sj14);
IkReal x15832=((1.0)*cj14);
IkReal x15833=(cj17*r01);
IkReal x15834=((0.09465)*sj17);
IkReal x15835=(cj15*cj16);
IkReal x15836=((1.0)*r12);
IkReal x15837=((1.0)*r11);
IkReal x15838=(cj16*sj17);
IkReal x15839=(r11*sj15);
IkReal x15840=(cj17*r10);
IkReal x15841=(cj15*cj17);
IkReal x15842=((1.0)*sj16);
IkReal x15843=((0.39225)*sj14);
IkReal x15844=(r00*sj17);
IkReal x15845=((1.0)*cj15);
IkReal x15846=(sj16*sj17);
IkReal x15847=(r10*sj17);
IkReal x15848=(cj17*r00);
IkReal x15849=((0.39225)*cj14);
IkReal x15850=(cj13*x15828);
IkReal x15851=(sj13*x15827);
IkReal x15852=(r01*x15846);
IkReal x15853=(cj13*x15827);
IkReal x15854=(sj13*x15828);
evalcond[0]=((((-1.0)*x15837*x15838))+((cj16*x15840))+(((-1.0)*sj16*x15836))+x15827);
evalcond[1]=((((-1.0)*x15828))+(((-1.0)*sj16*x15829))+(((-1.0)*r01*x15838))+((cj16*x15848)));
evalcond[2]=((((-0.09465)*x15833))+(((-0.10915)*x15828))+(((0.425)*x15851))+(((-1.0)*px))+((x15849*x15851))+(((-1.0)*r00*x15834))+((x15843*x15853)));
evalcond[3]=((((-0.09465)*cj17*r11))+(((-1.0)*r10*x15834))+(((0.425)*x15854))+(((-1.0)*py))+(((0.10915)*x15827))+((x15849*x15854))+((x15843*x15850)));
evalcond[4]=(((cj14*x15853))+(((-1.0)*r00*x15841*x15842))+(((-1.0)*x15831*x15851))+((sj15*x15833))+(((-1.0)*x15829*x15835))+((cj15*x15852))+((sj15*x15844)));
evalcond[5]=(((cj14*x15850))+((cj15*r11*x15846))+(((-1.0)*x15831*x15854))+((cj17*x15839))+(((-1.0)*cj15*x15840*x15842))+(((-1.0)*x15835*x15836))+((sj15*x15847)));
evalcond[6]=((((-1.0)*x15833*x15845))+(((-1.0)*x15832*x15851))+(((-1.0)*sj15*x15842*x15848))+(((-1.0)*x15831*x15853))+(((-1.0)*x15844*x15845))+(((-1.0)*x15829*x15830))+((sj15*x15852)));
evalcond[7]=((((-1.0)*x15832*x15854))+(((-1.0)*x15830*x15836))+(((-1.0)*x15845*x15847))+((x15839*x15846))+(((-1.0)*x15831*x15850))+(((-1.0)*sj15*x15840*x15842))+(((-1.0)*x15837*x15841)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "e0d1112b44fb6f73d0c84bd25bedf1b0"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
