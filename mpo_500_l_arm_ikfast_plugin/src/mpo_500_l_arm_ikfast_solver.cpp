/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2020-07-09 09:32:48.240630
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKcos(j[3]);
x6=IKsin(j[3]);
x7=IKsin(j[4]);
x8=IKcos(j[4]);
x9=IKsin(j[0]);
x10=IKcos(j[5]);
x11=IKsin(j[5]);
x12=((0.2683)*x6);
x13=((1.0)*x6);
x14=((1.0)*x0);
x15=((0.2683)*x5);
x16=((0.09465)*x2);
x17=((1.0)*x9);
x18=((0.425)*x4);
x19=((0.2683)*x7);
x20=((1.0)*x7);
x21=((1.0)*x5);
x22=((0.09465)*x9);
x23=((0.09465)*x0);
x24=(x8*x9);
x25=(x2*x4);
x26=(x0*x1);
x27=((-1.0)*x6);
x28=(x3*x4);
x29=((-1.0)*x5);
x30=(x1*x3);
x31=(x1*x2);
x32=((0.09465)*x30);
x33=((1.0)*x30);
x34=(x31*x9);
x35=(x14*x25);
x36=(x17*x25);
x37=((((-1.0)*x33))+x25);
x38=((((-1.0)*x31))+(((-1.0)*x28)));
x39=((((1.0)*x28))+(((1.0)*x31)));
x40=(x37*x6);
x41=((((-1.0)*x35))+((x26*x3)));
x42=((((-1.0)*x36))+((x30*x9)));
x43=(x38*x5);
x44=(x14*(((((-1.0)*x31))+(((-1.0)*x28)))));
x45=(x17*(((((-1.0)*x31))+(((-1.0)*x28)))));
x46=(((x39*x6))+((x37*x5)));
x47=(((x6*(((((-1.0)*x14*x30))+x35))))+((x44*x5)));
x48=(((x6*(((((-1.0)*x17*x30))+x36))))+((x45*x5)));
x49=((((-1.0)*x21*x41))+(((-1.0)*x13*x44)));
x50=((((-1.0)*x21*x42))+(((-1.0)*x13*x45)));
x51=(x50*x7);
eerot[0]=(((x7*x9))+((x49*x8)));
eerot[1]=(((x11*x47))+((x10*((((x7*((((x27*x44))+((x29*x41))))))+(((-1.0)*x24)))))));
eerot[2]=(((x10*x47))+((x11*(((((-1.0)*x20*x49))+((x17*x8)))))));
eetrans[0]=((((0.39225)*x2*x26))+((x0*x18))+((x19*x9))+(((-0.10915)*x9))+(((0.39225)*x0*x28))+((x5*((((x23*x28))+((x16*x26))))))+((x8*(((((-1.0)*x15*x41))+(((-1.0)*x12*x44))))))+((x6*((((x23*x30))+(((-1.0)*x0*x16*x4)))))));
eerot[3]=(((x50*x8))+(((-1.0)*x14*x7)));
eerot[4]=(((x11*x48))+((x10*((((x0*x8))+x51)))));
eerot[5]=(((x11*(((((-1.0)*x20*x50))+(((-1.0)*x14*x8))))))+((x10*x48)));
IkReal x52=(x16*x9);
eetrans[1]=(((x18*x9))+((x6*(((((-1.0)*x4*x52))+((x22*x30))))))+((x8*(((((-1.0)*x15*x42))+(((-1.0)*x12*x45))))))+(((0.39225)*x28*x9))+(((0.10915)*x0))+(((-1.0)*x0*x19))+(((0.39225)*x34))+((x5*((((x22*x28))+((x1*x52)))))));
eerot[6]=(x8*(((((-1.0)*x21*x38))+(((-1.0)*x13*x37)))));
eerot[7]=(((x10*x7*((((x27*x37))+((x29*x38))))))+((x11*x46)));
eerot[8]=(((x10*x46))+((x11*x7*((x43+x40)))));
IkReal x53=((1.0)*x16);
eetrans[2]=((0.089159)+(((0.425)*x1))+(((0.39225)*x30))+((x8*(((((-1.0)*x12*x37))+(((-1.0)*x15*x38))))))+((x6*(((((-0.09465)*x28))+(((-1.0)*x1*x53))))))+(((-0.39225)*x25))+((x5*(((((-1.0)*x4*x53))+x32)))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,j6,cj6,sj6,htj6,j6mul,j7,cj7,sj7,htj7,j7mul,j8,cj8,sj8,htj8,j8mul,j9,cj9,sj9,htj9,j9mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij4[2], _nj4,_ij5[2], _nj5,_ij6[2], _nj6,_ij7[2], _nj7,_ij8[2], _nj8,_ij9[2], _nj9;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1; j7=numeric_limits<IkReal>::quiet_NaN(); _ij7[0] = -1; _ij7[1] = -1; _nj7 = -1; j8=numeric_limits<IkReal>::quiet_NaN(); _ij8[0] = -1; _ij8[1] = -1; _nj8 = -1; j9=numeric_limits<IkReal>::quiet_NaN(); _ij9[0] = -1; _ij9[1] = -1; _nj9 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r01;
new_r01=r02;
new_r02=r00;
new_px=(px+(((-0.2683)*r00)));
new_r10=r11;
new_r11=r12;
new_r12=r10;
new_py=(py+(((-0.2683)*r10)));
new_r20=r21;
new_r21=r22;
new_r22=r20;
new_pz=((-0.089159)+(((-0.2683)*r20))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x54=((1.0)*px);
IkReal x55=((1.0)*pz);
IkReal x56=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x56))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x55)));
rxp0_2=((((-1.0)*r10*x54))+((py*r00)));
rxp1_0=((((-1.0)*r21*x56))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x55)));
rxp1_2=((((-1.0)*r11*x54))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x56)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x55)));
rxp2_2=((((-1.0)*r12*x54))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x57=((0.1893)*npx);
IkReal x58=((0.1893)*npy);
IkReal x59=((0.09465)*r20);
IkReal x60=((0.09465)*r22);
IkReal x61=((-0.09465)*r20);
IkReal x62=((-0.09465)*r21);
IkReal x63=((-1.0)*rxp2_2);
IkReal x64=((-0.09465)*r22);
IkReal x65=((-1.0)*npy);
IkReal x66=((-1.0)*r20);
IkReal x67=((-1.0)*rxp0_2);
IkReal x68=((-1.0)*r22);
IkReal x69=((-1.0)*rxp1_2);
IkReal x70=((-1.0)*npx);
matrixinvcoeffs[0]=x61;
matrixinvcoeffs[1]=x57;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=r20;
matrixinvcoeffs[10]=0;
matrixinvcoeffs[11]=x70;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=rxp0_2;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x61;
matrixinvcoeffs[19]=x57;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=npx;
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=x66;
matrixinvcoeffs[27]=0;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=x67;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x62;
matrixinvcoeffs[33]=x58;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=r21;
matrixinvcoeffs[42]=0;
matrixinvcoeffs[43]=x65;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=rxp1_2;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x62;
matrixinvcoeffs[51]=x58;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=npy;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=((-1.0)*r21);
matrixinvcoeffs[59]=0;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=x69;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=r22;
matrixinvcoeffs[69]=npz;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=0;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=0;
matrixinvcoeffs[75]=0;
matrixinvcoeffs[76]=x63;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=x64;
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=r22;
matrixinvcoeffs[87]=npz;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=0;
matrixinvcoeffs[90]=0;
matrixinvcoeffs[91]=0;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=x63;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=x64;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=0;
matrixinvcoeffs[101]=0;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=x65;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=r21;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=x62;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=rxp1_2;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=0;
matrixinvcoeffs[119]=0;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=r21;
matrixinvcoeffs[122]=0;
matrixinvcoeffs[123]=x65;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=x62;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=rxp1_2;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=0;
matrixinvcoeffs[133]=0;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=npx;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=x66;
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=x59;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=x67;
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=0;
matrixinvcoeffs[151]=0;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=x66;
matrixinvcoeffs[154]=0;
matrixinvcoeffs[155]=npx;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=x59;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=x67;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=0;
matrixinvcoeffs[165]=0;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=npz;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=x68;
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=x60;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=x63;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=0;
matrixinvcoeffs[183]=0;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=x68;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=npz;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=x60;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=x63;
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=r21;
matrixinvcoeffs[197]=npy;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=0;
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=0;
matrixinvcoeffs[203]=0;
matrixinvcoeffs[204]=x69;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=x62;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=r21;
matrixinvcoeffs[215]=npy;
matrixinvcoeffs[216]=0;
matrixinvcoeffs[217]=0;
matrixinvcoeffs[218]=0;
matrixinvcoeffs[219]=0;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=x69;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=x62;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=x66;
matrixinvcoeffs[229]=x70;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=0;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=0;
matrixinvcoeffs[235]=0;
matrixinvcoeffs[236]=rxp0_2;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=x59;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=x66;
matrixinvcoeffs[247]=x70;
matrixinvcoeffs[248]=0;
matrixinvcoeffs[249]=0;
matrixinvcoeffs[250]=0;
matrixinvcoeffs[251]=0;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=rxp0_2;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=x59;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_2=matrixinvcoeffs[36], gclwh4_4=matrixinvcoeffs[68], gclwh4_5=matrixinvcoeffs[84], gclwh4_10=matrixinvcoeffs[164], gclwh4_12=matrixinvcoeffs[196], gclwh5_0=matrixinvcoeffs[5], gclwh5_6=matrixinvcoeffs[101], gclwh5_7=matrixinvcoeffs[117], gclwh5_9=matrixinvcoeffs[149], gclwh5_13=matrixinvcoeffs[213], gclwh6_2=matrixinvcoeffs[38], gclwh6_3=matrixinvcoeffs[54], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_8=matrixinvcoeffs[134], gclwh6_10=matrixinvcoeffs[166], gclwh6_12=matrixinvcoeffs[198], gclwh6_14=matrixinvcoeffs[230], gclwh7_0=matrixinvcoeffs[7], gclwh7_1=matrixinvcoeffs[23], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_9=matrixinvcoeffs[151], gclwh7_11=matrixinvcoeffs[183], gclwh7_13=matrixinvcoeffs[215], gclwh7_15=matrixinvcoeffs[247], gclwh8_2=matrixinvcoeffs[40], gclwh8_3=matrixinvcoeffs[56], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_8=matrixinvcoeffs[136], gclwh8_10=matrixinvcoeffs[168], gclwh8_12=matrixinvcoeffs[200], gclwh8_14=matrixinvcoeffs[232], gclwh9_0=matrixinvcoeffs[9], gclwh9_1=matrixinvcoeffs[25], gclwh9_6=matrixinvcoeffs[105], gclwh9_9=matrixinvcoeffs[153], gclwh9_11=matrixinvcoeffs[185], gclwh9_13=matrixinvcoeffs[217], gclwh9_15=matrixinvcoeffs[249], gclwh10_3=matrixinvcoeffs[58], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_8=matrixinvcoeffs[138], gclwh10_10=matrixinvcoeffs[170], gclwh10_14=matrixinvcoeffs[234], gclwh11_0=matrixinvcoeffs[11], gclwh11_1=matrixinvcoeffs[27], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_9=matrixinvcoeffs[155], gclwh11_11=matrixinvcoeffs[187], gclwh11_15=matrixinvcoeffs[251], gclwh12_2=matrixinvcoeffs[44], gclwh12_4=matrixinvcoeffs[76], gclwh12_5=matrixinvcoeffs[92], gclwh12_10=matrixinvcoeffs[172], gclwh12_12=matrixinvcoeffs[204], gclwh13_0=matrixinvcoeffs[13], gclwh13_6=matrixinvcoeffs[109], gclwh13_7=matrixinvcoeffs[125], gclwh13_9=matrixinvcoeffs[157], gclwh13_13=matrixinvcoeffs[221], gclwh14_2=matrixinvcoeffs[46], gclwh14_4=matrixinvcoeffs[78], gclwh14_5=matrixinvcoeffs[94], gclwh14_10=matrixinvcoeffs[174], gclwh14_12=matrixinvcoeffs[206], gclwh15_0=matrixinvcoeffs[15], gclwh15_6=matrixinvcoeffs[111], gclwh15_7=matrixinvcoeffs[127], gclwh15_9=matrixinvcoeffs[159], gclwh15_13=matrixinvcoeffs[223];
IkReal op[72], zeror[48];
int numroots;;
IkReal x71=pz*pz;
IkReal x72=pp*pp;
IkReal x73=((0.1893)*pz);
IkReal x74=(gclwh6_14*r21);
IkReal x75=(gclwh11_1*rxp2_2);
IkReal x76=((0.1893)*pp);
IkReal x77=(npy*pz);
IkReal x78=(pp*r21);
IkReal x79=((2.0)*gclwh6_10);
IkReal x80=(gclwh7_13*rxp1_2);
IkReal x81=((3.60823078949063e-5)*r21);
IkReal x82=(npz*pz);
IkReal x83=((0.3786)*rxp0_2);
IkReal x84=(gclwh7_0*rxp1_2);
IkReal x85=((4.0)*gclwh13_9);
IkReal x86=(pp*r20);
IkReal x87=(gclwh14_2*pz);
IkReal x88=(pp*r22);
IkReal x89=((2.0)*gclwh5_9);
IkReal x90=(npx*pz);
IkReal x91=((0.000293394886875)*r20);
IkReal x92=(gclwh9_11*rxp0_2);
IkReal x93=((4.0)*gclwh4_10);
IkReal x94=(gclwh6_12*rxp1_2);
IkReal x95=(gclwh13_0*pz);
IkReal x96=((0.0089586225)*r21);
IkReal x97=((0.14850585)*rxp0_2);
IkReal x98=((0.08264838)*rxp0_2);
IkReal x99=(gclwh6_2*rxp1_2);
IkReal x100=(gclwh13_13*r21);
IkReal x101=(gclwh1_3*r20);
IkReal x102=((4.0)*gclwh15_9);
IkReal x103=((0.017917245)*r20);
IkReal x104=(gclwh4_10*r22);
IkReal x105=((2.0)*gclwh8_10);
IkReal x106=((2.0)*pp);
IkReal x107=((0.017917245)*r21);
IkReal x108=(gclwh12_12*r21);
IkReal x109=((2.0)*gclwh4_10);
IkReal x110=((4.0)*gclwh5_9);
IkReal x111=((0.017917245)*r22);
IkReal x112=((0.020662095)*rxp2_2);
IkReal x113=((0.2183)*gclwh9_15);
IkReal x114=(gclwh11_11*rxp2_2);
IkReal x115=((0.000977833645875)*r22);
IkReal x116=(gclwh5_0*pz);
IkReal x117=((0.0089586225)*r22);
IkReal x118=((0.000977833645875)*r21);
IkReal x119=(gclwh8_14*r20);
IkReal x120=(gclwh7_11*rxp1_2);
IkReal x121=((2.0)*gclwh15_9);
IkReal x122=(gclwh9_0*rxp0_2);
IkReal x123=(gclwh12_2*r21);
IkReal x124=(gclwh4_12*r22);
IkReal x125=((0.000977833645875)*r20);
IkReal x126=((1.0)*pz);
IkReal x127=((0.3786)*rxp1_2);
IkReal x128=(gclwh10_3*rxp2_2);
IkReal x129=((0.007321434238125)*r20);
IkReal x130=((0.14850585)*rxp2_2);
IkReal x131=(gclwh8_3*r20);
IkReal x132=(gclwh5_13*r22);
IkReal x133=((0.2183)*gclwh11_15);
IkReal x134=(gclwh12_2*rxp1_2);
IkReal x135=((0.020662095)*rxp0_2);
IkReal x136=((0.007321434238125)*r21);
IkReal x137=((0.08264838)*rxp1_2);
IkReal x138=((0.00195566729175)*r22);
IkReal x139=((0.00702803935125)*r20);
IkReal x140=(gclwh8_8*r20);
IkReal x141=(gclwh10_3*r22);
IkReal x142=(gclwh9_9*rxp0_2);
IkReal x143=((2.0)*gclwh10_10);
IkReal x144=((0.020662095)*rxp1_2);
IkReal x145=(gclwh9_1*rxp0_2);
IkReal x146=(gclwh8_2*rxp0_2);
IkReal x147=(gclwh10_8*r22);
IkReal x148=((4.0)*gclwh14_10);
IkReal x149=((0.00076243651125)*rxp1_2);
IkReal x150=((0.0089586225)*r20);
IkReal x151=((2.0)*gclwh14_10);
IkReal x152=((0.2183)*gclwh8_14);
IkReal x153=(gclwh6_3*r21);
IkReal x154=(gclwh6_8*rxp1_2);
IkReal x155=(gclwh8_8*rxp0_2);
IkReal x156=(gclwh11_0*rxp2_2);
IkReal x157=(gclwh7_1*rxp1_2);
IkReal x158=((0.03583449)*r20);
IkReal x159=((0.14850585)*rxp1_2);
IkReal x160=(gclwh7_9*rxp1_2);
IkReal x161=((0.3786)*rxp2_2);
IkReal x162=(gclwh13_0*r21);
IkReal x163=(gclwh6_8*r21);
IkReal x164=((4.0)*gclwh12_10);
IkReal x165=(gclwh15_0*pz);
IkReal x166=((0.30941085)*rxp0_2);
IkReal x167=((0.1893)*rxp2_2);
IkReal x168=(gclwh4_2*r22);
IkReal x169=(gclwh8_3*rxp0_2);
IkReal x170=((0.00702803935125)*r21);
IkReal x171=(gclwh8_10*rxp0_2);
IkReal x172=((0.000293394886875)*r21);
IkReal x173=(gclwh5_0*r22);
IkReal x174=((0.04132419)*rxp0_2);
IkReal x175=(gclwh15_13*r20);
IkReal x176=((0.04132419)*rxp2_2);
IkReal x177=(gclwh4_2*rxp2_2);
IkReal x178=((2.0)*gclwh12_10);
IkReal x179=((0.2183)*gclwh7_15);
IkReal x180=(gclwh10_8*rxp2_2);
IkReal x181=((0.2183)*gclwh10_14);
IkReal x182=((0.04132419)*rxp1_2);
IkReal x183=(gclwh14_2*rxp0_2);
IkReal x184=((0.08264838)*rxp2_2);
IkReal x185=(gclwh3_3*r21);
IkReal x186=((0.0140560787025)*r20);
IkReal x187=(gclwh6_3*rxp1_2);
IkReal x188=(gclwh14_12*r20);
IkReal x189=((2.0)*gclwh13_9);
IkReal x190=(gclwh6_10*rxp1_2);
IkReal x191=((0.01239915)*rxp0_2);
IkReal x192=(gclwh6_2*pz);
IkReal x193=((0.7572)*rxp2_2);
IkReal x194=((0.03583449)*r21);
IkReal x195=(gclwh12_5*x118);
IkReal x196=(gclwh10_5*x112);
IkReal x197=(gclwh4_5*x115);
IkReal x198=(gclwh8_14*x135);
IkReal x199=(gclwh8_5*x135);
IkReal x200=(gclwh10_14*x112);
IkReal x201=(gclwh6_5*x144);
IkReal x202=(gclwh14_5*x125);
IkReal x203=(gclwh6_14*x144);
IkReal x204=(gclwh14_10*x150);
IkReal x205=((0.1893)*x190);
IkReal x206=((0.0089586225)*x104);
IkReal x207=((0.1893)*x171);
IkReal x208=(gclwh10_10*x167);
IkReal x209=(gclwh12_10*x96);
IkReal x210=(gclwh15_9*x150);
IkReal x211=((0.1893)*x160);
IkReal x212=((0.1893)*x142);
IkReal x213=(gclwh13_9*x96);
IkReal x214=(gclwh5_9*x117);
IkReal x215=(gclwh11_9*x167);
IkReal x216=(gclwh13_7*x118);
IkReal x217=(gclwh7_15*x144);
IkReal x218=(gclwh11_7*x112);
IkReal x219=(gclwh5_7*x115);
IkReal x220=(gclwh7_7*x144);
IkReal x221=(gclwh9_15*x135);
IkReal x222=(gclwh15_7*x125);
IkReal x223=(gclwh11_15*x112);
IkReal x224=(gclwh10_14*x115);
IkReal x225=(gclwh8_5*x125);
IkReal x226=((0.000977833645875)*x119);
IkReal x227=(gclwh10_5*x115);
IkReal x228=(gclwh14_5*x135);
IkReal x229=(gclwh4_5*x112);
IkReal x230=(gclwh12_5*x144);
IkReal x231=((0.000977833645875)*x74);
IkReal x232=(gclwh6_5*x118);
IkReal x233=((0.1893)*gclwh12_10*rxp1_2);
IkReal x234=(gclwh4_10*x167);
IkReal x235=(gclwh6_10*x96);
IkReal x236=((0.1893)*gclwh14_10*rxp0_2);
IkReal x237=(gclwh8_10*x150);
IkReal x238=(gclwh10_10*x117);
IkReal x239=(gclwh7_15*x118);
IkReal x240=(gclwh15_7*x135);
IkReal x241=(gclwh11_7*x115);
IkReal x242=(gclwh11_15*x115);
IkReal x243=(gclwh9_15*x125);
IkReal x244=(gclwh13_7*x144);
IkReal x245=(gclwh7_7*x118);
IkReal x246=(gclwh5_7*x112);
IkReal x247=(gclwh8_10*x83);
IkReal x248=(gclwh12_10*x107);
IkReal x249=(gclwh10_10*x161);
IkReal x250=((0.017917245)*x104);
IkReal x251=(gclwh6_10*x127);
IkReal x252=(gclwh14_10*x103);
IkReal x253=(gclwh6_14*x182);
IkReal x254=(gclwh7_9*x127);
IkReal x255=(gclwh15_9*x103);
IkReal x256=(gclwh13_9*x107);
IkReal x257=(gclwh9_9*x83);
IkReal x258=(gclwh11_9*x161);
IkReal x259=(gclwh5_9*x111);
IkReal x260=(gclwh7_15*x182);
IkReal x261=((2.0)*x71);
IkReal x262=((0.2183)*gclwh14_5*x90);
IkReal x263=((0.10915)*gclwh4_5*x88);
IkReal x264=((0.10915)*gclwh12_5*x78);
IkReal x265=((0.10915)*gclwh14_5*x86);
IkReal x266=((0.2183)*gclwh4_5*x82);
IkReal x267=((0.2183)*gclwh12_5*x77);
IkReal x268=(x178*x77);
IkReal x269=(x86*x87);
IkReal x270=(x73*x99);
IkReal x271=(x169*x76);
IkReal x272=(x150*x87);
IkReal x273=(x128*x76);
IkReal x274=(x109*x82);
IkReal x275=(x146*x73);
IkReal x276=(x151*x90);
IkReal x277=(gclwh4_2*pz*x117);
IkReal x278=(x187*x76);
IkReal x279=(gclwh12_2*pz*x96);
IkReal x280=(x82*x89);
IkReal x281=(x165*x86);
IkReal x282=(x73*x84);
IkReal x283=(x75*x76);
IkReal x284=(x189*x77);
IkReal x285=(x145*x76);
IkReal x286=(x150*x165);
IkReal x287=(x121*x90);
IkReal x288=(x116*x117);
IkReal x289=(x157*x76);
IkReal x290=(x95*x96);
IkReal x291=(x122*x73);
IkReal x292=(x156*x73);
IkReal x293=((0.2183)*gclwh15_7*x90);
IkReal x294=((0.10915)*gclwh13_7*x78);
IkReal x295=((0.10915)*gclwh5_7*x88);
IkReal x296=((0.2183)*gclwh5_7*x82);
IkReal x297=((0.2183)*gclwh13_7*x77);
IkReal x298=((0.10915)*gclwh15_7*x86);
IkReal x299=((0.10915)*gclwh10_14*x88);
IkReal x300=((0.2183)*gclwh6_5*x77);
IkReal x301=((0.10915)*gclwh8_5*x86);
IkReal x302=((0.10915)*gclwh8_14*x86);
IkReal x303=((0.10915)*gclwh10_5*x88);
IkReal x304=((0.2183)*gclwh6_14*x77);
IkReal x305=((0.10915)*pp*x74);
IkReal x306=((0.2183)*gclwh10_5*x82);
IkReal x307=((0.2183)*gclwh8_5*x90);
IkReal x308=(x181*x82);
IkReal x309=(x152*x90);
IkReal x310=((0.10915)*gclwh6_5*x78);
IkReal x311=(x134*x73);
IkReal x312=(x192*x78);
IkReal x313=(x105*x90);
IkReal x314=(x143*x82);
IkReal x315=(x177*x73);
IkReal x316=(x141*x72);
IkReal x317=(x185*x72);
IkReal x318=(x101*x72);
IkReal x319=(gclwh3_2*pz*x96);
IkReal x320=(x192*x96);
IkReal x321=(gclwh1_2*pz*x150);
IkReal x322=(x131*x72);
IkReal x323=(x77*x79);
IkReal x324=(gclwh8_2*pz*x150);
IkReal x325=(x183*x73);
IkReal x326=(x113*x90);
IkReal x327=((0.2183)*gclwh7_7*x77);
IkReal x328=(x133*x82);
IkReal x329=((0.10915)*gclwh7_15*x78);
IkReal x330=((0.10915)*gclwh11_7*x88);
IkReal x331=((0.10915)*gclwh7_7*x78);
IkReal x332=((0.10915)*gclwh9_15*x86);
IkReal x333=((0.2183)*gclwh11_7*x82);
IkReal x334=(x179*x77);
IkReal x335=((0.10915)*gclwh11_15*x88);
IkReal x336=(x178*x78);
IkReal x337=(x148*x90);
IkReal x338=(x109*x88);
IkReal x339=(x151*x86);
IkReal x340=(x164*x77);
IkReal x341=(x82*x93);
IkReal x342=(x77*x85);
IkReal x343=(x110*x82);
IkReal x344=(x121*x86);
IkReal x345=(x102*x90);
IkReal x346=(x189*x78);
IkReal x347=(x88*x89);
IkReal x348=(gclwh12_2*npy*x261);
IkReal x349=(gclwh4_2*npz*x261);
IkReal x350=(gclwh12_2*x126*x78);
IkReal x351=(gclwh4_2*x126*x88);
IkReal x352=(gclwh14_2*npx*x261);
IkReal x353=(gclwh5_0*npz*x261);
IkReal x354=(gclwh13_0*npy*x261);
IkReal x355=((1.0)*x116*x88);
IkReal x356=(gclwh15_0*npx*x261);
IkReal x357=((1.0)*x78*x95);
IkReal x358=(gclwh3_2*npy*x261);
IkReal x359=(gclwh1_2*npx*x261);
IkReal x360=(gclwh6_3*x106*x77);
IkReal x361=(gclwh8_2*npx*x261);
IkReal x362=(gclwh8_3*x106*x90);
IkReal x363=(gclwh6_2*npy*x261);
IkReal x364=(gclwh1_2*x126*x86);
IkReal x365=(gclwh8_2*x126*x86);
IkReal x366=(gclwh10_3*x106*x82);
IkReal x367=(gclwh3_3*x106*x77);
IkReal x368=(gclwh1_3*x106*x90);
IkReal x369=(gclwh3_2*x126*x78);
IkReal x370=((1.0)*x153*x72);
IkReal x371=(((gclwh10_14*x176))+((gclwh8_14*x174)));
IkReal x372=(((gclwh9_15*x174))+((gclwh11_15*x176)));
IkReal x373=(x198+x200);
IkReal x374=(x221+x223);
IkReal x375=(x371+(((-1.0)*x253)));
IkReal x376=(x372+(((-1.0)*x260)));
IkReal x377=(x323+x238+x236+x237);
IkReal x378=(x210+x211+x284+x280);
IkReal x379=(x330+x327+x241+x240);
IkReal x380=(x205+x204+x268+x274);
IkReal x381=(x308+x309+x305+x231);
IkReal x382=(x326+x328+x329+x239);
IkReal x383=(x212+x213+x214+x215+x287);
IkReal x384=(x207+x206+x209+x208+x276);
IkReal x385=(x333+x331+x246+x245+x244);
IkReal x386=(x314+x313+x233+x234+x235);
IkReal x387=(x342+x343+x344+x254+x255);
IkReal x388=(x304+x302+x224+x226+x299);
IkReal x389=(x332+x335+x334+x243+x242);
IkReal x390=(x339+x340+x341+x251+x252);
IkReal x391=(x202+x201+x265+x267+x266);
IkReal x392=(x220+x222+x298+x296+x297);
IkReal x393=(x306+x307+x310+x229+x232+x230);
IkReal x394=(x303+x300+x301+x228+x225+x227);
IkReal x395=(x216+x218+x219+x293+x294+x295);
IkReal x396=(x199+x197+x196+x195+x264+x263+x262);
IkReal x397=(x346+x347+x345+x258+x259+x256+x257);
IkReal x398=(x338+x337+x336+x250+x247+x249+x248);
IkReal x399=(x353+x354+x286+x285+x283+x282+x281);
IkReal x400=(x348+x349+x269+x272+x273+x270+x271);
IkReal x401=(x351+x350+x352+x277+x275+x278+x279);
IkReal x402=(x355+x357+x356+x290+x291+x292+x289+x288);
IkReal x403=(x324+x325+x370+x368+x369+x362+x363+x364+x365+x366+x367);
IkReal x404=(x320+x321+x322+x359+x358+x319+x318+x315+x317+x316+x311+x312+x360+x361+x73);
op[0]=((0.178405675)+(((-1.0)*x391))+(((-1.0)*x373))+x396+x203);
op[1]=((((-1.6345)*gclwh4_2*x82))+(((-0.13678818)*x180))+(((-1.0)*gclwh14_2*x129))+(((1.6345)*npx*x87))+(((0.12699240901125)*x187))+(((0.007321434238125)*x168))+((gclwh12_10*x78))+(((-1.0)*gclwh14_10*x86))+(((-0.13678818)*x155))+(((0.81725)*gclwh12_2*x78))+(((0.154705425)*x146))+(((-0.12699240901125)*x128))+x384+((gclwh4_10*x88))+x400+(((0.007321434238125)*x123))+(((-1.0)*x380))+(((0.81725)*gclwh4_2*x88))+(((0.13678818)*x154))+(((-0.12699240901125)*x169))+(((-0.81725)*gclwh14_2*x86))+(((-0.154705425)*x99))+(((-1.6345)*gclwh12_2*x77))+(((-1.0)*x401)));
op[2]=((((-1.0)*x390))+(((0.160905)*x154))+(((-0.14850585)*x94))+(((-0.160905)*x180))+(((-1.0)*gclwh14_12*x139))+(((1.569)*gclwh14_12*x90))+(((-0.160905)*x155))+(((-1.569)*gclwh4_12*x82))+x398+(((0.7845)*gclwh12_12*x78))+(((-0.7845)*gclwh14_12*x86))+(((-1.569)*gclwh12_12*x77))+((gclwh8_12*x97))+(((0.00702803935125)*x124))+(((0.7845)*gclwh4_12*x88))+(((0.00702803935125)*x108)));
op[3]=x375;
op[4]=((0.007149325)+(((-1.0)*x391))+(((-1.0)*x203))+x373+x396);
op[5]=((((0.000293394886875)*x168))+(((0.0655)*npx*x87))+(((0.03275)*gclwh4_2*x88))+(((-0.02411682)*x154))+(((0.000293394886875)*x123))+((gclwh6_3*x149))+(((-1.0)*gclwh14_2*x91))+x380+(((0.006199575)*x146))+(((0.03275)*gclwh12_2*x78))+(((-1.0)*gclwh4_10*x88))+x400+((gclwh14_10*x86))+(((-0.00076243651125)*x128))+(((-0.0655)*gclwh12_2*x77))+(((-1.0)*x384))+(((-0.0655)*gclwh4_2*x82))+(((-0.00076243651125)*x169))+(((-0.03275)*gclwh14_2*x86))+(((-0.006199575)*x99))+(((-1.0)*x401))+(((0.02411682)*x180))+(((-1.0)*gclwh12_10*x78))+(((0.02411682)*x155)));
op[6]=((((-1.6345)*gclwh13_0*x77))+((gclwh13_9*x78))+(((-0.12699240901125)*x75))+(((-0.81725)*gclwh15_0*x86))+(((-1.0)*x378))+((gclwh13_0*x136))+(((0.154705425)*x156))+(((0.007321434238125)*x173))+(((-0.17262267)*x114))+(((-1.0)*gclwh15_0*x129))+x383+x399+(((1.6345)*gclwh15_0*x90))+(((0.81725)*gclwh13_0*x78))+(((0.154705425)*x122))+(((-1.0)*gclwh15_9*x86))+(((-0.17262267)*x92))+((gclwh5_9*x88))+(((-1.6345)*gclwh5_0*x82))+(((-0.154705425)*x84))+(((-0.12699240901125)*x145))+(((0.81725)*gclwh5_0*x88))+(((-1.0)*x402))+(((0.17262267)*x120))+(((0.12699240901125)*x157)));
op[7]=((0.178405675)+(((-1.0)*x392))+x374+x395+(((-1.0)*x217)));
op[8]=x376;
op[9]=((((1.569)*gclwh15_13*x90))+(((-0.7845)*gclwh15_13*x86))+(((-1.0)*x397))+(((0.7845)*gclwh5_13*x88))+(((-0.14850585)*x80))+(((0.160905)*x114))+x387+(((-1.0)*gclwh15_13*x139))+(((0.7845)*gclwh13_13*x78))+(((0.00702803935125)*x132))+(((-1.569)*gclwh13_13*x77))+(((-1.569)*gclwh5_13*x82))+(((0.160905)*x92))+((gclwh9_13*x97))+(((0.00702803935125)*x100))+(((-0.160905)*x120)));
op[10]=((((0.000293394886875)*x162))+(((0.03275)*gclwh13_0*x78))+(((0.000293394886875)*x173))+(((0.0655)*gclwh15_0*x90))+(((-1.0)*gclwh5_9*x88))+(((-0.01171767)*x92))+(((-1.0)*gclwh15_0*x91))+(((-1.0)*gclwh13_9*x78))+(((-0.01171767)*x114))+(((0.01171767)*x120))+(((-0.00076243651125)*x75))+x378+x399+(((0.006199575)*x156))+(((0.006199575)*x122))+(((-1.0)*x383))+(((-0.0655)*gclwh13_0*x77))+(((-0.00076243651125)*x145))+((gclwh15_9*x86))+(((0.03275)*gclwh5_0*x88))+(((-0.03275)*gclwh15_0*x86))+(((-1.0)*x402))+(((-0.0655)*gclwh5_0*x82))+(((-0.006199575)*x84))+((gclwh7_1*x149)));
op[11]=((0.007149325)+(((-1.0)*x392))+(((-1.0)*x374))+x395+x217);
op[12]=((((-1.0)*x393))+x381+x394+(((-1.0)*x388)));
op[13]=((-0.65598384)+(((-1.0)*gclwh6_10*x78))+(((-0.7226)*gclwh8_8*x86))+(((-0.7226)*gclwh10_8*x88))+((gclwh8_2*x129))+(((0.81725)*gclwh3_2*x78))+(((1.4452)*gclwh8_8*x90))+(((-0.66189404)*gclwh10_3*x88))+(((0.00600991575645741)*x153))+(((-0.679811285)*gclwh1_3*x86))+(((0.154705425)*x183))+(((0.00600991575645741)*x185))+(((-0.81725)*gclwh6_2*x78))+((gclwh8_10*x86))+(((-0.66189404)*gclwh8_3*x86))+(((-1.6345)*gclwh8_2*x90))+(((-0.154705425)*x177))+(((-1.6345)*gclwh3_2*x77))+(((-0.00600991575645741)*x141))+(((0.66189404)*gclwh6_3*x78))+(((1.6345)*gclwh6_2*x77))+(((-1.6345)*gclwh1_2*x90))+(((1.341705325)*gclwh10_3*x82))+(((1.341705325)*gclwh3_3*x77))+x377+(((1.341705325)*gclwh8_3*x90))+(((1.341705325)*gclwh1_3*x90))+(((-1.0)*gclwh1_2*x129))+x404+(((1.4452)*gclwh10_8*x82))+(((-0.154705425)*x134))+(((-1.341705325)*gclwh6_3*x77))+(((0.0064735006185)*x163))+(((-1.0)*x386))+((gclwh10_10*x88))+(((-1.0)*gclwh3_2*x136))+(((0.81725)*gclwh1_2*x86))+(((-0.0064735006185)*x140))+(((-0.0064735006185)*x147))+(((-0.679811285)*gclwh3_3*x78))+(((0.81725)*gclwh8_2*x86))+(((-0.00600991575645741)*x131))+(((-1.0)*gclwh6_2*x136))+(((-1.0)*x403))+(((0.00600991575645741)*x101))+(((0.7226)*gclwh6_8*x78))+(((-1.4452)*gclwh6_8*x77)));
op[14]=((-0.02970243)+((gclwh8_12*x139))+(((-1.0)*gclwh6_12*x170))+(((0.85)*gclwh6_8*x78))+(((-1.569)*gclwh8_12*x90))+(((1.7)*gclwh10_8*x82))+(((1.7)*gclwh8_8*x90))+(((-1.0)*gclwh6_10*x107))+(((-1.0)*gclwh4_12*x130))+(((-1.0)*x78*x79))+(((0.7845)*gclwh8_12*x86))+(((-0.85)*gclwh8_8*x86))+(((1.569)*gclwh6_12*x77))+((gclwh8_10*x103))+(((-1.7)*gclwh6_8*x77))+((gclwh14_10*x83))+((gclwh10_10*x111))+(((-0.7845)*gclwh6_12*x78))+(((0.007614829125)*x163))+(((4.0)*gclwh6_10*x77))+(((-1.0)*gclwh4_10*x161))+((x143*x88))+(((-1.0)*gclwh12_12*x159))+(((-4.0)*gclwh8_10*x90))+((gclwh14_12*x97))+(((-4.0)*gclwh10_10*x82))+(((-1.0)*gclwh12_10*x127))+(((-0.85)*gclwh10_8*x88))+((x105*x86))+(((-0.007614829125)*x147))+(((-0.007614829125)*x140)));
op[15]=(((gclwh10_14*x138))+(((0.4366)*gclwh6_14*x77))+(((-0.4366)*gclwh10_14*x82))+((x181*x88))+(((0.00195566729175)*x119))+(((-0.00195566729175)*x74))+(((-0.2183)*pp*x74))+(((-0.4366)*gclwh8_14*x90))+((x152*x86)));
op[16]=((((-1.0)*x393))+x388+x394+(((-1.0)*x381)));
op[17]=((-0.01084116)+(((-3.60823078949063e-5)*x141))+(((-0.012986285)*gclwh3_3*x78))+(((-0.006199575)*x177))+(((0.008055325)*gclwh3_3*x77))+(((-0.0655)*gclwh3_2*x77))+(((-1.0)*gclwh8_10*x86))+(((-0.1274)*gclwh6_8*x78))+(((-0.0011413285065)*x163))+(((0.1274)*gclwh10_8*x88))+(((-0.2548)*gclwh8_8*x90))+(((0.03275)*gclwh3_2*x78))+(((-1.0)*gclwh6_2*x172))+(((0.006199575)*x183))+(((0.008055325)*gclwh8_3*x90))+(((-1.0)*x377))+(((-1.0)*gclwh1_2*x91))+(((-0.2548)*gclwh10_8*x82))+(((-0.008055325)*gclwh6_3*x77))+(((0.0655)*gclwh6_2*x77))+((gclwh3_3*x81))+(((-1.0)*gclwh10_10*x88))+x386+(((-0.012986285)*gclwh1_3*x86))+(((-0.03275)*gclwh6_2*x78))+((gclwh6_10*x78))+(((-1.0)*gclwh3_2*x172))+(((0.00493096)*gclwh8_3*x86))+x404+(((0.008055325)*gclwh10_3*x82))+((gclwh6_3*x81))+((gclwh8_2*x91))+(((0.0011413285065)*x140))+(((0.0011413285065)*x147))+(((0.1274)*gclwh8_8*x86))+(((-0.0655)*gclwh1_2*x90))+(((0.03275)*gclwh8_2*x86))+(((0.03275)*gclwh1_2*x86))+(((3.60823078949063e-5)*x101))+(((-3.60823078949063e-5)*x131))+(((0.00493096)*gclwh10_3*x88))+(((-0.006199575)*x134))+(((-0.00493096)*gclwh6_3*x78))+(((0.2548)*gclwh6_8*x77))+(((-1.0)*x403))+(((0.008055325)*gclwh1_3*x90))+(((-0.0655)*gclwh8_2*x90)));
op[18]=((-0.65598384)+(((-0.66189404)*gclwh11_1*pp*r22))+(((-0.00816936785775)*gclwh9_11*r20))+(((2.0)*gclwh2_1*npy*pp*pz))+(((-1.341705325)*gclwh7_1*npy*pz))+(((-1.6345)*gclwh9_0*npx*pz))+(((-0.00600991575645741)*gclwh11_1*r22))+(((2.0)*gclwh0_1*npx*pp*pz))+(((1.8238)*gclwh11_11*npz*pz))+(((-0.81725)*gclwh7_0*pp*r21))+(((-1.341705325)*gclwh2_1*npy*pz))+(((-0.00600991575645741)*gclwh9_1*r20))+(((-2.0)*gclwh11_1*npz*pp*pz))+(((-2.0)*gclwh9_9*npx*pz))+(((-1.0)*gclwh2_1*r21*(pp*pp)))+((gclwh9_9*pp*r20))+(((-0.1893)*pz))+(((-2.0)*gclwh11_9*npz*pz))+((gclwh2_0*pp*pz*r21))+((gclwh0_0*pp*pz*r20))+(((0.679811285)*gclwh2_1*pp*r21))+(((-0.1893)*gclwh13_9*rxp1_2))+(((-0.81725)*gclwh2_0*pp*r21))+((gclwh7_0*pp*pz*r21))+(((-0.00600991575645741)*gclwh0_1*r20))+(((-0.0089586225)*gclwh11_0*pz*r22))+(((1.341705325)*gclwh11_1*npz*pz))+(((0.0089586225)*gclwh7_0*pz*r21))+(((0.1893)*gclwh13_0*pz*rxp1_2))+(((1.6345)*gclwh2_0*npy*pz))+(((-0.1893)*gclwh15_0*pz*rxp0_2))+(((0.1893)*gclwh5_0*pz*rxp2_2))+(((-0.0089586225)*gclwh2_0*pz*r21))+(((-0.0089586225)*gclwh0_0*pz*r20))+(((-2.0)*gclwh2_0*npy*(pz*pz)))+(((0.00816936785775)*gclwh7_11*r21))+(((-1.341705325)*gclwh0_1*npx*pz))+(((0.1893)*gclwh15_9*rxp0_2))+(((-1.0)*gclwh9_0*pp*pz*r20))+(((2.0)*gclwh9_0*npx*(pz*pz)))+(((0.007321434238125)*gclwh0_0*r20))+(((0.007321434238125)*gclwh11_0*r22))+(((1.341705325)*gclwh9_1*npx*pz))+(((2.0)*gclwh7_1*npy*pp*pz))+((gclwh11_9*pp*r22))+(((2.0)*gclwh11_0*npz*(pz*pz)))+(((2.0)*gclwh7_9*npy*pz))+(((0.007321434238125)*gclwh2_0*r21))+(((-0.66189404)*gclwh9_1*pp*r20))+(((-0.9119)*gclwh9_11*pp*r20))+(((0.0089586225)*gclwh9_9*r20))+(((-0.81725)*gclwh0_0*pp*r20))+(((-2.0)*gclwh0_0*npx*(pz*pz)))+(((-1.0)*gclwh7_9*pp*r21))+(((-1.8238)*gclwh7_11*npy*pz))+(((-0.0089586225)*gclwh7_9*r21))+(((-2.0)*gclwh9_1*npx*pp*pz))+((gclwh9_1*r20*(pp*pp)))+(((-0.9119)*gclwh11_11*pp*r22))+(((0.9119)*gclwh7_11*pp*r21))+(((-1.0)*gclwh7_1*r21*(pp*pp)))+(((-0.154705425)*gclwh13_0*rxp1_2))+(((-0.00600991575645741)*gclwh2_1*r21))+(((-0.0089586225)*gclwh9_0*pz*r20))+(((1.6345)*gclwh0_0*npx*pz))+((gclwh11_1*r22*(pp*pp)))+(((0.679811285)*gclwh0_1*pp*r20))+(((-1.0)*gclwh11_0*pp*pz*r22))+(((-1.6345)*gclwh11_0*npz*pz))+(((-0.154705425)*gclwh5_0*rxp2_2))+(((0.0089586225)*gclwh11_9*r22))+(((-2.0)*gclwh7_0*npy*(pz*pz)))+(((-0.007321434238125)*gclwh7_0*r21))+(((0.81725)*gclwh11_0*pp*r22))+(((0.00600991575645741)*gclwh7_1*r21))+(((0.154705425)*gclwh15_0*rxp0_2))+(((-0.1893)*gclwh5_9*rxp2_2))+(((0.66189404)*gclwh7_1*pp*r21))+(((0.007321434238125)*gclwh9_0*r20))+(((1.6345)*gclwh7_0*npy*pz))+(((-0.00816936785775)*gclwh11_11*r22))+(((1.8238)*gclwh9_11*npx*pz))+(((0.81725)*gclwh9_0*pp*r20))+(((-1.0)*gclwh0_1*r20*(pp*pp))));
op[19]=(x389+x379+(((-1.0)*x382))+(((-1.0)*x385)));
op[20]=((((-0.4366)*gclwh11_15*x82))+((x113*x86))+(((-1.0)*x179*x78))+((gclwh11_15*x138))+(((0.4366)*gclwh7_15*x77))+(((-0.00195566729175)*gclwh7_15*r21))+(((0.00195566729175)*gclwh9_15*r20))+((x133*x88))+(((-0.4366)*gclwh9_15*x90)));
op[21]=((0.02970243)+(((-1.0)*gclwh5_13*x130))+(((-2.0)*gclwh11_9*x88))+((gclwh15_13*x97))+(((-1.0)*gclwh13_13*x159))+(((-1.7)*gclwh9_11*x90))+(((0.7845)*gclwh9_13*x86))+(((-1.0)*gclwh15_9*x83))+(((-4.0)*gclwh7_9*x77))+(((-1.0)*gclwh9_9*x103))+(((-0.7845)*gclwh7_13*x78))+(((2.0)*gclwh7_9*x78))+(((-0.007614829125)*gclwh7_11*r21))+((gclwh9_13*x139))+(((-1.0)*gclwh7_13*x170))+(((-1.7)*gclwh11_11*x82))+(((0.007614829125)*gclwh11_11*r22))+(((0.85)*gclwh11_11*x88))+(((4.0)*gclwh11_9*x82))+(((1.7)*gclwh7_11*x77))+(((1.569)*gclwh7_13*x77))+(((0.007614829125)*gclwh9_11*r20))+((gclwh7_9*x107))+(((4.0)*gclwh9_9*x90))+(((-2.0)*gclwh9_9*x86))+(((-1.569)*gclwh9_13*x90))+(((0.85)*gclwh9_11*x86))+(((-0.85)*gclwh7_11*x78))+((gclwh5_9*x161))+((gclwh13_9*x127))+(((-1.0)*gclwh11_9*x111)));
op[22]=((-0.01084116)+(((-3.60823078949063e-5)*gclwh9_1*r20))+(((0.03275)*gclwh11_0*pp*r22))+(((2.0)*gclwh2_1*npy*pp*pz))+(((0.000293394886875)*gclwh9_0*r20))+(((-0.008055325)*gclwh0_1*npx*pz))+(((2.0)*gclwh0_1*npx*pp*pz))+(((-0.03275)*gclwh2_0*pp*r21))+(((0.0655)*gclwh7_0*npy*pz))+(((-2.0)*gclwh11_1*npz*pp*pz))+(((-0.0089586225)*gclwh9_9*r20))+(((2.0)*gclwh9_9*npx*pz))+(((-1.0)*gclwh2_1*r21*(pp*pp)))+(((0.008055325)*gclwh11_1*npz*pz))+(((-0.1893)*gclwh15_9*rxp0_2))+(((-0.1893)*pz))+(((-0.0619)*gclwh9_11*pp*r20))+(((-0.006199575)*gclwh13_0*rxp1_2))+(((0.0089586225)*gclwh7_9*r21))+((gclwh2_0*pp*pz*r21))+(((-0.00055453873275)*gclwh9_11*r20))+((gclwh0_0*pp*pz*r20))+(((-1.0)*gclwh9_9*pp*r20))+((gclwh7_0*pp*pz*r21))+(((-0.03275)*gclwh0_0*pp*r20))+(((-2.0)*gclwh7_9*npy*pz))+(((-0.0089586225)*gclwh11_0*pz*r22))+(((0.00493096)*gclwh9_1*pp*r20))+(((0.0089586225)*gclwh7_0*pz*r21))+(((0.1238)*gclwh9_11*npx*pz))+(((0.0655)*gclwh0_0*npx*pz))+(((-1.0)*gclwh11_9*pp*r22))+(((0.1893)*gclwh13_0*pz*rxp1_2))+(((0.000293394886875)*gclwh11_0*r22))+(((-0.1893)*gclwh15_0*pz*rxp0_2))+(((0.1893)*gclwh5_0*pz*rxp2_2))+(((-0.0089586225)*gclwh2_0*pz*r21))+(((-0.0655)*gclwh9_0*npx*pz))+(((-0.006199575)*gclwh5_0*rxp2_2))+(((-0.0089586225)*gclwh11_9*r22))+(((-0.0089586225)*gclwh0_0*pz*r20))+(((-2.0)*gclwh2_0*npy*(pz*pz)))+(((-0.0619)*gclwh11_11*pp*r22))+(((0.03275)*gclwh9_0*pp*r20))+(((0.00055453873275)*gclwh7_11*r21))+(((-1.0)*gclwh9_0*pp*pz*r20))+(((-0.000293394886875)*gclwh7_0*r21))+(((0.0655)*gclwh2_0*npy*pz))+(((2.0)*gclwh9_0*npx*(pz*pz)))+(((-0.008055325)*gclwh2_1*npy*pz))+(((-0.1238)*gclwh7_11*npy*pz))+((gclwh7_9*pp*r21))+(((0.000293394886875)*gclwh2_0*r21))+(((0.012986285)*gclwh0_1*pp*r20))+(((2.0)*gclwh11_9*npz*pz))+(((2.0)*gclwh7_1*npy*pp*pz))+(((0.1893)*gclwh5_9*rxp2_2))+(((-3.60823078949063e-5)*gclwh2_1*r21))+(((2.0)*gclwh11_0*npz*(pz*pz)))+(((0.000293394886875)*gclwh0_0*r20))+(((-0.0655)*gclwh11_0*npz*pz))+(((0.0619)*gclwh7_11*pp*r21))+(((0.00493096)*gclwh11_1*pp*r22))+(((0.008055325)*gclwh9_1*npx*pz))+(((-2.0)*gclwh0_0*npx*(pz*pz)))+(((-2.0)*gclwh9_1*npx*pp*pz))+((gclwh9_1*r20*(pp*pp)))+(((0.006199575)*gclwh15_0*rxp0_2))+(((-0.03275)*gclwh7_0*pp*r21))+(((-1.0)*gclwh7_1*r21*(pp*pp)))+(((-0.0089586225)*gclwh9_0*pz*r20))+(((-3.60823078949063e-5)*gclwh0_1*r20))+((gclwh11_1*r22*(pp*pp)))+(((-1.0)*gclwh11_0*pp*pz*r22))+(((-0.00055453873275)*gclwh11_11*r22))+(((0.1893)*gclwh13_9*rxp1_2))+(((-2.0)*gclwh7_0*npy*(pz*pz)))+(((0.012986285)*gclwh2_1*pp*r21))+(((3.60823078949063e-5)*gclwh7_1*r21))+(((-3.60823078949063e-5)*gclwh11_1*r22))+(((-0.00493096)*gclwh7_1*pp*r21))+(((-0.008055325)*gclwh7_1*npy*pz))+(((0.1238)*gclwh11_11*npz*pz))+(((-1.0)*gclwh0_1*r20*(pp*pp))));
op[23]=(x382+x379+(((-1.0)*x385))+(((-1.0)*x389)));
op[24]=((((0.01464286847625)*x124))+(((-1.0)*x390))+(((1.6345)*gclwh4_12*x88))+(((-1.6345)*gclwh14_12*x86))+(((1.6345)*gclwh12_12*x78))+x398+(((3.269)*gclwh14_12*x90))+(((-3.269)*gclwh4_12*x82))+((gclwh8_12*x166))+(((-3.269)*gclwh12_12*x77))+(((-0.30941085)*x94))+(((-0.01464286847625)*x188))+(((0.01464286847625)*x108)));
op[25]=x375;
op[26]=((-0.3425127)+((gclwh10_14*x184))+(((-1.0)*gclwh6_14*x137))+((gclwh8_14*x98)));
op[27]=((((3.138)*gclwh12_2*x77))+(((-0.0140560787025)*x168))+(((1.569)*gclwh14_2*x86))+(((-1.569)*gclwh12_2*x78))+((gclwh14_10*x158))+(((-1.0)*gclwh10_10*x193))+(((0.7572)*x190))+((x148*x86))+(((-8.0)*gclwh14_10*x90))+(((-3.138)*npx*x87))+(((-0.03583449)*x104))+(((-1.0)*gclwh12_10*x194))+(((-0.2970117)*x146))+(((3.138)*gclwh4_2*x82))+(((8.0)*gclwh4_10*x82))+(((-0.0140560787025)*x123))+(((-1.569)*gclwh4_2*x88))+(((-0.7572)*x171))+((gclwh14_2*x186))+(((0.2970117)*x99))+(((-1.0)*x88*x93))+(((-1.0)*x164*x78))+(((8.0)*gclwh12_10*x77)));
op[28]=((((-0.00058678977375)*x188))+(((-1.0)*x398))+(((0.0655)*gclwh12_12*x78))+(((-0.0655)*gclwh14_12*x86))+(((0.131)*gclwh14_12*x90))+(((-0.131)*gclwh4_12*x82))+(((-0.01239915)*x94))+x390+(((0.00058678977375)*x124))+((gclwh8_12*x191))+(((0.00058678977375)*x108))+(((0.0655)*gclwh4_12*x88))+(((-0.131)*gclwh12_12*x77)));
op[29]=((((-1.0)*x371))+x253);
op[30]=x376;
op[31]=((((1.6345)*gclwh13_13*x78))+(((-1.0)*x397))+(((0.01464286847625)*x132))+(((-3.269)*gclwh13_13*x77))+(((1.6345)*gclwh5_13*x88))+x387+(((-1.6345)*gclwh15_13*x86))+((gclwh9_13*x166))+(((-3.269)*gclwh5_13*x82))+(((3.269)*gclwh15_13*x90))+(((-0.30941085)*x80))+(((-0.01464286847625)*x175))+(((0.01464286847625)*x100)));
op[32]=((((-0.0140560787025)*x162))+(((-0.0140560787025)*x173))+((gclwh15_9*x158))+((x102*x86))+(((-1.0)*gclwh13_9*x194))+(((-8.0)*gclwh15_9*x90))+(((-1.0)*gclwh11_9*x193))+(((-0.03583449)*gclwh5_9*r22))+(((8.0)*gclwh13_9*x77))+(((1.569)*gclwh15_0*x86))+((gclwh15_0*x186))+(((-0.2970117)*x156))+(((-1.0)*x78*x85))+(((-1.0)*x110*x88))+(((-3.138)*gclwh15_0*x90))+(((3.138)*gclwh5_0*x82))+(((3.138)*gclwh13_0*x77))+(((-1.569)*gclwh5_0*x88))+(((-0.7572)*x142))+(((0.2970117)*x84))+(((-1.569)*gclwh13_0*x78))+(((-0.2970117)*x122))+(((0.7572)*x160))+(((8.0)*gclwh5_9*x82)));
op[33]=((-0.3425127)+((gclwh7_15*x137))+(((-1.0)*gclwh9_15*x98))+(((-1.0)*gclwh11_15*x184)));
op[34]=((((-1.0)*x372))+x260);
op[35]=((((-0.131)*gclwh5_13*x82))+(((0.0655)*gclwh5_13*x88))+(((0.131)*gclwh15_13*x90))+(((-0.01239915)*x80))+(((0.00058678977375)*x132))+x397+(((0.00058678977375)*x100))+(((-1.0)*x387))+(((-0.131)*gclwh13_13*x77))+(((0.0655)*gclwh13_13*x78))+(((-0.00058678977375)*x175))+((gclwh9_13*x191))+(((-0.0655)*gclwh15_13*x86)));
IkReal x405=pz*pz;
IkReal x406=pp*pp;
IkReal x407=((0.1893)*pz);
IkReal x408=(gclwh6_14*r21);
IkReal x409=(gclwh11_1*rxp2_2);
IkReal x410=((0.1893)*pp);
IkReal x411=(npy*pz);
IkReal x412=(pp*r21);
IkReal x413=((2.0)*gclwh6_10);
IkReal x414=((3.60823078949063e-5)*r21);
IkReal x415=(npz*pz);
IkReal x416=((0.4366)*gclwh10_14);
IkReal x417=(gclwh13_13*rxp1_2);
IkReal x418=(gclwh14_10*rxp0_2);
IkReal x419=((0.2970117)*rxp1_2);
IkReal x420=(gclwh10_3*rxp2_2);
IkReal x421=(pp*r22);
IkReal x422=((2.0)*gclwh5_9);
IkReal x423=(gclwh14_12*rxp0_2);
IkReal x424=(gclwh7_9*r21);
IkReal x425=(npx*pz);
IkReal x426=((4.0)*gclwh11_9);
IkReal x427=((0.000293394886875)*r20);
IkReal x428=(gclwh9_11*rxp0_2);
IkReal x429=((0.7572)*rxp2_2);
IkReal x430=((0.007321434238125)*r21);
IkReal x431=((4.0)*gclwh7_9);
IkReal x432=(gclwh12_12*rxp1_2);
IkReal x433=(gclwh13_0*pz);
IkReal x434=((0.0089586225)*r21);
IkReal x435=((0.14850585)*rxp0_2);
IkReal x436=((0.14850585)*rxp2_2);
IkReal x437=(pp*r20);
IkReal x438=((4.0)*gclwh8_10);
IkReal x439=((0.00702803935125)*r21);
IkReal x440=(gclwh1_3*r20);
IkReal x441=((0.017917245)*r20);
IkReal x442=(gclwh6_2*rxp1_2);
IkReal x443=((2.0)*gclwh8_10);
IkReal x444=((2.0)*pp);
IkReal x445=((2.0)*gclwh4_10);
IkReal x446=((0.4366)*gclwh7_15);
IkReal x447=(gclwh10_10*r22);
IkReal x448=((0.020662095)*rxp2_2);
IkReal x449=(gclwh11_11*rxp2_2);
IkReal x450=((0.000977833645875)*r22);
IkReal x451=((0.0089586225)*r22);
IkReal x452=(gclwh5_0*pz);
IkReal x453=((4.0)*gclwh9_9);
IkReal x454=((0.000977833645875)*r21);
IkReal x455=((0.2183)*gclwh9_15);
IkReal x456=(gclwh7_11*rxp1_2);
IkReal x457=((2.0)*gclwh15_9);
IkReal x458=((0.1893)*rxp0_2);
IkReal x459=((0.0140560787025)*r20);
IkReal x460=((0.000977833645875)*r20);
IkReal x461=((1.0)*pz);
IkReal x462=((0.3786)*rxp1_2);
IkReal x463=(gclwh14_2*pz);
IkReal x464=((0.007321434238125)*r20);
IkReal x465=((0.7572)*rxp1_2);
IkReal x466=((0.0039113345835)*r20);
IkReal x467=(gclwh8_3*r20);
IkReal x468=((0.2183)*gclwh11_15);
IkReal x469=(gclwh8_8*rxp0_2);
IkReal x470=((0.020662095)*rxp0_2);
IkReal x471=(gclwh11_15*r22);
IkReal x472=(gclwh4_12*rxp2_2);
IkReal x473=((0.00702803935125)*r20);
IkReal x474=((0.0140560787025)*r21);
IkReal x475=((0.03583449)*r20);
IkReal x476=(gclwh8_8*r20);
IkReal x477=(gclwh10_3*r22);
IkReal x478=((2.0)*gclwh10_10);
IkReal x479=(gclwh9_0*rxp0_2);
IkReal x480=((0.020662095)*rxp1_2);
IkReal x481=(gclwh9_1*rxp0_2);
IkReal x482=(gclwh8_2*pz);
IkReal x483=((0.00076243651125)*rxp1_2);
IkReal x484=(gclwh7_13*r21);
IkReal x485=((0.0089586225)*r20);
IkReal x486=((0.14850585)*rxp1_2);
IkReal x487=((2.0)*gclwh14_10);
IkReal x488=((0.2183)*gclwh8_14);
IkReal x489=(gclwh6_3*r21);
IkReal x490=(gclwh10_8*rxp2_2);
IkReal x491=((0.000293394886875)*r21);
IkReal x492=(gclwh15_9*rxp0_2);
IkReal x493=(gclwh7_1*rxp1_2);
IkReal x494=((4.0)*gclwh10_10);
IkReal x495=(gclwh6_8*r21);
IkReal x496=(gclwh10_10*rxp2_2);
IkReal x497=((0.017917245)*r22);
IkReal x498=(gclwh10_14*r22);
IkReal x499=((0.017917245)*r21);
IkReal x500=((0.4366)*gclwh9_15);
IkReal x501=((0.2970117)*rxp2_2);
IkReal x502=((0.4366)*gclwh11_15);
IkReal x503=(gclwh15_0*pz);
IkReal x504=((0.1893)*rxp2_2);
IkReal x505=(gclwh6_8*rxp1_2);
IkReal x506=((0.007614829125)*r22);
IkReal x507=(gclwh4_2*r22);
IkReal x508=(gclwh8_3*rxp0_2);
IkReal x509=(gclwh5_13*rxp2_2);
IkReal x510=(gclwh15_13*rxp0_2);
IkReal x511=((0.04132419)*rxp0_2);
IkReal x512=((0.04132419)*rxp2_2);
IkReal x513=((0.01464286847625)*r20);
IkReal x514=((4.0)*gclwh6_10);
IkReal x515=(gclwh7_15*r21);
IkReal x516=(gclwh6_12*r21);
IkReal x517=((0.2970117)*rxp0_2);
IkReal x518=((0.154705425)*rxp2_2);
IkReal x519=((2.0)*gclwh12_10);
IkReal x520=((0.006199575)*rxp0_2);
IkReal x521=((0.1893)*rxp1_2);
IkReal x522=((0.2183)*gclwh7_15);
IkReal x523=((0.2183)*gclwh10_14);
IkReal x524=((0.04132419)*rxp1_2);
IkReal x525=((0.3786)*rxp2_2);
IkReal x526=(gclwh12_2*rxp1_2);
IkReal x527=((0.3786)*rxp0_2);
IkReal x528=(gclwh3_3*r21);
IkReal x529=(gclwh6_3*rxp1_2);
IkReal x530=((0.4366)*gclwh8_14);
IkReal x531=(gclwh7_0*rxp1_2);
IkReal x532=((2.0)*gclwh13_9);
IkReal x533=((0.006199575)*rxp2_2);
IkReal x534=((0.154705425)*rxp0_2);
IkReal x535=(gclwh10_8*r22);
IkReal x536=(gclwh6_2*pz);
IkReal x537=(gclwh4_2*pz);
IkReal x538=(gclwh5_0*r22);
IkReal x539=((0.00058678977375)*r20);
IkReal x540=((0.00702803935125)*r22);
IkReal x541=((0.00195566729175)*r20);
IkReal x542=(gclwh12_10*x462);
IkReal x543=(gclwh6_10*x499);
IkReal x544=(gclwh4_10*x525);
IkReal x545=((0.017917245)*x447);
IkReal x546=((0.3786)*x418);
IkReal x547=(gclwh8_10*x441);
IkReal x548=(gclwh9_9*x441);
IkReal x549=(gclwh11_9*x497);
IkReal x550=((0.3786)*x492);
IkReal x551=(gclwh5_9*x525);
IkReal x552=((0.017917245)*x424);
IkReal x553=(gclwh13_9*x462);
IkReal x554=(gclwh12_5*x454);
IkReal x555=(gclwh10_5*x448);
IkReal x556=(gclwh4_5*x450);
IkReal x557=(gclwh8_5*x470);
IkReal x558=(gclwh6_14*x480);
IkReal x559=(gclwh6_5*x480);
IkReal x560=(gclwh8_14*x470);
IkReal x561=(gclwh14_5*x460);
IkReal x562=(gclwh10_14*x448);
IkReal x563=(gclwh4_10*x451);
IkReal x564=(gclwh8_10*x458);
IkReal x565=((0.1893)*x496);
IkReal x566=(gclwh12_10*x434);
IkReal x567=(gclwh14_10*x485);
IkReal x568=(gclwh6_10*x521);
IkReal x569=(gclwh9_9*x458);
IkReal x570=(gclwh13_9*x434);
IkReal x571=(gclwh5_9*x451);
IkReal x572=(gclwh11_9*x504);
IkReal x573=(gclwh15_9*x485);
IkReal x574=(gclwh7_9*x521);
IkReal x575=(gclwh13_7*x454);
IkReal x576=(gclwh9_15*x470);
IkReal x577=(gclwh11_15*x448);
IkReal x578=(gclwh11_7*x448);
IkReal x579=(gclwh5_7*x450);
IkReal x580=(gclwh7_7*x480);
IkReal x581=(gclwh7_15*x480);
IkReal x582=(gclwh15_7*x460);
IkReal x583=(gclwh8_5*x460);
IkReal x584=(gclwh10_5*x450);
IkReal x585=((0.000977833645875)*x408);
IkReal x586=(gclwh14_5*x470);
IkReal x587=(gclwh10_14*x450);
IkReal x588=(gclwh4_5*x448);
IkReal x589=(gclwh8_14*x460);
IkReal x590=(gclwh12_5*x480);
IkReal x591=(gclwh6_5*x454);
IkReal x592=((0.1893)*x418);
IkReal x593=(gclwh8_10*x485);
IkReal x594=((0.0089586225)*x447);
IkReal x595=(gclwh12_10*x521);
IkReal x596=(gclwh4_10*x504);
IkReal x597=(gclwh6_10*x434);
IkReal x598=(rxp1_2*x407);
IkReal x599=((2.0)*x405);
IkReal x600=(x412*x413);
IkReal x601=(x415*x494);
IkReal x602=(x425*x438);
IkReal x603=(x411*x514);
IkReal x604=(x437*x443);
IkReal x605=(x421*x478);
IkReal x606=(x411*x431);
IkReal x607=((2.0)*gclwh11_9*x421);
IkReal x608=((2.0)*gclwh9_9*x437);
IkReal x609=((2.0)*gclwh7_9*x412);
IkReal x610=(x415*x426);
IkReal x611=(x425*x453);
IkReal x612=((0.2183)*gclwh14_5*x425);
IkReal x613=((0.10915)*gclwh4_5*x421);
IkReal x614=((0.10915)*gclwh12_5*x412);
IkReal x615=((0.10915)*gclwh14_5*x437);
IkReal x616=((0.2183)*gclwh4_5*x415);
IkReal x617=((0.2183)*gclwh12_5*x411);
IkReal x618=(x437*x463);
IkReal x619=(x425*x487);
IkReal x620=(x407*x442);
IkReal x621=(x410*x508);
IkReal x622=(x463*x485);
IkReal x623=(x410*x420);
IkReal x624=(x411*x519);
IkReal x625=(gclwh8_2*rxp0_2*x407);
IkReal x626=(x451*x537);
IkReal x627=(x410*x529);
IkReal x628=(gclwh12_2*pz*x434);
IkReal x629=(x415*x445);
IkReal x630=(x425*x457);
IkReal x631=(x437*x503);
IkReal x632=(x407*x531);
IkReal x633=(x409*x410);
IkReal x634=(x410*x481);
IkReal x635=(x485*x503);
IkReal x636=(x415*x422);
IkReal x637=(x411*x532);
IkReal x638=(x451*x452);
IkReal x639=(x410*x493);
IkReal x640=(x433*x434);
IkReal x641=(x407*x479);
IkReal x642=(gclwh11_0*rxp2_2*x407);
IkReal x643=((0.2183)*gclwh15_7*x425);
IkReal x644=((0.10915)*gclwh13_7*x412);
IkReal x645=((0.10915)*gclwh5_7*x421);
IkReal x646=((0.2183)*gclwh5_7*x415);
IkReal x647=((0.2183)*gclwh13_7*x411);
IkReal x648=((0.10915)*gclwh15_7*x437);
IkReal x649=((0.2183)*gclwh6_5*x411);
IkReal x650=((0.10915)*gclwh8_5*x437);
IkReal x651=((0.10915)*pp*x408);
IkReal x652=((0.10915)*gclwh10_5*x421);
IkReal x653=(x415*x523);
IkReal x654=(x425*x488);
IkReal x655=((0.10915)*gclwh10_14*x421);
IkReal x656=((0.10915)*gclwh8_14*x437);
IkReal x657=((0.2183)*gclwh10_5*x415);
IkReal x658=((0.2183)*gclwh8_5*x425);
IkReal x659=((0.10915)*gclwh6_5*x412);
IkReal x660=((0.2183)*gclwh6_14*x411);
IkReal x661=(x407*x526);
IkReal x662=(x411*x413);
IkReal x663=(x412*x536);
IkReal x664=(gclwh4_2*rxp2_2*x407);
IkReal x665=(x406*x477);
IkReal x666=(x406*x528);
IkReal x667=(x406*x440);
IkReal x668=(gclwh3_2*pz*x434);
IkReal x669=(x434*x536);
IkReal x670=(gclwh1_2*pz*x485);
IkReal x671=(x406*x467);
IkReal x672=(x425*x443);
IkReal x673=(x415*x478);
IkReal x674=(x482*x485);
IkReal x675=(gclwh14_2*rxp0_2*x407);
IkReal x676=(gclwh12_2*npy*x599);
IkReal x677=(gclwh4_2*npz*x599);
IkReal x678=(gclwh12_2*x412*x461);
IkReal x679=(gclwh4_2*x421*x461);
IkReal x680=(gclwh14_2*npx*x599);
IkReal x681=(gclwh5_0*npz*x599);
IkReal x682=(gclwh13_0*npy*x599);
IkReal x683=((1.0)*x421*x452);
IkReal x684=(gclwh15_0*npx*x599);
IkReal x685=((1.0)*x412*x433);
IkReal x686=(gclwh3_2*npy*x599);
IkReal x687=(gclwh1_2*npx*x599);
IkReal x688=(gclwh6_3*x411*x444);
IkReal x689=(gclwh8_2*npx*x599);
IkReal x690=(gclwh8_3*x425*x444);
IkReal x691=(gclwh6_2*npy*x599);
IkReal x692=(gclwh1_2*x437*x461);
IkReal x693=(gclwh8_2*x437*x461);
IkReal x694=(gclwh10_3*x415*x444);
IkReal x695=(gclwh3_3*x411*x444);
IkReal x696=(gclwh1_3*x425*x444);
IkReal x697=(gclwh3_2*x412*x461);
IkReal x698=((1.0)*x406*x489);
IkReal x699=(x562+x560);
IkReal x700=(x577+x576);
IkReal x701=(x594+x593+x592+x662);
IkReal x702=(x574+x573+x636+x637);
IkReal x703=(x568+x567+x624+x629);
IkReal x704=(((x415*x416))+(((0.2183)*pp*x408))+(((0.00195566729175)*x408))+((x425*x530)));
IkReal x705=(((x415*x502))+((x412*x522))+((x425*x500))+(((0.00195566729175)*x515)));
IkReal x706=(x585+x651+x653+x654);
IkReal x707=(x566+x564+x565+x563+x619);
IkReal x708=(x571+x570+x572+x569+x630);
IkReal x709=(x597+x596+x595+x672+x673);
IkReal x710=((((0.4366)*gclwh6_14*x411))+((gclwh8_14*x541))+(((0.00195566729175)*x498))+((x437*x488))+((x421*x523)));
IkReal x711=((((0.00195566729175)*x471))+((x411*x446))+((x421*x468))+((gclwh9_15*x541))+((x437*x455)));
IkReal x712=(x587+x589+x655+x656+x660);
IkReal x713=(x580+x582+x647+x646+x648);
IkReal x714=(x559+x561+x615+x616+x617);
IkReal x715=(x544+x542+x543+x602+x601+x600);
IkReal x716=(x588+x591+x590+x657+x658+x659);
IkReal x717=(x583+x584+x586+x649+x650+x652);
IkReal x718=(x545+x546+x547+x603+x605+x604);
IkReal x719=(x550+x548+x549+x607+x606+x608);
IkReal x720=(x579+x578+x575+x645+x644+x643);
IkReal x721=(x553+x552+x551+x609+x610+x611);
IkReal x722=(x557+x556+x555+x554+x614+x612+x613);
IkReal x723=(x634+x635+x632+x633+x631+x682+x681);
IkReal x724=(x618+x676+x677+x621+x620+x623+x622);
IkReal x725=(x678+x679+x625+x627+x626+x628+x680);
IkReal x726=((((-1.0)*x710))+x704);
IkReal x727=((((-1.0)*x711))+x705);
IkReal x728=(x642+x641+x640+x638+x639+x683+x685+x684);
IkReal x729=(x674+x675+x694+x695+x696+x697+x690+x691+x692+x693+x698);
IkReal x730=(x407+x669+x668+x661+x663+x665+x664+x667+x666+x670+x671+x689+x688+x687+x686);
op[36]=((1.35962257)+(((0.30941085)*x423))+((gclwh8_12*x513))+(((-0.30941085)*x432))+(((-0.01464286847625)*x516))+(((-3.269)*gclwh8_12*x425))+(((3.269)*gclwh6_12*x411))+(((-1.0)*x715))+(((-0.30941085)*x472))+(((1.6345)*gclwh8_12*x437))+x718+(((-1.6345)*gclwh6_12*x412)));
op[37]=((((-1.0)*x704))+x710);
op[38]=((((-0.8732)*gclwh8_14*x425))+((gclwh8_14*x466))+(((-0.0039113345835)*x408))+((x416*x421))+((x437*x530))+(((-0.4366)*pp*x408))+(((-0.8732)*gclwh10_14*x415))+(((0.8732)*gclwh6_14*x411))+(((0.0039113345835)*x498)));
op[39]=((-0.15471464)+(((-1.0)*x437*x438))+((gclwh4_10*x429))+(((-1.0)*gclwh8_10*x475))+(((-1.0)*x421*x494))+(((-0.03583449)*x447))+(((-8.0)*gclwh6_10*x411))+(((3.138)*gclwh1_2*x425))+((x412*x514))+(((-0.7572)*x418))+(((3.138)*gclwh3_2*x411))+(((8.0)*gclwh10_10*x415))+((gclwh3_2*x474))+(((-1.569)*gclwh8_2*x437))+((gclwh6_2*x474))+(((8.0)*gclwh8_10*x425))+(((-1.0)*gclwh14_2*x517))+(((-1.0)*gclwh8_2*x459))+(((3.138)*gclwh8_2*x425))+((gclwh1_2*x459))+(((1.569)*gclwh6_2*x412))+((gclwh12_2*x419))+(((-1.569)*gclwh3_2*x412))+(((0.03583449)*gclwh6_10*r21))+(((-1.569)*gclwh1_2*x437))+((gclwh12_10*x465))+((gclwh4_2*x501))+(((-3.138)*gclwh6_2*x411)));
op[40]=((-0.02597257)+(((-0.0655)*gclwh6_12*x412))+(((0.0655)*gclwh8_12*x437))+(((-0.131)*gclwh8_12*x425))+((gclwh8_12*x539))+(((-0.01239915)*x432))+(((-1.0)*x718))+(((-0.00058678977375)*x516))+x715+(((0.01239915)*x423))+(((0.131)*gclwh6_12*x411))+(((-0.01239915)*x472)));
op[41]=x726;
op[42]=((((-1.0)*x705))+x711);
op[43]=((-1.35962257)+(((3.269)*gclwh7_13*x411))+(((-0.30941085)*x417))+(((-0.01464286847625)*x484))+(((1.6345)*gclwh9_13*x437))+(((0.30941085)*x510))+(((-1.0)*x719))+(((-0.30941085)*x509))+x721+(((-3.269)*gclwh9_13*x425))+((gclwh9_13*x513))+(((-1.6345)*gclwh7_13*x412)));
op[44]=((-0.15471464)+(((3.138)*gclwh11_0*x415))+(((-1.0)*x421*x426))+(((-1.0)*gclwh0_0*x459))+(((-3.138)*gclwh7_0*x411))+(((-3.138)*gclwh2_0*x411))+(((-1.0)*x437*x453))+(((-1.0)*gclwh15_0*x517))+(((1.569)*gclwh0_0*x437))+(((-0.03583449)*gclwh11_9*r22))+(((-1.0)*gclwh9_0*x459))+(((-3.138)*gclwh0_0*x425))+(((-1.569)*gclwh11_0*x421))+((x412*x431))+(((0.03583449)*x424))+((gclwh7_0*x474))+((gclwh13_0*x419))+(((1.569)*gclwh7_0*x412))+(((-0.7572)*x492))+((gclwh5_0*x501))+((gclwh13_9*x465))+(((-0.0140560787025)*gclwh11_0*r22))+(((-1.0)*gclwh9_9*x475))+(((1.569)*gclwh2_0*x412))+((gclwh5_9*x429))+(((-1.569)*gclwh9_0*x437))+(((8.0)*gclwh9_9*x425))+(((-1.0)*gclwh2_0*x474))+(((8.0)*gclwh11_9*x415))+(((3.138)*gclwh9_0*x425))+(((-8.0)*gclwh7_9*x411)));
op[45]=((((-1.0)*x437*x500))+((x412*x446))+(((-0.8732)*gclwh7_15*x411))+(((0.8732)*gclwh11_15*x415))+(((-1.0)*x421*x502))+(((0.0039113345835)*x515))+(((0.8732)*gclwh9_15*x425))+(((-1.0)*gclwh9_15*x466))+(((-0.0039113345835)*x471)));
op[46]=x727;
op[47]=((0.02597257)+(((-0.00058678977375)*x484))+(((0.01239915)*x510))+(((-0.0655)*gclwh7_13*x412))+(((-0.01239915)*x417))+(((-1.0)*x721))+(((-0.01239915)*x509))+(((-0.131)*gclwh9_13*x425))+x719+(((0.0655)*gclwh9_13*x437))+(((0.131)*gclwh7_13*x411))+((gclwh9_13*x539)));
op[48]=((-0.178405675)+(((-1.0)*x558))+(((-1.0)*x714))+x699+x722);
op[49]=((((-1.0)*gclwh8_2*x534))+(((0.12699240901125)*x529))+(((0.13678818)*x505))+(((-0.12699240901125)*x508))+(((0.154705425)*x442))+(((-1.0)*gclwh12_2*x430))+(((-1.6345)*gclwh14_2*x425))+(((0.81725)*gclwh14_2*x437))+(((-1.0)*x725))+(((-0.81725)*gclwh4_2*x421))+(((-0.007321434238125)*x507))+(((-0.13678818)*x490))+(((-1.0)*gclwh12_10*x412))+(((-0.13678818)*x469))+(((-1.0)*gclwh4_10*x421))+(((-1.0)*x707))+((gclwh14_10*x437))+(((-0.12699240901125)*x420))+x703+x724+(((-0.81725)*gclwh12_2*x412))+(((1.6345)*gclwh4_2*x415))+((gclwh14_2*x464))+(((1.6345)*gclwh12_2*x411)));
op[50]=(((gclwh6_10*x462))+(((-1.569)*gclwh14_12*x425))+(((-0.7845)*gclwh12_12*x412))+(((-1.0)*gclwh8_12*x435))+(((4.0)*gclwh12_10*x411))+(((-1.0)*gclwh12_10*x499))+(((-0.3786)*x496))+(((-1.0)*x421*x445))+(((1.569)*gclwh12_12*x411))+(((-1.0)*gclwh4_12*x540))+((gclwh6_12*x486))+(((-0.160905)*x469))+(((-0.7845)*gclwh4_12*x421))+(((-0.160905)*x490))+((gclwh14_12*x473))+(((0.160905)*x505))+((gclwh14_10*x441))+(((-1.0)*x412*x519))+(((0.7845)*gclwh14_12*x437))+(((-1.0)*gclwh12_12*x439))+(((-1.0)*gclwh4_10*x497))+(((-4.0)*gclwh14_10*x425))+(((1.569)*gclwh4_12*x415))+((x437*x487))+(((4.0)*gclwh4_10*x415))+(((-1.0)*gclwh8_10*x527)));
op[51]=(((gclwh6_14*x524))+(((-1.0)*gclwh10_14*x512))+(((-1.0)*gclwh8_14*x511)));
op[52]=((-0.007149325)+(((-1.0)*x714))+x558+(((-1.0)*x699))+x722);
op[53]=((((0.006199575)*x442))+(((-1.0)*gclwh8_2*x520))+((gclwh4_10*x421))+((gclwh12_10*x412))+(((-0.000293394886875)*x507))+(((-0.00076243651125)*x508))+(((-1.0)*gclwh14_10*x437))+((gclwh14_2*x427))+(((-0.0655)*gclwh14_2*x425))+(((-0.03275)*gclwh12_2*x412))+(((0.0655)*gclwh4_2*x415))+(((-1.0)*x725))+(((-0.02411682)*x505))+(((0.02411682)*x469))+(((-1.0)*x703))+(((-0.00076243651125)*x420))+(((0.03275)*gclwh14_2*x437))+(((-0.03275)*gclwh4_2*x421))+x707+x724+(((0.0655)*gclwh12_2*x411))+((gclwh6_3*x483))+(((-1.0)*gclwh12_2*x491))+(((0.02411682)*x490)));
op[54]=((((-1.6345)*gclwh15_0*x425))+(((-0.12699240901125)*x409))+(((0.81725)*gclwh15_0*x437))+(((-0.154705425)*x479))+(((-1.0)*gclwh11_0*x518))+(((0.12699240901125)*x493))+(((1.6345)*gclwh5_0*x415))+(((-1.0)*gclwh13_9*x412))+(((0.17262267)*x456))+(((-0.81725)*gclwh13_0*x412))+(((-0.007321434238125)*x538))+(((-0.81725)*gclwh5_0*x421))+(((-1.0)*x728))+(((1.6345)*gclwh13_0*x411))+(((-1.0)*gclwh5_9*x421))+(((-1.0)*gclwh13_0*x430))+(((-1.0)*x708))+(((-0.12699240901125)*x481))+((gclwh15_9*x437))+(((-0.17262267)*x428))+x702+x723+((gclwh15_0*x464))+(((-0.17262267)*x449))+(((0.154705425)*x531)));
op[55]=((-0.178405675)+(((-1.0)*x713))+(((-1.0)*x700))+x581+x720);
op[56]=(((gclwh7_15*x524))+(((-1.0)*gclwh9_15*x511))+(((-1.0)*gclwh11_15*x512)));
op[57]=((((-1.0)*gclwh7_9*x462))+(((1.569)*gclwh13_13*x411))+(((-1.0)*gclwh5_13*x540))+(((-1.0)*gclwh13_13*x439))+((gclwh9_9*x527))+(((1.569)*gclwh5_13*x415))+((gclwh7_13*x486))+((gclwh15_13*x473))+(((4.0)*gclwh15_9*x425))+((gclwh11_9*x525))+(((-1.0)*x437*x457))+(((-1.0)*gclwh15_9*x441))+(((0.160905)*x449))+((x412*x532))+(((-0.160905)*x456))+((gclwh5_9*x497))+(((-0.7845)*gclwh13_13*x412))+(((0.160905)*x428))+(((-0.7845)*gclwh5_13*x421))+(((-1.569)*gclwh15_13*x425))+(((0.7845)*gclwh15_13*x437))+(((-4.0)*gclwh13_9*x411))+(((-1.0)*gclwh9_13*x435))+((gclwh13_9*x499))+((x421*x422))+(((-4.0)*gclwh5_9*x415)));
op[58]=((((-0.03275)*gclwh13_0*x412))+((gclwh13_9*x412))+(((-1.0)*gclwh13_0*x491))+((gclwh15_0*x427))+(((0.0655)*gclwh13_0*x411))+(((-0.03275)*gclwh5_0*x421))+((gclwh7_1*x483))+(((0.0655)*gclwh5_0*x415))+(((-1.0)*x728))+(((0.006199575)*x531))+(((0.01171767)*x456))+(((-0.006199575)*x479))+(((-1.0)*x702))+(((-0.00076243651125)*x409))+(((-0.00076243651125)*x481))+(((0.03275)*gclwh15_0*x437))+x708+x723+(((-0.01171767)*x449))+(((-1.0)*gclwh11_0*x533))+(((-1.0)*gclwh15_9*x437))+(((-0.01171767)*x428))+(((-0.0655)*gclwh15_0*x425))+((gclwh5_9*x421))+(((-0.000293394886875)*x538)));
op[59]=((-0.007149325)+(((-1.0)*x713))+x700+x720+(((-1.0)*x581)));
op[60]=((((-1.0)*x716))+(((-1.0)*x706))+x712+x717);
op[61]=((0.65598384)+(((1.341705325)*gclwh8_3*x425))+(((-1.341705325)*gclwh6_3*x411))+(((-1.0)*gclwh8_10*x437))+(((-0.66189404)*gclwh10_3*x421))+((gclwh6_2*x430))+(((-0.679811285)*gclwh3_3*x412))+(((-0.00600991575645741)*x467))+(((-0.81725)*gclwh3_2*x412))+(((0.66189404)*gclwh6_3*x412))+(((-0.00600991575645741)*x477))+(((1.341705325)*gclwh1_3*x425))+(((1.6345)*gclwh1_2*x425))+(((-0.0064735006185)*x535))+(((-0.7226)*gclwh10_8*x421))+(((1.4452)*gclwh10_8*x415))+(((1.6345)*gclwh8_2*x425))+(((0.81725)*gclwh6_2*x412))+(((0.7226)*gclwh6_8*x412))+(((-1.0)*gclwh8_2*x464))+(((-0.7226)*gclwh8_8*x437))+((gclwh1_2*x464))+(((0.0064735006185)*x495))+(((-1.0)*x729))+(((-0.81725)*gclwh8_2*x437))+(((-1.0)*gclwh10_10*x421))+((gclwh4_2*x518))+(((-0.679811285)*gclwh1_3*x437))+(((-1.4452)*gclwh6_8*x411))+(((1.6345)*gclwh3_2*x411))+(((-1.0)*x701))+(((-1.0)*gclwh14_2*x534))+((gclwh6_10*x412))+(((1.4452)*gclwh8_8*x425))+(((0.00600991575645741)*x528))+x709+x730+(((0.00600991575645741)*x440))+(((1.341705325)*gclwh10_3*x415))+(((1.341705325)*gclwh3_3*x411))+(((-0.0064735006185)*x476))+(((0.00600991575645741)*x489))+(((-0.81725)*gclwh1_2*x437))+((gclwh3_2*x430))+(((0.154705425)*x526))+(((-1.6345)*gclwh6_2*x411))+(((-0.66189404)*gclwh8_3*x437)));
op[62]=((0.02970243)+(((-1.0)*gclwh10_8*x506))+(((1.7)*gclwh10_8*x415))+(((-0.007614829125)*x476))+(((-1.7)*gclwh6_8*x411))+(((0.7845)*gclwh6_12*x412))+(((-0.14850585)*x423))+(((-0.7845)*gclwh8_12*x437))+(((-0.85)*gclwh8_8*x437))+(((-1.569)*gclwh6_12*x411))+(((-1.0)*x718))+(((0.14850585)*x432))+(((0.85)*gclwh6_8*x412))+(((-1.0)*gclwh8_12*x473))+x715+((gclwh4_12*x436))+((gclwh6_12*x439))+(((1.7)*gclwh8_8*x425))+(((1.569)*gclwh8_12*x425))+(((-0.85)*gclwh10_8*x421))+(((0.007614829125)*x495)));
op[63]=x726;
op[64]=((((-1.0)*x716))+(((-1.0)*x712))+x717+x706);
op[65]=((0.01084116)+(((-0.0011413285065)*x495))+((gclwh8_10*x437))+(((-0.012986285)*gclwh1_3*x437))+((gclwh10_10*x421))+(((0.008055325)*gclwh1_3*x425))+((gclwh3_3*x414))+(((-0.1274)*gclwh6_8*x412))+(((-0.0655)*gclwh6_2*x411))+(((0.0655)*gclwh8_2*x425))+(((-0.03275)*gclwh3_2*x412))+(((0.00493096)*gclwh8_3*x437))+(((-1.0)*gclwh8_2*x427))+(((0.0011413285065)*x535))+(((-0.008055325)*gclwh6_3*x411))+(((0.0655)*gclwh3_2*x411))+(((-0.03275)*gclwh1_2*x437))+(((0.1274)*gclwh8_8*x437))+(((0.008055325)*gclwh8_3*x425))+(((0.008055325)*gclwh3_3*x411))+((gclwh6_2*x491))+(((3.60823078949063e-5)*x440))+(((-3.60823078949063e-5)*x477))+(((-1.0)*x729))+(((-0.03275)*gclwh8_2*x437))+((gclwh6_3*x414))+(((0.1274)*gclwh10_8*x421))+((gclwh3_2*x491))+(((0.0011413285065)*x476))+(((0.006199575)*x526))+(((-1.0)*gclwh14_2*x520))+(((0.00493096)*gclwh10_3*x421))+(((0.0655)*gclwh1_2*x425))+(((-1.0)*x709))+(((0.03275)*gclwh6_2*x412))+(((-3.60823078949063e-5)*x467))+x701+x730+(((0.2548)*gclwh6_8*x411))+((gclwh4_2*x533))+(((-1.0)*gclwh6_10*x412))+((gclwh1_2*x427))+(((-0.2548)*gclwh10_8*x415))+(((-0.2548)*gclwh8_8*x425))+(((-0.00493096)*gclwh6_3*x412))+(((0.008055325)*gclwh10_3*x415))+(((-0.012986285)*gclwh3_3*x412)));
op[66]=((0.65598384)+(((-0.66189404)*gclwh11_1*pp*r22))+(((-0.00816936785775)*gclwh9_11*r20))+(((2.0)*gclwh2_1*npy*pp*pz))+(((-1.341705325)*gclwh7_1*npy*pz))+(((-0.00600991575645741)*gclwh11_1*r22))+(((2.0)*gclwh0_1*npx*pp*pz))+(((1.8238)*gclwh11_11*npz*pz))+(((-1.341705325)*gclwh2_1*npy*pz))+(((-0.00600991575645741)*gclwh9_1*r20))+(((-2.0)*gclwh11_1*npz*pp*pz))+(((-0.0089586225)*gclwh9_9*r20))+(((-0.007321434238125)*gclwh0_0*r20))+(((0.154705425)*gclwh5_0*rxp2_2))+(((2.0)*gclwh9_9*npx*pz))+(((1.6345)*gclwh11_0*npz*pz))+(((-1.0)*gclwh2_1*r21*(pp*pp)))+(((-0.1893)*gclwh15_9*rxp0_2))+(((-0.1893)*pz))+(((0.0089586225)*gclwh7_9*r21))+((gclwh2_0*pp*pz*r21))+((gclwh0_0*pp*pz*r20))+(((0.679811285)*gclwh2_1*pp*r21))+(((-1.0)*gclwh9_9*pp*r20))+((gclwh7_0*pp*pz*r21))+(((0.007321434238125)*gclwh7_0*r21))+(((-0.007321434238125)*gclwh11_0*r22))+(((-0.00600991575645741)*gclwh0_1*r20))+(((0.154705425)*gclwh13_0*rxp1_2))+(((-2.0)*gclwh7_9*npy*pz))+(((-0.0089586225)*gclwh11_0*pz*r22))+(((1.341705325)*gclwh11_1*npz*pz))+(((0.0089586225)*gclwh7_0*pz*r21))+(((0.81725)*gclwh0_0*pp*r20))+(((-1.0)*gclwh11_9*pp*r22))+(((0.1893)*gclwh13_0*pz*rxp1_2))+(((-0.1893)*gclwh15_0*pz*rxp0_2))+(((0.1893)*gclwh5_0*pz*rxp2_2))+(((-0.0089586225)*gclwh2_0*pz*r21))+(((0.81725)*gclwh7_0*pp*r21))+(((-0.0089586225)*gclwh11_9*r22))+(((-0.0089586225)*gclwh0_0*pz*r20))+(((-2.0)*gclwh2_0*npy*(pz*pz)))+(((0.00816936785775)*gclwh7_11*r21))+(((-1.341705325)*gclwh0_1*npx*pz))+(((-1.0)*gclwh9_0*pp*pz*r20))+(((-0.007321434238125)*gclwh2_0*r21))+(((-0.81725)*gclwh11_0*pp*r22))+(((2.0)*gclwh9_0*npx*(pz*pz)))+(((-0.007321434238125)*gclwh9_0*r20))+(((-1.6345)*gclwh0_0*npx*pz))+((gclwh7_9*pp*r21))+(((1.341705325)*gclwh9_1*npx*pz))+(((-0.81725)*gclwh9_0*pp*r20))+(((2.0)*gclwh11_9*npz*pz))+(((2.0)*gclwh7_1*npy*pp*pz))+(((0.1893)*gclwh5_9*rxp2_2))+(((2.0)*gclwh11_0*npz*(pz*pz)))+(((-0.66189404)*gclwh9_1*pp*r20))+(((-0.9119)*gclwh9_11*pp*r20))+(((1.6345)*gclwh9_0*npx*pz))+(((-2.0)*gclwh0_0*npx*(pz*pz)))+(((-1.8238)*gclwh7_11*npy*pz))+(((-1.6345)*gclwh7_0*npy*pz))+(((-2.0)*gclwh9_1*npx*pp*pz))+((gclwh9_1*r20*(pp*pp)))+(((-0.9119)*gclwh11_11*pp*r22))+(((0.9119)*gclwh7_11*pp*r21))+(((-1.0)*gclwh7_1*r21*(pp*pp)))+(((-0.00600991575645741)*gclwh2_1*r21))+(((-0.0089586225)*gclwh9_0*pz*r20))+((gclwh11_1*r22*(pp*pp)))+(((0.679811285)*gclwh0_1*pp*r20))+(((-1.0)*gclwh11_0*pp*pz*r22))+(((-1.6345)*gclwh2_0*npy*pz))+(((0.1893)*gclwh13_9*rxp1_2))+(((-2.0)*gclwh7_0*npy*(pz*pz)))+(((0.00600991575645741)*gclwh7_1*r21))+(((0.66189404)*gclwh7_1*pp*r21))+(((0.81725)*gclwh2_0*pp*r21))+(((-0.00816936785775)*gclwh11_11*r22))+(((1.8238)*gclwh9_11*npx*pz))+(((-1.0)*gclwh0_1*r20*(pp*pp)))+(((-0.154705425)*gclwh15_0*rxp0_2)));
op[67]=((((-1.0)*gclwh5_7*x448))+((gclwh11_7*x450))+(((-1.0)*gclwh7_7*x454))+(((-0.10915)*gclwh7_7*x412))+(((-0.2183)*gclwh11_7*x415))+((x425*x455))+(((-1.0)*gclwh11_15*x450))+(((0.2183)*gclwh7_7*x411))+(((-1.0)*x411*x522))+(((-1.0)*gclwh13_7*x480))+((gclwh15_7*x470))+(((-1.0)*gclwh9_15*x460))+(((-0.10915)*gclwh11_15*x421))+(((0.10915)*gclwh11_7*x421))+(((-0.10915)*gclwh9_15*x437))+((gclwh7_15*x454))+(((0.10915)*gclwh7_15*x412))+((x415*x468)));
op[68]=x727;
op[69]=((-0.02970243)+(((0.85)*gclwh9_11*x437))+(((0.85)*gclwh11_11*x421))+(((0.7845)*gclwh7_13*x412))+(((-1.0)*gclwh9_13*x473))+(((-0.7845)*gclwh9_13*x437))+(((-1.569)*gclwh7_13*x411))+(((-1.0)*gclwh15_13*x435))+((gclwh5_13*x436))+(((-1.0)*x721))+(((-1.7)*gclwh9_11*x425))+(((-0.007614829125)*gclwh7_11*r21))+(((1.569)*gclwh9_13*x425))+((gclwh7_13*x439))+((gclwh11_11*x506))+(((-0.85)*gclwh7_11*x412))+(((-1.7)*gclwh11_11*x415))+x719+(((1.7)*gclwh7_11*x411))+(((0.007614829125)*gclwh9_11*r20))+(((0.14850585)*x417)));
op[70]=((0.01084116)+(((-3.60823078949063e-5)*gclwh9_1*r20))+(((2.0)*gclwh2_1*npy*pp*pz))+(((-0.008055325)*gclwh0_1*npx*pz))+(((2.0)*gclwh0_1*npx*pp*pz))+(((-2.0)*gclwh11_1*npz*pp*pz))+(((-0.000293394886875)*gclwh9_0*r20))+(((-2.0)*gclwh9_9*npx*pz))+(((-1.0)*gclwh2_1*r21*(pp*pp)))+(((0.0655)*gclwh9_0*npx*pz))+(((-0.006199575)*gclwh15_0*rxp0_2))+(((0.008055325)*gclwh11_1*npz*pz))+(((0.03275)*gclwh2_0*pp*r21))+((gclwh9_9*pp*r20))+(((-0.1893)*pz))+(((-0.0619)*gclwh9_11*pp*r20))+(((-2.0)*gclwh11_9*npz*pz))+((gclwh2_0*pp*pz*r21))+(((-0.00055453873275)*gclwh9_11*r20))+((gclwh0_0*pp*pz*r20))+(((-0.1893)*gclwh13_9*rxp1_2))+((gclwh7_0*pp*pz*r21))+(((0.006199575)*gclwh13_0*rxp1_2))+(((-0.000293394886875)*gclwh2_0*r21))+(((-0.0089586225)*gclwh11_0*pz*r22))+(((0.00493096)*gclwh9_1*pp*r20))+(((0.0089586225)*gclwh7_0*pz*r21))+(((0.1238)*gclwh9_11*npx*pz))+(((0.1893)*gclwh13_0*pz*rxp1_2))+(((-0.000293394886875)*gclwh11_0*r22))+(((-0.1893)*gclwh15_0*pz*rxp0_2))+(((0.1893)*gclwh5_0*pz*rxp2_2))+(((-0.0089586225)*gclwh2_0*pz*r21))+(((-0.0089586225)*gclwh0_0*pz*r20))+(((-2.0)*gclwh2_0*npy*(pz*pz)))+(((-0.0619)*gclwh11_11*pp*r22))+(((0.1893)*gclwh15_9*rxp0_2))+(((0.00055453873275)*gclwh7_11*r21))+(((-1.0)*gclwh9_0*pp*pz*r20))+(((2.0)*gclwh9_0*npx*(pz*pz)))+(((-0.008055325)*gclwh2_1*npy*pz))+(((-0.1238)*gclwh7_11*npy*pz))+(((0.012986285)*gclwh0_1*pp*r20))+(((2.0)*gclwh7_1*npy*pp*pz))+((gclwh11_9*pp*r22))+(((-3.60823078949063e-5)*gclwh2_1*r21))+(((2.0)*gclwh11_0*npz*(pz*pz)))+(((2.0)*gclwh7_9*npy*pz))+(((0.000293394886875)*gclwh7_0*r21))+(((-0.0655)*gclwh7_0*npy*pz))+(((0.0619)*gclwh7_11*pp*r21))+(((0.00493096)*gclwh11_1*pp*r22))+(((0.0089586225)*gclwh9_9*r20))+(((0.008055325)*gclwh9_1*npx*pz))+(((-2.0)*gclwh0_0*npx*(pz*pz)))+(((-1.0)*gclwh7_9*pp*r21))+(((-0.03275)*gclwh9_0*pp*r20))+(((-0.0089586225)*gclwh7_9*r21))+(((-2.0)*gclwh9_1*npx*pp*pz))+(((-0.0655)*gclwh0_0*npx*pz))+((gclwh9_1*r20*(pp*pp)))+(((-0.0655)*gclwh2_0*npy*pz))+(((-1.0)*gclwh7_1*r21*(pp*pp)))+(((0.006199575)*gclwh5_0*rxp2_2))+(((0.03275)*gclwh7_0*pp*r21))+(((-0.0089586225)*gclwh9_0*pz*r20))+(((0.03275)*gclwh0_0*pp*r20))+(((-3.60823078949063e-5)*gclwh0_1*r20))+((gclwh11_1*r22*(pp*pp)))+(((-1.0)*gclwh11_0*pp*pz*r22))+(((-0.00055453873275)*gclwh11_11*r22))+(((-0.03275)*gclwh11_0*pp*r22))+(((0.0089586225)*gclwh11_9*r22))+(((-2.0)*gclwh7_0*npy*(pz*pz)))+(((0.012986285)*gclwh2_1*pp*r21))+(((3.60823078949063e-5)*gclwh7_1*r21))+(((-3.60823078949063e-5)*gclwh11_1*r22))+(((-0.00493096)*gclwh7_1*pp*r21))+(((0.0655)*gclwh11_0*npz*pz))+(((-0.1893)*gclwh5_9*rxp2_2))+(((-0.008055325)*gclwh7_1*npy*pz))+(((0.1238)*gclwh11_11*npz*pz))+(((-0.000293394886875)*gclwh0_0*r20))+(((-1.0)*gclwh0_1*r20*(pp*pp))));
IkReal x731=((0.2183)*pz);
IkReal x732=((0.10915)*pp);
IkReal x733=(gclwh7_15*r21);
IkReal x734=(gclwh11_7*r22);
IkReal x735=(gclwh7_7*r21);
IkReal x736=(gclwh11_15*r22);
IkReal x737=(gclwh9_15*r20);
op[71]=(((gclwh7_15*npy*x731))+(((-1.0)*x732*x735))+(((-1.0)*x732*x733))+(((-0.020662095)*gclwh13_7*rxp1_2))+(((-1.0)*gclwh11_15*npz*x731))+(((0.000977833645875)*x737))+(((0.000977833645875)*x734))+(((0.000977833645875)*x736))+(((0.020662095)*gclwh15_7*rxp0_2))+(((-0.020662095)*gclwh5_7*rxp2_2))+(((-0.000977833645875)*x735))+(((-0.000977833645875)*x733))+((gclwh7_7*npy*x731))+((x732*x737))+((x732*x734))+((x732*x736))+(((-1.0)*gclwh9_15*npx*x731))+(((-1.0)*gclwh11_7*npz*x731)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j5array[16], cj5array[16], sj5array[16], j6array[16], cj6array[16], sj6array[16], j7array[16], cj7array[16], sj7array[16];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ij5 += 3)
{
IkReal htj5 = zeror[ij5+0], htj6 = zeror[ij5+1], htj7 = zeror[ij5+2];
if(isnan(htj5)||isnan(htj6)||isnan(htj7)){
continue;
}
j5array[numsolutions]=((2.0)*(atan(htj5)));
j6array[numsolutions]=((2.0)*(atan(htj6)));
j7array[numsolutions]=((2.0)*(atan(htj7)));
if(isinf(htj5)){
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
}
else{
IkReal x738=htj5*htj5;
CheckValue<IkReal> x739=IKPowWithIntegerCheck(((1.0)+x738),-1);
if(!x739.valid){
continue;
}
cj5array[numsolutions]=((x739.value)*(((1.0)+(((-1.0)*x738)))));
CheckValue<IkReal> x740=IKPowWithIntegerCheck(((1.0)+(htj5*htj5)),-1);
if(!x740.valid){
continue;
}
sj5array[numsolutions]=((2.0)*htj5*(x740.value));
}
if(isinf(htj6)){
cj6array[numsolutions] = IKcos(j6array[numsolutions]);
sj6array[numsolutions] = IKsin(j6array[numsolutions]);
}
else{
IkReal x741=htj6*htj6;
CheckValue<IkReal> x742=IKPowWithIntegerCheck(((1.0)+x741),-1);
if(!x742.valid){
continue;
}
cj6array[numsolutions]=((x742.value)*(((1.0)+(((-1.0)*x741)))));
CheckValue<IkReal> x743=IKPowWithIntegerCheck(((1.0)+(htj6*htj6)),-1);
if(!x743.valid){
continue;
}
sj6array[numsolutions]=((2.0)*htj6*(x743.value));
}
if(isinf(htj7)){
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
}
else{
IkReal x744=htj7*htj7;
CheckValue<IkReal> x745=IKPowWithIntegerCheck(((1.0)+x744),-1);
if(!x745.valid){
continue;
}
cj7array[numsolutions]=((x745.value)*(((1.0)+(((-1.0)*x744)))));
CheckValue<IkReal> x746=IKPowWithIntegerCheck(((1.0)+(htj7*htj7)),-1);
if(!x746.valid){
continue;
}
sj7array[numsolutions]=((2.0)*htj7*(x746.value));
}
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
if( j6array[numsolutions] > IKPI )
{
    j6array[numsolutions]-=IK2PI;
}
else if( j6array[numsolutions] < -IKPI )
{
    j6array[numsolutions]+=IK2PI;
}
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j5valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj5 = 16;
_nj6 = 1;
_nj7 = 1;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
_ij6[0] = 0; _ij6[1] = -1;
_ij7[0] = 0; _ij7[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( !j5valid[iij5] ) { continue; }
if( IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(cj6array[ij5]-cj6array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij5]-sj6array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(cj7array[ij5]-cj7array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij5]-sj7array[iij5]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j5valid[iij5]=false; _ij5[1] = iij5; _ij6[1] = 0; _ij7[1] = 0;  break; 
}
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

    j6 = j6array[ij5]; cj6 = cj6array[ij5]; sj6 = sj6array[ij5];

    j7 = j7array[ij5]; cj7 = cj7array[ij5]; sj7 = sj7array[ij5];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j9eval[2];
j9eval[0]=((r20*r20)+(r21*r21));
j9eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((r20*r20)+(r21*r21));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[2];
IkReal x747=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x747);
rxp1_0=(pz*r11);
rxp1_1=(r01*x747);
j8eval[0]=r22;
j8eval[1]=sj7;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x748=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x748);
rxp1_0=(pz*r11);
rxp1_1=(r01*x748);
j8eval[0]=cj7;
j8eval[1]=r22;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x749=IKPowWithIntegerCheck(cj7,-1);
if(!x749.valid){
continue;
}
CheckValue<IkReal> x750=IKPowWithIntegerCheck(r22,-1);
if(!x750.valid){
continue;
}
cj8array[0]=((-1.0)*(x749.value)*(x750.value)*(((((-1.0)*cj5*sj6))+(((-1.0)*cj6*sj5)))));
if( cj8array[0] >= -1-IKFAST_SINCOS_THRESH && cj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKacos(cj8array[0]);
    sj8array[0] = IKsin(j8array[0]);
    cj8array[1] = cj8array[0];
    j8array[1] = -j8array[0];
    sj8array[1] = -sj8array[0];
}
else if( isnan(cj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[2];
evalcond[0]=(r22*(IKsin(j8)));
evalcond[1]=(((sj5*sj6))+(((-1.0)*cj5*cj6))+((r22*sj7*(IKcos(j8)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9eval[1];
IkReal x751=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x751);
rxp1_0=(pz*r11);
rxp1_1=(r01*x751);
IkReal x752=(r10*sj7);
IkReal x753=((4.0)*cj8);
IkReal x754=(r12*sj7);
IkReal x755=(cj5*sj6);
IkReal x756=(cj6*sj5);
IkReal x757=(cj5*cj6);
IkReal x758=(r02*sj8);
IkReal x759=((4.0)*sj8);
IkReal x760=(cj7*r10);
IkReal x761=((12.0)*cj8);
IkReal x762=(sj5*sj6);
IkReal x763=(cj7*r12);
IkReal x764=(r11*sj7);
IkReal x765=((8.0)*sj8);
IkReal x766=(cj7*r11);
IkReal x767=((4.0)*x766);
IkReal x768=((4.0)*x764);
IkReal x769=((16.0)*cj8*r01);
IkReal x770=((8.0)*cj8*r01);
IkReal x771=((16.0)*r11*sj8);
IkReal x772=(x752*x759);
IkReal x773=(x754*x761);
IkReal x774=(x759*x760);
IkReal x775=(x761*x763);
IkReal x776=(r00*x753*x755);
IkReal x777=(r00*x753*x756);
IkReal x778=((12.0)*x755*x758);
IkReal x779=((12.0)*x756*x758);
IkReal x780=(r00*x753*x757);
IkReal x781=(r00*x753*x762);
IkReal x782=((12.0)*x758*x762);
IkReal x783=((12.0)*x757*x758);
IkReal x784=(x775+x783);
IkReal x785=(x779+x778);
IkReal x786=(x774+x768+x781);
IkReal x787=(x772+x777+x776);
j9eval[0]=((((0.5)*(IKabs(((((-1.0)*x784))+(((-1.0)*x780))+x782+x786)))))+(IKabs((((x756*x770))+(((8.0)*x760))+((x755*x770))+((x764*x765)))))+(((0.5)*(IKabs(((((4.0)*x755*x758))+(((-1.0)*x767))+(((-1.0)*x753*x754))+x787+(((4.0)*x756*x758)))))))+(((0.5)*(IKabs(((((16.0)*x760))+((x756*x769))+(((16.0)*sj8*x764))+((x755*x769)))))))+(((0.5)*(IKabs(((((-1.0)*x784))+(((-1.0)*x786))+x782+x780)))))+(IKabs(((((-1.0)*x757*x770))+(((-8.0)*x752))+((x765*x766))+((x762*x770)))))+(((0.5)*(IKabs(((((-4.0)*x757*x758))+(((-1.0)*x780))+(((-1.0)*x753*x763))+x786+(((4.0)*x758*x762)))))))+(((0.5)*(IKabs(((((-16.0)*x752))+((x762*x769))+(((-1.0)*x757*x769))+(((16.0)*sj8*x766)))))))+(((0.5)*(IKabs(((((-1.0)*x787))+x767+x785+(((-1.0)*x773)))))))+(((0.5)*(IKabs(((((-1.0)*x767))+x787+x785+(((-1.0)*x773))))))));
if( IKabs(j9eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j9evalpoly[1];
IkReal x788=(r10*sj7);
IkReal x789=(sj5*sj6);
IkReal x790=(r02*sj8);
IkReal x791=(cj8*r01);
IkReal x792=((4.0)*cj7);
IkReal x793=(cj8*r12);
IkReal x794=(cj8*r00);
IkReal x795=((4.0)*r11*sj7);
IkReal x796=((4.0)*cj5*cj6);
IkReal x797=(cj7*r11*sj8);
IkReal x798=(r10*sj8*x792);
IkReal x799=((12.0)*cj7*x793);
IkReal x800=(x792*x793);
IkReal x801=(cj5*cj6*x791);
IkReal x802=((4.0)*x789*x794);
IkReal x803=(x794*x796);
IkReal x804=((12.0)*x789*x790);
IkReal x805=((12.0)*cj5*cj6*x790);
IkReal x806=((4.0)*x789*x790);
IkReal x807=(x790*x796);
IkReal x808=(x799+x805);
IkReal x809=(x807+x800);
IkReal x810=(x795+x798+x802);
IkReal x811=((((8.0)*x797))+(((-8.0)*x788))+(((8.0)*x789*x791))+(((-8.0)*x801)));
op[0]=(x810+x806+(((-1.0)*x809))+(((-1.0)*x803)));
op[1]=x811;
op[2]=(x810+x804+(((-1.0)*x808))+(((-1.0)*x803)));
op[3]=((((-16.0)*x801))+(((16.0)*x789*x791))+(((16.0)*x797))+(((-16.0)*x788)));
op[4]=((((-1.0)*x810))+x804+x803+(((-1.0)*x808)));
op[5]=x811;
op[6]=((((-1.0)*x810))+x806+x803+(((-1.0)*x809)));
polyroots6(op,zeror,numroots);
IkReal j9array[6], cj9array[6], sj9array[6], tempj9array[1];
int numsolutions = 0;
for(int ij9 = 0; ij9 < numroots; ++ij9)
{
IkReal htj9 = zeror[ij9];
tempj9array[0]=((2.0)*(atan(htj9)));
for(int kj9 = 0; kj9 < 1; ++kj9)
{
j9array[numsolutions] = tempj9array[kj9];
if( j9array[numsolutions] > IKPI )
{
    j9array[numsolutions]-=IK2PI;
}
else if( j9array[numsolutions] < -IKPI )
{
    j9array[numsolutions]+=IK2PI;
}
sj9array[numsolutions] = IKsin(j9array[numsolutions]);
cj9array[numsolutions] = IKcos(j9array[numsolutions]);
numsolutions++;
}
}
bool j9valid[6]={true,true,true,true,true,true};
_nj9 = 6;
for(int ij9 = 0; ij9 < numsolutions; ++ij9)
    {
if( !j9valid[ij9] )
{
    continue;
}
    j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
htj9 = IKtan(j9/2);

IkReal x812=(cj6*sj5);
IkReal x813=(r02*sj8);
IkReal x814=(cj7*r10);
IkReal x815=(cj8*r01);
IkReal x816=(sj7*sj8);
IkReal x817=(cj5*sj6);
IkReal x818=((4.0)*cj7*r11);
IkReal x819=(cj8*r12*sj7);
IkReal x820=((4.0)*cj8*r00);
IkReal x821=((4.0)*r10*x816);
IkReal x822=((12.0)*x819);
IkReal x823=((4.0)*x819);
IkReal x824=(x815*x817);
IkReal x825=((4.0)*x813*x817);
IkReal x826=(x817*x820);
IkReal x827=(x812*x820);
IkReal x828=((12.0)*x813*x817);
IkReal x829=((12.0)*x812*x813);
IkReal x830=((4.0)*x812*x813);
IkReal x831=(x825+x830);
IkReal x832=(x829+x828);
IkReal x833=(x821+x827+x826);
IkReal x834=((((8.0)*x824))+(((8.0)*x812*x815))+(((8.0)*r11*x816))+(((8.0)*x814)));
j9evalpoly[0]=(((htj9*x834))+(((htj9*htj9*htj9)*(((((16.0)*x812*x815))+(((16.0)*x814))+(((16.0)*r11*x816))+(((16.0)*x824))))))+((x834*(htj9*htj9*htj9*htj9*htj9)))+(((-1.0)*x823))+(((htj9*htj9*htj9*htj9*htj9*htj9)*(((((-1.0)*x823))+(((-1.0)*x818))+x831+x833))))+(((-1.0)*x833))+(((htj9*htj9*htj9*htj9)*(((((-1.0)*x822))+(((-1.0)*x818))+x832+x833))))+x818+x831+(((htj9*htj9)*(((((-1.0)*x822))+(((-1.0)*x833))+x818+x832)))));
if( IKabs(j9evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < numsolutions; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x835=(cj8*cj9);
IkReal x836=(cj8*sj9);
if( IKabs(((((-1.0)*r00*x835))+((r02*sj8))+((r01*x836)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x835))+(((-1.0)*r11*x836))+(((-1.0)*r12*sj8)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x835))+((r02*sj8))+((r01*x836))))+IKsqr((((r10*x835))+(((-1.0)*r11*x836))+(((-1.0)*r12*sj8))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r00*x835))+((r02*sj8))+((r01*x836))), (((r10*x835))+(((-1.0)*r11*x836))+(((-1.0)*r12*sj8))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x837=IKcos(j4);
IkReal x838=IKsin(j4);
IkReal x839=(cj6*sj5);
IkReal x840=(cj8*sj7);
IkReal x841=(cj8*sj9);
IkReal x842=(cj9*r11);
IkReal x843=(cj9*r10);
IkReal x844=((1.0)*cj8);
IkReal x845=(sj5*sj6);
IkReal x846=(cj5*sj6);
IkReal x847=(sj7*sj8);
IkReal x848=(cj7*sj8);
IkReal x849=((0.425)*sj5);
IkReal x850=(cj5*cj6);
IkReal x851=((1.0)*sj9);
IkReal x852=((0.09465)*sj9);
IkReal x853=(cj9*r01);
IkReal x854=(sj7*sj9);
IkReal x855=(cj7*cj8);
IkReal x856=(cj9*r00);
IkReal x857=((1.0)*cj7);
IkReal x858=((1.0)*x846);
IkReal x859=((0.39225)*x838);
IkReal x860=((1.0)*x837);
IkReal x861=(cj7*x851);
IkReal x862=((1.0)*x838);
IkReal x863=((0.39225)*x837);
evalcond[0]=((((-1.0)*x843*x844))+((r12*sj8))+x837+((r11*x841)));
evalcond[1]=((((-1.0)*x862))+(((-1.0)*x844*x856))+((r02*sj8))+((r01*x841)));
evalcond[2]=((((-0.09465)*x853))+(((-1.0)*r00*x852))+(((-0.10915)*x838))+((x837*x849))+(((-1.0)*px))+((x839*x863))+((x846*x863)));
evalcond[3]=(((x838*x849))+(((-1.0)*py))+(((-0.09465)*x842))+((x846*x859))+((x839*x859))+(((-1.0)*r10*x852))+(((0.10915)*x837)));
evalcond[4]=(((x848*x856))+(((-1.0)*x845*x860))+((r00*x854))+(((-1.0)*r01*x848*x851))+((r02*x855))+((x837*x850))+((sj7*x853)));
evalcond[5]=((((-1.0)*x845*x862))+((r10*x854))+((r12*x855))+((sj7*x842))+((x843*x848))+(((-1.0)*r11*x848*x851))+((x838*x850)));
evalcond[6]=((((-1.0)*x853*x857))+(((-1.0)*r00*x861))+(((-1.0)*r01*x847*x851))+((r02*x840))+((x847*x856))+(((-1.0)*x839*x860))+(((-1.0)*x837*x858)));
evalcond[7]=((((-1.0)*r10*x861))+(((-1.0)*x842*x857))+(((-1.0)*r11*x847*x851))+(((-1.0)*x838*x858))+((x843*x847))+(((-1.0)*x839*x862))+((r12*x840)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x864=IKPowWithIntegerCheck(r22,-1);
if(!x864.valid){
continue;
}
CheckValue<IkReal> x865=IKPowWithIntegerCheck(sj7,-1);
if(!x865.valid){
continue;
}
cj8array[0]=((-1.0)*(x864.value)*(x865.value)*((((sj5*sj6))+(((-1.0)*cj5*cj6)))));
if( cj8array[0] >= -1-IKFAST_SINCOS_THRESH && cj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKacos(cj8array[0]);
    sj8array[0] = IKsin(j8array[0]);
    cj8array[1] = cj8array[0];
    j8array[1] = -j8array[0];
    sj8array[1] = -sj8array[0];
}
else if( isnan(cj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[2];
evalcond[0]=(r22*(IKsin(j8)));
evalcond[1]=((((-1.0)*cj5*sj6))+((cj7*r22*(IKcos(j8))))+(((-1.0)*cj6*sj5)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9eval[1];
IkReal x866=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x866);
rxp1_0=(pz*r11);
rxp1_1=(r01*x866);
IkReal x867=(r10*sj7);
IkReal x868=((4.0)*cj8);
IkReal x869=(r12*sj7);
IkReal x870=(cj5*sj6);
IkReal x871=(cj6*sj5);
IkReal x872=(cj5*cj6);
IkReal x873=(r02*sj8);
IkReal x874=((4.0)*sj8);
IkReal x875=(cj7*r10);
IkReal x876=((12.0)*cj8);
IkReal x877=(sj5*sj6);
IkReal x878=(cj7*r12);
IkReal x879=(r11*sj7);
IkReal x880=((8.0)*sj8);
IkReal x881=(cj7*r11);
IkReal x882=((4.0)*x881);
IkReal x883=((4.0)*x879);
IkReal x884=((16.0)*cj8*r01);
IkReal x885=((8.0)*cj8*r01);
IkReal x886=((16.0)*r11*sj8);
IkReal x887=(x867*x874);
IkReal x888=(x869*x876);
IkReal x889=(x874*x875);
IkReal x890=(x876*x878);
IkReal x891=(r00*x868*x870);
IkReal x892=(r00*x868*x871);
IkReal x893=((12.0)*x870*x873);
IkReal x894=((12.0)*x871*x873);
IkReal x895=(r00*x868*x872);
IkReal x896=(r00*x868*x877);
IkReal x897=((12.0)*x873*x877);
IkReal x898=((12.0)*x872*x873);
IkReal x899=(x890+x898);
IkReal x900=(x894+x893);
IkReal x901=(x883+x889+x896);
IkReal x902=(x887+x892+x891);
j9eval[0]=((((0.5)*(IKabs(((((-1.0)*x882))+(((-1.0)*x888))+x900+x902)))))+(((0.5)*(IKabs(((((-1.0)*x868*x869))+(((-1.0)*x882))+(((4.0)*x870*x873))+(((4.0)*x871*x873))+x902)))))+(IKabs((((x879*x880))+((x870*x885))+(((8.0)*x875))+((x871*x885)))))+(((0.5)*(IKabs(((((-4.0)*x872*x873))+(((-1.0)*x868*x878))+(((-1.0)*x895))+(((4.0)*x873*x877))+x901)))))+(IKabs((((x880*x881))+((x877*x885))+(((-1.0)*x872*x885))+(((-8.0)*x867)))))+(((0.5)*(IKabs(((((-1.0)*x901))+(((-1.0)*x899))+x897+x895)))))+(((0.5)*(IKabs(((((16.0)*sj8*x881))+(((-16.0)*x867))+((x877*x884))+(((-1.0)*x872*x884)))))))+(((0.5)*(IKabs(((((-1.0)*x902))+(((-1.0)*x888))+x882+x900)))))+(((0.5)*(IKabs(((((16.0)*x875))+((x870*x884))+((x871*x884))+(((16.0)*sj8*x879)))))))+(((0.5)*(IKabs(((((-1.0)*x895))+(((-1.0)*x899))+x897+x901))))));
if( IKabs(j9eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j9evalpoly[1];
IkReal x903=(r10*sj7);
IkReal x904=(sj5*sj6);
IkReal x905=(r02*sj8);
IkReal x906=(cj8*r01);
IkReal x907=((4.0)*cj7);
IkReal x908=(cj8*r12);
IkReal x909=(cj8*r00);
IkReal x910=((4.0)*r11*sj7);
IkReal x911=((4.0)*cj5*cj6);
IkReal x912=(cj7*r11*sj8);
IkReal x913=(r10*sj8*x907);
IkReal x914=((12.0)*cj7*x908);
IkReal x915=(x907*x908);
IkReal x916=(cj5*cj6*x906);
IkReal x917=((4.0)*x904*x909);
IkReal x918=(x909*x911);
IkReal x919=((12.0)*x904*x905);
IkReal x920=((12.0)*cj5*cj6*x905);
IkReal x921=((4.0)*x904*x905);
IkReal x922=(x905*x911);
IkReal x923=(x920+x914);
IkReal x924=(x922+x915);
IkReal x925=(x913+x910+x917);
IkReal x926=((((8.0)*x904*x906))+(((-8.0)*x903))+(((-8.0)*x916))+(((8.0)*x912)));
op[0]=((((-1.0)*x924))+(((-1.0)*x918))+x925+x921);
op[1]=x926;
op[2]=((((-1.0)*x923))+(((-1.0)*x918))+x925+x919);
op[3]=((((-16.0)*x903))+(((16.0)*x912))+(((16.0)*x904*x906))+(((-16.0)*x916)));
op[4]=((((-1.0)*x923))+(((-1.0)*x925))+x919+x918);
op[5]=x926;
op[6]=((((-1.0)*x924))+(((-1.0)*x925))+x921+x918);
polyroots6(op,zeror,numroots);
IkReal j9array[6], cj9array[6], sj9array[6], tempj9array[1];
int numsolutions = 0;
for(int ij9 = 0; ij9 < numroots; ++ij9)
{
IkReal htj9 = zeror[ij9];
tempj9array[0]=((2.0)*(atan(htj9)));
for(int kj9 = 0; kj9 < 1; ++kj9)
{
j9array[numsolutions] = tempj9array[kj9];
if( j9array[numsolutions] > IKPI )
{
    j9array[numsolutions]-=IK2PI;
}
else if( j9array[numsolutions] < -IKPI )
{
    j9array[numsolutions]+=IK2PI;
}
sj9array[numsolutions] = IKsin(j9array[numsolutions]);
cj9array[numsolutions] = IKcos(j9array[numsolutions]);
numsolutions++;
}
}
bool j9valid[6]={true,true,true,true,true,true};
_nj9 = 6;
for(int ij9 = 0; ij9 < numsolutions; ++ij9)
    {
if( !j9valid[ij9] )
{
    continue;
}
    j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
htj9 = IKtan(j9/2);

IkReal x927=(cj6*sj5);
IkReal x928=(r02*sj8);
IkReal x929=(cj7*r10);
IkReal x930=(cj8*r01);
IkReal x931=(sj7*sj8);
IkReal x932=(cj5*sj6);
IkReal x933=((4.0)*cj7*r11);
IkReal x934=(cj8*r12*sj7);
IkReal x935=((4.0)*cj8*r00);
IkReal x936=((4.0)*r10*x931);
IkReal x937=((12.0)*x934);
IkReal x938=((4.0)*x934);
IkReal x939=(x930*x932);
IkReal x940=((4.0)*x928*x932);
IkReal x941=(x932*x935);
IkReal x942=(x927*x935);
IkReal x943=((12.0)*x928*x932);
IkReal x944=((12.0)*x927*x928);
IkReal x945=((4.0)*x927*x928);
IkReal x946=(x940+x945);
IkReal x947=(x943+x944);
IkReal x948=(x936+x941+x942);
IkReal x949=((((8.0)*r11*x931))+(((8.0)*x929))+(((8.0)*x939))+(((8.0)*x927*x930)));
j9evalpoly[0]=((((-1.0)*x948))+(((htj9*htj9*htj9)*(((((16.0)*r11*x931))+(((16.0)*x927*x930))+(((16.0)*x939))+(((16.0)*x929))))))+(((htj9*htj9)*(((((-1.0)*x948))+x933+x947+(((-1.0)*x937))))))+(((htj9*htj9*htj9*htj9*htj9*htj9)*((x948+x946+(((-1.0)*x938))+(((-1.0)*x933))))))+(((htj9*htj9*htj9*htj9)*((x948+x947+(((-1.0)*x937))+(((-1.0)*x933))))))+((x949*(htj9*htj9*htj9*htj9*htj9)))+x933+x946+((htj9*x949))+(((-1.0)*x938)));
if( IKabs(j9evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < numsolutions; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x950=(cj8*cj9);
IkReal x951=(cj8*sj9);
if( IKabs((((r01*x951))+((r02*sj8))+(((-1.0)*r00*x950)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x951))+(((-1.0)*r12*sj8))+((r10*x950)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x951))+((r02*sj8))+(((-1.0)*r00*x950))))+IKsqr(((((-1.0)*r11*x951))+(((-1.0)*r12*sj8))+((r10*x950))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r01*x951))+((r02*sj8))+(((-1.0)*r00*x950))), ((((-1.0)*r11*x951))+(((-1.0)*r12*sj8))+((r10*x950))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x952=IKcos(j4);
IkReal x953=IKsin(j4);
IkReal x954=(cj6*sj5);
IkReal x955=(cj8*sj7);
IkReal x956=(cj8*sj9);
IkReal x957=(cj9*r11);
IkReal x958=(cj9*r10);
IkReal x959=((1.0)*cj8);
IkReal x960=(sj5*sj6);
IkReal x961=(cj5*sj6);
IkReal x962=(sj7*sj8);
IkReal x963=(cj7*sj8);
IkReal x964=((0.425)*sj5);
IkReal x965=(cj5*cj6);
IkReal x966=((1.0)*sj9);
IkReal x967=((0.09465)*sj9);
IkReal x968=(cj9*r01);
IkReal x969=(sj7*sj9);
IkReal x970=(cj7*cj8);
IkReal x971=(cj9*r00);
IkReal x972=((1.0)*cj7);
IkReal x973=((1.0)*x961);
IkReal x974=((0.39225)*x953);
IkReal x975=((1.0)*x952);
IkReal x976=(cj7*x966);
IkReal x977=((1.0)*x953);
IkReal x978=((0.39225)*x952);
evalcond[0]=((((-1.0)*x958*x959))+((r11*x956))+((r12*sj8))+x952);
evalcond[1]=(((r01*x956))+((r02*sj8))+(((-1.0)*x959*x971))+(((-1.0)*x977)));
evalcond[2]=(((x952*x964))+((x961*x978))+(((-1.0)*r00*x967))+(((-0.10915)*x953))+(((-1.0)*px))+((x954*x978))+(((-0.09465)*x968)));
evalcond[3]=((((-0.09465)*x957))+(((-1.0)*r10*x967))+((x961*x974))+(((-1.0)*py))+(((0.10915)*x952))+((x954*x974))+((x953*x964)));
evalcond[4]=(((x952*x965))+((sj7*x968))+((x963*x971))+(((-1.0)*r01*x963*x966))+((r00*x969))+((r02*x970))+(((-1.0)*x960*x975)));
evalcond[5]=((((-1.0)*r11*x963*x966))+((sj7*x957))+((r12*x970))+((x958*x963))+((r10*x969))+((x953*x965))+(((-1.0)*x960*x977)));
evalcond[6]=((((-1.0)*r00*x976))+((x962*x971))+(((-1.0)*r01*x962*x966))+((r02*x955))+(((-1.0)*x952*x973))+(((-1.0)*x968*x972))+(((-1.0)*x954*x975)));
evalcond[7]=((((-1.0)*x957*x972))+(((-1.0)*r11*x962*x966))+((r12*x955))+(((-1.0)*x953*x973))+((x958*x962))+(((-1.0)*r10*x976))+(((-1.0)*x954*x977)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[2];
IkReal x979=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x979);
rxp1_0=(pz*r11);
rxp1_1=(r01*x979);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j8eval[0]=r22;
j8eval[1]=sj7;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x980=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x980);
rxp1_0=(pz*r11);
rxp1_1=(r01*x980);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j8eval[0]=cj7;
j8eval[1]=r22;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x981=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x981);
rxp1_0=(pz*r11);
rxp1_1=(r01*x981);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
j8eval[0]=r22;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x982=IKPowWithIntegerCheck(r22,-1);
if(!x982.valid){
continue;
}
cj8array[0]=((-1.0)*(x982.value)*((((sj5*sj6))+(((-1.0)*cj5*cj6)))));
if( cj8array[0] >= -1-IKFAST_SINCOS_THRESH && cj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKacos(cj8array[0]);
    sj8array[0] = IKsin(j8array[0]);
    cj8array[1] = cj8array[0];
    j8array[1] = -j8array[0];
    sj8array[1] = -sj8array[0];
}
else if( isnan(cj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[1];
evalcond[0]=(r22*(IKsin(j8)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9eval[1];
IkReal x983=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x983);
rxp1_0=(pz*r11);
rxp1_1=(r01*x983);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
j9eval[0]=sj8;
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j9array[2], cj9array[2], sj9array[2];
bool j9valid[2]={false};
_nj9 = 2;
CheckValue<IkReal> x985 = IKatan2WithCheck(IkReal((r00*sj8)),IkReal(((-1.0)*r01*sj8)),IKFAST_ATAN2_MAGTHRESH);
if(!x985.valid){
continue;
}
IkReal x984=x985.value;
j9array[0]=((-1.0)*x984);
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
j9array[1]=((3.14159265358979)+(((-1.0)*x984)));
sj9array[1]=IKsin(j9array[1]);
cj9array[1]=IKcos(j9array[1]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
if( j9array[1] > IKPI )
{
    j9array[1]-=IK2PI;
}
else if( j9array[1] < -IKPI )
{    j9array[1]+=IK2PI;
}
j9valid[1] = true;
for(int ij9 = 0; ij9 < 2; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 2; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*r11*sj8*(IKsin(j9))))+((r10*sj8*(IKcos(j9)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x986=(cj8*cj9);
IkReal x987=(cj8*sj9);
if( IKabs((((r01*x987))+(((-1.0)*r00*x986)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x987))+((r10*x986)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x987))+(((-1.0)*r00*x986))))+IKsqr(((((-1.0)*r11*x987))+((r10*x986))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r01*x987))+(((-1.0)*r00*x986))), ((((-1.0)*r11*x987))+((r10*x986))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x988=IKcos(j4);
IkReal x989=IKsin(j4);
CheckValue<IkReal> x1001=IKPowWithIntegerCheck(cj6,-1);
if(!x1001.valid){
continue;
}
IkReal x990=x1001.value;
IkReal x991=(cj9*r11);
IkReal x992=(r00*sj9);
IkReal x993=(cj8*sj9);
IkReal x994=(cj9*r01);
IkReal x995=(r10*sj9);
IkReal x996=((1.0)*cj8*cj9);
IkReal x997=((1.0)*sj5*sj6);
IkReal x998=(cj5*x988);
IkReal x999=((0.425)*sj6*x990);
IkReal x1000=(cj5*x989);
evalcond[0]=((((-1.0)*r10*x996))+x988+((r11*x993)));
evalcond[1]=((((-1.0)*x989))+((r01*x993))+(((-1.0)*r00*x996)));
evalcond[2]=(((cj6*x998))+x992+x994+(((-1.0)*x988*x997)));
evalcond[3]=(((cj6*x1000))+(((-1.0)*x989*x997))+x991+x995);
evalcond[4]=((((-0.10915)*x989))+(((-1.0)*px))+(((-0.09465)*x994))+(((-0.09465)*x992))+(((-1.0)*x998*x999)));
evalcond[5]=((((-1.0)*py))+(((0.10915)*x988))+(((-1.0)*x1000*x999))+(((-0.09465)*x995))+(((-0.09465)*x991)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x1002=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1002);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1002);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
j8eval[0]=r22;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x1003=IKPowWithIntegerCheck(r22,-1);
if(!x1003.valid){
continue;
}
cj8array[0]=((x1003.value)*((((sj5*sj6))+(((-1.0)*cj5*cj6)))));
if( cj8array[0] >= -1-IKFAST_SINCOS_THRESH && cj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKacos(cj8array[0]);
    sj8array[0] = IKsin(j8array[0]);
    cj8array[1] = cj8array[0];
    j8array[1] = -j8array[0];
    sj8array[1] = -sj8array[0];
}
else if( isnan(cj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[1];
evalcond[0]=(r22*(IKsin(j8)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9eval[1];
IkReal x1004=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1004);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1004);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
j9eval[0]=sj8;
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j9array[2], cj9array[2], sj9array[2];
bool j9valid[2]={false};
_nj9 = 2;
CheckValue<IkReal> x1006 = IKatan2WithCheck(IkReal(((-1.0)*r00*sj8)),IkReal((r01*sj8)),IKFAST_ATAN2_MAGTHRESH);
if(!x1006.valid){
continue;
}
IkReal x1005=x1006.value;
j9array[0]=((-1.0)*x1005);
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
j9array[1]=((3.14159265358979)+(((-1.0)*x1005)));
sj9array[1]=IKsin(j9array[1]);
cj9array[1]=IKcos(j9array[1]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
if( j9array[1] > IKPI )
{
    j9array[1]-=IK2PI;
}
else if( j9array[1] < -IKPI )
{    j9array[1]+=IK2PI;
}
j9valid[1] = true;
for(int ij9 = 0; ij9 < 2; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 2; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*r10*sj8*(IKcos(j9))))+((r11*sj8*(IKsin(j9)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1007=(cj8*cj9);
IkReal x1008=(cj8*sj9);
if( IKabs((((r01*x1008))+(((-1.0)*r00*x1007)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1008))+((r10*x1007)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1008))+(((-1.0)*r00*x1007))))+IKsqr(((((-1.0)*r11*x1008))+((r10*x1007))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r01*x1008))+(((-1.0)*r00*x1007))), ((((-1.0)*r11*x1008))+((r10*x1007))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1009=IKcos(j4);
IkReal x1010=IKsin(j4);
CheckValue<IkReal> x1021=IKPowWithIntegerCheck(cj6,-1);
if(!x1021.valid){
continue;
}
IkReal x1011=x1021.value;
IkReal x1012=(cj8*sj9);
IkReal x1013=((0.09465)*cj9);
IkReal x1014=((1.0)*cj9);
IkReal x1015=(r00*sj9);
IkReal x1016=(r10*sj9);
IkReal x1017=((1.0)*sj5*sj6);
IkReal x1018=(cj5*x1009);
IkReal x1019=((0.425)*sj6*x1011);
IkReal x1020=(cj5*x1010);
evalcond[0]=(x1009+(((-1.0)*cj8*r10*x1014))+((r11*x1012)));
evalcond[1]=((((-1.0)*cj8*r00*x1014))+((r01*x1012))+(((-1.0)*x1010)));
evalcond[2]=(((cj6*x1018))+(((-1.0)*x1009*x1017))+(((-1.0)*r01*x1014))+(((-1.0)*x1015)));
evalcond[3]=((((-1.0)*x1010*x1017))+(((-1.0)*r11*x1014))+((cj6*x1020))+(((-1.0)*x1016)));
evalcond[4]=((((-1.0)*x1018*x1019))+(((-0.10915)*x1010))+(((-1.0)*px))+(((-0.09465)*x1015))+(((-1.0)*r01*x1013)));
evalcond[5]=((((0.10915)*x1009))+(((-1.0)*x1019*x1020))+(((-1.0)*py))+(((-0.09465)*x1016))+(((-1.0)*r11*x1013)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x1022=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1022);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1022);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj7=0;
cj7=1.0;
j7=0;
j8eval[0]=r22;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x1023=IKPowWithIntegerCheck(r22,-1);
if(!x1023.valid){
continue;
}
cj8array[0]=((-1.0)*(x1023.value)*(((((-1.0)*cj5*sj6))+(((-1.0)*cj6*sj5)))));
if( cj8array[0] >= -1-IKFAST_SINCOS_THRESH && cj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKacos(cj8array[0]);
    sj8array[0] = IKsin(j8array[0]);
    cj8array[1] = cj8array[0];
    j8array[1] = -j8array[0];
    sj8array[1] = -sj8array[0];
}
else if( isnan(cj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[1];
evalcond[0]=(r22*(IKsin(j8)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9eval[1];
IkReal x1024=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1024);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1024);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj7=0;
cj7=1.0;
j7=0;
j9eval[0]=sj8;
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j9array[2], cj9array[2], sj9array[2];
bool j9valid[2]={false};
_nj9 = 2;
CheckValue<IkReal> x1026 = IKatan2WithCheck(IkReal((r00*sj8)),IkReal(((-1.0)*r01*sj8)),IKFAST_ATAN2_MAGTHRESH);
if(!x1026.valid){
continue;
}
IkReal x1025=x1026.value;
j9array[0]=((-1.0)*x1025);
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
j9array[1]=((3.14159265358979)+(((-1.0)*x1025)));
sj9array[1]=IKsin(j9array[1]);
cj9array[1]=IKcos(j9array[1]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
if( j9array[1] > IKPI )
{
    j9array[1]-=IK2PI;
}
else if( j9array[1] < -IKPI )
{    j9array[1]+=IK2PI;
}
j9valid[1] = true;
for(int ij9 = 0; ij9 < 2; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 2; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*r11*sj8*(IKsin(j9))))+((r10*sj8*(IKcos(j9)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1027=(cj8*cj9);
IkReal x1028=(cj8*sj9);
if( IKabs((((r01*x1028))+(((-1.0)*r00*x1027)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1028))+((r10*x1027)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1028))+(((-1.0)*r00*x1027))))+IKsqr(((((-1.0)*r11*x1028))+((r10*x1027))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r01*x1028))+(((-1.0)*r00*x1027))), ((((-1.0)*r11*x1028))+((r10*x1027))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1029=IKcos(j4);
IkReal x1030=IKsin(j4);
IkReal x1031=(cj5*sj6);
IkReal x1032=(cj8*sj9);
IkReal x1033=((0.09465)*cj9);
IkReal x1034=((1.0)*cj9);
IkReal x1035=(r00*sj9);
IkReal x1036=((0.425)*sj5);
IkReal x1037=(cj6*sj5);
IkReal x1038=(r10*sj9);
IkReal x1039=((1.0)*x1029);
IkReal x1040=((1.0)*x1030);
IkReal x1041=((0.39225)*x1029);
IkReal x1042=(x1030*x1037);
evalcond[0]=(x1029+((r11*x1032))+(((-1.0)*cj8*r10*x1034)));
evalcond[1]=((((-1.0)*x1040))+((r01*x1032))+(((-1.0)*cj8*r00*x1034)));
evalcond[2]=((((-1.0)*x1037*x1039))+(((-1.0)*x1035))+(((-1.0)*x1031*x1039))+(((-1.0)*r01*x1034)));
evalcond[3]=((((-1.0)*x1031*x1040))+(((-1.0)*x1038))+(((-1.0)*x1037*x1040))+(((-1.0)*r11*x1034)));
evalcond[4]=(((x1037*x1041))+(((-0.10915)*x1030))+((x1031*x1041))+(((-1.0)*px))+((x1029*x1036))+(((-0.09465)*x1035))+(((-1.0)*r01*x1033)));
evalcond[5]=((((0.39225)*x1030*x1031))+((x1030*x1036))+(((0.10915)*x1029))+(((-1.0)*py))+(((-1.0)*r11*x1033))+(((0.39225)*x1042))+(((-0.09465)*x1038)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x1043=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1043);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1043);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
j8eval[0]=r22;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x1044=IKPowWithIntegerCheck(r22,-1);
if(!x1044.valid){
continue;
}
cj8array[0]=((x1044.value)*(((((-1.0)*cj5*sj6))+(((-1.0)*cj6*sj5)))));
if( cj8array[0] >= -1-IKFAST_SINCOS_THRESH && cj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKacos(cj8array[0]);
    sj8array[0] = IKsin(j8array[0]);
    cj8array[1] = cj8array[0];
    j8array[1] = -j8array[0];
    sj8array[1] = -sj8array[0];
}
else if( isnan(cj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[1];
evalcond[0]=(r22*(IKsin(j8)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9eval[1];
IkReal x1045=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1045);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1045);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
j9eval[0]=sj8;
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j9array[2], cj9array[2], sj9array[2];
bool j9valid[2]={false};
_nj9 = 2;
CheckValue<IkReal> x1047 = IKatan2WithCheck(IkReal(((-1.0)*r00*sj8)),IkReal((r01*sj8)),IKFAST_ATAN2_MAGTHRESH);
if(!x1047.valid){
continue;
}
IkReal x1046=x1047.value;
j9array[0]=((-1.0)*x1046);
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
j9array[1]=((3.14159265358979)+(((-1.0)*x1046)));
sj9array[1]=IKsin(j9array[1]);
cj9array[1]=IKcos(j9array[1]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
if( j9array[1] > IKPI )
{
    j9array[1]-=IK2PI;
}
else if( j9array[1] < -IKPI )
{    j9array[1]+=IK2PI;
}
j9valid[1] = true;
for(int ij9 = 0; ij9 < 2; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 2; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*r10*sj8*(IKcos(j9))))+((r11*sj8*(IKsin(j9)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1048=(cj8*cj9);
IkReal x1049=(cj8*sj9);
if( IKabs((((r01*x1049))+(((-1.0)*r00*x1048)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1049))+((r10*x1048)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1049))+(((-1.0)*r00*x1048))))+IKsqr(((((-1.0)*r11*x1049))+((r10*x1048))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r01*x1049))+(((-1.0)*r00*x1048))), ((((-1.0)*r11*x1049))+((r10*x1048))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1050=IKcos(j4);
IkReal x1051=IKsin(j4);
IkReal x1052=(cj5*sj6);
IkReal x1053=(cj9*r11);
IkReal x1054=(r00*sj9);
IkReal x1055=(cj8*sj9);
IkReal x1056=((0.425)*sj5);
IkReal x1057=(cj9*r01);
IkReal x1058=(cj6*sj5);
IkReal x1059=(r10*sj9);
IkReal x1060=((1.0)*x1050);
IkReal x1061=((1.0)*cj8*cj9);
IkReal x1062=((1.0)*x1051);
IkReal x1063=((0.39225)*x1050);
IkReal x1064=(x1051*x1058);
evalcond[0]=(((r11*x1055))+x1050+(((-1.0)*r10*x1061)));
evalcond[1]=((((-1.0)*r00*x1061))+((r01*x1055))+(((-1.0)*x1062)));
evalcond[2]=(x1054+x1057+(((-1.0)*x1058*x1060))+(((-1.0)*x1052*x1060)));
evalcond[3]=(x1053+x1059+(((-1.0)*x1058*x1062))+(((-1.0)*x1052*x1062)));
evalcond[4]=((((-0.09465)*x1054))+(((-0.09465)*x1057))+((x1050*x1056))+(((-1.0)*px))+(((-0.10915)*x1051))+((x1052*x1063))+((x1058*x1063)));
evalcond[5]=((((-0.09465)*x1053))+(((-0.09465)*x1059))+(((-1.0)*py))+((x1051*x1056))+(((0.39225)*x1064))+(((0.39225)*x1051*x1052))+(((0.10915)*x1050)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4, j8, j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x1065=IKPowWithIntegerCheck(cj7,-1);
if(!x1065.valid){
continue;
}
CheckValue<IkReal> x1066=IKPowWithIntegerCheck(r22,-1);
if(!x1066.valid){
continue;
}
cj8array[0]=((-1.0)*(x1065.value)*(x1066.value)*(((((-1.0)*cj5*sj6))+(((-1.0)*cj6*sj5)))));
if( cj8array[0] >= -1-IKFAST_SINCOS_THRESH && cj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKacos(cj8array[0]);
    sj8array[0] = IKsin(j8array[0]);
    cj8array[1] = cj8array[0];
    j8array[1] = -j8array[0];
    sj8array[1] = -sj8array[0];
}
else if( isnan(cj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[2];
evalcond[0]=(r22*(IKsin(j8)));
evalcond[1]=(((sj5*sj6))+(((-1.0)*cj5*cj6))+((r22*sj7*(IKcos(j8)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9eval[1];
IkReal x1067=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1067);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1067);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x1068=((0.3786)*r01);
IkReal x1069=((12.0)*px);
IkReal x1070=((12.0)*py);
IkReal x1071=((0.3786)*r11);
IkReal x1072=((0.4366)*cj8);
IkReal x1073=(cj8*sj5);
IkReal x1074=((1.569)*r10);
IkReal x1075=(cj8*r11);
IkReal x1076=(cj6*r11);
IkReal x1077=(cj8*r01);
IkReal x1078=((1.569)*r00);
IkReal x1079=(cj6*r01);
IkReal x1080=(cj5*sj6);
IkReal x1081=(r00*x1072);
IkReal x1082=(r10*x1072);
IkReal x1083=(cj8*x1080);
IkReal x1084=((1.7)*r10*x1073);
IkReal x1085=((1.7)*r00*x1073);
IkReal x1086=(x1077*x1080);
IkReal x1087=(cj6*x1073*x1074);
IkReal x1088=(x1074*x1083);
IkReal x1089=(x1078*x1083);
IkReal x1090=(cj6*x1073*x1078);
IkReal x1091=(x1071+x1090+x1085+x1089);
IkReal x1092=(x1087+x1084+x1081+x1088);
j9eval[0]=((IKabs(((((3.138)*x1073*x1079))+(((3.4)*r01*x1073))+(((3.138)*x1086))+(((-0.7572)*r10))+(((-0.8732)*x1075)))))+(((0.5)*(IKabs(((((-6.8)*r11*x1073))+(((-1.7464)*x1077))+(((-1.5144)*r00))+(((-6.276)*x1073*x1076))+(((-6.276)*x1075*x1080)))))))+(((0.5)*(IKabs((x1092+(((-1.0)*x1069))+(((-1.0)*x1068)))))))+(((0.5)*(IKabs(((((6.276)*x1086))+(((-1.7464)*x1075))+(((6.276)*x1073*x1079))+(((-1.5144)*r10))+(((6.8)*r01*x1073)))))))+(((0.5)*(IKabs((x1068+(((-1.0)*x1092))+(((-4.0)*px)))))))+(((0.5)*(IKabs((x1091+(((-1.0)*x1082))+(((-1.0)*x1070)))))))+(((0.5)*(IKabs((x1091+(((-4.0)*py))+(((-1.0)*x1082)))))))+(((0.5)*(IKabs((x1082+(((-1.0)*x1091))+(((-1.0)*x1070)))))))+(IKabs(((((-3.4)*r11*x1073))+(((-3.138)*x1073*x1076))+(((-0.7572)*r00))+(((-0.8732)*x1077))+(((-3.138)*x1075*x1080)))))+(((0.5)*(IKabs((x1068+(((-1.0)*x1092))+(((-1.0)*x1069))))))));
if( IKabs(j9eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j4, j9]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j9evalpoly[1];
IkReal x1093=((12.0)*py);
IkReal x1094=((0.3786)*r11);
IkReal x1095=((4.0)*py);
IkReal x1096=(cj8*r11);
IkReal x1097=(cj8*sj5);
IkReal x1098=(cj6*r01);
IkReal x1099=((1.569)*r00);
IkReal x1100=((0.4366)*cj8*r10);
IkReal x1101=((1.7)*r00*x1097);
IkReal x1102=(cj5*cj8*r01*sj6);
IkReal x1103=(cj5*cj8*sj6*x1099);
IkReal x1104=(cj6*x1097*x1099);
IkReal x1105=(x1104+x1103+x1101+x1094);
IkReal x1106=((((3.4)*r01*x1097))+(((-0.8732)*x1096))+(((3.138)*x1102))+(((3.138)*x1097*x1098))+(((-0.7572)*r10)));
op[0]=(x1105+(((-1.0)*x1095))+(((-1.0)*x1100)));
op[1]=x1106;
op[2]=(x1105+(((-1.0)*x1093))+(((-1.0)*x1100)));
op[3]=((((-1.7464)*x1096))+(((6.276)*x1102))+(((6.8)*r01*x1097))+(((6.276)*x1097*x1098))+(((-1.5144)*r10)));
op[4]=(x1100+(((-1.0)*x1093))+(((-1.0)*x1105)));
op[5]=x1106;
op[6]=(x1100+(((-1.0)*x1095))+(((-1.0)*x1105)));
polyroots6(op,zeror,numroots);
IkReal j9array[6], cj9array[6], sj9array[6], tempj9array[1];
int numsolutions = 0;
for(int ij9 = 0; ij9 < numroots; ++ij9)
{
IkReal htj9 = zeror[ij9];
tempj9array[0]=((2.0)*(atan(htj9)));
for(int kj9 = 0; kj9 < 1; ++kj9)
{
j9array[numsolutions] = tempj9array[kj9];
if( j9array[numsolutions] > IKPI )
{
    j9array[numsolutions]-=IK2PI;
}
else if( j9array[numsolutions] < -IKPI )
{
    j9array[numsolutions]+=IK2PI;
}
sj9array[numsolutions] = IKsin(j9array[numsolutions]);
cj9array[numsolutions] = IKcos(j9array[numsolutions]);
numsolutions++;
}
}
bool j9valid[6]={true,true,true,true,true,true};
_nj9 = 6;
for(int ij9 = 0; ij9 < numsolutions; ++ij9)
    {
if( !j9valid[ij9] )
{
    continue;
}
    j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
htj9 = IKtan(j9/2);

IkReal x1107=((0.3786)*r01);
IkReal x1108=((12.0)*px);
IkReal x1109=((4.0)*px);
IkReal x1110=((3.138)*r11);
IkReal x1111=((1.569)*r10);
IkReal x1112=(cj8*sj5);
IkReal x1113=(cj8*r01);
IkReal x1114=((6.276)*r11);
IkReal x1115=((0.4366)*cj8*r00);
IkReal x1116=(cj6*x1112);
IkReal x1117=(cj5*cj8*sj6);
IkReal x1118=((1.7)*r10*x1112);
IkReal x1119=(x1111*x1116);
IkReal x1120=(x1111*x1117);
IkReal x1121=(x1115+x1119+x1118+x1120);
IkReal x1122=((((-0.8732)*x1113))+(((-3.4)*r11*x1112))+(((-0.7572)*r00))+(((-1.0)*x1110*x1117))+(((-1.0)*x1110*x1116)));
j9evalpoly[0]=(x1121+(((htj9*htj9*htj9*htj9*htj9*htj9)*((x1107+(((-1.0)*x1121))+(((-1.0)*x1109))))))+(((htj9*htj9)*((x1121+(((-1.0)*x1107))+(((-1.0)*x1108))))))+((x1122*(htj9*htj9*htj9*htj9*htj9)))+((htj9*x1122))+(((-1.0)*x1107))+(((-1.0)*x1109))+(((htj9*htj9*htj9)*(((((-1.0)*x1114*x1116))+(((-1.0)*x1114*x1117))+(((-6.8)*r11*x1112))+(((-1.7464)*x1113))+(((-1.5144)*r00))))))+(((htj9*htj9*htj9*htj9)*((x1107+(((-1.0)*x1121))+(((-1.0)*x1108)))))));
if( IKabs(j9evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < numsolutions; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1123=(cj8*cj9);
IkReal x1124=(cj8*sj9);
if( IKabs((((r01*x1124))+(((-1.0)*r00*x1123)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1124))+((r10*x1123)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1124))+(((-1.0)*r00*x1123))))+IKsqr(((((-1.0)*r11*x1124))+((r10*x1123))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r01*x1124))+(((-1.0)*r00*x1123))), ((((-1.0)*r11*x1124))+((r10*x1123))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x1125=IKcos(j4);
IkReal x1126=IKsin(j4);
IkReal x1127=(cj8*sj9);
IkReal x1128=(cj9*r11);
IkReal x1129=(cj9*r10);
IkReal x1130=((1.0)*cj8);
IkReal x1131=(sj7*sj8);
IkReal x1132=(cj7*sj8);
IkReal x1133=((1.0)*sj9);
IkReal x1134=((0.09465)*sj9);
IkReal x1135=(cj9*r01);
IkReal x1136=(sj7*sj9);
IkReal x1137=(cj9*r00);
IkReal x1138=((1.0)*cj7);
IkReal x1139=(cj7*x1133);
IkReal x1140=(sj5*x1126);
IkReal x1141=(cj6*x1125);
IkReal x1142=(cj5*sj6*x1126);
IkReal x1143=((1.0)*sj6*x1125);
IkReal x1144=(cj6*x1140);
evalcond[0]=(x1125+((r11*x1127))+(((-1.0)*x1129*x1130)));
evalcond[1]=(((r01*x1127))+(((-1.0)*x1130*x1137))+(((-1.0)*x1126)));
evalcond[2]=((((-1.0)*r01*x1132*x1133))+((r00*x1136))+(((-1.0)*sj5*x1143))+((sj7*x1135))+((cj5*x1141))+((x1132*x1137)));
evalcond[3]=(((r10*x1136))+((x1129*x1132))+(((-1.0)*sj6*x1140))+((cj5*cj6*x1126))+(((-1.0)*r11*x1132*x1133))+((sj7*x1128)));
evalcond[4]=((((-1.0)*sj5*x1141))+((x1131*x1137))+(((-1.0)*cj5*x1143))+(((-1.0)*x1135*x1138))+(((-1.0)*r00*x1139))+(((-1.0)*r01*x1131*x1133)));
evalcond[5]=(((x1129*x1131))+(((-1.0)*r10*x1139))+(((-1.0)*r11*x1131*x1133))+(((-1.0)*x1144))+(((-1.0)*x1142))+(((-1.0)*x1128*x1138)));
evalcond[6]=((((-0.09465)*x1135))+(((0.39225)*cj5*sj6*x1125))+(((-0.10915)*x1126))+(((-1.0)*px))+(((0.39225)*sj5*x1141))+(((0.425)*sj5*x1125))+(((-1.0)*r00*x1134)));
evalcond[7]=((((0.10915)*x1125))+(((-1.0)*r10*x1134))+(((0.425)*x1140))+(((-1.0)*py))+(((0.39225)*x1144))+(((0.39225)*x1142))+(((-0.09465)*x1128)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x1145=IKPowWithIntegerCheck(r22,-1);
if(!x1145.valid){
continue;
}
CheckValue<IkReal> x1146=IKPowWithIntegerCheck(sj7,-1);
if(!x1146.valid){
continue;
}
cj8array[0]=((-1.0)*(x1145.value)*(x1146.value)*((((sj5*sj6))+(((-1.0)*cj5*cj6)))));
if( cj8array[0] >= -1-IKFAST_SINCOS_THRESH && cj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKacos(cj8array[0]);
    sj8array[0] = IKsin(j8array[0]);
    cj8array[1] = cj8array[0];
    j8array[1] = -j8array[0];
    sj8array[1] = -sj8array[0];
}
else if( isnan(cj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[2];
evalcond[0]=(r22*(IKsin(j8)));
evalcond[1]=((((-1.0)*cj5*sj6))+((cj7*r22*(IKcos(j8))))+(((-1.0)*cj6*sj5)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9eval[1];
IkReal x1147=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1147);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1147);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x1148=((0.3786)*r01);
IkReal x1149=((12.0)*px);
IkReal x1150=((12.0)*py);
IkReal x1151=((0.3786)*r11);
IkReal x1152=((0.4366)*cj8);
IkReal x1153=(cj8*sj5);
IkReal x1154=((1.569)*r10);
IkReal x1155=(cj8*r11);
IkReal x1156=(cj6*r11);
IkReal x1157=(cj8*r01);
IkReal x1158=((1.569)*r00);
IkReal x1159=(cj6*r01);
IkReal x1160=(cj5*sj6);
IkReal x1161=(r00*x1152);
IkReal x1162=(r10*x1152);
IkReal x1163=(cj8*x1160);
IkReal x1164=((1.7)*r10*x1153);
IkReal x1165=((1.7)*r00*x1153);
IkReal x1166=(x1157*x1160);
IkReal x1167=(cj6*x1153*x1154);
IkReal x1168=(x1154*x1163);
IkReal x1169=(x1158*x1163);
IkReal x1170=(cj6*x1153*x1158);
IkReal x1171=(x1151+x1165+x1169+x1170);
IkReal x1172=(x1164+x1167+x1161+x1168);
j9eval[0]=((((0.5)*(IKabs((x1162+(((-1.0)*x1150))+(((-1.0)*x1171)))))))+(((0.5)*(IKabs((x1171+(((-1.0)*x1150))+(((-1.0)*x1162)))))))+(IKabs(((((-0.8732)*x1157))+(((-3.138)*x1153*x1156))+(((-0.7572)*r00))+(((-3.138)*x1155*x1160))+(((-3.4)*r11*x1153)))))+(((0.5)*(IKabs((x1172+(((-1.0)*x1149))+(((-1.0)*x1148)))))))+(IKabs(((((3.138)*x1153*x1159))+(((3.4)*r01*x1153))+(((-0.8732)*x1155))+(((3.138)*x1166))+(((-0.7572)*r10)))))+(((0.5)*(IKabs((x1148+(((-1.0)*x1149))+(((-1.0)*x1172)))))))+(((0.5)*(IKabs((x1148+(((-1.0)*x1172))+(((-4.0)*px)))))))+(((0.5)*(IKabs(((((-6.276)*x1155*x1160))+(((-6.276)*x1153*x1156))+(((-1.5144)*r00))+(((-6.8)*r11*x1153))+(((-1.7464)*x1157)))))))+(((0.5)*(IKabs(((((6.8)*r01*x1153))+(((6.276)*x1166))+(((-1.5144)*r10))+(((-1.7464)*x1155))+(((6.276)*x1153*x1159)))))))+(((0.5)*(IKabs((x1171+(((-1.0)*x1162))+(((-4.0)*py))))))));
if( IKabs(j9eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j4, j9]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j9evalpoly[1];
IkReal x1173=((12.0)*py);
IkReal x1174=((0.3786)*r11);
IkReal x1175=((4.0)*py);
IkReal x1176=(cj8*r11);
IkReal x1177=(cj8*sj5);
IkReal x1178=(cj6*r01);
IkReal x1179=((1.569)*r00);
IkReal x1180=((0.4366)*cj8*r10);
IkReal x1181=((1.7)*r00*x1177);
IkReal x1182=(cj5*cj8*r01*sj6);
IkReal x1183=(cj5*cj8*sj6*x1179);
IkReal x1184=(cj6*x1177*x1179);
IkReal x1185=(x1184+x1183+x1181+x1174);
IkReal x1186=((((-0.8732)*x1176))+(((3.138)*x1177*x1178))+(((-0.7572)*r10))+(((3.4)*r01*x1177))+(((3.138)*x1182)));
op[0]=(x1185+(((-1.0)*x1180))+(((-1.0)*x1175)));
op[1]=x1186;
op[2]=(x1185+(((-1.0)*x1180))+(((-1.0)*x1173)));
op[3]=((((6.276)*x1177*x1178))+(((6.8)*r01*x1177))+(((-1.7464)*x1176))+(((-1.5144)*r10))+(((6.276)*x1182)));
op[4]=(x1180+(((-1.0)*x1185))+(((-1.0)*x1173)));
op[5]=x1186;
op[6]=(x1180+(((-1.0)*x1185))+(((-1.0)*x1175)));
polyroots6(op,zeror,numroots);
IkReal j9array[6], cj9array[6], sj9array[6], tempj9array[1];
int numsolutions = 0;
for(int ij9 = 0; ij9 < numroots; ++ij9)
{
IkReal htj9 = zeror[ij9];
tempj9array[0]=((2.0)*(atan(htj9)));
for(int kj9 = 0; kj9 < 1; ++kj9)
{
j9array[numsolutions] = tempj9array[kj9];
if( j9array[numsolutions] > IKPI )
{
    j9array[numsolutions]-=IK2PI;
}
else if( j9array[numsolutions] < -IKPI )
{
    j9array[numsolutions]+=IK2PI;
}
sj9array[numsolutions] = IKsin(j9array[numsolutions]);
cj9array[numsolutions] = IKcos(j9array[numsolutions]);
numsolutions++;
}
}
bool j9valid[6]={true,true,true,true,true,true};
_nj9 = 6;
for(int ij9 = 0; ij9 < numsolutions; ++ij9)
    {
if( !j9valid[ij9] )
{
    continue;
}
    j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
htj9 = IKtan(j9/2);

IkReal x1187=((0.3786)*r01);
IkReal x1188=((12.0)*px);
IkReal x1189=((4.0)*px);
IkReal x1190=((3.138)*r11);
IkReal x1191=((1.569)*r10);
IkReal x1192=(cj8*sj5);
IkReal x1193=(cj8*r01);
IkReal x1194=((6.276)*r11);
IkReal x1195=((0.4366)*cj8*r00);
IkReal x1196=(cj6*x1192);
IkReal x1197=(cj5*cj8*sj6);
IkReal x1198=((1.7)*r10*x1192);
IkReal x1199=(x1191*x1196);
IkReal x1200=(x1191*x1197);
IkReal x1201=(x1199+x1198+x1195+x1200);
IkReal x1202=((((-1.0)*x1190*x1196))+(((-1.0)*x1190*x1197))+(((-3.4)*r11*x1192))+(((-0.8732)*x1193))+(((-0.7572)*r00)));
j9evalpoly[0]=((((htj9*htj9*htj9*htj9)*((x1187+(((-1.0)*x1188))+(((-1.0)*x1201))))))+x1201+(((-1.0)*x1189))+(((-1.0)*x1187))+(((htj9*htj9*htj9)*(((((-1.7464)*x1193))+(((-6.8)*r11*x1192))+(((-1.0)*x1194*x1196))+(((-1.0)*x1194*x1197))+(((-1.5144)*r00))))))+((x1202*(htj9*htj9*htj9*htj9*htj9)))+((htj9*x1202))+(((htj9*htj9)*((x1201+(((-1.0)*x1188))+(((-1.0)*x1187))))))+(((htj9*htj9*htj9*htj9*htj9*htj9)*((x1187+(((-1.0)*x1189))+(((-1.0)*x1201)))))));
if( IKabs(j9evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < numsolutions; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1203=(cj8*cj9);
IkReal x1204=(cj8*sj9);
if( IKabs(((((-1.0)*r00*x1203))+((r01*x1204)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1203))+(((-1.0)*r11*x1204)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1203))+((r01*x1204))))+IKsqr((((r10*x1203))+(((-1.0)*r11*x1204))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r00*x1203))+((r01*x1204))), (((r10*x1203))+(((-1.0)*r11*x1204))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x1205=IKcos(j4);
IkReal x1206=IKsin(j4);
IkReal x1207=(cj8*sj9);
IkReal x1208=(cj9*r11);
IkReal x1209=(cj9*r10);
IkReal x1210=((1.0)*cj8);
IkReal x1211=(sj7*sj8);
IkReal x1212=(cj7*sj8);
IkReal x1213=((1.0)*sj9);
IkReal x1214=((0.09465)*sj9);
IkReal x1215=(cj9*r01);
IkReal x1216=(sj7*sj9);
IkReal x1217=(cj9*r00);
IkReal x1218=((1.0)*cj7);
IkReal x1219=(cj7*x1213);
IkReal x1220=(sj5*x1206);
IkReal x1221=(cj6*x1205);
IkReal x1222=(cj5*sj6*x1206);
IkReal x1223=((1.0)*sj6*x1205);
IkReal x1224=(cj6*x1220);
evalcond[0]=(x1205+(((-1.0)*x1209*x1210))+((r11*x1207)));
evalcond[1]=((((-1.0)*x1210*x1217))+(((-1.0)*x1206))+((r01*x1207)));
evalcond[2]=(((x1212*x1217))+((r00*x1216))+((cj5*x1221))+(((-1.0)*sj5*x1223))+(((-1.0)*r01*x1212*x1213))+((sj7*x1215)));
evalcond[3]=((((-1.0)*sj6*x1220))+((r10*x1216))+((cj5*cj6*x1206))+((sj7*x1208))+(((-1.0)*r11*x1212*x1213))+((x1209*x1212)));
evalcond[4]=((((-1.0)*r01*x1211*x1213))+(((-1.0)*x1215*x1218))+(((-1.0)*sj5*x1221))+(((-1.0)*cj5*x1223))+(((-1.0)*r00*x1219))+((x1211*x1217)));
evalcond[5]=((((-1.0)*x1208*x1218))+(((-1.0)*x1222))+(((-1.0)*x1224))+(((-1.0)*r11*x1211*x1213))+(((-1.0)*r10*x1219))+((x1209*x1211)));
evalcond[6]=((((-0.09465)*x1215))+(((-0.10915)*x1206))+(((-1.0)*r00*x1214))+(((-1.0)*px))+(((0.39225)*cj5*sj6*x1205))+(((0.39225)*sj5*x1221))+(((0.425)*sj5*x1205)));
evalcond[7]=((((0.10915)*x1205))+(((-1.0)*py))+(((0.425)*x1220))+(((0.39225)*x1224))+(((0.39225)*x1222))+(((-1.0)*r10*x1214))+(((-0.09465)*x1208)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4, j8, j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j9array[2], cj9array[2], sj9array[2];
bool j9valid[2]={false};
_nj9 = 2;
CheckValue<IkReal> x1227 = IKatan2WithCheck(IkReal(((-0.09465)*r21)),IkReal(((-0.09465)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1227.valid){
continue;
}
IkReal x1225=((1.0)*(x1227.value));
if((((((0.0089586225)*(r21*r21)))+(((0.0089586225)*(r20*r20))))) < -0.00001)
continue;
CheckValue<IkReal> x1228=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.0089586225)*(r21*r21)))+(((0.0089586225)*(r20*r20)))))),-1);
if(!x1228.valid){
continue;
}
if( (((x1228.value)*(((((-0.39225)*sj5*sj6))+(((0.39225)*cj5*cj6))+(((0.425)*cj5))+(((-1.0)*pz)))))) < -1-IKFAST_SINCOS_THRESH || (((x1228.value)*(((((-0.39225)*sj5*sj6))+(((0.39225)*cj5*cj6))+(((0.425)*cj5))+(((-1.0)*pz)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1226=IKasin(((x1228.value)*(((((-0.39225)*sj5*sj6))+(((0.39225)*cj5*cj6))+(((0.425)*cj5))+(((-1.0)*pz))))));
j9array[0]=((((-1.0)*x1226))+(((-1.0)*x1225)));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
j9array[1]=((3.14159265358979)+x1226+(((-1.0)*x1225)));
sj9array[1]=IKsin(j9array[1]);
cj9array[1]=IKcos(j9array[1]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
if( j9array[1] > IKPI )
{
    j9array[1]-=IK2PI;
}
else if( j9array[1] < -IKPI )
{    j9array[1]+=IK2PI;
}
j9valid[1] = true;
for(int ij9 = 0; ij9 < 2; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 2; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];

{
IkReal j8eval[2];
IkReal x1229=cj9*cj9;
IkReal x1230=r21*r21;
IkReal x1231=(cj7*x1230);
IkReal x1232=(x1231+((cj7*x1229*(r20*r20)))+((cj7*(r22*r22)))+(((-2.0)*cj7*cj9*r20*r21*sj9))+(((-1.0)*x1229*x1231)));
j8eval[0]=x1232;
j8eval[1]=IKsign(x1232);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x1233=cj9*cj9;
IkReal x1234=r21*r21;
IkReal x1235=(sj7*x1234);
IkReal x1236=((((-2.0)*cj9*r20*r21*sj7*sj9))+x1235+(((-1.0)*x1233*x1235))+((sj7*(r22*r22)))+((sj7*x1233*(r20*r20))));
j8eval[0]=x1236;
j8eval[1]=IKsign(x1236);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1237=cj5*cj5;
IkReal x1238=cj6*cj6;
IkReal x1239=((133365000.0)*cj6);
IkReal x1240=((12.4570625281677)*cj6);
IkReal x1241=(cj5*sj5*sj6);
IkReal x1242=(x1237*x1238);
j4eval[0]=((7.19369221392727)+(((11.4971359451148)*cj6*x1241))+(((-1.0)*x1237))+x1240+(((5.74856797255738)*x1238))+(((12.4570625281677)*x1241))+(((-1.0)*x1237*x1240))+(((-11.4971359451148)*x1242)));
j4eval[1]=IKsign(((77015489.0)+(((-123088050.0)*x1242))+(((133365000.0)*x1241))+(((-10705975.0)*x1237))+x1239+(((61544025.0)*x1238))+(((123088050.0)*cj6*x1241))+(((-1.0)*x1237*x1239))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj7=0;
cj7=1.0;
j7=0;
IkReal x1243=((((-1.0)*cj5*sj6))+(((-1.0)*cj6*sj5)));
j4eval[0]=x1243;
j4eval[1]=((IKabs((((r10*sj9))+((cj9*r11)))))+(IKabs((((r00*sj9))+((cj9*r01))))));
j4eval[2]=IKsign(x1243);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=0;
cj7=1.0;
j7=0;
IkReal x1244=cj9*cj9;
IkReal x1245=r21*r21;
IkReal x1246=(cj5*sj6);
IkReal x1247=(cj9*r20);
IkReal x1248=(cj6*sj5);
IkReal x1249=((1.0)*r21*sj9);
IkReal x1250=(x1245+(r22*r22)+((x1244*(r20*r20)))+(((-2.0)*r21*sj9*x1247))+(((-1.0)*x1244*x1245)));
j8eval[0]=x1250;
j8eval[1]=((IKabs((((x1247*x1248))+((x1246*x1247))+(((-1.0)*x1248*x1249))+(((-1.0)*x1246*x1249)))))+(IKabs((((r22*x1246))+((r22*x1248))))));
j8eval[2]=IKsign(x1250);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj7=0;
cj7=1.0;
j7=0;
j4eval[0]=((((-1.0)*cj5*sj6))+(((-1.0)*cj6*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j5), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j6), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.10915)*(IKsin(j4)))));
evalcond[1]=((((0.10915)*(IKcos(j4))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j8eval[3];
sj7=0;
cj7=1.0;
j7=0;
j5=0;
sj5=0;
cj5=1.0;
j6=0;
sj6=0;
cj6=1.0;
IkReal x1251=(((r00*sj9))+((cj9*r01)));
j8eval[0]=x1251;
j8eval[1]=IKsign(x1251);
j8eval[2]=((IKabs((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))))+(IKabs((cj4*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=0;
cj7=1.0;
j7=0;
j5=0;
sj5=0;
cj5=1.0;
j6=0;
sj6=0;
cj6=1.0;
IkReal x1252=(((r10*sj9))+((cj9*r11)));
j8eval[0]=x1252;
j8eval[1]=IKsign(x1252);
j8eval[2]=((IKabs((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))))+(IKabs((r22*sj4))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=0;
cj7=1.0;
j7=0;
j5=0;
sj5=0;
cj5=1.0;
j6=0;
sj6=0;
cj6=1.0;
IkReal x1253=cj9*cj9;
IkReal x1254=(r11*r21);
IkReal x1255=(r21*sj9);
IkReal x1256=(cj9*r20);
IkReal x1257=((((-1.0)*r10*r20*x1253))+((cj9*r10*x1255))+(((-1.0)*r12*r22))+((x1253*x1254))+((r11*sj9*x1256))+(((-1.0)*x1254)));
j8eval[0]=x1257;
j8eval[1]=((IKabs(((((-1.0)*cj4*x1256))+((cj4*x1255)))))+(IKabs((cj4*r22))));
j8eval[2]=IKsign(x1257);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1258=cj9*cj9;
IkReal x1259=(r11*r21);
IkReal x1260=(r21*sj9);
IkReal x1261=(cj9*r20);
CheckValue<IkReal> x1262 = IKatan2WithCheck(IkReal((cj4*r22)),IkReal(((((-1.0)*cj4*x1261))+((cj4*x1260)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1262.valid){
continue;
}
CheckValue<IkReal> x1263=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*r20*x1258))+((cj9*r10*x1260))+((x1258*x1259))+(((-1.0)*r12*r22))+((r11*sj9*x1261))+(((-1.0)*x1259)))),-1);
if(!x1263.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x1262.value)+(((1.5707963267949)*(x1263.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x1264=IKcos(j8);
IkReal x1265=IKsin(j8);
CheckValue<IkReal> x1274=IKPowWithIntegerCheck(cj9,-1);
if(!x1274.valid){
continue;
}
IkReal x1266=x1274.value;
IkReal x1267=sj9*sj9;
IkReal x1268=(r21*sj9);
IkReal x1269=(cj9*r00);
IkReal x1270=((1.0)*x1264);
IkReal x1271=(cj9*x1265);
IkReal x1272=(sj9*x1264);
IkReal x1273=(x1265*x1266*x1267);
evalcond[0]=(((r22*x1265))+((x1264*x1268))+(((-1.0)*cj9*r20*x1270)));
evalcond[1]=(((r22*x1264))+(((-1.0)*x1265*x1268))+((r20*x1271)));
evalcond[2]=(cj4+(((-1.0)*cj9*r10*x1270))+((r11*x1272))+((r12*x1265)));
evalcond[3]=((((-1.0)*sj4))+((r02*x1265))+(((-1.0)*x1269*x1270))+((r01*x1272)));
evalcond[4]=(cj4+((r02*x1264))+((r00*x1273))+((x1265*x1269)));
evalcond[5]=(sj4+((r10*x1273))+((r10*x1271))+((r12*x1264)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x1275 = IKatan2WithCheck(IkReal((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x1275.valid){
continue;
}
CheckValue<IkReal> x1276=IKPowWithIntegerCheck(IKsign((((r10*sj9))+((cj9*r11)))),-1);
if(!x1276.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x1275.value)+(((1.5707963267949)*(x1276.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x1277=IKcos(j8);
IkReal x1278=IKsin(j8);
CheckValue<IkReal> x1287=IKPowWithIntegerCheck(cj9,-1);
if(!x1287.valid){
continue;
}
IkReal x1279=x1287.value;
IkReal x1280=sj9*sj9;
IkReal x1281=(r21*sj9);
IkReal x1282=(cj9*r00);
IkReal x1283=((1.0)*x1277);
IkReal x1284=(cj9*x1278);
IkReal x1285=(sj9*x1277);
IkReal x1286=(x1278*x1279*x1280);
evalcond[0]=(((r22*x1278))+(((-1.0)*cj9*r20*x1283))+((x1277*x1281)));
evalcond[1]=(((r22*x1277))+((r20*x1284))+(((-1.0)*x1278*x1281)));
evalcond[2]=(((r12*x1278))+((r11*x1285))+cj4+(((-1.0)*cj9*r10*x1283)));
evalcond[3]=((((-1.0)*sj4))+((r02*x1278))+((r01*x1285))+(((-1.0)*x1282*x1283)));
evalcond[4]=(((x1278*x1282))+cj4+((r02*x1277))+((r00*x1286)));
evalcond[5]=(((r12*x1277))+sj4+((r10*x1284))+((r10*x1286)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x1288=IKPowWithIntegerCheck(IKsign((((r00*sj9))+((cj9*r01)))),-1);
if(!x1288.valid){
continue;
}
CheckValue<IkReal> x1289 = IKatan2WithCheck(IkReal((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1289.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1288.value)))+(x1289.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x1290=IKcos(j8);
IkReal x1291=IKsin(j8);
CheckValue<IkReal> x1300=IKPowWithIntegerCheck(cj9,-1);
if(!x1300.valid){
continue;
}
IkReal x1292=x1300.value;
IkReal x1293=sj9*sj9;
IkReal x1294=(r21*sj9);
IkReal x1295=(cj9*r00);
IkReal x1296=((1.0)*x1290);
IkReal x1297=(cj9*x1291);
IkReal x1298=(sj9*x1290);
IkReal x1299=(x1291*x1292*x1293);
evalcond[0]=(((x1290*x1294))+((r22*x1291))+(((-1.0)*cj9*r20*x1296)));
evalcond[1]=(((r20*x1297))+(((-1.0)*x1291*x1294))+((r22*x1290)));
evalcond[2]=(cj4+(((-1.0)*cj9*r10*x1296))+((r12*x1291))+((r11*x1298)));
evalcond[3]=((((-1.0)*sj4))+(((-1.0)*x1295*x1296))+((r02*x1291))+((r01*x1298)));
evalcond[4]=(cj4+((x1291*x1295))+((r02*x1290))+((r00*x1299)));
evalcond[5]=(sj4+((r12*x1290))+((r10*x1297))+((r10*x1299)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j6, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j5), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.10915)*(IKsin(j4)))));
evalcond[1]=((((0.10915)*(IKcos(j4))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j8eval[3];
sj7=0;
cj7=1.0;
j7=0;
j5=0;
sj5=0;
cj5=1.0;
j6=3.14159265358979;
sj6=0;
cj6=-1.0;
IkReal x1301=(((r00*sj9))+((cj9*r01)));
j8eval[0]=x1301;
j8eval[1]=IKsign(x1301);
j8eval[2]=((IKabs((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))))+(IKabs((cj4*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=0;
cj7=1.0;
j7=0;
j5=0;
sj5=0;
cj5=1.0;
j6=3.14159265358979;
sj6=0;
cj6=-1.0;
IkReal x1302=(((r10*sj9))+((cj9*r11)));
j8eval[0]=x1302;
j8eval[1]=IKsign(x1302);
j8eval[2]=((IKabs((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))))+(IKabs((r22*sj4))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=0;
cj7=1.0;
j7=0;
j5=0;
sj5=0;
cj5=1.0;
j6=3.14159265358979;
sj6=0;
cj6=-1.0;
IkReal x1303=cj9*cj9;
IkReal x1304=(r11*r21);
IkReal x1305=(r21*sj9);
IkReal x1306=(cj9*r20);
IkReal x1307=((((-1.0)*r10*r20*x1303))+(((-1.0)*r12*r22))+(((-1.0)*x1304))+((x1303*x1304))+((r11*sj9*x1306))+((cj9*r10*x1305)));
j8eval[0]=x1307;
j8eval[1]=((IKabs(((((-1.0)*cj4*x1306))+((cj4*x1305)))))+(IKabs((cj4*r22))));
j8eval[2]=IKsign(x1307);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1308=cj9*cj9;
IkReal x1309=(r11*r21);
IkReal x1310=(r21*sj9);
IkReal x1311=(cj9*r20);
CheckValue<IkReal> x1312=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*r20*x1308))+((x1308*x1309))+(((-1.0)*r12*r22))+(((-1.0)*x1309))+((r11*sj9*x1311))+((cj9*r10*x1310)))),-1);
if(!x1312.valid){
continue;
}
CheckValue<IkReal> x1313 = IKatan2WithCheck(IkReal((cj4*r22)),IkReal((((cj4*x1310))+(((-1.0)*cj4*x1311)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1313.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1312.value)))+(x1313.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x1314=IKcos(j8);
IkReal x1315=IKsin(j8);
CheckValue<IkReal> x1325=IKPowWithIntegerCheck(cj9,-1);
if(!x1325.valid){
continue;
}
IkReal x1316=x1325.value;
IkReal x1317=sj9*sj9;
IkReal x1318=((1.0)*sj4);
IkReal x1319=(r21*sj9);
IkReal x1320=(cj9*r00);
IkReal x1321=((1.0)*x1314);
IkReal x1322=(cj9*x1315);
IkReal x1323=(sj9*x1314);
IkReal x1324=(x1315*x1316*x1317);
evalcond[0]=(((x1314*x1319))+((r22*x1315))+(((-1.0)*cj9*r20*x1321)));
evalcond[1]=((((-1.0)*x1315*x1319))+((r22*x1314))+((r20*x1322)));
evalcond[2]=((((-1.0)*cj9*r10*x1321))+cj4+((r11*x1323))+((r12*x1315)));
evalcond[3]=(((r01*x1323))+(((-1.0)*x1318))+((r02*x1315))+(((-1.0)*x1320*x1321)));
evalcond[4]=(((r00*x1324))+((r02*x1314))+(((-1.0)*cj4))+((x1315*x1320)));
evalcond[5]=((((-1.0)*x1318))+((r10*x1322))+((r10*x1324))+((r12*x1314)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x1326 = IKatan2WithCheck(IkReal((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x1326.valid){
continue;
}
CheckValue<IkReal> x1327=IKPowWithIntegerCheck(IKsign((((r10*sj9))+((cj9*r11)))),-1);
if(!x1327.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x1326.value)+(((1.5707963267949)*(x1327.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x1328=IKcos(j8);
IkReal x1329=IKsin(j8);
CheckValue<IkReal> x1339=IKPowWithIntegerCheck(cj9,-1);
if(!x1339.valid){
continue;
}
IkReal x1330=x1339.value;
IkReal x1331=sj9*sj9;
IkReal x1332=((1.0)*sj4);
IkReal x1333=(r21*sj9);
IkReal x1334=(cj9*r00);
IkReal x1335=((1.0)*x1328);
IkReal x1336=(cj9*x1329);
IkReal x1337=(sj9*x1328);
IkReal x1338=(x1329*x1330*x1331);
evalcond[0]=((((-1.0)*cj9*r20*x1335))+((r22*x1329))+((x1328*x1333)));
evalcond[1]=(((r20*x1336))+((r22*x1328))+(((-1.0)*x1329*x1333)));
evalcond[2]=(((r11*x1337))+cj4+((r12*x1329))+(((-1.0)*cj9*r10*x1335)));
evalcond[3]=((((-1.0)*x1334*x1335))+((r01*x1337))+((r02*x1329))+(((-1.0)*x1332)));
evalcond[4]=(((x1329*x1334))+((r00*x1338))+((r02*x1328))+(((-1.0)*cj4)));
evalcond[5]=(((r12*x1328))+((r10*x1338))+((r10*x1336))+(((-1.0)*x1332)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x1340=IKPowWithIntegerCheck(IKsign((((r00*sj9))+((cj9*r01)))),-1);
if(!x1340.valid){
continue;
}
CheckValue<IkReal> x1341 = IKatan2WithCheck(IkReal((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1341.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1340.value)))+(x1341.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x1342=IKcos(j8);
IkReal x1343=IKsin(j8);
CheckValue<IkReal> x1353=IKPowWithIntegerCheck(cj9,-1);
if(!x1353.valid){
continue;
}
IkReal x1344=x1353.value;
IkReal x1345=sj9*sj9;
IkReal x1346=((1.0)*sj4);
IkReal x1347=(r21*sj9);
IkReal x1348=(cj9*r00);
IkReal x1349=((1.0)*x1342);
IkReal x1350=(cj9*x1343);
IkReal x1351=(sj9*x1342);
IkReal x1352=(x1343*x1344*x1345);
evalcond[0]=(((r22*x1343))+((x1342*x1347))+(((-1.0)*cj9*r20*x1349)));
evalcond[1]=(((r22*x1342))+((r20*x1350))+(((-1.0)*x1343*x1347)));
evalcond[2]=(cj4+((r11*x1351))+((r12*x1343))+(((-1.0)*cj9*r10*x1349)));
evalcond[3]=((((-1.0)*x1346))+((r02*x1343))+(((-1.0)*x1348*x1349))+((r01*x1351)));
evalcond[4]=(((r02*x1342))+((r00*x1352))+((x1343*x1348))+(((-1.0)*cj4)));
evalcond[5]=(((r10*x1352))+((r10*x1350))+(((-1.0)*x1346))+((r12*x1342)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j5), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j6), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.20734818680435)*px))+(((0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((2.20734818680435)*px))+(((0.566898951975751)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((2.20734818680435)*px))+(((0.566898951975751)*py))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1354=IKcos(j4);
IkReal x1355=IKsin(j4);
evalcond[0]=((((-0.10915)*x1355))+(((-1.0)*px))+(((0.425)*x1354)));
evalcond[1]=((((0.10915)*x1354))+(((-1.0)*py))+(((0.425)*x1355)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j8eval[3];
sj7=0;
cj7=1.0;
j7=0;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j6=1.5707963267949;
sj6=1.0;
cj6=0;
IkReal x1356=(((r00*sj9))+((cj9*r01)));
j8eval[0]=x1356;
j8eval[1]=IKsign(x1356);
j8eval[2]=((IKabs((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))))+(IKabs((cj4*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=0;
cj7=1.0;
j7=0;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j6=1.5707963267949;
sj6=1.0;
cj6=0;
IkReal x1357=(((r10*sj9))+((cj9*r11)));
j8eval[0]=x1357;
j8eval[1]=IKsign(x1357);
j8eval[2]=((IKabs((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))))+(IKabs((r22*sj4))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=0;
cj7=1.0;
j7=0;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j6=1.5707963267949;
sj6=1.0;
cj6=0;
IkReal x1358=cj9*cj9;
IkReal x1359=(r11*r21);
IkReal x1360=(r21*sj9);
IkReal x1361=(cj9*r20);
IkReal x1362=((((-1.0)*x1359))+(((-1.0)*r12*r22))+((x1358*x1359))+((cj9*r10*x1360))+(((-1.0)*r10*r20*x1358))+((r11*sj9*x1361)));
j8eval[0]=x1362;
j8eval[1]=((IKabs(((((-1.0)*cj4*x1361))+((cj4*x1360)))))+(IKabs((cj4*r22))));
j8eval[2]=IKsign(x1362);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1363=cj9*cj9;
IkReal x1364=(r11*r21);
IkReal x1365=(r21*sj9);
IkReal x1366=(cj9*r20);
CheckValue<IkReal> x1367 = IKatan2WithCheck(IkReal((cj4*r22)),IkReal(((((-1.0)*cj4*x1366))+((cj4*x1365)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1367.valid){
continue;
}
CheckValue<IkReal> x1368=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1364))+((x1363*x1364))+(((-1.0)*r12*r22))+((cj9*r10*x1365))+(((-1.0)*r10*r20*x1363))+((r11*sj9*x1366)))),-1);
if(!x1368.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x1367.value)+(((1.5707963267949)*(x1368.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x1369=IKcos(j8);
IkReal x1370=IKsin(j8);
CheckValue<IkReal> x1380=IKPowWithIntegerCheck(cj9,-1);
if(!x1380.valid){
continue;
}
IkReal x1371=x1380.value;
IkReal x1372=sj9*sj9;
IkReal x1373=((1.0)*sj4);
IkReal x1374=(r21*sj9);
IkReal x1375=(cj9*r00);
IkReal x1376=((1.0)*x1369);
IkReal x1377=(cj9*x1370);
IkReal x1378=(sj9*x1369);
IkReal x1379=(x1370*x1371*x1372);
evalcond[0]=((((-1.0)*cj9*r20*x1376))+((r22*x1370))+((x1369*x1374)));
evalcond[1]=(((r22*x1369))+(((-1.0)*x1370*x1374))+((r20*x1377)));
evalcond[2]=(cj4+((r12*x1370))+((r11*x1378))+(((-1.0)*cj9*r10*x1376)));
evalcond[3]=((((-1.0)*x1375*x1376))+(((-1.0)*x1373))+((r02*x1370))+((r01*x1378)));
evalcond[4]=(((r02*x1369))+((x1370*x1375))+((r00*x1379))+(((-1.0)*cj4)));
evalcond[5]=(((r10*x1377))+((r10*x1379))+(((-1.0)*x1373))+((r12*x1369)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x1381 = IKatan2WithCheck(IkReal((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x1381.valid){
continue;
}
CheckValue<IkReal> x1382=IKPowWithIntegerCheck(IKsign((((r10*sj9))+((cj9*r11)))),-1);
if(!x1382.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x1381.value)+(((1.5707963267949)*(x1382.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x1383=IKcos(j8);
IkReal x1384=IKsin(j8);
CheckValue<IkReal> x1394=IKPowWithIntegerCheck(cj9,-1);
if(!x1394.valid){
continue;
}
IkReal x1385=x1394.value;
IkReal x1386=sj9*sj9;
IkReal x1387=((1.0)*sj4);
IkReal x1388=(r21*sj9);
IkReal x1389=(cj9*r00);
IkReal x1390=((1.0)*x1383);
IkReal x1391=(cj9*x1384);
IkReal x1392=(sj9*x1383);
IkReal x1393=(x1384*x1385*x1386);
evalcond[0]=((((-1.0)*cj9*r20*x1390))+((r22*x1384))+((x1383*x1388)));
evalcond[1]=((((-1.0)*x1384*x1388))+((r20*x1391))+((r22*x1383)));
evalcond[2]=(cj4+((r11*x1392))+((r12*x1384))+(((-1.0)*cj9*r10*x1390)));
evalcond[3]=((((-1.0)*x1387))+(((-1.0)*x1389*x1390))+((r01*x1392))+((r02*x1384)));
evalcond[4]=(((x1384*x1389))+((r00*x1393))+(((-1.0)*cj4))+((r02*x1383)));
evalcond[5]=((((-1.0)*x1387))+((r10*x1393))+((r10*x1391))+((r12*x1383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x1395=IKPowWithIntegerCheck(IKsign((((r00*sj9))+((cj9*r01)))),-1);
if(!x1395.valid){
continue;
}
CheckValue<IkReal> x1396 = IKatan2WithCheck(IkReal((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1396.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1395.value)))+(x1396.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x1397=IKcos(j8);
IkReal x1398=IKsin(j8);
CheckValue<IkReal> x1408=IKPowWithIntegerCheck(cj9,-1);
if(!x1408.valid){
continue;
}
IkReal x1399=x1408.value;
IkReal x1400=sj9*sj9;
IkReal x1401=((1.0)*sj4);
IkReal x1402=(r21*sj9);
IkReal x1403=(cj9*r00);
IkReal x1404=((1.0)*x1397);
IkReal x1405=(cj9*x1398);
IkReal x1406=(sj9*x1397);
IkReal x1407=(x1398*x1399*x1400);
evalcond[0]=((((-1.0)*cj9*r20*x1404))+((x1397*x1402))+((r22*x1398)));
evalcond[1]=((((-1.0)*x1398*x1402))+((r20*x1405))+((r22*x1397)));
evalcond[2]=(cj4+((r11*x1406))+(((-1.0)*cj9*r10*x1404))+((r12*x1398)));
evalcond[3]=((((-1.0)*x1401))+((r01*x1406))+(((-1.0)*x1403*x1404))+((r02*x1398)));
evalcond[4]=(((r00*x1407))+((x1398*x1403))+((r02*x1397))+(((-1.0)*cj4)));
evalcond[5]=((((-1.0)*x1401))+((r12*x1397))+((r10*x1407))+((r10*x1405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j5), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j6), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.20734818680435)*px))+(((0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((2.20734818680435)*px))+(((0.566898951975751)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((2.20734818680435)*px))+(((0.566898951975751)*py))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1409=IKcos(j4);
IkReal x1410=IKsin(j4);
evalcond[0]=((((-0.10915)*x1410))+(((-1.0)*px))+(((0.425)*x1409)));
evalcond[1]=((((0.10915)*x1409))+(((0.425)*x1410))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j8eval[3];
sj7=0;
cj7=1.0;
j7=0;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j6=-1.5707963267949;
sj6=-1.0;
cj6=0;
IkReal x1411=(((r00*sj9))+((cj9*r01)));
j8eval[0]=x1411;
j8eval[1]=IKsign(x1411);
j8eval[2]=((IKabs((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))))+(IKabs((cj4*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=0;
cj7=1.0;
j7=0;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j6=-1.5707963267949;
sj6=-1.0;
cj6=0;
IkReal x1412=(((r10*sj9))+((cj9*r11)));
j8eval[0]=x1412;
j8eval[1]=IKsign(x1412);
j8eval[2]=((IKabs((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))))+(IKabs((r22*sj4))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=0;
cj7=1.0;
j7=0;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j6=-1.5707963267949;
sj6=-1.0;
cj6=0;
IkReal x1413=cj9*cj9;
IkReal x1414=(r11*r21);
IkReal x1415=(r21*sj9);
IkReal x1416=(cj9*r20);
IkReal x1417=(((x1413*x1414))+(((-1.0)*r12*r22))+((r11*sj9*x1416))+(((-1.0)*r10*r20*x1413))+((cj9*r10*x1415))+(((-1.0)*x1414)));
j8eval[0]=x1417;
j8eval[1]=((IKabs((cj4*r22)))+(IKabs(((((-1.0)*cj4*x1416))+((cj4*x1415))))));
j8eval[2]=IKsign(x1417);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1418=cj9*cj9;
IkReal x1419=(r11*r21);
IkReal x1420=(r21*sj9);
IkReal x1421=(cj9*r20);
CheckValue<IkReal> x1422=IKPowWithIntegerCheck(IKsign((((x1418*x1419))+(((-1.0)*r12*r22))+((r11*sj9*x1421))+((cj9*r10*x1420))+(((-1.0)*r10*r20*x1418))+(((-1.0)*x1419)))),-1);
if(!x1422.valid){
continue;
}
CheckValue<IkReal> x1423 = IKatan2WithCheck(IkReal((cj4*r22)),IkReal(((((-1.0)*cj4*x1421))+((cj4*x1420)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1423.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1422.value)))+(x1423.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x1424=IKcos(j8);
IkReal x1425=IKsin(j8);
CheckValue<IkReal> x1434=IKPowWithIntegerCheck(cj9,-1);
if(!x1434.valid){
continue;
}
IkReal x1426=x1434.value;
IkReal x1427=sj9*sj9;
IkReal x1428=(r21*sj9);
IkReal x1429=(cj9*r00);
IkReal x1430=((1.0)*x1424);
IkReal x1431=(cj9*x1425);
IkReal x1432=(sj9*x1424);
IkReal x1433=(x1425*x1426*x1427);
evalcond[0]=(((x1424*x1428))+((r22*x1425))+(((-1.0)*cj9*r20*x1430)));
evalcond[1]=((((-1.0)*x1425*x1428))+((r22*x1424))+((r20*x1431)));
evalcond[2]=(cj4+((r11*x1432))+(((-1.0)*cj9*r10*x1430))+((r12*x1425)));
evalcond[3]=((((-1.0)*sj4))+(((-1.0)*x1429*x1430))+((r01*x1432))+((r02*x1425)));
evalcond[4]=(((x1425*x1429))+cj4+((r02*x1424))+((r00*x1433)));
evalcond[5]=(sj4+((r12*x1424))+((r10*x1433))+((r10*x1431)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x1435 = IKatan2WithCheck(IkReal((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x1435.valid){
continue;
}
CheckValue<IkReal> x1436=IKPowWithIntegerCheck(IKsign((((r10*sj9))+((cj9*r11)))),-1);
if(!x1436.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x1435.value)+(((1.5707963267949)*(x1436.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x1437=IKcos(j8);
IkReal x1438=IKsin(j8);
CheckValue<IkReal> x1447=IKPowWithIntegerCheck(cj9,-1);
if(!x1447.valid){
continue;
}
IkReal x1439=x1447.value;
IkReal x1440=sj9*sj9;
IkReal x1441=(r21*sj9);
IkReal x1442=(cj9*r00);
IkReal x1443=((1.0)*x1437);
IkReal x1444=(cj9*x1438);
IkReal x1445=(sj9*x1437);
IkReal x1446=(x1438*x1439*x1440);
evalcond[0]=(((x1437*x1441))+(((-1.0)*cj9*r20*x1443))+((r22*x1438)));
evalcond[1]=((((-1.0)*x1438*x1441))+((r20*x1444))+((r22*x1437)));
evalcond[2]=(((r11*x1445))+(((-1.0)*cj9*r10*x1443))+cj4+((r12*x1438)));
evalcond[3]=((((-1.0)*sj4))+((r02*x1438))+(((-1.0)*x1442*x1443))+((r01*x1445)));
evalcond[4]=(((x1438*x1442))+((r02*x1437))+cj4+((r00*x1446)));
evalcond[5]=(sj4+((r10*x1446))+((r10*x1444))+((r12*x1437)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x1448=IKPowWithIntegerCheck(IKsign((((r00*sj9))+((cj9*r01)))),-1);
if(!x1448.valid){
continue;
}
CheckValue<IkReal> x1449 = IKatan2WithCheck(IkReal((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1449.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1448.value)))+(x1449.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x1450=IKcos(j8);
IkReal x1451=IKsin(j8);
CheckValue<IkReal> x1460=IKPowWithIntegerCheck(cj9,-1);
if(!x1460.valid){
continue;
}
IkReal x1452=x1460.value;
IkReal x1453=sj9*sj9;
IkReal x1454=(r21*sj9);
IkReal x1455=(cj9*r00);
IkReal x1456=((1.0)*x1450);
IkReal x1457=(cj9*x1451);
IkReal x1458=(sj9*x1450);
IkReal x1459=(x1451*x1452*x1453);
evalcond[0]=((((-1.0)*cj9*r20*x1456))+((x1450*x1454))+((r22*x1451)));
evalcond[1]=(((r20*x1457))+(((-1.0)*x1451*x1454))+((r22*x1450)));
evalcond[2]=(cj4+((r11*x1458))+((r12*x1451))+(((-1.0)*cj9*r10*x1456)));
evalcond[3]=((((-1.0)*sj4))+(((-1.0)*x1455*x1456))+((r01*x1458))+((r02*x1451)));
evalcond[4]=(cj4+((r00*x1459))+((r02*x1450))+((x1451*x1455)));
evalcond[5]=(((r10*x1459))+((r10*x1457))+sj4+((r12*x1450)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j5, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j6), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.10915)*(IKsin(j4)))));
evalcond[1]=((((0.10915)*(IKcos(j4))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j8eval[3];
sj7=0;
cj7=1.0;
j7=0;
j5=3.14159265358979;
sj5=0;
cj5=-1.0;
j6=0;
sj6=0;
cj6=1.0;
IkReal x1461=(((r00*sj9))+((cj9*r01)));
j8eval[0]=x1461;
j8eval[1]=IKsign(x1461);
j8eval[2]=((IKabs((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))))+(IKabs((cj4*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=0;
cj7=1.0;
j7=0;
j5=3.14159265358979;
sj5=0;
cj5=-1.0;
j6=0;
sj6=0;
cj6=1.0;
IkReal x1462=(((r10*sj9))+((cj9*r11)));
j8eval[0]=x1462;
j8eval[1]=IKsign(x1462);
j8eval[2]=((IKabs((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))))+(IKabs((r22*sj4))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=0;
cj7=1.0;
j7=0;
j5=3.14159265358979;
sj5=0;
cj5=-1.0;
j6=0;
sj6=0;
cj6=1.0;
IkReal x1463=cj9*cj9;
IkReal x1464=(r11*r21);
IkReal x1465=(r21*sj9);
IkReal x1466=(cj9*r20);
IkReal x1467=(((cj9*r10*x1465))+((x1463*x1464))+(((-1.0)*r12*r22))+((r11*sj9*x1466))+(((-1.0)*x1464))+(((-1.0)*r10*r20*x1463)));
j8eval[0]=x1467;
j8eval[1]=((IKabs(((((-1.0)*cj4*x1466))+((cj4*x1465)))))+(IKabs((cj4*r22))));
j8eval[2]=IKsign(x1467);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1468=cj9*cj9;
IkReal x1469=(r11*r21);
IkReal x1470=(r21*sj9);
IkReal x1471=(cj9*r20);
CheckValue<IkReal> x1472 = IKatan2WithCheck(IkReal((cj4*r22)),IkReal((((cj4*x1470))+(((-1.0)*cj4*x1471)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1472.valid){
continue;
}
CheckValue<IkReal> x1473=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+((x1468*x1469))+((cj9*r10*x1470))+(((-1.0)*x1469))+((r11*sj9*x1471))+(((-1.0)*r10*r20*x1468)))),-1);
if(!x1473.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x1472.value)+(((1.5707963267949)*(x1473.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x1474=IKcos(j8);
IkReal x1475=IKsin(j8);
CheckValue<IkReal> x1485=IKPowWithIntegerCheck(cj9,-1);
if(!x1485.valid){
continue;
}
IkReal x1476=x1485.value;
IkReal x1477=sj9*sj9;
IkReal x1478=((1.0)*sj4);
IkReal x1479=(r21*sj9);
IkReal x1480=(cj9*r00);
IkReal x1481=((1.0)*x1474);
IkReal x1482=(cj9*x1475);
IkReal x1483=(sj9*x1474);
IkReal x1484=(x1475*x1476*x1477);
evalcond[0]=(((r22*x1475))+((x1474*x1479))+(((-1.0)*cj9*r20*x1481)));
evalcond[1]=(((r20*x1482))+((r22*x1474))+(((-1.0)*x1475*x1479)));
evalcond[2]=(((r12*x1475))+cj4+((r11*x1483))+(((-1.0)*cj9*r10*x1481)));
evalcond[3]=(((r01*x1483))+(((-1.0)*x1480*x1481))+((r02*x1475))+(((-1.0)*x1478)));
evalcond[4]=(((r00*x1484))+((r02*x1474))+((x1475*x1480))+(((-1.0)*cj4)));
evalcond[5]=(((r12*x1474))+((r10*x1484))+((r10*x1482))+(((-1.0)*x1478)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x1486 = IKatan2WithCheck(IkReal((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x1486.valid){
continue;
}
CheckValue<IkReal> x1487=IKPowWithIntegerCheck(IKsign((((r10*sj9))+((cj9*r11)))),-1);
if(!x1487.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x1486.value)+(((1.5707963267949)*(x1487.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x1488=IKcos(j8);
IkReal x1489=IKsin(j8);
CheckValue<IkReal> x1499=IKPowWithIntegerCheck(cj9,-1);
if(!x1499.valid){
continue;
}
IkReal x1490=x1499.value;
IkReal x1491=sj9*sj9;
IkReal x1492=((1.0)*sj4);
IkReal x1493=(r21*sj9);
IkReal x1494=(cj9*r00);
IkReal x1495=((1.0)*x1488);
IkReal x1496=(cj9*x1489);
IkReal x1497=(sj9*x1488);
IkReal x1498=(x1489*x1490*x1491);
evalcond[0]=((((-1.0)*cj9*r20*x1495))+((r22*x1489))+((x1488*x1493)));
evalcond[1]=(((r20*x1496))+(((-1.0)*x1489*x1493))+((r22*x1488)));
evalcond[2]=(cj4+((r12*x1489))+((r11*x1497))+(((-1.0)*cj9*r10*x1495)));
evalcond[3]=((((-1.0)*x1494*x1495))+(((-1.0)*x1492))+((r01*x1497))+((r02*x1489)));
evalcond[4]=(((r00*x1498))+((x1489*x1494))+((r02*x1488))+(((-1.0)*cj4)));
evalcond[5]=(((r10*x1496))+((r10*x1498))+(((-1.0)*x1492))+((r12*x1488)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x1500=IKPowWithIntegerCheck(IKsign((((r00*sj9))+((cj9*r01)))),-1);
if(!x1500.valid){
continue;
}
CheckValue<IkReal> x1501 = IKatan2WithCheck(IkReal((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1501.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1500.value)))+(x1501.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x1502=IKcos(j8);
IkReal x1503=IKsin(j8);
CheckValue<IkReal> x1513=IKPowWithIntegerCheck(cj9,-1);
if(!x1513.valid){
continue;
}
IkReal x1504=x1513.value;
IkReal x1505=sj9*sj9;
IkReal x1506=((1.0)*sj4);
IkReal x1507=(r21*sj9);
IkReal x1508=(cj9*r00);
IkReal x1509=((1.0)*x1502);
IkReal x1510=(cj9*x1503);
IkReal x1511=(sj9*x1502);
IkReal x1512=(x1503*x1504*x1505);
evalcond[0]=((((-1.0)*cj9*r20*x1509))+((r22*x1503))+((x1502*x1507)));
evalcond[1]=((((-1.0)*x1503*x1507))+((r20*x1510))+((r22*x1502)));
evalcond[2]=(((r11*x1511))+cj4+((r12*x1503))+(((-1.0)*cj9*r10*x1509)));
evalcond[3]=((((-1.0)*x1506))+((r01*x1511))+((r02*x1503))+(((-1.0)*x1508*x1509)));
evalcond[4]=(((r00*x1512))+((r02*x1502))+((x1503*x1508))+(((-1.0)*cj4)));
evalcond[5]=((((-1.0)*x1506))+((r12*x1502))+((r10*x1510))+((r10*x1512)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j6, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j5, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.10915)*(IKsin(j4)))));
evalcond[1]=((((0.10915)*(IKcos(j4))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j8eval[3];
sj7=0;
cj7=1.0;
j7=0;
j5=3.14159265358979;
sj5=0;
cj5=-1.0;
j6=3.14159265358979;
sj6=0;
cj6=-1.0;
IkReal x1514=(((r00*sj9))+((cj9*r01)));
j8eval[0]=x1514;
j8eval[1]=IKsign(x1514);
j8eval[2]=((IKabs((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))))+(IKabs((cj4*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=0;
cj7=1.0;
j7=0;
j5=3.14159265358979;
sj5=0;
cj5=-1.0;
j6=3.14159265358979;
sj6=0;
cj6=-1.0;
IkReal x1515=(((r10*sj9))+((cj9*r11)));
j8eval[0]=x1515;
j8eval[1]=IKsign(x1515);
j8eval[2]=((IKabs((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))))+(IKabs((r22*sj4))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=0;
cj7=1.0;
j7=0;
j5=3.14159265358979;
sj5=0;
cj5=-1.0;
j6=3.14159265358979;
sj6=0;
cj6=-1.0;
IkReal x1516=cj9*cj9;
IkReal x1517=(r11*r21);
IkReal x1518=(r21*sj9);
IkReal x1519=(cj9*r20);
IkReal x1520=(((r11*sj9*x1519))+(((-1.0)*x1517))+(((-1.0)*r12*r22))+(((-1.0)*r10*r20*x1516))+((x1516*x1517))+((cj9*r10*x1518)));
j8eval[0]=x1520;
j8eval[1]=((IKabs((((cj4*x1518))+(((-1.0)*cj4*x1519)))))+(IKabs((cj4*r22))));
j8eval[2]=IKsign(x1520);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1521=cj9*cj9;
IkReal x1522=(r11*r21);
IkReal x1523=(r21*sj9);
IkReal x1524=(cj9*r20);
CheckValue<IkReal> x1525 = IKatan2WithCheck(IkReal((cj4*r22)),IkReal(((((-1.0)*cj4*x1524))+((cj4*x1523)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1525.valid){
continue;
}
CheckValue<IkReal> x1526=IKPowWithIntegerCheck(IKsign((((cj9*r10*x1523))+((r11*sj9*x1524))+(((-1.0)*r12*r22))+(((-1.0)*r10*r20*x1521))+((x1521*x1522))+(((-1.0)*x1522)))),-1);
if(!x1526.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x1525.value)+(((1.5707963267949)*(x1526.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x1527=IKcos(j8);
IkReal x1528=IKsin(j8);
CheckValue<IkReal> x1537=IKPowWithIntegerCheck(cj9,-1);
if(!x1537.valid){
continue;
}
IkReal x1529=x1537.value;
IkReal x1530=sj9*sj9;
IkReal x1531=(r21*sj9);
IkReal x1532=(cj9*r00);
IkReal x1533=((1.0)*x1527);
IkReal x1534=(cj9*x1528);
IkReal x1535=(sj9*x1527);
IkReal x1536=(x1528*x1529*x1530);
evalcond[0]=((((-1.0)*cj9*r20*x1533))+((x1527*x1531))+((r22*x1528)));
evalcond[1]=(((r20*x1534))+(((-1.0)*x1528*x1531))+((r22*x1527)));
evalcond[2]=(cj4+((r12*x1528))+((r11*x1535))+(((-1.0)*cj9*r10*x1533)));
evalcond[3]=((((-1.0)*sj4))+((r01*x1535))+(((-1.0)*x1532*x1533))+((r02*x1528)));
evalcond[4]=(cj4+((x1528*x1532))+((r00*x1536))+((r02*x1527)));
evalcond[5]=(sj4+((r12*x1527))+((r10*x1534))+((r10*x1536)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x1538 = IKatan2WithCheck(IkReal((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x1538.valid){
continue;
}
CheckValue<IkReal> x1539=IKPowWithIntegerCheck(IKsign((((r10*sj9))+((cj9*r11)))),-1);
if(!x1539.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x1538.value)+(((1.5707963267949)*(x1539.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x1540=IKcos(j8);
IkReal x1541=IKsin(j8);
CheckValue<IkReal> x1550=IKPowWithIntegerCheck(cj9,-1);
if(!x1550.valid){
continue;
}
IkReal x1542=x1550.value;
IkReal x1543=sj9*sj9;
IkReal x1544=(r21*sj9);
IkReal x1545=(cj9*r00);
IkReal x1546=((1.0)*x1540);
IkReal x1547=(cj9*x1541);
IkReal x1548=(sj9*x1540);
IkReal x1549=(x1541*x1542*x1543);
evalcond[0]=((((-1.0)*cj9*r20*x1546))+((x1540*x1544))+((r22*x1541)));
evalcond[1]=((((-1.0)*x1541*x1544))+((r22*x1540))+((r20*x1547)));
evalcond[2]=(cj4+((r12*x1541))+((r11*x1548))+(((-1.0)*cj9*r10*x1546)));
evalcond[3]=((((-1.0)*sj4))+((r02*x1541))+(((-1.0)*x1545*x1546))+((r01*x1548)));
evalcond[4]=(cj4+((x1541*x1545))+((r02*x1540))+((r00*x1549)));
evalcond[5]=(sj4+((r12*x1540))+((r10*x1549))+((r10*x1547)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x1551=IKPowWithIntegerCheck(IKsign((((r00*sj9))+((cj9*r01)))),-1);
if(!x1551.valid){
continue;
}
CheckValue<IkReal> x1552 = IKatan2WithCheck(IkReal((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1552.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1551.value)))+(x1552.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x1553=IKcos(j8);
IkReal x1554=IKsin(j8);
CheckValue<IkReal> x1563=IKPowWithIntegerCheck(cj9,-1);
if(!x1563.valid){
continue;
}
IkReal x1555=x1563.value;
IkReal x1556=sj9*sj9;
IkReal x1557=(r21*sj9);
IkReal x1558=(cj9*r00);
IkReal x1559=((1.0)*x1553);
IkReal x1560=(cj9*x1554);
IkReal x1561=(sj9*x1553);
IkReal x1562=(x1554*x1555*x1556);
evalcond[0]=(((x1553*x1557))+((r22*x1554))+(((-1.0)*cj9*r20*x1559)));
evalcond[1]=(((r20*x1560))+((r22*x1553))+(((-1.0)*x1554*x1557)));
evalcond[2]=(cj4+((r11*x1561))+((r12*x1554))+(((-1.0)*cj9*r10*x1559)));
evalcond[3]=((((-1.0)*x1558*x1559))+(((-1.0)*sj4))+((r02*x1554))+((r01*x1561)));
evalcond[4]=(cj4+((x1554*x1558))+((r02*x1553))+((r00*x1562)));
evalcond[5]=(sj4+((r12*x1553))+((r10*x1562))+((r10*x1560)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j5), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j6), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((-2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.566898951975751)*py))+(((-2.20734818680435)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((0.566898951975751)*py))+(((-2.20734818680435)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((0.566898951975751)*py))+(((-2.20734818680435)*px))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1564=IKcos(j4);
IkReal x1565=IKsin(j4);
evalcond[0]=((((-0.425)*x1564))+(((-1.0)*px))+(((-0.10915)*x1565)));
evalcond[1]=((((-0.425)*x1565))+(((-1.0)*py))+(((0.10915)*x1564)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j8eval[3];
sj7=0;
cj7=1.0;
j7=0;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j6=1.5707963267949;
sj6=1.0;
cj6=0;
IkReal x1566=(((r00*sj9))+((cj9*r01)));
j8eval[0]=x1566;
j8eval[1]=IKsign(x1566);
j8eval[2]=((IKabs((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))))+(IKabs((cj4*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=0;
cj7=1.0;
j7=0;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j6=1.5707963267949;
sj6=1.0;
cj6=0;
IkReal x1567=(((r10*sj9))+((cj9*r11)));
j8eval[0]=x1567;
j8eval[1]=IKsign(x1567);
j8eval[2]=((IKabs((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))))+(IKabs((r22*sj4))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=0;
cj7=1.0;
j7=0;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j6=1.5707963267949;
sj6=1.0;
cj6=0;
IkReal x1568=cj9*cj9;
IkReal x1569=(r11*r21);
IkReal x1570=(r21*sj9);
IkReal x1571=(cj9*r20);
IkReal x1572=(((r11*sj9*x1571))+(((-1.0)*r12*r22))+(((-1.0)*r10*r20*x1568))+((x1568*x1569))+(((-1.0)*x1569))+((cj9*r10*x1570)));
j8eval[0]=x1572;
j8eval[1]=((IKabs((((cj4*x1570))+(((-1.0)*cj4*x1571)))))+(IKabs((cj4*r22))));
j8eval[2]=IKsign(x1572);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1573=cj9*cj9;
IkReal x1574=(r11*r21);
IkReal x1575=(r21*sj9);
IkReal x1576=(cj9*r20);
CheckValue<IkReal> x1577 = IKatan2WithCheck(IkReal((cj4*r22)),IkReal((((cj4*x1575))+(((-1.0)*cj4*x1576)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1577.valid){
continue;
}
CheckValue<IkReal> x1578=IKPowWithIntegerCheck(IKsign((((r11*sj9*x1576))+(((-1.0)*r12*r22))+((x1573*x1574))+(((-1.0)*r10*r20*x1573))+(((-1.0)*x1574))+((cj9*r10*x1575)))),-1);
if(!x1578.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x1577.value)+(((1.5707963267949)*(x1578.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x1579=IKcos(j8);
IkReal x1580=IKsin(j8);
CheckValue<IkReal> x1589=IKPowWithIntegerCheck(cj9,-1);
if(!x1589.valid){
continue;
}
IkReal x1581=x1589.value;
IkReal x1582=sj9*sj9;
IkReal x1583=(r21*sj9);
IkReal x1584=(cj9*r00);
IkReal x1585=((1.0)*x1579);
IkReal x1586=(cj9*x1580);
IkReal x1587=(sj9*x1579);
IkReal x1588=(x1580*x1581*x1582);
evalcond[0]=(((r22*x1580))+(((-1.0)*cj9*r20*x1585))+((x1579*x1583)));
evalcond[1]=(((r20*x1586))+(((-1.0)*x1580*x1583))+((r22*x1579)));
evalcond[2]=((((-1.0)*cj9*r10*x1585))+cj4+((r12*x1580))+((r11*x1587)));
evalcond[3]=((((-1.0)*sj4))+((r01*x1587))+(((-1.0)*x1584*x1585))+((r02*x1580)));
evalcond[4]=(cj4+((x1580*x1584))+((r02*x1579))+((r00*x1588)));
evalcond[5]=(sj4+((r12*x1579))+((r10*x1586))+((r10*x1588)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x1590 = IKatan2WithCheck(IkReal((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x1590.valid){
continue;
}
CheckValue<IkReal> x1591=IKPowWithIntegerCheck(IKsign((((r10*sj9))+((cj9*r11)))),-1);
if(!x1591.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x1590.value)+(((1.5707963267949)*(x1591.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x1592=IKcos(j8);
IkReal x1593=IKsin(j8);
CheckValue<IkReal> x1602=IKPowWithIntegerCheck(cj9,-1);
if(!x1602.valid){
continue;
}
IkReal x1594=x1602.value;
IkReal x1595=sj9*sj9;
IkReal x1596=(r21*sj9);
IkReal x1597=(cj9*r00);
IkReal x1598=((1.0)*x1592);
IkReal x1599=(cj9*x1593);
IkReal x1600=(sj9*x1592);
IkReal x1601=(x1593*x1594*x1595);
evalcond[0]=(((x1592*x1596))+((r22*x1593))+(((-1.0)*cj9*r20*x1598)));
evalcond[1]=((((-1.0)*x1593*x1596))+((r20*x1599))+((r22*x1592)));
evalcond[2]=((((-1.0)*cj9*r10*x1598))+cj4+((r12*x1593))+((r11*x1600)));
evalcond[3]=((((-1.0)*sj4))+((r01*x1600))+((r02*x1593))+(((-1.0)*x1597*x1598)));
evalcond[4]=(cj4+((x1593*x1597))+((r00*x1601))+((r02*x1592)));
evalcond[5]=(sj4+((r12*x1592))+((r10*x1599))+((r10*x1601)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x1603=IKPowWithIntegerCheck(IKsign((((r00*sj9))+((cj9*r01)))),-1);
if(!x1603.valid){
continue;
}
CheckValue<IkReal> x1604 = IKatan2WithCheck(IkReal((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1604.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1603.value)))+(x1604.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x1605=IKcos(j8);
IkReal x1606=IKsin(j8);
CheckValue<IkReal> x1615=IKPowWithIntegerCheck(cj9,-1);
if(!x1615.valid){
continue;
}
IkReal x1607=x1615.value;
IkReal x1608=sj9*sj9;
IkReal x1609=(r21*sj9);
IkReal x1610=(cj9*r00);
IkReal x1611=((1.0)*x1605);
IkReal x1612=(cj9*x1606);
IkReal x1613=(sj9*x1605);
IkReal x1614=(x1606*x1607*x1608);
evalcond[0]=((((-1.0)*cj9*r20*x1611))+((r22*x1606))+((x1605*x1609)));
evalcond[1]=(((r20*x1612))+(((-1.0)*x1606*x1609))+((r22*x1605)));
evalcond[2]=(cj4+((r11*x1613))+((r12*x1606))+(((-1.0)*cj9*r10*x1611)));
evalcond[3]=((((-1.0)*sj4))+((r01*x1613))+(((-1.0)*x1610*x1611))+((r02*x1606)));
evalcond[4]=(cj4+((r00*x1614))+((x1606*x1610))+((r02*x1605)));
evalcond[5]=(sj4+((r12*x1605))+((r10*x1612))+((r10*x1614)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j5), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j6), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((-2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.566898951975751)*py))+(((-2.20734818680435)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((0.566898951975751)*py))+(((-2.20734818680435)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((0.566898951975751)*py))+(((-2.20734818680435)*px))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1616=IKcos(j4);
IkReal x1617=IKsin(j4);
evalcond[0]=((((-0.10915)*x1617))+(((-1.0)*px))+(((-0.425)*x1616)));
evalcond[1]=((((0.10915)*x1616))+(((-1.0)*py))+(((-0.425)*x1617)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j8eval[3];
sj7=0;
cj7=1.0;
j7=0;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j6=-1.5707963267949;
sj6=-1.0;
cj6=0;
IkReal x1618=(((r00*sj9))+((cj9*r01)));
j8eval[0]=x1618;
j8eval[1]=IKsign(x1618);
j8eval[2]=((IKabs((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))))+(IKabs((cj4*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=0;
cj7=1.0;
j7=0;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j6=-1.5707963267949;
sj6=-1.0;
cj6=0;
IkReal x1619=(((r10*sj9))+((cj9*r11)));
j8eval[0]=x1619;
j8eval[1]=IKsign(x1619);
j8eval[2]=((IKabs((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))))+(IKabs((r22*sj4))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=0;
cj7=1.0;
j7=0;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j6=-1.5707963267949;
sj6=-1.0;
cj6=0;
IkReal x1620=cj9*cj9;
IkReal x1621=(r11*r21);
IkReal x1622=(r21*sj9);
IkReal x1623=(cj9*r20);
IkReal x1624=(((x1620*x1621))+(((-1.0)*x1621))+(((-1.0)*r12*r22))+((r11*sj9*x1623))+(((-1.0)*r10*r20*x1620))+((cj9*r10*x1622)));
j8eval[0]=x1624;
j8eval[1]=((IKabs(((((-1.0)*cj4*x1623))+((cj4*x1622)))))+(IKabs((cj4*r22))));
j8eval[2]=IKsign(x1624);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1625=cj9*cj9;
IkReal x1626=(r11*r21);
IkReal x1627=(r21*sj9);
IkReal x1628=(cj9*r20);
CheckValue<IkReal> x1629=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1626))+(((-1.0)*r12*r22))+((r11*sj9*x1628))+(((-1.0)*r10*r20*x1625))+((x1625*x1626))+((cj9*r10*x1627)))),-1);
if(!x1629.valid){
continue;
}
CheckValue<IkReal> x1630 = IKatan2WithCheck(IkReal((cj4*r22)),IkReal(((((-1.0)*cj4*x1628))+((cj4*x1627)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1630.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1629.value)))+(x1630.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x1631=IKcos(j8);
IkReal x1632=IKsin(j8);
CheckValue<IkReal> x1642=IKPowWithIntegerCheck(cj9,-1);
if(!x1642.valid){
continue;
}
IkReal x1633=x1642.value;
IkReal x1634=sj9*sj9;
IkReal x1635=((1.0)*sj4);
IkReal x1636=(r21*sj9);
IkReal x1637=(cj9*r00);
IkReal x1638=((1.0)*x1631);
IkReal x1639=(cj9*x1632);
IkReal x1640=(sj9*x1631);
IkReal x1641=(x1632*x1633*x1634);
evalcond[0]=((((-1.0)*cj9*r20*x1638))+((x1631*x1636))+((r22*x1632)));
evalcond[1]=(((r20*x1639))+(((-1.0)*x1632*x1636))+((r22*x1631)));
evalcond[2]=(((r11*x1640))+cj4+((r12*x1632))+(((-1.0)*cj9*r10*x1638)));
evalcond[3]=(((r02*x1632))+(((-1.0)*x1635))+(((-1.0)*x1637*x1638))+((r01*x1640)));
evalcond[4]=(((r02*x1631))+((r00*x1641))+((x1632*x1637))+(((-1.0)*cj4)));
evalcond[5]=(((r10*x1641))+((r10*x1639))+((r12*x1631))+(((-1.0)*x1635)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x1643 = IKatan2WithCheck(IkReal((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x1643.valid){
continue;
}
CheckValue<IkReal> x1644=IKPowWithIntegerCheck(IKsign((((r10*sj9))+((cj9*r11)))),-1);
if(!x1644.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x1643.value)+(((1.5707963267949)*(x1644.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x1645=IKcos(j8);
IkReal x1646=IKsin(j8);
CheckValue<IkReal> x1656=IKPowWithIntegerCheck(cj9,-1);
if(!x1656.valid){
continue;
}
IkReal x1647=x1656.value;
IkReal x1648=sj9*sj9;
IkReal x1649=((1.0)*sj4);
IkReal x1650=(r21*sj9);
IkReal x1651=(cj9*r00);
IkReal x1652=((1.0)*x1645);
IkReal x1653=(cj9*x1646);
IkReal x1654=(sj9*x1645);
IkReal x1655=(x1646*x1647*x1648);
evalcond[0]=((((-1.0)*cj9*r20*x1652))+((x1645*x1650))+((r22*x1646)));
evalcond[1]=(((r20*x1653))+(((-1.0)*x1646*x1650))+((r22*x1645)));
evalcond[2]=((((-1.0)*cj9*r10*x1652))+cj4+((r11*x1654))+((r12*x1646)));
evalcond[3]=(((r02*x1646))+((r01*x1654))+(((-1.0)*x1649))+(((-1.0)*x1651*x1652)));
evalcond[4]=(((r02*x1645))+((x1646*x1651))+((r00*x1655))+(((-1.0)*cj4)));
evalcond[5]=(((r10*x1655))+((r10*x1653))+((r12*x1645))+(((-1.0)*x1649)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x1657=IKPowWithIntegerCheck(IKsign((((r00*sj9))+((cj9*r01)))),-1);
if(!x1657.valid){
continue;
}
CheckValue<IkReal> x1658 = IKatan2WithCheck(IkReal((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1658.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1657.value)))+(x1658.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x1659=IKcos(j8);
IkReal x1660=IKsin(j8);
CheckValue<IkReal> x1670=IKPowWithIntegerCheck(cj9,-1);
if(!x1670.valid){
continue;
}
IkReal x1661=x1670.value;
IkReal x1662=sj9*sj9;
IkReal x1663=((1.0)*sj4);
IkReal x1664=(r21*sj9);
IkReal x1665=(cj9*r00);
IkReal x1666=((1.0)*x1659);
IkReal x1667=(cj9*x1660);
IkReal x1668=(sj9*x1659);
IkReal x1669=(x1660*x1661*x1662);
evalcond[0]=((((-1.0)*cj9*r20*x1666))+((x1659*x1664))+((r22*x1660)));
evalcond[1]=(((r22*x1659))+((r20*x1667))+(((-1.0)*x1660*x1664)));
evalcond[2]=(cj4+((r12*x1660))+(((-1.0)*cj9*r10*x1666))+((r11*x1668)));
evalcond[3]=(((r02*x1660))+((r01*x1668))+(((-1.0)*x1663))+(((-1.0)*x1665*x1666)));
evalcond[4]=(((x1660*x1665))+((r02*x1659))+((r00*x1669))+(((-1.0)*cj4)));
evalcond[5]=(((r10*x1669))+((r10*x1667))+((r12*x1659))+(((-1.0)*x1663)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4, j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1671=(cj9*r01);
IkReal x1672=((8500.0)*sj5);
IkReal x1673=(cj6*sj5);
IkReal x1674=(r00*sj9);
IkReal x1675=(cj5*sj6);
IkReal x1676=((20000.0)*px);
CheckValue<IkReal> x1677=IKPowWithIntegerCheck(((((-2183.0)*x1675))+(((-2183.0)*x1673))),-1);
if(!x1677.valid){
continue;
}
CheckValue<IkReal> x1678=IKPowWithIntegerCheck(((((-1.0)*x1673))+(((-1.0)*x1675))),-1);
if(!x1678.valid){
continue;
}
if( IKabs(((x1677.value)*((((x1675*x1676))+(((9738.0)*x1673*x1674))+((x1673*x1676))+(((9738.0)*x1674*x1675))+(((9738.0)*x1671*x1673))+(((9738.0)*x1671*x1675))+((x1672*x1674))+((x1671*x1672)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1678.value)*((x1674+x1671)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1677.value)*((((x1675*x1676))+(((9738.0)*x1673*x1674))+((x1673*x1676))+(((9738.0)*x1674*x1675))+(((9738.0)*x1671*x1673))+(((9738.0)*x1671*x1675))+((x1672*x1674))+((x1671*x1672))))))+IKsqr(((x1678.value)*((x1674+x1671))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x1677.value)*((((x1675*x1676))+(((9738.0)*x1673*x1674))+((x1673*x1676))+(((9738.0)*x1674*x1675))+(((9738.0)*x1671*x1673))+(((9738.0)*x1671*x1675))+((x1672*x1674))+((x1671*x1672))))), ((x1678.value)*((x1674+x1671))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x1679=IKcos(j4);
IkReal x1680=IKsin(j4);
IkReal x1681=(cj6*sj5);
IkReal x1682=((0.09465)*cj9);
IkReal x1683=(cj5*sj6);
IkReal x1684=(r00*sj9);
IkReal x1685=((0.425)*sj5);
IkReal x1686=((1.0)*cj9);
IkReal x1687=(r10*sj9);
IkReal x1688=((1.0)*x1679);
IkReal x1689=((0.39225)*x1679);
IkReal x1690=(x1680*x1681);
evalcond[0]=((((-1.0)*r01*x1686))+(((-1.0)*x1681*x1688))+(((-1.0)*x1684))+(((-1.0)*x1683*x1688)));
evalcond[1]=((((-1.0)*r11*x1686))+(((-1.0)*x1690))+(((-1.0)*x1687))+(((-1.0)*x1680*x1683)));
evalcond[2]=(((x1681*x1689))+(((-1.0)*r01*x1682))+(((-1.0)*px))+((x1679*x1685))+(((-0.09465)*x1684))+((x1683*x1689))+(((-0.10915)*x1680)));
evalcond[3]=((((-1.0)*r11*x1682))+((x1680*x1685))+(((0.39225)*x1690))+(((0.39225)*x1680*x1683))+(((-1.0)*py))+(((0.10915)*x1679))+(((-0.09465)*x1687)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j8eval[3];
sj7=0;
cj7=1.0;
j7=0;
IkReal x1691=(((r00*sj9))+((cj9*r01)));
j8eval[0]=x1691;
j8eval[1]=IKsign(x1691);
j8eval[2]=((IKabs((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))))+(IKabs((cj4*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=0;
cj7=1.0;
j7=0;
IkReal x1692=(((r10*sj9))+((cj9*r11)));
j8eval[0]=x1692;
j8eval[1]=IKsign(x1692);
j8eval[2]=((IKabs((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))))+(IKabs((r22*sj4))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=0;
cj7=1.0;
j7=0;
IkReal x1693=((1.0)*cj9);
IkReal x1694=((((-1.0)*r21*x1693))+(((-1.0)*r20*sj9)));
j8eval[0]=x1694;
j8eval[1]=((IKabs(((((-1.0)*r10*sj4*x1693))+(((-1.0)*cj4*r00*x1693))+((r11*sj4*sj9))+((cj4*r01*sj9)))))+(IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4))))));
j8eval[2]=IKsign(x1694);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1695=((-1.0)*r20);
IkReal x1697 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1697)==0){
continue;
}
IkReal x1696=pow(x1697,-0.5);
CheckValue<IkReal> x1698 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1695),IKFAST_ATAN2_MAGTHRESH);
if(!x1698.valid){
continue;
}
IkReal gconst78=((-1.0)*(x1698.value));
IkReal gconst79=(r21*x1696);
IkReal gconst80=(x1695*x1696);
CheckValue<IkReal> x1699 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1699.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1699.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x1700=((-1.0)*r20);
IkReal x1701=x1696;
CheckValue<IkReal> x1703 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1700),IKFAST_ATAN2_MAGTHRESH);
if(!x1703.valid){
continue;
}
IkReal x1702=((-1.0)*(x1703.value));
sj7=0;
cj7=1.0;
j7=0;
sj9=gconst79;
cj9=gconst80;
j9=x1702;
IkReal gconst78=x1702;
IkReal gconst79=(r21*x1701);
IkReal gconst80=(x1700*x1701);
j8eval[0]=cj4;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
IkReal x1704=((-1.0)*r20);
IkReal x1705=x1696;
CheckValue<IkReal> x1707 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1704),IKFAST_ATAN2_MAGTHRESH);
if(!x1707.valid){
continue;
}
IkReal x1706=((-1.0)*(x1707.value));
sj7=0;
cj7=1.0;
j7=0;
sj9=gconst79;
cj9=gconst80;
j9=x1706;
IkReal gconst78=x1706;
IkReal gconst79=(r21*x1705);
IkReal gconst80=(x1704*x1705);
j8eval[0]=sj4;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x1708=((-1.0)*r20);
IkReal x1709=x1696;
CheckValue<IkReal> x1711 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1708),IKFAST_ATAN2_MAGTHRESH);
if(!x1711.valid){
continue;
}
IkReal x1710=((-1.0)*(x1711.value));
sj7=0;
cj7=1.0;
j7=0;
sj9=gconst79;
cj9=gconst80;
j9=x1710;
IkReal gconst78=x1710;
IkReal gconst79=(r21*x1709);
IkReal gconst80=(x1708*x1709);
IkReal x1712=r22*r22;
CheckValue<IkReal> x1715=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x1712))),-1);
if(!x1715.valid){
continue;
}
IkReal x1713=x1715.value;
IkReal x1714=((((2.0)*x1713*(r20*r20)*(r21*r21)))+x1712+((x1713*(r20*r20*r20*r20)))+((x1713*(r21*r21*r21*r21))));
j8eval[0]=x1714;
j8eval[1]=IKsign(x1714);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1716=(cj5*sj6);
IkReal x1717=(gconst79*r21);
IkReal x1718=(gconst80*r20);
IkReal x1719=(cj6*sj5);
CheckValue<IkReal> x1720=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x1718*x1718)+(x1717*x1717)+(((-2.0)*x1717*x1718)))),-1);
if(!x1720.valid){
continue;
}
CheckValue<IkReal> x1721 = IKatan2WithCheck(IkReal(((((-1.0)*x1716*x1717))+((x1716*x1718))+(((-1.0)*x1717*x1719))+((x1718*x1719)))),IkReal((((r22*x1716))+((r22*x1719)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1721.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1720.value)))+(x1721.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x1722=IKcos(j8);
IkReal x1723=IKsin(j8);
IkReal x1724=((1.0)*sj4);
IkReal x1725=(gconst80*r21);
IkReal x1726=(gconst79*r20);
IkReal x1727=((1.0)*cj4);
IkReal x1728=(gconst79*x1722);
IkReal x1729=(gconst80*x1723);
IkReal x1730=((1.0)*gconst79*x1723);
IkReal x1731=((1.0)*gconst80*x1722);
evalcond[0]=(((r21*x1728))+((r22*x1723))+(((-1.0)*r20*x1731)));
evalcond[1]=(cj4+(((-1.0)*r10*x1731))+((r11*x1728))+((r12*x1723)));
evalcond[2]=(((r01*x1728))+(((-1.0)*r00*x1731))+((r02*x1723))+(((-1.0)*x1724)));
evalcond[3]=((((-1.0)*cj5*sj6))+((r22*x1722))+((r20*x1729))+(((-1.0)*r21*x1730))+(((-1.0)*cj6*sj5)));
evalcond[4]=(((r00*x1729))+(((-1.0)*x1726*x1727))+(((-1.0)*r01*x1730))+((r02*x1722))+(((-1.0)*x1725*x1727)));
evalcond[5]=((((-1.0)*r11*x1730))+((r10*x1729))+(((-1.0)*x1724*x1725))+(((-1.0)*x1724*x1726))+((r12*x1722)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x1732=IKPowWithIntegerCheck(IKsign((((gconst80*r11))+((gconst79*r10)))),-1);
if(!x1732.valid){
continue;
}
CheckValue<IkReal> x1733 = IKatan2WithCheck(IkReal((((gconst79*r21*sj4))+(((-1.0)*gconst80*r20*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x1733.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1732.value)))+(x1733.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x1734=IKcos(j8);
IkReal x1735=IKsin(j8);
IkReal x1736=((1.0)*sj4);
IkReal x1737=(gconst80*r21);
IkReal x1738=(gconst79*r20);
IkReal x1739=((1.0)*cj4);
IkReal x1740=(gconst79*x1734);
IkReal x1741=(gconst80*x1735);
IkReal x1742=((1.0)*gconst79*x1735);
IkReal x1743=((1.0)*gconst80*x1734);
evalcond[0]=(((r22*x1735))+((r21*x1740))+(((-1.0)*r20*x1743)));
evalcond[1]=(cj4+(((-1.0)*r10*x1743))+((r12*x1735))+((r11*x1740)));
evalcond[2]=(((r02*x1735))+(((-1.0)*r00*x1743))+((r01*x1740))+(((-1.0)*x1736)));
evalcond[3]=((((-1.0)*cj5*sj6))+((r22*x1734))+((r20*x1741))+(((-1.0)*r21*x1742))+(((-1.0)*cj6*sj5)));
evalcond[4]=((((-1.0)*x1738*x1739))+((r02*x1734))+(((-1.0)*x1737*x1739))+(((-1.0)*r01*x1742))+((r00*x1741)));
evalcond[5]=((((-1.0)*r11*x1742))+(((-1.0)*x1736*x1738))+(((-1.0)*x1736*x1737))+((r12*x1734))+((r10*x1741)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x1744=IKPowWithIntegerCheck(IKsign((((gconst79*r00))+((gconst80*r01)))),-1);
if(!x1744.valid){
continue;
}
CheckValue<IkReal> x1745 = IKatan2WithCheck(IkReal((((cj4*gconst79*r21))+(((-1.0)*cj4*gconst80*r20)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1745.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1744.value)))+(x1745.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x1746=IKcos(j8);
IkReal x1747=IKsin(j8);
IkReal x1748=((1.0)*sj4);
IkReal x1749=(gconst80*r21);
IkReal x1750=(gconst79*r20);
IkReal x1751=((1.0)*cj4);
IkReal x1752=(gconst79*x1746);
IkReal x1753=(gconst80*x1747);
IkReal x1754=((1.0)*gconst79*x1747);
IkReal x1755=((1.0)*gconst80*x1746);
evalcond[0]=(((r22*x1747))+((r21*x1752))+(((-1.0)*r20*x1755)));
evalcond[1]=(((r12*x1747))+cj4+(((-1.0)*r10*x1755))+((r11*x1752)));
evalcond[2]=(((r02*x1747))+(((-1.0)*x1748))+(((-1.0)*r00*x1755))+((r01*x1752)));
evalcond[3]=((((-1.0)*cj5*sj6))+((r22*x1746))+((r20*x1753))+(((-1.0)*r21*x1754))+(((-1.0)*cj6*sj5)));
evalcond[4]=((((-1.0)*x1749*x1751))+((r02*x1746))+(((-1.0)*x1750*x1751))+(((-1.0)*r01*x1754))+((r00*x1753)));
evalcond[5]=((((-1.0)*r11*x1754))+((r12*x1746))+(((-1.0)*x1748*x1750))+(((-1.0)*x1748*x1749))+((r10*x1753)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1756=((-1.0)*r21);
IkReal x1758 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1758)==0){
continue;
}
IkReal x1757=pow(x1758,-0.5);
CheckValue<IkReal> x1759 = IKatan2WithCheck(IkReal(x1756),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1759.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x1759.value))));
IkReal gconst82=(x1756*x1757);
IkReal gconst83=((1.0)*r20*x1757);
CheckValue<IkReal> x1760 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1760.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1760.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x1761=((-1.0)*r21);
CheckValue<IkReal> x1764 = IKatan2WithCheck(IkReal(x1761),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1764.valid){
continue;
}
IkReal x1762=((1.0)*(x1764.value));
IkReal x1763=x1757;
sj7=0;
cj7=1.0;
j7=0;
sj9=gconst82;
cj9=gconst83;
j9=((3.14159265)+(((-1.0)*x1762)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1762)));
IkReal gconst82=(x1761*x1763);
IkReal gconst83=((1.0)*r20*x1763);
IkReal x1765=r22*r22;
IkReal x1766=((1.0)*x1765);
CheckValue<IkReal> x1770=IKPowWithIntegerCheck(((-1.0)+x1765),-1);
if(!x1770.valid){
continue;
}
IkReal x1767=x1770.value;
if((((1.0)+(((-1.0)*x1766)))) < -0.00001)
continue;
IkReal x1768=IKsqrt(((1.0)+(((-1.0)*x1766))));
IkReal x1769=(cj4*x1767*x1768);
j8eval[0]=((IKabs((x1769+(((-1.0)*x1766*x1769)))))+(IKabs((cj4*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
IkReal x1771=((-1.0)*r21);
CheckValue<IkReal> x1774 = IKatan2WithCheck(IkReal(x1771),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1774.valid){
continue;
}
IkReal x1772=((1.0)*(x1774.value));
IkReal x1773=x1757;
sj7=0;
cj7=1.0;
j7=0;
sj9=gconst82;
cj9=gconst83;
j9=((3.14159265)+(((-1.0)*x1772)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1772)));
IkReal gconst82=(x1771*x1773);
IkReal gconst83=((1.0)*r20*x1773);
IkReal x1775=r22*r22;
IkReal x1776=((1.0)*x1775);
CheckValue<IkReal> x1780=IKPowWithIntegerCheck(((-1.0)+x1775),-1);
if(!x1780.valid){
continue;
}
IkReal x1777=x1780.value;
if((((1.0)+(((-1.0)*x1776)))) < -0.00001)
continue;
IkReal x1778=IKsqrt(((1.0)+(((-1.0)*x1776))));
IkReal x1779=(sj4*x1777*x1778);
j8eval[0]=((IKabs((r22*sj4)))+(IKabs((x1779+(((-1.0)*x1776*x1779))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
IkReal x1781=((-1.0)*r21);
CheckValue<IkReal> x1784 = IKatan2WithCheck(IkReal(x1781),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1784.valid){
continue;
}
IkReal x1782=((1.0)*(x1784.value));
IkReal x1783=x1757;
sj7=0;
cj7=1.0;
j7=0;
sj9=gconst82;
cj9=gconst83;
j9=((3.14159265)+(((-1.0)*x1782)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1782)));
IkReal gconst82=(x1781*x1783);
IkReal gconst83=((1.0)*r20*x1783);
IkReal x1785=r22*r22;
IkReal x1786=((1.0)*cj4*r02);
IkReal x1787=((1.0)*r12*sj4);
CheckValue<IkReal> x1791=IKPowWithIntegerCheck(((-1.0)+x1785),-1);
if(!x1791.valid){
continue;
}
IkReal x1788=x1791.value;
if((((1.0)+(((-1.0)*x1785)))) < -0.00001)
continue;
IkReal x1789=IKsqrt(((1.0)+(((-1.0)*x1785))));
IkReal x1790=(r22*x1788*x1789);
j8eval[0]=0;
j8eval[1]=0;
j8eval[2]=((IKabs(((((-1.0)*x1786))+(((-1.0)*x1787)))))+(IKabs(((((-1.0)*x1787*x1790))+(((-1.0)*x1786*x1790))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1792=((1.0)*cj4);
IkReal x1793=((1.0)*sj4);
CheckValue<IkReal> x1794=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*gconst83*r21)))),-1);
if(!x1794.valid){
continue;
}
CheckValue<IkReal> x1795 = IKatan2WithCheck(IkReal(((((-1.0)*gconst83*r10*x1793))+((gconst82*r11*sj4))+((cj4*gconst82*r01))+(((-1.0)*gconst83*r00*x1792)))),IkReal(((((-1.0)*r12*x1793))+(((-1.0)*r02*x1792)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1795.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1794.value)))+(x1795.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x1796=IKcos(j8);
IkReal x1797=IKsin(j8);
IkReal x1798=((1.0)*gconst83);
IkReal x1799=((1.0)*sj4);
IkReal x1800=(gconst82*r20);
IkReal x1801=(gconst82*x1796);
IkReal x1802=(gconst83*x1797);
IkReal x1803=((1.0)*gconst82*x1797);
evalcond[0]=((((-1.0)*r20*x1796*x1798))+((r21*x1801))+((r22*x1797)));
evalcond[1]=(cj4+(((-1.0)*r10*x1796*x1798))+((r12*x1797))+((r11*x1801)));
evalcond[2]=((((-1.0)*x1799))+((r02*x1797))+(((-1.0)*r00*x1796*x1798))+((r01*x1801)));
evalcond[3]=((((-1.0)*cj5*sj6))+(((-1.0)*r21*x1803))+((r22*x1796))+((r20*x1802))+(((-1.0)*cj6*sj5)));
evalcond[4]=((((-1.0)*r01*x1803))+(((-1.0)*cj4*x1800))+((r02*x1796))+((r00*x1802))+(((-1.0)*cj4*r21*x1798)));
evalcond[5]=((((-1.0)*x1799*x1800))+((r12*x1796))+(((-1.0)*r21*sj4*x1798))+((r10*x1802))+(((-1.0)*r11*x1803)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x1804=IKPowWithIntegerCheck(IKsign((((gconst83*r11))+((gconst82*r10)))),-1);
if(!x1804.valid){
continue;
}
CheckValue<IkReal> x1805 = IKatan2WithCheck(IkReal((((gconst82*r21*sj4))+(((-1.0)*gconst83*r20*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x1805.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1804.value)))+(x1805.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x1806=IKcos(j8);
IkReal x1807=IKsin(j8);
IkReal x1808=((1.0)*gconst83);
IkReal x1809=((1.0)*sj4);
IkReal x1810=(gconst82*r20);
IkReal x1811=(gconst82*x1806);
IkReal x1812=(gconst83*x1807);
IkReal x1813=((1.0)*gconst82*x1807);
evalcond[0]=(((r22*x1807))+((r21*x1811))+(((-1.0)*r20*x1806*x1808)));
evalcond[1]=(cj4+(((-1.0)*r10*x1806*x1808))+((r12*x1807))+((r11*x1811)));
evalcond[2]=((((-1.0)*x1809))+((r02*x1807))+((r01*x1811))+(((-1.0)*r00*x1806*x1808)));
evalcond[3]=((((-1.0)*cj5*sj6))+((r22*x1806))+((r20*x1812))+(((-1.0)*r21*x1813))+(((-1.0)*cj6*sj5)));
evalcond[4]=((((-1.0)*cj4*r21*x1808))+(((-1.0)*r01*x1813))+(((-1.0)*cj4*x1810))+((r02*x1806))+((r00*x1812)));
evalcond[5]=((((-1.0)*x1809*x1810))+(((-1.0)*r11*x1813))+((r12*x1806))+(((-1.0)*r21*sj4*x1808))+((r10*x1812)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x1814 = IKatan2WithCheck(IkReal((((cj4*gconst82*r21))+(((-1.0)*cj4*gconst83*r20)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1814.valid){
continue;
}
CheckValue<IkReal> x1815=IKPowWithIntegerCheck(IKsign((((gconst83*r01))+((gconst82*r00)))),-1);
if(!x1815.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x1814.value)+(((1.5707963267949)*(x1815.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x1816=IKcos(j8);
IkReal x1817=IKsin(j8);
IkReal x1818=((1.0)*gconst83);
IkReal x1819=((1.0)*sj4);
IkReal x1820=(gconst82*r20);
IkReal x1821=(gconst82*x1816);
IkReal x1822=(gconst83*x1817);
IkReal x1823=((1.0)*gconst82*x1817);
evalcond[0]=(((r22*x1817))+(((-1.0)*r20*x1816*x1818))+((r21*x1821)));
evalcond[1]=((((-1.0)*r10*x1816*x1818))+cj4+((r11*x1821))+((r12*x1817)));
evalcond[2]=((((-1.0)*x1819))+((r02*x1817))+(((-1.0)*r00*x1816*x1818))+((r01*x1821)));
evalcond[3]=((((-1.0)*cj5*sj6))+((r22*x1816))+(((-1.0)*cj6*sj5))+(((-1.0)*r21*x1823))+((r20*x1822)));
evalcond[4]=(((r02*x1816))+((r00*x1822))+(((-1.0)*cj4*x1820))+(((-1.0)*cj4*r21*x1818))+(((-1.0)*r01*x1823)));
evalcond[5]=((((-1.0)*r21*sj4*x1818))+((r10*x1822))+(((-1.0)*x1819*x1820))+(((-1.0)*r11*x1823))+((r12*x1816)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1825 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x1825)==0){
continue;
}
IkReal x1824=pow(x1825,-0.5);
CheckValue<IkReal> x1826 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1826.valid){
continue;
}
IkReal gconst84=((-1.0)*(x1826.value));
IkReal gconst85=((-1.0)*r11*x1824);
IkReal gconst86=(r10*x1824);
CheckValue<IkReal> x1827 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1827.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1827.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
CheckValue<IkReal> x1830 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1830.valid){
continue;
}
IkReal x1828=((-1.0)*(x1830.value));
IkReal x1829=x1824;
sj7=0;
cj7=1.0;
j7=0;
sj9=gconst85;
cj9=gconst86;
j9=x1828;
IkReal gconst84=x1828;
IkReal gconst85=((-1.0)*r11*x1829);
IkReal gconst86=(r10*x1829);
j8eval[0]=cj4;
j8eval[1]=r22;
j8eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1831=((1.0)*gconst86);
CheckValue<IkReal> x1832 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*r00*x1831))+((cj4*gconst85*r01))+(((-1.0)*r10*sj4*x1831))+((gconst85*r11*sj4)))),IkReal(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1832.valid){
continue;
}
CheckValue<IkReal> x1833=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst85*r20))+(((-1.0)*r21*x1831)))),-1);
if(!x1833.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x1832.value)+(((1.5707963267949)*(x1833.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x1834=IKcos(j8);
IkReal x1835=IKsin(j8);
IkReal x1836=((1.0)*r21);
IkReal x1837=((1.0)*sj4);
IkReal x1838=(gconst85*r20);
IkReal x1839=(gconst85*x1835);
IkReal x1840=(gconst86*x1835);
IkReal x1841=(gconst85*x1834);
IkReal x1842=((1.0)*gconst86*x1834);
evalcond[0]=(((r22*x1835))+(((-1.0)*r20*x1842))+((r21*x1841)));
evalcond[1]=(cj4+(((-1.0)*r10*x1842))+((r12*x1835))+((r11*x1841)));
evalcond[2]=((((-1.0)*r00*x1842))+(((-1.0)*x1837))+((r02*x1835))+((r01*x1841)));
evalcond[3]=((((-1.0)*cj5*sj6))+(((-1.0)*x1836*x1839))+((r22*x1834))+((r20*x1840))+(((-1.0)*cj6*sj5)));
evalcond[4]=((((-1.0)*r01*x1839))+(((-1.0)*cj4*x1838))+((r02*x1834))+((r00*x1840))+(((-1.0)*cj4*gconst86*x1836)));
evalcond[5]=((((-1.0)*gconst86*sj4*x1836))+(((-1.0)*r11*x1839))+(((-1.0)*x1837*x1838))+((r10*x1840))+((r12*x1834)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x1843=IKPowWithIntegerCheck(IKsign((((gconst85*r00))+((gconst86*r01)))),-1);
if(!x1843.valid){
continue;
}
CheckValue<IkReal> x1844 = IKatan2WithCheck(IkReal((((cj4*gconst85*r21))+(((-1.0)*cj4*gconst86*r20)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1844.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1843.value)))+(x1844.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x1845=IKcos(j8);
IkReal x1846=IKsin(j8);
IkReal x1847=((1.0)*r21);
IkReal x1848=((1.0)*sj4);
IkReal x1849=(gconst85*r20);
IkReal x1850=(gconst85*x1846);
IkReal x1851=(gconst86*x1846);
IkReal x1852=(gconst85*x1845);
IkReal x1853=((1.0)*gconst86*x1845);
evalcond[0]=(((r22*x1846))+((r21*x1852))+(((-1.0)*r20*x1853)));
evalcond[1]=(cj4+((r11*x1852))+((r12*x1846))+(((-1.0)*r10*x1853)));
evalcond[2]=((((-1.0)*x1848))+((r01*x1852))+((r02*x1846))+(((-1.0)*r00*x1853)));
evalcond[3]=((((-1.0)*cj5*sj6))+((r22*x1845))+(((-1.0)*x1847*x1850))+(((-1.0)*cj6*sj5))+((r20*x1851)));
evalcond[4]=(((r02*x1845))+(((-1.0)*cj4*gconst86*x1847))+((r00*x1851))+(((-1.0)*r01*x1850))+(((-1.0)*cj4*x1849)));
evalcond[5]=(((r10*x1851))+(((-1.0)*gconst86*sj4*x1847))+(((-1.0)*x1848*x1849))+((r12*x1845))+(((-1.0)*r11*x1850)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1855 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x1855)==0){
continue;
}
IkReal x1854=pow(x1855,-0.5);
CheckValue<IkReal> x1856 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1856.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x1856.value))));
IkReal gconst88=((1.0)*r11*x1854);
IkReal gconst89=((-1.0)*r10*x1854);
CheckValue<IkReal> x1857 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1857.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1857.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
CheckValue<IkReal> x1860 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1860.valid){
continue;
}
IkReal x1858=((1.0)*(x1860.value));
IkReal x1859=x1854;
sj7=0;
cj7=1.0;
j7=0;
sj9=gconst88;
cj9=gconst89;
j9=((3.14159265)+(((-1.0)*x1858)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x1858)));
IkReal gconst88=((1.0)*r11*x1859);
IkReal gconst89=((-1.0)*r10*x1859);
j8eval[0]=cj4;
j8eval[1]=r22;
j8eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[5];
CheckValue<IkReal> x1863 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1863.valid){
continue;
}
IkReal x1861=((1.0)*(x1863.value));
IkReal x1862=x1854;
sj7=0;
cj7=1.0;
j7=0;
sj9=gconst88;
cj9=gconst89;
j9=((3.14159265)+(((-1.0)*x1861)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x1861)));
IkReal gconst88=((1.0)*r11*x1862);
IkReal gconst89=((-1.0)*r10*x1862);
j8eval[0]=0;
j8eval[1]=r22;
j8eval[2]=sj4;
j8eval[3]=((1.0)+(((-1.0)*(r12*r12))));
j8eval[4]=0;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  || IKabs(j8eval[4]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
CheckValue<IkReal> x1866 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1866.valid){
continue;
}
IkReal x1864=((1.0)*(x1866.value));
IkReal x1865=x1854;
sj7=0;
cj7=1.0;
j7=0;
sj9=gconst88;
cj9=gconst89;
j9=((3.14159265)+(((-1.0)*x1864)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x1864)));
IkReal gconst88=((1.0)*r11*x1865);
IkReal gconst89=((-1.0)*r10*x1865);
IkReal x1867=r12*r12;
IkReal x1868=(cj4*r02);
IkReal x1869=x1854;
IkReal x1870=(sj4*x1869);
j8eval[0]=((IKabs(((((-1.0)*x1868))+(((-1.0)*r12*sj4)))))+(IKabs((((r12*x1868*x1869))+(((-1.0)*x1870))+((x1867*x1870))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1871=((1.0)*gconst89);
CheckValue<IkReal> x1872=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*r21*x1871)))),-1);
if(!x1872.valid){
continue;
}
CheckValue<IkReal> x1873 = IKatan2WithCheck(IkReal((((gconst88*r11*sj4))+((cj4*gconst88*r01))+(((-1.0)*r10*sj4*x1871))+(((-1.0)*cj4*r00*x1871)))),IkReal(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1873.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1872.value)))+(x1873.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x1874=IKcos(j8);
IkReal x1875=IKsin(j8);
IkReal x1876=((1.0)*sj4);
IkReal x1877=(gconst88*r20);
IkReal x1878=(gconst89*r21);
IkReal x1879=((1.0)*cj4);
IkReal x1880=(gconst88*x1874);
IkReal x1881=(gconst89*x1875);
IkReal x1882=((1.0)*gconst89*x1874);
IkReal x1883=((1.0)*gconst88*x1875);
evalcond[0]=(((r21*x1880))+((r22*x1875))+(((-1.0)*r20*x1882)));
evalcond[1]=(cj4+(((-1.0)*r10*x1882))+((r12*x1875))+((r11*x1880)));
evalcond[2]=((((-1.0)*x1876))+((r02*x1875))+((r01*x1880))+(((-1.0)*r00*x1882)));
evalcond[3]=((((-1.0)*cj5*sj6))+((r22*x1874))+((r20*x1881))+(((-1.0)*r21*x1883))+(((-1.0)*cj6*sj5)));
evalcond[4]=(((r02*x1874))+(((-1.0)*x1878*x1879))+(((-1.0)*x1877*x1879))+((r00*x1881))+(((-1.0)*r01*x1883)));
evalcond[5]=((((-1.0)*x1876*x1878))+(((-1.0)*x1876*x1877))+(((-1.0)*r11*x1883))+((r10*x1881))+((r12*x1874)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x1884 = IKatan2WithCheck(IkReal(((((-1.0)*gconst89*r20*sj4))+((gconst88*r21*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x1884.valid){
continue;
}
CheckValue<IkReal> x1885=IKPowWithIntegerCheck(IKsign((((gconst88*r10))+((gconst89*r11)))),-1);
if(!x1885.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x1884.value)+(((1.5707963267949)*(x1885.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x1886=IKcos(j8);
IkReal x1887=IKsin(j8);
IkReal x1888=((1.0)*sj4);
IkReal x1889=(gconst88*r20);
IkReal x1890=(gconst89*r21);
IkReal x1891=((1.0)*cj4);
IkReal x1892=(gconst88*x1886);
IkReal x1893=(gconst89*x1887);
IkReal x1894=((1.0)*gconst89*x1886);
IkReal x1895=((1.0)*gconst88*x1887);
evalcond[0]=((((-1.0)*r20*x1894))+((r22*x1887))+((r21*x1892)));
evalcond[1]=(((r12*x1887))+cj4+((r11*x1892))+(((-1.0)*r10*x1894)));
evalcond[2]=(((r01*x1892))+(((-1.0)*r00*x1894))+(((-1.0)*x1888))+((r02*x1887)));
evalcond[3]=((((-1.0)*cj5*sj6))+((r20*x1893))+(((-1.0)*r21*x1895))+((r22*x1886))+(((-1.0)*cj6*sj5)));
evalcond[4]=(((r00*x1893))+(((-1.0)*x1890*x1891))+(((-1.0)*x1889*x1891))+(((-1.0)*r01*x1895))+((r02*x1886)));
evalcond[5]=(((r12*x1886))+(((-1.0)*x1888*x1889))+((r10*x1893))+(((-1.0)*x1888*x1890))+(((-1.0)*r11*x1895)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x1896=IKPowWithIntegerCheck(IKsign((((gconst88*r00))+((gconst89*r01)))),-1);
if(!x1896.valid){
continue;
}
CheckValue<IkReal> x1897 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*gconst89*r20))+((cj4*gconst88*r21)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1897.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1896.value)))+(x1897.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x1898=IKcos(j8);
IkReal x1899=IKsin(j8);
IkReal x1900=((1.0)*sj4);
IkReal x1901=(gconst88*r20);
IkReal x1902=(gconst89*r21);
IkReal x1903=((1.0)*cj4);
IkReal x1904=(gconst88*x1898);
IkReal x1905=(gconst89*x1899);
IkReal x1906=((1.0)*gconst89*x1898);
IkReal x1907=((1.0)*gconst88*x1899);
evalcond[0]=(((r22*x1899))+((r21*x1904))+(((-1.0)*r20*x1906)));
evalcond[1]=(cj4+(((-1.0)*r10*x1906))+((r11*x1904))+((r12*x1899)));
evalcond[2]=(((r02*x1899))+((r01*x1904))+(((-1.0)*x1900))+(((-1.0)*r00*x1906)));
evalcond[3]=((((-1.0)*cj5*sj6))+((r22*x1898))+(((-1.0)*r21*x1907))+((r20*x1905))+(((-1.0)*cj6*sj5)));
evalcond[4]=((((-1.0)*x1902*x1903))+((r02*x1898))+((r00*x1905))+(((-1.0)*x1901*x1903))+(((-1.0)*r01*x1907)));
evalcond[5]=((((-1.0)*x1900*x1901))+(((-1.0)*x1900*x1902))+(((-1.0)*r11*x1907))+((r10*x1905))+((r12*x1898)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
sj7=0;
cj7=1.0;
j7=0;
sj4=0;
cj4=1.0;
j4=0;
IkReal x1908=(((r00*sj9))+((cj9*r01)));
j8eval[0]=x1908;
j8eval[1]=IKsign(x1908);
j8eval[2]=((IKabs(r22))+(IKabs((((r21*sj9))+(((-1.0)*cj9*r20))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=0;
cj7=1.0;
j7=0;
sj4=0;
cj4=1.0;
j4=0;
IkReal x1909=((1.0)*cj9);
IkReal x1910=((((-1.0)*r21*x1909))+(((-1.0)*r20*sj9)));
j8eval[0]=x1910;
j8eval[1]=((IKabs(r02))+(IKabs((((r01*sj9))+(((-1.0)*r00*x1909))))));
j8eval[2]=IKsign(x1910);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=0;
cj7=1.0;
j7=0;
sj4=0;
cj4=1.0;
j4=0;
IkReal x1911=r11*r11;
IkReal x1912=cj9*cj9;
IkReal x1913=(r11*sj9);
IkReal x1914=(cj9*r10);
IkReal x1915=((((2.0)*x1913*x1914))+((x1911*x1912))+(((-1.0)*x1911))+(((-1.0)*(r12*r12)))+(((-1.0)*x1912*(r10*r10))));
j8eval[0]=x1915;
j8eval[1]=IKsign(x1915);
j8eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x1914))+x1913))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1916=r11*r11;
IkReal x1917=cj9*cj9;
IkReal x1918=(r11*sj9);
IkReal x1919=(cj9*r10);
CheckValue<IkReal> x1920 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x1919))+x1918)),IKFAST_ATAN2_MAGTHRESH);
if(!x1920.valid){
continue;
}
CheckValue<IkReal> x1921=IKPowWithIntegerCheck(IKsign((((x1916*x1917))+(((-1.0)*x1916))+(((2.0)*x1918*x1919))+(((-1.0)*(r12*r12)))+(((-1.0)*x1917*(r10*r10))))),-1);
if(!x1921.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x1920.value)+(((1.5707963267949)*(x1921.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x1922=IKcos(j8);
IkReal x1923=IKsin(j8);
IkReal x1924=(cj9*r00);
IkReal x1925=((1.0)*x1922);
IkReal x1926=(cj9*x1923);
IkReal x1927=(sj9*x1922);
IkReal x1928=((1.0)*sj9*x1923);
evalcond[0]=(((r22*x1923))+((r21*x1927))+(((-1.0)*cj9*r20*x1925)));
evalcond[1]=(((r01*x1927))+((r02*x1923))+(((-1.0)*x1924*x1925)));
evalcond[2]=((((-1.0)*r11*x1928))+((r10*x1926))+((r12*x1922)));
evalcond[3]=((1.0)+((r11*x1927))+((r12*x1923))+(((-1.0)*cj9*r10*x1925)));
evalcond[4]=((((-1.0)*cj5*sj6))+((r22*x1922))+(((-1.0)*r21*x1928))+((r20*x1926))+(((-1.0)*cj6*sj5)));
evalcond[5]=((((-1.0)*r01*x1928))+((r02*x1922))+((x1923*x1924))+(((-1.0)*cj9*r21))+(((-1.0)*r20*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1929=((1.0)*cj9);
CheckValue<IkReal> x1930 = IKatan2WithCheck(IkReal((((r01*sj9))+(((-1.0)*r00*x1929)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x1930.valid){
continue;
}
CheckValue<IkReal> x1931=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1929))+(((-1.0)*r20*sj9)))),-1);
if(!x1931.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x1930.value)+(((1.5707963267949)*(x1931.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x1932=IKcos(j8);
IkReal x1933=IKsin(j8);
IkReal x1934=(cj9*r00);
IkReal x1935=((1.0)*x1932);
IkReal x1936=(cj9*x1933);
IkReal x1937=(sj9*x1932);
IkReal x1938=((1.0)*sj9*x1933);
evalcond[0]=(((r21*x1937))+((r22*x1933))+(((-1.0)*cj9*r20*x1935)));
evalcond[1]=(((r02*x1933))+((r01*x1937))+(((-1.0)*x1934*x1935)));
evalcond[2]=(((r12*x1932))+(((-1.0)*r11*x1938))+((r10*x1936)));
evalcond[3]=((1.0)+(((-1.0)*cj9*r10*x1935))+((r12*x1933))+((r11*x1937)));
evalcond[4]=((((-1.0)*cj5*sj6))+((r22*x1932))+(((-1.0)*r21*x1938))+(((-1.0)*cj6*sj5))+((r20*x1936)));
evalcond[5]=((((-1.0)*r01*x1938))+((r02*x1932))+(((-1.0)*cj9*r21))+((x1933*x1934))+(((-1.0)*r20*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x1939=IKPowWithIntegerCheck(IKsign((((r00*sj9))+((cj9*r01)))),-1);
if(!x1939.valid){
continue;
}
CheckValue<IkReal> x1940 = IKatan2WithCheck(IkReal((((r21*sj9))+(((-1.0)*cj9*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1940.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1939.value)))+(x1940.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x1941=IKcos(j8);
IkReal x1942=IKsin(j8);
IkReal x1943=(cj9*r00);
IkReal x1944=((1.0)*x1941);
IkReal x1945=(cj9*x1942);
IkReal x1946=(sj9*x1941);
IkReal x1947=((1.0)*sj9*x1942);
evalcond[0]=(((r22*x1942))+((r21*x1946))+(((-1.0)*cj9*r20*x1944)));
evalcond[1]=((((-1.0)*x1943*x1944))+((r01*x1946))+((r02*x1942)));
evalcond[2]=(((r10*x1945))+((r12*x1941))+(((-1.0)*r11*x1947)));
evalcond[3]=((1.0)+((r11*x1946))+((r12*x1942))+(((-1.0)*cj9*r10*x1944)));
evalcond[4]=((((-1.0)*r21*x1947))+(((-1.0)*cj5*sj6))+((r20*x1945))+((r22*x1941))+(((-1.0)*cj6*sj5)));
evalcond[5]=((((-1.0)*cj9*r21))+(((-1.0)*r01*x1947))+((x1942*x1943))+((r02*x1941))+(((-1.0)*r20*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
sj7=0;
cj7=1.0;
j7=0;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x1948=(((cj9*r21))+((r20*sj9)));
j8eval[0]=x1948;
j8eval[1]=((IKabs(r02))+(IKabs((((r01*sj9))+(((-1.0)*cj9*r00))))));
j8eval[2]=IKsign(x1948);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=0;
cj7=1.0;
j7=0;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x1949=((1.0)*cj9);
IkReal x1950=((((-1.0)*r00*sj9))+(((-1.0)*r01*x1949)));
j8eval[0]=x1950;
j8eval[1]=((IKabs(r22))+(IKabs((((r21*sj9))+(((-1.0)*r20*x1949))))));
j8eval[2]=IKsign(x1950);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=0;
cj7=1.0;
j7=0;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x1951=cj9*cj9;
IkReal x1952=r11*r11;
IkReal x1953=(r11*sj9);
IkReal x1954=(cj9*r10);
IkReal x1955=((r12*r12)+(((-2.0)*x1953*x1954))+(((-1.0)*x1951*x1952))+x1952+((x1951*(r10*r10))));
j8eval[0]=x1955;
j8eval[1]=IKsign(x1955);
j8eval[2]=((IKabs(r12))+(IKabs((x1953+(((-1.0)*x1954))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1956=cj9*cj9;
IkReal x1957=r11*r11;
IkReal x1958=(r11*sj9);
IkReal x1959=(cj9*r10);
CheckValue<IkReal> x1960=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x1958*x1959))+(((-1.0)*x1956*x1957))+((x1956*(r10*r10)))+x1957)),-1);
if(!x1960.valid){
continue;
}
CheckValue<IkReal> x1961 = IKatan2WithCheck(IkReal(r12),IkReal((x1958+(((-1.0)*x1959)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1961.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1960.value)))+(x1961.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x1962=IKcos(j8);
IkReal x1963=IKsin(j8);
IkReal x1964=(cj9*r00);
IkReal x1965=((1.0)*x1962);
IkReal x1966=(sj9*x1962);
IkReal x1967=(cj9*x1963);
IkReal x1968=((1.0)*sj9*x1963);
evalcond[0]=(((r21*x1966))+(((-1.0)*cj9*r20*x1965))+((r22*x1963)));
evalcond[1]=(((r02*x1963))+(((-1.0)*x1964*x1965))+((r01*x1966)));
evalcond[2]=(((r10*x1967))+((r12*x1962))+(((-1.0)*r11*x1968)));
evalcond[3]=((-1.0)+((r12*x1963))+((r11*x1966))+(((-1.0)*cj9*r10*x1965)));
evalcond[4]=(((r02*x1962))+(((-1.0)*r01*x1968))+((cj9*r21))+((x1963*x1964))+((r20*sj9)));
evalcond[5]=((((-1.0)*cj5*sj6))+((r20*x1967))+((r22*x1962))+(((-1.0)*r21*x1968))+(((-1.0)*cj6*sj5)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1969=((1.0)*cj9);
CheckValue<IkReal> x1970 = IKatan2WithCheck(IkReal((((r21*sj9))+(((-1.0)*r20*x1969)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1970.valid){
continue;
}
CheckValue<IkReal> x1971=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj9))+(((-1.0)*r01*x1969)))),-1);
if(!x1971.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x1970.value)+(((1.5707963267949)*(x1971.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x1972=IKcos(j8);
IkReal x1973=IKsin(j8);
IkReal x1974=(cj9*r00);
IkReal x1975=((1.0)*x1972);
IkReal x1976=(sj9*x1972);
IkReal x1977=(cj9*x1973);
IkReal x1978=((1.0)*sj9*x1973);
evalcond[0]=(((r21*x1976))+((r22*x1973))+(((-1.0)*cj9*r20*x1975)));
evalcond[1]=(((r02*x1973))+(((-1.0)*x1974*x1975))+((r01*x1976)));
evalcond[2]=(((r12*x1972))+((r10*x1977))+(((-1.0)*r11*x1978)));
evalcond[3]=((-1.0)+((r12*x1973))+((r11*x1976))+(((-1.0)*cj9*r10*x1975)));
evalcond[4]=(((r02*x1972))+(((-1.0)*r01*x1978))+((cj9*r21))+((x1973*x1974))+((r20*sj9)));
evalcond[5]=((((-1.0)*cj5*sj6))+((r20*x1977))+((r22*x1972))+(((-1.0)*r21*x1978))+(((-1.0)*cj6*sj5)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x1979 = IKatan2WithCheck(IkReal((((r01*sj9))+(((-1.0)*cj9*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x1979.valid){
continue;
}
CheckValue<IkReal> x1980=IKPowWithIntegerCheck(IKsign((((cj9*r21))+((r20*sj9)))),-1);
if(!x1980.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x1979.value)+(((1.5707963267949)*(x1980.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x1981=IKcos(j8);
IkReal x1982=IKsin(j8);
IkReal x1983=(cj9*r00);
IkReal x1984=((1.0)*x1981);
IkReal x1985=(sj9*x1981);
IkReal x1986=(cj9*x1982);
IkReal x1987=((1.0)*sj9*x1982);
evalcond[0]=((((-1.0)*cj9*r20*x1984))+((r21*x1985))+((r22*x1982)));
evalcond[1]=((((-1.0)*x1983*x1984))+((r01*x1985))+((r02*x1982)));
evalcond[2]=(((r10*x1986))+(((-1.0)*r11*x1987))+((r12*x1981)));
evalcond[3]=((-1.0)+((r11*x1985))+((r12*x1982))+(((-1.0)*cj9*r10*x1984)));
evalcond[4]=(((x1982*x1983))+((cj9*r21))+(((-1.0)*r01*x1987))+((r20*sj9))+((r02*x1981)));
evalcond[5]=((((-1.0)*cj5*sj6))+((r22*x1981))+(((-1.0)*r21*x1987))+(((-1.0)*cj6*sj5))+((r20*x1986)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1989 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x1989)==0){
continue;
}
IkReal x1988=pow(x1989,-0.5);
CheckValue<IkReal> x1990 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1990.valid){
continue;
}
IkReal gconst90=((-1.0)*(x1990.value));
IkReal gconst91=((-1.0)*r01*x1988);
IkReal gconst92=(r00*x1988);
CheckValue<IkReal> x1991 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1991.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1991.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
CheckValue<IkReal> x1994 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x1994.valid){
continue;
}
IkReal x1992=((-1.0)*(x1994.value));
IkReal x1993=x1988;
sj7=0;
cj7=1.0;
j7=0;
sj9=gconst91;
cj9=gconst92;
j9=x1992;
IkReal gconst90=x1992;
IkReal gconst91=((-1.0)*r01*x1993);
IkReal gconst92=(r00*x1993);
j8eval[0]=r22;
j8eval[1]=sj4;
j8eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1995=((1.0)*gconst92);
CheckValue<IkReal> x1996 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*r00*x1995))+(((-1.0)*r10*sj4*x1995))+((gconst91*r11*sj4))+((cj4*gconst91*r01)))),IkReal(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1996.valid){
continue;
}
CheckValue<IkReal> x1997=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1995))+(((-1.0)*gconst91*r20)))),-1);
if(!x1997.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x1996.value)+(((1.5707963267949)*(x1997.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x1998=IKcos(j8);
IkReal x1999=IKsin(j8);
IkReal x2000=(gconst92*r00);
IkReal x2001=((1.0)*sj4);
IkReal x2002=(gconst92*r20);
IkReal x2003=((1.0)*gconst91);
IkReal x2004=(gconst92*r10);
IkReal x2005=(gconst92*r21);
IkReal x2006=((1.0)*x1998);
IkReal x2007=(gconst91*x1998);
evalcond[0]=(((r21*x2007))+(((-1.0)*x2002*x2006))+((r22*x1999)));
evalcond[1]=(((r11*x2007))+((r12*x1999))+(((-1.0)*x2004*x2006))+cj4);
evalcond[2]=(((r01*x2007))+((r02*x1999))+(((-1.0)*x2000*x2006))+(((-1.0)*x2001)));
evalcond[3]=((((-1.0)*cj5*sj6))+(((-1.0)*r21*x1999*x2003))+((x1999*x2002))+(((-1.0)*cj6*sj5))+((r22*x1998)));
evalcond[4]=((((-1.0)*r01*x1999*x2003))+((x1999*x2000))+((r02*x1998))+(((-1.0)*cj4*x2005))+(((-1.0)*cj4*r20*x2003)));
evalcond[5]=(((r12*x1998))+(((-1.0)*gconst91*r20*x2001))+((x1999*x2004))+(((-1.0)*x2001*x2005))+(((-1.0)*r11*x1999*x2003)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x2008 = IKatan2WithCheck(IkReal(((((-1.0)*gconst92*r20*sj4))+((gconst91*r21*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x2008.valid){
continue;
}
CheckValue<IkReal> x2009=IKPowWithIntegerCheck(IKsign((((gconst91*r10))+((gconst92*r11)))),-1);
if(!x2009.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x2008.value)+(((1.5707963267949)*(x2009.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2010=IKcos(j8);
IkReal x2011=IKsin(j8);
IkReal x2012=(gconst92*r00);
IkReal x2013=((1.0)*sj4);
IkReal x2014=(gconst92*r20);
IkReal x2015=((1.0)*gconst91);
IkReal x2016=(gconst92*r10);
IkReal x2017=(gconst92*r21);
IkReal x2018=((1.0)*x2010);
IkReal x2019=(gconst91*x2010);
evalcond[0]=(((r22*x2011))+(((-1.0)*x2014*x2018))+((r21*x2019)));
evalcond[1]=(cj4+(((-1.0)*x2016*x2018))+((r12*x2011))+((r11*x2019)));
evalcond[2]=((((-1.0)*x2013))+((r01*x2019))+(((-1.0)*x2012*x2018))+((r02*x2011)));
evalcond[3]=((((-1.0)*cj5*sj6))+((r22*x2010))+((x2011*x2014))+(((-1.0)*r21*x2011*x2015))+(((-1.0)*cj6*sj5)));
evalcond[4]=((((-1.0)*r01*x2011*x2015))+((x2011*x2012))+(((-1.0)*cj4*r20*x2015))+(((-1.0)*cj4*x2017))+((r02*x2010)));
evalcond[5]=((((-1.0)*x2013*x2017))+(((-1.0)*r11*x2011*x2015))+((x2011*x2016))+((r12*x2010))+(((-1.0)*gconst91*r20*x2013)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2021 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2021)==0){
continue;
}
IkReal x2020=pow(x2021,-0.5);
CheckValue<IkReal> x2022 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2022.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2022.value))));
IkReal gconst94=((1.0)*r01*x2020);
IkReal gconst95=((-1.0)*r00*x2020);
CheckValue<IkReal> x2023 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2023.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2023.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[5];
CheckValue<IkReal> x2026 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2026.valid){
continue;
}
IkReal x2024=((1.0)*(x2026.value));
IkReal x2025=x2020;
sj7=0;
cj7=1.0;
j7=0;
sj9=gconst94;
cj9=gconst95;
j9=((3.14159265)+(((-1.0)*x2024)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2024)));
IkReal gconst94=((1.0)*r01*x2025);
IkReal gconst95=((-1.0)*r00*x2025);
j8eval[0]=0;
j8eval[1]=0;
j8eval[2]=cj4;
j8eval[3]=r22;
j8eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  || IKabs(j8eval[4]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
CheckValue<IkReal> x2029 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2029.valid){
continue;
}
IkReal x2027=((1.0)*(x2029.value));
IkReal x2028=x2020;
sj7=0;
cj7=1.0;
j7=0;
sj9=gconst94;
cj9=gconst95;
j9=((3.14159265)+(((-1.0)*x2027)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2027)));
IkReal gconst94=((1.0)*r01*x2028);
IkReal gconst95=((-1.0)*r00*x2028);
j8eval[0]=r22;
j8eval[1]=sj4;
j8eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
CheckValue<IkReal> x2032 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2032.valid){
continue;
}
IkReal x2030=((1.0)*(x2032.value));
IkReal x2031=x2020;
sj7=0;
cj7=1.0;
j7=0;
sj9=gconst94;
cj9=gconst95;
j9=((3.14159265)+(((-1.0)*x2030)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2030)));
IkReal gconst94=((1.0)*r01*x2031);
IkReal gconst95=((-1.0)*r00*x2031);
IkReal x2033=r02*r02;
IkReal x2034=(r12*sj4);
IkReal x2035=x2020;
IkReal x2036=(cj4*x2035);
j8eval[0]=((IKabs(((((-1.0)*cj4*r02))+(((-1.0)*x2034)))))+(IKabs((((x2033*x2036))+((r02*x2034*x2035))+(((-1.0)*x2036))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x2037=((1.0)*gconst95);
CheckValue<IkReal> x2038=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r20))+(((-1.0)*r21*x2037)))),-1);
if(!x2038.valid){
continue;
}
CheckValue<IkReal> x2039 = IKatan2WithCheck(IkReal((((gconst94*r11*sj4))+(((-1.0)*r10*sj4*x2037))+((cj4*gconst94*r01))+(((-1.0)*cj4*r00*x2037)))),IkReal(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2039.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2038.value)))+(x2039.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2040=IKcos(j8);
IkReal x2041=IKsin(j8);
IkReal x2042=(gconst94*r11);
IkReal x2043=((1.0)*sj4);
IkReal x2044=(gconst95*r21);
IkReal x2045=(gconst94*r20);
IkReal x2046=((1.0)*cj4);
IkReal x2047=((1.0)*x2041);
IkReal x2048=(gconst94*x2040);
IkReal x2049=(gconst95*x2041);
IkReal x2050=((1.0)*gconst95*x2040);
evalcond[0]=(((r22*x2041))+((r21*x2048))+(((-1.0)*r20*x2050)));
evalcond[1]=(((x2040*x2042))+cj4+(((-1.0)*r10*x2050))+((r12*x2041)));
evalcond[2]=((((-1.0)*r00*x2050))+(((-1.0)*x2043))+((r02*x2041))+((r01*x2048)));
evalcond[3]=((((-1.0)*cj5*sj6))+((r22*x2040))+((r20*x2049))+(((-1.0)*gconst94*r21*x2047))+(((-1.0)*cj6*sj5)));
evalcond[4]=((((-1.0)*x2045*x2046))+((r02*x2040))+(((-1.0)*x2044*x2046))+(((-1.0)*gconst94*r01*x2047))+((r00*x2049)));
evalcond[5]=(((r12*x2040))+(((-1.0)*x2043*x2044))+(((-1.0)*x2043*x2045))+((r10*x2049))+(((-1.0)*x2042*x2047)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x2051=IKPowWithIntegerCheck(IKsign((((gconst95*r11))+((gconst94*r10)))),-1);
if(!x2051.valid){
continue;
}
CheckValue<IkReal> x2052 = IKatan2WithCheck(IkReal((((gconst94*r21*sj4))+(((-1.0)*gconst95*r20*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x2052.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2051.value)))+(x2052.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2053=IKcos(j8);
IkReal x2054=IKsin(j8);
IkReal x2055=(gconst94*r11);
IkReal x2056=((1.0)*sj4);
IkReal x2057=(gconst95*r21);
IkReal x2058=(gconst94*r20);
IkReal x2059=((1.0)*cj4);
IkReal x2060=((1.0)*x2054);
IkReal x2061=(gconst94*x2053);
IkReal x2062=(gconst95*x2054);
IkReal x2063=((1.0)*gconst95*x2053);
evalcond[0]=(((r21*x2061))+((r22*x2054))+(((-1.0)*r20*x2063)));
evalcond[1]=(((r12*x2054))+(((-1.0)*r10*x2063))+((x2053*x2055))+cj4);
evalcond[2]=(((r02*x2054))+(((-1.0)*r00*x2063))+((r01*x2061))+(((-1.0)*x2056)));
evalcond[3]=((((-1.0)*cj5*sj6))+((r22*x2053))+((r20*x2062))+(((-1.0)*gconst94*r21*x2060))+(((-1.0)*cj6*sj5)));
evalcond[4]=((((-1.0)*x2058*x2059))+(((-1.0)*gconst94*r01*x2060))+(((-1.0)*x2057*x2059))+((r02*x2053))+((r00*x2062)));
evalcond[5]=(((r12*x2053))+(((-1.0)*x2055*x2060))+(((-1.0)*x2056*x2057))+(((-1.0)*x2056*x2058))+((r10*x2062)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x2064 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*gconst95*r20))+((cj4*gconst94*r21)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2064.valid){
continue;
}
CheckValue<IkReal> x2065=IKPowWithIntegerCheck(IKsign((((gconst95*r01))+((gconst94*r00)))),-1);
if(!x2065.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x2064.value)+(((1.5707963267949)*(x2065.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2066=IKcos(j8);
IkReal x2067=IKsin(j8);
IkReal x2068=(gconst94*r11);
IkReal x2069=((1.0)*sj4);
IkReal x2070=(gconst95*r21);
IkReal x2071=(gconst94*r20);
IkReal x2072=((1.0)*cj4);
IkReal x2073=((1.0)*x2067);
IkReal x2074=(gconst94*x2066);
IkReal x2075=(gconst95*x2067);
IkReal x2076=((1.0)*gconst95*x2066);
evalcond[0]=(((r22*x2067))+(((-1.0)*r20*x2076))+((r21*x2074)));
evalcond[1]=((((-1.0)*r10*x2076))+((x2066*x2068))+cj4+((r12*x2067)));
evalcond[2]=((((-1.0)*x2069))+((r02*x2067))+((r01*x2074))+(((-1.0)*r00*x2076)));
evalcond[3]=((((-1.0)*cj5*sj6))+((r22*x2066))+((r20*x2075))+(((-1.0)*gconst94*r21*x2073))+(((-1.0)*cj6*sj5)));
evalcond[4]=((((-1.0)*x2070*x2072))+(((-1.0)*x2071*x2072))+(((-1.0)*gconst94*r01*x2073))+((r02*x2066))+((r00*x2075)));
evalcond[5]=(((r12*x2066))+(((-1.0)*x2069*x2071))+(((-1.0)*x2069*x2070))+((r10*x2075))+(((-1.0)*x2068*x2073)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
sj7=0;
cj7=1.0;
j7=0;
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal x2077=(((r10*sj9))+((cj9*r11)));
j8eval[0]=x2077;
j8eval[1]=((IKabs(r22))+(IKabs((((r21*sj9))+(((-1.0)*cj9*r20))))));
j8eval[2]=IKsign(x2077);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=0;
cj7=1.0;
j7=0;
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal x2078=((1.0)*cj9);
IkReal x2079=((((-1.0)*r21*x2078))+(((-1.0)*r20*sj9)));
j8eval[0]=x2079;
j8eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x2078))+((r11*sj9))))));
j8eval[2]=IKsign(x2079);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=0;
cj7=1.0;
j7=0;
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal x2080=cj9*cj9;
IkReal x2081=r01*r01;
IkReal x2082=(cj9*r00);
IkReal x2083=(r01*sj9);
IkReal x2084=(x2081+((x2080*(r00*r00)))+(r02*r02)+(((-2.0)*x2082*x2083))+(((-1.0)*x2080*x2081)));
j8eval[0]=x2084;
j8eval[1]=((IKabs(((((-1.0)*x2082))+x2083)))+(IKabs(r02)));
j8eval[2]=IKsign(x2084);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x2085=cj9*cj9;
IkReal x2086=r01*r01;
IkReal x2087=(cj9*r00);
IkReal x2088=(r01*sj9);
CheckValue<IkReal> x2089=IKPowWithIntegerCheck(IKsign((x2086+(((-1.0)*x2085*x2086))+((x2085*(r00*r00)))+(((-2.0)*x2087*x2088))+(r02*r02))),-1);
if(!x2089.valid){
continue;
}
CheckValue<IkReal> x2090 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x2087))+x2088)),IKFAST_ATAN2_MAGTHRESH);
if(!x2090.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2089.value)))+(x2090.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2091=IKcos(j8);
IkReal x2092=IKsin(j8);
IkReal x2093=(cj9*r00);
IkReal x2094=((1.0)*x2091);
IkReal x2095=(cj9*x2092);
IkReal x2096=(sj9*x2091);
IkReal x2097=((1.0)*sj9*x2092);
evalcond[0]=((((-1.0)*cj9*r20*x2094))+((r22*x2092))+((r21*x2096)));
evalcond[1]=((((-1.0)*cj9*r10*x2094))+((r12*x2092))+((r11*x2096)));
evalcond[2]=(((x2092*x2093))+((r02*x2091))+(((-1.0)*r01*x2097)));
evalcond[3]=((-1.0)+((r01*x2096))+(((-1.0)*x2093*x2094))+((r02*x2092)));
evalcond[4]=((((-1.0)*r21*x2097))+(((-1.0)*cj5*sj6))+((r20*x2095))+((r22*x2091))+(((-1.0)*cj6*sj5)));
evalcond[5]=(((r10*x2095))+(((-1.0)*cj9*r21))+(((-1.0)*r11*x2097))+((r12*x2091))+(((-1.0)*r20*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x2098=((1.0)*cj9);
CheckValue<IkReal> x2099=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2098))+(((-1.0)*r20*sj9)))),-1);
if(!x2099.valid){
continue;
}
CheckValue<IkReal> x2100 = IKatan2WithCheck(IkReal((((r11*sj9))+(((-1.0)*r10*x2098)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x2100.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2099.value)))+(x2100.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2101=IKcos(j8);
IkReal x2102=IKsin(j8);
IkReal x2103=(cj9*r00);
IkReal x2104=((1.0)*x2101);
IkReal x2105=(cj9*x2102);
IkReal x2106=(sj9*x2101);
IkReal x2107=((1.0)*sj9*x2102);
evalcond[0]=((((-1.0)*cj9*r20*x2104))+((r21*x2106))+((r22*x2102)));
evalcond[1]=(((r12*x2102))+((r11*x2106))+(((-1.0)*cj9*r10*x2104)));
evalcond[2]=(((r02*x2101))+((x2102*x2103))+(((-1.0)*r01*x2107)));
evalcond[3]=((-1.0)+(((-1.0)*x2103*x2104))+((r02*x2102))+((r01*x2106)));
evalcond[4]=((((-1.0)*cj5*sj6))+((r20*x2105))+((r22*x2101))+(((-1.0)*r21*x2107))+(((-1.0)*cj6*sj5)));
evalcond[5]=(((r12*x2101))+(((-1.0)*r11*x2107))+((r10*x2105))+(((-1.0)*cj9*r21))+(((-1.0)*r20*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x2108=IKPowWithIntegerCheck(IKsign((((r10*sj9))+((cj9*r11)))),-1);
if(!x2108.valid){
continue;
}
CheckValue<IkReal> x2109 = IKatan2WithCheck(IkReal((((r21*sj9))+(((-1.0)*cj9*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2109.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2108.value)))+(x2109.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2110=IKcos(j8);
IkReal x2111=IKsin(j8);
IkReal x2112=(cj9*r00);
IkReal x2113=((1.0)*x2110);
IkReal x2114=(cj9*x2111);
IkReal x2115=(sj9*x2110);
IkReal x2116=((1.0)*sj9*x2111);
evalcond[0]=(((r21*x2115))+(((-1.0)*cj9*r20*x2113))+((r22*x2111)));
evalcond[1]=(((r12*x2111))+(((-1.0)*cj9*r10*x2113))+((r11*x2115)));
evalcond[2]=((((-1.0)*r01*x2116))+((x2111*x2112))+((r02*x2110)));
evalcond[3]=((-1.0)+((r01*x2115))+(((-1.0)*x2112*x2113))+((r02*x2111)));
evalcond[4]=((((-1.0)*cj5*sj6))+(((-1.0)*r21*x2116))+((r20*x2114))+(((-1.0)*cj6*sj5))+((r22*x2110)));
evalcond[5]=(((r12*x2110))+(((-1.0)*cj9*r21))+((r10*x2114))+(((-1.0)*r11*x2116))+(((-1.0)*r20*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
sj7=0;
cj7=1.0;
j7=0;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal x2117=(((cj9*r21))+((r20*sj9)));
j8eval[0]=x2117;
j8eval[1]=((IKabs(r12))+(IKabs((((r11*sj9))+(((-1.0)*cj9*r10))))));
j8eval[2]=IKsign(x2117);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=0;
cj7=1.0;
j7=0;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal x2118=((1.0)*cj9);
IkReal x2119=((((-1.0)*r10*sj9))+(((-1.0)*r11*x2118)));
j8eval[0]=x2119;
j8eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x2118))+((r21*sj9))))));
j8eval[2]=IKsign(x2119);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=0;
cj7=1.0;
j7=0;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal x2120=cj9*cj9;
IkReal x2121=r01*r01;
IkReal x2122=(r01*sj9);
IkReal x2123=(cj9*r00);
IkReal x2124=((((-1.0)*x2120*(r00*r00)))+(((-1.0)*(r02*r02)))+(((-1.0)*x2121))+((x2120*x2121))+(((2.0)*x2122*x2123)));
j8eval[0]=x2124;
j8eval[1]=IKsign(x2124);
j8eval[2]=((IKabs(r02))+(IKabs((x2122+(((-1.0)*x2123))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x2125=cj9*cj9;
IkReal x2126=r01*r01;
IkReal x2127=(r01*sj9);
IkReal x2128=(cj9*r00);
CheckValue<IkReal> x2129=IKPowWithIntegerCheck(IKsign((((x2125*x2126))+(((2.0)*x2127*x2128))+(((-1.0)*(r02*r02)))+(((-1.0)*x2126))+(((-1.0)*x2125*(r00*r00))))),-1);
if(!x2129.valid){
continue;
}
CheckValue<IkReal> x2130 = IKatan2WithCheck(IkReal(r02),IkReal((x2127+(((-1.0)*x2128)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2130.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2129.value)))+(x2130.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2131=IKcos(j8);
IkReal x2132=IKsin(j8);
IkReal x2133=(cj9*r00);
IkReal x2134=((1.0)*x2131);
IkReal x2135=(sj9*x2131);
IkReal x2136=(cj9*x2132);
IkReal x2137=((1.0)*sj9*x2132);
evalcond[0]=((((-1.0)*cj9*r20*x2134))+((r21*x2135))+((r22*x2132)));
evalcond[1]=(((r12*x2132))+((r11*x2135))+(((-1.0)*cj9*r10*x2134)));
evalcond[2]=(((r02*x2131))+(((-1.0)*r01*x2137))+((x2132*x2133)));
evalcond[3]=((1.0)+((r02*x2132))+((r01*x2135))+(((-1.0)*x2133*x2134)));
evalcond[4]=(((r12*x2131))+(((-1.0)*r11*x2137))+((r10*x2136))+((cj9*r21))+((r20*sj9)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*r21*x2137))+((r22*x2131))+(((-1.0)*cj6*sj5))+((r20*x2136)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x2138=((1.0)*cj9);
CheckValue<IkReal> x2139 = IKatan2WithCheck(IkReal((((r21*sj9))+(((-1.0)*r20*x2138)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2139.valid){
continue;
}
CheckValue<IkReal> x2140=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj9))+(((-1.0)*r11*x2138)))),-1);
if(!x2140.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x2139.value)+(((1.5707963267949)*(x2140.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2141=IKcos(j8);
IkReal x2142=IKsin(j8);
IkReal x2143=(cj9*r00);
IkReal x2144=((1.0)*x2141);
IkReal x2145=(sj9*x2141);
IkReal x2146=(cj9*x2142);
IkReal x2147=((1.0)*sj9*x2142);
evalcond[0]=((((-1.0)*cj9*r20*x2144))+((r21*x2145))+((r22*x2142)));
evalcond[1]=(((r11*x2145))+(((-1.0)*cj9*r10*x2144))+((r12*x2142)));
evalcond[2]=((((-1.0)*r01*x2147))+((r02*x2141))+((x2142*x2143)));
evalcond[3]=((1.0)+(((-1.0)*x2143*x2144))+((r02*x2142))+((r01*x2145)));
evalcond[4]=((((-1.0)*r11*x2147))+((cj9*r21))+((r10*x2146))+((r12*x2141))+((r20*sj9)));
evalcond[5]=((((-1.0)*cj5*sj6))+((r20*x2146))+(((-1.0)*r21*x2147))+((r22*x2141))+(((-1.0)*cj6*sj5)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x2148=IKPowWithIntegerCheck(IKsign((((cj9*r21))+((r20*sj9)))),-1);
if(!x2148.valid){
continue;
}
CheckValue<IkReal> x2149 = IKatan2WithCheck(IkReal((((r11*sj9))+(((-1.0)*cj9*r10)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x2149.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2148.value)))+(x2149.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2150=IKcos(j8);
IkReal x2151=IKsin(j8);
IkReal x2152=(cj9*r00);
IkReal x2153=((1.0)*x2150);
IkReal x2154=(sj9*x2150);
IkReal x2155=(cj9*x2151);
IkReal x2156=((1.0)*sj9*x2151);
evalcond[0]=(((r22*x2151))+(((-1.0)*cj9*r20*x2153))+((r21*x2154)));
evalcond[1]=((((-1.0)*cj9*r10*x2153))+((r12*x2151))+((r11*x2154)));
evalcond[2]=((((-1.0)*r01*x2156))+((r02*x2150))+((x2151*x2152)));
evalcond[3]=((1.0)+(((-1.0)*x2152*x2153))+((r02*x2151))+((r01*x2154)));
evalcond[4]=(((cj9*r21))+(((-1.0)*r11*x2156))+((r10*x2155))+((r12*x2150))+((r20*sj9)));
evalcond[5]=((((-1.0)*cj5*sj6))+((r20*x2155))+((r22*x2150))+(((-1.0)*cj6*sj5))+(((-1.0)*r21*x2156)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x2157=((-1.0)*px);
sj7=0;
cj7=1.0;
j7=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2157);
rxp1_1=(px*r21);
rxp1_2=(r11*x2157);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j8eval[0]=(((cj9*r20))+(((-1.0)*r21*sj9)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x2159=IKPowWithIntegerCheck((((cj9*r20))+(((-1.0)*r21*sj9))),-1);
if(!x2159.valid){
continue;
}
IkReal x2158=x2159.value;
sj8array[0]=(((cj6*sj5*x2158))+((cj5*sj6*x2158)));
if( sj8array[0] >= -1-IKFAST_SINCOS_THRESH && sj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKasin(sj8array[0]);
    cj8array[0] = IKcos(j8array[0]);
    sj8array[1] = sj8array[0];
    j8array[1] = j8array[0] > 0 ? (IKPI-j8array[0]) : (-IKPI-j8array[0]);
    cj8array[1] = -cj8array[0];
}
else if( isnan(sj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[3];
IkReal x2160=IKcos(j8);
IkReal x2161=(sj9*x2160);
IkReal x2162=((1.0)*cj9*x2160);
evalcond[0]=(r02*x2160);
evalcond[1]=((((-1.0)*r20*x2162))+((r21*x2161)));
evalcond[2]=((((-1.0)*r10*x2162))+((r11*x2161)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x2163=((1.0)*cj9);
CheckValue<IkReal> x2164 = IKatan2WithCheck(IkReal(((((-1.0)*r10*sj4*x2163))+((r11*sj4*sj9))+(((-1.0)*cj4*r00*x2163))+((cj4*r01*sj9)))),IkReal(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2164.valid){
continue;
}
CheckValue<IkReal> x2165=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2163))+(((-1.0)*r20*sj9)))),-1);
if(!x2165.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x2164.value)+(((1.5707963267949)*(x2165.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2166=IKcos(j8);
IkReal x2167=IKsin(j8);
IkReal x2168=(cj9*r00);
IkReal x2169=((1.0)*sj4);
IkReal x2170=(r20*sj9);
IkReal x2171=((1.0)*cj4);
IkReal x2172=(cj9*r21);
IkReal x2173=((1.0)*x2166);
IkReal x2174=(cj9*x2167);
IkReal x2175=(sj9*x2166);
IkReal x2176=((1.0)*sj9*x2167);
evalcond[0]=(((r21*x2175))+(((-1.0)*cj9*r20*x2173))+((r22*x2167)));
evalcond[1]=(((r12*x2167))+((r11*x2175))+cj4+(((-1.0)*cj9*r10*x2173)));
evalcond[2]=((((-1.0)*x2168*x2173))+((r01*x2175))+((r02*x2167))+(((-1.0)*x2169)));
evalcond[3]=((((-1.0)*r21*x2176))+(((-1.0)*cj5*sj6))+((r20*x2174))+((r22*x2166))+(((-1.0)*cj6*sj5)));
evalcond[4]=((((-1.0)*x2171*x2172))+(((-1.0)*x2170*x2171))+((r02*x2166))+((x2167*x2168))+(((-1.0)*r01*x2176)));
evalcond[5]=(((r12*x2166))+(((-1.0)*x2169*x2170))+(((-1.0)*x2169*x2172))+((r10*x2174))+(((-1.0)*r11*x2176)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x2177 = IKatan2WithCheck(IkReal((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x2177.valid){
continue;
}
CheckValue<IkReal> x2178=IKPowWithIntegerCheck(IKsign((((r10*sj9))+((cj9*r11)))),-1);
if(!x2178.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x2177.value)+(((1.5707963267949)*(x2178.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2179=IKcos(j8);
IkReal x2180=IKsin(j8);
IkReal x2181=(cj9*r00);
IkReal x2182=((1.0)*sj4);
IkReal x2183=(r20*sj9);
IkReal x2184=((1.0)*cj4);
IkReal x2185=(cj9*r21);
IkReal x2186=((1.0)*x2179);
IkReal x2187=(cj9*x2180);
IkReal x2188=(sj9*x2179);
IkReal x2189=((1.0)*sj9*x2180);
evalcond[0]=(((r22*x2180))+((r21*x2188))+(((-1.0)*cj9*r20*x2186)));
evalcond[1]=((((-1.0)*cj9*r10*x2186))+cj4+((r12*x2180))+((r11*x2188)));
evalcond[2]=((((-1.0)*x2182))+(((-1.0)*x2181*x2186))+((r02*x2180))+((r01*x2188)));
evalcond[3]=((((-1.0)*cj5*sj6))+((r22*x2179))+(((-1.0)*r21*x2189))+((r20*x2187))+(((-1.0)*cj6*sj5)));
evalcond[4]=(((x2180*x2181))+((r02*x2179))+(((-1.0)*x2184*x2185))+(((-1.0)*x2183*x2184))+(((-1.0)*r01*x2189)));
evalcond[5]=((((-1.0)*x2182*x2185))+(((-1.0)*x2182*x2183))+(((-1.0)*r11*x2189))+((r12*x2179))+((r10*x2187)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x2190=IKPowWithIntegerCheck(IKsign((((r00*sj9))+((cj9*r01)))),-1);
if(!x2190.valid){
continue;
}
CheckValue<IkReal> x2191 = IKatan2WithCheck(IkReal((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2191.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2190.value)))+(x2191.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2192=IKcos(j8);
IkReal x2193=IKsin(j8);
IkReal x2194=(cj9*r00);
IkReal x2195=((1.0)*sj4);
IkReal x2196=(r20*sj9);
IkReal x2197=((1.0)*cj4);
IkReal x2198=(cj9*r21);
IkReal x2199=((1.0)*x2192);
IkReal x2200=(cj9*x2193);
IkReal x2201=(sj9*x2192);
IkReal x2202=((1.0)*sj9*x2193);
evalcond[0]=(((r22*x2193))+(((-1.0)*cj9*r20*x2199))+((r21*x2201)));
evalcond[1]=(cj4+(((-1.0)*cj9*r10*x2199))+((r11*x2201))+((r12*x2193)));
evalcond[2]=(((r01*x2201))+(((-1.0)*x2194*x2199))+(((-1.0)*x2195))+((r02*x2193)));
evalcond[3]=((((-1.0)*cj5*sj6))+((r22*x2192))+((r20*x2200))+(((-1.0)*r21*x2202))+(((-1.0)*cj6*sj5)));
evalcond[4]=(((x2193*x2194))+(((-1.0)*x2196*x2197))+(((-1.0)*x2197*x2198))+((r02*x2192))+(((-1.0)*r01*x2202)));
evalcond[5]=((((-1.0)*x2195*x2198))+(((-1.0)*x2195*x2196))+(((-1.0)*r11*x2202))+((r12*x2192))+((r10*x2200)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x2203=cj9*cj9;
IkReal x2204=r21*r21;
IkReal x2205=(cj5*sj6);
IkReal x2206=(r21*sj9);
IkReal x2207=(cj9*r20);
IkReal x2208=(cj6*sj5);
CheckValue<IkReal> x2209=IKPowWithIntegerCheck(IKsign((x2204+(r22*r22)+(((-1.0)*x2203*x2204))+(((-2.0)*x2206*x2207))+((x2203*(r20*r20))))),-1);
if(!x2209.valid){
continue;
}
CheckValue<IkReal> x2210 = IKatan2WithCheck(IkReal(((((-1.0)*x2206*x2208))+((x2205*x2207))+((x2207*x2208))+(((-1.0)*x2205*x2206)))),IkReal((((r22*x2205))+((r22*x2208)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2210.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2209.value)))+(x2210.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[2];
IkReal x2211=IKcos(j8);
IkReal x2212=IKsin(j8);
IkReal x2213=(r21*sj9);
IkReal x2214=(cj9*r20);
evalcond[0]=((((-1.0)*x2211*x2214))+((x2211*x2213))+((r22*x2212)));
evalcond[1]=((((-1.0)*cj5*sj6))+(((-1.0)*x2212*x2213))+((x2212*x2214))+((r22*x2211))+(((-1.0)*cj6*sj5)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2215=(cj8*cj9);
IkReal x2216=(cj8*sj9);
if( IKabs((((r01*x2216))+(((-1.0)*r00*x2215))+((r02*sj8)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x2216))+((r10*x2215))+(((-1.0)*r12*sj8)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x2216))+(((-1.0)*r00*x2215))+((r02*sj8))))+IKsqr(((((-1.0)*r11*x2216))+((r10*x2215))+(((-1.0)*r12*sj8))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r01*x2216))+(((-1.0)*r00*x2215))+((r02*sj8))), ((((-1.0)*r11*x2216))+((r10*x2215))+(((-1.0)*r12*sj8))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x2217=IKcos(j4);
IkReal x2218=IKsin(j4);
IkReal x2219=(cj9*r10);
IkReal x2220=(cj6*sj5);
IkReal x2221=(cj5*sj6);
IkReal x2222=((1.0)*sj9);
IkReal x2223=(cj8*sj9);
IkReal x2224=((0.09465)*cj9);
IkReal x2225=((1.0)*cj8);
IkReal x2226=((0.425)*sj5);
IkReal x2227=(cj9*r21);
IkReal x2228=((1.0)*cj9);
IkReal x2229=(cj9*r00);
IkReal x2230=((0.09465)*sj9);
IkReal x2231=((1.0)*x2218);
IkReal x2232=((0.39225)*x2218);
IkReal x2233=((1.0)*x2217);
IkReal x2234=((0.39225)*x2217);
evalcond[0]=((((-1.0)*x2219*x2225))+x2217+((r12*sj8))+((r11*x2223)));
evalcond[1]=((((-1.0)*x2225*x2229))+((r02*sj8))+(((-1.0)*x2231))+((r01*x2223)));
evalcond[2]=((((-1.0)*x2221*x2233))+(((-1.0)*x2220*x2233))+(((-1.0)*r00*x2222))+(((-1.0)*r01*x2228)));
evalcond[3]=((((-1.0)*r10*x2222))+(((-1.0)*x2221*x2231))+(((-1.0)*x2220*x2231))+(((-1.0)*r11*x2228)));
evalcond[4]=(((sj8*x2229))+(((-1.0)*r20*x2217*x2222))+((cj8*r02))+(((-1.0)*x2227*x2233))+(((-1.0)*r01*sj8*x2222)));
evalcond[5]=((((-1.0)*x2227*x2231))+((cj8*r12))+(((-1.0)*r20*x2218*x2222))+(((-1.0)*r11*sj8*x2222))+((sj8*x2219)));
evalcond[6]=((((-0.10915)*x2218))+(((-1.0)*r01*x2224))+(((-1.0)*r00*x2230))+(((-1.0)*px))+((x2217*x2226))+((x2221*x2234))+((x2220*x2234)));
evalcond[7]=((((-1.0)*r10*x2230))+(((0.10915)*x2217))+((x2218*x2226))+(((-1.0)*py))+(((-1.0)*r11*x2224))+((x2221*x2232))+((x2220*x2232)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2235=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*sj6))+(((-1.0)*cj6*sj5)))),-1);
if(!x2235.valid){
continue;
}
CheckValue<IkReal> x2236 = IKatan2WithCheck(IkReal((((r10*sj9))+((cj9*r11)))),IkReal((((r00*sj9))+((cj9*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2236.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2235.value)))+(x2236.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x2237=IKcos(j4);
IkReal x2238=IKsin(j4);
IkReal x2239=(cj6*sj5);
IkReal x2240=((0.09465)*cj9);
IkReal x2241=(cj5*sj6);
IkReal x2242=(r00*sj9);
IkReal x2243=((0.425)*sj5);
IkReal x2244=((1.0)*cj9);
IkReal x2245=(r10*sj9);
IkReal x2246=((1.0)*x2237);
IkReal x2247=((0.39225)*x2237);
IkReal x2248=(x2238*x2239);
evalcond[0]=((((-1.0)*x2242))+(((-1.0)*r01*x2244))+(((-1.0)*x2241*x2246))+(((-1.0)*x2239*x2246)));
evalcond[1]=((((-1.0)*x2245))+(((-1.0)*x2248))+(((-1.0)*x2238*x2241))+(((-1.0)*r11*x2244)));
evalcond[2]=(((x2241*x2247))+(((-1.0)*r01*x2240))+(((-1.0)*px))+(((-0.10915)*x2238))+(((-0.09465)*x2242))+((x2237*x2243))+((x2239*x2247)));
evalcond[3]=((((-1.0)*py))+(((-1.0)*r11*x2240))+(((0.39225)*x2248))+(((-0.09465)*x2245))+(((0.39225)*x2238*x2241))+(((0.10915)*x2237))+((x2238*x2243)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j8eval[3];
sj7=0;
cj7=1.0;
j7=0;
IkReal x2249=(((r00*sj9))+((cj9*r01)));
j8eval[0]=x2249;
j8eval[1]=IKsign(x2249);
j8eval[2]=((IKabs((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))))+(IKabs((cj4*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=0;
cj7=1.0;
j7=0;
IkReal x2250=(((r10*sj9))+((cj9*r11)));
j8eval[0]=x2250;
j8eval[1]=IKsign(x2250);
j8eval[2]=((IKabs((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))))+(IKabs((r22*sj4))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=0;
cj7=1.0;
j7=0;
IkReal x2251=((1.0)*cj9);
IkReal x2252=((((-1.0)*r21*x2251))+(((-1.0)*r20*sj9)));
j8eval[0]=x2252;
j8eval[1]=((IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))))+(IKabs(((((-1.0)*cj4*r00*x2251))+((r11*sj4*sj9))+((cj4*r01*sj9))+(((-1.0)*r10*sj4*x2251))))));
j8eval[2]=IKsign(x2252);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x2253=((-1.0)*r20);
IkReal x2255 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2255)==0){
continue;
}
IkReal x2254=pow(x2255,-0.5);
CheckValue<IkReal> x2256 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2253),IKFAST_ATAN2_MAGTHRESH);
if(!x2256.valid){
continue;
}
IkReal gconst78=((-1.0)*(x2256.value));
IkReal gconst79=(r21*x2254);
IkReal gconst80=(x2253*x2254);
CheckValue<IkReal> x2257 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2257.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2257.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x2258=((-1.0)*r20);
IkReal x2259=x2254;
CheckValue<IkReal> x2261 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2258),IKFAST_ATAN2_MAGTHRESH);
if(!x2261.valid){
continue;
}
IkReal x2260=((-1.0)*(x2261.value));
sj7=0;
cj7=1.0;
j7=0;
sj9=gconst79;
cj9=gconst80;
j9=x2260;
IkReal gconst78=x2260;
IkReal gconst79=(r21*x2259);
IkReal gconst80=(x2258*x2259);
j8eval[0]=cj4;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
IkReal x2262=((-1.0)*r20);
IkReal x2263=x2254;
CheckValue<IkReal> x2265 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2262),IKFAST_ATAN2_MAGTHRESH);
if(!x2265.valid){
continue;
}
IkReal x2264=((-1.0)*(x2265.value));
sj7=0;
cj7=1.0;
j7=0;
sj9=gconst79;
cj9=gconst80;
j9=x2264;
IkReal gconst78=x2264;
IkReal gconst79=(r21*x2263);
IkReal gconst80=(x2262*x2263);
j8eval[0]=sj4;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x2266=((-1.0)*r20);
IkReal x2267=x2254;
CheckValue<IkReal> x2269 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2266),IKFAST_ATAN2_MAGTHRESH);
if(!x2269.valid){
continue;
}
IkReal x2268=((-1.0)*(x2269.value));
sj7=0;
cj7=1.0;
j7=0;
sj9=gconst79;
cj9=gconst80;
j9=x2268;
IkReal gconst78=x2268;
IkReal gconst79=(r21*x2267);
IkReal gconst80=(x2266*x2267);
IkReal x2270=r22*r22;
CheckValue<IkReal> x2273=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x2270))),-1);
if(!x2273.valid){
continue;
}
IkReal x2271=x2273.value;
IkReal x2272=(x2270+((x2271*(r21*r21*r21*r21)))+(((2.0)*x2271*(r20*r20)*(r21*r21)))+((x2271*(r20*r20*r20*r20))));
j8eval[0]=x2272;
j8eval[1]=IKsign(x2272);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x2274=(cj5*sj6);
IkReal x2275=(gconst79*r21);
IkReal x2276=(gconst80*r20);
IkReal x2277=(cj6*sj5);
CheckValue<IkReal> x2278 = IKatan2WithCheck(IkReal(((((-1.0)*x2274*x2275))+(((-1.0)*x2275*x2277))+((x2276*x2277))+((x2274*x2276)))),IkReal((((r22*x2274))+((r22*x2277)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2278.valid){
continue;
}
CheckValue<IkReal> x2279=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x2275*x2275)+(((-2.0)*x2275*x2276))+(x2276*x2276))),-1);
if(!x2279.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x2278.value)+(((1.5707963267949)*(x2279.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2280=IKcos(j8);
IkReal x2281=IKsin(j8);
IkReal x2282=((1.0)*sj4);
IkReal x2283=(gconst80*r21);
IkReal x2284=(gconst79*r20);
IkReal x2285=((1.0)*cj4);
IkReal x2286=(gconst79*x2280);
IkReal x2287=(gconst80*x2281);
IkReal x2288=((1.0)*gconst79*x2281);
IkReal x2289=((1.0)*gconst80*x2280);
evalcond[0]=(((r21*x2286))+(((-1.0)*r20*x2289))+((r22*x2281)));
evalcond[1]=(((r11*x2286))+cj4+((r12*x2281))+(((-1.0)*r10*x2289)));
evalcond[2]=((((-1.0)*x2282))+((r01*x2286))+(((-1.0)*r00*x2289))+((r02*x2281)));
evalcond[3]=((((-1.0)*cj5*sj6))+((r20*x2287))+(((-1.0)*r21*x2288))+(((-1.0)*cj6*sj5))+((r22*x2280)));
evalcond[4]=((((-1.0)*x2284*x2285))+((r00*x2287))+(((-1.0)*r01*x2288))+(((-1.0)*x2283*x2285))+((r02*x2280)));
evalcond[5]=((((-1.0)*x2282*x2283))+(((-1.0)*x2282*x2284))+((r10*x2287))+((r12*x2280))+(((-1.0)*r11*x2288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x2290=IKPowWithIntegerCheck(IKsign((((gconst80*r11))+((gconst79*r10)))),-1);
if(!x2290.valid){
continue;
}
CheckValue<IkReal> x2291 = IKatan2WithCheck(IkReal((((gconst79*r21*sj4))+(((-1.0)*gconst80*r20*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x2291.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2290.value)))+(x2291.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2292=IKcos(j8);
IkReal x2293=IKsin(j8);
IkReal x2294=((1.0)*sj4);
IkReal x2295=(gconst80*r21);
IkReal x2296=(gconst79*r20);
IkReal x2297=((1.0)*cj4);
IkReal x2298=(gconst79*x2292);
IkReal x2299=(gconst80*x2293);
IkReal x2300=((1.0)*gconst79*x2293);
IkReal x2301=((1.0)*gconst80*x2292);
evalcond[0]=((((-1.0)*r20*x2301))+((r22*x2293))+((r21*x2298)));
evalcond[1]=((((-1.0)*r10*x2301))+cj4+((r12*x2293))+((r11*x2298)));
evalcond[2]=((((-1.0)*r00*x2301))+((r02*x2293))+(((-1.0)*x2294))+((r01*x2298)));
evalcond[3]=((((-1.0)*cj5*sj6))+(((-1.0)*r21*x2300))+((r22*x2292))+((r20*x2299))+(((-1.0)*cj6*sj5)));
evalcond[4]=((((-1.0)*r01*x2300))+((r02*x2292))+(((-1.0)*x2296*x2297))+((r00*x2299))+(((-1.0)*x2295*x2297)));
evalcond[5]=((((-1.0)*r11*x2300))+((r10*x2299))+((r12*x2292))+(((-1.0)*x2294*x2296))+(((-1.0)*x2294*x2295)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x2302=IKPowWithIntegerCheck(IKsign((((gconst79*r00))+((gconst80*r01)))),-1);
if(!x2302.valid){
continue;
}
CheckValue<IkReal> x2303 = IKatan2WithCheck(IkReal((((cj4*gconst79*r21))+(((-1.0)*cj4*gconst80*r20)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2303.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2302.value)))+(x2303.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2304=IKcos(j8);
IkReal x2305=IKsin(j8);
IkReal x2306=((1.0)*sj4);
IkReal x2307=(gconst80*r21);
IkReal x2308=(gconst79*r20);
IkReal x2309=((1.0)*cj4);
IkReal x2310=(gconst79*x2304);
IkReal x2311=(gconst80*x2305);
IkReal x2312=((1.0)*gconst79*x2305);
IkReal x2313=((1.0)*gconst80*x2304);
evalcond[0]=((((-1.0)*r20*x2313))+((r21*x2310))+((r22*x2305)));
evalcond[1]=(((r12*x2305))+cj4+((r11*x2310))+(((-1.0)*r10*x2313)));
evalcond[2]=(((r02*x2305))+(((-1.0)*x2306))+((r01*x2310))+(((-1.0)*r00*x2313)));
evalcond[3]=((((-1.0)*cj5*sj6))+((r22*x2304))+((r20*x2311))+(((-1.0)*cj6*sj5))+(((-1.0)*r21*x2312)));
evalcond[4]=(((r02*x2304))+(((-1.0)*x2308*x2309))+((r00*x2311))+(((-1.0)*r01*x2312))+(((-1.0)*x2307*x2309)));
evalcond[5]=((((-1.0)*x2306*x2308))+(((-1.0)*x2306*x2307))+((r10*x2311))+((r12*x2304))+(((-1.0)*r11*x2312)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2314=((-1.0)*r21);
IkReal x2316 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2316)==0){
continue;
}
IkReal x2315=pow(x2316,-0.5);
CheckValue<IkReal> x2317 = IKatan2WithCheck(IkReal(x2314),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2317.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x2317.value))));
IkReal gconst82=(x2314*x2315);
IkReal gconst83=((1.0)*r20*x2315);
CheckValue<IkReal> x2318 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2318.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2318.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x2319=((-1.0)*r21);
CheckValue<IkReal> x2322 = IKatan2WithCheck(IkReal(x2319),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2322.valid){
continue;
}
IkReal x2320=((1.0)*(x2322.value));
IkReal x2321=x2315;
sj7=0;
cj7=1.0;
j7=0;
sj9=gconst82;
cj9=gconst83;
j9=((3.14159265)+(((-1.0)*x2320)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2320)));
IkReal gconst82=(x2319*x2321);
IkReal gconst83=((1.0)*r20*x2321);
IkReal x2323=r22*r22;
IkReal x2324=((1.0)*x2323);
CheckValue<IkReal> x2328=IKPowWithIntegerCheck(((-1.0)+x2323),-1);
if(!x2328.valid){
continue;
}
IkReal x2325=x2328.value;
if((((1.0)+(((-1.0)*x2324)))) < -0.00001)
continue;
IkReal x2326=IKsqrt(((1.0)+(((-1.0)*x2324))));
IkReal x2327=(cj4*x2325*x2326);
j8eval[0]=((IKabs(((((-1.0)*x2324*x2327))+x2327)))+(IKabs((cj4*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
IkReal x2329=((-1.0)*r21);
CheckValue<IkReal> x2332 = IKatan2WithCheck(IkReal(x2329),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2332.valid){
continue;
}
IkReal x2330=((1.0)*(x2332.value));
IkReal x2331=x2315;
sj7=0;
cj7=1.0;
j7=0;
sj9=gconst82;
cj9=gconst83;
j9=((3.14159265)+(((-1.0)*x2330)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2330)));
IkReal gconst82=(x2329*x2331);
IkReal gconst83=((1.0)*r20*x2331);
IkReal x2333=r22*r22;
IkReal x2334=((1.0)*x2333);
CheckValue<IkReal> x2338=IKPowWithIntegerCheck(((-1.0)+x2333),-1);
if(!x2338.valid){
continue;
}
IkReal x2335=x2338.value;
if((((1.0)+(((-1.0)*x2334)))) < -0.00001)
continue;
IkReal x2336=IKsqrt(((1.0)+(((-1.0)*x2334))));
IkReal x2337=(sj4*x2335*x2336);
j8eval[0]=((IKabs((r22*sj4)))+(IKabs((x2337+(((-1.0)*x2334*x2337))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
IkReal x2339=((-1.0)*r21);
CheckValue<IkReal> x2342 = IKatan2WithCheck(IkReal(x2339),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2342.valid){
continue;
}
IkReal x2340=((1.0)*(x2342.value));
IkReal x2341=x2315;
sj7=0;
cj7=1.0;
j7=0;
sj9=gconst82;
cj9=gconst83;
j9=((3.14159265)+(((-1.0)*x2340)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2340)));
IkReal gconst82=(x2339*x2341);
IkReal gconst83=((1.0)*r20*x2341);
IkReal x2343=r22*r22;
IkReal x2344=((1.0)*cj4*r02);
IkReal x2345=((1.0)*r12*sj4);
CheckValue<IkReal> x2349=IKPowWithIntegerCheck(((-1.0)+x2343),-1);
if(!x2349.valid){
continue;
}
IkReal x2346=x2349.value;
if((((1.0)+(((-1.0)*x2343)))) < -0.00001)
continue;
IkReal x2347=IKsqrt(((1.0)+(((-1.0)*x2343))));
IkReal x2348=(r22*x2346*x2347);
j8eval[0]=0;
j8eval[1]=0;
j8eval[2]=((IKabs(((((-1.0)*x2345*x2348))+(((-1.0)*x2344*x2348)))))+(IKabs(((((-1.0)*x2344))+(((-1.0)*x2345))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x2350=((1.0)*cj4);
IkReal x2351=((1.0)*sj4);
CheckValue<IkReal> x2352=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*gconst83*r21)))),-1);
if(!x2352.valid){
continue;
}
CheckValue<IkReal> x2353 = IKatan2WithCheck(IkReal(((((-1.0)*gconst83*r00*x2350))+(((-1.0)*gconst83*r10*x2351))+((gconst82*r11*sj4))+((cj4*gconst82*r01)))),IkReal(((((-1.0)*r02*x2350))+(((-1.0)*r12*x2351)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2353.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2352.value)))+(x2353.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2354=IKcos(j8);
IkReal x2355=IKsin(j8);
IkReal x2356=((1.0)*gconst83);
IkReal x2357=((1.0)*sj4);
IkReal x2358=(gconst82*r20);
IkReal x2359=(gconst82*x2354);
IkReal x2360=(gconst83*x2355);
IkReal x2361=((1.0)*gconst82*x2355);
evalcond[0]=(((r22*x2355))+((r21*x2359))+(((-1.0)*r20*x2354*x2356)));
evalcond[1]=(cj4+((r12*x2355))+((r11*x2359))+(((-1.0)*r10*x2354*x2356)));
evalcond[2]=((((-1.0)*r00*x2354*x2356))+((r01*x2359))+((r02*x2355))+(((-1.0)*x2357)));
evalcond[3]=((((-1.0)*cj5*sj6))+((r20*x2360))+((r22*x2354))+(((-1.0)*r21*x2361))+(((-1.0)*cj6*sj5)));
evalcond[4]=((((-1.0)*cj4*x2358))+(((-1.0)*r01*x2361))+(((-1.0)*cj4*r21*x2356))+((r02*x2354))+((r00*x2360)));
evalcond[5]=((((-1.0)*x2357*x2358))+((r12*x2354))+(((-1.0)*r21*sj4*x2356))+((r10*x2360))+(((-1.0)*r11*x2361)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x2362=IKPowWithIntegerCheck(IKsign((((gconst83*r11))+((gconst82*r10)))),-1);
if(!x2362.valid){
continue;
}
CheckValue<IkReal> x2363 = IKatan2WithCheck(IkReal((((gconst82*r21*sj4))+(((-1.0)*gconst83*r20*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x2363.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2362.value)))+(x2363.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2364=IKcos(j8);
IkReal x2365=IKsin(j8);
IkReal x2366=((1.0)*gconst83);
IkReal x2367=((1.0)*sj4);
IkReal x2368=(gconst82*r20);
IkReal x2369=(gconst82*x2364);
IkReal x2370=(gconst83*x2365);
IkReal x2371=((1.0)*gconst82*x2365);
evalcond[0]=((((-1.0)*r20*x2364*x2366))+((r22*x2365))+((r21*x2369)));
evalcond[1]=(((r11*x2369))+((r12*x2365))+(((-1.0)*r10*x2364*x2366))+cj4);
evalcond[2]=(((r02*x2365))+(((-1.0)*x2367))+(((-1.0)*r00*x2364*x2366))+((r01*x2369)));
evalcond[3]=((((-1.0)*cj5*sj6))+((r20*x2370))+(((-1.0)*r21*x2371))+((r22*x2364))+(((-1.0)*cj6*sj5)));
evalcond[4]=((((-1.0)*cj4*r21*x2366))+((r02*x2364))+(((-1.0)*r01*x2371))+(((-1.0)*cj4*x2368))+((r00*x2370)));
evalcond[5]=(((r12*x2364))+((r10*x2370))+(((-1.0)*r21*sj4*x2366))+(((-1.0)*x2367*x2368))+(((-1.0)*r11*x2371)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x2372 = IKatan2WithCheck(IkReal((((cj4*gconst82*r21))+(((-1.0)*cj4*gconst83*r20)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2372.valid){
continue;
}
CheckValue<IkReal> x2373=IKPowWithIntegerCheck(IKsign((((gconst83*r01))+((gconst82*r00)))),-1);
if(!x2373.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x2372.value)+(((1.5707963267949)*(x2373.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2374=IKcos(j8);
IkReal x2375=IKsin(j8);
IkReal x2376=((1.0)*gconst83);
IkReal x2377=((1.0)*sj4);
IkReal x2378=(gconst82*r20);
IkReal x2379=(gconst82*x2374);
IkReal x2380=(gconst83*x2375);
IkReal x2381=((1.0)*gconst82*x2375);
evalcond[0]=((((-1.0)*r20*x2374*x2376))+((r22*x2375))+((r21*x2379)));
evalcond[1]=(cj4+((r12*x2375))+(((-1.0)*r10*x2374*x2376))+((r11*x2379)));
evalcond[2]=(((r02*x2375))+(((-1.0)*x2377))+(((-1.0)*r00*x2374*x2376))+((r01*x2379)));
evalcond[3]=((((-1.0)*cj5*sj6))+(((-1.0)*r21*x2381))+((r20*x2380))+((r22*x2374))+(((-1.0)*cj6*sj5)));
evalcond[4]=((((-1.0)*cj4*r21*x2376))+(((-1.0)*r01*x2381))+((r00*x2380))+((r02*x2374))+(((-1.0)*cj4*x2378)));
evalcond[5]=(((r12*x2374))+(((-1.0)*x2377*x2378))+((r10*x2380))+(((-1.0)*r21*sj4*x2376))+(((-1.0)*r11*x2381)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2383 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2383)==0){
continue;
}
IkReal x2382=pow(x2383,-0.5);
CheckValue<IkReal> x2384 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2384.valid){
continue;
}
IkReal gconst84=((-1.0)*(x2384.value));
IkReal gconst85=((-1.0)*r11*x2382);
IkReal gconst86=(r10*x2382);
CheckValue<IkReal> x2385 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2385.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2385.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
CheckValue<IkReal> x2388 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2388.valid){
continue;
}
IkReal x2386=((-1.0)*(x2388.value));
IkReal x2387=x2382;
sj7=0;
cj7=1.0;
j7=0;
sj9=gconst85;
cj9=gconst86;
j9=x2386;
IkReal gconst84=x2386;
IkReal gconst85=((-1.0)*r11*x2387);
IkReal gconst86=(r10*x2387);
j8eval[0]=cj4;
j8eval[1]=r22;
j8eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x2389=((1.0)*gconst86);
CheckValue<IkReal> x2390=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst85*r20))+(((-1.0)*r21*x2389)))),-1);
if(!x2390.valid){
continue;
}
CheckValue<IkReal> x2391 = IKatan2WithCheck(IkReal((((cj4*gconst85*r01))+(((-1.0)*r10*sj4*x2389))+((gconst85*r11*sj4))+(((-1.0)*cj4*r00*x2389)))),IkReal(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2391.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2390.value)))+(x2391.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2392=IKcos(j8);
IkReal x2393=IKsin(j8);
IkReal x2394=((1.0)*r21);
IkReal x2395=((1.0)*sj4);
IkReal x2396=(gconst85*r20);
IkReal x2397=(gconst85*x2393);
IkReal x2398=(gconst86*x2393);
IkReal x2399=(gconst85*x2392);
IkReal x2400=((1.0)*gconst86*x2392);
evalcond[0]=(((r22*x2393))+((r21*x2399))+(((-1.0)*r20*x2400)));
evalcond[1]=(((r12*x2393))+cj4+((r11*x2399))+(((-1.0)*r10*x2400)));
evalcond[2]=(((r01*x2399))+((r02*x2393))+(((-1.0)*r00*x2400))+(((-1.0)*x2395)));
evalcond[3]=((((-1.0)*cj5*sj6))+((r20*x2398))+((r22*x2392))+(((-1.0)*x2394*x2397))+(((-1.0)*cj6*sj5)));
evalcond[4]=((((-1.0)*r01*x2397))+((r00*x2398))+((r02*x2392))+(((-1.0)*cj4*x2396))+(((-1.0)*cj4*gconst86*x2394)));
evalcond[5]=(((r12*x2392))+((r10*x2398))+(((-1.0)*gconst86*sj4*x2394))+(((-1.0)*r11*x2397))+(((-1.0)*x2395*x2396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x2401=IKPowWithIntegerCheck(IKsign((((gconst85*r00))+((gconst86*r01)))),-1);
if(!x2401.valid){
continue;
}
CheckValue<IkReal> x2402 = IKatan2WithCheck(IkReal((((cj4*gconst85*r21))+(((-1.0)*cj4*gconst86*r20)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2402.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2401.value)))+(x2402.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2403=IKcos(j8);
IkReal x2404=IKsin(j8);
IkReal x2405=((1.0)*r21);
IkReal x2406=((1.0)*sj4);
IkReal x2407=(gconst85*r20);
IkReal x2408=(gconst85*x2404);
IkReal x2409=(gconst86*x2404);
IkReal x2410=(gconst85*x2403);
IkReal x2411=((1.0)*gconst86*x2403);
evalcond[0]=((((-1.0)*r20*x2411))+((r21*x2410))+((r22*x2404)));
evalcond[1]=(((r11*x2410))+cj4+((r12*x2404))+(((-1.0)*r10*x2411)));
evalcond[2]=((((-1.0)*r00*x2411))+(((-1.0)*x2406))+((r01*x2410))+((r02*x2404)));
evalcond[3]=((((-1.0)*x2405*x2408))+(((-1.0)*cj5*sj6))+((r20*x2409))+((r22*x2403))+(((-1.0)*cj6*sj5)));
evalcond[4]=((((-1.0)*cj4*x2407))+((r00*x2409))+((r02*x2403))+(((-1.0)*cj4*gconst86*x2405))+(((-1.0)*r01*x2408)));
evalcond[5]=(((r10*x2409))+((r12*x2403))+(((-1.0)*gconst86*sj4*x2405))+(((-1.0)*x2406*x2407))+(((-1.0)*r11*x2408)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2413 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2413)==0){
continue;
}
IkReal x2412=pow(x2413,-0.5);
CheckValue<IkReal> x2414 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2414.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2414.value))));
IkReal gconst88=((1.0)*r11*x2412);
IkReal gconst89=((-1.0)*r10*x2412);
CheckValue<IkReal> x2415 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2415.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2415.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
CheckValue<IkReal> x2418 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2418.valid){
continue;
}
IkReal x2416=((1.0)*(x2418.value));
IkReal x2417=x2412;
sj7=0;
cj7=1.0;
j7=0;
sj9=gconst88;
cj9=gconst89;
j9=((3.14159265)+(((-1.0)*x2416)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2416)));
IkReal gconst88=((1.0)*r11*x2417);
IkReal gconst89=((-1.0)*r10*x2417);
j8eval[0]=cj4;
j8eval[1]=r22;
j8eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[5];
CheckValue<IkReal> x2421 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2421.valid){
continue;
}
IkReal x2419=((1.0)*(x2421.value));
IkReal x2420=x2412;
sj7=0;
cj7=1.0;
j7=0;
sj9=gconst88;
cj9=gconst89;
j9=((3.14159265)+(((-1.0)*x2419)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2419)));
IkReal gconst88=((1.0)*r11*x2420);
IkReal gconst89=((-1.0)*r10*x2420);
j8eval[0]=0;
j8eval[1]=r22;
j8eval[2]=sj4;
j8eval[3]=((1.0)+(((-1.0)*(r12*r12))));
j8eval[4]=0;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  || IKabs(j8eval[4]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
CheckValue<IkReal> x2424 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2424.valid){
continue;
}
IkReal x2422=((1.0)*(x2424.value));
IkReal x2423=x2412;
sj7=0;
cj7=1.0;
j7=0;
sj9=gconst88;
cj9=gconst89;
j9=((3.14159265)+(((-1.0)*x2422)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2422)));
IkReal gconst88=((1.0)*r11*x2423);
IkReal gconst89=((-1.0)*r10*x2423);
IkReal x2425=r12*r12;
IkReal x2426=(cj4*r02);
IkReal x2427=x2412;
IkReal x2428=(sj4*x2427);
j8eval[0]=((IKabs(((((-1.0)*x2428))+((x2425*x2428))+((r12*x2426*x2427)))))+(IKabs(((((-1.0)*x2426))+(((-1.0)*r12*sj4))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x2429=((1.0)*gconst89);
CheckValue<IkReal> x2430=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2429))+(((-1.0)*gconst88*r20)))),-1);
if(!x2430.valid){
continue;
}
CheckValue<IkReal> x2431 = IKatan2WithCheck(IkReal(((((-1.0)*r10*sj4*x2429))+((gconst88*r11*sj4))+((cj4*gconst88*r01))+(((-1.0)*cj4*r00*x2429)))),IkReal(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2431.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2430.value)))+(x2431.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2432=IKcos(j8);
IkReal x2433=IKsin(j8);
IkReal x2434=((1.0)*sj4);
IkReal x2435=(gconst88*r20);
IkReal x2436=(gconst89*r21);
IkReal x2437=((1.0)*cj4);
IkReal x2438=(gconst88*x2432);
IkReal x2439=(gconst89*x2433);
IkReal x2440=((1.0)*gconst89*x2432);
IkReal x2441=((1.0)*gconst88*x2433);
evalcond[0]=((((-1.0)*r20*x2440))+((r22*x2433))+((r21*x2438)));
evalcond[1]=(((r11*x2438))+cj4+(((-1.0)*r10*x2440))+((r12*x2433)));
evalcond[2]=(((r01*x2438))+(((-1.0)*x2434))+((r02*x2433))+(((-1.0)*r00*x2440)));
evalcond[3]=((((-1.0)*cj5*sj6))+((r20*x2439))+(((-1.0)*r21*x2441))+((r22*x2432))+(((-1.0)*cj6*sj5)));
evalcond[4]=(((r00*x2439))+((r02*x2432))+(((-1.0)*x2436*x2437))+(((-1.0)*x2435*x2437))+(((-1.0)*r01*x2441)));
evalcond[5]=(((r12*x2432))+(((-1.0)*x2434*x2435))+(((-1.0)*x2434*x2436))+(((-1.0)*r11*x2441))+((r10*x2439)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x2442 = IKatan2WithCheck(IkReal(((((-1.0)*gconst89*r20*sj4))+((gconst88*r21*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x2442.valid){
continue;
}
CheckValue<IkReal> x2443=IKPowWithIntegerCheck(IKsign((((gconst88*r10))+((gconst89*r11)))),-1);
if(!x2443.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x2442.value)+(((1.5707963267949)*(x2443.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2444=IKcos(j8);
IkReal x2445=IKsin(j8);
IkReal x2446=((1.0)*sj4);
IkReal x2447=(gconst88*r20);
IkReal x2448=(gconst89*r21);
IkReal x2449=((1.0)*cj4);
IkReal x2450=(gconst88*x2444);
IkReal x2451=(gconst89*x2445);
IkReal x2452=((1.0)*gconst89*x2444);
IkReal x2453=((1.0)*gconst88*x2445);
evalcond[0]=(((r22*x2445))+(((-1.0)*r20*x2452))+((r21*x2450)));
evalcond[1]=((((-1.0)*r10*x2452))+cj4+((r12*x2445))+((r11*x2450)));
evalcond[2]=(((r02*x2445))+((r01*x2450))+(((-1.0)*x2446))+(((-1.0)*r00*x2452)));
evalcond[3]=((((-1.0)*cj5*sj6))+((r22*x2444))+(((-1.0)*r21*x2453))+((r20*x2451))+(((-1.0)*cj6*sj5)));
evalcond[4]=(((r02*x2444))+(((-1.0)*x2448*x2449))+((r00*x2451))+(((-1.0)*x2447*x2449))+(((-1.0)*r01*x2453)));
evalcond[5]=(((r10*x2451))+(((-1.0)*r11*x2453))+(((-1.0)*x2446*x2448))+(((-1.0)*x2446*x2447))+((r12*x2444)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x2454=IKPowWithIntegerCheck(IKsign((((gconst88*r00))+((gconst89*r01)))),-1);
if(!x2454.valid){
continue;
}
CheckValue<IkReal> x2455 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*gconst89*r20))+((cj4*gconst88*r21)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2455.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2454.value)))+(x2455.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2456=IKcos(j8);
IkReal x2457=IKsin(j8);
IkReal x2458=((1.0)*sj4);
IkReal x2459=(gconst88*r20);
IkReal x2460=(gconst89*r21);
IkReal x2461=((1.0)*cj4);
IkReal x2462=(gconst88*x2456);
IkReal x2463=(gconst89*x2457);
IkReal x2464=((1.0)*gconst89*x2456);
IkReal x2465=((1.0)*gconst88*x2457);
evalcond[0]=(((r22*x2457))+((r21*x2462))+(((-1.0)*r20*x2464)));
evalcond[1]=(cj4+((r11*x2462))+((r12*x2457))+(((-1.0)*r10*x2464)));
evalcond[2]=(((r02*x2457))+((r01*x2462))+(((-1.0)*r00*x2464))+(((-1.0)*x2458)));
evalcond[3]=((((-1.0)*cj5*sj6))+((r20*x2463))+((r22*x2456))+(((-1.0)*r21*x2465))+(((-1.0)*cj6*sj5)));
evalcond[4]=(((r02*x2456))+(((-1.0)*r01*x2465))+(((-1.0)*x2460*x2461))+(((-1.0)*x2459*x2461))+((r00*x2463)));
evalcond[5]=((((-1.0)*r11*x2465))+(((-1.0)*x2458*x2459))+((r12*x2456))+((r10*x2463))+(((-1.0)*x2458*x2460)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
sj7=0;
cj7=1.0;
j7=0;
sj4=0;
cj4=1.0;
j4=0;
IkReal x2466=(((r00*sj9))+((cj9*r01)));
j8eval[0]=x2466;
j8eval[1]=IKsign(x2466);
j8eval[2]=((IKabs(r22))+(IKabs((((r21*sj9))+(((-1.0)*cj9*r20))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=0;
cj7=1.0;
j7=0;
sj4=0;
cj4=1.0;
j4=0;
IkReal x2467=((1.0)*cj9);
IkReal x2468=((((-1.0)*r21*x2467))+(((-1.0)*r20*sj9)));
j8eval[0]=x2468;
j8eval[1]=((IKabs(((((-1.0)*r00*x2467))+((r01*sj9)))))+(IKabs(r02)));
j8eval[2]=IKsign(x2468);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=0;
cj7=1.0;
j7=0;
sj4=0;
cj4=1.0;
j4=0;
IkReal x2469=r11*r11;
IkReal x2470=cj9*cj9;
IkReal x2471=(r11*sj9);
IkReal x2472=(cj9*r10);
IkReal x2473=((((-1.0)*x2469))+(((2.0)*x2471*x2472))+(((-1.0)*x2470*(r10*r10)))+(((-1.0)*(r12*r12)))+((x2469*x2470)));
j8eval[0]=x2473;
j8eval[1]=IKsign(x2473);
j8eval[2]=((IKabs(r12))+(IKabs((x2471+(((-1.0)*x2472))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x2474=r11*r11;
IkReal x2475=cj9*cj9;
IkReal x2476=(r11*sj9);
IkReal x2477=(cj9*r10);
CheckValue<IkReal> x2478=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2475*(r10*r10)))+(((-1.0)*x2474))+(((-1.0)*(r12*r12)))+((x2474*x2475))+(((2.0)*x2476*x2477)))),-1);
if(!x2478.valid){
continue;
}
CheckValue<IkReal> x2479 = IKatan2WithCheck(IkReal(r12),IkReal((x2476+(((-1.0)*x2477)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2479.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2478.value)))+(x2479.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2480=IKcos(j8);
IkReal x2481=IKsin(j8);
IkReal x2482=(cj9*r00);
IkReal x2483=((1.0)*x2480);
IkReal x2484=(cj9*x2481);
IkReal x2485=(sj9*x2480);
IkReal x2486=((1.0)*sj9*x2481);
evalcond[0]=((((-1.0)*cj9*r20*x2483))+((r22*x2481))+((r21*x2485)));
evalcond[1]=(((r01*x2485))+((r02*x2481))+(((-1.0)*x2482*x2483)));
evalcond[2]=(((r12*x2480))+(((-1.0)*r11*x2486))+((r10*x2484)));
evalcond[3]=((1.0)+((r11*x2485))+((r12*x2481))+(((-1.0)*cj9*r10*x2483)));
evalcond[4]=((((-1.0)*cj5*sj6))+((r22*x2480))+(((-1.0)*r21*x2486))+(((-1.0)*cj6*sj5))+((r20*x2484)));
evalcond[5]=(((r02*x2480))+((x2481*x2482))+(((-1.0)*r01*x2486))+(((-1.0)*cj9*r21))+(((-1.0)*r20*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x2487=((1.0)*cj9);
CheckValue<IkReal> x2488 = IKatan2WithCheck(IkReal((((r01*sj9))+(((-1.0)*r00*x2487)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x2488.valid){
continue;
}
CheckValue<IkReal> x2489=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2487))+(((-1.0)*r20*sj9)))),-1);
if(!x2489.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x2488.value)+(((1.5707963267949)*(x2489.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2490=IKcos(j8);
IkReal x2491=IKsin(j8);
IkReal x2492=(cj9*r00);
IkReal x2493=((1.0)*x2490);
IkReal x2494=(cj9*x2491);
IkReal x2495=(sj9*x2490);
IkReal x2496=((1.0)*sj9*x2491);
evalcond[0]=(((r22*x2491))+((r21*x2495))+(((-1.0)*cj9*r20*x2493)));
evalcond[1]=(((r02*x2491))+((r01*x2495))+(((-1.0)*x2492*x2493)));
evalcond[2]=(((r12*x2490))+(((-1.0)*r11*x2496))+((r10*x2494)));
evalcond[3]=((1.0)+((r11*x2495))+((r12*x2491))+(((-1.0)*cj9*r10*x2493)));
evalcond[4]=((((-1.0)*cj5*sj6))+((r22*x2490))+(((-1.0)*r21*x2496))+(((-1.0)*cj6*sj5))+((r20*x2494)));
evalcond[5]=(((r02*x2490))+(((-1.0)*r01*x2496))+(((-1.0)*cj9*r21))+((x2491*x2492))+(((-1.0)*r20*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x2497=IKPowWithIntegerCheck(IKsign((((r00*sj9))+((cj9*r01)))),-1);
if(!x2497.valid){
continue;
}
CheckValue<IkReal> x2498 = IKatan2WithCheck(IkReal((((r21*sj9))+(((-1.0)*cj9*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2498.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2497.value)))+(x2498.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2499=IKcos(j8);
IkReal x2500=IKsin(j8);
IkReal x2501=(cj9*r00);
IkReal x2502=((1.0)*x2499);
IkReal x2503=(cj9*x2500);
IkReal x2504=(sj9*x2499);
IkReal x2505=((1.0)*sj9*x2500);
evalcond[0]=(((r22*x2500))+(((-1.0)*cj9*r20*x2502))+((r21*x2504)));
evalcond[1]=(((r02*x2500))+(((-1.0)*x2501*x2502))+((r01*x2504)));
evalcond[2]=(((r10*x2503))+(((-1.0)*r11*x2505))+((r12*x2499)));
evalcond[3]=((1.0)+((r12*x2500))+((r11*x2504))+(((-1.0)*cj9*r10*x2502)));
evalcond[4]=((((-1.0)*cj5*sj6))+((r22*x2499))+(((-1.0)*cj6*sj5))+((r20*x2503))+(((-1.0)*r21*x2505)));
evalcond[5]=(((r02*x2499))+((x2500*x2501))+(((-1.0)*r01*x2505))+(((-1.0)*cj9*r21))+(((-1.0)*r20*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
sj7=0;
cj7=1.0;
j7=0;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x2506=(((cj9*r21))+((r20*sj9)));
j8eval[0]=x2506;
j8eval[1]=((IKabs(r02))+(IKabs((((r01*sj9))+(((-1.0)*cj9*r00))))));
j8eval[2]=IKsign(x2506);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=0;
cj7=1.0;
j7=0;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x2507=((1.0)*cj9);
IkReal x2508=((((-1.0)*r00*sj9))+(((-1.0)*r01*x2507)));
j8eval[0]=x2508;
j8eval[1]=((IKabs(r22))+(IKabs((((r21*sj9))+(((-1.0)*r20*x2507))))));
j8eval[2]=IKsign(x2508);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=0;
cj7=1.0;
j7=0;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x2509=cj9*cj9;
IkReal x2510=r11*r11;
IkReal x2511=(r11*sj9);
IkReal x2512=(cj9*r10);
IkReal x2513=((r12*r12)+x2510+((x2509*(r10*r10)))+(((-1.0)*x2509*x2510))+(((-2.0)*x2511*x2512)));
j8eval[0]=x2513;
j8eval[1]=IKsign(x2513);
j8eval[2]=((IKabs(r12))+(IKabs((x2511+(((-1.0)*x2512))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x2514=cj9*cj9;
IkReal x2515=r11*r11;
IkReal x2516=(r11*sj9);
IkReal x2517=(cj9*r10);
CheckValue<IkReal> x2518 = IKatan2WithCheck(IkReal(r12),IkReal((x2516+(((-1.0)*x2517)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2518.valid){
continue;
}
CheckValue<IkReal> x2519=IKPowWithIntegerCheck(IKsign(((r12*r12)+x2515+(((-2.0)*x2516*x2517))+(((-1.0)*x2514*x2515))+((x2514*(r10*r10))))),-1);
if(!x2519.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x2518.value)+(((1.5707963267949)*(x2519.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2520=IKcos(j8);
IkReal x2521=IKsin(j8);
IkReal x2522=(cj9*r00);
IkReal x2523=((1.0)*x2520);
IkReal x2524=(sj9*x2520);
IkReal x2525=(cj9*x2521);
IkReal x2526=((1.0)*sj9*x2521);
evalcond[0]=(((r22*x2521))+(((-1.0)*cj9*r20*x2523))+((r21*x2524)));
evalcond[1]=(((r02*x2521))+((r01*x2524))+(((-1.0)*x2522*x2523)));
evalcond[2]=((((-1.0)*r11*x2526))+((r12*x2520))+((r10*x2525)));
evalcond[3]=((-1.0)+((r12*x2521))+((r11*x2524))+(((-1.0)*cj9*r10*x2523)));
evalcond[4]=(((r02*x2520))+((cj9*r21))+(((-1.0)*r01*x2526))+((x2521*x2522))+((r20*sj9)));
evalcond[5]=((((-1.0)*cj5*sj6))+((r22*x2520))+(((-1.0)*r21*x2526))+((r20*x2525))+(((-1.0)*cj6*sj5)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x2527=((1.0)*cj9);
CheckValue<IkReal> x2528=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj9))+(((-1.0)*r01*x2527)))),-1);
if(!x2528.valid){
continue;
}
CheckValue<IkReal> x2529 = IKatan2WithCheck(IkReal((((r21*sj9))+(((-1.0)*r20*x2527)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2529.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2528.value)))+(x2529.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2530=IKcos(j8);
IkReal x2531=IKsin(j8);
IkReal x2532=(cj9*r00);
IkReal x2533=((1.0)*x2530);
IkReal x2534=(sj9*x2530);
IkReal x2535=(cj9*x2531);
IkReal x2536=((1.0)*sj9*x2531);
evalcond[0]=(((r21*x2534))+((r22*x2531))+(((-1.0)*cj9*r20*x2533)));
evalcond[1]=(((r01*x2534))+((r02*x2531))+(((-1.0)*x2532*x2533)));
evalcond[2]=(((r10*x2535))+((r12*x2530))+(((-1.0)*r11*x2536)));
evalcond[3]=((-1.0)+((r12*x2531))+((r11*x2534))+(((-1.0)*cj9*r10*x2533)));
evalcond[4]=(((x2531*x2532))+(((-1.0)*r01*x2536))+((cj9*r21))+((r02*x2530))+((r20*sj9)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*r21*x2536))+((r20*x2535))+((r22*x2530))+(((-1.0)*cj6*sj5)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x2537 = IKatan2WithCheck(IkReal((((r01*sj9))+(((-1.0)*cj9*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x2537.valid){
continue;
}
CheckValue<IkReal> x2538=IKPowWithIntegerCheck(IKsign((((cj9*r21))+((r20*sj9)))),-1);
if(!x2538.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x2537.value)+(((1.5707963267949)*(x2538.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2539=IKcos(j8);
IkReal x2540=IKsin(j8);
IkReal x2541=(cj9*r00);
IkReal x2542=((1.0)*x2539);
IkReal x2543=(sj9*x2539);
IkReal x2544=(cj9*x2540);
IkReal x2545=((1.0)*sj9*x2540);
evalcond[0]=(((r21*x2543))+(((-1.0)*cj9*r20*x2542))+((r22*x2540)));
evalcond[1]=((((-1.0)*x2541*x2542))+((r01*x2543))+((r02*x2540)));
evalcond[2]=((((-1.0)*r11*x2545))+((r12*x2539))+((r10*x2544)));
evalcond[3]=((-1.0)+((r11*x2543))+((r12*x2540))+(((-1.0)*cj9*r10*x2542)));
evalcond[4]=(((cj9*r21))+((r02*x2539))+(((-1.0)*r01*x2545))+((x2540*x2541))+((r20*sj9)));
evalcond[5]=((((-1.0)*cj5*sj6))+((r22*x2539))+((r20*x2544))+(((-1.0)*r21*x2545))+(((-1.0)*cj6*sj5)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2547 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2547)==0){
continue;
}
IkReal x2546=pow(x2547,-0.5);
CheckValue<IkReal> x2548 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2548.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2548.value));
IkReal gconst91=((-1.0)*r01*x2546);
IkReal gconst92=(r00*x2546);
CheckValue<IkReal> x2549 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2549.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2549.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
CheckValue<IkReal> x2552 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2552.valid){
continue;
}
IkReal x2550=((-1.0)*(x2552.value));
IkReal x2551=x2546;
sj7=0;
cj7=1.0;
j7=0;
sj9=gconst91;
cj9=gconst92;
j9=x2550;
IkReal gconst90=x2550;
IkReal gconst91=((-1.0)*r01*x2551);
IkReal gconst92=(r00*x2551);
j8eval[0]=r22;
j8eval[1]=sj4;
j8eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x2553=((1.0)*gconst92);
CheckValue<IkReal> x2554 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*r00*x2553))+(((-1.0)*r10*sj4*x2553))+((gconst91*r11*sj4))+((cj4*gconst91*r01)))),IkReal(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2554.valid){
continue;
}
CheckValue<IkReal> x2555=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*r21*x2553)))),-1);
if(!x2555.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x2554.value)+(((1.5707963267949)*(x2555.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2556=IKcos(j8);
IkReal x2557=IKsin(j8);
IkReal x2558=(gconst92*r00);
IkReal x2559=((1.0)*sj4);
IkReal x2560=(gconst92*r20);
IkReal x2561=((1.0)*gconst91);
IkReal x2562=(gconst92*r10);
IkReal x2563=(gconst92*r21);
IkReal x2564=((1.0)*x2556);
IkReal x2565=(gconst91*x2556);
evalcond[0]=(((r22*x2557))+(((-1.0)*x2560*x2564))+((r21*x2565)));
evalcond[1]=((((-1.0)*x2562*x2564))+cj4+((r12*x2557))+((r11*x2565)));
evalcond[2]=(((r01*x2565))+(((-1.0)*x2558*x2564))+(((-1.0)*x2559))+((r02*x2557)));
evalcond[3]=((((-1.0)*cj5*sj6))+((r22*x2556))+((x2557*x2560))+(((-1.0)*r21*x2557*x2561))+(((-1.0)*cj6*sj5)));
evalcond[4]=((((-1.0)*r01*x2557*x2561))+((x2557*x2558))+(((-1.0)*cj4*r20*x2561))+(((-1.0)*cj4*x2563))+((r02*x2556)));
evalcond[5]=((((-1.0)*gconst91*r20*x2559))+(((-1.0)*r11*x2557*x2561))+((r12*x2556))+((x2557*x2562))+(((-1.0)*x2559*x2563)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x2566 = IKatan2WithCheck(IkReal(((((-1.0)*gconst92*r20*sj4))+((gconst91*r21*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x2566.valid){
continue;
}
CheckValue<IkReal> x2567=IKPowWithIntegerCheck(IKsign((((gconst91*r10))+((gconst92*r11)))),-1);
if(!x2567.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x2566.value)+(((1.5707963267949)*(x2567.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2568=IKcos(j8);
IkReal x2569=IKsin(j8);
IkReal x2570=(gconst92*r00);
IkReal x2571=((1.0)*sj4);
IkReal x2572=(gconst92*r20);
IkReal x2573=((1.0)*gconst91);
IkReal x2574=(gconst92*r10);
IkReal x2575=(gconst92*r21);
IkReal x2576=((1.0)*x2568);
IkReal x2577=(gconst91*x2568);
evalcond[0]=(((r22*x2569))+((r21*x2577))+(((-1.0)*x2572*x2576)));
evalcond[1]=(cj4+((r11*x2577))+((r12*x2569))+(((-1.0)*x2574*x2576)));
evalcond[2]=((((-1.0)*x2570*x2576))+((r01*x2577))+(((-1.0)*x2571))+((r02*x2569)));
evalcond[3]=((((-1.0)*r21*x2569*x2573))+(((-1.0)*cj5*sj6))+((r22*x2568))+((x2569*x2572))+(((-1.0)*cj6*sj5)));
evalcond[4]=((((-1.0)*cj4*r20*x2573))+(((-1.0)*r01*x2569*x2573))+((x2569*x2570))+(((-1.0)*cj4*x2575))+((r02*x2568)));
evalcond[5]=((((-1.0)*x2571*x2575))+(((-1.0)*r11*x2569*x2573))+((r12*x2568))+((x2569*x2574))+(((-1.0)*gconst91*r20*x2571)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2579 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2579)==0){
continue;
}
IkReal x2578=pow(x2579,-0.5);
CheckValue<IkReal> x2580 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2580.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2580.value))));
IkReal gconst94=((1.0)*r01*x2578);
IkReal gconst95=((-1.0)*r00*x2578);
CheckValue<IkReal> x2581 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2581.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2581.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[5];
CheckValue<IkReal> x2584 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2584.valid){
continue;
}
IkReal x2582=((1.0)*(x2584.value));
IkReal x2583=x2578;
sj7=0;
cj7=1.0;
j7=0;
sj9=gconst94;
cj9=gconst95;
j9=((3.14159265)+(((-1.0)*x2582)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2582)));
IkReal gconst94=((1.0)*r01*x2583);
IkReal gconst95=((-1.0)*r00*x2583);
j8eval[0]=0;
j8eval[1]=0;
j8eval[2]=cj4;
j8eval[3]=r22;
j8eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  || IKabs(j8eval[4]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
CheckValue<IkReal> x2587 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2587.valid){
continue;
}
IkReal x2585=((1.0)*(x2587.value));
IkReal x2586=x2578;
sj7=0;
cj7=1.0;
j7=0;
sj9=gconst94;
cj9=gconst95;
j9=((3.14159265)+(((-1.0)*x2585)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2585)));
IkReal gconst94=((1.0)*r01*x2586);
IkReal gconst95=((-1.0)*r00*x2586);
j8eval[0]=r22;
j8eval[1]=sj4;
j8eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
CheckValue<IkReal> x2590 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2590.valid){
continue;
}
IkReal x2588=((1.0)*(x2590.value));
IkReal x2589=x2578;
sj7=0;
cj7=1.0;
j7=0;
sj9=gconst94;
cj9=gconst95;
j9=((3.14159265)+(((-1.0)*x2588)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2588)));
IkReal gconst94=((1.0)*r01*x2589);
IkReal gconst95=((-1.0)*r00*x2589);
IkReal x2591=r02*r02;
IkReal x2592=(r12*sj4);
IkReal x2593=x2578;
IkReal x2594=(cj4*x2593);
j8eval[0]=((IKabs((((r02*x2592*x2593))+(((-1.0)*x2594))+((x2591*x2594)))))+(IKabs(((((-1.0)*cj4*r02))+(((-1.0)*x2592))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x2595=((1.0)*gconst95);
CheckValue<IkReal> x2596=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2595))+(((-1.0)*gconst94*r20)))),-1);
if(!x2596.valid){
continue;
}
CheckValue<IkReal> x2597 = IKatan2WithCheck(IkReal(((((-1.0)*r10*sj4*x2595))+((gconst94*r11*sj4))+(((-1.0)*cj4*r00*x2595))+((cj4*gconst94*r01)))),IkReal(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2597.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2596.value)))+(x2597.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2598=IKcos(j8);
IkReal x2599=IKsin(j8);
IkReal x2600=(gconst94*r11);
IkReal x2601=((1.0)*sj4);
IkReal x2602=(gconst95*r21);
IkReal x2603=(gconst94*r20);
IkReal x2604=((1.0)*cj4);
IkReal x2605=((1.0)*x2599);
IkReal x2606=(gconst94*x2598);
IkReal x2607=(gconst95*x2599);
IkReal x2608=((1.0)*gconst95*x2598);
evalcond[0]=(((r22*x2599))+((r21*x2606))+(((-1.0)*r20*x2608)));
evalcond[1]=(cj4+(((-1.0)*r10*x2608))+((x2598*x2600))+((r12*x2599)));
evalcond[2]=(((r01*x2606))+(((-1.0)*x2601))+(((-1.0)*r00*x2608))+((r02*x2599)));
evalcond[3]=(((r22*x2598))+(((-1.0)*cj5*sj6))+((r20*x2607))+(((-1.0)*gconst94*r21*x2605))+(((-1.0)*cj6*sj5)));
evalcond[4]=((((-1.0)*gconst94*r01*x2605))+(((-1.0)*x2603*x2604))+(((-1.0)*x2602*x2604))+((r00*x2607))+((r02*x2598)));
evalcond[5]=((((-1.0)*x2601*x2602))+(((-1.0)*x2601*x2603))+(((-1.0)*x2600*x2605))+((r12*x2598))+((r10*x2607)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x2609=IKPowWithIntegerCheck(IKsign((((gconst95*r11))+((gconst94*r10)))),-1);
if(!x2609.valid){
continue;
}
CheckValue<IkReal> x2610 = IKatan2WithCheck(IkReal((((gconst94*r21*sj4))+(((-1.0)*gconst95*r20*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x2610.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2609.value)))+(x2610.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2611=IKcos(j8);
IkReal x2612=IKsin(j8);
IkReal x2613=(gconst94*r11);
IkReal x2614=((1.0)*sj4);
IkReal x2615=(gconst95*r21);
IkReal x2616=(gconst94*r20);
IkReal x2617=((1.0)*cj4);
IkReal x2618=((1.0)*x2612);
IkReal x2619=(gconst94*x2611);
IkReal x2620=(gconst95*x2612);
IkReal x2621=((1.0)*gconst95*x2611);
evalcond[0]=(((r22*x2612))+((r21*x2619))+(((-1.0)*r20*x2621)));
evalcond[1]=(cj4+(((-1.0)*r10*x2621))+((x2611*x2613))+((r12*x2612)));
evalcond[2]=(((r01*x2619))+(((-1.0)*r00*x2621))+((r02*x2612))+(((-1.0)*x2614)));
evalcond[3]=((((-1.0)*cj5*sj6))+((r20*x2620))+(((-1.0)*gconst94*r21*x2618))+((r22*x2611))+(((-1.0)*cj6*sj5)));
evalcond[4]=(((r00*x2620))+(((-1.0)*gconst94*r01*x2618))+((r02*x2611))+(((-1.0)*x2616*x2617))+(((-1.0)*x2615*x2617)));
evalcond[5]=((((-1.0)*x2613*x2618))+((r10*x2620))+((r12*x2611))+(((-1.0)*x2614*x2615))+(((-1.0)*x2614*x2616)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x2622 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*gconst95*r20))+((cj4*gconst94*r21)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2622.valid){
continue;
}
CheckValue<IkReal> x2623=IKPowWithIntegerCheck(IKsign((((gconst95*r01))+((gconst94*r00)))),-1);
if(!x2623.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x2622.value)+(((1.5707963267949)*(x2623.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2624=IKcos(j8);
IkReal x2625=IKsin(j8);
IkReal x2626=(gconst94*r11);
IkReal x2627=((1.0)*sj4);
IkReal x2628=(gconst95*r21);
IkReal x2629=(gconst94*r20);
IkReal x2630=((1.0)*cj4);
IkReal x2631=((1.0)*x2625);
IkReal x2632=(gconst94*x2624);
IkReal x2633=(gconst95*x2625);
IkReal x2634=((1.0)*gconst95*x2624);
evalcond[0]=((((-1.0)*r20*x2634))+((r21*x2632))+((r22*x2625)));
evalcond[1]=(((x2624*x2626))+cj4+(((-1.0)*r10*x2634))+((r12*x2625)));
evalcond[2]=((((-1.0)*r00*x2634))+((r02*x2625))+((r01*x2632))+(((-1.0)*x2627)));
evalcond[3]=((((-1.0)*cj5*sj6))+((r20*x2633))+((r22*x2624))+(((-1.0)*cj6*sj5))+(((-1.0)*gconst94*r21*x2631)));
evalcond[4]=((((-1.0)*x2628*x2630))+((r02*x2624))+((r00*x2633))+(((-1.0)*x2629*x2630))+(((-1.0)*gconst94*r01*x2631)));
evalcond[5]=(((r10*x2633))+(((-1.0)*x2627*x2629))+(((-1.0)*x2627*x2628))+((r12*x2624))+(((-1.0)*x2626*x2631)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
sj7=0;
cj7=1.0;
j7=0;
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal x2635=(((r10*sj9))+((cj9*r11)));
j8eval[0]=x2635;
j8eval[1]=((IKabs(r22))+(IKabs((((r21*sj9))+(((-1.0)*cj9*r20))))));
j8eval[2]=IKsign(x2635);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=0;
cj7=1.0;
j7=0;
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal x2636=((1.0)*cj9);
IkReal x2637=((((-1.0)*r21*x2636))+(((-1.0)*r20*sj9)));
j8eval[0]=x2637;
j8eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x2636))+((r11*sj9))))));
j8eval[2]=IKsign(x2637);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=0;
cj7=1.0;
j7=0;
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal x2638=cj9*cj9;
IkReal x2639=r01*r01;
IkReal x2640=(cj9*r00);
IkReal x2641=(r01*sj9);
IkReal x2642=((((-2.0)*x2640*x2641))+((x2638*(r00*r00)))+(r02*r02)+(((-1.0)*x2638*x2639))+x2639);
j8eval[0]=x2642;
j8eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x2640))+x2641))));
j8eval[2]=IKsign(x2642);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x2643=cj9*cj9;
IkReal x2644=r01*r01;
IkReal x2645=(cj9*r00);
IkReal x2646=(r01*sj9);
CheckValue<IkReal> x2647=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2643*x2644))+((x2643*(r00*r00)))+(((-2.0)*x2645*x2646))+(r02*r02)+x2644)),-1);
if(!x2647.valid){
continue;
}
CheckValue<IkReal> x2648 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x2645))+x2646)),IKFAST_ATAN2_MAGTHRESH);
if(!x2648.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2647.value)))+(x2648.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2649=IKcos(j8);
IkReal x2650=IKsin(j8);
IkReal x2651=(cj9*r00);
IkReal x2652=((1.0)*x2649);
IkReal x2653=(cj9*x2650);
IkReal x2654=(sj9*x2649);
IkReal x2655=((1.0)*sj9*x2650);
evalcond[0]=((((-1.0)*cj9*r20*x2652))+((r21*x2654))+((r22*x2650)));
evalcond[1]=(((r12*x2650))+((r11*x2654))+(((-1.0)*cj9*r10*x2652)));
evalcond[2]=((((-1.0)*r01*x2655))+((r02*x2649))+((x2650*x2651)));
evalcond[3]=((-1.0)+(((-1.0)*x2651*x2652))+((r02*x2650))+((r01*x2654)));
evalcond[4]=((((-1.0)*cj5*sj6))+(((-1.0)*r21*x2655))+((r22*x2649))+(((-1.0)*cj6*sj5))+((r20*x2653)));
evalcond[5]=(((r12*x2649))+(((-1.0)*r11*x2655))+((r10*x2653))+(((-1.0)*cj9*r21))+(((-1.0)*r20*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x2656=((1.0)*cj9);
CheckValue<IkReal> x2657=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2656))+(((-1.0)*r20*sj9)))),-1);
if(!x2657.valid){
continue;
}
CheckValue<IkReal> x2658 = IKatan2WithCheck(IkReal((((r11*sj9))+(((-1.0)*r10*x2656)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x2658.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2657.value)))+(x2658.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2659=IKcos(j8);
IkReal x2660=IKsin(j8);
IkReal x2661=(cj9*r00);
IkReal x2662=((1.0)*x2659);
IkReal x2663=(cj9*x2660);
IkReal x2664=(sj9*x2659);
IkReal x2665=((1.0)*sj9*x2660);
evalcond[0]=((((-1.0)*cj9*r20*x2662))+((r21*x2664))+((r22*x2660)));
evalcond[1]=(((r12*x2660))+(((-1.0)*cj9*r10*x2662))+((r11*x2664)));
evalcond[2]=((((-1.0)*r01*x2665))+((r02*x2659))+((x2660*x2661)));
evalcond[3]=((-1.0)+((r02*x2660))+((r01*x2664))+(((-1.0)*x2661*x2662)));
evalcond[4]=((((-1.0)*cj5*sj6))+((r22*x2659))+(((-1.0)*r21*x2665))+((r20*x2663))+(((-1.0)*cj6*sj5)));
evalcond[5]=(((r12*x2659))+(((-1.0)*r11*x2665))+((r10*x2663))+(((-1.0)*cj9*r21))+(((-1.0)*r20*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x2666=IKPowWithIntegerCheck(IKsign((((r10*sj9))+((cj9*r11)))),-1);
if(!x2666.valid){
continue;
}
CheckValue<IkReal> x2667 = IKatan2WithCheck(IkReal((((r21*sj9))+(((-1.0)*cj9*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2667.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2666.value)))+(x2667.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2668=IKcos(j8);
IkReal x2669=IKsin(j8);
IkReal x2670=(cj9*r00);
IkReal x2671=((1.0)*x2668);
IkReal x2672=(cj9*x2669);
IkReal x2673=(sj9*x2668);
IkReal x2674=((1.0)*sj9*x2669);
evalcond[0]=((((-1.0)*cj9*r20*x2671))+((r21*x2673))+((r22*x2669)));
evalcond[1]=(((r12*x2669))+(((-1.0)*cj9*r10*x2671))+((r11*x2673)));
evalcond[2]=((((-1.0)*r01*x2674))+((r02*x2668))+((x2669*x2670)));
evalcond[3]=((-1.0)+(((-1.0)*x2670*x2671))+((r02*x2669))+((r01*x2673)));
evalcond[4]=((((-1.0)*cj5*sj6))+((r22*x2668))+(((-1.0)*r21*x2674))+((r20*x2672))+(((-1.0)*cj6*sj5)));
evalcond[5]=((((-1.0)*r11*x2674))+((r12*x2668))+((r10*x2672))+(((-1.0)*cj9*r21))+(((-1.0)*r20*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
sj7=0;
cj7=1.0;
j7=0;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal x2675=(((cj9*r21))+((r20*sj9)));
j8eval[0]=x2675;
j8eval[1]=((IKabs(r12))+(IKabs((((r11*sj9))+(((-1.0)*cj9*r10))))));
j8eval[2]=IKsign(x2675);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=0;
cj7=1.0;
j7=0;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal x2676=((1.0)*cj9);
IkReal x2677=((((-1.0)*r11*x2676))+(((-1.0)*r10*sj9)));
j8eval[0]=x2677;
j8eval[1]=((IKabs((((r21*sj9))+(((-1.0)*r20*x2676)))))+(IKabs(r22)));
j8eval[2]=IKsign(x2677);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=0;
cj7=1.0;
j7=0;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal x2678=cj9*cj9;
IkReal x2679=r01*r01;
IkReal x2680=(r01*sj9);
IkReal x2681=(cj9*r00);
IkReal x2682=((((-1.0)*x2679))+(((-1.0)*(r02*r02)))+(((2.0)*x2680*x2681))+((x2678*x2679))+(((-1.0)*x2678*(r00*r00))));
j8eval[0]=x2682;
j8eval[1]=IKsign(x2682);
j8eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x2681))+x2680))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x2683=cj9*cj9;
IkReal x2684=r01*r01;
IkReal x2685=(r01*sj9);
IkReal x2686=(cj9*r00);
CheckValue<IkReal> x2687 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x2686))+x2685)),IKFAST_ATAN2_MAGTHRESH);
if(!x2687.valid){
continue;
}
CheckValue<IkReal> x2688=IKPowWithIntegerCheck(IKsign(((((2.0)*x2685*x2686))+(((-1.0)*(r02*r02)))+((x2683*x2684))+(((-1.0)*x2683*(r00*r00)))+(((-1.0)*x2684)))),-1);
if(!x2688.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x2687.value)+(((1.5707963267949)*(x2688.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2689=IKcos(j8);
IkReal x2690=IKsin(j8);
IkReal x2691=(cj9*r00);
IkReal x2692=((1.0)*x2689);
IkReal x2693=(sj9*x2689);
IkReal x2694=(cj9*x2690);
IkReal x2695=((1.0)*sj9*x2690);
evalcond[0]=((((-1.0)*cj9*r20*x2692))+((r22*x2690))+((r21*x2693)));
evalcond[1]=(((r12*x2690))+(((-1.0)*cj9*r10*x2692))+((r11*x2693)));
evalcond[2]=(((r02*x2689))+(((-1.0)*r01*x2695))+((x2690*x2691)));
evalcond[3]=((1.0)+(((-1.0)*x2691*x2692))+((r01*x2693))+((r02*x2690)));
evalcond[4]=(((r10*x2694))+((cj9*r21))+(((-1.0)*r11*x2695))+((r12*x2689))+((r20*sj9)));
evalcond[5]=((((-1.0)*cj5*sj6))+((r22*x2689))+((r20*x2694))+(((-1.0)*cj6*sj5))+(((-1.0)*r21*x2695)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x2696=((1.0)*cj9);
CheckValue<IkReal> x2697 = IKatan2WithCheck(IkReal((((r21*sj9))+(((-1.0)*r20*x2696)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2697.valid){
continue;
}
CheckValue<IkReal> x2698=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj9))+(((-1.0)*r11*x2696)))),-1);
if(!x2698.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x2697.value)+(((1.5707963267949)*(x2698.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2699=IKcos(j8);
IkReal x2700=IKsin(j8);
IkReal x2701=(cj9*r00);
IkReal x2702=((1.0)*x2699);
IkReal x2703=(sj9*x2699);
IkReal x2704=(cj9*x2700);
IkReal x2705=((1.0)*sj9*x2700);
evalcond[0]=(((r22*x2700))+((r21*x2703))+(((-1.0)*cj9*r20*x2702)));
evalcond[1]=((((-1.0)*cj9*r10*x2702))+((r12*x2700))+((r11*x2703)));
evalcond[2]=((((-1.0)*r01*x2705))+((x2700*x2701))+((r02*x2699)));
evalcond[3]=((1.0)+((r01*x2703))+(((-1.0)*x2701*x2702))+((r02*x2700)));
evalcond[4]=(((r12*x2699))+((r10*x2704))+(((-1.0)*r11*x2705))+((cj9*r21))+((r20*sj9)));
evalcond[5]=((((-1.0)*cj5*sj6))+((r22*x2699))+((r20*x2704))+(((-1.0)*r21*x2705))+(((-1.0)*cj6*sj5)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x2706=IKPowWithIntegerCheck(IKsign((((cj9*r21))+((r20*sj9)))),-1);
if(!x2706.valid){
continue;
}
CheckValue<IkReal> x2707 = IKatan2WithCheck(IkReal((((r11*sj9))+(((-1.0)*cj9*r10)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x2707.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2706.value)))+(x2707.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2708=IKcos(j8);
IkReal x2709=IKsin(j8);
IkReal x2710=(cj9*r00);
IkReal x2711=((1.0)*x2708);
IkReal x2712=(sj9*x2708);
IkReal x2713=(cj9*x2709);
IkReal x2714=((1.0)*sj9*x2709);
evalcond[0]=(((r22*x2709))+(((-1.0)*cj9*r20*x2711))+((r21*x2712)));
evalcond[1]=(((r12*x2709))+(((-1.0)*cj9*r10*x2711))+((r11*x2712)));
evalcond[2]=(((x2709*x2710))+(((-1.0)*r01*x2714))+((r02*x2708)));
evalcond[3]=((1.0)+(((-1.0)*x2710*x2711))+((r02*x2709))+((r01*x2712)));
evalcond[4]=(((r12*x2708))+((cj9*r21))+((r10*x2713))+((r20*sj9))+(((-1.0)*r11*x2714)));
evalcond[5]=((((-1.0)*cj5*sj6))+((r22*x2708))+(((-1.0)*r21*x2714))+(((-1.0)*cj6*sj5))+((r20*x2713)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x2715=((-1.0)*px);
sj7=0;
cj7=1.0;
j7=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2715);
rxp1_1=(px*r21);
rxp1_2=(r11*x2715);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j8eval[0]=(((cj9*r20))+(((-1.0)*r21*sj9)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x2717=IKPowWithIntegerCheck((((cj9*r20))+(((-1.0)*r21*sj9))),-1);
if(!x2717.valid){
continue;
}
IkReal x2716=x2717.value;
sj8array[0]=(((cj5*sj6*x2716))+((cj6*sj5*x2716)));
if( sj8array[0] >= -1-IKFAST_SINCOS_THRESH && sj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKasin(sj8array[0]);
    cj8array[0] = IKcos(j8array[0]);
    sj8array[1] = sj8array[0];
    j8array[1] = j8array[0] > 0 ? (IKPI-j8array[0]) : (-IKPI-j8array[0]);
    cj8array[1] = -cj8array[0];
}
else if( isnan(sj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[3];
IkReal x2718=IKcos(j8);
IkReal x2719=(sj9*x2718);
IkReal x2720=((1.0)*cj9*x2718);
evalcond[0]=(r02*x2718);
evalcond[1]=(((r21*x2719))+(((-1.0)*r20*x2720)));
evalcond[2]=(((r11*x2719))+(((-1.0)*r10*x2720)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x2721=((1.0)*cj9);
CheckValue<IkReal> x2722 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*r00*x2721))+(((-1.0)*r10*sj4*x2721))+((r11*sj4*sj9))+((cj4*r01*sj9)))),IkReal(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2722.valid){
continue;
}
CheckValue<IkReal> x2723=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2721))+(((-1.0)*r20*sj9)))),-1);
if(!x2723.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x2722.value)+(((1.5707963267949)*(x2723.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2724=IKcos(j8);
IkReal x2725=IKsin(j8);
IkReal x2726=(cj9*r00);
IkReal x2727=((1.0)*sj4);
IkReal x2728=(r20*sj9);
IkReal x2729=((1.0)*cj4);
IkReal x2730=(cj9*r21);
IkReal x2731=((1.0)*x2724);
IkReal x2732=(cj9*x2725);
IkReal x2733=(sj9*x2724);
IkReal x2734=((1.0)*sj9*x2725);
evalcond[0]=(((r22*x2725))+((r21*x2733))+(((-1.0)*cj9*r20*x2731)));
evalcond[1]=(cj4+(((-1.0)*cj9*r10*x2731))+((r12*x2725))+((r11*x2733)));
evalcond[2]=(((r02*x2725))+(((-1.0)*x2726*x2731))+((r01*x2733))+(((-1.0)*x2727)));
evalcond[3]=((((-1.0)*cj5*sj6))+((r22*x2724))+((r20*x2732))+(((-1.0)*r21*x2734))+(((-1.0)*cj6*sj5)));
evalcond[4]=(((r02*x2724))+(((-1.0)*x2728*x2729))+((x2725*x2726))+(((-1.0)*r01*x2734))+(((-1.0)*x2729*x2730)));
evalcond[5]=((((-1.0)*x2727*x2730))+(((-1.0)*x2727*x2728))+(((-1.0)*r11*x2734))+((r10*x2732))+((r12*x2724)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x2735 = IKatan2WithCheck(IkReal((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x2735.valid){
continue;
}
CheckValue<IkReal> x2736=IKPowWithIntegerCheck(IKsign((((r10*sj9))+((cj9*r11)))),-1);
if(!x2736.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x2735.value)+(((1.5707963267949)*(x2736.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2737=IKcos(j8);
IkReal x2738=IKsin(j8);
IkReal x2739=(cj9*r00);
IkReal x2740=((1.0)*sj4);
IkReal x2741=(r20*sj9);
IkReal x2742=((1.0)*cj4);
IkReal x2743=(cj9*r21);
IkReal x2744=((1.0)*x2737);
IkReal x2745=(cj9*x2738);
IkReal x2746=(sj9*x2737);
IkReal x2747=((1.0)*sj9*x2738);
evalcond[0]=(((r21*x2746))+((r22*x2738))+(((-1.0)*cj9*r20*x2744)));
evalcond[1]=(((r11*x2746))+cj4+(((-1.0)*cj9*r10*x2744))+((r12*x2738)));
evalcond[2]=(((r02*x2738))+(((-1.0)*x2739*x2744))+((r01*x2746))+(((-1.0)*x2740)));
evalcond[3]=((((-1.0)*cj5*sj6))+((r22*x2737))+((r20*x2745))+(((-1.0)*r21*x2747))+(((-1.0)*cj6*sj5)));
evalcond[4]=((((-1.0)*r01*x2747))+((r02*x2737))+(((-1.0)*x2741*x2742))+((x2738*x2739))+(((-1.0)*x2742*x2743)));
evalcond[5]=((((-1.0)*x2740*x2743))+(((-1.0)*x2740*x2741))+((r10*x2745))+(((-1.0)*r11*x2747))+((r12*x2737)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x2748=IKPowWithIntegerCheck(IKsign((((r00*sj9))+((cj9*r01)))),-1);
if(!x2748.valid){
continue;
}
CheckValue<IkReal> x2749 = IKatan2WithCheck(IkReal((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2749.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2748.value)))+(x2749.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2750=IKcos(j8);
IkReal x2751=IKsin(j8);
IkReal x2752=(cj9*r00);
IkReal x2753=((1.0)*sj4);
IkReal x2754=(r20*sj9);
IkReal x2755=((1.0)*cj4);
IkReal x2756=(cj9*r21);
IkReal x2757=((1.0)*x2750);
IkReal x2758=(cj9*x2751);
IkReal x2759=(sj9*x2750);
IkReal x2760=((1.0)*sj9*x2751);
evalcond[0]=(((r22*x2751))+((r21*x2759))+(((-1.0)*cj9*r20*x2757)));
evalcond[1]=(((r11*x2759))+cj4+((r12*x2751))+(((-1.0)*cj9*r10*x2757)));
evalcond[2]=((((-1.0)*x2752*x2757))+((r01*x2759))+(((-1.0)*x2753))+((r02*x2751)));
evalcond[3]=((((-1.0)*cj5*sj6))+((r22*x2750))+((r20*x2758))+(((-1.0)*r21*x2760))+(((-1.0)*cj6*sj5)));
evalcond[4]=((((-1.0)*r01*x2760))+(((-1.0)*x2754*x2755))+(((-1.0)*x2755*x2756))+((x2751*x2752))+((r02*x2750)));
evalcond[5]=((((-1.0)*r11*x2760))+((r12*x2750))+((r10*x2758))+(((-1.0)*x2753*x2754))+(((-1.0)*x2753*x2756)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
IkReal x2761=((1.0)*sj9);
IkReal x2762=((1.0)*cj9);
IkReal x2763=((((-1.0)*cj5*sj6))+(((-1.0)*cj6*sj5)));
j4eval[0]=x2763;
j4eval[1]=((IKabs(((((-1.0)*r11*x2762))+(((-1.0)*r10*x2761)))))+(IKabs(((((-1.0)*r00*x2761))+(((-1.0)*r01*x2762))))));
j4eval[2]=IKsign(x2763);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
IkReal x2764=r21*r21;
IkReal x2765=cj9*cj9;
IkReal x2766=(r21*sj9);
IkReal x2767=(cj5*sj6);
IkReal x2768=(cj9*r20);
IkReal x2769=(cj6*sj5);
IkReal x2770=((((-1.0)*x2765*(r20*r20)))+(((-1.0)*x2764))+(((-1.0)*(r22*r22)))+((x2764*x2765))+(((2.0)*x2766*x2768)));
j8eval[0]=x2770;
j8eval[1]=IKsign(x2770);
j8eval[2]=((IKabs((((x2768*x2769))+(((-1.0)*x2766*x2767))+(((-1.0)*x2766*x2769))+((x2767*x2768)))))+(IKabs((((r22*x2769))+((r22*x2767))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
j4eval[0]=((((-1.0)*cj5*sj6))+(((-1.0)*cj6*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j5), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j6), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.10915)*(IKsin(j4)))));
evalcond[1]=((((0.10915)*(IKcos(j4))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j8eval[3];
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
j5=0;
sj5=0;
cj5=1.0;
j6=0;
sj6=0;
cj6=1.0;
IkReal x2771=(((r00*sj9))+((cj9*r01)));
j8eval[0]=x2771;
j8eval[1]=IKsign(x2771);
j8eval[2]=((IKabs((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))))+(IKabs((cj4*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
j5=0;
sj5=0;
cj5=1.0;
j6=0;
sj6=0;
cj6=1.0;
IkReal x2772=(((r10*sj9))+((cj9*r11)));
j8eval[0]=x2772;
j8eval[1]=IKsign(x2772);
j8eval[2]=((IKabs((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))))+(IKabs((r22*sj4))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
j5=0;
sj5=0;
cj5=1.0;
j6=0;
sj6=0;
cj6=1.0;
IkReal x2773=((1.0)*cj9);
IkReal x2774=((((-1.0)*r21*x2773))+(((-1.0)*r20*sj9)));
j8eval[0]=x2774;
j8eval[1]=((IKabs(((((-1.0)*r10*sj4*x2773))+((r11*sj4*sj9))+(((-1.0)*cj4*r00*x2773))+((cj4*r01*sj9)))))+(IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4))))));
j8eval[2]=IKsign(x2774);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x2775=((1.0)*cj9);
CheckValue<IkReal> x2776=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2775))+(((-1.0)*r20*sj9)))),-1);
if(!x2776.valid){
continue;
}
CheckValue<IkReal> x2777 = IKatan2WithCheck(IkReal(((((-1.0)*r10*sj4*x2775))+((r11*sj4*sj9))+(((-1.0)*cj4*r00*x2775))+((cj4*r01*sj9)))),IkReal(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2777.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2776.value)))+(x2777.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2778=IKcos(j8);
IkReal x2779=IKsin(j8);
CheckValue<IkReal> x2788=IKPowWithIntegerCheck(cj9,-1);
if(!x2788.valid){
continue;
}
IkReal x2780=x2788.value;
IkReal x2781=sj9*sj9;
IkReal x2782=((1.0)*cj9);
IkReal x2783=(r10*x2779);
IkReal x2784=((1.0)*x2778);
IkReal x2785=(sj9*x2778);
IkReal x2786=(r00*x2779);
IkReal x2787=((1.0)*x2780*x2781);
evalcond[0]=(((r21*x2785))+((r22*x2779))+(((-1.0)*r20*x2778*x2782)));
evalcond[1]=(cj4+((r11*x2785))+(((-1.0)*r10*x2778*x2782))+((r12*x2779)));
evalcond[2]=(((r21*sj9*x2779))+(((-1.0)*r22*x2784))+(((-1.0)*r20*x2779*x2782)));
evalcond[3]=((((-1.0)*sj4))+(((-1.0)*r00*x2778*x2782))+((r01*x2785))+((r02*x2779)));
evalcond[4]=(cj4+(((-1.0)*x2786*x2787))+(((-1.0)*x2782*x2786))+(((-1.0)*r02*x2784)));
evalcond[5]=((((-1.0)*r12*x2784))+sj4+(((-1.0)*x2783*x2787))+(((-1.0)*x2782*x2783)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x2789 = IKatan2WithCheck(IkReal((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x2789.valid){
continue;
}
CheckValue<IkReal> x2790=IKPowWithIntegerCheck(IKsign((((r10*sj9))+((cj9*r11)))),-1);
if(!x2790.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x2789.value)+(((1.5707963267949)*(x2790.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2791=IKcos(j8);
IkReal x2792=IKsin(j8);
CheckValue<IkReal> x2801=IKPowWithIntegerCheck(cj9,-1);
if(!x2801.valid){
continue;
}
IkReal x2793=x2801.value;
IkReal x2794=sj9*sj9;
IkReal x2795=((1.0)*cj9);
IkReal x2796=(r10*x2792);
IkReal x2797=((1.0)*x2791);
IkReal x2798=(sj9*x2791);
IkReal x2799=(r00*x2792);
IkReal x2800=((1.0)*x2793*x2794);
evalcond[0]=(((r21*x2798))+(((-1.0)*r20*x2791*x2795))+((r22*x2792)));
evalcond[1]=(cj4+((r12*x2792))+((r11*x2798))+(((-1.0)*r10*x2791*x2795)));
evalcond[2]=((((-1.0)*r20*x2792*x2795))+((r21*sj9*x2792))+(((-1.0)*r22*x2797)));
evalcond[3]=((((-1.0)*sj4))+(((-1.0)*r00*x2791*x2795))+((r02*x2792))+((r01*x2798)));
evalcond[4]=((((-1.0)*x2795*x2799))+cj4+(((-1.0)*x2799*x2800))+(((-1.0)*r02*x2797)));
evalcond[5]=((((-1.0)*x2795*x2796))+sj4+(((-1.0)*x2796*x2800))+(((-1.0)*r12*x2797)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x2802=IKPowWithIntegerCheck(IKsign((((r00*sj9))+((cj9*r01)))),-1);
if(!x2802.valid){
continue;
}
CheckValue<IkReal> x2803 = IKatan2WithCheck(IkReal((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2803.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2802.value)))+(x2803.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2804=IKcos(j8);
IkReal x2805=IKsin(j8);
CheckValue<IkReal> x2814=IKPowWithIntegerCheck(cj9,-1);
if(!x2814.valid){
continue;
}
IkReal x2806=x2814.value;
IkReal x2807=sj9*sj9;
IkReal x2808=((1.0)*cj9);
IkReal x2809=(r10*x2805);
IkReal x2810=((1.0)*x2804);
IkReal x2811=(sj9*x2804);
IkReal x2812=(r00*x2805);
IkReal x2813=((1.0)*x2806*x2807);
evalcond[0]=((((-1.0)*r20*x2804*x2808))+((r21*x2811))+((r22*x2805)));
evalcond[1]=(((r12*x2805))+cj4+((r11*x2811))+(((-1.0)*r10*x2804*x2808)));
evalcond[2]=((((-1.0)*r22*x2810))+((r21*sj9*x2805))+(((-1.0)*r20*x2805*x2808)));
evalcond[3]=(((r01*x2811))+(((-1.0)*sj4))+((r02*x2805))+(((-1.0)*r00*x2804*x2808)));
evalcond[4]=((((-1.0)*r02*x2810))+cj4+(((-1.0)*x2812*x2813))+(((-1.0)*x2808*x2812)));
evalcond[5]=((((-1.0)*r12*x2810))+(((-1.0)*x2809*x2813))+sj4+(((-1.0)*x2808*x2809)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j6, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j5), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.10915)*(IKsin(j4)))));
evalcond[1]=((((0.10915)*(IKcos(j4))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j8eval[3];
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
j5=0;
sj5=0;
cj5=1.0;
j6=3.14159265358979;
sj6=0;
cj6=-1.0;
IkReal x2815=(((r00*sj9))+((cj9*r01)));
j8eval[0]=x2815;
j8eval[1]=IKsign(x2815);
j8eval[2]=((IKabs((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))))+(IKabs((cj4*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
j5=0;
sj5=0;
cj5=1.0;
j6=3.14159265358979;
sj6=0;
cj6=-1.0;
IkReal x2816=(((r10*sj9))+((cj9*r11)));
j8eval[0]=x2816;
j8eval[1]=IKsign(x2816);
j8eval[2]=((IKabs((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))))+(IKabs((r22*sj4))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
j5=0;
sj5=0;
cj5=1.0;
j6=3.14159265358979;
sj6=0;
cj6=-1.0;
IkReal x2817=((1.0)*cj9);
IkReal x2818=((((-1.0)*r21*x2817))+(((-1.0)*r20*sj9)));
j8eval[0]=x2818;
j8eval[1]=((IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))))+(IKabs(((((-1.0)*cj4*r00*x2817))+((r11*sj4*sj9))+(((-1.0)*r10*sj4*x2817))+((cj4*r01*sj9))))));
j8eval[2]=IKsign(x2818);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x2819=((1.0)*cj9);
CheckValue<IkReal> x2820 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*r00*x2819))+((r11*sj4*sj9))+(((-1.0)*r10*sj4*x2819))+((cj4*r01*sj9)))),IkReal(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2820.valid){
continue;
}
CheckValue<IkReal> x2821=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2819))+(((-1.0)*r20*sj9)))),-1);
if(!x2821.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x2820.value)+(((1.5707963267949)*(x2821.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2822=IKcos(j8);
IkReal x2823=IKsin(j8);
CheckValue<IkReal> x2833=IKPowWithIntegerCheck(cj9,-1);
if(!x2833.valid){
continue;
}
IkReal x2824=x2833.value;
IkReal x2825=sj9*sj9;
IkReal x2826=((1.0)*sj4);
IkReal x2827=((1.0)*cj9);
IkReal x2828=(r10*x2823);
IkReal x2829=((1.0)*x2822);
IkReal x2830=(sj9*x2822);
IkReal x2831=(r00*x2823);
IkReal x2832=((1.0)*x2824*x2825);
evalcond[0]=(((r22*x2823))+((r21*x2830))+(((-1.0)*r20*x2822*x2827)));
evalcond[1]=(cj4+(((-1.0)*r10*x2822*x2827))+((r11*x2830))+((r12*x2823)));
evalcond[2]=((((-1.0)*r20*x2823*x2827))+(((-1.0)*r22*x2829))+((r21*sj9*x2823)));
evalcond[3]=(((r02*x2823))+(((-1.0)*r00*x2822*x2827))+(((-1.0)*x2826))+((r01*x2830)));
evalcond[4]=((((-1.0)*r02*x2829))+(((-1.0)*x2827*x2831))+(((-1.0)*x2831*x2832))+(((-1.0)*cj4)));
evalcond[5]=((((-1.0)*r12*x2829))+(((-1.0)*x2826))+(((-1.0)*x2828*x2832))+(((-1.0)*x2827*x2828)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x2834 = IKatan2WithCheck(IkReal((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x2834.valid){
continue;
}
CheckValue<IkReal> x2835=IKPowWithIntegerCheck(IKsign((((r10*sj9))+((cj9*r11)))),-1);
if(!x2835.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x2834.value)+(((1.5707963267949)*(x2835.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2836=IKcos(j8);
IkReal x2837=IKsin(j8);
CheckValue<IkReal> x2847=IKPowWithIntegerCheck(cj9,-1);
if(!x2847.valid){
continue;
}
IkReal x2838=x2847.value;
IkReal x2839=sj9*sj9;
IkReal x2840=((1.0)*sj4);
IkReal x2841=((1.0)*cj9);
IkReal x2842=(r10*x2837);
IkReal x2843=((1.0)*x2836);
IkReal x2844=(sj9*x2836);
IkReal x2845=(r00*x2837);
IkReal x2846=((1.0)*x2838*x2839);
evalcond[0]=((((-1.0)*r20*x2836*x2841))+((r21*x2844))+((r22*x2837)));
evalcond[1]=(((r12*x2837))+((r11*x2844))+cj4+(((-1.0)*r10*x2836*x2841)));
evalcond[2]=((((-1.0)*r20*x2837*x2841))+(((-1.0)*r22*x2843))+((r21*sj9*x2837)));
evalcond[3]=(((r02*x2837))+((r01*x2844))+(((-1.0)*r00*x2836*x2841))+(((-1.0)*x2840)));
evalcond[4]=((((-1.0)*x2845*x2846))+(((-1.0)*r02*x2843))+(((-1.0)*x2841*x2845))+(((-1.0)*cj4)));
evalcond[5]=((((-1.0)*x2842*x2846))+(((-1.0)*r12*x2843))+(((-1.0)*x2841*x2842))+(((-1.0)*x2840)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x2848=IKPowWithIntegerCheck(IKsign((((r00*sj9))+((cj9*r01)))),-1);
if(!x2848.valid){
continue;
}
CheckValue<IkReal> x2849 = IKatan2WithCheck(IkReal((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2849.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2848.value)))+(x2849.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2850=IKcos(j8);
IkReal x2851=IKsin(j8);
CheckValue<IkReal> x2861=IKPowWithIntegerCheck(cj9,-1);
if(!x2861.valid){
continue;
}
IkReal x2852=x2861.value;
IkReal x2853=sj9*sj9;
IkReal x2854=((1.0)*sj4);
IkReal x2855=((1.0)*cj9);
IkReal x2856=(r10*x2851);
IkReal x2857=((1.0)*x2850);
IkReal x2858=(sj9*x2850);
IkReal x2859=(r00*x2851);
IkReal x2860=((1.0)*x2852*x2853);
evalcond[0]=(((r21*x2858))+((r22*x2851))+(((-1.0)*r20*x2850*x2855)));
evalcond[1]=(cj4+((r11*x2858))+((r12*x2851))+(((-1.0)*r10*x2850*x2855)));
evalcond[2]=(((r21*sj9*x2851))+(((-1.0)*r22*x2857))+(((-1.0)*r20*x2851*x2855)));
evalcond[3]=((((-1.0)*r00*x2850*x2855))+((r01*x2858))+((r02*x2851))+(((-1.0)*x2854)));
evalcond[4]=((((-1.0)*x2859*x2860))+(((-1.0)*r02*x2857))+(((-1.0)*x2855*x2859))+(((-1.0)*cj4)));
evalcond[5]=((((-1.0)*r12*x2857))+(((-1.0)*x2855*x2856))+(((-1.0)*x2856*x2860))+(((-1.0)*x2854)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j5), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j6), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.20734818680435)*px))+(((0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((2.20734818680435)*px))+(((0.566898951975751)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((2.20734818680435)*px))+(((0.566898951975751)*py))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2862=IKcos(j4);
IkReal x2863=IKsin(j4);
evalcond[0]=((((-1.0)*px))+(((-0.10915)*x2863))+(((0.425)*x2862)));
evalcond[1]=((((0.10915)*x2862))+(((-1.0)*py))+(((0.425)*x2863)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j8eval[3];
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j6=1.5707963267949;
sj6=1.0;
cj6=0;
IkReal x2864=(((r00*sj9))+((cj9*r01)));
j8eval[0]=x2864;
j8eval[1]=IKsign(x2864);
j8eval[2]=((IKabs((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))))+(IKabs((cj4*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j6=1.5707963267949;
sj6=1.0;
cj6=0;
IkReal x2865=(((r10*sj9))+((cj9*r11)));
j8eval[0]=x2865;
j8eval[1]=IKsign(x2865);
j8eval[2]=((IKabs((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))))+(IKabs((r22*sj4))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j6=1.5707963267949;
sj6=1.0;
cj6=0;
IkReal x2866=((1.0)*cj9);
IkReal x2867=((((-1.0)*r21*x2866))+(((-1.0)*r20*sj9)));
j8eval[0]=x2867;
j8eval[1]=((IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))))+(IKabs(((((-1.0)*cj4*r00*x2866))+((r11*sj4*sj9))+(((-1.0)*r10*sj4*x2866))+((cj4*r01*sj9))))));
j8eval[2]=IKsign(x2867);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x2868=((1.0)*cj9);
CheckValue<IkReal> x2869=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2868))+(((-1.0)*r20*sj9)))),-1);
if(!x2869.valid){
continue;
}
CheckValue<IkReal> x2870 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*r00*x2868))+((r11*sj4*sj9))+(((-1.0)*r10*sj4*x2868))+((cj4*r01*sj9)))),IkReal(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2870.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2869.value)))+(x2870.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2871=IKcos(j8);
IkReal x2872=IKsin(j8);
CheckValue<IkReal> x2882=IKPowWithIntegerCheck(cj9,-1);
if(!x2882.valid){
continue;
}
IkReal x2873=x2882.value;
IkReal x2874=sj9*sj9;
IkReal x2875=((1.0)*sj4);
IkReal x2876=((1.0)*cj9);
IkReal x2877=(r10*x2872);
IkReal x2878=((1.0)*x2871);
IkReal x2879=(sj9*x2871);
IkReal x2880=(r00*x2872);
IkReal x2881=((1.0)*x2873*x2874);
evalcond[0]=(((r22*x2872))+(((-1.0)*r20*x2871*x2876))+((r21*x2879)));
evalcond[1]=((((-1.0)*r10*x2871*x2876))+cj4+((r11*x2879))+((r12*x2872)));
evalcond[2]=((((-1.0)*r22*x2878))+(((-1.0)*r20*x2872*x2876))+((r21*sj9*x2872)));
evalcond[3]=(((r01*x2879))+(((-1.0)*x2875))+(((-1.0)*r00*x2871*x2876))+((r02*x2872)));
evalcond[4]=((((-1.0)*r02*x2878))+(((-1.0)*x2876*x2880))+(((-1.0)*x2880*x2881))+(((-1.0)*cj4)));
evalcond[5]=((((-1.0)*x2876*x2877))+(((-1.0)*x2875))+(((-1.0)*x2877*x2881))+(((-1.0)*r12*x2878)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x2883 = IKatan2WithCheck(IkReal((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x2883.valid){
continue;
}
CheckValue<IkReal> x2884=IKPowWithIntegerCheck(IKsign((((r10*sj9))+((cj9*r11)))),-1);
if(!x2884.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x2883.value)+(((1.5707963267949)*(x2884.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2885=IKcos(j8);
IkReal x2886=IKsin(j8);
CheckValue<IkReal> x2896=IKPowWithIntegerCheck(cj9,-1);
if(!x2896.valid){
continue;
}
IkReal x2887=x2896.value;
IkReal x2888=sj9*sj9;
IkReal x2889=((1.0)*sj4);
IkReal x2890=((1.0)*cj9);
IkReal x2891=(r10*x2886);
IkReal x2892=((1.0)*x2885);
IkReal x2893=(sj9*x2885);
IkReal x2894=(r00*x2886);
IkReal x2895=((1.0)*x2887*x2888);
evalcond[0]=((((-1.0)*r20*x2885*x2890))+((r22*x2886))+((r21*x2893)));
evalcond[1]=((((-1.0)*r10*x2885*x2890))+cj4+((r11*x2893))+((r12*x2886)));
evalcond[2]=((((-1.0)*r22*x2892))+(((-1.0)*r20*x2886*x2890))+((r21*sj9*x2886)));
evalcond[3]=(((r01*x2893))+(((-1.0)*r00*x2885*x2890))+(((-1.0)*x2889))+((r02*x2886)));
evalcond[4]=((((-1.0)*x2890*x2894))+(((-1.0)*r02*x2892))+(((-1.0)*x2894*x2895))+(((-1.0)*cj4)));
evalcond[5]=((((-1.0)*x2891*x2895))+(((-1.0)*x2890*x2891))+(((-1.0)*x2889))+(((-1.0)*r12*x2892)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x2897=IKPowWithIntegerCheck(IKsign((((r00*sj9))+((cj9*r01)))),-1);
if(!x2897.valid){
continue;
}
CheckValue<IkReal> x2898 = IKatan2WithCheck(IkReal((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2898.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2897.value)))+(x2898.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2899=IKcos(j8);
IkReal x2900=IKsin(j8);
CheckValue<IkReal> x2910=IKPowWithIntegerCheck(cj9,-1);
if(!x2910.valid){
continue;
}
IkReal x2901=x2910.value;
IkReal x2902=sj9*sj9;
IkReal x2903=((1.0)*sj4);
IkReal x2904=((1.0)*cj9);
IkReal x2905=(r10*x2900);
IkReal x2906=((1.0)*x2899);
IkReal x2907=(sj9*x2899);
IkReal x2908=(r00*x2900);
IkReal x2909=((1.0)*x2901*x2902);
evalcond[0]=(((r22*x2900))+((r21*x2907))+(((-1.0)*r20*x2899*x2904)));
evalcond[1]=(cj4+(((-1.0)*r10*x2899*x2904))+((r12*x2900))+((r11*x2907)));
evalcond[2]=((((-1.0)*r20*x2900*x2904))+(((-1.0)*r22*x2906))+((r21*sj9*x2900)));
evalcond[3]=(((r02*x2900))+(((-1.0)*r00*x2899*x2904))+((r01*x2907))+(((-1.0)*x2903)));
evalcond[4]=((((-1.0)*r02*x2906))+(((-1.0)*x2904*x2908))+(((-1.0)*x2908*x2909))+(((-1.0)*cj4)));
evalcond[5]=((((-1.0)*x2905*x2909))+(((-1.0)*x2904*x2905))+(((-1.0)*x2903))+(((-1.0)*r12*x2906)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j5), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j6), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.20734818680435)*px))+(((0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((2.20734818680435)*px))+(((0.566898951975751)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((2.20734818680435)*px))+(((0.566898951975751)*py))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2911=IKcos(j4);
IkReal x2912=IKsin(j4);
evalcond[0]=((((0.425)*x2911))+(((-0.10915)*x2912))+(((-1.0)*px)));
evalcond[1]=((((0.425)*x2912))+(((-1.0)*py))+(((0.10915)*x2911)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j8eval[3];
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j6=-1.5707963267949;
sj6=-1.0;
cj6=0;
IkReal x2913=(((r00*sj9))+((cj9*r01)));
j8eval[0]=x2913;
j8eval[1]=IKsign(x2913);
j8eval[2]=((IKabs((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))))+(IKabs((cj4*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j6=-1.5707963267949;
sj6=-1.0;
cj6=0;
IkReal x2914=(((r10*sj9))+((cj9*r11)));
j8eval[0]=x2914;
j8eval[1]=IKsign(x2914);
j8eval[2]=((IKabs((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))))+(IKabs((r22*sj4))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j6=-1.5707963267949;
sj6=-1.0;
cj6=0;
IkReal x2915=((1.0)*cj9);
IkReal x2916=((((-1.0)*r21*x2915))+(((-1.0)*r20*sj9)));
j8eval[0]=x2916;
j8eval[1]=((IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))))+(IKabs(((((-1.0)*r10*sj4*x2915))+((r11*sj4*sj9))+(((-1.0)*cj4*r00*x2915))+((cj4*r01*sj9))))));
j8eval[2]=IKsign(x2916);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x2917=((1.0)*cj9);
CheckValue<IkReal> x2918=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2917))+(((-1.0)*r20*sj9)))),-1);
if(!x2918.valid){
continue;
}
CheckValue<IkReal> x2919 = IKatan2WithCheck(IkReal(((((-1.0)*r10*sj4*x2917))+((r11*sj4*sj9))+(((-1.0)*cj4*r00*x2917))+((cj4*r01*sj9)))),IkReal(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2919.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2918.value)))+(x2919.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2920=IKcos(j8);
IkReal x2921=IKsin(j8);
CheckValue<IkReal> x2930=IKPowWithIntegerCheck(cj9,-1);
if(!x2930.valid){
continue;
}
IkReal x2922=x2930.value;
IkReal x2923=sj9*sj9;
IkReal x2924=((1.0)*cj9);
IkReal x2925=(r10*x2921);
IkReal x2926=((1.0)*x2920);
IkReal x2927=(sj9*x2920);
IkReal x2928=(r00*x2921);
IkReal x2929=((1.0)*x2922*x2923);
evalcond[0]=(((r22*x2921))+((r21*x2927))+(((-1.0)*r20*x2920*x2924)));
evalcond[1]=(cj4+(((-1.0)*r10*x2920*x2924))+((r11*x2927))+((r12*x2921)));
evalcond[2]=((((-1.0)*r20*x2921*x2924))+(((-1.0)*r22*x2926))+((r21*sj9*x2921)));
evalcond[3]=((((-1.0)*sj4))+(((-1.0)*r00*x2920*x2924))+((r01*x2927))+((r02*x2921)));
evalcond[4]=((((-1.0)*r02*x2926))+cj4+(((-1.0)*x2924*x2928))+(((-1.0)*x2928*x2929)));
evalcond[5]=(sj4+(((-1.0)*x2925*x2929))+(((-1.0)*x2924*x2925))+(((-1.0)*r12*x2926)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x2931 = IKatan2WithCheck(IkReal((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x2931.valid){
continue;
}
CheckValue<IkReal> x2932=IKPowWithIntegerCheck(IKsign((((r10*sj9))+((cj9*r11)))),-1);
if(!x2932.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x2931.value)+(((1.5707963267949)*(x2932.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2933=IKcos(j8);
IkReal x2934=IKsin(j8);
CheckValue<IkReal> x2943=IKPowWithIntegerCheck(cj9,-1);
if(!x2943.valid){
continue;
}
IkReal x2935=x2943.value;
IkReal x2936=sj9*sj9;
IkReal x2937=((1.0)*cj9);
IkReal x2938=(r10*x2934);
IkReal x2939=((1.0)*x2933);
IkReal x2940=(sj9*x2933);
IkReal x2941=(r00*x2934);
IkReal x2942=((1.0)*x2935*x2936);
evalcond[0]=((((-1.0)*r20*x2933*x2937))+((r21*x2940))+((r22*x2934)));
evalcond[1]=((((-1.0)*r10*x2933*x2937))+cj4+((r11*x2940))+((r12*x2934)));
evalcond[2]=((((-1.0)*r22*x2939))+(((-1.0)*r20*x2934*x2937))+((r21*sj9*x2934)));
evalcond[3]=(((r02*x2934))+(((-1.0)*sj4))+((r01*x2940))+(((-1.0)*r00*x2933*x2937)));
evalcond[4]=(cj4+(((-1.0)*r02*x2939))+(((-1.0)*x2937*x2941))+(((-1.0)*x2941*x2942)));
evalcond[5]=(sj4+(((-1.0)*r12*x2939))+(((-1.0)*x2938*x2942))+(((-1.0)*x2937*x2938)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x2944=IKPowWithIntegerCheck(IKsign((((r00*sj9))+((cj9*r01)))),-1);
if(!x2944.valid){
continue;
}
CheckValue<IkReal> x2945 = IKatan2WithCheck(IkReal((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2945.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2944.value)))+(x2945.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2946=IKcos(j8);
IkReal x2947=IKsin(j8);
CheckValue<IkReal> x2956=IKPowWithIntegerCheck(cj9,-1);
if(!x2956.valid){
continue;
}
IkReal x2948=x2956.value;
IkReal x2949=sj9*sj9;
IkReal x2950=((1.0)*cj9);
IkReal x2951=(r10*x2947);
IkReal x2952=((1.0)*x2946);
IkReal x2953=(sj9*x2946);
IkReal x2954=(r00*x2947);
IkReal x2955=((1.0)*x2948*x2949);
evalcond[0]=((((-1.0)*r20*x2946*x2950))+((r21*x2953))+((r22*x2947)));
evalcond[1]=(cj4+((r12*x2947))+(((-1.0)*r10*x2946*x2950))+((r11*x2953)));
evalcond[2]=((((-1.0)*r20*x2947*x2950))+(((-1.0)*r22*x2952))+((r21*sj9*x2947)));
evalcond[3]=((((-1.0)*sj4))+((r02*x2947))+((r01*x2953))+(((-1.0)*r00*x2946*x2950)));
evalcond[4]=((((-1.0)*r02*x2952))+cj4+(((-1.0)*x2954*x2955))+(((-1.0)*x2950*x2954)));
evalcond[5]=(sj4+(((-1.0)*x2951*x2955))+(((-1.0)*r12*x2952))+(((-1.0)*x2950*x2951)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j5, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j6), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.10915)*(IKsin(j4)))));
evalcond[1]=((((0.10915)*(IKcos(j4))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j8eval[3];
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
j5=3.14159265358979;
sj5=0;
cj5=-1.0;
j6=0;
sj6=0;
cj6=1.0;
IkReal x2957=(((r00*sj9))+((cj9*r01)));
j8eval[0]=x2957;
j8eval[1]=IKsign(x2957);
j8eval[2]=((IKabs((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))))+(IKabs((cj4*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
j5=3.14159265358979;
sj5=0;
cj5=-1.0;
j6=0;
sj6=0;
cj6=1.0;
IkReal x2958=(((r10*sj9))+((cj9*r11)));
j8eval[0]=x2958;
j8eval[1]=IKsign(x2958);
j8eval[2]=((IKabs((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))))+(IKabs((r22*sj4))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
j5=3.14159265358979;
sj5=0;
cj5=-1.0;
j6=0;
sj6=0;
cj6=1.0;
IkReal x2959=((1.0)*cj9);
IkReal x2960=((((-1.0)*r21*x2959))+(((-1.0)*r20*sj9)));
j8eval[0]=x2960;
j8eval[1]=((IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))))+(IKabs(((((-1.0)*cj4*r00*x2959))+((r11*sj4*sj9))+(((-1.0)*r10*sj4*x2959))+((cj4*r01*sj9))))));
j8eval[2]=IKsign(x2960);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x2961=((1.0)*cj9);
CheckValue<IkReal> x2962 = IKatan2WithCheck(IkReal(((((-1.0)*r10*sj4*x2961))+(((-1.0)*cj4*r00*x2961))+((r11*sj4*sj9))+((cj4*r01*sj9)))),IkReal(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2962.valid){
continue;
}
CheckValue<IkReal> x2963=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2961))+(((-1.0)*r20*sj9)))),-1);
if(!x2963.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x2962.value)+(((1.5707963267949)*(x2963.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2964=IKcos(j8);
IkReal x2965=IKsin(j8);
CheckValue<IkReal> x2975=IKPowWithIntegerCheck(cj9,-1);
if(!x2975.valid){
continue;
}
IkReal x2966=x2975.value;
IkReal x2967=sj9*sj9;
IkReal x2968=((1.0)*sj4);
IkReal x2969=((1.0)*cj9);
IkReal x2970=(r10*x2965);
IkReal x2971=((1.0)*x2964);
IkReal x2972=(sj9*x2964);
IkReal x2973=(r00*x2965);
IkReal x2974=((1.0)*x2966*x2967);
evalcond[0]=(((r22*x2965))+(((-1.0)*r20*x2964*x2969))+((r21*x2972)));
evalcond[1]=(cj4+(((-1.0)*r10*x2964*x2969))+((r11*x2972))+((r12*x2965)));
evalcond[2]=(((r21*sj9*x2965))+(((-1.0)*r22*x2971))+(((-1.0)*r20*x2965*x2969)));
evalcond[3]=(((r02*x2965))+((r01*x2972))+(((-1.0)*x2968))+(((-1.0)*r00*x2964*x2969)));
evalcond[4]=((((-1.0)*r02*x2971))+(((-1.0)*x2969*x2973))+(((-1.0)*cj4))+(((-1.0)*x2973*x2974)));
evalcond[5]=((((-1.0)*r12*x2971))+(((-1.0)*x2969*x2970))+(((-1.0)*x2968))+(((-1.0)*x2970*x2974)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x2976 = IKatan2WithCheck(IkReal((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x2976.valid){
continue;
}
CheckValue<IkReal> x2977=IKPowWithIntegerCheck(IKsign((((r10*sj9))+((cj9*r11)))),-1);
if(!x2977.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x2976.value)+(((1.5707963267949)*(x2977.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2978=IKcos(j8);
IkReal x2979=IKsin(j8);
CheckValue<IkReal> x2989=IKPowWithIntegerCheck(cj9,-1);
if(!x2989.valid){
continue;
}
IkReal x2980=x2989.value;
IkReal x2981=sj9*sj9;
IkReal x2982=((1.0)*sj4);
IkReal x2983=((1.0)*cj9);
IkReal x2984=(r10*x2979);
IkReal x2985=((1.0)*x2978);
IkReal x2986=(sj9*x2978);
IkReal x2987=(r00*x2979);
IkReal x2988=((1.0)*x2980*x2981);
evalcond[0]=((((-1.0)*r20*x2978*x2983))+((r22*x2979))+((r21*x2986)));
evalcond[1]=(cj4+((r11*x2986))+((r12*x2979))+(((-1.0)*r10*x2978*x2983)));
evalcond[2]=((((-1.0)*r20*x2979*x2983))+(((-1.0)*r22*x2985))+((r21*sj9*x2979)));
evalcond[3]=(((r02*x2979))+(((-1.0)*x2982))+((r01*x2986))+(((-1.0)*r00*x2978*x2983)));
evalcond[4]=((((-1.0)*x2987*x2988))+(((-1.0)*x2983*x2987))+(((-1.0)*r02*x2985))+(((-1.0)*cj4)));
evalcond[5]=((((-1.0)*x2984*x2988))+(((-1.0)*x2982))+(((-1.0)*r12*x2985))+(((-1.0)*x2983*x2984)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x2990=IKPowWithIntegerCheck(IKsign((((r00*sj9))+((cj9*r01)))),-1);
if(!x2990.valid){
continue;
}
CheckValue<IkReal> x2991 = IKatan2WithCheck(IkReal((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x2991.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2990.value)))+(x2991.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x2992=IKcos(j8);
IkReal x2993=IKsin(j8);
CheckValue<IkReal> x3003=IKPowWithIntegerCheck(cj9,-1);
if(!x3003.valid){
continue;
}
IkReal x2994=x3003.value;
IkReal x2995=sj9*sj9;
IkReal x2996=((1.0)*sj4);
IkReal x2997=((1.0)*cj9);
IkReal x2998=(r10*x2993);
IkReal x2999=((1.0)*x2992);
IkReal x3000=(sj9*x2992);
IkReal x3001=(r00*x2993);
IkReal x3002=((1.0)*x2994*x2995);
evalcond[0]=((((-1.0)*r20*x2992*x2997))+((r21*x3000))+((r22*x2993)));
evalcond[1]=(cj4+((r12*x2993))+(((-1.0)*r10*x2992*x2997))+((r11*x3000)));
evalcond[2]=((((-1.0)*r22*x2999))+((r21*sj9*x2993))+(((-1.0)*r20*x2993*x2997)));
evalcond[3]=((((-1.0)*x2996))+((r01*x3000))+((r02*x2993))+(((-1.0)*r00*x2992*x2997)));
evalcond[4]=((((-1.0)*x2997*x3001))+(((-1.0)*r02*x2999))+(((-1.0)*cj4))+(((-1.0)*x3001*x3002)));
evalcond[5]=((((-1.0)*x2996))+(((-1.0)*r12*x2999))+(((-1.0)*x2998*x3002))+(((-1.0)*x2997*x2998)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j6, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j5, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.10915)*(IKsin(j4)))));
evalcond[1]=((((0.10915)*(IKcos(j4))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j8eval[3];
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
j5=3.14159265358979;
sj5=0;
cj5=-1.0;
j6=3.14159265358979;
sj6=0;
cj6=-1.0;
IkReal x3004=(((r00*sj9))+((cj9*r01)));
j8eval[0]=x3004;
j8eval[1]=IKsign(x3004);
j8eval[2]=((IKabs((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))))+(IKabs((cj4*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
j5=3.14159265358979;
sj5=0;
cj5=-1.0;
j6=3.14159265358979;
sj6=0;
cj6=-1.0;
IkReal x3005=(((r10*sj9))+((cj9*r11)));
j8eval[0]=x3005;
j8eval[1]=IKsign(x3005);
j8eval[2]=((IKabs((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))))+(IKabs((r22*sj4))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
j5=3.14159265358979;
sj5=0;
cj5=-1.0;
j6=3.14159265358979;
sj6=0;
cj6=-1.0;
IkReal x3006=((1.0)*cj9);
IkReal x3007=((((-1.0)*r21*x3006))+(((-1.0)*r20*sj9)));
j8eval[0]=x3007;
j8eval[1]=((IKabs(((((-1.0)*r10*sj4*x3006))+((r11*sj4*sj9))+((cj4*r01*sj9))+(((-1.0)*cj4*r00*x3006)))))+(IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4))))));
j8eval[2]=IKsign(x3007);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x3008=((1.0)*cj9);
CheckValue<IkReal> x3009=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3008))+(((-1.0)*r20*sj9)))),-1);
if(!x3009.valid){
continue;
}
CheckValue<IkReal> x3010 = IKatan2WithCheck(IkReal(((((-1.0)*r10*sj4*x3008))+((r11*sj4*sj9))+((cj4*r01*sj9))+(((-1.0)*cj4*r00*x3008)))),IkReal(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3010.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3009.value)))+(x3010.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x3011=IKcos(j8);
IkReal x3012=IKsin(j8);
CheckValue<IkReal> x3021=IKPowWithIntegerCheck(cj9,-1);
if(!x3021.valid){
continue;
}
IkReal x3013=x3021.value;
IkReal x3014=sj9*sj9;
IkReal x3015=((1.0)*cj9);
IkReal x3016=(r10*x3012);
IkReal x3017=((1.0)*x3011);
IkReal x3018=(sj9*x3011);
IkReal x3019=(r00*x3012);
IkReal x3020=((1.0)*x3013*x3014);
evalcond[0]=((((-1.0)*r20*x3011*x3015))+((r22*x3012))+((r21*x3018)));
evalcond[1]=(cj4+(((-1.0)*r10*x3011*x3015))+((r12*x3012))+((r11*x3018)));
evalcond[2]=((((-1.0)*r22*x3017))+(((-1.0)*r20*x3012*x3015))+((r21*sj9*x3012)));
evalcond[3]=((((-1.0)*sj4))+((r01*x3018))+(((-1.0)*r00*x3011*x3015))+((r02*x3012)));
evalcond[4]=(cj4+(((-1.0)*r02*x3017))+(((-1.0)*x3019*x3020))+(((-1.0)*x3015*x3019)));
evalcond[5]=(sj4+(((-1.0)*r12*x3017))+(((-1.0)*x3016*x3020))+(((-1.0)*x3015*x3016)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x3022 = IKatan2WithCheck(IkReal((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x3022.valid){
continue;
}
CheckValue<IkReal> x3023=IKPowWithIntegerCheck(IKsign((((r10*sj9))+((cj9*r11)))),-1);
if(!x3023.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x3022.value)+(((1.5707963267949)*(x3023.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x3024=IKcos(j8);
IkReal x3025=IKsin(j8);
CheckValue<IkReal> x3034=IKPowWithIntegerCheck(cj9,-1);
if(!x3034.valid){
continue;
}
IkReal x3026=x3034.value;
IkReal x3027=sj9*sj9;
IkReal x3028=((1.0)*cj9);
IkReal x3029=(r10*x3025);
IkReal x3030=((1.0)*x3024);
IkReal x3031=(sj9*x3024);
IkReal x3032=(r00*x3025);
IkReal x3033=((1.0)*x3026*x3027);
evalcond[0]=((((-1.0)*r20*x3024*x3028))+((r21*x3031))+((r22*x3025)));
evalcond[1]=(((r12*x3025))+cj4+(((-1.0)*r10*x3024*x3028))+((r11*x3031)));
evalcond[2]=((((-1.0)*r20*x3025*x3028))+((r21*sj9*x3025))+(((-1.0)*r22*x3030)));
evalcond[3]=((((-1.0)*sj4))+((r02*x3025))+((r01*x3031))+(((-1.0)*r00*x3024*x3028)));
evalcond[4]=(cj4+(((-1.0)*r02*x3030))+(((-1.0)*x3028*x3032))+(((-1.0)*x3032*x3033)));
evalcond[5]=((((-1.0)*x3028*x3029))+sj4+(((-1.0)*x3029*x3033))+(((-1.0)*r12*x3030)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x3035=IKPowWithIntegerCheck(IKsign((((r00*sj9))+((cj9*r01)))),-1);
if(!x3035.valid){
continue;
}
CheckValue<IkReal> x3036 = IKatan2WithCheck(IkReal((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3036.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3035.value)))+(x3036.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x3037=IKcos(j8);
IkReal x3038=IKsin(j8);
CheckValue<IkReal> x3047=IKPowWithIntegerCheck(cj9,-1);
if(!x3047.valid){
continue;
}
IkReal x3039=x3047.value;
IkReal x3040=sj9*sj9;
IkReal x3041=((1.0)*cj9);
IkReal x3042=(r10*x3038);
IkReal x3043=((1.0)*x3037);
IkReal x3044=(sj9*x3037);
IkReal x3045=(r00*x3038);
IkReal x3046=((1.0)*x3039*x3040);
evalcond[0]=(((r21*x3044))+(((-1.0)*r20*x3037*x3041))+((r22*x3038)));
evalcond[1]=((((-1.0)*r10*x3037*x3041))+cj4+((r12*x3038))+((r11*x3044)));
evalcond[2]=((((-1.0)*r20*x3038*x3041))+(((-1.0)*r22*x3043))+((r21*sj9*x3038)));
evalcond[3]=(((r02*x3038))+(((-1.0)*sj4))+(((-1.0)*r00*x3037*x3041))+((r01*x3044)));
evalcond[4]=((((-1.0)*x3045*x3046))+cj4+(((-1.0)*x3041*x3045))+(((-1.0)*r02*x3043)));
evalcond[5]=((((-1.0)*x3042*x3046))+sj4+(((-1.0)*r12*x3043))+(((-1.0)*x3041*x3042)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j5), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j6), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((-2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.566898951975751)*py))+(((-2.20734818680435)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((0.566898951975751)*py))+(((-2.20734818680435)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((0.566898951975751)*py))+(((-2.20734818680435)*px))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x3048=IKcos(j4);
IkReal x3049=IKsin(j4);
evalcond[0]=((((-1.0)*px))+(((-0.10915)*x3049))+(((-0.425)*x3048)));
evalcond[1]=((((-1.0)*py))+(((-0.425)*x3049))+(((0.10915)*x3048)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j8eval[3];
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j6=1.5707963267949;
sj6=1.0;
cj6=0;
IkReal x3050=(((r00*sj9))+((cj9*r01)));
j8eval[0]=x3050;
j8eval[1]=IKsign(x3050);
j8eval[2]=((IKabs((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))))+(IKabs((cj4*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j6=1.5707963267949;
sj6=1.0;
cj6=0;
IkReal x3051=(((r10*sj9))+((cj9*r11)));
j8eval[0]=x3051;
j8eval[1]=IKsign(x3051);
j8eval[2]=((IKabs((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))))+(IKabs((r22*sj4))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j6=1.5707963267949;
sj6=1.0;
cj6=0;
IkReal x3052=((1.0)*cj9);
IkReal x3053=((((-1.0)*r21*x3052))+(((-1.0)*r20*sj9)));
j8eval[0]=x3053;
j8eval[1]=((IKabs(((((-1.0)*r10*sj4*x3052))+((r11*sj4*sj9))+(((-1.0)*cj4*r00*x3052))+((cj4*r01*sj9)))))+(IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4))))));
j8eval[2]=IKsign(x3053);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x3054=((1.0)*cj9);
CheckValue<IkReal> x3055=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3054))+(((-1.0)*r20*sj9)))),-1);
if(!x3055.valid){
continue;
}
CheckValue<IkReal> x3056 = IKatan2WithCheck(IkReal(((((-1.0)*r10*sj4*x3054))+((r11*sj4*sj9))+(((-1.0)*cj4*r00*x3054))+((cj4*r01*sj9)))),IkReal(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3056.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3055.value)))+(x3056.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x3057=IKcos(j8);
IkReal x3058=IKsin(j8);
CheckValue<IkReal> x3067=IKPowWithIntegerCheck(cj9,-1);
if(!x3067.valid){
continue;
}
IkReal x3059=x3067.value;
IkReal x3060=sj9*sj9;
IkReal x3061=((1.0)*cj9);
IkReal x3062=(r10*x3058);
IkReal x3063=((1.0)*x3057);
IkReal x3064=(sj9*x3057);
IkReal x3065=(r00*x3058);
IkReal x3066=((1.0)*x3059*x3060);
evalcond[0]=((((-1.0)*r20*x3057*x3061))+((r22*x3058))+((r21*x3064)));
evalcond[1]=(cj4+((r12*x3058))+(((-1.0)*r10*x3057*x3061))+((r11*x3064)));
evalcond[2]=((((-1.0)*r20*x3058*x3061))+(((-1.0)*r22*x3063))+((r21*sj9*x3058)));
evalcond[3]=((((-1.0)*r00*x3057*x3061))+(((-1.0)*sj4))+((r02*x3058))+((r01*x3064)));
evalcond[4]=(cj4+(((-1.0)*x3061*x3065))+(((-1.0)*r02*x3063))+(((-1.0)*x3065*x3066)));
evalcond[5]=(sj4+(((-1.0)*x3062*x3066))+(((-1.0)*x3061*x3062))+(((-1.0)*r12*x3063)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x3068 = IKatan2WithCheck(IkReal((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x3068.valid){
continue;
}
CheckValue<IkReal> x3069=IKPowWithIntegerCheck(IKsign((((r10*sj9))+((cj9*r11)))),-1);
if(!x3069.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x3068.value)+(((1.5707963267949)*(x3069.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x3070=IKcos(j8);
IkReal x3071=IKsin(j8);
CheckValue<IkReal> x3080=IKPowWithIntegerCheck(cj9,-1);
if(!x3080.valid){
continue;
}
IkReal x3072=x3080.value;
IkReal x3073=sj9*sj9;
IkReal x3074=((1.0)*cj9);
IkReal x3075=(r10*x3071);
IkReal x3076=((1.0)*x3070);
IkReal x3077=(sj9*x3070);
IkReal x3078=(r00*x3071);
IkReal x3079=((1.0)*x3072*x3073);
evalcond[0]=(((r22*x3071))+(((-1.0)*r20*x3070*x3074))+((r21*x3077)));
evalcond[1]=(cj4+(((-1.0)*r10*x3070*x3074))+((r12*x3071))+((r11*x3077)));
evalcond[2]=((((-1.0)*r22*x3076))+((r21*sj9*x3071))+(((-1.0)*r20*x3071*x3074)));
evalcond[3]=(((r01*x3077))+(((-1.0)*sj4))+((r02*x3071))+(((-1.0)*r00*x3070*x3074)));
evalcond[4]=((((-1.0)*x3078*x3079))+cj4+(((-1.0)*r02*x3076))+(((-1.0)*x3074*x3078)));
evalcond[5]=(sj4+(((-1.0)*x3074*x3075))+(((-1.0)*r12*x3076))+(((-1.0)*x3075*x3079)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x3081=IKPowWithIntegerCheck(IKsign((((r00*sj9))+((cj9*r01)))),-1);
if(!x3081.valid){
continue;
}
CheckValue<IkReal> x3082 = IKatan2WithCheck(IkReal((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3082.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3081.value)))+(x3082.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x3083=IKcos(j8);
IkReal x3084=IKsin(j8);
CheckValue<IkReal> x3093=IKPowWithIntegerCheck(cj9,-1);
if(!x3093.valid){
continue;
}
IkReal x3085=x3093.value;
IkReal x3086=sj9*sj9;
IkReal x3087=((1.0)*cj9);
IkReal x3088=(r10*x3084);
IkReal x3089=((1.0)*x3083);
IkReal x3090=(sj9*x3083);
IkReal x3091=(r00*x3084);
IkReal x3092=((1.0)*x3085*x3086);
evalcond[0]=(((r21*x3090))+(((-1.0)*r20*x3083*x3087))+((r22*x3084)));
evalcond[1]=(cj4+((r12*x3084))+(((-1.0)*r10*x3083*x3087))+((r11*x3090)));
evalcond[2]=(((r21*sj9*x3084))+(((-1.0)*r22*x3089))+(((-1.0)*r20*x3084*x3087)));
evalcond[3]=(((r01*x3090))+(((-1.0)*sj4))+(((-1.0)*r00*x3083*x3087))+((r02*x3084)));
evalcond[4]=(cj4+(((-1.0)*r02*x3089))+(((-1.0)*x3091*x3092))+(((-1.0)*x3087*x3091)));
evalcond[5]=(sj4+(((-1.0)*x3088*x3092))+(((-1.0)*x3087*x3088))+(((-1.0)*r12*x3089)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j5), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j6), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((-2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.566898951975751)*py))+(((-2.20734818680435)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((0.566898951975751)*py))+(((-2.20734818680435)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((0.566898951975751)*py))+(((-2.20734818680435)*px))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x3094=IKcos(j4);
IkReal x3095=IKsin(j4);
evalcond[0]=((((-1.0)*px))+(((-0.10915)*x3095))+(((-0.425)*x3094)));
evalcond[1]=((((-1.0)*py))+(((-0.425)*x3095))+(((0.10915)*x3094)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j8eval[3];
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j6=-1.5707963267949;
sj6=-1.0;
cj6=0;
IkReal x3096=(((r00*sj9))+((cj9*r01)));
j8eval[0]=x3096;
j8eval[1]=IKsign(x3096);
j8eval[2]=((IKabs((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))))+(IKabs((cj4*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j6=-1.5707963267949;
sj6=-1.0;
cj6=0;
IkReal x3097=(((r10*sj9))+((cj9*r11)));
j8eval[0]=x3097;
j8eval[1]=IKsign(x3097);
j8eval[2]=((IKabs((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))))+(IKabs((r22*sj4))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j6=-1.5707963267949;
sj6=-1.0;
cj6=0;
IkReal x3098=((1.0)*cj9);
IkReal x3099=((((-1.0)*r21*x3098))+(((-1.0)*r20*sj9)));
j8eval[0]=x3099;
j8eval[1]=((IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))))+(IKabs(((((-1.0)*cj4*r00*x3098))+((r11*sj4*sj9))+(((-1.0)*r10*sj4*x3098))+((cj4*r01*sj9))))));
j8eval[2]=IKsign(x3099);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x3100=((1.0)*cj9);
CheckValue<IkReal> x3101 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*r00*x3100))+(((-1.0)*r10*sj4*x3100))+((r11*sj4*sj9))+((cj4*r01*sj9)))),IkReal(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3101.valid){
continue;
}
CheckValue<IkReal> x3102=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3100))+(((-1.0)*r20*sj9)))),-1);
if(!x3102.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x3101.value)+(((1.5707963267949)*(x3102.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x3103=IKcos(j8);
IkReal x3104=IKsin(j8);
CheckValue<IkReal> x3114=IKPowWithIntegerCheck(cj9,-1);
if(!x3114.valid){
continue;
}
IkReal x3105=x3114.value;
IkReal x3106=sj9*sj9;
IkReal x3107=((1.0)*sj4);
IkReal x3108=((1.0)*cj9);
IkReal x3109=(r10*x3104);
IkReal x3110=((1.0)*x3103);
IkReal x3111=(sj9*x3103);
IkReal x3112=(r00*x3104);
IkReal x3113=((1.0)*x3105*x3106);
evalcond[0]=((((-1.0)*r20*x3103*x3108))+((r22*x3104))+((r21*x3111)));
evalcond[1]=((((-1.0)*r10*x3103*x3108))+cj4+((r12*x3104))+((r11*x3111)));
evalcond[2]=(((r21*sj9*x3104))+(((-1.0)*r22*x3110))+(((-1.0)*r20*x3104*x3108)));
evalcond[3]=((((-1.0)*x3107))+((r02*x3104))+((r01*x3111))+(((-1.0)*r00*x3103*x3108)));
evalcond[4]=((((-1.0)*r02*x3110))+(((-1.0)*x3108*x3112))+(((-1.0)*x3112*x3113))+(((-1.0)*cj4)));
evalcond[5]=((((-1.0)*r12*x3110))+(((-1.0)*x3107))+(((-1.0)*x3109*x3113))+(((-1.0)*x3108*x3109)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x3115 = IKatan2WithCheck(IkReal((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x3115.valid){
continue;
}
CheckValue<IkReal> x3116=IKPowWithIntegerCheck(IKsign((((r10*sj9))+((cj9*r11)))),-1);
if(!x3116.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x3115.value)+(((1.5707963267949)*(x3116.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x3117=IKcos(j8);
IkReal x3118=IKsin(j8);
CheckValue<IkReal> x3128=IKPowWithIntegerCheck(cj9,-1);
if(!x3128.valid){
continue;
}
IkReal x3119=x3128.value;
IkReal x3120=sj9*sj9;
IkReal x3121=((1.0)*sj4);
IkReal x3122=((1.0)*cj9);
IkReal x3123=(r10*x3118);
IkReal x3124=((1.0)*x3117);
IkReal x3125=(sj9*x3117);
IkReal x3126=(r00*x3118);
IkReal x3127=((1.0)*x3119*x3120);
evalcond[0]=(((r22*x3118))+((r21*x3125))+(((-1.0)*r20*x3117*x3122)));
evalcond[1]=(((r12*x3118))+cj4+(((-1.0)*r10*x3117*x3122))+((r11*x3125)));
evalcond[2]=((((-1.0)*r20*x3118*x3122))+((r21*sj9*x3118))+(((-1.0)*r22*x3124)));
evalcond[3]=(((r01*x3125))+((r02*x3118))+(((-1.0)*x3121))+(((-1.0)*r00*x3117*x3122)));
evalcond[4]=((((-1.0)*r02*x3124))+(((-1.0)*x3122*x3126))+(((-1.0)*x3126*x3127))+(((-1.0)*cj4)));
evalcond[5]=((((-1.0)*x3122*x3123))+(((-1.0)*x3123*x3127))+(((-1.0)*r12*x3124))+(((-1.0)*x3121)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x3129=IKPowWithIntegerCheck(IKsign((((r00*sj9))+((cj9*r01)))),-1);
if(!x3129.valid){
continue;
}
CheckValue<IkReal> x3130 = IKatan2WithCheck(IkReal((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3130.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3129.value)))+(x3130.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x3131=IKcos(j8);
IkReal x3132=IKsin(j8);
CheckValue<IkReal> x3142=IKPowWithIntegerCheck(cj9,-1);
if(!x3142.valid){
continue;
}
IkReal x3133=x3142.value;
IkReal x3134=sj9*sj9;
IkReal x3135=((1.0)*sj4);
IkReal x3136=((1.0)*cj9);
IkReal x3137=(r10*x3132);
IkReal x3138=((1.0)*x3131);
IkReal x3139=(sj9*x3131);
IkReal x3140=(r00*x3132);
IkReal x3141=((1.0)*x3133*x3134);
evalcond[0]=((((-1.0)*r20*x3131*x3136))+((r21*x3139))+((r22*x3132)));
evalcond[1]=((((-1.0)*r10*x3131*x3136))+cj4+((r12*x3132))+((r11*x3139)));
evalcond[2]=((((-1.0)*r20*x3132*x3136))+((r21*sj9*x3132))+(((-1.0)*r22*x3138)));
evalcond[3]=(((r01*x3139))+(((-1.0)*r00*x3131*x3136))+((r02*x3132))+(((-1.0)*x3135)));
evalcond[4]=((((-1.0)*x3140*x3141))+(((-1.0)*x3136*x3140))+(((-1.0)*r02*x3138))+(((-1.0)*cj4)));
evalcond[5]=((((-1.0)*x3136*x3137))+(((-1.0)*r12*x3138))+(((-1.0)*x3137*x3141))+(((-1.0)*x3135)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4, j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3143=((5952.0)*cj6);
IkReal x3144=(r00*sj9);
IkReal x3145=(cj9*r01);
IkReal x3146=(cj6*sj5);
IkReal x3147=((20000.0)*px);
IkReal x3148=(cj5*sj6);
IkReal x3149=(sj5*x3145);
IkReal x3150=((5952.0)*x3148);
CheckValue<IkReal> x3151=IKPowWithIntegerCheck(((((-2183.0)*x3148))+(((-2183.0)*x3146))),-1);
if(!x3151.valid){
continue;
}
CheckValue<IkReal> x3152=IKPowWithIntegerCheck(((((-1.0)*x3146))+(((-1.0)*x3148))),-1);
if(!x3152.valid){
continue;
}
if( IKabs(((x3151.value)*((((x3146*x3147))+(((-1.0)*x3143*x3149))+(((-1.0)*x3145*x3150))+(((-1.0)*x3144*x3150))+((x3147*x3148))+(((-1.0)*sj5*x3143*x3144))+(((-8500.0)*x3149))+(((-8500.0)*sj5*x3144)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3152.value)*(((((-1.0)*x3144))+(((-1.0)*x3145)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3151.value)*((((x3146*x3147))+(((-1.0)*x3143*x3149))+(((-1.0)*x3145*x3150))+(((-1.0)*x3144*x3150))+((x3147*x3148))+(((-1.0)*sj5*x3143*x3144))+(((-8500.0)*x3149))+(((-8500.0)*sj5*x3144))))))+IKsqr(((x3152.value)*(((((-1.0)*x3144))+(((-1.0)*x3145))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x3151.value)*((((x3146*x3147))+(((-1.0)*x3143*x3149))+(((-1.0)*x3145*x3150))+(((-1.0)*x3144*x3150))+((x3147*x3148))+(((-1.0)*sj5*x3143*x3144))+(((-8500.0)*x3149))+(((-8500.0)*sj5*x3144))))), ((x3152.value)*(((((-1.0)*x3144))+(((-1.0)*x3145))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x3153=IKcos(j4);
IkReal x3154=IKsin(j4);
IkReal x3155=(cj9*r11);
IkReal x3156=(r00*sj9);
IkReal x3157=(cj6*sj5);
IkReal x3158=(cj5*sj6);
IkReal x3159=((0.425)*sj5);
IkReal x3160=(cj9*r01);
IkReal x3161=(r10*sj9);
IkReal x3162=((1.0)*x3153);
IkReal x3163=((0.39225)*x3153);
IkReal x3164=(x3154*x3157);
evalcond[0]=(x3156+x3160+(((-1.0)*x3157*x3162))+(((-1.0)*x3158*x3162)));
evalcond[1]=(x3155+x3161+(((-1.0)*x3164))+(((-1.0)*x3154*x3158)));
evalcond[2]=((((-0.09465)*x3156))+(((-0.09465)*x3160))+((x3153*x3159))+(((-1.0)*px))+((x3157*x3163))+(((-0.10915)*x3154))+((x3158*x3163)));
evalcond[3]=((((0.39225)*x3164))+(((0.10915)*x3153))+(((0.39225)*x3154*x3158))+(((-0.09465)*x3155))+((x3154*x3159))+(((-0.09465)*x3161))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j8eval[3];
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
IkReal x3165=(((r00*sj9))+((cj9*r01)));
j8eval[0]=x3165;
j8eval[1]=IKsign(x3165);
j8eval[2]=((IKabs((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))))+(IKabs((cj4*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
IkReal x3166=(((r10*sj9))+((cj9*r11)));
j8eval[0]=x3166;
j8eval[1]=IKsign(x3166);
j8eval[2]=((IKabs((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))))+(IKabs((r22*sj4))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
IkReal x3167=((1.0)*cj9);
IkReal x3168=((((-1.0)*r21*x3167))+(((-1.0)*r20*sj9)));
j8eval[0]=x3168;
j8eval[1]=((IKabs(((((-1.0)*r10*sj4*x3167))+((r11*sj4*sj9))+(((-1.0)*cj4*r00*x3167))+((cj4*r01*sj9)))))+(IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4))))));
j8eval[2]=IKsign(x3168);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x3169=((-1.0)*r20);
IkReal x3171 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3171)==0){
continue;
}
IkReal x3170=pow(x3171,-0.5);
CheckValue<IkReal> x3172 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3169),IKFAST_ATAN2_MAGTHRESH);
if(!x3172.valid){
continue;
}
IkReal gconst96=((-1.0)*(x3172.value));
IkReal gconst97=(r21*x3170);
IkReal gconst98=(x3169*x3170);
CheckValue<IkReal> x3173 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3173.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3173.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x3174=((-1.0)*r20);
IkReal x3175=x3170;
CheckValue<IkReal> x3177 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3174),IKFAST_ATAN2_MAGTHRESH);
if(!x3177.valid){
continue;
}
IkReal x3176=((-1.0)*(x3177.value));
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
sj9=gconst97;
cj9=gconst98;
j9=x3176;
IkReal gconst96=x3176;
IkReal gconst97=(r21*x3175);
IkReal gconst98=(x3174*x3175);
j8eval[0]=cj4;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
IkReal x3178=((-1.0)*r20);
IkReal x3179=x3170;
CheckValue<IkReal> x3181 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3178),IKFAST_ATAN2_MAGTHRESH);
if(!x3181.valid){
continue;
}
IkReal x3180=((-1.0)*(x3181.value));
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
sj9=gconst97;
cj9=gconst98;
j9=x3180;
IkReal gconst96=x3180;
IkReal gconst97=(r21*x3179);
IkReal gconst98=(x3178*x3179);
j8eval[0]=sj4;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x3182=((-1.0)*r20);
IkReal x3183=x3170;
CheckValue<IkReal> x3185 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3182),IKFAST_ATAN2_MAGTHRESH);
if(!x3185.valid){
continue;
}
IkReal x3184=((-1.0)*(x3185.value));
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
sj9=gconst97;
cj9=gconst98;
j9=x3184;
IkReal gconst96=x3184;
IkReal gconst97=(r21*x3183);
IkReal gconst98=(x3182*x3183);
IkReal x3186=((1.0)*(r22*r22));
CheckValue<IkReal> x3190=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x3186))),-1);
if(!x3190.valid){
continue;
}
IkReal x3187=x3190.value;
IkReal x3188=((1.0)*x3187);
IkReal x3189=((((-2.0)*x3187*(r20*r20)*(r21*r21)))+(((-1.0)*x3188*(r20*r20*r20*r20)))+(((-1.0)*x3186))+(((-1.0)*x3188*(r21*r21*r21*r21))));
j8eval[0]=x3189;
j8eval[1]=IKsign(x3189);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x3191=(cj5*sj6);
IkReal x3192=(gconst98*r20);
IkReal x3193=(cj6*sj5);
IkReal x3194=(gconst97*r21);
CheckValue<IkReal> x3195=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x3194*x3194)))+(((-1.0)*(r22*r22)))+(((2.0)*x3192*x3194))+(((-1.0)*(x3192*x3192))))),-1);
if(!x3195.valid){
continue;
}
CheckValue<IkReal> x3196 = IKatan2WithCheck(IkReal((((x3192*x3193))+((x3191*x3192))+(((-1.0)*x3193*x3194))+(((-1.0)*x3191*x3194)))),IkReal((((r22*x3193))+((r22*x3191)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3196.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3195.value)))+(x3196.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x3197=IKcos(j8);
IkReal x3198=IKsin(j8);
IkReal x3199=(gconst98*r21);
IkReal x3200=(gconst97*r20);
IkReal x3201=(gconst97*x3198);
IkReal x3202=((1.0)*x3197);
IkReal x3203=(gconst97*x3197);
IkReal x3204=((1.0)*gconst98*x3198);
evalcond[0]=((((-1.0)*gconst98*r20*x3202))+((r22*x3198))+((r21*x3203)));
evalcond[1]=((((-1.0)*gconst98*r10*x3202))+cj4+((r11*x3203))+((r12*x3198)));
evalcond[2]=((((-1.0)*sj4))+((r01*x3203))+(((-1.0)*gconst98*r00*x3202))+((r02*x3198)));
evalcond[3]=((((-1.0)*cj5*sj6))+(((-1.0)*r20*x3204))+(((-1.0)*r22*x3202))+(((-1.0)*cj6*sj5))+((r21*x3201)));
evalcond[4]=((((-1.0)*r02*x3202))+(((-1.0)*r00*x3204))+((r01*x3201))+((cj4*x3199))+((cj4*x3200)));
evalcond[5]=((((-1.0)*r10*x3204))+((r11*x3201))+((sj4*x3199))+(((-1.0)*r12*x3202))+((sj4*x3200)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x3205 = IKatan2WithCheck(IkReal((((gconst97*r21*sj4))+(((-1.0)*gconst98*r20*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x3205.valid){
continue;
}
CheckValue<IkReal> x3206=IKPowWithIntegerCheck(IKsign((((gconst98*r11))+((gconst97*r10)))),-1);
if(!x3206.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x3205.value)+(((1.5707963267949)*(x3206.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x3207=IKcos(j8);
IkReal x3208=IKsin(j8);
IkReal x3209=(gconst98*r21);
IkReal x3210=(gconst97*r20);
IkReal x3211=(gconst97*x3208);
IkReal x3212=((1.0)*x3207);
IkReal x3213=(gconst97*x3207);
IkReal x3214=((1.0)*gconst98*x3208);
evalcond[0]=(((r22*x3208))+((r21*x3213))+(((-1.0)*gconst98*r20*x3212)));
evalcond[1]=((((-1.0)*gconst98*r10*x3212))+cj4+((r12*x3208))+((r11*x3213)));
evalcond[2]=((((-1.0)*sj4))+((r01*x3213))+(((-1.0)*gconst98*r00*x3212))+((r02*x3208)));
evalcond[3]=((((-1.0)*cj5*sj6))+(((-1.0)*r20*x3214))+((r21*x3211))+(((-1.0)*r22*x3212))+(((-1.0)*cj6*sj5)));
evalcond[4]=(((cj4*x3210))+((r01*x3211))+(((-1.0)*r00*x3214))+(((-1.0)*r02*x3212))+((cj4*x3209)));
evalcond[5]=((((-1.0)*r10*x3214))+((sj4*x3210))+((r11*x3211))+(((-1.0)*r12*x3212))+((sj4*x3209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x3215 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*gconst98*r20))+((cj4*gconst97*r21)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3215.valid){
continue;
}
CheckValue<IkReal> x3216=IKPowWithIntegerCheck(IKsign((((gconst98*r01))+((gconst97*r00)))),-1);
if(!x3216.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x3215.value)+(((1.5707963267949)*(x3216.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x3217=IKcos(j8);
IkReal x3218=IKsin(j8);
IkReal x3219=(gconst98*r21);
IkReal x3220=(gconst97*r20);
IkReal x3221=(gconst97*x3218);
IkReal x3222=((1.0)*x3217);
IkReal x3223=(gconst97*x3217);
IkReal x3224=((1.0)*gconst98*x3218);
evalcond[0]=(((r22*x3218))+((r21*x3223))+(((-1.0)*gconst98*r20*x3222)));
evalcond[1]=(cj4+((r11*x3223))+((r12*x3218))+(((-1.0)*gconst98*r10*x3222)));
evalcond[2]=((((-1.0)*sj4))+(((-1.0)*gconst98*r00*x3222))+((r01*x3223))+((r02*x3218)));
evalcond[3]=((((-1.0)*cj5*sj6))+((r21*x3221))+(((-1.0)*r22*x3222))+(((-1.0)*r20*x3224))+(((-1.0)*cj6*sj5)));
evalcond[4]=(((cj4*x3219))+(((-1.0)*r02*x3222))+((r01*x3221))+((cj4*x3220))+(((-1.0)*r00*x3224)));
evalcond[5]=(((sj4*x3219))+((r11*x3221))+((sj4*x3220))+(((-1.0)*r10*x3224))+(((-1.0)*r12*x3222)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3225=((-1.0)*r21);
IkReal x3227 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3227)==0){
continue;
}
IkReal x3226=pow(x3227,-0.5);
CheckValue<IkReal> x3228 = IKatan2WithCheck(IkReal(x3225),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3228.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x3228.value))));
IkReal gconst100=(x3225*x3226);
IkReal gconst101=((1.0)*r20*x3226);
CheckValue<IkReal> x3229 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3229.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3229.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x3230=((-1.0)*r21);
CheckValue<IkReal> x3233 = IKatan2WithCheck(IkReal(x3230),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3233.valid){
continue;
}
IkReal x3231=((1.0)*(x3233.value));
IkReal x3232=x3226;
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
sj9=gconst100;
cj9=gconst101;
j9=((3.14159265)+(((-1.0)*x3231)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3231)));
IkReal gconst100=(x3230*x3232);
IkReal gconst101=((1.0)*r20*x3232);
IkReal x3234=r22*r22;
IkReal x3235=((1.0)*x3234);
CheckValue<IkReal> x3239=IKPowWithIntegerCheck(((-1.0)+x3234),-1);
if(!x3239.valid){
continue;
}
IkReal x3236=x3239.value;
if((((1.0)+(((-1.0)*x3235)))) < -0.00001)
continue;
IkReal x3237=IKsqrt(((1.0)+(((-1.0)*x3235))));
IkReal x3238=(cj4*x3236*x3237);
j8eval[0]=((IKabs((cj4*r22)))+(IKabs((x3238+(((-1.0)*x3235*x3238))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
IkReal x3240=((-1.0)*r21);
CheckValue<IkReal> x3243 = IKatan2WithCheck(IkReal(x3240),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3243.valid){
continue;
}
IkReal x3241=((1.0)*(x3243.value));
IkReal x3242=x3226;
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
sj9=gconst100;
cj9=gconst101;
j9=((3.14159265)+(((-1.0)*x3241)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3241)));
IkReal gconst100=(x3240*x3242);
IkReal gconst101=((1.0)*r20*x3242);
IkReal x3244=r22*r22;
IkReal x3245=((1.0)*x3244);
CheckValue<IkReal> x3249=IKPowWithIntegerCheck(((-1.0)+x3244),-1);
if(!x3249.valid){
continue;
}
IkReal x3246=x3249.value;
if((((1.0)+(((-1.0)*x3245)))) < -0.00001)
continue;
IkReal x3247=IKsqrt(((1.0)+(((-1.0)*x3245))));
IkReal x3248=(sj4*x3246*x3247);
j8eval[0]=((IKabs((x3248+(((-1.0)*x3245*x3248)))))+(IKabs((r22*sj4))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
IkReal x3250=((-1.0)*r21);
CheckValue<IkReal> x3253 = IKatan2WithCheck(IkReal(x3250),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3253.valid){
continue;
}
IkReal x3251=((1.0)*(x3253.value));
IkReal x3252=x3226;
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
sj9=gconst100;
cj9=gconst101;
j9=((3.14159265)+(((-1.0)*x3251)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3251)));
IkReal gconst100=(x3250*x3252);
IkReal gconst101=((1.0)*r20*x3252);
IkReal x3254=r22*r22;
IkReal x3255=((1.0)*cj4*r02);
IkReal x3256=((1.0)*r12*sj4);
CheckValue<IkReal> x3260=IKPowWithIntegerCheck(((-1.0)+x3254),-1);
if(!x3260.valid){
continue;
}
IkReal x3257=x3260.value;
if((((1.0)+(((-1.0)*x3254)))) < -0.00001)
continue;
IkReal x3258=IKsqrt(((1.0)+(((-1.0)*x3254))));
IkReal x3259=(r22*x3257*x3258);
j8eval[0]=0;
j8eval[1]=0;
j8eval[2]=((IKabs(((((-1.0)*x3256*x3259))+(((-1.0)*x3255*x3259)))))+(IKabs(((((-1.0)*x3255))+(((-1.0)*x3256))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x3261=((1.0)*sj4);
IkReal x3262=((1.0)*cj4);
CheckValue<IkReal> x3263=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r20))+(((-1.0)*gconst101*r21)))),-1);
if(!x3263.valid){
continue;
}
CheckValue<IkReal> x3264 = IKatan2WithCheck(IkReal((((cj4*gconst100*r01))+(((-1.0)*gconst101*r00*x3262))+((gconst100*r11*sj4))+(((-1.0)*gconst101*r10*x3261)))),IkReal(((((-1.0)*r12*x3261))+(((-1.0)*r02*x3262)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3264.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3263.value)))+(x3264.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x3265=IKcos(j8);
IkReal x3266=IKsin(j8);
IkReal x3267=(gconst100*r20);
IkReal x3268=(gconst101*r21);
IkReal x3269=((1.0)*x3265);
IkReal x3270=(gconst100*x3266);
IkReal x3271=(gconst100*x3265);
IkReal x3272=(gconst101*x3269);
IkReal x3273=((1.0)*gconst101*x3266);
evalcond[0]=(((r21*x3271))+(((-1.0)*r20*x3272))+((r22*x3266)));
evalcond[1]=(cj4+((r11*x3271))+(((-1.0)*r10*x3272))+((r12*x3266)));
evalcond[2]=((((-1.0)*sj4))+((r01*x3271))+(((-1.0)*r00*x3272))+((r02*x3266)));
evalcond[3]=((((-1.0)*cj5*sj6))+((r21*x3270))+(((-1.0)*r20*x3273))+(((-1.0)*r22*x3269))+(((-1.0)*cj6*sj5)));
evalcond[4]=(((cj4*x3267))+((cj4*x3268))+((r01*x3270))+(((-1.0)*r00*x3273))+(((-1.0)*r02*x3269)));
evalcond[5]=((((-1.0)*r12*x3269))+((r11*x3270))+(((-1.0)*r10*x3273))+((sj4*x3267))+((sj4*x3268)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x3274=IKPowWithIntegerCheck(IKsign((((gconst100*r10))+((gconst101*r11)))),-1);
if(!x3274.valid){
continue;
}
CheckValue<IkReal> x3275 = IKatan2WithCheck(IkReal(((((-1.0)*gconst101*r20*sj4))+((gconst100*r21*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x3275.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3274.value)))+(x3275.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x3276=IKcos(j8);
IkReal x3277=IKsin(j8);
IkReal x3278=(gconst100*r20);
IkReal x3279=(gconst101*r21);
IkReal x3280=((1.0)*x3276);
IkReal x3281=(gconst100*x3277);
IkReal x3282=(gconst100*x3276);
IkReal x3283=(gconst101*x3280);
IkReal x3284=((1.0)*gconst101*x3277);
evalcond[0]=((((-1.0)*r20*x3283))+((r21*x3282))+((r22*x3277)));
evalcond[1]=((((-1.0)*r10*x3283))+cj4+((r12*x3277))+((r11*x3282)));
evalcond[2]=((((-1.0)*sj4))+(((-1.0)*r00*x3283))+((r02*x3277))+((r01*x3282)));
evalcond[3]=((((-1.0)*cj5*sj6))+(((-1.0)*r20*x3284))+(((-1.0)*r22*x3280))+((r21*x3281))+(((-1.0)*cj6*sj5)));
evalcond[4]=(((cj4*x3279))+((cj4*x3278))+(((-1.0)*r02*x3280))+(((-1.0)*r00*x3284))+((r01*x3281)));
evalcond[5]=((((-1.0)*r10*x3284))+(((-1.0)*r12*x3280))+((sj4*x3279))+((sj4*x3278))+((r11*x3281)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x3285=IKPowWithIntegerCheck(IKsign((((gconst100*r00))+((gconst101*r01)))),-1);
if(!x3285.valid){
continue;
}
CheckValue<IkReal> x3286 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*gconst101*r20))+((cj4*gconst100*r21)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3286.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3285.value)))+(x3286.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x3287=IKcos(j8);
IkReal x3288=IKsin(j8);
IkReal x3289=(gconst100*r20);
IkReal x3290=(gconst101*r21);
IkReal x3291=((1.0)*x3287);
IkReal x3292=(gconst100*x3288);
IkReal x3293=(gconst100*x3287);
IkReal x3294=(gconst101*x3291);
IkReal x3295=((1.0)*gconst101*x3288);
evalcond[0]=((((-1.0)*r20*x3294))+((r22*x3288))+((r21*x3293)));
evalcond[1]=((((-1.0)*r10*x3294))+cj4+((r11*x3293))+((r12*x3288)));
evalcond[2]=(((r01*x3293))+(((-1.0)*sj4))+((r02*x3288))+(((-1.0)*r00*x3294)));
evalcond[3]=((((-1.0)*cj5*sj6))+(((-1.0)*r20*x3295))+(((-1.0)*r22*x3291))+((r21*x3292))+(((-1.0)*cj6*sj5)));
evalcond[4]=(((r01*x3292))+((cj4*x3289))+((cj4*x3290))+(((-1.0)*r02*x3291))+(((-1.0)*r00*x3295)));
evalcond[5]=((((-1.0)*r12*x3291))+(((-1.0)*r10*x3295))+((sj4*x3289))+((sj4*x3290))+((r11*x3292)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3297 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3297)==0){
continue;
}
IkReal x3296=pow(x3297,-0.5);
CheckValue<IkReal> x3298 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3298.valid){
continue;
}
IkReal gconst102=((-1.0)*(x3298.value));
IkReal gconst103=((-1.0)*r11*x3296);
IkReal gconst104=(r10*x3296);
CheckValue<IkReal> x3299 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3299.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3299.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
CheckValue<IkReal> x3302 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3302.valid){
continue;
}
IkReal x3300=((-1.0)*(x3302.value));
IkReal x3301=x3296;
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
sj9=gconst103;
cj9=gconst104;
j9=x3300;
IkReal gconst102=x3300;
IkReal gconst103=((-1.0)*r11*x3301);
IkReal gconst104=(r10*x3301);
j8eval[0]=cj4;
j8eval[1]=r22;
j8eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x3303=((1.0)*gconst104);
CheckValue<IkReal> x3304=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst103*r20))+(((-1.0)*r21*x3303)))),-1);
if(!x3304.valid){
continue;
}
CheckValue<IkReal> x3305 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*r00*x3303))+(((-1.0)*r10*sj4*x3303))+((gconst103*r11*sj4))+((cj4*gconst103*r01)))),IkReal(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3305.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3304.value)))+(x3305.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x3306=IKcos(j8);
IkReal x3307=IKsin(j8);
IkReal x3308=(gconst104*r21);
IkReal x3309=(gconst103*r11);
IkReal x3310=(gconst103*r20);
IkReal x3311=(gconst104*r00);
IkReal x3312=(gconst104*r20);
IkReal x3313=(gconst104*r10);
IkReal x3314=((1.0)*x3306);
IkReal x3315=(gconst103*x3307);
IkReal x3316=((1.0)*x3307);
IkReal x3317=(gconst103*x3306);
evalcond[0]=(((r21*x3317))+((r22*x3307))+(((-1.0)*x3312*x3314)));
evalcond[1]=(cj4+(((-1.0)*x3313*x3314))+((r12*x3307))+((x3306*x3309)));
evalcond[2]=((((-1.0)*sj4))+((r02*x3307))+(((-1.0)*x3311*x3314))+((r01*x3317)));
evalcond[3]=((((-1.0)*cj5*sj6))+((r21*x3315))+(((-1.0)*r22*x3314))+(((-1.0)*x3312*x3316))+(((-1.0)*cj6*sj5)));
evalcond[4]=(((cj4*x3310))+((cj4*x3308))+(((-1.0)*r02*x3314))+(((-1.0)*x3311*x3316))+((r01*x3315)));
evalcond[5]=(((sj4*x3308))+((sj4*x3310))+(((-1.0)*x3313*x3316))+((x3307*x3309))+(((-1.0)*r12*x3314)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x3318=IKPowWithIntegerCheck(IKsign((((gconst103*r00))+((gconst104*r01)))),-1);
if(!x3318.valid){
continue;
}
CheckValue<IkReal> x3319 = IKatan2WithCheck(IkReal((((cj4*gconst103*r21))+(((-1.0)*cj4*gconst104*r20)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3319.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3318.value)))+(x3319.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x3320=IKcos(j8);
IkReal x3321=IKsin(j8);
IkReal x3322=(gconst104*r21);
IkReal x3323=(gconst103*r11);
IkReal x3324=(gconst103*r20);
IkReal x3325=(gconst104*r00);
IkReal x3326=(gconst104*r20);
IkReal x3327=(gconst104*r10);
IkReal x3328=((1.0)*x3320);
IkReal x3329=(gconst103*x3321);
IkReal x3330=((1.0)*x3321);
IkReal x3331=(gconst103*x3320);
evalcond[0]=(((r22*x3321))+((r21*x3331))+(((-1.0)*x3326*x3328)));
evalcond[1]=(((r12*x3321))+(((-1.0)*x3327*x3328))+cj4+((x3320*x3323)));
evalcond[2]=((((-1.0)*sj4))+(((-1.0)*x3325*x3328))+((r01*x3331))+((r02*x3321)));
evalcond[3]=((((-1.0)*cj5*sj6))+((r21*x3329))+(((-1.0)*r22*x3328))+(((-1.0)*x3326*x3330))+(((-1.0)*cj6*sj5)));
evalcond[4]=((((-1.0)*r02*x3328))+((r01*x3329))+((cj4*x3322))+((cj4*x3324))+(((-1.0)*x3325*x3330)));
evalcond[5]=(((sj4*x3322))+((sj4*x3324))+((x3321*x3323))+(((-1.0)*r12*x3328))+(((-1.0)*x3327*x3330)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3333 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3333)==0){
continue;
}
IkReal x3332=pow(x3333,-0.5);
CheckValue<IkReal> x3334 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3334.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x3334.value))));
IkReal gconst106=((1.0)*r11*x3332);
IkReal gconst107=((-1.0)*r10*x3332);
CheckValue<IkReal> x3335 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3335.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3335.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
CheckValue<IkReal> x3338 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3338.valid){
continue;
}
IkReal x3336=((1.0)*(x3338.value));
IkReal x3337=x3332;
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
sj9=gconst106;
cj9=gconst107;
j9=((3.14159265)+(((-1.0)*x3336)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3336)));
IkReal gconst106=((1.0)*r11*x3337);
IkReal gconst107=((-1.0)*r10*x3337);
j8eval[0]=cj4;
j8eval[1]=r22;
j8eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[5];
CheckValue<IkReal> x3341 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3341.valid){
continue;
}
IkReal x3339=((1.0)*(x3341.value));
IkReal x3340=x3332;
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
sj9=gconst106;
cj9=gconst107;
j9=((3.14159265)+(((-1.0)*x3339)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3339)));
IkReal gconst106=((1.0)*r11*x3340);
IkReal gconst107=((-1.0)*r10*x3340);
j8eval[0]=0;
j8eval[1]=0;
j8eval[2]=r22;
j8eval[3]=sj4;
j8eval[4]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  || IKabs(j8eval[4]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
CheckValue<IkReal> x3344 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3344.valid){
continue;
}
IkReal x3342=((1.0)*(x3344.value));
IkReal x3343=x3332;
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
sj9=gconst106;
cj9=gconst107;
j9=((3.14159265)+(((-1.0)*x3342)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3342)));
IkReal gconst106=((1.0)*r11*x3343);
IkReal gconst107=((-1.0)*r10*x3343);
IkReal x3345=r12*r12;
IkReal x3346=(cj4*r02);
IkReal x3347=x3332;
IkReal x3348=(sj4*x3347);
j8eval[0]=((IKabs(((((-1.0)*x3346))+(((-1.0)*r12*sj4)))))+(IKabs(((((-1.0)*x3348))+((r12*x3346*x3347))+((x3345*x3348))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x3349=((1.0)*gconst107);
CheckValue<IkReal> x3350=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3349))+(((-1.0)*gconst106*r20)))),-1);
if(!x3350.valid){
continue;
}
CheckValue<IkReal> x3351 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*r00*x3349))+(((-1.0)*r10*sj4*x3349))+((gconst106*r11*sj4))+((cj4*gconst106*r01)))),IkReal(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3351.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3350.value)))+(x3351.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x3352=IKcos(j8);
IkReal x3353=IKsin(j8);
IkReal x3354=(gconst106*r20);
IkReal x3355=(gconst106*r11);
IkReal x3356=((1.0)*gconst107);
IkReal x3357=(gconst107*r21);
IkReal x3358=((1.0)*x3352);
IkReal x3359=(gconst106*x3352);
IkReal x3360=(gconst106*x3353);
evalcond[0]=(((r21*x3359))+(((-1.0)*r20*x3352*x3356))+((r22*x3353)));
evalcond[1]=(((r12*x3353))+cj4+(((-1.0)*r10*x3352*x3356))+((x3352*x3355)));
evalcond[2]=((((-1.0)*sj4))+((r01*x3359))+(((-1.0)*r00*x3352*x3356))+((r02*x3353)));
evalcond[3]=((((-1.0)*cj5*sj6))+((r21*x3360))+(((-1.0)*r20*x3353*x3356))+(((-1.0)*r22*x3358))+(((-1.0)*cj6*sj5)));
evalcond[4]=((((-1.0)*r00*x3353*x3356))+(((-1.0)*r02*x3358))+((r01*x3360))+((cj4*x3357))+((cj4*x3354)));
evalcond[5]=((((-1.0)*r10*x3353*x3356))+((sj4*x3357))+((sj4*x3354))+(((-1.0)*r12*x3358))+((x3353*x3355)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x3361=IKPowWithIntegerCheck(IKsign((((gconst107*r11))+((gconst106*r10)))),-1);
if(!x3361.valid){
continue;
}
CheckValue<IkReal> x3362 = IKatan2WithCheck(IkReal((((gconst106*r21*sj4))+(((-1.0)*gconst107*r20*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x3362.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3361.value)))+(x3362.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x3363=IKcos(j8);
IkReal x3364=IKsin(j8);
IkReal x3365=(gconst106*r20);
IkReal x3366=(gconst106*r11);
IkReal x3367=((1.0)*gconst107);
IkReal x3368=(gconst107*r21);
IkReal x3369=((1.0)*x3363);
IkReal x3370=(gconst106*x3363);
IkReal x3371=(gconst106*x3364);
evalcond[0]=(((r22*x3364))+(((-1.0)*r20*x3363*x3367))+((r21*x3370)));
evalcond[1]=(((x3363*x3366))+cj4+(((-1.0)*r10*x3363*x3367))+((r12*x3364)));
evalcond[2]=(((r01*x3370))+(((-1.0)*sj4))+((r02*x3364))+(((-1.0)*r00*x3363*x3367)));
evalcond[3]=((((-1.0)*cj5*sj6))+(((-1.0)*r22*x3369))+((r21*x3371))+(((-1.0)*r20*x3364*x3367))+(((-1.0)*cj6*sj5)));
evalcond[4]=(((r01*x3371))+(((-1.0)*r02*x3369))+((cj4*x3365))+((cj4*x3368))+(((-1.0)*r00*x3364*x3367)));
evalcond[5]=((((-1.0)*r12*x3369))+(((-1.0)*r10*x3364*x3367))+((x3364*x3366))+((sj4*x3365))+((sj4*x3368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x3372 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*gconst107*r20))+((cj4*gconst106*r21)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3372.valid){
continue;
}
CheckValue<IkReal> x3373=IKPowWithIntegerCheck(IKsign((((gconst107*r01))+((gconst106*r00)))),-1);
if(!x3373.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x3372.value)+(((1.5707963267949)*(x3373.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x3374=IKcos(j8);
IkReal x3375=IKsin(j8);
IkReal x3376=(gconst106*r20);
IkReal x3377=(gconst106*r11);
IkReal x3378=((1.0)*gconst107);
IkReal x3379=(gconst107*r21);
IkReal x3380=((1.0)*x3374);
IkReal x3381=(gconst106*x3374);
IkReal x3382=(gconst106*x3375);
evalcond[0]=(((r22*x3375))+(((-1.0)*r20*x3374*x3378))+((r21*x3381)));
evalcond[1]=(((r12*x3375))+cj4+((x3374*x3377))+(((-1.0)*r10*x3374*x3378)));
evalcond[2]=(((r01*x3381))+(((-1.0)*sj4))+((r02*x3375))+(((-1.0)*r00*x3374*x3378)));
evalcond[3]=((((-1.0)*cj5*sj6))+(((-1.0)*r22*x3380))+(((-1.0)*r20*x3375*x3378))+((r21*x3382))+(((-1.0)*cj6*sj5)));
evalcond[4]=(((r01*x3382))+((cj4*x3379))+((cj4*x3376))+(((-1.0)*r02*x3380))+(((-1.0)*r00*x3375*x3378)));
evalcond[5]=(((x3375*x3377))+(((-1.0)*r10*x3375*x3378))+(((-1.0)*r12*x3380))+((sj4*x3379))+((sj4*x3376)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
sj4=0;
cj4=1.0;
j4=0;
IkReal x3383=(((r00*sj9))+((cj9*r01)));
j8eval[0]=x3383;
j8eval[1]=IKsign(x3383);
j8eval[2]=((IKabs(r22))+(IKabs((((r21*sj9))+(((-1.0)*cj9*r20))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
sj4=0;
cj4=1.0;
j4=0;
IkReal x3384=((1.0)*cj9);
IkReal x3385=((((-1.0)*r21*x3384))+(((-1.0)*r20*sj9)));
j8eval[0]=x3385;
j8eval[1]=((IKabs(r02))+(IKabs((((r01*sj9))+(((-1.0)*r00*x3384))))));
j8eval[2]=IKsign(x3385);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
sj4=0;
cj4=1.0;
j4=0;
IkReal x3386=r11*r11;
IkReal x3387=cj9*cj9;
IkReal x3388=(r11*sj9);
IkReal x3389=(cj9*r10);
IkReal x3390=((((-1.0)*x3387*(r10*r10)))+(((-1.0)*x3386))+(((-1.0)*(r12*r12)))+(((2.0)*x3388*x3389))+((x3386*x3387)));
j8eval[0]=x3390;
j8eval[1]=IKsign(x3390);
j8eval[2]=((IKabs(((((-1.0)*x3389))+x3388)))+(IKabs(r12)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x3391=r11*r11;
IkReal x3392=cj9*cj9;
IkReal x3393=(r11*sj9);
IkReal x3394=(cj9*r10);
CheckValue<IkReal> x3395 = IKatan2WithCheck(IkReal(r12),IkReal((x3393+(((-1.0)*x3394)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3395.valid){
continue;
}
CheckValue<IkReal> x3396=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3392*(r10*r10)))+((x3391*x3392))+(((-1.0)*x3391))+(((-1.0)*(r12*r12)))+(((2.0)*x3393*x3394)))),-1);
if(!x3396.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x3395.value)+(((1.5707963267949)*(x3396.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x3397=IKcos(j8);
IkReal x3398=IKsin(j8);
IkReal x3399=((1.0)*x3397);
IkReal x3400=(sj9*x3397);
IkReal x3401=(sj9*x3398);
IkReal x3402=(cj9*x3399);
IkReal x3403=((1.0)*cj9*x3398);
evalcond[0]=((((-1.0)*r20*x3402))+((r21*x3400))+((r22*x3398)));
evalcond[1]=((((-1.0)*r00*x3402))+((r02*x3398))+((r01*x3400)));
evalcond[2]=((1.0)+((r11*x3400))+((r12*x3398))+(((-1.0)*r10*x3402)));
evalcond[3]=(((r11*x3401))+(((-1.0)*r12*x3399))+(((-1.0)*r10*x3403)));
evalcond[4]=((((-1.0)*r00*x3403))+(((-1.0)*r02*x3399))+((cj9*r21))+((r01*x3401))+((r20*sj9)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*r22*x3399))+(((-1.0)*r20*x3403))+((r21*x3401))+(((-1.0)*cj6*sj5)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x3404=((1.0)*cj9);
CheckValue<IkReal> x3405=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3404))+(((-1.0)*r20*sj9)))),-1);
if(!x3405.valid){
continue;
}
CheckValue<IkReal> x3406 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x3404))+((r01*sj9)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x3406.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3405.value)))+(x3406.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x3407=IKcos(j8);
IkReal x3408=IKsin(j8);
IkReal x3409=((1.0)*x3407);
IkReal x3410=(sj9*x3407);
IkReal x3411=(sj9*x3408);
IkReal x3412=(cj9*x3409);
IkReal x3413=((1.0)*cj9*x3408);
evalcond[0]=(((r22*x3408))+(((-1.0)*r20*x3412))+((r21*x3410)));
evalcond[1]=(((r02*x3408))+((r01*x3410))+(((-1.0)*r00*x3412)));
evalcond[2]=((1.0)+((r11*x3410))+((r12*x3408))+(((-1.0)*r10*x3412)));
evalcond[3]=((((-1.0)*r12*x3409))+((r11*x3411))+(((-1.0)*r10*x3413)));
evalcond[4]=(((r01*x3411))+((cj9*r21))+(((-1.0)*r02*x3409))+((r20*sj9))+(((-1.0)*r00*x3413)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*r20*x3413))+((r21*x3411))+(((-1.0)*cj6*sj5))+(((-1.0)*r22*x3409)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x3414=IKPowWithIntegerCheck(IKsign((((r00*sj9))+((cj9*r01)))),-1);
if(!x3414.valid){
continue;
}
CheckValue<IkReal> x3415 = IKatan2WithCheck(IkReal((((r21*sj9))+(((-1.0)*cj9*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3415.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3414.value)))+(x3415.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x3416=IKcos(j8);
IkReal x3417=IKsin(j8);
IkReal x3418=((1.0)*x3416);
IkReal x3419=(sj9*x3416);
IkReal x3420=(sj9*x3417);
IkReal x3421=(cj9*x3418);
IkReal x3422=((1.0)*cj9*x3417);
evalcond[0]=(((r22*x3417))+((r21*x3419))+(((-1.0)*r20*x3421)));
evalcond[1]=(((r02*x3417))+((r01*x3419))+(((-1.0)*r00*x3421)));
evalcond[2]=((1.0)+(((-1.0)*r10*x3421))+((r12*x3417))+((r11*x3419)));
evalcond[3]=((((-1.0)*r10*x3422))+(((-1.0)*r12*x3418))+((r11*x3420)));
evalcond[4]=((((-1.0)*r02*x3418))+((cj9*r21))+(((-1.0)*r00*x3422))+((r20*sj9))+((r01*x3420)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*r22*x3418))+((r21*x3420))+(((-1.0)*r20*x3422))+(((-1.0)*cj6*sj5)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x3423=(((cj9*r21))+((r20*sj9)));
j8eval[0]=x3423;
j8eval[1]=((IKabs(r02))+(IKabs((((r01*sj9))+(((-1.0)*cj9*r00))))));
j8eval[2]=IKsign(x3423);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x3424=((1.0)*cj9);
IkReal x3425=((((-1.0)*r00*sj9))+(((-1.0)*r01*x3424)));
j8eval[0]=x3425;
j8eval[1]=((IKabs((((r21*sj9))+(((-1.0)*r20*x3424)))))+(IKabs(r22)));
j8eval[2]=IKsign(x3425);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x3426=cj9*cj9;
IkReal x3427=r11*r11;
IkReal x3428=(r11*sj9);
IkReal x3429=(cj9*r10);
IkReal x3430=((((-1.0)*x3426*x3427))+((x3426*(r10*r10)))+(r12*r12)+x3427+(((-2.0)*x3428*x3429)));
j8eval[0]=x3430;
j8eval[1]=IKsign(x3430);
j8eval[2]=((IKabs((x3428+(((-1.0)*x3429)))))+(IKabs(r12)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x3431=cj9*cj9;
IkReal x3432=r11*r11;
IkReal x3433=(r11*sj9);
IkReal x3434=(cj9*r10);
CheckValue<IkReal> x3435 = IKatan2WithCheck(IkReal(r12),IkReal((x3433+(((-1.0)*x3434)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3435.valid){
continue;
}
CheckValue<IkReal> x3436=IKPowWithIntegerCheck(IKsign(((((-2.0)*x3433*x3434))+(r12*r12)+((x3431*(r10*r10)))+x3432+(((-1.0)*x3431*x3432)))),-1);
if(!x3436.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x3435.value)+(((1.5707963267949)*(x3436.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x3437=IKcos(j8);
IkReal x3438=IKsin(j8);
IkReal x3439=((1.0)*cj9);
IkReal x3440=(sj9*x3438);
IkReal x3441=((1.0)*x3437);
IkReal x3442=(sj9*x3437);
IkReal x3443=(x3437*x3439);
evalcond[0]=(((r21*x3442))+(((-1.0)*r20*x3443))+((r22*x3438)));
evalcond[1]=(((r01*x3442))+((r02*x3438))+(((-1.0)*r00*x3443)));
evalcond[2]=((-1.0)+((r11*x3442))+(((-1.0)*r10*x3443))+((r12*x3438)));
evalcond[3]=(((r11*x3440))+(((-1.0)*r10*x3438*x3439))+(((-1.0)*r12*x3441)));
evalcond[4]=((((-1.0)*cj5*sj6))+((r21*x3440))+(((-1.0)*r20*x3438*x3439))+(((-1.0)*r22*x3441))+(((-1.0)*cj6*sj5)));
evalcond[5]=((((-1.0)*r02*x3441))+((r01*x3440))+(((-1.0)*r21*x3439))+(((-1.0)*r00*x3438*x3439))+(((-1.0)*r20*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x3444=((1.0)*cj9);
CheckValue<IkReal> x3445=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj9))+(((-1.0)*r01*x3444)))),-1);
if(!x3445.valid){
continue;
}
CheckValue<IkReal> x3446 = IKatan2WithCheck(IkReal((((r21*sj9))+(((-1.0)*r20*x3444)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3446.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3445.value)))+(x3446.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x3447=IKcos(j8);
IkReal x3448=IKsin(j8);
IkReal x3449=((1.0)*cj9);
IkReal x3450=(sj9*x3448);
IkReal x3451=((1.0)*x3447);
IkReal x3452=(sj9*x3447);
IkReal x3453=(x3447*x3449);
evalcond[0]=(((r21*x3452))+((r22*x3448))+(((-1.0)*r20*x3453)));
evalcond[1]=(((r02*x3448))+((r01*x3452))+(((-1.0)*r00*x3453)));
evalcond[2]=((-1.0)+((r12*x3448))+(((-1.0)*r10*x3453))+((r11*x3452)));
evalcond[3]=((((-1.0)*r10*x3448*x3449))+(((-1.0)*r12*x3451))+((r11*x3450)));
evalcond[4]=((((-1.0)*cj5*sj6))+(((-1.0)*r20*x3448*x3449))+((r21*x3450))+(((-1.0)*r22*x3451))+(((-1.0)*cj6*sj5)));
evalcond[5]=((((-1.0)*r00*x3448*x3449))+(((-1.0)*r21*x3449))+(((-1.0)*r02*x3451))+((r01*x3450))+(((-1.0)*r20*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x3454 = IKatan2WithCheck(IkReal((((r01*sj9))+(((-1.0)*cj9*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x3454.valid){
continue;
}
CheckValue<IkReal> x3455=IKPowWithIntegerCheck(IKsign((((cj9*r21))+((r20*sj9)))),-1);
if(!x3455.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x3454.value)+(((1.5707963267949)*(x3455.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x3456=IKcos(j8);
IkReal x3457=IKsin(j8);
IkReal x3458=((1.0)*cj9);
IkReal x3459=(sj9*x3457);
IkReal x3460=((1.0)*x3456);
IkReal x3461=(sj9*x3456);
IkReal x3462=(x3456*x3458);
evalcond[0]=((((-1.0)*r20*x3462))+((r22*x3457))+((r21*x3461)));
evalcond[1]=((((-1.0)*r00*x3462))+((r01*x3461))+((r02*x3457)));
evalcond[2]=((-1.0)+(((-1.0)*r10*x3462))+((r12*x3457))+((r11*x3461)));
evalcond[3]=((((-1.0)*r10*x3457*x3458))+(((-1.0)*r12*x3460))+((r11*x3459)));
evalcond[4]=((((-1.0)*cj5*sj6))+(((-1.0)*r20*x3457*x3458))+((r21*x3459))+(((-1.0)*r22*x3460))+(((-1.0)*cj6*sj5)));
evalcond[5]=((((-1.0)*r02*x3460))+(((-1.0)*r00*x3457*x3458))+(((-1.0)*r21*x3458))+((r01*x3459))+(((-1.0)*r20*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3464 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3464)==0){
continue;
}
IkReal x3463=pow(x3464,-0.5);
CheckValue<IkReal> x3465 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3465.valid){
continue;
}
IkReal gconst108=((-1.0)*(x3465.value));
IkReal gconst109=((-1.0)*r01*x3463);
IkReal gconst110=(r00*x3463);
CheckValue<IkReal> x3466 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3466.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3466.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
CheckValue<IkReal> x3469 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3469.valid){
continue;
}
IkReal x3467=((-1.0)*(x3469.value));
IkReal x3468=x3463;
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
sj9=gconst109;
cj9=gconst110;
j9=x3467;
IkReal gconst108=x3467;
IkReal gconst109=((-1.0)*r01*x3468);
IkReal gconst110=(r00*x3468);
j8eval[0]=r22;
j8eval[1]=sj4;
j8eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x3470=((1.0)*gconst110);
CheckValue<IkReal> x3471 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*r00*x3470))+(((-1.0)*r10*sj4*x3470))+((cj4*gconst109*r01))+((gconst109*r11*sj4)))),IkReal(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3471.valid){
continue;
}
CheckValue<IkReal> x3472=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3470))+(((-1.0)*gconst109*r20)))),-1);
if(!x3472.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x3471.value)+(((1.5707963267949)*(x3472.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x3473=IKcos(j8);
IkReal x3474=IKsin(j8);
IkReal x3475=((1.0)*gconst110);
IkReal x3476=(gconst109*r20);
IkReal x3477=(gconst110*r21);
IkReal x3478=(gconst109*x3473);
IkReal x3479=(gconst109*x3474);
IkReal x3480=((1.0)*x3473);
evalcond[0]=(((r21*x3478))+((r22*x3474))+(((-1.0)*r20*x3473*x3475)));
evalcond[1]=(cj4+((r12*x3474))+((r11*x3478))+(((-1.0)*r10*x3473*x3475)));
evalcond[2]=((((-1.0)*sj4))+((r01*x3478))+((r02*x3474))+(((-1.0)*r00*x3473*x3475)));
evalcond[3]=((((-1.0)*cj5*sj6))+(((-1.0)*r20*x3474*x3475))+(((-1.0)*r22*x3480))+((r21*x3479))+(((-1.0)*cj6*sj5)));
evalcond[4]=(((cj4*x3477))+((cj4*x3476))+(((-1.0)*r02*x3480))+((r01*x3479))+(((-1.0)*r00*x3474*x3475)));
evalcond[5]=(((sj4*x3477))+((sj4*x3476))+(((-1.0)*r12*x3480))+(((-1.0)*r10*x3474*x3475))+((r11*x3479)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x3481=IKPowWithIntegerCheck(IKsign((((gconst109*r10))+((gconst110*r11)))),-1);
if(!x3481.valid){
continue;
}
CheckValue<IkReal> x3482 = IKatan2WithCheck(IkReal((((gconst109*r21*sj4))+(((-1.0)*gconst110*r20*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x3482.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3481.value)))+(x3482.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x3483=IKcos(j8);
IkReal x3484=IKsin(j8);
IkReal x3485=((1.0)*gconst110);
IkReal x3486=(gconst109*r20);
IkReal x3487=(gconst110*r21);
IkReal x3488=(gconst109*x3483);
IkReal x3489=(gconst109*x3484);
IkReal x3490=((1.0)*x3483);
evalcond[0]=((((-1.0)*r20*x3483*x3485))+((r21*x3488))+((r22*x3484)));
evalcond[1]=(cj4+((r12*x3484))+((r11*x3488))+(((-1.0)*r10*x3483*x3485)));
evalcond[2]=((((-1.0)*sj4))+((r01*x3488))+((r02*x3484))+(((-1.0)*r00*x3483*x3485)));
evalcond[3]=((((-1.0)*cj5*sj6))+(((-1.0)*r20*x3484*x3485))+(((-1.0)*r22*x3490))+((r21*x3489))+(((-1.0)*cj6*sj5)));
evalcond[4]=((((-1.0)*r02*x3490))+((cj4*x3486))+((cj4*x3487))+((r01*x3489))+(((-1.0)*r00*x3484*x3485)));
evalcond[5]=((((-1.0)*r12*x3490))+(((-1.0)*r10*x3484*x3485))+((r11*x3489))+((sj4*x3486))+((sj4*x3487)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3492 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3492)==0){
continue;
}
IkReal x3491=pow(x3492,-0.5);
CheckValue<IkReal> x3493 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3493.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x3493.value))));
IkReal gconst112=((1.0)*r01*x3491);
IkReal gconst113=((-1.0)*r00*x3491);
CheckValue<IkReal> x3494 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3494.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3494.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[5];
CheckValue<IkReal> x3497 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3497.valid){
continue;
}
IkReal x3495=((1.0)*(x3497.value));
IkReal x3496=x3491;
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
sj9=gconst112;
cj9=gconst113;
j9=((3.14159265)+(((-1.0)*x3495)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3495)));
IkReal gconst112=((1.0)*r01*x3496);
IkReal gconst113=((-1.0)*r00*x3496);
j8eval[0]=0;
j8eval[1]=cj4;
j8eval[2]=r22;
j8eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j8eval[4]=0;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  || IKabs(j8eval[4]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
CheckValue<IkReal> x3500 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3500.valid){
continue;
}
IkReal x3498=((1.0)*(x3500.value));
IkReal x3499=x3491;
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
sj9=gconst112;
cj9=gconst113;
j9=((3.14159265)+(((-1.0)*x3498)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3498)));
IkReal gconst112=((1.0)*r01*x3499);
IkReal gconst113=((-1.0)*r00*x3499);
j8eval[0]=r22;
j8eval[1]=sj4;
j8eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
CheckValue<IkReal> x3503 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3503.valid){
continue;
}
IkReal x3501=((1.0)*(x3503.value));
IkReal x3502=x3491;
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
sj9=gconst112;
cj9=gconst113;
j9=((3.14159265)+(((-1.0)*x3501)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3501)));
IkReal gconst112=((1.0)*r01*x3502);
IkReal gconst113=((-1.0)*r00*x3502);
IkReal x3504=r02*r02;
IkReal x3505=(r12*sj4);
IkReal x3506=x3491;
IkReal x3507=(cj4*x3506);
j8eval[0]=((IKabs(((((-1.0)*cj4*r02))+(((-1.0)*x3505)))))+(IKabs(((((-1.0)*x3507))+((x3504*x3507))+((r02*x3505*x3506))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x3508=((1.0)*gconst113);
CheckValue<IkReal> x3509=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst112*r20))+(((-1.0)*r21*x3508)))),-1);
if(!x3509.valid){
continue;
}
CheckValue<IkReal> x3510 = IKatan2WithCheck(IkReal((((cj4*gconst112*r01))+(((-1.0)*cj4*r00*x3508))+((gconst112*r11*sj4))+(((-1.0)*r10*sj4*x3508)))),IkReal(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3510.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3509.value)))+(x3510.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x3511=IKcos(j8);
IkReal x3512=IKsin(j8);
IkReal x3513=(gconst112*r20);
IkReal x3514=(gconst113*r21);
IkReal x3515=(gconst112*x3511);
IkReal x3516=((1.0)*x3511);
IkReal x3517=(gconst112*x3512);
IkReal x3518=(gconst113*x3516);
IkReal x3519=((1.0)*gconst113*x3512);
evalcond[0]=(((r21*x3515))+((r22*x3512))+(((-1.0)*r20*x3518)));
evalcond[1]=(cj4+(((-1.0)*r10*x3518))+((r11*x3515))+((r12*x3512)));
evalcond[2]=((((-1.0)*sj4))+((r01*x3515))+((r02*x3512))+(((-1.0)*r00*x3518)));
evalcond[3]=((((-1.0)*cj5*sj6))+((r21*x3517))+(((-1.0)*r22*x3516))+(((-1.0)*cj6*sj5))+(((-1.0)*r20*x3519)));
evalcond[4]=((((-1.0)*r02*x3516))+((cj4*x3514))+((cj4*x3513))+((r01*x3517))+(((-1.0)*r00*x3519)));
evalcond[5]=((((-1.0)*r10*x3519))+((sj4*x3514))+((sj4*x3513))+((r11*x3517))+(((-1.0)*r12*x3516)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x3520=IKPowWithIntegerCheck(IKsign((((gconst113*r11))+((gconst112*r10)))),-1);
if(!x3520.valid){
continue;
}
CheckValue<IkReal> x3521 = IKatan2WithCheck(IkReal((((gconst112*r21*sj4))+(((-1.0)*gconst113*r20*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x3521.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3520.value)))+(x3521.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x3522=IKcos(j8);
IkReal x3523=IKsin(j8);
IkReal x3524=(gconst112*r20);
IkReal x3525=(gconst113*r21);
IkReal x3526=(gconst112*x3522);
IkReal x3527=((1.0)*x3522);
IkReal x3528=(gconst112*x3523);
IkReal x3529=(gconst113*x3527);
IkReal x3530=((1.0)*gconst113*x3523);
evalcond[0]=((((-1.0)*r20*x3529))+((r21*x3526))+((r22*x3523)));
evalcond[1]=(cj4+(((-1.0)*r10*x3529))+((r11*x3526))+((r12*x3523)));
evalcond[2]=((((-1.0)*sj4))+((r01*x3526))+((r02*x3523))+(((-1.0)*r00*x3529)));
evalcond[3]=((((-1.0)*cj5*sj6))+((r21*x3528))+(((-1.0)*r20*x3530))+(((-1.0)*r22*x3527))+(((-1.0)*cj6*sj5)));
evalcond[4]=((((-1.0)*r02*x3527))+((cj4*x3525))+((cj4*x3524))+((r01*x3528))+(((-1.0)*r00*x3530)));
evalcond[5]=((((-1.0)*r10*x3530))+((sj4*x3525))+((sj4*x3524))+((r11*x3528))+(((-1.0)*r12*x3527)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x3531=IKPowWithIntegerCheck(IKsign((((gconst112*r00))+((gconst113*r01)))),-1);
if(!x3531.valid){
continue;
}
CheckValue<IkReal> x3532 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*gconst113*r20))+((cj4*gconst112*r21)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3532.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3531.value)))+(x3532.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x3533=IKcos(j8);
IkReal x3534=IKsin(j8);
IkReal x3535=(gconst112*r20);
IkReal x3536=(gconst113*r21);
IkReal x3537=(gconst112*x3533);
IkReal x3538=((1.0)*x3533);
IkReal x3539=(gconst112*x3534);
IkReal x3540=(gconst113*x3538);
IkReal x3541=((1.0)*gconst113*x3534);
evalcond[0]=((((-1.0)*r20*x3540))+((r22*x3534))+((r21*x3537)));
evalcond[1]=(((r11*x3537))+((r12*x3534))+cj4+(((-1.0)*r10*x3540)));
evalcond[2]=(((r02*x3534))+(((-1.0)*sj4))+(((-1.0)*r00*x3540))+((r01*x3537)));
evalcond[3]=((((-1.0)*cj5*sj6))+(((-1.0)*r20*x3541))+((r21*x3539))+(((-1.0)*r22*x3538))+(((-1.0)*cj6*sj5)));
evalcond[4]=((((-1.0)*r00*x3541))+(((-1.0)*r02*x3538))+((r01*x3539))+((cj4*x3536))+((cj4*x3535)));
evalcond[5]=(((r11*x3539))+(((-1.0)*r12*x3538))+(((-1.0)*r10*x3541))+((sj4*x3536))+((sj4*x3535)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal x3542=(((r10*sj9))+((cj9*r11)));
j8eval[0]=x3542;
j8eval[1]=((IKabs(r22))+(IKabs((((r21*sj9))+(((-1.0)*cj9*r20))))));
j8eval[2]=IKsign(x3542);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal x3543=((1.0)*cj9);
IkReal x3544=((((-1.0)*r21*x3543))+(((-1.0)*r20*sj9)));
j8eval[0]=x3544;
j8eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x3543))+((r11*sj9))))));
j8eval[2]=IKsign(x3544);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal x3545=cj9*cj9;
IkReal x3546=r01*r01;
IkReal x3547=(cj9*r00);
IkReal x3548=(r01*sj9);
IkReal x3549=(x3546+((x3545*(r00*r00)))+(((-2.0)*x3547*x3548))+(r02*r02)+(((-1.0)*x3545*x3546)));
j8eval[0]=x3549;
j8eval[1]=((IKabs(r02))+(IKabs((x3548+(((-1.0)*x3547))))));
j8eval[2]=IKsign(x3549);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x3550=cj9*cj9;
IkReal x3551=r01*r01;
IkReal x3552=(cj9*r00);
IkReal x3553=(r01*sj9);
CheckValue<IkReal> x3554=IKPowWithIntegerCheck(IKsign((((x3550*(r00*r00)))+x3551+(((-1.0)*x3550*x3551))+(r02*r02)+(((-2.0)*x3552*x3553)))),-1);
if(!x3554.valid){
continue;
}
CheckValue<IkReal> x3555 = IKatan2WithCheck(IkReal(r02),IkReal((x3553+(((-1.0)*x3552)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3555.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3554.value)))+(x3555.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x3556=IKcos(j8);
IkReal x3557=IKsin(j8);
IkReal x3558=((1.0)*x3556);
IkReal x3559=(sj9*x3556);
IkReal x3560=(sj9*x3557);
IkReal x3561=(cj9*x3558);
IkReal x3562=((1.0)*cj9*x3557);
evalcond[0]=(((r21*x3559))+(((-1.0)*r20*x3561))+((r22*x3557)));
evalcond[1]=((((-1.0)*r10*x3561))+((r12*x3557))+((r11*x3559)));
evalcond[2]=((-1.0)+((r01*x3559))+(((-1.0)*r00*x3561))+((r02*x3557)));
evalcond[3]=(((r01*x3560))+(((-1.0)*r00*x3562))+(((-1.0)*r02*x3558)));
evalcond[4]=((((-1.0)*r10*x3562))+((cj9*r21))+((r11*x3560))+(((-1.0)*r12*x3558))+((r20*sj9)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*r20*x3562))+((r21*x3560))+(((-1.0)*r22*x3558))+(((-1.0)*cj6*sj5)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x3563=((1.0)*cj9);
CheckValue<IkReal> x3564 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x3563))+((r11*sj9)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3564.valid){
continue;
}
CheckValue<IkReal> x3565=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3563))+(((-1.0)*r20*sj9)))),-1);
if(!x3565.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x3564.value)+(((1.5707963267949)*(x3565.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x3566=IKcos(j8);
IkReal x3567=IKsin(j8);
IkReal x3568=((1.0)*x3566);
IkReal x3569=(sj9*x3566);
IkReal x3570=(sj9*x3567);
IkReal x3571=(cj9*x3568);
IkReal x3572=((1.0)*cj9*x3567);
evalcond[0]=(((r21*x3569))+((r22*x3567))+(((-1.0)*r20*x3571)));
evalcond[1]=((((-1.0)*r10*x3571))+((r11*x3569))+((r12*x3567)));
evalcond[2]=((-1.0)+((r01*x3569))+(((-1.0)*r00*x3571))+((r02*x3567)));
evalcond[3]=((((-1.0)*r02*x3568))+((r01*x3570))+(((-1.0)*r00*x3572)));
evalcond[4]=((((-1.0)*r10*x3572))+(((-1.0)*r12*x3568))+((cj9*r21))+((r11*x3570))+((r20*sj9)));
evalcond[5]=((((-1.0)*cj5*sj6))+((r21*x3570))+(((-1.0)*r22*x3568))+(((-1.0)*r20*x3572))+(((-1.0)*cj6*sj5)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x3573=IKPowWithIntegerCheck(IKsign((((r10*sj9))+((cj9*r11)))),-1);
if(!x3573.valid){
continue;
}
CheckValue<IkReal> x3574 = IKatan2WithCheck(IkReal((((r21*sj9))+(((-1.0)*cj9*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3574.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3573.value)))+(x3574.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x3575=IKcos(j8);
IkReal x3576=IKsin(j8);
IkReal x3577=((1.0)*x3575);
IkReal x3578=(sj9*x3575);
IkReal x3579=(sj9*x3576);
IkReal x3580=(cj9*x3577);
IkReal x3581=((1.0)*cj9*x3576);
evalcond[0]=(((r21*x3578))+(((-1.0)*r20*x3580))+((r22*x3576)));
evalcond[1]=(((r12*x3576))+((r11*x3578))+(((-1.0)*r10*x3580)));
evalcond[2]=((-1.0)+(((-1.0)*r00*x3580))+((r01*x3578))+((r02*x3576)));
evalcond[3]=((((-1.0)*r00*x3581))+((r01*x3579))+(((-1.0)*r02*x3577)));
evalcond[4]=(((cj9*r21))+((r11*x3579))+(((-1.0)*r12*x3577))+((r20*sj9))+(((-1.0)*r10*x3581)));
evalcond[5]=((((-1.0)*cj5*sj6))+((r21*x3579))+(((-1.0)*r20*x3581))+(((-1.0)*r22*x3577))+(((-1.0)*cj6*sj5)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal x3582=(((cj9*r21))+((r20*sj9)));
j8eval[0]=x3582;
j8eval[1]=((IKabs(r12))+(IKabs((((r11*sj9))+(((-1.0)*cj9*r10))))));
j8eval[2]=IKsign(x3582);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal x3583=((1.0)*cj9);
IkReal x3584=((((-1.0)*r10*sj9))+(((-1.0)*r11*x3583)));
j8eval[0]=x3584;
j8eval[1]=((IKabs((((r21*sj9))+(((-1.0)*r20*x3583)))))+(IKabs(r22)));
j8eval[2]=IKsign(x3584);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal x3585=cj9*cj9;
IkReal x3586=r01*r01;
IkReal x3587=(r01*sj9);
IkReal x3588=(cj9*r00);
IkReal x3589=(((x3585*x3586))+(((-1.0)*x3585*(r00*r00)))+(((-1.0)*(r02*r02)))+(((2.0)*x3587*x3588))+(((-1.0)*x3586)));
j8eval[0]=x3589;
j8eval[1]=IKsign(x3589);
j8eval[2]=((IKabs(r02))+(IKabs((x3587+(((-1.0)*x3588))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x3590=cj9*cj9;
IkReal x3591=r01*r01;
IkReal x3592=(r01*sj9);
IkReal x3593=(cj9*r00);
CheckValue<IkReal> x3594=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+((x3590*x3591))+(((-1.0)*x3590*(r00*r00)))+(((-1.0)*x3591))+(((2.0)*x3592*x3593)))),-1);
if(!x3594.valid){
continue;
}
CheckValue<IkReal> x3595 = IKatan2WithCheck(IkReal(r02),IkReal((x3592+(((-1.0)*x3593)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3595.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3594.value)))+(x3595.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x3596=IKcos(j8);
IkReal x3597=IKsin(j8);
IkReal x3598=((1.0)*r20);
IkReal x3599=((1.0)*x3596);
IkReal x3600=(sj9*x3596);
IkReal x3601=(sj9*x3597);
IkReal x3602=(cj9*x3597);
IkReal x3603=(cj9*x3599);
evalcond[0]=(((r21*x3600))+((r22*x3597))+(((-1.0)*cj9*x3596*x3598)));
evalcond[1]=(((r11*x3600))+(((-1.0)*r10*x3603))+((r12*x3597)));
evalcond[2]=((1.0)+(((-1.0)*r00*x3603))+((r02*x3597))+((r01*x3600)));
evalcond[3]=((((-1.0)*r02*x3599))+((r01*x3601))+(((-1.0)*r00*x3602)));
evalcond[4]=((((-1.0)*cj5*sj6))+(((-1.0)*r22*x3599))+(((-1.0)*x3598*x3602))+((r21*x3601))+(((-1.0)*cj6*sj5)));
evalcond[5]=(((r11*x3601))+(((-1.0)*sj9*x3598))+(((-1.0)*cj9*r21))+(((-1.0)*r12*x3599))+(((-1.0)*r10*x3602)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x3604=((1.0)*cj9);
CheckValue<IkReal> x3605=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj9))+(((-1.0)*r11*x3604)))),-1);
if(!x3605.valid){
continue;
}
CheckValue<IkReal> x3606 = IKatan2WithCheck(IkReal((((r21*sj9))+(((-1.0)*r20*x3604)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3606.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3605.value)))+(x3606.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x3607=IKcos(j8);
IkReal x3608=IKsin(j8);
IkReal x3609=((1.0)*r20);
IkReal x3610=((1.0)*x3607);
IkReal x3611=(sj9*x3607);
IkReal x3612=(sj9*x3608);
IkReal x3613=(cj9*x3608);
IkReal x3614=(cj9*x3610);
evalcond[0]=((((-1.0)*cj9*x3607*x3609))+((r22*x3608))+((r21*x3611)));
evalcond[1]=(((r11*x3611))+(((-1.0)*r10*x3614))+((r12*x3608)));
evalcond[2]=((1.0)+(((-1.0)*r00*x3614))+((r02*x3608))+((r01*x3611)));
evalcond[3]=((((-1.0)*r02*x3610))+((r01*x3612))+(((-1.0)*r00*x3613)));
evalcond[4]=((((-1.0)*cj5*sj6))+((r21*x3612))+(((-1.0)*r22*x3610))+(((-1.0)*x3609*x3613))+(((-1.0)*cj6*sj5)));
evalcond[5]=(((r11*x3612))+(((-1.0)*r12*x3610))+(((-1.0)*sj9*x3609))+(((-1.0)*cj9*r21))+(((-1.0)*r10*x3613)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x3615=IKPowWithIntegerCheck(IKsign((((cj9*r21))+((r20*sj9)))),-1);
if(!x3615.valid){
continue;
}
CheckValue<IkReal> x3616 = IKatan2WithCheck(IkReal((((r11*sj9))+(((-1.0)*cj9*r10)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3616.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3615.value)))+(x3616.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x3617=IKcos(j8);
IkReal x3618=IKsin(j8);
IkReal x3619=((1.0)*r20);
IkReal x3620=((1.0)*x3617);
IkReal x3621=(sj9*x3617);
IkReal x3622=(sj9*x3618);
IkReal x3623=(cj9*x3618);
IkReal x3624=(cj9*x3620);
evalcond[0]=(((r21*x3621))+((r22*x3618))+(((-1.0)*cj9*x3617*x3619)));
evalcond[1]=(((r11*x3621))+((r12*x3618))+(((-1.0)*r10*x3624)));
evalcond[2]=((1.0)+((r02*x3618))+((r01*x3621))+(((-1.0)*r00*x3624)));
evalcond[3]=(((r01*x3622))+(((-1.0)*r00*x3623))+(((-1.0)*r02*x3620)));
evalcond[4]=((((-1.0)*cj5*sj6))+((r21*x3622))+(((-1.0)*x3619*x3623))+(((-1.0)*r22*x3620))+(((-1.0)*cj6*sj5)));
evalcond[5]=((((-1.0)*r10*x3623))+(((-1.0)*r12*x3620))+((r11*x3622))+(((-1.0)*cj9*r21))+(((-1.0)*sj9*x3619)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x3625=((-1.0)*px);
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3625);
rxp1_1=(px*r21);
rxp1_2=(r11*x3625);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j8eval[0]=(((r21*sj9))+(((-1.0)*cj9*r20)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x3627=IKPowWithIntegerCheck((((r21*sj9))+(((-1.0)*cj9*r20))),-1);
if(!x3627.valid){
continue;
}
IkReal x3626=x3627.value;
sj8array[0]=(((cj6*sj5*x3626))+((cj5*sj6*x3626)));
if( sj8array[0] >= -1-IKFAST_SINCOS_THRESH && sj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKasin(sj8array[0]);
    cj8array[0] = IKcos(j8array[0]);
    sj8array[1] = sj8array[0];
    j8array[1] = j8array[0] > 0 ? (IKPI-j8array[0]) : (-IKPI-j8array[0]);
    cj8array[1] = -cj8array[0];
}
else if( isnan(sj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[3];
IkReal x3628=IKcos(j8);
IkReal x3629=(sj9*x3628);
IkReal x3630=((1.0)*cj9*x3628);
evalcond[0]=((-1.0)*r02*x3628);
evalcond[1]=(((r21*x3629))+(((-1.0)*r20*x3630)));
evalcond[2]=((((-1.0)*r10*x3630))+((r11*x3629)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x3631=((1.0)*cj9);
CheckValue<IkReal> x3632 = IKatan2WithCheck(IkReal(((((-1.0)*r10*sj4*x3631))+((r11*sj4*sj9))+((cj4*r01*sj9))+(((-1.0)*cj4*r00*x3631)))),IkReal(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3632.valid){
continue;
}
CheckValue<IkReal> x3633=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3631))+(((-1.0)*r20*sj9)))),-1);
if(!x3633.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x3632.value)+(((1.5707963267949)*(x3633.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x3634=IKcos(j8);
IkReal x3635=IKsin(j8);
IkReal x3636=((1.0)*cj9);
IkReal x3637=(r20*sj9);
IkReal x3638=(cj9*r21);
IkReal x3639=((1.0)*x3634);
IkReal x3640=(sj9*x3634);
IkReal x3641=(sj9*x3635);
evalcond[0]=(((r22*x3635))+(((-1.0)*r20*x3634*x3636))+((r21*x3640)));
evalcond[1]=(((r12*x3635))+((r11*x3640))+cj4+(((-1.0)*r10*x3634*x3636)));
evalcond[2]=(((r02*x3635))+(((-1.0)*sj4))+(((-1.0)*r00*x3634*x3636))+((r01*x3640)));
evalcond[3]=((((-1.0)*cj5*sj6))+(((-1.0)*r22*x3639))+(((-1.0)*r20*x3635*x3636))+((r21*x3641))+(((-1.0)*cj6*sj5)));
evalcond[4]=((((-1.0)*r00*x3635*x3636))+((r01*x3641))+(((-1.0)*r02*x3639))+((cj4*x3637))+((cj4*x3638)));
evalcond[5]=(((r11*x3641))+(((-1.0)*r10*x3635*x3636))+(((-1.0)*r12*x3639))+((sj4*x3637))+((sj4*x3638)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x3642 = IKatan2WithCheck(IkReal((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x3642.valid){
continue;
}
CheckValue<IkReal> x3643=IKPowWithIntegerCheck(IKsign((((r10*sj9))+((cj9*r11)))),-1);
if(!x3643.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x3642.value)+(((1.5707963267949)*(x3643.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x3644=IKcos(j8);
IkReal x3645=IKsin(j8);
IkReal x3646=((1.0)*cj9);
IkReal x3647=(r20*sj9);
IkReal x3648=(cj9*r21);
IkReal x3649=((1.0)*x3644);
IkReal x3650=(sj9*x3644);
IkReal x3651=(sj9*x3645);
evalcond[0]=(((r21*x3650))+(((-1.0)*r20*x3644*x3646))+((r22*x3645)));
evalcond[1]=(cj4+((r12*x3645))+((r11*x3650))+(((-1.0)*r10*x3644*x3646)));
evalcond[2]=((((-1.0)*sj4))+(((-1.0)*r00*x3644*x3646))+((r02*x3645))+((r01*x3650)));
evalcond[3]=((((-1.0)*cj5*sj6))+((r21*x3651))+(((-1.0)*r20*x3645*x3646))+(((-1.0)*r22*x3649))+(((-1.0)*cj6*sj5)));
evalcond[4]=(((cj4*x3647))+((cj4*x3648))+(((-1.0)*r00*x3645*x3646))+(((-1.0)*r02*x3649))+((r01*x3651)));
evalcond[5]=(((r11*x3651))+(((-1.0)*r12*x3649))+(((-1.0)*r10*x3645*x3646))+((sj4*x3647))+((sj4*x3648)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x3652=IKPowWithIntegerCheck(IKsign((((r00*sj9))+((cj9*r01)))),-1);
if(!x3652.valid){
continue;
}
CheckValue<IkReal> x3653 = IKatan2WithCheck(IkReal((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3653.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3652.value)))+(x3653.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x3654=IKcos(j8);
IkReal x3655=IKsin(j8);
IkReal x3656=((1.0)*cj9);
IkReal x3657=(r20*sj9);
IkReal x3658=(cj9*r21);
IkReal x3659=((1.0)*x3654);
IkReal x3660=(sj9*x3654);
IkReal x3661=(sj9*x3655);
evalcond[0]=((((-1.0)*r20*x3654*x3656))+((r21*x3660))+((r22*x3655)));
evalcond[1]=(((r12*x3655))+cj4+((r11*x3660))+(((-1.0)*r10*x3654*x3656)));
evalcond[2]=((((-1.0)*sj4))+(((-1.0)*r00*x3654*x3656))+((r01*x3660))+((r02*x3655)));
evalcond[3]=((((-1.0)*cj5*sj6))+(((-1.0)*r20*x3655*x3656))+(((-1.0)*r22*x3659))+((r21*x3661))+(((-1.0)*cj6*sj5)));
evalcond[4]=((((-1.0)*r00*x3655*x3656))+((r01*x3661))+(((-1.0)*r02*x3659))+((cj4*x3657))+((cj4*x3658)));
evalcond[5]=(((sj4*x3657))+((sj4*x3658))+((r11*x3661))+(((-1.0)*r12*x3659))+(((-1.0)*r10*x3655*x3656)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x3662=r21*r21;
IkReal x3663=cj9*cj9;
IkReal x3664=(cj5*sj6);
IkReal x3665=(cj9*r20);
IkReal x3666=(cj6*sj5);
IkReal x3667=((1.0)*r21*sj9);
CheckValue<IkReal> x3668=IKPowWithIntegerCheck(IKsign((((x3662*x3663))+(((-1.0)*x3662))+(((-1.0)*x3663*(r20*r20)))+(((-1.0)*(r22*r22)))+(((2.0)*r21*sj9*x3665)))),-1);
if(!x3668.valid){
continue;
}
CheckValue<IkReal> x3669 = IKatan2WithCheck(IkReal(((((-1.0)*x3666*x3667))+((x3664*x3665))+(((-1.0)*x3664*x3667))+((x3665*x3666)))),IkReal((((r22*x3664))+((r22*x3666)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3669.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3668.value)))+(x3669.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[2];
IkReal x3670=IKcos(j8);
IkReal x3671=IKsin(j8);
IkReal x3672=(r21*sj9);
IkReal x3673=(cj9*r20);
IkReal x3674=((1.0)*x3670);
evalcond[0]=((((-1.0)*x3673*x3674))+((x3670*x3672))+((r22*x3671)));
evalcond[1]=((((-1.0)*cj5*sj6))+(((-1.0)*x3671*x3673))+(((-1.0)*r22*x3674))+((x3671*x3672))+(((-1.0)*cj6*sj5)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3675=(cj8*cj9);
IkReal x3676=(cj8*sj9);
if( IKabs((((r01*x3676))+(((-1.0)*r00*x3675))+((r02*sj8)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x3676))+((r10*x3675))+(((-1.0)*r12*sj8)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x3676))+(((-1.0)*r00*x3675))+((r02*sj8))))+IKsqr(((((-1.0)*r11*x3676))+((r10*x3675))+(((-1.0)*r12*sj8))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r01*x3676))+(((-1.0)*r00*x3675))+((r02*sj8))), ((((-1.0)*r11*x3676))+((r10*x3675))+(((-1.0)*r12*sj8))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x3677=IKcos(j4);
IkReal x3678=IKsin(j4);
IkReal x3679=(r11*sj9);
IkReal x3680=(cj5*sj6);
IkReal x3681=(cj9*r11);
IkReal x3682=(r00*sj9);
IkReal x3683=(r01*sj9);
IkReal x3684=(r10*sj9);
IkReal x3685=((0.425)*sj5);
IkReal x3686=(r20*sj9);
IkReal x3687=((1.0)*cj8);
IkReal x3688=(cj6*sj5);
IkReal x3689=(cj9*r01);
IkReal x3690=(cj9*r21);
IkReal x3691=(cj9*r00);
IkReal x3692=((1.0)*x3677);
IkReal x3693=((1.0)*cj9*r10);
IkReal x3694=((1.0)*x3678);
IkReal x3695=((0.39225)*x3677);
IkReal x3696=(x3678*x3688);
evalcond[0]=((((-1.0)*cj9*r10*x3687))+((cj8*x3679))+x3677+((r12*sj8)));
evalcond[1]=((((-1.0)*x3687*x3691))+((r02*sj8))+(((-1.0)*x3694))+((cj8*x3683)));
evalcond[2]=((((-1.0)*x3688*x3692))+(((-1.0)*x3680*x3692))+x3689+x3682);
evalcond[3]=((((-1.0)*x3688*x3694))+(((-1.0)*x3680*x3694))+x3681+x3684);
evalcond[4]=(((x3677*x3690))+((sj8*x3683))+(((-1.0)*sj8*x3691))+(((-1.0)*r02*x3687))+((x3677*x3686)));
evalcond[5]=(((x3678*x3690))+(((-1.0)*sj8*x3693))+((x3678*x3686))+(((-1.0)*r12*x3687))+((sj8*x3679)));
evalcond[6]=(((x3688*x3695))+(((-0.09465)*x3689))+(((-0.09465)*x3682))+(((-1.0)*px))+((x3680*x3695))+(((-0.10915)*x3678))+((x3677*x3685)));
evalcond[7]=((((0.39225)*x3678*x3680))+(((-0.09465)*x3684))+(((-0.09465)*x3681))+((x3678*x3685))+(((-1.0)*py))+(((0.10915)*x3677))+(((0.39225)*x3696)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3697=((1.0)*sj9);
IkReal x3698=((1.0)*cj9);
CheckValue<IkReal> x3699=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*sj6))+(((-1.0)*cj6*sj5)))),-1);
if(!x3699.valid){
continue;
}
CheckValue<IkReal> x3700 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x3698))+(((-1.0)*r10*x3697)))),IkReal(((((-1.0)*r01*x3698))+(((-1.0)*r00*x3697)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3700.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3699.value)))+(x3700.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x3701=IKcos(j4);
IkReal x3702=IKsin(j4);
IkReal x3703=(cj9*r11);
IkReal x3704=(r00*sj9);
IkReal x3705=(cj6*sj5);
IkReal x3706=(cj5*sj6);
IkReal x3707=((0.425)*sj5);
IkReal x3708=(cj9*r01);
IkReal x3709=(r10*sj9);
IkReal x3710=((1.0)*x3701);
IkReal x3711=((0.39225)*x3701);
IkReal x3712=(x3702*x3705);
evalcond[0]=((((-1.0)*x3705*x3710))+x3708+x3704+(((-1.0)*x3706*x3710)));
evalcond[1]=((((-1.0)*x3702*x3706))+x3709+x3703+(((-1.0)*x3712)));
evalcond[2]=(((x3706*x3711))+(((-0.09465)*x3704))+(((-0.09465)*x3708))+(((-1.0)*px))+((x3705*x3711))+(((-0.10915)*x3702))+((x3701*x3707)));
evalcond[3]=((((-0.09465)*x3703))+(((-0.09465)*x3709))+(((0.39225)*x3712))+((x3702*x3707))+(((0.10915)*x3701))+(((-1.0)*py))+(((0.39225)*x3702*x3706)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j8eval[3];
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
IkReal x3713=(((r00*sj9))+((cj9*r01)));
j8eval[0]=x3713;
j8eval[1]=IKsign(x3713);
j8eval[2]=((IKabs((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))))+(IKabs((cj4*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
IkReal x3714=(((r10*sj9))+((cj9*r11)));
j8eval[0]=x3714;
j8eval[1]=IKsign(x3714);
j8eval[2]=((IKabs((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))))+(IKabs((r22*sj4))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
IkReal x3715=((1.0)*cj9);
IkReal x3716=((((-1.0)*r21*x3715))+(((-1.0)*r20*sj9)));
j8eval[0]=x3716;
j8eval[1]=((IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))))+(IKabs(((((-1.0)*cj4*r00*x3715))+(((-1.0)*r10*sj4*x3715))+((r11*sj4*sj9))+((cj4*r01*sj9))))));
j8eval[2]=IKsign(x3716);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x3717=((-1.0)*r20);
IkReal x3719 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3719)==0){
continue;
}
IkReal x3718=pow(x3719,-0.5);
CheckValue<IkReal> x3720 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3717),IKFAST_ATAN2_MAGTHRESH);
if(!x3720.valid){
continue;
}
IkReal gconst96=((-1.0)*(x3720.value));
IkReal gconst97=(r21*x3718);
IkReal gconst98=(x3717*x3718);
CheckValue<IkReal> x3721 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3721.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3721.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x3722=((-1.0)*r20);
IkReal x3723=x3718;
CheckValue<IkReal> x3725 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3722),IKFAST_ATAN2_MAGTHRESH);
if(!x3725.valid){
continue;
}
IkReal x3724=((-1.0)*(x3725.value));
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
sj9=gconst97;
cj9=gconst98;
j9=x3724;
IkReal gconst96=x3724;
IkReal gconst97=(r21*x3723);
IkReal gconst98=(x3722*x3723);
j8eval[0]=cj4;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
IkReal x3726=((-1.0)*r20);
IkReal x3727=x3718;
CheckValue<IkReal> x3729 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3726),IKFAST_ATAN2_MAGTHRESH);
if(!x3729.valid){
continue;
}
IkReal x3728=((-1.0)*(x3729.value));
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
sj9=gconst97;
cj9=gconst98;
j9=x3728;
IkReal gconst96=x3728;
IkReal gconst97=(r21*x3727);
IkReal gconst98=(x3726*x3727);
j8eval[0]=sj4;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x3730=((-1.0)*r20);
IkReal x3731=x3718;
CheckValue<IkReal> x3733 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3730),IKFAST_ATAN2_MAGTHRESH);
if(!x3733.valid){
continue;
}
IkReal x3732=((-1.0)*(x3733.value));
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
sj9=gconst97;
cj9=gconst98;
j9=x3732;
IkReal gconst96=x3732;
IkReal gconst97=(r21*x3731);
IkReal gconst98=(x3730*x3731);
IkReal x3734=((1.0)*(r22*r22));
CheckValue<IkReal> x3738=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x3734))),-1);
if(!x3738.valid){
continue;
}
IkReal x3735=x3738.value;
IkReal x3736=((1.0)*x3735);
IkReal x3737=((((-1.0)*x3734))+(((-1.0)*x3736*(r20*r20*r20*r20)))+(((-2.0)*x3735*(r20*r20)*(r21*r21)))+(((-1.0)*x3736*(r21*r21*r21*r21))));
j8eval[0]=x3737;
j8eval[1]=IKsign(x3737);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x3739=(cj5*sj6);
IkReal x3740=(gconst98*r20);
IkReal x3741=(cj6*sj5);
IkReal x3742=(gconst97*r21);
CheckValue<IkReal> x3743=IKPowWithIntegerCheck(IKsign(((((2.0)*x3740*x3742))+(((-1.0)*(x3740*x3740)))+(((-1.0)*(x3742*x3742)))+(((-1.0)*(r22*r22))))),-1);
if(!x3743.valid){
continue;
}
CheckValue<IkReal> x3744 = IKatan2WithCheck(IkReal(((((-1.0)*x3741*x3742))+((x3740*x3741))+(((-1.0)*x3739*x3742))+((x3739*x3740)))),IkReal((((r22*x3739))+((r22*x3741)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3744.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3743.value)))+(x3744.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x3745=IKcos(j8);
IkReal x3746=IKsin(j8);
IkReal x3747=(gconst98*r21);
IkReal x3748=(gconst97*r20);
IkReal x3749=(gconst97*x3746);
IkReal x3750=((1.0)*x3745);
IkReal x3751=(gconst97*x3745);
IkReal x3752=((1.0)*gconst98*x3746);
evalcond[0]=(((r22*x3746))+(((-1.0)*gconst98*r20*x3750))+((r21*x3751)));
evalcond[1]=(cj4+((r12*x3746))+(((-1.0)*gconst98*r10*x3750))+((r11*x3751)));
evalcond[2]=(((r01*x3751))+(((-1.0)*sj4))+((r02*x3746))+(((-1.0)*gconst98*r00*x3750)));
evalcond[3]=((((-1.0)*cj5*sj6))+(((-1.0)*r22*x3750))+(((-1.0)*r20*x3752))+((r21*x3749))+(((-1.0)*cj6*sj5)));
evalcond[4]=(((r01*x3749))+(((-1.0)*r00*x3752))+((cj4*x3747))+((cj4*x3748))+(((-1.0)*r02*x3750)));
evalcond[5]=(((sj4*x3747))+((sj4*x3748))+(((-1.0)*r12*x3750))+((r11*x3749))+(((-1.0)*r10*x3752)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x3753 = IKatan2WithCheck(IkReal((((gconst97*r21*sj4))+(((-1.0)*gconst98*r20*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x3753.valid){
continue;
}
CheckValue<IkReal> x3754=IKPowWithIntegerCheck(IKsign((((gconst98*r11))+((gconst97*r10)))),-1);
if(!x3754.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x3753.value)+(((1.5707963267949)*(x3754.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x3755=IKcos(j8);
IkReal x3756=IKsin(j8);
IkReal x3757=(gconst98*r21);
IkReal x3758=(gconst97*r20);
IkReal x3759=(gconst97*x3756);
IkReal x3760=((1.0)*x3755);
IkReal x3761=(gconst97*x3755);
IkReal x3762=((1.0)*gconst98*x3756);
evalcond[0]=(((r21*x3761))+((r22*x3756))+(((-1.0)*gconst98*r20*x3760)));
evalcond[1]=(cj4+((r12*x3756))+((r11*x3761))+(((-1.0)*gconst98*r10*x3760)));
evalcond[2]=((((-1.0)*gconst98*r00*x3760))+(((-1.0)*sj4))+((r02*x3756))+((r01*x3761)));
evalcond[3]=((((-1.0)*cj5*sj6))+(((-1.0)*r20*x3762))+(((-1.0)*r22*x3760))+((r21*x3759))+(((-1.0)*cj6*sj5)));
evalcond[4]=(((r01*x3759))+((cj4*x3757))+((cj4*x3758))+(((-1.0)*r00*x3762))+(((-1.0)*r02*x3760)));
evalcond[5]=((((-1.0)*r10*x3762))+((sj4*x3758))+((sj4*x3757))+((r11*x3759))+(((-1.0)*r12*x3760)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x3763 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*gconst98*r20))+((cj4*gconst97*r21)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3763.valid){
continue;
}
CheckValue<IkReal> x3764=IKPowWithIntegerCheck(IKsign((((gconst98*r01))+((gconst97*r00)))),-1);
if(!x3764.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x3763.value)+(((1.5707963267949)*(x3764.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x3765=IKcos(j8);
IkReal x3766=IKsin(j8);
IkReal x3767=(gconst98*r21);
IkReal x3768=(gconst97*r20);
IkReal x3769=(gconst97*x3766);
IkReal x3770=((1.0)*x3765);
IkReal x3771=(gconst97*x3765);
IkReal x3772=((1.0)*gconst98*x3766);
evalcond[0]=(((r22*x3766))+((r21*x3771))+(((-1.0)*gconst98*r20*x3770)));
evalcond[1]=(cj4+((r11*x3771))+((r12*x3766))+(((-1.0)*gconst98*r10*x3770)));
evalcond[2]=((((-1.0)*sj4))+((r02*x3766))+((r01*x3771))+(((-1.0)*gconst98*r00*x3770)));
evalcond[3]=((((-1.0)*cj5*sj6))+(((-1.0)*r20*x3772))+((r21*x3769))+(((-1.0)*r22*x3770))+(((-1.0)*cj6*sj5)));
evalcond[4]=((((-1.0)*r02*x3770))+((cj4*x3768))+((cj4*x3767))+(((-1.0)*r00*x3772))+((r01*x3769)));
evalcond[5]=(((r11*x3769))+((sj4*x3768))+((sj4*x3767))+(((-1.0)*r12*x3770))+(((-1.0)*r10*x3772)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3773=((-1.0)*r21);
IkReal x3775 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3775)==0){
continue;
}
IkReal x3774=pow(x3775,-0.5);
CheckValue<IkReal> x3776 = IKatan2WithCheck(IkReal(x3773),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3776.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x3776.value))));
IkReal gconst100=(x3773*x3774);
IkReal gconst101=((1.0)*r20*x3774);
CheckValue<IkReal> x3777 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3777.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3777.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x3778=((-1.0)*r21);
CheckValue<IkReal> x3781 = IKatan2WithCheck(IkReal(x3778),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3781.valid){
continue;
}
IkReal x3779=((1.0)*(x3781.value));
IkReal x3780=x3774;
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
sj9=gconst100;
cj9=gconst101;
j9=((3.14159265)+(((-1.0)*x3779)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3779)));
IkReal gconst100=(x3778*x3780);
IkReal gconst101=((1.0)*r20*x3780);
IkReal x3782=r22*r22;
IkReal x3783=((1.0)*x3782);
CheckValue<IkReal> x3787=IKPowWithIntegerCheck(((-1.0)+x3782),-1);
if(!x3787.valid){
continue;
}
IkReal x3784=x3787.value;
if((((1.0)+(((-1.0)*x3783)))) < -0.00001)
continue;
IkReal x3785=IKsqrt(((1.0)+(((-1.0)*x3783))));
IkReal x3786=(cj4*x3784*x3785);
j8eval[0]=((IKabs((cj4*r22)))+(IKabs((x3786+(((-1.0)*x3783*x3786))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
IkReal x3788=((-1.0)*r21);
CheckValue<IkReal> x3791 = IKatan2WithCheck(IkReal(x3788),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3791.valid){
continue;
}
IkReal x3789=((1.0)*(x3791.value));
IkReal x3790=x3774;
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
sj9=gconst100;
cj9=gconst101;
j9=((3.14159265)+(((-1.0)*x3789)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3789)));
IkReal gconst100=(x3788*x3790);
IkReal gconst101=((1.0)*r20*x3790);
IkReal x3792=r22*r22;
IkReal x3793=((1.0)*x3792);
CheckValue<IkReal> x3797=IKPowWithIntegerCheck(((-1.0)+x3792),-1);
if(!x3797.valid){
continue;
}
IkReal x3794=x3797.value;
if((((1.0)+(((-1.0)*x3793)))) < -0.00001)
continue;
IkReal x3795=IKsqrt(((1.0)+(((-1.0)*x3793))));
IkReal x3796=(sj4*x3794*x3795);
j8eval[0]=((IKabs((x3796+(((-1.0)*x3793*x3796)))))+(IKabs((r22*sj4))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
IkReal x3798=((-1.0)*r21);
CheckValue<IkReal> x3801 = IKatan2WithCheck(IkReal(x3798),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3801.valid){
continue;
}
IkReal x3799=((1.0)*(x3801.value));
IkReal x3800=x3774;
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
sj9=gconst100;
cj9=gconst101;
j9=((3.14159265)+(((-1.0)*x3799)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3799)));
IkReal gconst100=(x3798*x3800);
IkReal gconst101=((1.0)*r20*x3800);
IkReal x3802=r22*r22;
IkReal x3803=((1.0)*cj4*r02);
IkReal x3804=((1.0)*r12*sj4);
CheckValue<IkReal> x3808=IKPowWithIntegerCheck(((-1.0)+x3802),-1);
if(!x3808.valid){
continue;
}
IkReal x3805=x3808.value;
if((((1.0)+(((-1.0)*x3802)))) < -0.00001)
continue;
IkReal x3806=IKsqrt(((1.0)+(((-1.0)*x3802))));
IkReal x3807=(r22*x3805*x3806);
j8eval[0]=0;
j8eval[1]=0;
j8eval[2]=((IKabs(((((-1.0)*x3803*x3807))+(((-1.0)*x3804*x3807)))))+(IKabs(((((-1.0)*x3804))+(((-1.0)*x3803))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x3809=((1.0)*sj4);
IkReal x3810=((1.0)*cj4);
CheckValue<IkReal> x3811=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r20))+(((-1.0)*gconst101*r21)))),-1);
if(!x3811.valid){
continue;
}
CheckValue<IkReal> x3812 = IKatan2WithCheck(IkReal((((cj4*gconst100*r01))+(((-1.0)*gconst101*r00*x3810))+((gconst100*r11*sj4))+(((-1.0)*gconst101*r10*x3809)))),IkReal(((((-1.0)*r02*x3810))+(((-1.0)*r12*x3809)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3812.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3811.value)))+(x3812.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x3813=IKcos(j8);
IkReal x3814=IKsin(j8);
IkReal x3815=(gconst100*r20);
IkReal x3816=(gconst101*r21);
IkReal x3817=((1.0)*x3813);
IkReal x3818=(gconst100*x3814);
IkReal x3819=(gconst100*x3813);
IkReal x3820=(gconst101*x3817);
IkReal x3821=((1.0)*gconst101*x3814);
evalcond[0]=(((r21*x3819))+((r22*x3814))+(((-1.0)*r20*x3820)));
evalcond[1]=(((r12*x3814))+cj4+((r11*x3819))+(((-1.0)*r10*x3820)));
evalcond[2]=((((-1.0)*sj4))+(((-1.0)*r00*x3820))+((r02*x3814))+((r01*x3819)));
evalcond[3]=((((-1.0)*r22*x3817))+(((-1.0)*cj5*sj6))+((r21*x3818))+(((-1.0)*r20*x3821))+(((-1.0)*cj6*sj5)));
evalcond[4]=((((-1.0)*r00*x3821))+(((-1.0)*r02*x3817))+((cj4*x3815))+((cj4*x3816))+((r01*x3818)));
evalcond[5]=((((-1.0)*r12*x3817))+((sj4*x3815))+((sj4*x3816))+((r11*x3818))+(((-1.0)*r10*x3821)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x3822=IKPowWithIntegerCheck(IKsign((((gconst100*r10))+((gconst101*r11)))),-1);
if(!x3822.valid){
continue;
}
CheckValue<IkReal> x3823 = IKatan2WithCheck(IkReal(((((-1.0)*gconst101*r20*sj4))+((gconst100*r21*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x3823.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3822.value)))+(x3823.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x3824=IKcos(j8);
IkReal x3825=IKsin(j8);
IkReal x3826=(gconst100*r20);
IkReal x3827=(gconst101*r21);
IkReal x3828=((1.0)*x3824);
IkReal x3829=(gconst100*x3825);
IkReal x3830=(gconst100*x3824);
IkReal x3831=(gconst101*x3828);
IkReal x3832=((1.0)*gconst101*x3825);
evalcond[0]=((((-1.0)*r20*x3831))+((r22*x3825))+((r21*x3830)));
evalcond[1]=(((r12*x3825))+(((-1.0)*r10*x3831))+cj4+((r11*x3830)));
evalcond[2]=((((-1.0)*sj4))+((r01*x3830))+((r02*x3825))+(((-1.0)*r00*x3831)));
evalcond[3]=((((-1.0)*r22*x3828))+(((-1.0)*cj5*sj6))+(((-1.0)*r20*x3832))+(((-1.0)*cj6*sj5))+((r21*x3829)));
evalcond[4]=((((-1.0)*r02*x3828))+((cj4*x3826))+((cj4*x3827))+(((-1.0)*r00*x3832))+((r01*x3829)));
evalcond[5]=((((-1.0)*r12*x3828))+(((-1.0)*r10*x3832))+((sj4*x3826))+((sj4*x3827))+((r11*x3829)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x3833=IKPowWithIntegerCheck(IKsign((((gconst100*r00))+((gconst101*r01)))),-1);
if(!x3833.valid){
continue;
}
CheckValue<IkReal> x3834 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*gconst101*r20))+((cj4*gconst100*r21)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3834.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3833.value)))+(x3834.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x3835=IKcos(j8);
IkReal x3836=IKsin(j8);
IkReal x3837=(gconst100*r20);
IkReal x3838=(gconst101*r21);
IkReal x3839=((1.0)*x3835);
IkReal x3840=(gconst100*x3836);
IkReal x3841=(gconst100*x3835);
IkReal x3842=(gconst101*x3839);
IkReal x3843=((1.0)*gconst101*x3836);
evalcond[0]=(((r21*x3841))+(((-1.0)*r20*x3842))+((r22*x3836)));
evalcond[1]=(cj4+((r12*x3836))+(((-1.0)*r10*x3842))+((r11*x3841)));
evalcond[2]=((((-1.0)*sj4))+((r02*x3836))+((r01*x3841))+(((-1.0)*r00*x3842)));
evalcond[3]=((((-1.0)*cj5*sj6))+((r21*x3840))+(((-1.0)*r20*x3843))+(((-1.0)*r22*x3839))+(((-1.0)*cj6*sj5)));
evalcond[4]=(((cj4*x3838))+((cj4*x3837))+((r01*x3840))+(((-1.0)*r00*x3843))+(((-1.0)*r02*x3839)));
evalcond[5]=(((sj4*x3838))+((sj4*x3837))+(((-1.0)*r12*x3839))+(((-1.0)*r10*x3843))+((r11*x3840)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3845 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3845)==0){
continue;
}
IkReal x3844=pow(x3845,-0.5);
CheckValue<IkReal> x3846 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3846.valid){
continue;
}
IkReal gconst102=((-1.0)*(x3846.value));
IkReal gconst103=((-1.0)*r11*x3844);
IkReal gconst104=(r10*x3844);
CheckValue<IkReal> x3847 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3847.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3847.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
CheckValue<IkReal> x3850 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3850.valid){
continue;
}
IkReal x3848=((-1.0)*(x3850.value));
IkReal x3849=x3844;
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
sj9=gconst103;
cj9=gconst104;
j9=x3848;
IkReal gconst102=x3848;
IkReal gconst103=((-1.0)*r11*x3849);
IkReal gconst104=(r10*x3849);
j8eval[0]=cj4;
j8eval[1]=r22;
j8eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x3851=((1.0)*gconst104);
CheckValue<IkReal> x3852 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*r00*x3851))+(((-1.0)*r10*sj4*x3851))+((gconst103*r11*sj4))+((cj4*gconst103*r01)))),IkReal(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3852.valid){
continue;
}
CheckValue<IkReal> x3853=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3851))+(((-1.0)*gconst103*r20)))),-1);
if(!x3853.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x3852.value)+(((1.5707963267949)*(x3853.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x3854=IKcos(j8);
IkReal x3855=IKsin(j8);
IkReal x3856=(gconst104*r21);
IkReal x3857=(gconst103*r11);
IkReal x3858=(gconst103*r20);
IkReal x3859=(gconst104*r00);
IkReal x3860=(gconst104*r20);
IkReal x3861=(gconst104*r10);
IkReal x3862=((1.0)*x3854);
IkReal x3863=(gconst103*x3855);
IkReal x3864=((1.0)*x3855);
IkReal x3865=(gconst103*x3854);
evalcond[0]=((((-1.0)*x3860*x3862))+((r21*x3865))+((r22*x3855)));
evalcond[1]=(((x3854*x3857))+(((-1.0)*x3861*x3862))+cj4+((r12*x3855)));
evalcond[2]=(((r02*x3855))+(((-1.0)*sj4))+(((-1.0)*x3859*x3862))+((r01*x3865)));
evalcond[3]=((((-1.0)*cj5*sj6))+(((-1.0)*x3860*x3864))+((r21*x3863))+(((-1.0)*cj6*sj5))+(((-1.0)*r22*x3862)));
evalcond[4]=((((-1.0)*r02*x3862))+(((-1.0)*x3859*x3864))+((r01*x3863))+((cj4*x3858))+((cj4*x3856)));
evalcond[5]=((((-1.0)*x3861*x3864))+((x3855*x3857))+(((-1.0)*r12*x3862))+((sj4*x3856))+((sj4*x3858)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x3866=IKPowWithIntegerCheck(IKsign((((gconst103*r00))+((gconst104*r01)))),-1);
if(!x3866.valid){
continue;
}
CheckValue<IkReal> x3867 = IKatan2WithCheck(IkReal((((cj4*gconst103*r21))+(((-1.0)*cj4*gconst104*r20)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3867.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3866.value)))+(x3867.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x3868=IKcos(j8);
IkReal x3869=IKsin(j8);
IkReal x3870=(gconst104*r21);
IkReal x3871=(gconst103*r11);
IkReal x3872=(gconst103*r20);
IkReal x3873=(gconst104*r00);
IkReal x3874=(gconst104*r20);
IkReal x3875=(gconst104*r10);
IkReal x3876=((1.0)*x3868);
IkReal x3877=(gconst103*x3869);
IkReal x3878=((1.0)*x3869);
IkReal x3879=(gconst103*x3868);
evalcond[0]=((((-1.0)*x3874*x3876))+((r21*x3879))+((r22*x3869)));
evalcond[1]=(cj4+(((-1.0)*x3875*x3876))+((x3868*x3871))+((r12*x3869)));
evalcond[2]=((((-1.0)*x3873*x3876))+(((-1.0)*sj4))+((r02*x3869))+((r01*x3879)));
evalcond[3]=((((-1.0)*cj5*sj6))+(((-1.0)*x3874*x3878))+((r21*x3877))+(((-1.0)*r22*x3876))+(((-1.0)*cj6*sj5)));
evalcond[4]=((((-1.0)*x3873*x3878))+((r01*x3877))+((cj4*x3872))+((cj4*x3870))+(((-1.0)*r02*x3876)));
evalcond[5]=((((-1.0)*r12*x3876))+((sj4*x3872))+((sj4*x3870))+(((-1.0)*x3875*x3878))+((x3869*x3871)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3881 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3881)==0){
continue;
}
IkReal x3880=pow(x3881,-0.5);
CheckValue<IkReal> x3882 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3882.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x3882.value))));
IkReal gconst106=((1.0)*r11*x3880);
IkReal gconst107=((-1.0)*r10*x3880);
CheckValue<IkReal> x3883 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3883.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3883.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
CheckValue<IkReal> x3886 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3886.valid){
continue;
}
IkReal x3884=((1.0)*(x3886.value));
IkReal x3885=x3880;
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
sj9=gconst106;
cj9=gconst107;
j9=((3.14159265)+(((-1.0)*x3884)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3884)));
IkReal gconst106=((1.0)*r11*x3885);
IkReal gconst107=((-1.0)*r10*x3885);
j8eval[0]=cj4;
j8eval[1]=r22;
j8eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[5];
CheckValue<IkReal> x3889 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3889.valid){
continue;
}
IkReal x3887=((1.0)*(x3889.value));
IkReal x3888=x3880;
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
sj9=gconst106;
cj9=gconst107;
j9=((3.14159265)+(((-1.0)*x3887)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3887)));
IkReal gconst106=((1.0)*r11*x3888);
IkReal gconst107=((-1.0)*r10*x3888);
j8eval[0]=0;
j8eval[1]=0;
j8eval[2]=r22;
j8eval[3]=sj4;
j8eval[4]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  || IKabs(j8eval[4]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
CheckValue<IkReal> x3892 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3892.valid){
continue;
}
IkReal x3890=((1.0)*(x3892.value));
IkReal x3891=x3880;
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
sj9=gconst106;
cj9=gconst107;
j9=((3.14159265)+(((-1.0)*x3890)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3890)));
IkReal gconst106=((1.0)*r11*x3891);
IkReal gconst107=((-1.0)*r10*x3891);
IkReal x3893=r12*r12;
IkReal x3894=(cj4*r02);
IkReal x3895=x3880;
IkReal x3896=(sj4*x3895);
j8eval[0]=((IKabs(((((-1.0)*x3896))+((x3893*x3896))+((r12*x3894*x3895)))))+(IKabs(((((-1.0)*x3894))+(((-1.0)*r12*sj4))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x3897=((1.0)*gconst107);
CheckValue<IkReal> x3898 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*r00*x3897))+(((-1.0)*r10*sj4*x3897))+((gconst106*r11*sj4))+((cj4*gconst106*r01)))),IkReal(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3898.valid){
continue;
}
CheckValue<IkReal> x3899=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3897))+(((-1.0)*gconst106*r20)))),-1);
if(!x3899.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x3898.value)+(((1.5707963267949)*(x3899.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x3900=IKcos(j8);
IkReal x3901=IKsin(j8);
IkReal x3902=(gconst106*r20);
IkReal x3903=(gconst106*r11);
IkReal x3904=((1.0)*gconst107);
IkReal x3905=(gconst107*r21);
IkReal x3906=((1.0)*x3900);
IkReal x3907=(gconst106*x3900);
IkReal x3908=(gconst106*x3901);
evalcond[0]=((((-1.0)*r20*x3900*x3904))+((r22*x3901))+((r21*x3907)));
evalcond[1]=(((x3900*x3903))+cj4+((r12*x3901))+(((-1.0)*r10*x3900*x3904)));
evalcond[2]=((((-1.0)*sj4))+((r01*x3907))+(((-1.0)*r00*x3900*x3904))+((r02*x3901)));
evalcond[3]=((((-1.0)*cj5*sj6))+(((-1.0)*r20*x3901*x3904))+(((-1.0)*r22*x3906))+(((-1.0)*cj6*sj5))+((r21*x3908)));
evalcond[4]=(((cj4*x3905))+((cj4*x3902))+((r01*x3908))+(((-1.0)*r00*x3901*x3904))+(((-1.0)*r02*x3906)));
evalcond[5]=(((x3901*x3903))+(((-1.0)*r12*x3906))+(((-1.0)*r10*x3901*x3904))+((sj4*x3905))+((sj4*x3902)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x3909=IKPowWithIntegerCheck(IKsign((((gconst107*r11))+((gconst106*r10)))),-1);
if(!x3909.valid){
continue;
}
CheckValue<IkReal> x3910 = IKatan2WithCheck(IkReal((((gconst106*r21*sj4))+(((-1.0)*gconst107*r20*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x3910.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3909.value)))+(x3910.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x3911=IKcos(j8);
IkReal x3912=IKsin(j8);
IkReal x3913=(gconst106*r20);
IkReal x3914=(gconst106*r11);
IkReal x3915=((1.0)*gconst107);
IkReal x3916=(gconst107*r21);
IkReal x3917=((1.0)*x3911);
IkReal x3918=(gconst106*x3911);
IkReal x3919=(gconst106*x3912);
evalcond[0]=(((r21*x3918))+(((-1.0)*r20*x3911*x3915))+((r22*x3912)));
evalcond[1]=(cj4+((x3911*x3914))+((r12*x3912))+(((-1.0)*r10*x3911*x3915)));
evalcond[2]=((((-1.0)*sj4))+((r01*x3918))+((r02*x3912))+(((-1.0)*r00*x3911*x3915)));
evalcond[3]=((((-1.0)*cj5*sj6))+((r21*x3919))+(((-1.0)*r22*x3917))+(((-1.0)*r20*x3912*x3915))+(((-1.0)*cj6*sj5)));
evalcond[4]=((((-1.0)*r02*x3917))+(((-1.0)*r00*x3912*x3915))+((cj4*x3913))+((cj4*x3916))+((r01*x3919)));
evalcond[5]=((((-1.0)*r10*x3912*x3915))+((sj4*x3913))+((sj4*x3916))+((x3912*x3914))+(((-1.0)*r12*x3917)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x3920 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*gconst107*r20))+((cj4*gconst106*r21)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3920.valid){
continue;
}
CheckValue<IkReal> x3921=IKPowWithIntegerCheck(IKsign((((gconst107*r01))+((gconst106*r00)))),-1);
if(!x3921.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x3920.value)+(((1.5707963267949)*(x3921.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x3922=IKcos(j8);
IkReal x3923=IKsin(j8);
IkReal x3924=(gconst106*r20);
IkReal x3925=(gconst106*r11);
IkReal x3926=((1.0)*gconst107);
IkReal x3927=(gconst107*r21);
IkReal x3928=((1.0)*x3922);
IkReal x3929=(gconst106*x3922);
IkReal x3930=(gconst106*x3923);
evalcond[0]=((((-1.0)*r20*x3922*x3926))+((r21*x3929))+((r22*x3923)));
evalcond[1]=(cj4+((r12*x3923))+(((-1.0)*r10*x3922*x3926))+((x3922*x3925)));
evalcond[2]=((((-1.0)*sj4))+((r02*x3923))+(((-1.0)*r00*x3922*x3926))+((r01*x3929)));
evalcond[3]=((((-1.0)*cj5*sj6))+((r21*x3930))+(((-1.0)*r20*x3923*x3926))+(((-1.0)*r22*x3928))+(((-1.0)*cj6*sj5)));
evalcond[4]=((((-1.0)*r00*x3923*x3926))+((r01*x3930))+(((-1.0)*r02*x3928))+((cj4*x3924))+((cj4*x3927)));
evalcond[5]=((((-1.0)*r12*x3928))+(((-1.0)*r10*x3923*x3926))+((sj4*x3924))+((sj4*x3927))+((x3923*x3925)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
sj4=0;
cj4=1.0;
j4=0;
IkReal x3931=(((r00*sj9))+((cj9*r01)));
j8eval[0]=x3931;
j8eval[1]=IKsign(x3931);
j8eval[2]=((IKabs(r22))+(IKabs((((r21*sj9))+(((-1.0)*cj9*r20))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
sj4=0;
cj4=1.0;
j4=0;
IkReal x3932=((1.0)*cj9);
IkReal x3933=((((-1.0)*r21*x3932))+(((-1.0)*r20*sj9)));
j8eval[0]=x3933;
j8eval[1]=((IKabs(r02))+(IKabs((((r01*sj9))+(((-1.0)*r00*x3932))))));
j8eval[2]=IKsign(x3933);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
sj4=0;
cj4=1.0;
j4=0;
IkReal x3934=r11*r11;
IkReal x3935=cj9*cj9;
IkReal x3936=(r11*sj9);
IkReal x3937=(cj9*r10);
IkReal x3938=((((2.0)*x3936*x3937))+(((-1.0)*x3934))+(((-1.0)*x3935*(r10*r10)))+((x3934*x3935))+(((-1.0)*(r12*r12))));
j8eval[0]=x3938;
j8eval[1]=IKsign(x3938);
j8eval[2]=((IKabs(((((-1.0)*x3937))+x3936)))+(IKabs(r12)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x3939=r11*r11;
IkReal x3940=cj9*cj9;
IkReal x3941=(r11*sj9);
IkReal x3942=(cj9*r10);
CheckValue<IkReal> x3943 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x3942))+x3941)),IKFAST_ATAN2_MAGTHRESH);
if(!x3943.valid){
continue;
}
CheckValue<IkReal> x3944=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3939))+(((-1.0)*x3940*(r10*r10)))+((x3939*x3940))+(((2.0)*x3941*x3942))+(((-1.0)*(r12*r12))))),-1);
if(!x3944.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x3943.value)+(((1.5707963267949)*(x3944.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x3945=IKcos(j8);
IkReal x3946=IKsin(j8);
IkReal x3947=((1.0)*x3945);
IkReal x3948=(sj9*x3945);
IkReal x3949=(sj9*x3946);
IkReal x3950=(cj9*x3947);
IkReal x3951=((1.0)*cj9*x3946);
evalcond[0]=(((r22*x3946))+(((-1.0)*r20*x3950))+((r21*x3948)));
evalcond[1]=(((r01*x3948))+(((-1.0)*r00*x3950))+((r02*x3946)));
evalcond[2]=((1.0)+((r12*x3946))+(((-1.0)*r10*x3950))+((r11*x3948)));
evalcond[3]=((((-1.0)*r12*x3947))+(((-1.0)*r10*x3951))+((r11*x3949)));
evalcond[4]=(((r01*x3949))+(((-1.0)*r00*x3951))+(((-1.0)*r02*x3947))+((cj9*r21))+((r20*sj9)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*r22*x3947))+(((-1.0)*r20*x3951))+(((-1.0)*cj6*sj5))+((r21*x3949)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x3952=((1.0)*cj9);
CheckValue<IkReal> x3953 = IKatan2WithCheck(IkReal((((r01*sj9))+(((-1.0)*r00*x3952)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x3953.valid){
continue;
}
CheckValue<IkReal> x3954=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3952))+(((-1.0)*r20*sj9)))),-1);
if(!x3954.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x3953.value)+(((1.5707963267949)*(x3954.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x3955=IKcos(j8);
IkReal x3956=IKsin(j8);
IkReal x3957=((1.0)*x3955);
IkReal x3958=(sj9*x3955);
IkReal x3959=(sj9*x3956);
IkReal x3960=(cj9*x3957);
IkReal x3961=((1.0)*cj9*x3956);
evalcond[0]=((((-1.0)*r20*x3960))+((r21*x3958))+((r22*x3956)));
evalcond[1]=(((r01*x3958))+((r02*x3956))+(((-1.0)*r00*x3960)));
evalcond[2]=((1.0)+(((-1.0)*r10*x3960))+((r11*x3958))+((r12*x3956)));
evalcond[3]=((((-1.0)*r10*x3961))+(((-1.0)*r12*x3957))+((r11*x3959)));
evalcond[4]=(((r01*x3959))+((cj9*r21))+(((-1.0)*r02*x3957))+(((-1.0)*r00*x3961))+((r20*sj9)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*r20*x3961))+((r21*x3959))+(((-1.0)*r22*x3957))+(((-1.0)*cj6*sj5)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x3962=IKPowWithIntegerCheck(IKsign((((r00*sj9))+((cj9*r01)))),-1);
if(!x3962.valid){
continue;
}
CheckValue<IkReal> x3963 = IKatan2WithCheck(IkReal((((r21*sj9))+(((-1.0)*cj9*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3963.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3962.value)))+(x3963.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x3964=IKcos(j8);
IkReal x3965=IKsin(j8);
IkReal x3966=((1.0)*x3964);
IkReal x3967=(sj9*x3964);
IkReal x3968=(sj9*x3965);
IkReal x3969=(cj9*x3966);
IkReal x3970=((1.0)*cj9*x3965);
evalcond[0]=((((-1.0)*r20*x3969))+((r22*x3965))+((r21*x3967)));
evalcond[1]=(((r02*x3965))+((r01*x3967))+(((-1.0)*r00*x3969)));
evalcond[2]=((1.0)+((r11*x3967))+(((-1.0)*r10*x3969))+((r12*x3965)));
evalcond[3]=(((r11*x3968))+(((-1.0)*r10*x3970))+(((-1.0)*r12*x3966)));
evalcond[4]=((((-1.0)*r02*x3966))+((cj9*r21))+((r01*x3968))+((r20*sj9))+(((-1.0)*r00*x3970)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*r20*x3970))+((r21*x3968))+(((-1.0)*r22*x3966))+(((-1.0)*cj6*sj5)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x3971=(((cj9*r21))+((r20*sj9)));
j8eval[0]=x3971;
j8eval[1]=((IKabs(r02))+(IKabs((((r01*sj9))+(((-1.0)*cj9*r00))))));
j8eval[2]=IKsign(x3971);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x3972=((1.0)*cj9);
IkReal x3973=((((-1.0)*r00*sj9))+(((-1.0)*r01*x3972)));
j8eval[0]=x3973;
j8eval[1]=((IKabs(((((-1.0)*r20*x3972))+((r21*sj9)))))+(IKabs(r22)));
j8eval[2]=IKsign(x3973);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x3974=cj9*cj9;
IkReal x3975=r11*r11;
IkReal x3976=(r11*sj9);
IkReal x3977=(cj9*r10);
IkReal x3978=((r12*r12)+(((-1.0)*x3974*x3975))+x3975+(((-2.0)*x3976*x3977))+((x3974*(r10*r10))));
j8eval[0]=x3978;
j8eval[1]=IKsign(x3978);
j8eval[2]=((IKabs(r12))+(IKabs((x3976+(((-1.0)*x3977))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x3979=cj9*cj9;
IkReal x3980=r11*r11;
IkReal x3981=(r11*sj9);
IkReal x3982=(cj9*r10);
CheckValue<IkReal> x3983 = IKatan2WithCheck(IkReal(r12),IkReal((x3981+(((-1.0)*x3982)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3983.valid){
continue;
}
CheckValue<IkReal> x3984=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x3979*x3980))+x3980+(((-2.0)*x3981*x3982))+((x3979*(r10*r10))))),-1);
if(!x3984.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x3983.value)+(((1.5707963267949)*(x3984.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x3985=IKcos(j8);
IkReal x3986=IKsin(j8);
IkReal x3987=((1.0)*cj9);
IkReal x3988=(sj9*x3986);
IkReal x3989=((1.0)*x3985);
IkReal x3990=(sj9*x3985);
IkReal x3991=(x3985*x3987);
evalcond[0]=(((r21*x3990))+(((-1.0)*r20*x3991))+((r22*x3986)));
evalcond[1]=((((-1.0)*r00*x3991))+((r01*x3990))+((r02*x3986)));
evalcond[2]=((-1.0)+(((-1.0)*r10*x3991))+((r11*x3990))+((r12*x3986)));
evalcond[3]=((((-1.0)*r12*x3989))+((r11*x3988))+(((-1.0)*r10*x3986*x3987)));
evalcond[4]=((((-1.0)*cj5*sj6))+((r21*x3988))+(((-1.0)*r22*x3989))+(((-1.0)*cj6*sj5))+(((-1.0)*r20*x3986*x3987)));
evalcond[5]=(((r01*x3988))+(((-1.0)*r21*x3987))+(((-1.0)*r02*x3989))+(((-1.0)*r00*x3986*x3987))+(((-1.0)*r20*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x3992=((1.0)*cj9);
CheckValue<IkReal> x3993=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj9))+(((-1.0)*r01*x3992)))),-1);
if(!x3993.valid){
continue;
}
CheckValue<IkReal> x3994 = IKatan2WithCheck(IkReal((((r21*sj9))+(((-1.0)*r20*x3992)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3994.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3993.value)))+(x3994.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x3995=IKcos(j8);
IkReal x3996=IKsin(j8);
IkReal x3997=((1.0)*cj9);
IkReal x3998=(sj9*x3996);
IkReal x3999=((1.0)*x3995);
IkReal x4000=(sj9*x3995);
IkReal x4001=(x3995*x3997);
evalcond[0]=(((r22*x3996))+(((-1.0)*r20*x4001))+((r21*x4000)));
evalcond[1]=((((-1.0)*r00*x4001))+((r01*x4000))+((r02*x3996)));
evalcond[2]=((-1.0)+(((-1.0)*r10*x4001))+((r12*x3996))+((r11*x4000)));
evalcond[3]=((((-1.0)*r10*x3996*x3997))+(((-1.0)*r12*x3999))+((r11*x3998)));
evalcond[4]=((((-1.0)*cj5*sj6))+((r21*x3998))+(((-1.0)*r20*x3996*x3997))+(((-1.0)*r22*x3999))+(((-1.0)*cj6*sj5)));
evalcond[5]=((((-1.0)*r02*x3999))+((r01*x3998))+(((-1.0)*r00*x3996*x3997))+(((-1.0)*r21*x3997))+(((-1.0)*r20*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x4002 = IKatan2WithCheck(IkReal((((r01*sj9))+(((-1.0)*cj9*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4002.valid){
continue;
}
CheckValue<IkReal> x4003=IKPowWithIntegerCheck(IKsign((((cj9*r21))+((r20*sj9)))),-1);
if(!x4003.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x4002.value)+(((1.5707963267949)*(x4003.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x4004=IKcos(j8);
IkReal x4005=IKsin(j8);
IkReal x4006=((1.0)*cj9);
IkReal x4007=(sj9*x4005);
IkReal x4008=((1.0)*x4004);
IkReal x4009=(sj9*x4004);
IkReal x4010=(x4004*x4006);
evalcond[0]=(((r22*x4005))+(((-1.0)*r20*x4010))+((r21*x4009)));
evalcond[1]=(((r01*x4009))+((r02*x4005))+(((-1.0)*r00*x4010)));
evalcond[2]=((-1.0)+((r12*x4005))+(((-1.0)*r10*x4010))+((r11*x4009)));
evalcond[3]=((((-1.0)*r10*x4005*x4006))+(((-1.0)*r12*x4008))+((r11*x4007)));
evalcond[4]=((((-1.0)*cj5*sj6))+(((-1.0)*r22*x4008))+(((-1.0)*r20*x4005*x4006))+((r21*x4007))+(((-1.0)*cj6*sj5)));
evalcond[5]=((((-1.0)*r02*x4008))+((r01*x4007))+(((-1.0)*r21*x4006))+(((-1.0)*r00*x4005*x4006))+(((-1.0)*r20*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4012 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4012)==0){
continue;
}
IkReal x4011=pow(x4012,-0.5);
CheckValue<IkReal> x4013 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4013.valid){
continue;
}
IkReal gconst108=((-1.0)*(x4013.value));
IkReal gconst109=((-1.0)*r01*x4011);
IkReal gconst110=(r00*x4011);
CheckValue<IkReal> x4014 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4014.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4014.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
CheckValue<IkReal> x4017 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4017.valid){
continue;
}
IkReal x4015=((-1.0)*(x4017.value));
IkReal x4016=x4011;
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
sj9=gconst109;
cj9=gconst110;
j9=x4015;
IkReal gconst108=x4015;
IkReal gconst109=((-1.0)*r01*x4016);
IkReal gconst110=(r00*x4016);
j8eval[0]=r22;
j8eval[1]=sj4;
j8eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x4018=((1.0)*gconst110);
CheckValue<IkReal> x4019=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst109*r20))+(((-1.0)*r21*x4018)))),-1);
if(!x4019.valid){
continue;
}
CheckValue<IkReal> x4020 = IKatan2WithCheck(IkReal((((cj4*gconst109*r01))+((gconst109*r11*sj4))+(((-1.0)*cj4*r00*x4018))+(((-1.0)*r10*sj4*x4018)))),IkReal(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4020.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4019.value)))+(x4020.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x4021=IKcos(j8);
IkReal x4022=IKsin(j8);
IkReal x4023=((1.0)*gconst110);
IkReal x4024=(gconst109*r20);
IkReal x4025=(gconst110*r21);
IkReal x4026=(gconst109*x4021);
IkReal x4027=(gconst109*x4022);
IkReal x4028=((1.0)*x4021);
evalcond[0]=((((-1.0)*r20*x4021*x4023))+((r21*x4026))+((r22*x4022)));
evalcond[1]=(cj4+(((-1.0)*r10*x4021*x4023))+((r12*x4022))+((r11*x4026)));
evalcond[2]=((((-1.0)*sj4))+((r01*x4026))+(((-1.0)*r00*x4021*x4023))+((r02*x4022)));
evalcond[3]=((((-1.0)*cj5*sj6))+(((-1.0)*r22*x4028))+((r21*x4027))+(((-1.0)*r20*x4022*x4023))+(((-1.0)*cj6*sj5)));
evalcond[4]=((((-1.0)*r02*x4028))+((r01*x4027))+(((-1.0)*r00*x4022*x4023))+((cj4*x4025))+((cj4*x4024)));
evalcond[5]=((((-1.0)*r12*x4028))+((sj4*x4025))+((sj4*x4024))+((r11*x4027))+(((-1.0)*r10*x4022*x4023)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x4029=IKPowWithIntegerCheck(IKsign((((gconst109*r10))+((gconst110*r11)))),-1);
if(!x4029.valid){
continue;
}
CheckValue<IkReal> x4030 = IKatan2WithCheck(IkReal((((gconst109*r21*sj4))+(((-1.0)*gconst110*r20*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x4030.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4029.value)))+(x4030.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x4031=IKcos(j8);
IkReal x4032=IKsin(j8);
IkReal x4033=((1.0)*gconst110);
IkReal x4034=(gconst109*r20);
IkReal x4035=(gconst110*r21);
IkReal x4036=(gconst109*x4031);
IkReal x4037=(gconst109*x4032);
IkReal x4038=((1.0)*x4031);
evalcond[0]=(((r21*x4036))+(((-1.0)*r20*x4031*x4033))+((r22*x4032)));
evalcond[1]=(cj4+(((-1.0)*r10*x4031*x4033))+((r12*x4032))+((r11*x4036)));
evalcond[2]=((((-1.0)*sj4))+((r02*x4032))+((r01*x4036))+(((-1.0)*r00*x4031*x4033)));
evalcond[3]=(((r21*x4037))+(((-1.0)*cj5*sj6))+(((-1.0)*r20*x4032*x4033))+(((-1.0)*r22*x4038))+(((-1.0)*cj6*sj5)));
evalcond[4]=(((r01*x4037))+(((-1.0)*r00*x4032*x4033))+(((-1.0)*r02*x4038))+((cj4*x4035))+((cj4*x4034)));
evalcond[5]=((((-1.0)*r12*x4038))+((sj4*x4035))+((sj4*x4034))+(((-1.0)*r10*x4032*x4033))+((r11*x4037)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4040 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4040)==0){
continue;
}
IkReal x4039=pow(x4040,-0.5);
CheckValue<IkReal> x4041 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4041.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x4041.value))));
IkReal gconst112=((1.0)*r01*x4039);
IkReal gconst113=((-1.0)*r00*x4039);
CheckValue<IkReal> x4042 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4042.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4042.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[5];
CheckValue<IkReal> x4045 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4045.valid){
continue;
}
IkReal x4043=((1.0)*(x4045.value));
IkReal x4044=x4039;
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
sj9=gconst112;
cj9=gconst113;
j9=((3.14159265)+(((-1.0)*x4043)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4043)));
IkReal gconst112=((1.0)*r01*x4044);
IkReal gconst113=((-1.0)*r00*x4044);
j8eval[0]=0;
j8eval[1]=cj4;
j8eval[2]=r22;
j8eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j8eval[4]=0;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  || IKabs(j8eval[4]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
CheckValue<IkReal> x4048 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4048.valid){
continue;
}
IkReal x4046=((1.0)*(x4048.value));
IkReal x4047=x4039;
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
sj9=gconst112;
cj9=gconst113;
j9=((3.14159265)+(((-1.0)*x4046)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4046)));
IkReal gconst112=((1.0)*r01*x4047);
IkReal gconst113=((-1.0)*r00*x4047);
j8eval[0]=r22;
j8eval[1]=sj4;
j8eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
CheckValue<IkReal> x4051 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4051.valid){
continue;
}
IkReal x4049=((1.0)*(x4051.value));
IkReal x4050=x4039;
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
sj9=gconst112;
cj9=gconst113;
j9=((3.14159265)+(((-1.0)*x4049)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4049)));
IkReal gconst112=((1.0)*r01*x4050);
IkReal gconst113=((-1.0)*r00*x4050);
IkReal x4052=r02*r02;
IkReal x4053=(r12*sj4);
IkReal x4054=x4039;
IkReal x4055=(cj4*x4054);
j8eval[0]=((IKabs((((r02*x4053*x4054))+(((-1.0)*x4055))+((x4052*x4055)))))+(IKabs(((((-1.0)*cj4*r02))+(((-1.0)*x4053))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x4056=((1.0)*gconst113);
CheckValue<IkReal> x4057=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4056))+(((-1.0)*gconst112*r20)))),-1);
if(!x4057.valid){
continue;
}
CheckValue<IkReal> x4058 = IKatan2WithCheck(IkReal((((cj4*gconst112*r01))+(((-1.0)*cj4*r00*x4056))+((gconst112*r11*sj4))+(((-1.0)*r10*sj4*x4056)))),IkReal(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4058.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4057.value)))+(x4058.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x4059=IKcos(j8);
IkReal x4060=IKsin(j8);
IkReal x4061=(gconst112*r20);
IkReal x4062=(gconst113*r21);
IkReal x4063=(gconst112*x4059);
IkReal x4064=((1.0)*x4059);
IkReal x4065=(gconst112*x4060);
IkReal x4066=(gconst113*x4064);
IkReal x4067=((1.0)*gconst113*x4060);
evalcond[0]=((((-1.0)*r20*x4066))+((r21*x4063))+((r22*x4060)));
evalcond[1]=(cj4+((r11*x4063))+(((-1.0)*r10*x4066))+((r12*x4060)));
evalcond[2]=((((-1.0)*sj4))+((r02*x4060))+(((-1.0)*r00*x4066))+((r01*x4063)));
evalcond[3]=((((-1.0)*cj5*sj6))+(((-1.0)*r20*x4067))+((r21*x4065))+(((-1.0)*r22*x4064))+(((-1.0)*cj6*sj5)));
evalcond[4]=(((cj4*x4062))+((cj4*x4061))+(((-1.0)*r00*x4067))+(((-1.0)*r02*x4064))+((r01*x4065)));
evalcond[5]=((((-1.0)*r12*x4064))+((r11*x4065))+((sj4*x4062))+((sj4*x4061))+(((-1.0)*r10*x4067)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x4068=IKPowWithIntegerCheck(IKsign((((gconst113*r11))+((gconst112*r10)))),-1);
if(!x4068.valid){
continue;
}
CheckValue<IkReal> x4069 = IKatan2WithCheck(IkReal((((gconst112*r21*sj4))+(((-1.0)*gconst113*r20*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x4069.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4068.value)))+(x4069.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x4070=IKcos(j8);
IkReal x4071=IKsin(j8);
IkReal x4072=(gconst112*r20);
IkReal x4073=(gconst113*r21);
IkReal x4074=(gconst112*x4070);
IkReal x4075=((1.0)*x4070);
IkReal x4076=(gconst112*x4071);
IkReal x4077=(gconst113*x4075);
IkReal x4078=((1.0)*gconst113*x4071);
evalcond[0]=(((r22*x4071))+(((-1.0)*r20*x4077))+((r21*x4074)));
evalcond[1]=((((-1.0)*r10*x4077))+((r12*x4071))+cj4+((r11*x4074)));
evalcond[2]=((((-1.0)*r00*x4077))+(((-1.0)*sj4))+((r01*x4074))+((r02*x4071)));
evalcond[3]=((((-1.0)*cj5*sj6))+(((-1.0)*r22*x4075))+(((-1.0)*r20*x4078))+(((-1.0)*cj6*sj5))+((r21*x4076)));
evalcond[4]=((((-1.0)*r00*x4078))+((cj4*x4072))+((cj4*x4073))+(((-1.0)*r02*x4075))+((r01*x4076)));
evalcond[5]=(((sj4*x4072))+((sj4*x4073))+(((-1.0)*r10*x4078))+(((-1.0)*r12*x4075))+((r11*x4076)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x4079=IKPowWithIntegerCheck(IKsign((((gconst112*r00))+((gconst113*r01)))),-1);
if(!x4079.valid){
continue;
}
CheckValue<IkReal> x4080 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*gconst113*r20))+((cj4*gconst112*r21)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4080.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4079.value)))+(x4080.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x4081=IKcos(j8);
IkReal x4082=IKsin(j8);
IkReal x4083=(gconst112*r20);
IkReal x4084=(gconst113*r21);
IkReal x4085=(gconst112*x4081);
IkReal x4086=((1.0)*x4081);
IkReal x4087=(gconst112*x4082);
IkReal x4088=(gconst113*x4086);
IkReal x4089=((1.0)*gconst113*x4082);
evalcond[0]=((((-1.0)*r20*x4088))+((r21*x4085))+((r22*x4082)));
evalcond[1]=(cj4+((r12*x4082))+((r11*x4085))+(((-1.0)*r10*x4088)));
evalcond[2]=(((r01*x4085))+(((-1.0)*sj4))+(((-1.0)*r00*x4088))+((r02*x4082)));
evalcond[3]=((((-1.0)*cj5*sj6))+(((-1.0)*r20*x4089))+((r21*x4087))+(((-1.0)*r22*x4086))+(((-1.0)*cj6*sj5)));
evalcond[4]=(((r01*x4087))+((cj4*x4084))+((cj4*x4083))+(((-1.0)*r02*x4086))+(((-1.0)*r00*x4089)));
evalcond[5]=((((-1.0)*r12*x4086))+((sj4*x4084))+((sj4*x4083))+((r11*x4087))+(((-1.0)*r10*x4089)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal x4090=(((r10*sj9))+((cj9*r11)));
j8eval[0]=x4090;
j8eval[1]=((IKabs(r22))+(IKabs((((r21*sj9))+(((-1.0)*cj9*r20))))));
j8eval[2]=IKsign(x4090);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal x4091=((1.0)*cj9);
IkReal x4092=((((-1.0)*r21*x4091))+(((-1.0)*r20*sj9)));
j8eval[0]=x4092;
j8eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x4091))+((r11*sj9))))));
j8eval[2]=IKsign(x4092);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal x4093=cj9*cj9;
IkReal x4094=r01*r01;
IkReal x4095=(cj9*r00);
IkReal x4096=(r01*sj9);
IkReal x4097=((((-1.0)*x4093*x4094))+(((-2.0)*x4095*x4096))+x4094+(r02*r02)+((x4093*(r00*r00))));
j8eval[0]=x4097;
j8eval[1]=((IKabs(r02))+(IKabs((x4096+(((-1.0)*x4095))))));
j8eval[2]=IKsign(x4097);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x4098=cj9*cj9;
IkReal x4099=r01*r01;
IkReal x4100=(cj9*r00);
IkReal x4101=(r01*sj9);
CheckValue<IkReal> x4102 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x4100))+x4101)),IKFAST_ATAN2_MAGTHRESH);
if(!x4102.valid){
continue;
}
CheckValue<IkReal> x4103=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4098*x4099))+(((-2.0)*x4100*x4101))+x4099+((x4098*(r00*r00)))+(r02*r02))),-1);
if(!x4103.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x4102.value)+(((1.5707963267949)*(x4103.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x4104=IKcos(j8);
IkReal x4105=IKsin(j8);
IkReal x4106=((1.0)*x4104);
IkReal x4107=(sj9*x4104);
IkReal x4108=(sj9*x4105);
IkReal x4109=(cj9*x4106);
IkReal x4110=((1.0)*cj9*x4105);
evalcond[0]=(((r22*x4105))+((r21*x4107))+(((-1.0)*r20*x4109)));
evalcond[1]=((((-1.0)*r10*x4109))+((r12*x4105))+((r11*x4107)));
evalcond[2]=((-1.0)+((r02*x4105))+(((-1.0)*r00*x4109))+((r01*x4107)));
evalcond[3]=((((-1.0)*r00*x4110))+((r01*x4108))+(((-1.0)*r02*x4106)));
evalcond[4]=((((-1.0)*r12*x4106))+(((-1.0)*r10*x4110))+((cj9*r21))+((r11*x4108))+((r20*sj9)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*r22*x4106))+(((-1.0)*r20*x4110))+((r21*x4108))+(((-1.0)*cj6*sj5)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x4111=((1.0)*cj9);
CheckValue<IkReal> x4112=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4111))+(((-1.0)*r20*sj9)))),-1);
if(!x4112.valid){
continue;
}
CheckValue<IkReal> x4113 = IKatan2WithCheck(IkReal((((r11*sj9))+(((-1.0)*r10*x4111)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4113.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4112.value)))+(x4113.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x4114=IKcos(j8);
IkReal x4115=IKsin(j8);
IkReal x4116=((1.0)*x4114);
IkReal x4117=(sj9*x4114);
IkReal x4118=(sj9*x4115);
IkReal x4119=(cj9*x4116);
IkReal x4120=((1.0)*cj9*x4115);
evalcond[0]=(((r21*x4117))+(((-1.0)*r20*x4119))+((r22*x4115)));
evalcond[1]=(((r12*x4115))+(((-1.0)*r10*x4119))+((r11*x4117)));
evalcond[2]=((-1.0)+(((-1.0)*r00*x4119))+((r02*x4115))+((r01*x4117)));
evalcond[3]=((((-1.0)*r00*x4120))+(((-1.0)*r02*x4116))+((r01*x4118)));
evalcond[4]=((((-1.0)*r12*x4116))+(((-1.0)*r10*x4120))+((cj9*r21))+((r11*x4118))+((r20*sj9)));
evalcond[5]=((((-1.0)*cj5*sj6))+((r21*x4118))+(((-1.0)*r22*x4116))+(((-1.0)*r20*x4120))+(((-1.0)*cj6*sj5)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x4121=IKPowWithIntegerCheck(IKsign((((r10*sj9))+((cj9*r11)))),-1);
if(!x4121.valid){
continue;
}
CheckValue<IkReal> x4122 = IKatan2WithCheck(IkReal((((r21*sj9))+(((-1.0)*cj9*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4122.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4121.value)))+(x4122.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x4123=IKcos(j8);
IkReal x4124=IKsin(j8);
IkReal x4125=((1.0)*x4123);
IkReal x4126=(sj9*x4123);
IkReal x4127=(sj9*x4124);
IkReal x4128=(cj9*x4125);
IkReal x4129=((1.0)*cj9*x4124);
evalcond[0]=(((r21*x4126))+(((-1.0)*r20*x4128))+((r22*x4124)));
evalcond[1]=(((r12*x4124))+(((-1.0)*r10*x4128))+((r11*x4126)));
evalcond[2]=((-1.0)+(((-1.0)*r00*x4128))+((r02*x4124))+((r01*x4126)));
evalcond[3]=((((-1.0)*r00*x4129))+(((-1.0)*r02*x4125))+((r01*x4127)));
evalcond[4]=((((-1.0)*r12*x4125))+(((-1.0)*r10*x4129))+((cj9*r21))+((r11*x4127))+((r20*sj9)));
evalcond[5]=((((-1.0)*cj5*sj6))+((r21*x4127))+(((-1.0)*r22*x4125))+(((-1.0)*r20*x4129))+(((-1.0)*cj6*sj5)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal x4130=(((cj9*r21))+((r20*sj9)));
j8eval[0]=x4130;
j8eval[1]=((IKabs(r12))+(IKabs((((r11*sj9))+(((-1.0)*cj9*r10))))));
j8eval[2]=IKsign(x4130);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal x4131=((1.0)*cj9);
IkReal x4132=((((-1.0)*r10*sj9))+(((-1.0)*r11*x4131)));
j8eval[0]=x4132;
j8eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x4131))+((r21*sj9))))));
j8eval[2]=IKsign(x4132);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal x4133=cj9*cj9;
IkReal x4134=r01*r01;
IkReal x4135=(r01*sj9);
IkReal x4136=(cj9*r00);
IkReal x4137=((((-1.0)*x4133*(r00*r00)))+(((-1.0)*(r02*r02)))+(((-1.0)*x4134))+(((2.0)*x4135*x4136))+((x4133*x4134)));
j8eval[0]=x4137;
j8eval[1]=IKsign(x4137);
j8eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x4136))+x4135))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x4138=cj9*cj9;
IkReal x4139=r01*r01;
IkReal x4140=(r01*sj9);
IkReal x4141=(cj9*r00);
CheckValue<IkReal> x4142 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x4141))+x4140)),IKFAST_ATAN2_MAGTHRESH);
if(!x4142.valid){
continue;
}
CheckValue<IkReal> x4143=IKPowWithIntegerCheck(IKsign((((x4138*x4139))+(((-1.0)*(r02*r02)))+(((-1.0)*x4139))+(((2.0)*x4140*x4141))+(((-1.0)*x4138*(r00*r00))))),-1);
if(!x4143.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x4142.value)+(((1.5707963267949)*(x4143.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x4144=IKcos(j8);
IkReal x4145=IKsin(j8);
IkReal x4146=((1.0)*r20);
IkReal x4147=((1.0)*x4144);
IkReal x4148=(sj9*x4144);
IkReal x4149=(sj9*x4145);
IkReal x4150=(cj9*x4145);
IkReal x4151=(cj9*x4147);
evalcond[0]=((((-1.0)*cj9*x4144*x4146))+((r21*x4148))+((r22*x4145)));
evalcond[1]=(((r12*x4145))+((r11*x4148))+(((-1.0)*r10*x4151)));
evalcond[2]=((1.0)+((r02*x4145))+((r01*x4148))+(((-1.0)*r00*x4151)));
evalcond[3]=(((r01*x4149))+(((-1.0)*r02*x4147))+(((-1.0)*r00*x4150)));
evalcond[4]=((((-1.0)*cj5*sj6))+((r21*x4149))+(((-1.0)*x4146*x4150))+(((-1.0)*r22*x4147))+(((-1.0)*cj6*sj5)));
evalcond[5]=((((-1.0)*sj9*x4146))+((r11*x4149))+(((-1.0)*cj9*r21))+(((-1.0)*r12*x4147))+(((-1.0)*r10*x4150)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x4152=((1.0)*cj9);
CheckValue<IkReal> x4153 = IKatan2WithCheck(IkReal((((r21*sj9))+(((-1.0)*r20*x4152)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4153.valid){
continue;
}
CheckValue<IkReal> x4154=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj9))+(((-1.0)*r11*x4152)))),-1);
if(!x4154.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x4153.value)+(((1.5707963267949)*(x4154.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x4155=IKcos(j8);
IkReal x4156=IKsin(j8);
IkReal x4157=((1.0)*r20);
IkReal x4158=((1.0)*x4155);
IkReal x4159=(sj9*x4155);
IkReal x4160=(sj9*x4156);
IkReal x4161=(cj9*x4156);
IkReal x4162=(cj9*x4158);
evalcond[0]=((((-1.0)*cj9*x4155*x4157))+((r21*x4159))+((r22*x4156)));
evalcond[1]=((((-1.0)*r10*x4162))+((r12*x4156))+((r11*x4159)));
evalcond[2]=((1.0)+(((-1.0)*r00*x4162))+((r02*x4156))+((r01*x4159)));
evalcond[3]=(((r01*x4160))+(((-1.0)*r02*x4158))+(((-1.0)*r00*x4161)));
evalcond[4]=((((-1.0)*cj5*sj6))+((r21*x4160))+(((-1.0)*x4157*x4161))+(((-1.0)*r22*x4158))+(((-1.0)*cj6*sj5)));
evalcond[5]=((((-1.0)*r10*x4161))+(((-1.0)*sj9*x4157))+(((-1.0)*cj9*r21))+((r11*x4160))+(((-1.0)*r12*x4158)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x4163=IKPowWithIntegerCheck(IKsign((((cj9*r21))+((r20*sj9)))),-1);
if(!x4163.valid){
continue;
}
CheckValue<IkReal> x4164 = IKatan2WithCheck(IkReal((((r11*sj9))+(((-1.0)*cj9*r10)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4164.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4163.value)))+(x4164.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x4165=IKcos(j8);
IkReal x4166=IKsin(j8);
IkReal x4167=((1.0)*r20);
IkReal x4168=((1.0)*x4165);
IkReal x4169=(sj9*x4165);
IkReal x4170=(sj9*x4166);
IkReal x4171=(cj9*x4166);
IkReal x4172=(cj9*x4168);
evalcond[0]=(((r22*x4166))+(((-1.0)*cj9*x4165*x4167))+((r21*x4169)));
evalcond[1]=(((r11*x4169))+((r12*x4166))+(((-1.0)*r10*x4172)));
evalcond[2]=((1.0)+((r01*x4169))+(((-1.0)*r00*x4172))+((r02*x4166)));
evalcond[3]=((((-1.0)*r02*x4168))+(((-1.0)*r00*x4171))+((r01*x4170)));
evalcond[4]=((((-1.0)*cj5*sj6))+((r21*x4170))+(((-1.0)*x4167*x4171))+(((-1.0)*cj6*sj5))+(((-1.0)*r22*x4168)));
evalcond[5]=(((r11*x4170))+(((-1.0)*r12*x4168))+(((-1.0)*cj9*r21))+(((-1.0)*r10*x4171))+(((-1.0)*sj9*x4167)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x4173=((-1.0)*px);
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4173);
rxp1_1=(px*r21);
rxp1_2=(r11*x4173);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j8eval[0]=(((r21*sj9))+(((-1.0)*cj9*r20)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x4175=IKPowWithIntegerCheck((((r21*sj9))+(((-1.0)*cj9*r20))),-1);
if(!x4175.valid){
continue;
}
IkReal x4174=x4175.value;
sj8array[0]=(((cj6*sj5*x4174))+((cj5*sj6*x4174)));
if( sj8array[0] >= -1-IKFAST_SINCOS_THRESH && sj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKasin(sj8array[0]);
    cj8array[0] = IKcos(j8array[0]);
    sj8array[1] = sj8array[0];
    j8array[1] = j8array[0] > 0 ? (IKPI-j8array[0]) : (-IKPI-j8array[0]);
    cj8array[1] = -cj8array[0];
}
else if( isnan(sj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[3];
IkReal x4176=IKcos(j8);
IkReal x4177=(sj9*x4176);
IkReal x4178=((1.0)*cj9*x4176);
evalcond[0]=((-1.0)*r02*x4176);
evalcond[1]=((((-1.0)*r20*x4178))+((r21*x4177)));
evalcond[2]=(((r11*x4177))+(((-1.0)*r10*x4178)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x4179=((1.0)*cj9);
CheckValue<IkReal> x4180 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*r00*x4179))+((r11*sj4*sj9))+(((-1.0)*r10*sj4*x4179))+((cj4*r01*sj9)))),IkReal(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4180.valid){
continue;
}
CheckValue<IkReal> x4181=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4179))+(((-1.0)*r20*sj9)))),-1);
if(!x4181.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x4180.value)+(((1.5707963267949)*(x4181.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x4182=IKcos(j8);
IkReal x4183=IKsin(j8);
IkReal x4184=((1.0)*cj9);
IkReal x4185=(r20*sj9);
IkReal x4186=(cj9*r21);
IkReal x4187=((1.0)*x4182);
IkReal x4188=(sj9*x4182);
IkReal x4189=(sj9*x4183);
evalcond[0]=(((r21*x4188))+((r22*x4183))+(((-1.0)*r20*x4182*x4184)));
evalcond[1]=(((r12*x4183))+cj4+((r11*x4188))+(((-1.0)*r10*x4182*x4184)));
evalcond[2]=(((r02*x4183))+(((-1.0)*sj4))+((r01*x4188))+(((-1.0)*r00*x4182*x4184)));
evalcond[3]=((((-1.0)*cj5*sj6))+((r21*x4189))+(((-1.0)*r20*x4183*x4184))+(((-1.0)*r22*x4187))+(((-1.0)*cj6*sj5)));
evalcond[4]=((((-1.0)*r02*x4187))+((r01*x4189))+((cj4*x4186))+((cj4*x4185))+(((-1.0)*r00*x4183*x4184)));
evalcond[5]=((((-1.0)*r12*x4187))+(((-1.0)*r10*x4183*x4184))+((r11*x4189))+((sj4*x4185))+((sj4*x4186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x4190 = IKatan2WithCheck(IkReal((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x4190.valid){
continue;
}
CheckValue<IkReal> x4191=IKPowWithIntegerCheck(IKsign((((r10*sj9))+((cj9*r11)))),-1);
if(!x4191.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x4190.value)+(((1.5707963267949)*(x4191.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x4192=IKcos(j8);
IkReal x4193=IKsin(j8);
IkReal x4194=((1.0)*cj9);
IkReal x4195=(r20*sj9);
IkReal x4196=(cj9*r21);
IkReal x4197=((1.0)*x4192);
IkReal x4198=(sj9*x4192);
IkReal x4199=(sj9*x4193);
evalcond[0]=((((-1.0)*r20*x4192*x4194))+((r21*x4198))+((r22*x4193)));
evalcond[1]=(((r12*x4193))+((r11*x4198))+cj4+(((-1.0)*r10*x4192*x4194)));
evalcond[2]=((((-1.0)*sj4))+((r02*x4193))+(((-1.0)*r00*x4192*x4194))+((r01*x4198)));
evalcond[3]=((((-1.0)*cj5*sj6))+(((-1.0)*r20*x4193*x4194))+((r21*x4199))+(((-1.0)*r22*x4197))+(((-1.0)*cj6*sj5)));
evalcond[4]=((((-1.0)*r00*x4193*x4194))+(((-1.0)*r02*x4197))+((r01*x4199))+((cj4*x4196))+((cj4*x4195)));
evalcond[5]=((((-1.0)*r12*x4197))+((r11*x4199))+((sj4*x4196))+((sj4*x4195))+(((-1.0)*r10*x4193*x4194)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x4200=IKPowWithIntegerCheck(IKsign((((r00*sj9))+((cj9*r01)))),-1);
if(!x4200.valid){
continue;
}
CheckValue<IkReal> x4201 = IKatan2WithCheck(IkReal((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4201.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4200.value)))+(x4201.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x4202=IKcos(j8);
IkReal x4203=IKsin(j8);
IkReal x4204=((1.0)*cj9);
IkReal x4205=(r20*sj9);
IkReal x4206=(cj9*r21);
IkReal x4207=((1.0)*x4202);
IkReal x4208=(sj9*x4202);
IkReal x4209=(sj9*x4203);
evalcond[0]=(((r22*x4203))+((r21*x4208))+(((-1.0)*r20*x4202*x4204)));
evalcond[1]=(((r11*x4208))+(((-1.0)*r10*x4202*x4204))+cj4+((r12*x4203)));
evalcond[2]=((((-1.0)*sj4))+((r02*x4203))+((r01*x4208))+(((-1.0)*r00*x4202*x4204)));
evalcond[3]=((((-1.0)*cj5*sj6))+(((-1.0)*r22*x4207))+((r21*x4209))+(((-1.0)*cj6*sj5))+(((-1.0)*r20*x4203*x4204)));
evalcond[4]=(((cj4*x4206))+((cj4*x4205))+(((-1.0)*r02*x4207))+((r01*x4209))+(((-1.0)*r00*x4203*x4204)));
evalcond[5]=(((r11*x4209))+(((-1.0)*r12*x4207))+(((-1.0)*r10*x4203*x4204))+((sj4*x4206))+((sj4*x4205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
IkReal x4210=((1.0)*cj9);
IkReal x4211=((1.0)*sj9);
IkReal x4212=(((cj5*cj6))+(((-1.0)*sj5*sj6)));
j4eval[0]=x4212;
j4eval[1]=((IKabs(((((-1.0)*r11*x4210))+(((-1.0)*r10*x4211)))))+(IKabs(((((-1.0)*r01*x4210))+(((-1.0)*r00*x4211))))));
j4eval[2]=IKsign(x4212);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
IkReal x4213=cj9*cj9;
IkReal x4214=r21*r21;
IkReal x4215=(cj5*cj6);
IkReal x4216=(sj5*sj6);
IkReal x4217=(cj9*r20);
IkReal x4218=(r21*sj9);
IkReal x4219=(((x4213*(r20*r20)))+(r22*r22)+x4214+(((-2.0)*x4217*x4218))+(((-1.0)*x4213*x4214)));
j8eval[0]=x4219;
j8eval[1]=IKsign(x4219);
j8eval[2]=((IKabs((((x4215*x4217))+(((-1.0)*x4216*x4217))+((x4216*x4218))+(((-1.0)*x4215*x4218)))))+(IKabs(((((-1.0)*r22*x4216))+((r22*x4215))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
j4eval[0]=(((cj5*cj6))+(((-1.0)*sj5*sj6)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j5), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j6), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((2.36617629259053)*py))+(((-0.658427386453172)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.36617629259053)*py))+(((-0.658427386453172)*px))))+IKsqr(((((0.658427386453172)*py))+(((2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((2.36617629259053)*py))+(((-0.658427386453172)*px))), ((((0.658427386453172)*py))+(((2.36617629259053)*px))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x4220=IKcos(j4);
IkReal x4221=IKsin(j4);
evalcond[0]=((((-0.10915)*x4221))+(((-1.0)*px))+(((0.39225)*x4220)));
evalcond[1]=((((0.10915)*x4220))+(((-1.0)*py))+(((0.39225)*x4221)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j8eval[3];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
j5=0;
sj5=0;
cj5=1.0;
j6=1.5707963267949;
sj6=1.0;
cj6=0;
IkReal x4222=(((r00*sj9))+((cj9*r01)));
j8eval[0]=x4222;
j8eval[1]=IKsign(x4222);
j8eval[2]=((IKabs((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))))+(IKabs((cj4*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
j5=0;
sj5=0;
cj5=1.0;
j6=1.5707963267949;
sj6=1.0;
cj6=0;
IkReal x4223=(((r10*sj9))+((cj9*r11)));
j8eval[0]=x4223;
j8eval[1]=IKsign(x4223);
j8eval[2]=((IKabs((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))))+(IKabs((r22*sj4))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
j5=0;
sj5=0;
cj5=1.0;
j6=1.5707963267949;
sj6=1.0;
cj6=0;
IkReal x4224=cj9*cj9;
IkReal x4225=(r11*r21);
IkReal x4226=(r21*sj9);
IkReal x4227=(cj9*r20);
IkReal x4228=(((x4224*x4225))+((r11*sj9*x4227))+((cj9*r10*x4226))+(((-1.0)*r12*r22))+(((-1.0)*x4225))+(((-1.0)*r10*r20*x4224)));
j8eval[0]=x4228;
j8eval[1]=((IKabs((cj4*r22)))+(IKabs(((((-1.0)*cj4*x4227))+((cj4*x4226))))));
j8eval[2]=IKsign(x4228);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x4229=cj9*cj9;
IkReal x4230=(r11*r21);
IkReal x4231=(r21*sj9);
IkReal x4232=(cj9*r20);
CheckValue<IkReal> x4233 = IKatan2WithCheck(IkReal((cj4*r22)),IkReal((((cj4*x4231))+(((-1.0)*cj4*x4232)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4233.valid){
continue;
}
CheckValue<IkReal> x4234=IKPowWithIntegerCheck(IKsign((((r11*sj9*x4232))+((cj9*r10*x4231))+(((-1.0)*r12*r22))+(((-1.0)*x4230))+((x4229*x4230))+(((-1.0)*r10*r20*x4229)))),-1);
if(!x4234.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x4233.value)+(((1.5707963267949)*(x4234.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x4235=IKcos(j8);
IkReal x4236=IKsin(j8);
CheckValue<IkReal> x4246=IKPowWithIntegerCheck(cj9,-1);
if(!x4246.valid){
continue;
}
IkReal x4237=x4246.value;
IkReal x4238=sj9*sj9;
IkReal x4239=((1.0)*sj4);
IkReal x4240=(r21*sj9);
IkReal x4241=(cj9*r00);
IkReal x4242=((1.0)*x4235);
IkReal x4243=(cj9*x4236);
IkReal x4244=(sj9*x4235);
IkReal x4245=(x4236*x4237*x4238);
evalcond[0]=(((x4235*x4240))+(((-1.0)*cj9*r20*x4242))+((r22*x4236)));
evalcond[1]=(((r20*x4243))+((r22*x4235))+(((-1.0)*x4236*x4240)));
evalcond[2]=(((r12*x4236))+cj4+(((-1.0)*cj9*r10*x4242))+((r11*x4244)));
evalcond[3]=((((-1.0)*x4239))+(((-1.0)*x4241*x4242))+((r01*x4244))+((r02*x4236)));
evalcond[4]=(((r00*x4245))+((x4236*x4241))+((r02*x4235))+(((-1.0)*cj4)));
evalcond[5]=(((r12*x4235))+((r10*x4245))+((r10*x4243))+(((-1.0)*x4239)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x4247 = IKatan2WithCheck(IkReal((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x4247.valid){
continue;
}
CheckValue<IkReal> x4248=IKPowWithIntegerCheck(IKsign((((r10*sj9))+((cj9*r11)))),-1);
if(!x4248.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x4247.value)+(((1.5707963267949)*(x4248.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x4249=IKcos(j8);
IkReal x4250=IKsin(j8);
CheckValue<IkReal> x4260=IKPowWithIntegerCheck(cj9,-1);
if(!x4260.valid){
continue;
}
IkReal x4251=x4260.value;
IkReal x4252=sj9*sj9;
IkReal x4253=((1.0)*sj4);
IkReal x4254=(r21*sj9);
IkReal x4255=(cj9*r00);
IkReal x4256=((1.0)*x4249);
IkReal x4257=(cj9*x4250);
IkReal x4258=(sj9*x4249);
IkReal x4259=(x4250*x4251*x4252);
evalcond[0]=(((r22*x4250))+((x4249*x4254))+(((-1.0)*cj9*r20*x4256)));
evalcond[1]=((((-1.0)*x4250*x4254))+((r22*x4249))+((r20*x4257)));
evalcond[2]=(cj4+((r12*x4250))+((r11*x4258))+(((-1.0)*cj9*r10*x4256)));
evalcond[3]=((((-1.0)*x4255*x4256))+((r02*x4250))+((r01*x4258))+(((-1.0)*x4253)));
evalcond[4]=(((r00*x4259))+((r02*x4249))+((x4250*x4255))+(((-1.0)*cj4)));
evalcond[5]=(((r10*x4257))+((r10*x4259))+(((-1.0)*x4253))+((r12*x4249)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x4261=IKPowWithIntegerCheck(IKsign((((r00*sj9))+((cj9*r01)))),-1);
if(!x4261.valid){
continue;
}
CheckValue<IkReal> x4262 = IKatan2WithCheck(IkReal((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4262.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4261.value)))+(x4262.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x4263=IKcos(j8);
IkReal x4264=IKsin(j8);
CheckValue<IkReal> x4274=IKPowWithIntegerCheck(cj9,-1);
if(!x4274.valid){
continue;
}
IkReal x4265=x4274.value;
IkReal x4266=sj9*sj9;
IkReal x4267=((1.0)*sj4);
IkReal x4268=(r21*sj9);
IkReal x4269=(cj9*r00);
IkReal x4270=((1.0)*x4263);
IkReal x4271=(cj9*x4264);
IkReal x4272=(sj9*x4263);
IkReal x4273=(x4264*x4265*x4266);
evalcond[0]=(((x4263*x4268))+(((-1.0)*cj9*r20*x4270))+((r22*x4264)));
evalcond[1]=((((-1.0)*x4264*x4268))+((r20*x4271))+((r22*x4263)));
evalcond[2]=(cj4+((r11*x4272))+((r12*x4264))+(((-1.0)*cj9*r10*x4270)));
evalcond[3]=(((r02*x4264))+(((-1.0)*x4269*x4270))+(((-1.0)*x4267))+((r01*x4272)));
evalcond[4]=(((r00*x4273))+((r02*x4263))+((x4264*x4269))+(((-1.0)*cj4)));
evalcond[5]=(((r12*x4263))+(((-1.0)*x4267))+((r10*x4273))+((r10*x4271)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j5), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j6), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((-0.658427386453172)*px))+(((-2.36617629259053)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((-2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))))+IKsqr(((((0.658427386453172)*py))+(((-2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))), ((((0.658427386453172)*py))+(((-2.36617629259053)*px))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x4275=IKcos(j4);
IkReal x4276=IKsin(j4);
evalcond[0]=((((-0.39225)*x4275))+(((-1.0)*px))+(((-0.10915)*x4276)));
evalcond[1]=((((0.10915)*x4275))+(((-0.39225)*x4276))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j8eval[3];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
j5=0;
sj5=0;
cj5=1.0;
j6=-1.5707963267949;
sj6=-1.0;
cj6=0;
IkReal x4277=(((r00*sj9))+((cj9*r01)));
j8eval[0]=x4277;
j8eval[1]=IKsign(x4277);
j8eval[2]=((IKabs((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))))+(IKabs((cj4*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
j5=0;
sj5=0;
cj5=1.0;
j6=-1.5707963267949;
sj6=-1.0;
cj6=0;
IkReal x4278=(((r10*sj9))+((cj9*r11)));
j8eval[0]=x4278;
j8eval[1]=IKsign(x4278);
j8eval[2]=((IKabs((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))))+(IKabs((r22*sj4))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
j5=0;
sj5=0;
cj5=1.0;
j6=-1.5707963267949;
sj6=-1.0;
cj6=0;
IkReal x4279=cj9*cj9;
IkReal x4280=(r11*r21);
IkReal x4281=(r21*sj9);
IkReal x4282=(cj9*r20);
IkReal x4283=(((x4279*x4280))+(((-1.0)*r10*r20*x4279))+(((-1.0)*r12*r22))+(((-1.0)*x4280))+((cj9*r10*x4281))+((r11*sj9*x4282)));
j8eval[0]=x4283;
j8eval[1]=((IKabs((((cj4*x4281))+(((-1.0)*cj4*x4282)))))+(IKabs((cj4*r22))));
j8eval[2]=IKsign(x4283);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x4284=cj9*cj9;
IkReal x4285=(r11*r21);
IkReal x4286=(r21*sj9);
IkReal x4287=(cj9*r20);
CheckValue<IkReal> x4288 = IKatan2WithCheck(IkReal((cj4*r22)),IkReal((((cj4*x4286))+(((-1.0)*cj4*x4287)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4288.valid){
continue;
}
CheckValue<IkReal> x4289=IKPowWithIntegerCheck(IKsign((((x4284*x4285))+(((-1.0)*r12*r22))+(((-1.0)*r10*r20*x4284))+(((-1.0)*x4285))+((cj9*r10*x4286))+((r11*sj9*x4287)))),-1);
if(!x4289.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x4288.value)+(((1.5707963267949)*(x4289.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x4290=IKcos(j8);
IkReal x4291=IKsin(j8);
CheckValue<IkReal> x4300=IKPowWithIntegerCheck(cj9,-1);
if(!x4300.valid){
continue;
}
IkReal x4292=x4300.value;
IkReal x4293=sj9*sj9;
IkReal x4294=(r21*sj9);
IkReal x4295=(cj9*r00);
IkReal x4296=((1.0)*x4290);
IkReal x4297=(cj9*x4291);
IkReal x4298=(sj9*x4290);
IkReal x4299=(x4291*x4292*x4293);
evalcond[0]=((((-1.0)*cj9*r20*x4296))+((x4290*x4294))+((r22*x4291)));
evalcond[1]=(((r20*x4297))+(((-1.0)*x4291*x4294))+((r22*x4290)));
evalcond[2]=(cj4+(((-1.0)*cj9*r10*x4296))+((r12*x4291))+((r11*x4298)));
evalcond[3]=((((-1.0)*sj4))+((r01*x4298))+(((-1.0)*x4295*x4296))+((r02*x4291)));
evalcond[4]=(((r00*x4299))+cj4+((x4291*x4295))+((r02*x4290)));
evalcond[5]=(((r10*x4297))+((r10*x4299))+sj4+((r12*x4290)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x4301 = IKatan2WithCheck(IkReal((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x4301.valid){
continue;
}
CheckValue<IkReal> x4302=IKPowWithIntegerCheck(IKsign((((r10*sj9))+((cj9*r11)))),-1);
if(!x4302.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x4301.value)+(((1.5707963267949)*(x4302.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x4303=IKcos(j8);
IkReal x4304=IKsin(j8);
CheckValue<IkReal> x4313=IKPowWithIntegerCheck(cj9,-1);
if(!x4313.valid){
continue;
}
IkReal x4305=x4313.value;
IkReal x4306=sj9*sj9;
IkReal x4307=(r21*sj9);
IkReal x4308=(cj9*r00);
IkReal x4309=((1.0)*x4303);
IkReal x4310=(cj9*x4304);
IkReal x4311=(sj9*x4303);
IkReal x4312=(x4304*x4305*x4306);
evalcond[0]=(((r22*x4304))+(((-1.0)*cj9*r20*x4309))+((x4303*x4307)));
evalcond[1]=((((-1.0)*x4304*x4307))+((r22*x4303))+((r20*x4310)));
evalcond[2]=(((r12*x4304))+cj4+((r11*x4311))+(((-1.0)*cj9*r10*x4309)));
evalcond[3]=((((-1.0)*sj4))+((r02*x4304))+((r01*x4311))+(((-1.0)*x4308*x4309)));
evalcond[4]=(cj4+((r02*x4303))+((r00*x4312))+((x4304*x4308)));
evalcond[5]=(((r12*x4303))+sj4+((r10*x4312))+((r10*x4310)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x4314=IKPowWithIntegerCheck(IKsign((((r00*sj9))+((cj9*r01)))),-1);
if(!x4314.valid){
continue;
}
CheckValue<IkReal> x4315 = IKatan2WithCheck(IkReal((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4315.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4314.value)))+(x4315.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x4316=IKcos(j8);
IkReal x4317=IKsin(j8);
CheckValue<IkReal> x4326=IKPowWithIntegerCheck(cj9,-1);
if(!x4326.valid){
continue;
}
IkReal x4318=x4326.value;
IkReal x4319=sj9*sj9;
IkReal x4320=(r21*sj9);
IkReal x4321=(cj9*r00);
IkReal x4322=((1.0)*x4316);
IkReal x4323=(cj9*x4317);
IkReal x4324=(sj9*x4316);
IkReal x4325=(x4317*x4318*x4319);
evalcond[0]=(((x4316*x4320))+((r22*x4317))+(((-1.0)*cj9*r20*x4322)));
evalcond[1]=(((r20*x4323))+(((-1.0)*x4317*x4320))+((r22*x4316)));
evalcond[2]=(cj4+((r12*x4317))+(((-1.0)*cj9*r10*x4322))+((r11*x4324)));
evalcond[3]=((((-1.0)*sj4))+(((-1.0)*x4321*x4322))+((r02*x4317))+((r01*x4324)));
evalcond[4]=(((r00*x4325))+cj4+((x4317*x4321))+((r02*x4316)));
evalcond[5]=(sj4+((r12*x4316))+((r10*x4323))+((r10*x4325)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j5), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j6), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((-0.160559264620033)*px))+(((1.20217186450501)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.160559264620033)*py))+(((1.20217186450501)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.160559264620033)*px))+(((1.20217186450501)*py))))+IKsqr(((((0.160559264620033)*py))+(((1.20217186450501)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-0.160559264620033)*px))+(((1.20217186450501)*py))), ((((0.160559264620033)*py))+(((1.20217186450501)*px))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x4327=IKcos(j4);
IkReal x4328=IKsin(j4);
evalcond[0]=((((0.81725)*x4327))+(((-1.0)*px))+(((-0.10915)*x4328)));
evalcond[1]=((((0.81725)*x4328))+(((0.10915)*x4327))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j8eval[3];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j6=0;
sj6=0;
cj6=1.0;
IkReal x4329=(((r00*sj9))+((cj9*r01)));
j8eval[0]=x4329;
j8eval[1]=IKsign(x4329);
j8eval[2]=((IKabs((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))))+(IKabs((cj4*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j6=0;
sj6=0;
cj6=1.0;
IkReal x4330=(((r10*sj9))+((cj9*r11)));
j8eval[0]=x4330;
j8eval[1]=IKsign(x4330);
j8eval[2]=((IKabs((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))))+(IKabs((r22*sj4))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j6=0;
sj6=0;
cj6=1.0;
IkReal x4331=cj9*cj9;
IkReal x4332=(r11*r21);
IkReal x4333=(r21*sj9);
IkReal x4334=(cj9*r20);
IkReal x4335=(((r11*sj9*x4334))+(((-1.0)*r12*r22))+(((-1.0)*x4332))+((cj9*r10*x4333))+((x4331*x4332))+(((-1.0)*r10*r20*x4331)));
j8eval[0]=x4335;
j8eval[1]=((IKabs((((cj4*x4333))+(((-1.0)*cj4*x4334)))))+(IKabs((cj4*r22))));
j8eval[2]=IKsign(x4335);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x4336=cj9*cj9;
IkReal x4337=(r11*r21);
IkReal x4338=(r21*sj9);
IkReal x4339=(cj9*r20);
CheckValue<IkReal> x4340=IKPowWithIntegerCheck(IKsign((((r11*sj9*x4339))+(((-1.0)*r12*r22))+(((-1.0)*x4337))+((cj9*r10*x4338))+(((-1.0)*r10*r20*x4336))+((x4336*x4337)))),-1);
if(!x4340.valid){
continue;
}
CheckValue<IkReal> x4341 = IKatan2WithCheck(IkReal((cj4*r22)),IkReal((((cj4*x4338))+(((-1.0)*cj4*x4339)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4341.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4340.value)))+(x4341.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x4342=IKcos(j8);
IkReal x4343=IKsin(j8);
CheckValue<IkReal> x4353=IKPowWithIntegerCheck(cj9,-1);
if(!x4353.valid){
continue;
}
IkReal x4344=x4353.value;
IkReal x4345=sj9*sj9;
IkReal x4346=((1.0)*sj4);
IkReal x4347=(r21*sj9);
IkReal x4348=(cj9*r00);
IkReal x4349=((1.0)*x4342);
IkReal x4350=(cj9*x4343);
IkReal x4351=(sj9*x4342);
IkReal x4352=(x4343*x4344*x4345);
evalcond[0]=((((-1.0)*cj9*r20*x4349))+((x4342*x4347))+((r22*x4343)));
evalcond[1]=(((r20*x4350))+((r22*x4342))+(((-1.0)*x4343*x4347)));
evalcond[2]=(cj4+((r12*x4343))+(((-1.0)*cj9*r10*x4349))+((r11*x4351)));
evalcond[3]=((((-1.0)*x4346))+((r02*x4343))+(((-1.0)*x4348*x4349))+((r01*x4351)));
evalcond[4]=(((x4343*x4348))+((r02*x4342))+(((-1.0)*cj4))+((r00*x4352)));
evalcond[5]=((((-1.0)*x4346))+((r12*x4342))+((r10*x4352))+((r10*x4350)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x4354 = IKatan2WithCheck(IkReal((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x4354.valid){
continue;
}
CheckValue<IkReal> x4355=IKPowWithIntegerCheck(IKsign((((r10*sj9))+((cj9*r11)))),-1);
if(!x4355.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x4354.value)+(((1.5707963267949)*(x4355.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x4356=IKcos(j8);
IkReal x4357=IKsin(j8);
CheckValue<IkReal> x4367=IKPowWithIntegerCheck(cj9,-1);
if(!x4367.valid){
continue;
}
IkReal x4358=x4367.value;
IkReal x4359=sj9*sj9;
IkReal x4360=((1.0)*sj4);
IkReal x4361=(r21*sj9);
IkReal x4362=(cj9*r00);
IkReal x4363=((1.0)*x4356);
IkReal x4364=(cj9*x4357);
IkReal x4365=(sj9*x4356);
IkReal x4366=(x4357*x4358*x4359);
evalcond[0]=(((r22*x4357))+((x4356*x4361))+(((-1.0)*cj9*r20*x4363)));
evalcond[1]=((((-1.0)*x4357*x4361))+((r20*x4364))+((r22*x4356)));
evalcond[2]=((((-1.0)*cj9*r10*x4363))+cj4+((r11*x4365))+((r12*x4357)));
evalcond[3]=((((-1.0)*x4362*x4363))+(((-1.0)*x4360))+((r01*x4365))+((r02*x4357)));
evalcond[4]=(((x4357*x4362))+((r00*x4366))+((r02*x4356))+(((-1.0)*cj4)));
evalcond[5]=(((r10*x4364))+((r10*x4366))+(((-1.0)*x4360))+((r12*x4356)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x4368=IKPowWithIntegerCheck(IKsign((((r00*sj9))+((cj9*r01)))),-1);
if(!x4368.valid){
continue;
}
CheckValue<IkReal> x4369 = IKatan2WithCheck(IkReal((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4369.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4368.value)))+(x4369.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x4370=IKcos(j8);
IkReal x4371=IKsin(j8);
CheckValue<IkReal> x4381=IKPowWithIntegerCheck(cj9,-1);
if(!x4381.valid){
continue;
}
IkReal x4372=x4381.value;
IkReal x4373=sj9*sj9;
IkReal x4374=((1.0)*sj4);
IkReal x4375=(r21*sj9);
IkReal x4376=(cj9*r00);
IkReal x4377=((1.0)*x4370);
IkReal x4378=(cj9*x4371);
IkReal x4379=(sj9*x4370);
IkReal x4380=(x4371*x4372*x4373);
evalcond[0]=(((x4370*x4375))+((r22*x4371))+(((-1.0)*cj9*r20*x4377)));
evalcond[1]=(((r22*x4370))+((r20*x4378))+(((-1.0)*x4371*x4375)));
evalcond[2]=(cj4+((r12*x4371))+((r11*x4379))+(((-1.0)*cj9*r10*x4377)));
evalcond[3]=(((r02*x4371))+((r01*x4379))+(((-1.0)*x4376*x4377))+(((-1.0)*x4374)));
evalcond[4]=(((x4371*x4376))+((r00*x4380))+((r02*x4370))+(((-1.0)*cj4)));
evalcond[5]=(((r12*x4370))+((r10*x4378))+(((-1.0)*x4374))+((r10*x4380)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j5), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j6, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((2.52189136462044)*py))+(((-8.4050211434602)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((8.4050211434602)*py))+(((2.52189136462044)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.52189136462044)*py))+(((-8.4050211434602)*px))))+IKsqr(((((8.4050211434602)*py))+(((2.52189136462044)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((2.52189136462044)*py))+(((-8.4050211434602)*px))), ((((8.4050211434602)*py))+(((2.52189136462044)*px))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x4382=IKcos(j4);
IkReal x4383=IKsin(j4);
evalcond[0]=((((0.03275)*x4382))+(((-1.0)*px))+(((-0.10915)*x4383)));
evalcond[1]=((((0.10915)*x4382))+(((0.03275)*x4383))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j8eval[3];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j6=3.14159265358979;
sj6=0;
cj6=-1.0;
IkReal x4384=(((r00*sj9))+((cj9*r01)));
j8eval[0]=x4384;
j8eval[1]=IKsign(x4384);
j8eval[2]=((IKabs((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))))+(IKabs((cj4*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j6=3.14159265358979;
sj6=0;
cj6=-1.0;
IkReal x4385=(((r10*sj9))+((cj9*r11)));
j8eval[0]=x4385;
j8eval[1]=IKsign(x4385);
j8eval[2]=((IKabs((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))))+(IKabs((r22*sj4))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j6=3.14159265358979;
sj6=0;
cj6=-1.0;
IkReal x4386=cj9*cj9;
IkReal x4387=(r11*r21);
IkReal x4388=(r21*sj9);
IkReal x4389=(cj9*r20);
IkReal x4390=(((r11*sj9*x4389))+(((-1.0)*x4387))+((cj9*r10*x4388))+(((-1.0)*r12*r22))+(((-1.0)*r10*r20*x4386))+((x4386*x4387)));
j8eval[0]=x4390;
j8eval[1]=((IKabs((((cj4*x4388))+(((-1.0)*cj4*x4389)))))+(IKabs((cj4*r22))));
j8eval[2]=IKsign(x4390);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x4391=cj9*cj9;
IkReal x4392=(r11*r21);
IkReal x4393=(r21*sj9);
IkReal x4394=(cj9*r20);
CheckValue<IkReal> x4395 = IKatan2WithCheck(IkReal((cj4*r22)),IkReal((((cj4*x4393))+(((-1.0)*cj4*x4394)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4395.valid){
continue;
}
CheckValue<IkReal> x4396=IKPowWithIntegerCheck(IKsign((((x4391*x4392))+((r11*sj9*x4394))+(((-1.0)*x4392))+((cj9*r10*x4393))+(((-1.0)*r12*r22))+(((-1.0)*r10*r20*x4391)))),-1);
if(!x4396.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x4395.value)+(((1.5707963267949)*(x4396.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x4397=IKcos(j8);
IkReal x4398=IKsin(j8);
CheckValue<IkReal> x4407=IKPowWithIntegerCheck(cj9,-1);
if(!x4407.valid){
continue;
}
IkReal x4399=x4407.value;
IkReal x4400=sj9*sj9;
IkReal x4401=(r21*sj9);
IkReal x4402=(cj9*r00);
IkReal x4403=((1.0)*x4397);
IkReal x4404=(cj9*x4398);
IkReal x4405=(sj9*x4397);
IkReal x4406=(x4398*x4399*x4400);
evalcond[0]=((((-1.0)*cj9*r20*x4403))+((r22*x4398))+((x4397*x4401)));
evalcond[1]=((((-1.0)*x4398*x4401))+((r22*x4397))+((r20*x4404)));
evalcond[2]=(((r11*x4405))+cj4+(((-1.0)*cj9*r10*x4403))+((r12*x4398)));
evalcond[3]=((((-1.0)*sj4))+((r02*x4398))+((r01*x4405))+(((-1.0)*x4402*x4403)));
evalcond[4]=(cj4+((r00*x4406))+((r02*x4397))+((x4398*x4402)));
evalcond[5]=(sj4+((r10*x4404))+((r10*x4406))+((r12*x4397)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x4408 = IKatan2WithCheck(IkReal((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x4408.valid){
continue;
}
CheckValue<IkReal> x4409=IKPowWithIntegerCheck(IKsign((((r10*sj9))+((cj9*r11)))),-1);
if(!x4409.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x4408.value)+(((1.5707963267949)*(x4409.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x4410=IKcos(j8);
IkReal x4411=IKsin(j8);
CheckValue<IkReal> x4420=IKPowWithIntegerCheck(cj9,-1);
if(!x4420.valid){
continue;
}
IkReal x4412=x4420.value;
IkReal x4413=sj9*sj9;
IkReal x4414=(r21*sj9);
IkReal x4415=(cj9*r00);
IkReal x4416=((1.0)*x4410);
IkReal x4417=(cj9*x4411);
IkReal x4418=(sj9*x4410);
IkReal x4419=(x4411*x4412*x4413);
evalcond[0]=((((-1.0)*cj9*r20*x4416))+((r22*x4411))+((x4410*x4414)));
evalcond[1]=(((r22*x4410))+((r20*x4417))+(((-1.0)*x4411*x4414)));
evalcond[2]=(((r11*x4418))+cj4+((r12*x4411))+(((-1.0)*cj9*r10*x4416)));
evalcond[3]=((((-1.0)*sj4))+((r01*x4418))+(((-1.0)*x4415*x4416))+((r02*x4411)));
evalcond[4]=(cj4+((r00*x4419))+((r02*x4410))+((x4411*x4415)));
evalcond[5]=(sj4+((r12*x4410))+((r10*x4417))+((r10*x4419)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x4421=IKPowWithIntegerCheck(IKsign((((r00*sj9))+((cj9*r01)))),-1);
if(!x4421.valid){
continue;
}
CheckValue<IkReal> x4422 = IKatan2WithCheck(IkReal((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4422.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4421.value)))+(x4422.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x4423=IKcos(j8);
IkReal x4424=IKsin(j8);
CheckValue<IkReal> x4433=IKPowWithIntegerCheck(cj9,-1);
if(!x4433.valid){
continue;
}
IkReal x4425=x4433.value;
IkReal x4426=sj9*sj9;
IkReal x4427=(r21*sj9);
IkReal x4428=(cj9*r00);
IkReal x4429=((1.0)*x4423);
IkReal x4430=(cj9*x4424);
IkReal x4431=(sj9*x4423);
IkReal x4432=(x4424*x4425*x4426);
evalcond[0]=(((x4423*x4427))+((r22*x4424))+(((-1.0)*cj9*r20*x4429)));
evalcond[1]=(((r20*x4430))+((r22*x4423))+(((-1.0)*x4424*x4427)));
evalcond[2]=(cj4+((r11*x4431))+((r12*x4424))+(((-1.0)*cj9*r10*x4429)));
evalcond[3]=((((-1.0)*sj4))+((r02*x4424))+(((-1.0)*x4428*x4429))+((r01*x4431)));
evalcond[4]=(((r00*x4432))+cj4+((r02*x4423))+((x4424*x4428)));
evalcond[5]=(sj4+((r10*x4430))+((r10*x4432))+((r12*x4423)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j5, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j6), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((-0.658427386453172)*px))+(((-2.36617629259053)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((-2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))))+IKsqr(((((0.658427386453172)*py))+(((-2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))), ((((0.658427386453172)*py))+(((-2.36617629259053)*px))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x4434=IKcos(j4);
IkReal x4435=IKsin(j4);
evalcond[0]=((((-0.10915)*x4435))+(((-1.0)*px))+(((-0.39225)*x4434)));
evalcond[1]=((((0.10915)*x4434))+(((-1.0)*py))+(((-0.39225)*x4435)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j8eval[3];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
j5=3.14159265358979;
sj5=0;
cj5=-1.0;
j6=1.5707963267949;
sj6=1.0;
cj6=0;
IkReal x4436=(((r00*sj9))+((cj9*r01)));
j8eval[0]=x4436;
j8eval[1]=IKsign(x4436);
j8eval[2]=((IKabs((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))))+(IKabs((cj4*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
j5=3.14159265358979;
sj5=0;
cj5=-1.0;
j6=1.5707963267949;
sj6=1.0;
cj6=0;
IkReal x4437=(((r10*sj9))+((cj9*r11)));
j8eval[0]=x4437;
j8eval[1]=IKsign(x4437);
j8eval[2]=((IKabs((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))))+(IKabs((r22*sj4))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
j5=3.14159265358979;
sj5=0;
cj5=-1.0;
j6=1.5707963267949;
sj6=1.0;
cj6=0;
IkReal x4438=cj9*cj9;
IkReal x4439=(r11*r21);
IkReal x4440=(r21*sj9);
IkReal x4441=(cj9*r20);
IkReal x4442=((((-1.0)*r12*r22))+(((-1.0)*x4439))+((r11*sj9*x4441))+((x4438*x4439))+((cj9*r10*x4440))+(((-1.0)*r10*r20*x4438)));
j8eval[0]=x4442;
j8eval[1]=((IKabs(((((-1.0)*cj4*x4441))+((cj4*x4440)))))+(IKabs((cj4*r22))));
j8eval[2]=IKsign(x4442);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x4443=cj9*cj9;
IkReal x4444=(r11*r21);
IkReal x4445=(r21*sj9);
IkReal x4446=(cj9*r20);
CheckValue<IkReal> x4447=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+((r11*sj9*x4446))+(((-1.0)*x4444))+(((-1.0)*r10*r20*x4443))+((x4443*x4444))+((cj9*r10*x4445)))),-1);
if(!x4447.valid){
continue;
}
CheckValue<IkReal> x4448 = IKatan2WithCheck(IkReal((cj4*r22)),IkReal(((((-1.0)*cj4*x4446))+((cj4*x4445)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4448.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4447.value)))+(x4448.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x4449=IKcos(j8);
IkReal x4450=IKsin(j8);
CheckValue<IkReal> x4459=IKPowWithIntegerCheck(cj9,-1);
if(!x4459.valid){
continue;
}
IkReal x4451=x4459.value;
IkReal x4452=sj9*sj9;
IkReal x4453=(r21*sj9);
IkReal x4454=(cj9*r00);
IkReal x4455=((1.0)*x4449);
IkReal x4456=(cj9*x4450);
IkReal x4457=(sj9*x4449);
IkReal x4458=(x4450*x4451*x4452);
evalcond[0]=((((-1.0)*cj9*r20*x4455))+((x4449*x4453))+((r22*x4450)));
evalcond[1]=((((-1.0)*x4450*x4453))+((r20*x4456))+((r22*x4449)));
evalcond[2]=(cj4+(((-1.0)*cj9*r10*x4455))+((r11*x4457))+((r12*x4450)));
evalcond[3]=((((-1.0)*sj4))+((r01*x4457))+(((-1.0)*x4454*x4455))+((r02*x4450)));
evalcond[4]=(cj4+((x4450*x4454))+((r00*x4458))+((r02*x4449)));
evalcond[5]=(sj4+((r10*x4458))+((r10*x4456))+((r12*x4449)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x4460 = IKatan2WithCheck(IkReal((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x4460.valid){
continue;
}
CheckValue<IkReal> x4461=IKPowWithIntegerCheck(IKsign((((r10*sj9))+((cj9*r11)))),-1);
if(!x4461.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x4460.value)+(((1.5707963267949)*(x4461.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x4462=IKcos(j8);
IkReal x4463=IKsin(j8);
CheckValue<IkReal> x4472=IKPowWithIntegerCheck(cj9,-1);
if(!x4472.valid){
continue;
}
IkReal x4464=x4472.value;
IkReal x4465=sj9*sj9;
IkReal x4466=(r21*sj9);
IkReal x4467=(cj9*r00);
IkReal x4468=((1.0)*x4462);
IkReal x4469=(cj9*x4463);
IkReal x4470=(sj9*x4462);
IkReal x4471=(x4463*x4464*x4465);
evalcond[0]=(((r22*x4463))+(((-1.0)*cj9*r20*x4468))+((x4462*x4466)));
evalcond[1]=(((r22*x4462))+((r20*x4469))+(((-1.0)*x4463*x4466)));
evalcond[2]=((((-1.0)*cj9*r10*x4468))+cj4+((r12*x4463))+((r11*x4470)));
evalcond[3]=((((-1.0)*sj4))+((r01*x4470))+(((-1.0)*x4467*x4468))+((r02*x4463)));
evalcond[4]=(cj4+((x4463*x4467))+((r00*x4471))+((r02*x4462)));
evalcond[5]=(sj4+((r10*x4471))+((r12*x4462))+((r10*x4469)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x4473=IKPowWithIntegerCheck(IKsign((((r00*sj9))+((cj9*r01)))),-1);
if(!x4473.valid){
continue;
}
CheckValue<IkReal> x4474 = IKatan2WithCheck(IkReal((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4474.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4473.value)))+(x4474.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x4475=IKcos(j8);
IkReal x4476=IKsin(j8);
CheckValue<IkReal> x4485=IKPowWithIntegerCheck(cj9,-1);
if(!x4485.valid){
continue;
}
IkReal x4477=x4485.value;
IkReal x4478=sj9*sj9;
IkReal x4479=(r21*sj9);
IkReal x4480=(cj9*r00);
IkReal x4481=((1.0)*x4475);
IkReal x4482=(cj9*x4476);
IkReal x4483=(sj9*x4475);
IkReal x4484=(x4476*x4477*x4478);
evalcond[0]=((((-1.0)*cj9*r20*x4481))+((r22*x4476))+((x4475*x4479)));
evalcond[1]=(((r20*x4482))+(((-1.0)*x4476*x4479))+((r22*x4475)));
evalcond[2]=((((-1.0)*cj9*r10*x4481))+((r11*x4483))+cj4+((r12*x4476)));
evalcond[3]=((((-1.0)*sj4))+(((-1.0)*x4480*x4481))+((r02*x4476))+((r01*x4483)));
evalcond[4]=(cj4+((x4476*x4480))+((r02*x4475))+((r00*x4484)));
evalcond[5]=(sj4+((r10*x4482))+((r10*x4484))+((r12*x4475)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j5, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j6), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((2.36617629259053)*py))+(((-0.658427386453172)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.36617629259053)*py))+(((-0.658427386453172)*px))))+IKsqr(((((0.658427386453172)*py))+(((2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((2.36617629259053)*py))+(((-0.658427386453172)*px))), ((((0.658427386453172)*py))+(((2.36617629259053)*px))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x4486=IKcos(j4);
IkReal x4487=IKsin(j4);
evalcond[0]=((((-1.0)*px))+(((0.39225)*x4486))+(((-0.10915)*x4487)));
evalcond[1]=((((0.10915)*x4486))+(((-1.0)*py))+(((0.39225)*x4487)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j8eval[3];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
j5=3.14159265358979;
sj5=0;
cj5=-1.0;
j6=-1.5707963267949;
sj6=-1.0;
cj6=0;
IkReal x4488=(((r00*sj9))+((cj9*r01)));
j8eval[0]=x4488;
j8eval[1]=IKsign(x4488);
j8eval[2]=((IKabs((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))))+(IKabs((cj4*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
j5=3.14159265358979;
sj5=0;
cj5=-1.0;
j6=-1.5707963267949;
sj6=-1.0;
cj6=0;
IkReal x4489=(((r10*sj9))+((cj9*r11)));
j8eval[0]=x4489;
j8eval[1]=IKsign(x4489);
j8eval[2]=((IKabs((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))))+(IKabs((r22*sj4))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
j5=3.14159265358979;
sj5=0;
cj5=-1.0;
j6=-1.5707963267949;
sj6=-1.0;
cj6=0;
IkReal x4490=cj9*cj9;
IkReal x4491=(r11*r21);
IkReal x4492=(r21*sj9);
IkReal x4493=(cj9*r20);
IkReal x4494=((((-1.0)*x4491))+(((-1.0)*r10*r20*x4490))+(((-1.0)*r12*r22))+((x4490*x4491))+((cj9*r10*x4492))+((r11*sj9*x4493)));
j8eval[0]=x4494;
j8eval[1]=((IKabs((((cj4*x4492))+(((-1.0)*cj4*x4493)))))+(IKabs((cj4*r22))));
j8eval[2]=IKsign(x4494);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x4495=cj9*cj9;
IkReal x4496=(r11*r21);
IkReal x4497=(r21*sj9);
IkReal x4498=(cj9*r20);
CheckValue<IkReal> x4499 = IKatan2WithCheck(IkReal((cj4*r22)),IkReal((((cj4*x4497))+(((-1.0)*cj4*x4498)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4499.valid){
continue;
}
CheckValue<IkReal> x4500=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4496))+(((-1.0)*r10*r20*x4495))+(((-1.0)*r12*r22))+((cj9*r10*x4497))+((r11*sj9*x4498))+((x4495*x4496)))),-1);
if(!x4500.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x4499.value)+(((1.5707963267949)*(x4500.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x4501=IKcos(j8);
IkReal x4502=IKsin(j8);
CheckValue<IkReal> x4512=IKPowWithIntegerCheck(cj9,-1);
if(!x4512.valid){
continue;
}
IkReal x4503=x4512.value;
IkReal x4504=sj9*sj9;
IkReal x4505=((1.0)*sj4);
IkReal x4506=(r21*sj9);
IkReal x4507=(cj9*r00);
IkReal x4508=((1.0)*x4501);
IkReal x4509=(cj9*x4502);
IkReal x4510=(sj9*x4501);
IkReal x4511=(x4502*x4503*x4504);
evalcond[0]=((((-1.0)*cj9*r20*x4508))+((r22*x4502))+((x4501*x4506)));
evalcond[1]=(((r22*x4501))+((r20*x4509))+(((-1.0)*x4502*x4506)));
evalcond[2]=((((-1.0)*cj9*r10*x4508))+cj4+((r12*x4502))+((r11*x4510)));
evalcond[3]=((((-1.0)*x4505))+(((-1.0)*x4507*x4508))+((r02*x4502))+((r01*x4510)));
evalcond[4]=(((r02*x4501))+((x4502*x4507))+((r00*x4511))+(((-1.0)*cj4)));
evalcond[5]=(((r10*x4511))+((r10*x4509))+(((-1.0)*x4505))+((r12*x4501)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x4513 = IKatan2WithCheck(IkReal((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x4513.valid){
continue;
}
CheckValue<IkReal> x4514=IKPowWithIntegerCheck(IKsign((((r10*sj9))+((cj9*r11)))),-1);
if(!x4514.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x4513.value)+(((1.5707963267949)*(x4514.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x4515=IKcos(j8);
IkReal x4516=IKsin(j8);
CheckValue<IkReal> x4526=IKPowWithIntegerCheck(cj9,-1);
if(!x4526.valid){
continue;
}
IkReal x4517=x4526.value;
IkReal x4518=sj9*sj9;
IkReal x4519=((1.0)*sj4);
IkReal x4520=(r21*sj9);
IkReal x4521=(cj9*r00);
IkReal x4522=((1.0)*x4515);
IkReal x4523=(cj9*x4516);
IkReal x4524=(sj9*x4515);
IkReal x4525=(x4516*x4517*x4518);
evalcond[0]=((((-1.0)*cj9*r20*x4522))+((x4515*x4520))+((r22*x4516)));
evalcond[1]=(((r20*x4523))+((r22*x4515))+(((-1.0)*x4516*x4520)));
evalcond[2]=(((r11*x4524))+cj4+(((-1.0)*cj9*r10*x4522))+((r12*x4516)));
evalcond[3]=(((r02*x4516))+((r01*x4524))+(((-1.0)*x4521*x4522))+(((-1.0)*x4519)));
evalcond[4]=(((r02*x4515))+((r00*x4525))+((x4516*x4521))+(((-1.0)*cj4)));
evalcond[5]=(((r10*x4523))+((r10*x4525))+((r12*x4515))+(((-1.0)*x4519)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x4527=IKPowWithIntegerCheck(IKsign((((r00*sj9))+((cj9*r01)))),-1);
if(!x4527.valid){
continue;
}
CheckValue<IkReal> x4528 = IKatan2WithCheck(IkReal((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4528.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4527.value)))+(x4528.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x4529=IKcos(j8);
IkReal x4530=IKsin(j8);
CheckValue<IkReal> x4540=IKPowWithIntegerCheck(cj9,-1);
if(!x4540.valid){
continue;
}
IkReal x4531=x4540.value;
IkReal x4532=sj9*sj9;
IkReal x4533=((1.0)*sj4);
IkReal x4534=(r21*sj9);
IkReal x4535=(cj9*r00);
IkReal x4536=((1.0)*x4529);
IkReal x4537=(cj9*x4530);
IkReal x4538=(sj9*x4529);
IkReal x4539=(x4530*x4531*x4532);
evalcond[0]=((((-1.0)*cj9*r20*x4536))+((x4529*x4534))+((r22*x4530)));
evalcond[1]=(((r22*x4529))+(((-1.0)*x4530*x4534))+((r20*x4537)));
evalcond[2]=(cj4+((r12*x4530))+(((-1.0)*cj9*r10*x4536))+((r11*x4538)));
evalcond[3]=(((r01*x4538))+(((-1.0)*x4533))+((r02*x4530))+(((-1.0)*x4535*x4536)));
evalcond[4]=(((r00*x4539))+((x4530*x4535))+((r02*x4529))+(((-1.0)*cj4)));
evalcond[5]=(((r12*x4529))+(((-1.0)*x4533))+((r10*x4537))+((r10*x4539)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j5), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j6), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((-0.160559264620033)*px))+(((-1.20217186450501)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.160559264620033)*py))+(((-1.20217186450501)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.160559264620033)*px))+(((-1.20217186450501)*py))))+IKsqr(((((0.160559264620033)*py))+(((-1.20217186450501)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-0.160559264620033)*px))+(((-1.20217186450501)*py))), ((((0.160559264620033)*py))+(((-1.20217186450501)*px))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x4541=IKcos(j4);
IkReal x4542=IKsin(j4);
evalcond[0]=((((-0.10915)*x4542))+(((-0.81725)*x4541))+(((-1.0)*px)));
evalcond[1]=((((0.10915)*x4541))+(((-0.81725)*x4542))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j8eval[3];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j6=0;
sj6=0;
cj6=1.0;
IkReal x4543=(((r00*sj9))+((cj9*r01)));
j8eval[0]=x4543;
j8eval[1]=IKsign(x4543);
j8eval[2]=((IKabs((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))))+(IKabs((cj4*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j6=0;
sj6=0;
cj6=1.0;
IkReal x4544=(((r10*sj9))+((cj9*r11)));
j8eval[0]=x4544;
j8eval[1]=IKsign(x4544);
j8eval[2]=((IKabs((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))))+(IKabs((r22*sj4))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j6=0;
sj6=0;
cj6=1.0;
IkReal x4545=cj9*cj9;
IkReal x4546=(r11*r21);
IkReal x4547=(r21*sj9);
IkReal x4548=(cj9*r20);
IkReal x4549=((((-1.0)*r12*r22))+((x4545*x4546))+((cj9*r10*x4547))+(((-1.0)*x4546))+((r11*sj9*x4548))+(((-1.0)*r10*r20*x4545)));
j8eval[0]=x4549;
j8eval[1]=((IKabs(((((-1.0)*cj4*x4548))+((cj4*x4547)))))+(IKabs((cj4*r22))));
j8eval[2]=IKsign(x4549);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x4550=cj9*cj9;
IkReal x4551=(r11*r21);
IkReal x4552=(r21*sj9);
IkReal x4553=(cj9*r20);
CheckValue<IkReal> x4554 = IKatan2WithCheck(IkReal((cj4*r22)),IkReal(((((-1.0)*cj4*x4553))+((cj4*x4552)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4554.valid){
continue;
}
CheckValue<IkReal> x4555=IKPowWithIntegerCheck(IKsign((((r11*sj9*x4553))+((x4550*x4551))+(((-1.0)*r12*r22))+((cj9*r10*x4552))+(((-1.0)*r10*r20*x4550))+(((-1.0)*x4551)))),-1);
if(!x4555.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x4554.value)+(((1.5707963267949)*(x4555.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x4556=IKcos(j8);
IkReal x4557=IKsin(j8);
CheckValue<IkReal> x4566=IKPowWithIntegerCheck(cj9,-1);
if(!x4566.valid){
continue;
}
IkReal x4558=x4566.value;
IkReal x4559=sj9*sj9;
IkReal x4560=(r21*sj9);
IkReal x4561=(cj9*r00);
IkReal x4562=((1.0)*x4556);
IkReal x4563=(cj9*x4557);
IkReal x4564=(sj9*x4556);
IkReal x4565=(x4557*x4558*x4559);
evalcond[0]=((((-1.0)*cj9*r20*x4562))+((x4556*x4560))+((r22*x4557)));
evalcond[1]=(((r22*x4556))+((r20*x4563))+(((-1.0)*x4557*x4560)));
evalcond[2]=(cj4+(((-1.0)*cj9*r10*x4562))+((r11*x4564))+((r12*x4557)));
evalcond[3]=((((-1.0)*sj4))+((r02*x4557))+(((-1.0)*x4561*x4562))+((r01*x4564)));
evalcond[4]=(cj4+((x4557*x4561))+((r02*x4556))+((r00*x4565)));
evalcond[5]=(sj4+((r10*x4565))+((r10*x4563))+((r12*x4556)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x4567 = IKatan2WithCheck(IkReal((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x4567.valid){
continue;
}
CheckValue<IkReal> x4568=IKPowWithIntegerCheck(IKsign((((r10*sj9))+((cj9*r11)))),-1);
if(!x4568.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x4567.value)+(((1.5707963267949)*(x4568.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x4569=IKcos(j8);
IkReal x4570=IKsin(j8);
CheckValue<IkReal> x4579=IKPowWithIntegerCheck(cj9,-1);
if(!x4579.valid){
continue;
}
IkReal x4571=x4579.value;
IkReal x4572=sj9*sj9;
IkReal x4573=(r21*sj9);
IkReal x4574=(cj9*r00);
IkReal x4575=((1.0)*x4569);
IkReal x4576=(cj9*x4570);
IkReal x4577=(sj9*x4569);
IkReal x4578=(x4570*x4571*x4572);
evalcond[0]=((((-1.0)*cj9*r20*x4575))+((r22*x4570))+((x4569*x4573)));
evalcond[1]=(((r22*x4569))+((r20*x4576))+(((-1.0)*x4570*x4573)));
evalcond[2]=((((-1.0)*cj9*r10*x4575))+cj4+((r12*x4570))+((r11*x4577)));
evalcond[3]=((((-1.0)*sj4))+((r02*x4570))+(((-1.0)*x4574*x4575))+((r01*x4577)));
evalcond[4]=(cj4+((r02*x4569))+((x4570*x4574))+((r00*x4578)));
evalcond[5]=(sj4+((r10*x4576))+((r10*x4578))+((r12*x4569)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x4580=IKPowWithIntegerCheck(IKsign((((r00*sj9))+((cj9*r01)))),-1);
if(!x4580.valid){
continue;
}
CheckValue<IkReal> x4581 = IKatan2WithCheck(IkReal((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4581.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4580.value)))+(x4581.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x4582=IKcos(j8);
IkReal x4583=IKsin(j8);
CheckValue<IkReal> x4592=IKPowWithIntegerCheck(cj9,-1);
if(!x4592.valid){
continue;
}
IkReal x4584=x4592.value;
IkReal x4585=sj9*sj9;
IkReal x4586=(r21*sj9);
IkReal x4587=(cj9*r00);
IkReal x4588=((1.0)*x4582);
IkReal x4589=(cj9*x4583);
IkReal x4590=(sj9*x4582);
IkReal x4591=(x4583*x4584*x4585);
evalcond[0]=(((r22*x4583))+((x4582*x4586))+(((-1.0)*cj9*r20*x4588)));
evalcond[1]=(((r22*x4582))+((r20*x4589))+(((-1.0)*x4583*x4586)));
evalcond[2]=((((-1.0)*cj9*r10*x4588))+cj4+((r11*x4590))+((r12*x4583)));
evalcond[3]=((((-1.0)*sj4))+((r02*x4583))+(((-1.0)*x4587*x4588))+((r01*x4590)));
evalcond[4]=(cj4+((r02*x4582))+((x4583*x4587))+((r00*x4591)));
evalcond[5]=(sj4+((r12*x4582))+((r10*x4591))+((r10*x4589)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j6, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j5), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((-2.52189136462044)*py))+(((-8.4050211434602)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((8.4050211434602)*py))+(((-2.52189136462044)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.52189136462044)*py))+(((-8.4050211434602)*px))))+IKsqr(((((8.4050211434602)*py))+(((-2.52189136462044)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-2.52189136462044)*py))+(((-8.4050211434602)*px))), ((((8.4050211434602)*py))+(((-2.52189136462044)*px))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x4593=IKcos(j4);
IkReal x4594=IKsin(j4);
evalcond[0]=((((-0.10915)*x4594))+(((-0.03275)*x4593))+(((-1.0)*px)));
evalcond[1]=((((0.10915)*x4593))+(((-0.03275)*x4594))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j8eval[3];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j6=3.14159265358979;
sj6=0;
cj6=-1.0;
IkReal x4595=(((r00*sj9))+((cj9*r01)));
j8eval[0]=x4595;
j8eval[1]=IKsign(x4595);
j8eval[2]=((IKabs((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))))+(IKabs((cj4*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j6=3.14159265358979;
sj6=0;
cj6=-1.0;
IkReal x4596=(((r10*sj9))+((cj9*r11)));
j8eval[0]=x4596;
j8eval[1]=IKsign(x4596);
j8eval[2]=((IKabs((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))))+(IKabs((r22*sj4))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j6=3.14159265358979;
sj6=0;
cj6=-1.0;
IkReal x4597=cj9*cj9;
IkReal x4598=(r11*r21);
IkReal x4599=(r21*sj9);
IkReal x4600=(cj9*r20);
IkReal x4601=(((cj9*r10*x4599))+(((-1.0)*r10*r20*x4597))+(((-1.0)*r12*r22))+(((-1.0)*x4598))+((r11*sj9*x4600))+((x4597*x4598)));
j8eval[0]=x4601;
j8eval[1]=((IKabs((((cj4*x4599))+(((-1.0)*cj4*x4600)))))+(IKabs((cj4*r22))));
j8eval[2]=IKsign(x4601);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x4602=cj9*cj9;
IkReal x4603=(r11*r21);
IkReal x4604=(r21*sj9);
IkReal x4605=(cj9*r20);
CheckValue<IkReal> x4606=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4603))+(((-1.0)*r12*r22))+((r11*sj9*x4605))+(((-1.0)*r10*r20*x4602))+((x4602*x4603))+((cj9*r10*x4604)))),-1);
if(!x4606.valid){
continue;
}
CheckValue<IkReal> x4607 = IKatan2WithCheck(IkReal((cj4*r22)),IkReal((((cj4*x4604))+(((-1.0)*cj4*x4605)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4607.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4606.value)))+(x4607.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x4608=IKcos(j8);
IkReal x4609=IKsin(j8);
CheckValue<IkReal> x4619=IKPowWithIntegerCheck(cj9,-1);
if(!x4619.valid){
continue;
}
IkReal x4610=x4619.value;
IkReal x4611=sj9*sj9;
IkReal x4612=((1.0)*sj4);
IkReal x4613=(r21*sj9);
IkReal x4614=(cj9*r00);
IkReal x4615=((1.0)*x4608);
IkReal x4616=(cj9*x4609);
IkReal x4617=(sj9*x4608);
IkReal x4618=(x4609*x4610*x4611);
evalcond[0]=(((x4608*x4613))+((r22*x4609))+(((-1.0)*cj9*r20*x4615)));
evalcond[1]=(((r20*x4616))+(((-1.0)*x4609*x4613))+((r22*x4608)));
evalcond[2]=(cj4+((r12*x4609))+(((-1.0)*cj9*r10*x4615))+((r11*x4617)));
evalcond[3]=(((r01*x4617))+((r02*x4609))+(((-1.0)*x4614*x4615))+(((-1.0)*x4612)));
evalcond[4]=(((x4609*x4614))+((r00*x4618))+((r02*x4608))+(((-1.0)*cj4)));
evalcond[5]=(((r10*x4616))+((r10*x4618))+((r12*x4608))+(((-1.0)*x4612)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x4620 = IKatan2WithCheck(IkReal((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x4620.valid){
continue;
}
CheckValue<IkReal> x4621=IKPowWithIntegerCheck(IKsign((((r10*sj9))+((cj9*r11)))),-1);
if(!x4621.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x4620.value)+(((1.5707963267949)*(x4621.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x4622=IKcos(j8);
IkReal x4623=IKsin(j8);
CheckValue<IkReal> x4633=IKPowWithIntegerCheck(cj9,-1);
if(!x4633.valid){
continue;
}
IkReal x4624=x4633.value;
IkReal x4625=sj9*sj9;
IkReal x4626=((1.0)*sj4);
IkReal x4627=(r21*sj9);
IkReal x4628=(cj9*r00);
IkReal x4629=((1.0)*x4622);
IkReal x4630=(cj9*x4623);
IkReal x4631=(sj9*x4622);
IkReal x4632=(x4623*x4624*x4625);
evalcond[0]=((((-1.0)*cj9*r20*x4629))+((x4622*x4627))+((r22*x4623)));
evalcond[1]=((((-1.0)*x4623*x4627))+((r20*x4630))+((r22*x4622)));
evalcond[2]=(((r12*x4623))+cj4+((r11*x4631))+(((-1.0)*cj9*r10*x4629)));
evalcond[3]=(((r01*x4631))+((r02*x4623))+(((-1.0)*x4628*x4629))+(((-1.0)*x4626)));
evalcond[4]=(((r00*x4632))+((x4623*x4628))+((r02*x4622))+(((-1.0)*cj4)));
evalcond[5]=(((r12*x4622))+((r10*x4630))+((r10*x4632))+(((-1.0)*x4626)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x4634=IKPowWithIntegerCheck(IKsign((((r00*sj9))+((cj9*r01)))),-1);
if(!x4634.valid){
continue;
}
CheckValue<IkReal> x4635 = IKatan2WithCheck(IkReal((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4635.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4634.value)))+(x4635.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x4636=IKcos(j8);
IkReal x4637=IKsin(j8);
CheckValue<IkReal> x4647=IKPowWithIntegerCheck(cj9,-1);
if(!x4647.valid){
continue;
}
IkReal x4638=x4647.value;
IkReal x4639=sj9*sj9;
IkReal x4640=((1.0)*sj4);
IkReal x4641=(r21*sj9);
IkReal x4642=(cj9*r00);
IkReal x4643=((1.0)*x4636);
IkReal x4644=(cj9*x4637);
IkReal x4645=(sj9*x4636);
IkReal x4646=(x4637*x4638*x4639);
evalcond[0]=((((-1.0)*cj9*r20*x4643))+((x4636*x4641))+((r22*x4637)));
evalcond[1]=((((-1.0)*x4637*x4641))+((r20*x4644))+((r22*x4636)));
evalcond[2]=(((r12*x4637))+cj4+((r11*x4645))+(((-1.0)*cj9*r10*x4643)));
evalcond[3]=((((-1.0)*x4640))+((r01*x4645))+((r02*x4637))+(((-1.0)*x4642*x4643)));
evalcond[4]=(((r02*x4636))+((r00*x4646))+((x4637*x4642))+(((-1.0)*cj4)));
evalcond[5]=(((r12*x4636))+((r10*x4646))+((r10*x4644))+(((-1.0)*x4640)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4, j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4648=(r00*sj9);
IkReal x4649=(cj5*cj6);
IkReal x4650=((20000.0)*px);
IkReal x4651=(cj9*r01);
IkReal x4652=(sj5*sj6);
IkReal x4653=((8500.0)*sj5);
IkReal x4654=((7845.0)*cj6*sj5);
IkReal x4655=((7845.0)*cj5*sj6);
CheckValue<IkReal> x4656=IKPowWithIntegerCheck(((((-2183.0)*x4652))+(((2183.0)*x4649))),-1);
if(!x4656.valid){
continue;
}
CheckValue<IkReal> x4657=IKPowWithIntegerCheck((x4649+(((-1.0)*x4652))),-1);
if(!x4657.valid){
continue;
}
if( IKabs(((x4656.value)*((((x4650*x4652))+(((-1.0)*x4649*x4650))+(((-1893.0)*x4648*x4649))+(((1893.0)*x4648*x4652))+(((-1.0)*x4651*x4654))+(((-1.0)*x4651*x4655))+(((-1.0)*x4651*x4653))+(((1893.0)*x4651*x4652))+(((-1893.0)*x4649*x4651))+(((-1.0)*x4648*x4653))+(((-1.0)*x4648*x4654))+(((-1.0)*x4648*x4655)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x4657.value)*(((((-1.0)*x4648))+(((-1.0)*x4651)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x4656.value)*((((x4650*x4652))+(((-1.0)*x4649*x4650))+(((-1893.0)*x4648*x4649))+(((1893.0)*x4648*x4652))+(((-1.0)*x4651*x4654))+(((-1.0)*x4651*x4655))+(((-1.0)*x4651*x4653))+(((1893.0)*x4651*x4652))+(((-1893.0)*x4649*x4651))+(((-1.0)*x4648*x4653))+(((-1.0)*x4648*x4654))+(((-1.0)*x4648*x4655))))))+IKsqr(((x4657.value)*(((((-1.0)*x4648))+(((-1.0)*x4651))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x4656.value)*((((x4650*x4652))+(((-1.0)*x4649*x4650))+(((-1893.0)*x4648*x4649))+(((1893.0)*x4648*x4652))+(((-1.0)*x4651*x4654))+(((-1.0)*x4651*x4655))+(((-1.0)*x4651*x4653))+(((1893.0)*x4651*x4652))+(((-1893.0)*x4649*x4651))+(((-1.0)*x4648*x4653))+(((-1.0)*x4648*x4654))+(((-1.0)*x4648*x4655))))), ((x4657.value)*(((((-1.0)*x4648))+(((-1.0)*x4651))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x4658=IKcos(j4);
IkReal x4659=IKsin(j4);
IkReal x4660=((0.39225)*cj6);
IkReal x4661=(cj9*r11);
IkReal x4662=(r00*sj9);
IkReal x4663=((1.0)*sj6);
IkReal x4664=(cj9*r01);
IkReal x4665=((0.39225)*sj6);
IkReal x4666=(r10*sj9);
IkReal x4667=(sj5*x4659);
IkReal x4668=(sj5*x4658);
IkReal x4669=(cj5*x4658);
IkReal x4670=(cj5*x4659);
evalcond[0]=((((-1.0)*x4663*x4668))+((cj6*x4669))+x4664+x4662);
evalcond[1]=((((-1.0)*x4663*x4667))+x4666+x4661+((cj6*x4670)));
evalcond[2]=(((x4665*x4669))+(((-0.10915)*x4659))+(((-1.0)*px))+(((0.425)*x4668))+((x4660*x4668))+(((-0.09465)*x4664))+(((-0.09465)*x4662)));
evalcond[3]=((((0.10915)*x4658))+((x4665*x4670))+(((-1.0)*py))+(((0.425)*x4667))+((x4660*x4667))+(((-0.09465)*x4666))+(((-0.09465)*x4661)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j8eval[3];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
IkReal x4671=(((r00*sj9))+((cj9*r01)));
j8eval[0]=x4671;
j8eval[1]=IKsign(x4671);
j8eval[2]=((IKabs((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))))+(IKabs((cj4*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
IkReal x4672=(((r10*sj9))+((cj9*r11)));
j8eval[0]=x4672;
j8eval[1]=IKsign(x4672);
j8eval[2]=((IKabs((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))))+(IKabs((r22*sj4))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
IkReal x4673=((1.0)*cj9);
IkReal x4674=((((-1.0)*r21*x4673))+(((-1.0)*r20*sj9)));
j8eval[0]=x4674;
j8eval[1]=((IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))))+(IKabs((((r11*sj4*sj9))+(((-1.0)*r10*sj4*x4673))+(((-1.0)*cj4*r00*x4673))+((cj4*r01*sj9))))));
j8eval[2]=IKsign(x4674);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x4675=((-1.0)*r20);
IkReal x4677 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4677)==0){
continue;
}
IkReal x4676=pow(x4677,-0.5);
CheckValue<IkReal> x4678 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4675),IKFAST_ATAN2_MAGTHRESH);
if(!x4678.valid){
continue;
}
IkReal gconst114=((-1.0)*(x4678.value));
IkReal gconst115=(r21*x4676);
IkReal gconst116=(x4675*x4676);
CheckValue<IkReal> x4679 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4679.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4679.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x4680=((-1.0)*r20);
IkReal x4681=x4676;
CheckValue<IkReal> x4683 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4680),IKFAST_ATAN2_MAGTHRESH);
if(!x4683.valid){
continue;
}
IkReal x4682=((-1.0)*(x4683.value));
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj9=gconst115;
cj9=gconst116;
j9=x4682;
IkReal gconst114=x4682;
IkReal gconst115=(r21*x4681);
IkReal gconst116=(x4680*x4681);
j8eval[0]=cj4;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
IkReal x4684=((-1.0)*r20);
IkReal x4685=x4676;
CheckValue<IkReal> x4687 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4684),IKFAST_ATAN2_MAGTHRESH);
if(!x4687.valid){
continue;
}
IkReal x4686=((-1.0)*(x4687.value));
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj9=gconst115;
cj9=gconst116;
j9=x4686;
IkReal gconst114=x4686;
IkReal gconst115=(r21*x4685);
IkReal gconst116=(x4684*x4685);
j8eval[0]=sj4;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x4688=((-1.0)*r20);
IkReal x4689=x4676;
CheckValue<IkReal> x4691 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4688),IKFAST_ATAN2_MAGTHRESH);
if(!x4691.valid){
continue;
}
IkReal x4690=((-1.0)*(x4691.value));
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj9=gconst115;
cj9=gconst116;
j9=x4690;
IkReal gconst114=x4690;
IkReal gconst115=(r21*x4689);
IkReal gconst116=(x4688*x4689);
IkReal x4692=r22*r22;
CheckValue<IkReal> x4695=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x4692))),-1);
if(!x4695.valid){
continue;
}
IkReal x4693=x4695.value;
IkReal x4694=(((x4693*(r20*r20*r20*r20)))+x4692+((x4693*(r21*r21*r21*r21)))+(((2.0)*x4693*(r20*r20)*(r21*r21))));
j8eval[0]=x4694;
j8eval[1]=IKsign(x4694);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x4696=(gconst116*r20);
IkReal x4697=(cj5*cj6);
IkReal x4698=(gconst115*r21);
IkReal x4699=((1.0)*sj5*sj6);
CheckValue<IkReal> x4700=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x4696*x4696)+(((-2.0)*x4696*x4698))+(x4698*x4698))),-1);
if(!x4700.valid){
continue;
}
CheckValue<IkReal> x4701 = IKatan2WithCheck(IkReal((((x4696*x4697))+(((-1.0)*x4696*x4699))+(((-1.0)*x4697*x4698))+((sj5*sj6*x4698)))),IkReal((((r22*x4697))+(((-1.0)*r22*x4699)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4701.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4700.value)))+(x4701.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x4702=IKcos(j8);
IkReal x4703=IKsin(j8);
IkReal x4704=(gconst115*r21);
IkReal x4705=((1.0)*sj4);
IkReal x4706=(gconst115*r20);
IkReal x4707=((1.0)*cj4);
IkReal x4708=(gconst115*r11);
IkReal x4709=(gconst115*r01);
IkReal x4710=(gconst116*r21);
IkReal x4711=(gconst116*x4703);
IkReal x4712=((1.0)*x4703);
IkReal x4713=((1.0)*gconst116*x4702);
evalcond[0]=((((-1.0)*r20*x4713))+((x4702*x4704))+((r22*x4703)));
evalcond[1]=(cj4+(((-1.0)*r10*x4713))+((x4702*x4708))+((r12*x4703)));
evalcond[2]=(((x4702*x4709))+((r02*x4703))+(((-1.0)*x4705))+(((-1.0)*r00*x4713)));
evalcond[3]=(((sj5*sj6))+(((-1.0)*x4704*x4712))+((r20*x4711))+(((-1.0)*cj5*cj6))+((r22*x4702)));
evalcond[4]=((((-1.0)*x4709*x4712))+((r00*x4711))+(((-1.0)*x4706*x4707))+(((-1.0)*x4707*x4710))+((r02*x4702)));
evalcond[5]=(((r10*x4711))+(((-1.0)*x4705*x4706))+(((-1.0)*x4708*x4712))+(((-1.0)*x4705*x4710))+((r12*x4702)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x4714=IKPowWithIntegerCheck(IKsign((((gconst115*r10))+((gconst116*r11)))),-1);
if(!x4714.valid){
continue;
}
CheckValue<IkReal> x4715 = IKatan2WithCheck(IkReal((((gconst115*r21*sj4))+(((-1.0)*gconst116*r20*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x4715.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4714.value)))+(x4715.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x4716=IKcos(j8);
IkReal x4717=IKsin(j8);
IkReal x4718=(gconst115*r21);
IkReal x4719=((1.0)*sj4);
IkReal x4720=(gconst115*r20);
IkReal x4721=((1.0)*cj4);
IkReal x4722=(gconst115*r11);
IkReal x4723=(gconst115*r01);
IkReal x4724=(gconst116*r21);
IkReal x4725=(gconst116*x4717);
IkReal x4726=((1.0)*x4717);
IkReal x4727=((1.0)*gconst116*x4716);
evalcond[0]=(((r22*x4717))+((x4716*x4718))+(((-1.0)*r20*x4727)));
evalcond[1]=((((-1.0)*r10*x4727))+cj4+((x4716*x4722))+((r12*x4717)));
evalcond[2]=((((-1.0)*r00*x4727))+((x4716*x4723))+((r02*x4717))+(((-1.0)*x4719)));
evalcond[3]=(((r22*x4716))+((r20*x4725))+((sj5*sj6))+(((-1.0)*x4718*x4726))+(((-1.0)*cj5*cj6)));
evalcond[4]=((((-1.0)*x4723*x4726))+((r00*x4725))+(((-1.0)*x4721*x4724))+(((-1.0)*x4720*x4721))+((r02*x4716)));
evalcond[5]=((((-1.0)*x4722*x4726))+(((-1.0)*x4719*x4720))+(((-1.0)*x4719*x4724))+((r10*x4725))+((r12*x4716)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x4728 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*gconst116*r20))+((cj4*gconst115*r21)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4728.valid){
continue;
}
CheckValue<IkReal> x4729=IKPowWithIntegerCheck(IKsign((((gconst115*r00))+((gconst116*r01)))),-1);
if(!x4729.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x4728.value)+(((1.5707963267949)*(x4729.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x4730=IKcos(j8);
IkReal x4731=IKsin(j8);
IkReal x4732=(gconst115*r21);
IkReal x4733=((1.0)*sj4);
IkReal x4734=(gconst115*r20);
IkReal x4735=((1.0)*cj4);
IkReal x4736=(gconst115*r11);
IkReal x4737=(gconst115*r01);
IkReal x4738=(gconst116*r21);
IkReal x4739=(gconst116*x4731);
IkReal x4740=((1.0)*x4731);
IkReal x4741=((1.0)*gconst116*x4730);
evalcond[0]=(((x4730*x4732))+(((-1.0)*r20*x4741))+((r22*x4731)));
evalcond[1]=((((-1.0)*r10*x4741))+((x4730*x4736))+cj4+((r12*x4731)));
evalcond[2]=(((x4730*x4737))+(((-1.0)*r00*x4741))+(((-1.0)*x4733))+((r02*x4731)));
evalcond[3]=(((sj5*sj6))+((r20*x4739))+(((-1.0)*x4732*x4740))+((r22*x4730))+(((-1.0)*cj5*cj6)));
evalcond[4]=((((-1.0)*x4734*x4735))+(((-1.0)*x4735*x4738))+(((-1.0)*x4737*x4740))+((r02*x4730))+((r00*x4739)));
evalcond[5]=((((-1.0)*x4736*x4740))+(((-1.0)*x4733*x4738))+(((-1.0)*x4733*x4734))+((r10*x4739))+((r12*x4730)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4742=((-1.0)*r21);
IkReal x4744 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4744)==0){
continue;
}
IkReal x4743=pow(x4744,-0.5);
CheckValue<IkReal> x4745 = IKatan2WithCheck(IkReal(x4742),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4745.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x4745.value))));
IkReal gconst118=(x4742*x4743);
IkReal gconst119=((1.0)*r20*x4743);
CheckValue<IkReal> x4746 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4746.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4746.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x4747=((-1.0)*r21);
CheckValue<IkReal> x4750 = IKatan2WithCheck(IkReal(x4747),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4750.valid){
continue;
}
IkReal x4748=((1.0)*(x4750.value));
IkReal x4749=x4743;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj9=gconst118;
cj9=gconst119;
j9=((3.14159265)+(((-1.0)*x4748)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x4748)));
IkReal gconst118=(x4747*x4749);
IkReal gconst119=((1.0)*r20*x4749);
IkReal x4751=r22*r22;
IkReal x4752=((1.0)*x4751);
CheckValue<IkReal> x4756=IKPowWithIntegerCheck(((-1.0)+x4751),-1);
if(!x4756.valid){
continue;
}
IkReal x4753=x4756.value;
if((((1.0)+(((-1.0)*x4752)))) < -0.00001)
continue;
IkReal x4754=IKsqrt(((1.0)+(((-1.0)*x4752))));
IkReal x4755=(cj4*x4753*x4754);
j8eval[0]=((IKabs((x4755+(((-1.0)*x4752*x4755)))))+(IKabs((cj4*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
IkReal x4757=((-1.0)*r21);
CheckValue<IkReal> x4760 = IKatan2WithCheck(IkReal(x4757),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4760.valid){
continue;
}
IkReal x4758=((1.0)*(x4760.value));
IkReal x4759=x4743;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj9=gconst118;
cj9=gconst119;
j9=((3.14159265)+(((-1.0)*x4758)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x4758)));
IkReal gconst118=(x4757*x4759);
IkReal gconst119=((1.0)*r20*x4759);
IkReal x4761=r22*r22;
IkReal x4762=((1.0)*x4761);
CheckValue<IkReal> x4766=IKPowWithIntegerCheck(((-1.0)+x4761),-1);
if(!x4766.valid){
continue;
}
IkReal x4763=x4766.value;
if((((1.0)+(((-1.0)*x4762)))) < -0.00001)
continue;
IkReal x4764=IKsqrt(((1.0)+(((-1.0)*x4762))));
IkReal x4765=(sj4*x4763*x4764);
j8eval[0]=((IKabs((r22*sj4)))+(IKabs(((((-1.0)*x4762*x4765))+x4765))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
IkReal x4767=((-1.0)*r21);
CheckValue<IkReal> x4770 = IKatan2WithCheck(IkReal(x4767),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4770.valid){
continue;
}
IkReal x4768=((1.0)*(x4770.value));
IkReal x4769=x4743;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj9=gconst118;
cj9=gconst119;
j9=((3.14159265)+(((-1.0)*x4768)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x4768)));
IkReal gconst118=(x4767*x4769);
IkReal gconst119=((1.0)*r20*x4769);
IkReal x4771=r22*r22;
IkReal x4772=((1.0)*cj4*r02);
IkReal x4773=((1.0)*r12*sj4);
CheckValue<IkReal> x4777=IKPowWithIntegerCheck(((-1.0)+x4771),-1);
if(!x4777.valid){
continue;
}
IkReal x4774=x4777.value;
if((((1.0)+(((-1.0)*x4771)))) < -0.00001)
continue;
IkReal x4775=IKsqrt(((1.0)+(((-1.0)*x4771))));
IkReal x4776=(r22*x4774*x4775);
j8eval[0]=0;
j8eval[1]=((IKabs(((((-1.0)*x4773))+(((-1.0)*x4772)))))+(IKabs(((((-1.0)*x4773*x4776))+(((-1.0)*x4772*x4776))))));
j8eval[2]=0;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x4778=((1.0)*gconst119);
CheckValue<IkReal> x4779=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r20))+(((-1.0)*r21*x4778)))),-1);
if(!x4779.valid){
continue;
}
CheckValue<IkReal> x4780 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*r00*x4778))+((gconst118*r11*sj4))+(((-1.0)*r10*sj4*x4778))+((cj4*gconst118*r01)))),IkReal(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4780.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4779.value)))+(x4780.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x4781=IKcos(j8);
IkReal x4782=IKsin(j8);
IkReal x4783=((1.0)*sj4);
IkReal x4784=(gconst118*r01);
IkReal x4785=(gconst118*r20);
IkReal x4786=(gconst119*r21);
IkReal x4787=(gconst118*r21);
IkReal x4788=((1.0)*cj4);
IkReal x4789=(gconst118*r11);
IkReal x4790=((1.0)*x4782);
IkReal x4791=(gconst119*x4782);
IkReal x4792=((1.0)*gconst119*x4781);
evalcond[0]=(((r22*x4782))+(((-1.0)*r20*x4792))+((x4781*x4787)));
evalcond[1]=(cj4+((r12*x4782))+((x4781*x4789))+(((-1.0)*r10*x4792)));
evalcond[2]=(((r02*x4782))+(((-1.0)*r00*x4792))+((x4781*x4784))+(((-1.0)*x4783)));
evalcond[3]=((((-1.0)*x4787*x4790))+((sj5*sj6))+((r22*x4781))+((r20*x4791))+(((-1.0)*cj5*cj6)));
evalcond[4]=(((r02*x4781))+((r00*x4791))+(((-1.0)*x4784*x4790))+(((-1.0)*x4786*x4788))+(((-1.0)*x4785*x4788)));
evalcond[5]=(((r10*x4791))+(((-1.0)*x4789*x4790))+((r12*x4781))+(((-1.0)*x4783*x4785))+(((-1.0)*x4783*x4786)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x4793=IKPowWithIntegerCheck(IKsign((((gconst118*r10))+((gconst119*r11)))),-1);
if(!x4793.valid){
continue;
}
CheckValue<IkReal> x4794 = IKatan2WithCheck(IkReal(((((-1.0)*gconst119*r20*sj4))+((gconst118*r21*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x4794.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4793.value)))+(x4794.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x4795=IKcos(j8);
IkReal x4796=IKsin(j8);
IkReal x4797=((1.0)*sj4);
IkReal x4798=(gconst118*r01);
IkReal x4799=(gconst118*r20);
IkReal x4800=(gconst119*r21);
IkReal x4801=(gconst118*r21);
IkReal x4802=((1.0)*cj4);
IkReal x4803=(gconst118*r11);
IkReal x4804=((1.0)*x4796);
IkReal x4805=(gconst119*x4796);
IkReal x4806=((1.0)*gconst119*x4795);
evalcond[0]=(((x4795*x4801))+(((-1.0)*r20*x4806))+((r22*x4796)));
evalcond[1]=(cj4+((x4795*x4803))+(((-1.0)*r10*x4806))+((r12*x4796)));
evalcond[2]=(((x4795*x4798))+(((-1.0)*r00*x4806))+(((-1.0)*x4797))+((r02*x4796)));
evalcond[3]=((((-1.0)*x4801*x4804))+((sj5*sj6))+(((-1.0)*cj5*cj6))+((r22*x4795))+((r20*x4805)));
evalcond[4]=(((r00*x4805))+(((-1.0)*x4800*x4802))+(((-1.0)*x4799*x4802))+(((-1.0)*x4798*x4804))+((r02*x4795)));
evalcond[5]=((((-1.0)*x4797*x4800))+(((-1.0)*x4797*x4799))+(((-1.0)*x4803*x4804))+((r12*x4795))+((r10*x4805)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x4807=IKPowWithIntegerCheck(IKsign((((gconst118*r00))+((gconst119*r01)))),-1);
if(!x4807.valid){
continue;
}
CheckValue<IkReal> x4808 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*gconst119*r20))+((cj4*gconst118*r21)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4808.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4807.value)))+(x4808.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x4809=IKcos(j8);
IkReal x4810=IKsin(j8);
IkReal x4811=((1.0)*sj4);
IkReal x4812=(gconst118*r01);
IkReal x4813=(gconst118*r20);
IkReal x4814=(gconst119*r21);
IkReal x4815=(gconst118*r21);
IkReal x4816=((1.0)*cj4);
IkReal x4817=(gconst118*r11);
IkReal x4818=((1.0)*x4810);
IkReal x4819=(gconst119*x4810);
IkReal x4820=((1.0)*gconst119*x4809);
evalcond[0]=(((x4809*x4815))+(((-1.0)*r20*x4820))+((r22*x4810)));
evalcond[1]=(cj4+((x4809*x4817))+(((-1.0)*r10*x4820))+((r12*x4810)));
evalcond[2]=((((-1.0)*r00*x4820))+((x4809*x4812))+(((-1.0)*x4811))+((r02*x4810)));
evalcond[3]=((((-1.0)*x4815*x4818))+((sj5*sj6))+((r20*x4819))+((r22*x4809))+(((-1.0)*cj5*cj6)));
evalcond[4]=(((r02*x4809))+(((-1.0)*x4814*x4816))+(((-1.0)*x4813*x4816))+((r00*x4819))+(((-1.0)*x4812*x4818)));
evalcond[5]=((((-1.0)*x4811*x4813))+(((-1.0)*x4811*x4814))+((r10*x4819))+(((-1.0)*x4817*x4818))+((r12*x4809)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4822 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4822)==0){
continue;
}
IkReal x4821=pow(x4822,-0.5);
CheckValue<IkReal> x4823 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4823.valid){
continue;
}
IkReal gconst120=((-1.0)*(x4823.value));
IkReal gconst121=((-1.0)*r11*x4821);
IkReal gconst122=(r10*x4821);
CheckValue<IkReal> x4824 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4824.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4824.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
CheckValue<IkReal> x4827 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4827.valid){
continue;
}
IkReal x4825=((-1.0)*(x4827.value));
IkReal x4826=x4821;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj9=gconst121;
cj9=gconst122;
j9=x4825;
IkReal gconst120=x4825;
IkReal gconst121=((-1.0)*r11*x4826);
IkReal gconst122=(r10*x4826);
j8eval[0]=cj4;
j8eval[1]=r22;
j8eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x4828=((1.0)*gconst122);
CheckValue<IkReal> x4829=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r20))+(((-1.0)*r21*x4828)))),-1);
if(!x4829.valid){
continue;
}
CheckValue<IkReal> x4830 = IKatan2WithCheck(IkReal(((((-1.0)*r10*sj4*x4828))+(((-1.0)*cj4*r00*x4828))+((cj4*gconst121*r01))+((gconst121*r11*sj4)))),IkReal(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4830.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4829.value)))+(x4830.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x4831=IKcos(j8);
IkReal x4832=IKsin(j8);
IkReal x4833=((1.0)*gconst122);
IkReal x4834=((1.0)*sj4);
IkReal x4835=((1.0)*gconst121);
IkReal x4836=(gconst121*x4831);
IkReal x4837=(gconst122*x4832);
evalcond[0]=(((r22*x4832))+(((-1.0)*r20*x4831*x4833))+((r21*x4836)));
evalcond[1]=(((r12*x4832))+((r11*x4836))+cj4+(((-1.0)*r10*x4831*x4833)));
evalcond[2]=(((r01*x4836))+(((-1.0)*r00*x4831*x4833))+(((-1.0)*x4834))+((r02*x4832)));
evalcond[3]=((((-1.0)*r21*x4832*x4835))+((sj5*sj6))+((r22*x4831))+(((-1.0)*cj5*cj6))+((r20*x4837)));
evalcond[4]=((((-1.0)*cj4*r20*x4835))+(((-1.0)*cj4*r21*x4833))+((r02*x4831))+((r00*x4837))+(((-1.0)*r01*x4832*x4835)));
evalcond[5]=(((r12*x4831))+(((-1.0)*r21*sj4*x4833))+((r10*x4837))+(((-1.0)*gconst121*r20*x4834))+(((-1.0)*r11*x4832*x4835)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x4838 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*gconst122*r20))+((cj4*gconst121*r21)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4838.valid){
continue;
}
CheckValue<IkReal> x4839=IKPowWithIntegerCheck(IKsign((((gconst122*r01))+((gconst121*r00)))),-1);
if(!x4839.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x4838.value)+(((1.5707963267949)*(x4839.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x4840=IKcos(j8);
IkReal x4841=IKsin(j8);
IkReal x4842=((1.0)*gconst122);
IkReal x4843=((1.0)*sj4);
IkReal x4844=((1.0)*gconst121);
IkReal x4845=(gconst121*x4840);
IkReal x4846=(gconst122*x4841);
evalcond[0]=((((-1.0)*r20*x4840*x4842))+((r22*x4841))+((r21*x4845)));
evalcond[1]=(cj4+(((-1.0)*r10*x4840*x4842))+((r11*x4845))+((r12*x4841)));
evalcond[2]=(((r02*x4841))+(((-1.0)*x4843))+(((-1.0)*r00*x4840*x4842))+((r01*x4845)));
evalcond[3]=(((sj5*sj6))+((r20*x4846))+(((-1.0)*r21*x4841*x4844))+((r22*x4840))+(((-1.0)*cj5*cj6)));
evalcond[4]=((((-1.0)*cj4*r21*x4842))+((r02*x4840))+(((-1.0)*r01*x4841*x4844))+((r00*x4846))+(((-1.0)*cj4*r20*x4844)));
evalcond[5]=(((r10*x4846))+(((-1.0)*r11*x4841*x4844))+((r12*x4840))+(((-1.0)*r21*sj4*x4842))+(((-1.0)*gconst121*r20*x4843)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4848 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4848)==0){
continue;
}
IkReal x4847=pow(x4848,-0.5);
CheckValue<IkReal> x4849 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4849.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x4849.value))));
IkReal gconst124=((1.0)*r11*x4847);
IkReal gconst125=((-1.0)*r10*x4847);
CheckValue<IkReal> x4850 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4850.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4850.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
CheckValue<IkReal> x4853 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4853.valid){
continue;
}
IkReal x4851=((1.0)*(x4853.value));
IkReal x4852=x4847;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj9=gconst124;
cj9=gconst125;
j9=((3.14159265)+(((-1.0)*x4851)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x4851)));
IkReal gconst124=((1.0)*r11*x4852);
IkReal gconst125=((-1.0)*r10*x4852);
j8eval[0]=cj4;
j8eval[1]=r22;
j8eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[5];
CheckValue<IkReal> x4856 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4856.valid){
continue;
}
IkReal x4854=((1.0)*(x4856.value));
IkReal x4855=x4847;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj9=gconst124;
cj9=gconst125;
j9=((3.14159265)+(((-1.0)*x4854)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x4854)));
IkReal gconst124=((1.0)*r11*x4855);
IkReal gconst125=((-1.0)*r10*x4855);
j8eval[0]=0;
j8eval[1]=0;
j8eval[2]=r22;
j8eval[3]=sj4;
j8eval[4]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  || IKabs(j8eval[4]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
CheckValue<IkReal> x4859 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4859.valid){
continue;
}
IkReal x4857=((1.0)*(x4859.value));
IkReal x4858=x4847;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj9=gconst124;
cj9=gconst125;
j9=((3.14159265)+(((-1.0)*x4857)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x4857)));
IkReal gconst124=((1.0)*r11*x4858);
IkReal gconst125=((-1.0)*r10*x4858);
IkReal x4860=r12*r12;
IkReal x4861=(cj4*r02);
IkReal x4862=x4847;
IkReal x4863=(sj4*x4862);
j8eval[0]=((IKabs((((x4860*x4863))+(((-1.0)*x4863))+((r12*x4861*x4862)))))+(IKabs(((((-1.0)*x4861))+(((-1.0)*r12*sj4))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x4864=((1.0)*gconst125);
CheckValue<IkReal> x4865 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*r00*x4864))+(((-1.0)*r10*sj4*x4864))+((cj4*gconst124*r01))+((gconst124*r11*sj4)))),IkReal(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4865.valid){
continue;
}
CheckValue<IkReal> x4866=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4864))+(((-1.0)*gconst124*r20)))),-1);
if(!x4866.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x4865.value)+(((1.5707963267949)*(x4866.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x4867=IKcos(j8);
IkReal x4868=IKsin(j8);
IkReal x4869=((1.0)*sj4);
IkReal x4870=((1.0)*r21);
IkReal x4871=((1.0)*r20);
IkReal x4872=(gconst124*x4868);
IkReal x4873=(gconst124*x4867);
IkReal x4874=(gconst125*x4868);
IkReal x4875=(gconst125*x4867);
evalcond[0]=(((r22*x4868))+(((-1.0)*x4871*x4875))+((r21*x4873)));
evalcond[1]=(((r12*x4868))+cj4+(((-1.0)*r10*x4875))+((r11*x4873)));
evalcond[2]=(((r01*x4873))+(((-1.0)*x4869))+(((-1.0)*r00*x4875))+((r02*x4868)));
evalcond[3]=(((r20*x4874))+((sj5*sj6))+((r22*x4867))+(((-1.0)*x4870*x4872))+(((-1.0)*cj5*cj6)));
evalcond[4]=(((r00*x4874))+(((-1.0)*cj4*gconst124*x4871))+(((-1.0)*r01*x4872))+((r02*x4867))+(((-1.0)*cj4*gconst125*x4870)));
evalcond[5]=(((r12*x4867))+(((-1.0)*gconst124*r20*x4869))+(((-1.0)*gconst125*r21*x4869))+((r10*x4874))+(((-1.0)*r11*x4872)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x4876 = IKatan2WithCheck(IkReal((((gconst124*r21*sj4))+(((-1.0)*gconst125*r20*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x4876.valid){
continue;
}
CheckValue<IkReal> x4877=IKPowWithIntegerCheck(IKsign((((gconst125*r11))+((gconst124*r10)))),-1);
if(!x4877.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x4876.value)+(((1.5707963267949)*(x4877.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x4878=IKcos(j8);
IkReal x4879=IKsin(j8);
IkReal x4880=((1.0)*sj4);
IkReal x4881=((1.0)*r21);
IkReal x4882=((1.0)*r20);
IkReal x4883=(gconst124*x4879);
IkReal x4884=(gconst124*x4878);
IkReal x4885=(gconst125*x4879);
IkReal x4886=(gconst125*x4878);
evalcond[0]=((((-1.0)*x4882*x4886))+((r22*x4879))+((r21*x4884)));
evalcond[1]=(((r11*x4884))+cj4+(((-1.0)*r10*x4886))+((r12*x4879)));
evalcond[2]=(((r02*x4879))+(((-1.0)*x4880))+(((-1.0)*r00*x4886))+((r01*x4884)));
evalcond[3]=(((sj5*sj6))+(((-1.0)*x4881*x4883))+((r20*x4885))+((r22*x4878))+(((-1.0)*cj5*cj6)));
evalcond[4]=(((r02*x4878))+((r00*x4885))+(((-1.0)*r01*x4883))+(((-1.0)*cj4*gconst125*x4881))+(((-1.0)*cj4*gconst124*x4882)));
evalcond[5]=((((-1.0)*gconst125*r21*x4880))+(((-1.0)*r11*x4883))+(((-1.0)*gconst124*r20*x4880))+((r10*x4885))+((r12*x4878)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x4887=IKPowWithIntegerCheck(IKsign((((gconst124*r00))+((gconst125*r01)))),-1);
if(!x4887.valid){
continue;
}
CheckValue<IkReal> x4888 = IKatan2WithCheck(IkReal((((cj4*gconst124*r21))+(((-1.0)*cj4*gconst125*r20)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4888.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4887.value)))+(x4888.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x4889=IKcos(j8);
IkReal x4890=IKsin(j8);
IkReal x4891=((1.0)*sj4);
IkReal x4892=((1.0)*r21);
IkReal x4893=((1.0)*r20);
IkReal x4894=(gconst124*x4890);
IkReal x4895=(gconst124*x4889);
IkReal x4896=(gconst125*x4890);
IkReal x4897=(gconst125*x4889);
evalcond[0]=(((r21*x4895))+(((-1.0)*x4893*x4897))+((r22*x4890)));
evalcond[1]=(((r11*x4895))+cj4+((r12*x4890))+(((-1.0)*r10*x4897)));
evalcond[2]=((((-1.0)*x4891))+((r02*x4890))+(((-1.0)*r00*x4897))+((r01*x4895)));
evalcond[3]=(((sj5*sj6))+((r20*x4896))+((r22*x4889))+(((-1.0)*x4892*x4894))+(((-1.0)*cj5*cj6)));
evalcond[4]=((((-1.0)*cj4*gconst124*x4893))+((r02*x4889))+(((-1.0)*r01*x4894))+(((-1.0)*cj4*gconst125*x4892))+((r00*x4896)));
evalcond[5]=(((r12*x4889))+(((-1.0)*r11*x4894))+(((-1.0)*gconst124*r20*x4891))+((r10*x4896))+(((-1.0)*gconst125*r21*x4891)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj4=0;
cj4=1.0;
j4=0;
IkReal x4898=(((r00*sj9))+((cj9*r01)));
j8eval[0]=x4898;
j8eval[1]=IKsign(x4898);
j8eval[2]=((IKabs(r22))+(IKabs((((r21*sj9))+(((-1.0)*cj9*r20))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj4=0;
cj4=1.0;
j4=0;
IkReal x4899=((1.0)*cj9);
IkReal x4900=((((-1.0)*r21*x4899))+(((-1.0)*r20*sj9)));
j8eval[0]=x4900;
j8eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x4899))+((r01*sj9))))));
j8eval[2]=IKsign(x4900);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj4=0;
cj4=1.0;
j4=0;
IkReal x4901=r11*r11;
IkReal x4902=cj9*cj9;
IkReal x4903=(r11*sj9);
IkReal x4904=(cj9*r10);
IkReal x4905=((((-1.0)*x4901))+((x4901*x4902))+(((2.0)*x4903*x4904))+(((-1.0)*(r12*r12)))+(((-1.0)*x4902*(r10*r10))));
j8eval[0]=x4905;
j8eval[1]=IKsign(x4905);
j8eval[2]=((IKabs(r12))+(IKabs((x4903+(((-1.0)*x4904))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x4906=r11*r11;
IkReal x4907=cj9*cj9;
IkReal x4908=(r11*sj9);
IkReal x4909=(cj9*r10);
CheckValue<IkReal> x4910 = IKatan2WithCheck(IkReal(r12),IkReal((x4908+(((-1.0)*x4909)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4910.valid){
continue;
}
CheckValue<IkReal> x4911=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4907*(r10*r10)))+(((-1.0)*x4906))+((x4906*x4907))+(((2.0)*x4908*x4909))+(((-1.0)*(r12*r12))))),-1);
if(!x4911.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x4910.value)+(((1.5707963267949)*(x4911.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x4912=IKcos(j8);
IkReal x4913=IKsin(j8);
IkReal x4914=(cj9*r00);
IkReal x4915=((1.0)*x4912);
IkReal x4916=(cj9*x4913);
IkReal x4917=(sj9*x4912);
IkReal x4918=((1.0)*sj9*x4913);
evalcond[0]=(((r21*x4917))+(((-1.0)*cj9*r20*x4915))+((r22*x4913)));
evalcond[1]=(((r02*x4913))+((r01*x4917))+(((-1.0)*x4914*x4915)));
evalcond[2]=((((-1.0)*r11*x4918))+((r10*x4916))+((r12*x4912)));
evalcond[3]=((1.0)+((r12*x4913))+((r11*x4917))+(((-1.0)*cj9*r10*x4915)));
evalcond[4]=(((sj5*sj6))+((r20*x4916))+(((-1.0)*r21*x4918))+(((-1.0)*cj5*cj6))+((r22*x4912)));
evalcond[5]=(((r02*x4912))+((x4913*x4914))+(((-1.0)*cj9*r21))+(((-1.0)*r01*x4918))+(((-1.0)*r20*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x4919=((1.0)*cj9);
CheckValue<IkReal> x4920=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4919))+(((-1.0)*r20*sj9)))),-1);
if(!x4920.valid){
continue;
}
CheckValue<IkReal> x4921 = IKatan2WithCheck(IkReal((((r01*sj9))+(((-1.0)*r00*x4919)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4921.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4920.value)))+(x4921.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x4922=IKcos(j8);
IkReal x4923=IKsin(j8);
IkReal x4924=(cj9*r00);
IkReal x4925=((1.0)*x4922);
IkReal x4926=(cj9*x4923);
IkReal x4927=(sj9*x4922);
IkReal x4928=((1.0)*sj9*x4923);
evalcond[0]=((((-1.0)*cj9*r20*x4925))+((r22*x4923))+((r21*x4927)));
evalcond[1]=((((-1.0)*x4924*x4925))+((r01*x4927))+((r02*x4923)));
evalcond[2]=(((r10*x4926))+(((-1.0)*r11*x4928))+((r12*x4922)));
evalcond[3]=((1.0)+(((-1.0)*cj9*r10*x4925))+((r11*x4927))+((r12*x4923)));
evalcond[4]=(((r20*x4926))+((sj5*sj6))+((r22*x4922))+(((-1.0)*r21*x4928))+(((-1.0)*cj5*cj6)));
evalcond[5]=((((-1.0)*r01*x4928))+((x4923*x4924))+(((-1.0)*cj9*r21))+((r02*x4922))+(((-1.0)*r20*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x4929=IKPowWithIntegerCheck(IKsign((((r00*sj9))+((cj9*r01)))),-1);
if(!x4929.valid){
continue;
}
CheckValue<IkReal> x4930 = IKatan2WithCheck(IkReal((((r21*sj9))+(((-1.0)*cj9*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4930.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4929.value)))+(x4930.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x4931=IKcos(j8);
IkReal x4932=IKsin(j8);
IkReal x4933=(cj9*r00);
IkReal x4934=((1.0)*x4931);
IkReal x4935=(cj9*x4932);
IkReal x4936=(sj9*x4931);
IkReal x4937=((1.0)*sj9*x4932);
evalcond[0]=((((-1.0)*cj9*r20*x4934))+((r22*x4932))+((r21*x4936)));
evalcond[1]=((((-1.0)*x4933*x4934))+((r01*x4936))+((r02*x4932)));
evalcond[2]=(((r12*x4931))+((r10*x4935))+(((-1.0)*r11*x4937)));
evalcond[3]=((1.0)+((r12*x4932))+(((-1.0)*cj9*r10*x4934))+((r11*x4936)));
evalcond[4]=(((r20*x4935))+((sj5*sj6))+((r22*x4931))+(((-1.0)*r21*x4937))+(((-1.0)*cj5*cj6)));
evalcond[5]=(((x4932*x4933))+(((-1.0)*r01*x4937))+(((-1.0)*cj9*r21))+((r02*x4931))+(((-1.0)*r20*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x4938=(((cj9*r21))+((r20*sj9)));
j8eval[0]=x4938;
j8eval[1]=((IKabs(r02))+(IKabs((((r01*sj9))+(((-1.0)*cj9*r00))))));
j8eval[2]=IKsign(x4938);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x4939=((1.0)*cj9);
IkReal x4940=((((-1.0)*r01*x4939))+(((-1.0)*r00*sj9)));
j8eval[0]=x4940;
j8eval[1]=((IKabs((((r21*sj9))+(((-1.0)*r20*x4939)))))+(IKabs(r22)));
j8eval[2]=IKsign(x4940);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x4941=cj9*cj9;
IkReal x4942=r11*r11;
IkReal x4943=(r11*sj9);
IkReal x4944=(cj9*r10);
IkReal x4945=(x4942+(r12*r12)+((x4941*(r10*r10)))+(((-1.0)*x4941*x4942))+(((-2.0)*x4943*x4944)));
j8eval[0]=x4945;
j8eval[1]=IKsign(x4945);
j8eval[2]=((IKabs(r12))+(IKabs((x4943+(((-1.0)*x4944))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x4946=cj9*cj9;
IkReal x4947=r11*r11;
IkReal x4948=(r11*sj9);
IkReal x4949=(cj9*r10);
CheckValue<IkReal> x4950=IKPowWithIntegerCheck(IKsign((x4947+(r12*r12)+((x4946*(r10*r10)))+(((-1.0)*x4946*x4947))+(((-2.0)*x4948*x4949)))),-1);
if(!x4950.valid){
continue;
}
CheckValue<IkReal> x4951 = IKatan2WithCheck(IkReal(r12),IkReal((x4948+(((-1.0)*x4949)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4951.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4950.value)))+(x4951.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x4952=IKcos(j8);
IkReal x4953=IKsin(j8);
IkReal x4954=(cj9*r00);
IkReal x4955=((1.0)*x4952);
IkReal x4956=(sj9*x4952);
IkReal x4957=(cj9*x4953);
IkReal x4958=((1.0)*sj9*x4953);
evalcond[0]=(((r22*x4953))+(((-1.0)*cj9*r20*x4955))+((r21*x4956)));
evalcond[1]=(((r02*x4953))+(((-1.0)*x4954*x4955))+((r01*x4956)));
evalcond[2]=(((r12*x4952))+((r10*x4957))+(((-1.0)*r11*x4958)));
evalcond[3]=((-1.0)+((r12*x4953))+((r11*x4956))+(((-1.0)*cj9*r10*x4955)));
evalcond[4]=(((r02*x4952))+((cj9*r21))+(((-1.0)*r01*x4958))+((x4953*x4954))+((r20*sj9)));
evalcond[5]=((((-1.0)*r21*x4958))+((r22*x4952))+((sj5*sj6))+((r20*x4957))+(((-1.0)*cj5*cj6)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x4959=((1.0)*cj9);
CheckValue<IkReal> x4960 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x4959))+((r21*sj9)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4960.valid){
continue;
}
CheckValue<IkReal> x4961=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj9))+(((-1.0)*r01*x4959)))),-1);
if(!x4961.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x4960.value)+(((1.5707963267949)*(x4961.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x4962=IKcos(j8);
IkReal x4963=IKsin(j8);
IkReal x4964=(cj9*r00);
IkReal x4965=((1.0)*x4962);
IkReal x4966=(sj9*x4962);
IkReal x4967=(cj9*x4963);
IkReal x4968=((1.0)*sj9*x4963);
evalcond[0]=(((r22*x4963))+(((-1.0)*cj9*r20*x4965))+((r21*x4966)));
evalcond[1]=(((r02*x4963))+(((-1.0)*x4964*x4965))+((r01*x4966)));
evalcond[2]=(((r12*x4962))+((r10*x4967))+(((-1.0)*r11*x4968)));
evalcond[3]=((-1.0)+((r12*x4963))+((r11*x4966))+(((-1.0)*cj9*r10*x4965)));
evalcond[4]=(((x4963*x4964))+((r02*x4962))+((cj9*r21))+(((-1.0)*r01*x4968))+((r20*sj9)));
evalcond[5]=((((-1.0)*r21*x4968))+((sj5*sj6))+((r22*x4962))+((r20*x4967))+(((-1.0)*cj5*cj6)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x4969 = IKatan2WithCheck(IkReal((((r01*sj9))+(((-1.0)*cj9*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4969.valid){
continue;
}
CheckValue<IkReal> x4970=IKPowWithIntegerCheck(IKsign((((cj9*r21))+((r20*sj9)))),-1);
if(!x4970.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x4969.value)+(((1.5707963267949)*(x4970.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x4971=IKcos(j8);
IkReal x4972=IKsin(j8);
IkReal x4973=(cj9*r00);
IkReal x4974=((1.0)*x4971);
IkReal x4975=(sj9*x4971);
IkReal x4976=(cj9*x4972);
IkReal x4977=((1.0)*sj9*x4972);
evalcond[0]=(((r22*x4972))+(((-1.0)*cj9*r20*x4974))+((r21*x4975)));
evalcond[1]=(((r02*x4972))+(((-1.0)*x4973*x4974))+((r01*x4975)));
evalcond[2]=(((r10*x4976))+((r12*x4971))+(((-1.0)*r11*x4977)));
evalcond[3]=((-1.0)+(((-1.0)*cj9*r10*x4974))+((r12*x4972))+((r11*x4975)));
evalcond[4]=(((r02*x4971))+((cj9*r21))+(((-1.0)*r01*x4977))+((r20*sj9))+((x4972*x4973)));
evalcond[5]=((((-1.0)*r21*x4977))+((r22*x4971))+((sj5*sj6))+(((-1.0)*cj5*cj6))+((r20*x4976)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4979 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4979)==0){
continue;
}
IkReal x4978=pow(x4979,-0.5);
CheckValue<IkReal> x4980 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4980.valid){
continue;
}
IkReal gconst126=((-1.0)*(x4980.value));
IkReal gconst127=((-1.0)*r01*x4978);
IkReal gconst128=(r00*x4978);
CheckValue<IkReal> x4981 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4981.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4981.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
CheckValue<IkReal> x4984 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4984.valid){
continue;
}
IkReal x4982=((-1.0)*(x4984.value));
IkReal x4983=x4978;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj9=gconst127;
cj9=gconst128;
j9=x4982;
IkReal gconst126=x4982;
IkReal gconst127=((-1.0)*r01*x4983);
IkReal gconst128=(r00*x4983);
j8eval[0]=r22;
j8eval[1]=sj4;
j8eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x4985=((1.0)*gconst128);
CheckValue<IkReal> x4986 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*r00*x4985))+((cj4*gconst127*r01))+((gconst127*r11*sj4))+(((-1.0)*r10*sj4*x4985)))),IkReal(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4986.valid){
continue;
}
CheckValue<IkReal> x4987=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst127*r20))+(((-1.0)*r21*x4985)))),-1);
if(!x4987.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x4986.value)+(((1.5707963267949)*(x4987.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x4988=IKcos(j8);
IkReal x4989=IKsin(j8);
IkReal x4990=((1.0)*gconst127);
IkReal x4991=((1.0)*sj4);
IkReal x4992=(gconst128*r21);
IkReal x4993=(gconst128*x4989);
IkReal x4994=(gconst127*x4988);
IkReal x4995=((1.0)*gconst128*x4988);
evalcond[0]=((((-1.0)*r20*x4995))+((r22*x4989))+((r21*x4994)));
evalcond[1]=(((r12*x4989))+cj4+((r11*x4994))+(((-1.0)*r10*x4995)));
evalcond[2]=((((-1.0)*r00*x4995))+(((-1.0)*x4991))+((r01*x4994))+((r02*x4989)));
evalcond[3]=(((sj5*sj6))+(((-1.0)*r21*x4989*x4990))+((r20*x4993))+((r22*x4988))+(((-1.0)*cj5*cj6)));
evalcond[4]=((((-1.0)*cj4*x4992))+(((-1.0)*cj4*r20*x4990))+((r02*x4988))+(((-1.0)*r01*x4989*x4990))+((r00*x4993)));
evalcond[5]=(((r12*x4988))+(((-1.0)*r11*x4989*x4990))+(((-1.0)*x4991*x4992))+((r10*x4993))+(((-1.0)*r20*sj4*x4990)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x4996=IKPowWithIntegerCheck(IKsign((((gconst128*r11))+((gconst127*r10)))),-1);
if(!x4996.valid){
continue;
}
CheckValue<IkReal> x4997 = IKatan2WithCheck(IkReal(((((-1.0)*gconst128*r20*sj4))+((gconst127*r21*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x4997.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4996.value)))+(x4997.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x4998=IKcos(j8);
IkReal x4999=IKsin(j8);
IkReal x5000=((1.0)*gconst127);
IkReal x5001=((1.0)*sj4);
IkReal x5002=(gconst128*r21);
IkReal x5003=(gconst128*x4999);
IkReal x5004=(gconst127*x4998);
IkReal x5005=((1.0)*gconst128*x4998);
evalcond[0]=(((r22*x4999))+((r21*x5004))+(((-1.0)*r20*x5005)));
evalcond[1]=(((r11*x5004))+cj4+((r12*x4999))+(((-1.0)*r10*x5005)));
evalcond[2]=(((r02*x4999))+((r01*x5004))+(((-1.0)*r00*x5005))+(((-1.0)*x5001)));
evalcond[3]=(((r22*x4998))+((r20*x5003))+((sj5*sj6))+(((-1.0)*r21*x4999*x5000))+(((-1.0)*cj5*cj6)));
evalcond[4]=((((-1.0)*cj4*r20*x5000))+((r02*x4998))+((r00*x5003))+(((-1.0)*r01*x4999*x5000))+(((-1.0)*cj4*x5002)));
evalcond[5]=((((-1.0)*r20*sj4*x5000))+((r10*x5003))+(((-1.0)*x5001*x5002))+((r12*x4998))+(((-1.0)*r11*x4999*x5000)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5007 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5007)==0){
continue;
}
IkReal x5006=pow(x5007,-0.5);
CheckValue<IkReal> x5008 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5008.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x5008.value))));
IkReal gconst130=((1.0)*r01*x5006);
IkReal gconst131=((-1.0)*r00*x5006);
CheckValue<IkReal> x5009 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5009.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5009.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[5];
CheckValue<IkReal> x5012 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5012.valid){
continue;
}
IkReal x5010=((1.0)*(x5012.value));
IkReal x5011=x5006;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj9=gconst130;
cj9=gconst131;
j9=((3.14159265)+(((-1.0)*x5010)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5010)));
IkReal gconst130=((1.0)*r01*x5011);
IkReal gconst131=((-1.0)*r00*x5011);
j8eval[0]=0;
j8eval[1]=cj4;
j8eval[2]=r22;
j8eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j8eval[4]=0;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  || IKabs(j8eval[4]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
CheckValue<IkReal> x5015 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5015.valid){
continue;
}
IkReal x5013=((1.0)*(x5015.value));
IkReal x5014=x5006;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj9=gconst130;
cj9=gconst131;
j9=((3.14159265)+(((-1.0)*x5013)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5013)));
IkReal gconst130=((1.0)*r01*x5014);
IkReal gconst131=((-1.0)*r00*x5014);
j8eval[0]=r22;
j8eval[1]=sj4;
j8eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
CheckValue<IkReal> x5018 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5018.valid){
continue;
}
IkReal x5016=((1.0)*(x5018.value));
IkReal x5017=x5006;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj9=gconst130;
cj9=gconst131;
j9=((3.14159265)+(((-1.0)*x5016)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5016)));
IkReal gconst130=((1.0)*r01*x5017);
IkReal gconst131=((-1.0)*r00*x5017);
IkReal x5019=r02*r02;
IkReal x5020=(r12*sj4);
IkReal x5021=x5006;
IkReal x5022=(cj4*x5021);
j8eval[0]=((IKabs(((((-1.0)*x5022))+((r02*x5020*x5021))+((x5019*x5022)))))+(IKabs(((((-1.0)*cj4*r02))+(((-1.0)*x5020))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x5023=((1.0)*gconst131);
CheckValue<IkReal> x5024=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5023))+(((-1.0)*gconst130*r20)))),-1);
if(!x5024.valid){
continue;
}
CheckValue<IkReal> x5025 = IKatan2WithCheck(IkReal(((((-1.0)*r10*sj4*x5023))+((gconst130*r11*sj4))+(((-1.0)*cj4*r00*x5023))+((cj4*gconst130*r01)))),IkReal(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5025.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5024.value)))+(x5025.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x5026=IKcos(j8);
IkReal x5027=IKsin(j8);
IkReal x5028=((1.0)*sj4);
IkReal x5029=(gconst130*r21);
IkReal x5030=(gconst130*r11);
IkReal x5031=(gconst131*r21);
IkReal x5032=(gconst130*r01);
IkReal x5033=(gconst131*x5027);
IkReal x5034=((1.0)*gconst130*r20);
IkReal x5035=((1.0)*x5027);
IkReal x5036=((1.0)*gconst131*x5026);
evalcond[0]=(((x5026*x5029))+((r22*x5027))+(((-1.0)*r20*x5036)));
evalcond[1]=(cj4+((r12*x5027))+((x5026*x5030))+(((-1.0)*r10*x5036)));
evalcond[2]=(((r02*x5027))+((x5026*x5032))+(((-1.0)*x5028))+(((-1.0)*r00*x5036)));
evalcond[3]=(((r20*x5033))+((sj5*sj6))+(((-1.0)*x5029*x5035))+((r22*x5026))+(((-1.0)*cj5*cj6)));
evalcond[4]=(((r02*x5026))+(((-1.0)*cj4*x5034))+(((-1.0)*x5032*x5035))+((r00*x5033))+(((-1.0)*cj4*x5031)));
evalcond[5]=((((-1.0)*x5028*x5031))+(((-1.0)*x5030*x5035))+((r12*x5026))+(((-1.0)*gconst130*r20*x5028))+((r10*x5033)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x5037=IKPowWithIntegerCheck(IKsign((((gconst131*r11))+((gconst130*r10)))),-1);
if(!x5037.valid){
continue;
}
CheckValue<IkReal> x5038 = IKatan2WithCheck(IkReal((((gconst130*r21*sj4))+(((-1.0)*gconst131*r20*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x5038.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5037.value)))+(x5038.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x5039=IKcos(j8);
IkReal x5040=IKsin(j8);
IkReal x5041=((1.0)*sj4);
IkReal x5042=(gconst130*r21);
IkReal x5043=(gconst130*r11);
IkReal x5044=(gconst131*r21);
IkReal x5045=(gconst130*r01);
IkReal x5046=(gconst131*x5040);
IkReal x5047=((1.0)*gconst130*r20);
IkReal x5048=((1.0)*x5040);
IkReal x5049=((1.0)*gconst131*x5039);
evalcond[0]=((((-1.0)*r20*x5049))+((x5039*x5042))+((r22*x5040)));
evalcond[1]=(cj4+((x5039*x5043))+(((-1.0)*r10*x5049))+((r12*x5040)));
evalcond[2]=((((-1.0)*x5041))+((x5039*x5045))+((r02*x5040))+(((-1.0)*r00*x5049)));
evalcond[3]=((((-1.0)*x5042*x5048))+((sj5*sj6))+((r20*x5046))+((r22*x5039))+(((-1.0)*cj5*cj6)));
evalcond[4]=((((-1.0)*cj4*x5047))+((r02*x5039))+(((-1.0)*cj4*x5044))+((r00*x5046))+(((-1.0)*x5045*x5048)));
evalcond[5]=(((r12*x5039))+(((-1.0)*x5043*x5048))+(((-1.0)*x5041*x5044))+((r10*x5046))+(((-1.0)*gconst130*r20*x5041)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x5050=IKPowWithIntegerCheck(IKsign((((gconst131*r01))+((gconst130*r00)))),-1);
if(!x5050.valid){
continue;
}
CheckValue<IkReal> x5051 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*gconst131*r20))+((cj4*gconst130*r21)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5051.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5050.value)))+(x5051.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x5052=IKcos(j8);
IkReal x5053=IKsin(j8);
IkReal x5054=((1.0)*sj4);
IkReal x5055=(gconst130*r21);
IkReal x5056=(gconst130*r11);
IkReal x5057=(gconst131*r21);
IkReal x5058=(gconst130*r01);
IkReal x5059=(gconst131*x5053);
IkReal x5060=((1.0)*gconst130*r20);
IkReal x5061=((1.0)*x5053);
IkReal x5062=((1.0)*gconst131*x5052);
evalcond[0]=(((r22*x5053))+((x5052*x5055))+(((-1.0)*r20*x5062)));
evalcond[1]=(cj4+((r12*x5053))+((x5052*x5056))+(((-1.0)*r10*x5062)));
evalcond[2]=(((x5052*x5058))+(((-1.0)*x5054))+(((-1.0)*r00*x5062))+((r02*x5053)));
evalcond[3]=(((r20*x5059))+((sj5*sj6))+((r22*x5052))+(((-1.0)*x5055*x5061))+(((-1.0)*cj5*cj6)));
evalcond[4]=((((-1.0)*x5058*x5061))+((r00*x5059))+(((-1.0)*cj4*x5057))+(((-1.0)*cj4*x5060))+((r02*x5052)));
evalcond[5]=((((-1.0)*x5056*x5061))+((r10*x5059))+(((-1.0)*gconst130*r20*x5054))+(((-1.0)*x5054*x5057))+((r12*x5052)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal x5063=(((r10*sj9))+((cj9*r11)));
j8eval[0]=x5063;
j8eval[1]=((IKabs(r22))+(IKabs((((r21*sj9))+(((-1.0)*cj9*r20))))));
j8eval[2]=IKsign(x5063);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal x5064=((1.0)*cj9);
IkReal x5065=((((-1.0)*r21*x5064))+(((-1.0)*r20*sj9)));
j8eval[0]=x5065;
j8eval[1]=((IKabs(r12))+(IKabs((((r11*sj9))+(((-1.0)*r10*x5064))))));
j8eval[2]=IKsign(x5065);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal x5066=cj9*cj9;
IkReal x5067=r01*r01;
IkReal x5068=(cj9*r00);
IkReal x5069=(r01*sj9);
IkReal x5070=((((-2.0)*x5068*x5069))+x5067+(((-1.0)*x5066*x5067))+(r02*r02)+((x5066*(r00*r00))));
j8eval[0]=x5070;
j8eval[1]=((IKabs(r02))+(IKabs((x5069+(((-1.0)*x5068))))));
j8eval[2]=IKsign(x5070);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x5071=cj9*cj9;
IkReal x5072=r01*r01;
IkReal x5073=(cj9*r00);
IkReal x5074=(r01*sj9);
CheckValue<IkReal> x5075 = IKatan2WithCheck(IkReal(r02),IkReal((x5074+(((-1.0)*x5073)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5075.valid){
continue;
}
CheckValue<IkReal> x5076=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5071*x5072))+((x5071*(r00*r00)))+(((-2.0)*x5073*x5074))+x5072+(r02*r02))),-1);
if(!x5076.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x5075.value)+(((1.5707963267949)*(x5076.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x5077=IKcos(j8);
IkReal x5078=IKsin(j8);
IkReal x5079=(cj9*r00);
IkReal x5080=((1.0)*x5077);
IkReal x5081=(cj9*x5078);
IkReal x5082=(sj9*x5077);
IkReal x5083=((1.0)*sj9*x5078);
evalcond[0]=(((r21*x5082))+(((-1.0)*cj9*r20*x5080))+((r22*x5078)));
evalcond[1]=(((r11*x5082))+(((-1.0)*cj9*r10*x5080))+((r12*x5078)));
evalcond[2]=((((-1.0)*r01*x5083))+((r02*x5077))+((x5078*x5079)));
evalcond[3]=((-1.0)+((r01*x5082))+(((-1.0)*x5079*x5080))+((r02*x5078)));
evalcond[4]=(((sj5*sj6))+((r20*x5081))+(((-1.0)*r21*x5083))+(((-1.0)*cj5*cj6))+((r22*x5077)));
evalcond[5]=((((-1.0)*r11*x5083))+((r10*x5081))+(((-1.0)*cj9*r21))+((r12*x5077))+(((-1.0)*r20*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x5084=((1.0)*cj9);
CheckValue<IkReal> x5085=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5084))+(((-1.0)*r20*sj9)))),-1);
if(!x5085.valid){
continue;
}
CheckValue<IkReal> x5086 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x5084))+((r11*sj9)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5086.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5085.value)))+(x5086.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x5087=IKcos(j8);
IkReal x5088=IKsin(j8);
IkReal x5089=(cj9*r00);
IkReal x5090=((1.0)*x5087);
IkReal x5091=(cj9*x5088);
IkReal x5092=(sj9*x5087);
IkReal x5093=((1.0)*sj9*x5088);
evalcond[0]=(((r21*x5092))+((r22*x5088))+(((-1.0)*cj9*r20*x5090)));
evalcond[1]=(((r11*x5092))+((r12*x5088))+(((-1.0)*cj9*r10*x5090)));
evalcond[2]=((((-1.0)*r01*x5093))+((x5088*x5089))+((r02*x5087)));
evalcond[3]=((-1.0)+((r01*x5092))+(((-1.0)*x5089*x5090))+((r02*x5088)));
evalcond[4]=(((sj5*sj6))+((r22*x5087))+((r20*x5091))+(((-1.0)*cj5*cj6))+(((-1.0)*r21*x5093)));
evalcond[5]=((((-1.0)*r11*x5093))+((r10*x5091))+((r12*x5087))+(((-1.0)*cj9*r21))+(((-1.0)*r20*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x5094=IKPowWithIntegerCheck(IKsign((((r10*sj9))+((cj9*r11)))),-1);
if(!x5094.valid){
continue;
}
CheckValue<IkReal> x5095 = IKatan2WithCheck(IkReal((((r21*sj9))+(((-1.0)*cj9*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5095.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5094.value)))+(x5095.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x5096=IKcos(j8);
IkReal x5097=IKsin(j8);
IkReal x5098=(cj9*r00);
IkReal x5099=((1.0)*x5096);
IkReal x5100=(cj9*x5097);
IkReal x5101=(sj9*x5096);
IkReal x5102=((1.0)*sj9*x5097);
evalcond[0]=(((r22*x5097))+((r21*x5101))+(((-1.0)*cj9*r20*x5099)));
evalcond[1]=(((r12*x5097))+(((-1.0)*cj9*r10*x5099))+((r11*x5101)));
evalcond[2]=(((r02*x5096))+((x5097*x5098))+(((-1.0)*r01*x5102)));
evalcond[3]=((-1.0)+((r01*x5101))+(((-1.0)*x5098*x5099))+((r02*x5097)));
evalcond[4]=((((-1.0)*r21*x5102))+((r20*x5100))+((sj5*sj6))+((r22*x5096))+(((-1.0)*cj5*cj6)));
evalcond[5]=(((r12*x5096))+(((-1.0)*cj9*r21))+(((-1.0)*r11*x5102))+((r10*x5100))+(((-1.0)*r20*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal x5103=(((cj9*r21))+((r20*sj9)));
j8eval[0]=x5103;
j8eval[1]=((IKabs(r12))+(IKabs((((r11*sj9))+(((-1.0)*cj9*r10))))));
j8eval[2]=IKsign(x5103);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal x5104=((1.0)*cj9);
IkReal x5105=((((-1.0)*r10*sj9))+(((-1.0)*r11*x5104)));
j8eval[0]=x5105;
j8eval[1]=((IKabs(r22))+(IKabs((((r21*sj9))+(((-1.0)*r20*x5104))))));
j8eval[2]=IKsign(x5105);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal x5106=cj9*cj9;
IkReal x5107=r01*r01;
IkReal x5108=(r01*sj9);
IkReal x5109=(cj9*r00);
IkReal x5110=(((x5106*x5107))+(((2.0)*x5108*x5109))+(((-1.0)*(r02*r02)))+(((-1.0)*x5107))+(((-1.0)*x5106*(r00*r00))));
j8eval[0]=x5110;
j8eval[1]=IKsign(x5110);
j8eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x5109))+x5108))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x5111=cj9*cj9;
IkReal x5112=r01*r01;
IkReal x5113=(r01*sj9);
IkReal x5114=(cj9*r00);
CheckValue<IkReal> x5115=IKPowWithIntegerCheck(IKsign(((((2.0)*x5113*x5114))+(((-1.0)*(r02*r02)))+(((-1.0)*x5112))+((x5111*x5112))+(((-1.0)*x5111*(r00*r00))))),-1);
if(!x5115.valid){
continue;
}
CheckValue<IkReal> x5116 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x5114))+x5113)),IKFAST_ATAN2_MAGTHRESH);
if(!x5116.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5115.value)))+(x5116.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x5117=IKcos(j8);
IkReal x5118=IKsin(j8);
IkReal x5119=(cj9*r00);
IkReal x5120=((1.0)*x5117);
IkReal x5121=(sj9*x5117);
IkReal x5122=(cj9*x5118);
IkReal x5123=((1.0)*sj9*x5118);
evalcond[0]=((((-1.0)*cj9*r20*x5120))+((r22*x5118))+((r21*x5121)));
evalcond[1]=((((-1.0)*cj9*r10*x5120))+((r11*x5121))+((r12*x5118)));
evalcond[2]=(((r02*x5117))+((x5118*x5119))+(((-1.0)*r01*x5123)));
evalcond[3]=((1.0)+((r02*x5118))+((r01*x5121))+(((-1.0)*x5119*x5120)));
evalcond[4]=(((r10*x5122))+((cj9*r21))+(((-1.0)*r11*x5123))+((r20*sj9))+((r12*x5117)));
evalcond[5]=(((sj5*sj6))+((r22*x5117))+(((-1.0)*r21*x5123))+((r20*x5122))+(((-1.0)*cj5*cj6)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x5124=((1.0)*cj9);
CheckValue<IkReal> x5125 = IKatan2WithCheck(IkReal((((r21*sj9))+(((-1.0)*r20*x5124)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5125.valid){
continue;
}
CheckValue<IkReal> x5126=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj9))+(((-1.0)*r11*x5124)))),-1);
if(!x5126.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x5125.value)+(((1.5707963267949)*(x5126.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x5127=IKcos(j8);
IkReal x5128=IKsin(j8);
IkReal x5129=(cj9*r00);
IkReal x5130=((1.0)*x5127);
IkReal x5131=(sj9*x5127);
IkReal x5132=(cj9*x5128);
IkReal x5133=((1.0)*sj9*x5128);
evalcond[0]=(((r22*x5128))+(((-1.0)*cj9*r20*x5130))+((r21*x5131)));
evalcond[1]=((((-1.0)*cj9*r10*x5130))+((r12*x5128))+((r11*x5131)));
evalcond[2]=((((-1.0)*r01*x5133))+((x5128*x5129))+((r02*x5127)));
evalcond[3]=((1.0)+((r01*x5131))+(((-1.0)*x5129*x5130))+((r02*x5128)));
evalcond[4]=(((r12*x5127))+((r10*x5132))+((cj9*r21))+(((-1.0)*r11*x5133))+((r20*sj9)));
evalcond[5]=(((r22*x5127))+((sj5*sj6))+(((-1.0)*r21*x5133))+((r20*x5132))+(((-1.0)*cj5*cj6)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x5134=IKPowWithIntegerCheck(IKsign((((cj9*r21))+((r20*sj9)))),-1);
if(!x5134.valid){
continue;
}
CheckValue<IkReal> x5135 = IKatan2WithCheck(IkReal((((r11*sj9))+(((-1.0)*cj9*r10)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5135.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5134.value)))+(x5135.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x5136=IKcos(j8);
IkReal x5137=IKsin(j8);
IkReal x5138=(cj9*r00);
IkReal x5139=((1.0)*x5136);
IkReal x5140=(sj9*x5136);
IkReal x5141=(cj9*x5137);
IkReal x5142=((1.0)*sj9*x5137);
evalcond[0]=(((r21*x5140))+(((-1.0)*cj9*r20*x5139))+((r22*x5137)));
evalcond[1]=((((-1.0)*cj9*r10*x5139))+((r12*x5137))+((r11*x5140)));
evalcond[2]=((((-1.0)*r01*x5142))+((x5137*x5138))+((r02*x5136)));
evalcond[3]=((1.0)+((r01*x5140))+(((-1.0)*x5138*x5139))+((r02*x5137)));
evalcond[4]=(((r10*x5141))+((r12*x5136))+(((-1.0)*r11*x5142))+((cj9*r21))+((r20*sj9)));
evalcond[5]=(((r22*x5136))+(((-1.0)*r21*x5142))+((sj5*sj6))+((r20*x5141))+(((-1.0)*cj5*cj6)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x5143=((-1.0)*px);
sj7=1.0;
cj7=0;
j7=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x5143);
rxp1_1=(px*r21);
rxp1_2=(r11*x5143);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j8eval[0]=(((cj9*r20))+(((-1.0)*r21*sj9)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x5145=IKPowWithIntegerCheck((((cj9*r20))+(((-1.0)*r21*sj9))),-1);
if(!x5145.valid){
continue;
}
IkReal x5144=x5145.value;
sj8array[0]=((((-1.0)*sj5*sj6*x5144))+((cj5*cj6*x5144)));
if( sj8array[0] >= -1-IKFAST_SINCOS_THRESH && sj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKasin(sj8array[0]);
    cj8array[0] = IKcos(j8array[0]);
    sj8array[1] = sj8array[0];
    j8array[1] = j8array[0] > 0 ? (IKPI-j8array[0]) : (-IKPI-j8array[0]);
    cj8array[1] = -cj8array[0];
}
else if( isnan(sj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[3];
IkReal x5146=IKcos(j8);
IkReal x5147=(sj9*x5146);
IkReal x5148=((1.0)*cj9*x5146);
evalcond[0]=(r02*x5146);
evalcond[1]=(((r21*x5147))+(((-1.0)*r20*x5148)));
evalcond[2]=((((-1.0)*r10*x5148))+((r11*x5147)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x5149=((1.0)*cj9);
CheckValue<IkReal> x5150 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*r00*x5149))+(((-1.0)*r10*sj4*x5149))+((r11*sj4*sj9))+((cj4*r01*sj9)))),IkReal(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5150.valid){
continue;
}
CheckValue<IkReal> x5151=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5149))+(((-1.0)*r20*sj9)))),-1);
if(!x5151.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x5150.value)+(((1.5707963267949)*(x5151.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x5152=IKcos(j8);
IkReal x5153=IKsin(j8);
IkReal x5154=(cj9*r00);
IkReal x5155=((1.0)*sj4);
IkReal x5156=(r20*sj9);
IkReal x5157=((1.0)*cj4);
IkReal x5158=(cj9*r21);
IkReal x5159=((1.0)*x5152);
IkReal x5160=(cj9*x5153);
IkReal x5161=(sj9*x5152);
IkReal x5162=((1.0)*sj9*x5153);
evalcond[0]=(((r21*x5161))+((r22*x5153))+(((-1.0)*cj9*r20*x5159)));
evalcond[1]=(cj4+((r12*x5153))+(((-1.0)*cj9*r10*x5159))+((r11*x5161)));
evalcond[2]=((((-1.0)*x5154*x5159))+((r01*x5161))+((r02*x5153))+(((-1.0)*x5155)));
evalcond[3]=((((-1.0)*r21*x5162))+((sj5*sj6))+((r20*x5160))+((r22*x5152))+(((-1.0)*cj5*cj6)));
evalcond[4]=(((x5153*x5154))+((r02*x5152))+(((-1.0)*r01*x5162))+(((-1.0)*x5156*x5157))+(((-1.0)*x5157*x5158)));
evalcond[5]=(((r10*x5160))+((r12*x5152))+(((-1.0)*r11*x5162))+(((-1.0)*x5155*x5158))+(((-1.0)*x5155*x5156)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x5163 = IKatan2WithCheck(IkReal((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x5163.valid){
continue;
}
CheckValue<IkReal> x5164=IKPowWithIntegerCheck(IKsign((((r10*sj9))+((cj9*r11)))),-1);
if(!x5164.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x5163.value)+(((1.5707963267949)*(x5164.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x5165=IKcos(j8);
IkReal x5166=IKsin(j8);
IkReal x5167=(cj9*r00);
IkReal x5168=((1.0)*sj4);
IkReal x5169=(r20*sj9);
IkReal x5170=((1.0)*cj4);
IkReal x5171=(cj9*r21);
IkReal x5172=((1.0)*x5165);
IkReal x5173=(cj9*x5166);
IkReal x5174=(sj9*x5165);
IkReal x5175=((1.0)*sj9*x5166);
evalcond[0]=((((-1.0)*cj9*r20*x5172))+((r22*x5166))+((r21*x5174)));
evalcond[1]=((((-1.0)*cj9*r10*x5172))+cj4+((r12*x5166))+((r11*x5174)));
evalcond[2]=(((r01*x5174))+(((-1.0)*x5168))+((r02*x5166))+(((-1.0)*x5167*x5172)));
evalcond[3]=((((-1.0)*r21*x5175))+((sj5*sj6))+((r20*x5173))+((r22*x5165))+(((-1.0)*cj5*cj6)));
evalcond[4]=((((-1.0)*x5170*x5171))+((x5166*x5167))+(((-1.0)*x5169*x5170))+(((-1.0)*r01*x5175))+((r02*x5165)));
evalcond[5]=(((r10*x5173))+(((-1.0)*r11*x5175))+(((-1.0)*x5168*x5169))+(((-1.0)*x5168*x5171))+((r12*x5165)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x5176=IKPowWithIntegerCheck(IKsign((((r00*sj9))+((cj9*r01)))),-1);
if(!x5176.valid){
continue;
}
CheckValue<IkReal> x5177 = IKatan2WithCheck(IkReal((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5177.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5176.value)))+(x5177.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x5178=IKcos(j8);
IkReal x5179=IKsin(j8);
IkReal x5180=(cj9*r00);
IkReal x5181=((1.0)*sj4);
IkReal x5182=(r20*sj9);
IkReal x5183=((1.0)*cj4);
IkReal x5184=(cj9*r21);
IkReal x5185=((1.0)*x5178);
IkReal x5186=(cj9*x5179);
IkReal x5187=(sj9*x5178);
IkReal x5188=((1.0)*sj9*x5179);
evalcond[0]=((((-1.0)*cj9*r20*x5185))+((r21*x5187))+((r22*x5179)));
evalcond[1]=(cj4+(((-1.0)*cj9*r10*x5185))+((r12*x5179))+((r11*x5187)));
evalcond[2]=(((r01*x5187))+((r02*x5179))+(((-1.0)*x5180*x5185))+(((-1.0)*x5181)));
evalcond[3]=((((-1.0)*r21*x5188))+((sj5*sj6))+((r20*x5186))+(((-1.0)*cj5*cj6))+((r22*x5178)));
evalcond[4]=((((-1.0)*x5183*x5184))+(((-1.0)*x5182*x5183))+((x5179*x5180))+((r02*x5178))+(((-1.0)*r01*x5188)));
evalcond[5]=(((r12*x5178))+((r10*x5186))+(((-1.0)*r11*x5188))+(((-1.0)*x5181*x5182))+(((-1.0)*x5181*x5184)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x5189=cj9*cj9;
IkReal x5190=r21*r21;
IkReal x5191=(cj5*cj6);
IkReal x5192=(sj5*sj6);
IkReal x5193=(cj9*r20);
IkReal x5194=(r21*sj9);
CheckValue<IkReal> x5195=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-1.0)*x5189*x5190))+((x5189*(r20*r20)))+x5190+(((-2.0)*x5193*x5194)))),-1);
if(!x5195.valid){
continue;
}
CheckValue<IkReal> x5196 = IKatan2WithCheck(IkReal(((((-1.0)*x5191*x5194))+(((-1.0)*x5192*x5193))+((x5192*x5194))+((x5191*x5193)))),IkReal((((r22*x5191))+(((-1.0)*r22*x5192)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5196.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5195.value)))+(x5196.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[2];
IkReal x5197=IKcos(j8);
IkReal x5198=IKsin(j8);
IkReal x5199=(r21*sj9);
IkReal x5200=(cj9*r20);
evalcond[0]=(((r22*x5198))+((x5197*x5199))+(((-1.0)*x5197*x5200)));
evalcond[1]=(((sj5*sj6))+((x5198*x5200))+((r22*x5197))+(((-1.0)*cj5*cj6))+(((-1.0)*x5198*x5199)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5201=(cj8*cj9);
IkReal x5202=(cj8*sj9);
if( IKabs((((r01*x5202))+(((-1.0)*r00*x5201))+((r02*sj8)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x5201))+(((-1.0)*r12*sj8))+(((-1.0)*r11*x5202)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x5202))+(((-1.0)*r00*x5201))+((r02*sj8))))+IKsqr((((r10*x5201))+(((-1.0)*r12*sj8))+(((-1.0)*r11*x5202))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r01*x5202))+(((-1.0)*r00*x5201))+((r02*sj8))), (((r10*x5201))+(((-1.0)*r12*sj8))+(((-1.0)*r11*x5202))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x5203=IKcos(j4);
IkReal x5204=IKsin(j4);
IkReal x5205=(cj9*r10);
IkReal x5206=(cj5*sj6);
IkReal x5207=(cj9*r11);
IkReal x5208=(r00*sj9);
IkReal x5209=((1.0)*sj9);
IkReal x5210=(cj8*sj9);
IkReal x5211=((1.0)*cj8);
IkReal x5212=(sj5*sj6);
IkReal x5213=(cj6*sj5);
IkReal x5214=((0.425)*sj5);
IkReal x5215=(cj5*cj6);
IkReal x5216=(cj9*r21);
IkReal x5217=(cj9*r01);
IkReal x5218=(cj9*r00);
IkReal x5219=(r10*sj9);
IkReal x5220=((0.39225)*x5204);
IkReal x5221=((1.0)*x5203);
IkReal x5222=((1.0)*x5204);
IkReal x5223=((0.39225)*x5203);
evalcond[0]=(x5203+((r11*x5210))+((r12*sj8))+(((-1.0)*x5205*x5211)));
evalcond[1]=(((r01*x5210))+((r02*sj8))+(((-1.0)*x5211*x5218))+(((-1.0)*x5222)));
evalcond[2]=(((x5203*x5215))+(((-1.0)*x5212*x5221))+x5217+x5208);
evalcond[3]=((((-1.0)*x5212*x5222))+x5219+x5207+((x5204*x5215)));
evalcond[4]=((((-1.0)*r01*sj8*x5209))+((cj8*r02))+(((-1.0)*x5216*x5221))+(((-1.0)*r20*x5203*x5209))+((sj8*x5218)));
evalcond[5]=((((-1.0)*r11*sj8*x5209))+((cj8*r12))+(((-1.0)*x5216*x5222))+((sj8*x5205))+(((-1.0)*r20*x5204*x5209)));
evalcond[6]=(((x5203*x5214))+(((-0.10915)*x5204))+((x5213*x5223))+(((-0.09465)*x5217))+(((-1.0)*px))+((x5206*x5223))+(((-0.09465)*x5208)));
evalcond[7]=(((x5213*x5220))+(((0.10915)*x5203))+(((-0.09465)*x5219))+(((-1.0)*py))+((x5206*x5220))+(((-0.09465)*x5207))+((x5204*x5214)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5224=((1.0)*sj9);
IkReal x5225=((1.0)*cj9);
CheckValue<IkReal> x5226 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x5225))+(((-1.0)*r10*x5224)))),IkReal(((((-1.0)*r01*x5225))+(((-1.0)*r00*x5224)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5226.valid){
continue;
}
CheckValue<IkReal> x5227=IKPowWithIntegerCheck(IKsign((((cj5*cj6))+(((-1.0)*sj5*sj6)))),-1);
if(!x5227.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5226.value)+(((1.5707963267949)*(x5227.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x5228=IKcos(j4);
IkReal x5229=IKsin(j4);
IkReal x5230=((0.39225)*cj6);
IkReal x5231=(cj9*r11);
IkReal x5232=(r00*sj9);
IkReal x5233=((1.0)*sj6);
IkReal x5234=(cj9*r01);
IkReal x5235=((0.39225)*sj6);
IkReal x5236=(r10*sj9);
IkReal x5237=(sj5*x5229);
IkReal x5238=(sj5*x5228);
IkReal x5239=(cj5*x5228);
IkReal x5240=(cj5*x5229);
evalcond[0]=(x5232+x5234+((cj6*x5239))+(((-1.0)*x5233*x5238)));
evalcond[1]=(x5231+x5236+((cj6*x5240))+(((-1.0)*x5233*x5237)));
evalcond[2]=((((0.425)*x5238))+((x5235*x5239))+(((-0.10915)*x5229))+(((-1.0)*px))+((x5230*x5238))+(((-0.09465)*x5232))+(((-0.09465)*x5234)));
evalcond[3]=((((0.10915)*x5228))+((x5235*x5240))+(((0.425)*x5237))+(((-1.0)*py))+((x5230*x5237))+(((-0.09465)*x5231))+(((-0.09465)*x5236)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j8eval[3];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
IkReal x5241=(((r00*sj9))+((cj9*r01)));
j8eval[0]=x5241;
j8eval[1]=IKsign(x5241);
j8eval[2]=((IKabs((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))))+(IKabs((cj4*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
IkReal x5242=(((r10*sj9))+((cj9*r11)));
j8eval[0]=x5242;
j8eval[1]=IKsign(x5242);
j8eval[2]=((IKabs((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))))+(IKabs((r22*sj4))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
IkReal x5243=((1.0)*cj9);
IkReal x5244=((((-1.0)*r21*x5243))+(((-1.0)*r20*sj9)));
j8eval[0]=x5244;
j8eval[1]=((IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))))+(IKabs(((((-1.0)*cj4*r00*x5243))+((r11*sj4*sj9))+(((-1.0)*r10*sj4*x5243))+((cj4*r01*sj9))))));
j8eval[2]=IKsign(x5244);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x5245=((-1.0)*r20);
IkReal x5247 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5247)==0){
continue;
}
IkReal x5246=pow(x5247,-0.5);
CheckValue<IkReal> x5248 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5245),IKFAST_ATAN2_MAGTHRESH);
if(!x5248.valid){
continue;
}
IkReal gconst114=((-1.0)*(x5248.value));
IkReal gconst115=(r21*x5246);
IkReal gconst116=(x5245*x5246);
CheckValue<IkReal> x5249 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5249.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5249.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x5250=((-1.0)*r20);
IkReal x5251=x5246;
CheckValue<IkReal> x5253 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5250),IKFAST_ATAN2_MAGTHRESH);
if(!x5253.valid){
continue;
}
IkReal x5252=((-1.0)*(x5253.value));
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj9=gconst115;
cj9=gconst116;
j9=x5252;
IkReal gconst114=x5252;
IkReal gconst115=(r21*x5251);
IkReal gconst116=(x5250*x5251);
j8eval[0]=cj4;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
IkReal x5254=((-1.0)*r20);
IkReal x5255=x5246;
CheckValue<IkReal> x5257 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5254),IKFAST_ATAN2_MAGTHRESH);
if(!x5257.valid){
continue;
}
IkReal x5256=((-1.0)*(x5257.value));
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj9=gconst115;
cj9=gconst116;
j9=x5256;
IkReal gconst114=x5256;
IkReal gconst115=(r21*x5255);
IkReal gconst116=(x5254*x5255);
j8eval[0]=sj4;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x5258=((-1.0)*r20);
IkReal x5259=x5246;
CheckValue<IkReal> x5261 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5258),IKFAST_ATAN2_MAGTHRESH);
if(!x5261.valid){
continue;
}
IkReal x5260=((-1.0)*(x5261.value));
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj9=gconst115;
cj9=gconst116;
j9=x5260;
IkReal gconst114=x5260;
IkReal gconst115=(r21*x5259);
IkReal gconst116=(x5258*x5259);
IkReal x5262=r22*r22;
CheckValue<IkReal> x5265=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x5262))),-1);
if(!x5265.valid){
continue;
}
IkReal x5263=x5265.value;
IkReal x5264=((((2.0)*x5263*(r20*r20)*(r21*r21)))+((x5263*(r21*r21*r21*r21)))+x5262+((x5263*(r20*r20*r20*r20))));
j8eval[0]=x5264;
j8eval[1]=IKsign(x5264);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x5266=(gconst116*r20);
IkReal x5267=(cj5*cj6);
IkReal x5268=(gconst115*r21);
IkReal x5269=((1.0)*sj5*sj6);
CheckValue<IkReal> x5270=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x5266*x5268))+(x5268*x5268)+(x5266*x5266))),-1);
if(!x5270.valid){
continue;
}
CheckValue<IkReal> x5271 = IKatan2WithCheck(IkReal((((sj5*sj6*x5268))+((x5266*x5267))+(((-1.0)*x5267*x5268))+(((-1.0)*x5266*x5269)))),IkReal(((((-1.0)*r22*x5269))+((r22*x5267)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5271.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5270.value)))+(x5271.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x5272=IKcos(j8);
IkReal x5273=IKsin(j8);
IkReal x5274=(gconst115*r21);
IkReal x5275=((1.0)*sj4);
IkReal x5276=(gconst115*r20);
IkReal x5277=((1.0)*cj4);
IkReal x5278=(gconst115*r11);
IkReal x5279=(gconst115*r01);
IkReal x5280=(gconst116*r21);
IkReal x5281=(gconst116*x5273);
IkReal x5282=((1.0)*x5273);
IkReal x5283=((1.0)*gconst116*x5272);
evalcond[0]=(((x5272*x5274))+((r22*x5273))+(((-1.0)*r20*x5283)));
evalcond[1]=(((x5272*x5278))+cj4+(((-1.0)*r10*x5283))+((r12*x5273)));
evalcond[2]=(((r02*x5273))+((x5272*x5279))+(((-1.0)*r00*x5283))+(((-1.0)*x5275)));
evalcond[3]=(((r22*x5272))+(((-1.0)*x5274*x5282))+((sj5*sj6))+((r20*x5281))+(((-1.0)*cj5*cj6)));
evalcond[4]=(((r02*x5272))+(((-1.0)*x5279*x5282))+(((-1.0)*x5276*x5277))+((r00*x5281))+(((-1.0)*x5277*x5280)));
evalcond[5]=((((-1.0)*x5278*x5282))+(((-1.0)*x5275*x5280))+((r10*x5281))+(((-1.0)*x5275*x5276))+((r12*x5272)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x5284=IKPowWithIntegerCheck(IKsign((((gconst115*r10))+((gconst116*r11)))),-1);
if(!x5284.valid){
continue;
}
CheckValue<IkReal> x5285 = IKatan2WithCheck(IkReal((((gconst115*r21*sj4))+(((-1.0)*gconst116*r20*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x5285.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5284.value)))+(x5285.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x5286=IKcos(j8);
IkReal x5287=IKsin(j8);
IkReal x5288=(gconst115*r21);
IkReal x5289=((1.0)*sj4);
IkReal x5290=(gconst115*r20);
IkReal x5291=((1.0)*cj4);
IkReal x5292=(gconst115*r11);
IkReal x5293=(gconst115*r01);
IkReal x5294=(gconst116*r21);
IkReal x5295=(gconst116*x5287);
IkReal x5296=((1.0)*x5287);
IkReal x5297=((1.0)*gconst116*x5286);
evalcond[0]=(((r22*x5287))+((x5286*x5288))+(((-1.0)*r20*x5297)));
evalcond[1]=(((r12*x5287))+cj4+((x5286*x5292))+(((-1.0)*r10*x5297)));
evalcond[2]=(((r02*x5287))+(((-1.0)*r00*x5297))+((x5286*x5293))+(((-1.0)*x5289)));
evalcond[3]=(((r22*x5286))+((sj5*sj6))+(((-1.0)*x5288*x5296))+((r20*x5295))+(((-1.0)*cj5*cj6)));
evalcond[4]=(((r02*x5286))+((r00*x5295))+(((-1.0)*x5293*x5296))+(((-1.0)*x5291*x5294))+(((-1.0)*x5290*x5291)));
evalcond[5]=((((-1.0)*x5289*x5294))+(((-1.0)*x5289*x5290))+((r12*x5286))+((r10*x5295))+(((-1.0)*x5292*x5296)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x5298 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*gconst116*r20))+((cj4*gconst115*r21)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5298.valid){
continue;
}
CheckValue<IkReal> x5299=IKPowWithIntegerCheck(IKsign((((gconst115*r00))+((gconst116*r01)))),-1);
if(!x5299.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x5298.value)+(((1.5707963267949)*(x5299.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x5300=IKcos(j8);
IkReal x5301=IKsin(j8);
IkReal x5302=(gconst115*r21);
IkReal x5303=((1.0)*sj4);
IkReal x5304=(gconst115*r20);
IkReal x5305=((1.0)*cj4);
IkReal x5306=(gconst115*r11);
IkReal x5307=(gconst115*r01);
IkReal x5308=(gconst116*r21);
IkReal x5309=(gconst116*x5301);
IkReal x5310=((1.0)*x5301);
IkReal x5311=((1.0)*gconst116*x5300);
evalcond[0]=(((x5300*x5302))+((r22*x5301))+(((-1.0)*r20*x5311)));
evalcond[1]=(((x5300*x5306))+cj4+((r12*x5301))+(((-1.0)*r10*x5311)));
evalcond[2]=(((x5300*x5307))+(((-1.0)*x5303))+((r02*x5301))+(((-1.0)*r00*x5311)));
evalcond[3]=((((-1.0)*x5302*x5310))+((sj5*sj6))+((r22*x5300))+(((-1.0)*cj5*cj6))+((r20*x5309)));
evalcond[4]=((((-1.0)*x5305*x5308))+((r02*x5300))+(((-1.0)*x5307*x5310))+(((-1.0)*x5304*x5305))+((r00*x5309)));
evalcond[5]=((((-1.0)*x5306*x5310))+(((-1.0)*x5303*x5308))+(((-1.0)*x5303*x5304))+((r12*x5300))+((r10*x5309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5312=((-1.0)*r21);
IkReal x5314 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5314)==0){
continue;
}
IkReal x5313=pow(x5314,-0.5);
CheckValue<IkReal> x5315 = IKatan2WithCheck(IkReal(x5312),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5315.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x5315.value))));
IkReal gconst118=(x5312*x5313);
IkReal gconst119=((1.0)*r20*x5313);
CheckValue<IkReal> x5316 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5316.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5316.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x5317=((-1.0)*r21);
CheckValue<IkReal> x5320 = IKatan2WithCheck(IkReal(x5317),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5320.valid){
continue;
}
IkReal x5318=((1.0)*(x5320.value));
IkReal x5319=x5313;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj9=gconst118;
cj9=gconst119;
j9=((3.14159265)+(((-1.0)*x5318)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5318)));
IkReal gconst118=(x5317*x5319);
IkReal gconst119=((1.0)*r20*x5319);
IkReal x5321=r22*r22;
IkReal x5322=((1.0)*x5321);
CheckValue<IkReal> x5326=IKPowWithIntegerCheck(((-1.0)+x5321),-1);
if(!x5326.valid){
continue;
}
IkReal x5323=x5326.value;
if((((1.0)+(((-1.0)*x5322)))) < -0.00001)
continue;
IkReal x5324=IKsqrt(((1.0)+(((-1.0)*x5322))));
IkReal x5325=(cj4*x5323*x5324);
j8eval[0]=((IKabs((x5325+(((-1.0)*x5322*x5325)))))+(IKabs((cj4*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
IkReal x5327=((-1.0)*r21);
CheckValue<IkReal> x5330 = IKatan2WithCheck(IkReal(x5327),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5330.valid){
continue;
}
IkReal x5328=((1.0)*(x5330.value));
IkReal x5329=x5313;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj9=gconst118;
cj9=gconst119;
j9=((3.14159265)+(((-1.0)*x5328)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5328)));
IkReal gconst118=(x5327*x5329);
IkReal gconst119=((1.0)*r20*x5329);
IkReal x5331=r22*r22;
IkReal x5332=((1.0)*x5331);
CheckValue<IkReal> x5336=IKPowWithIntegerCheck(((-1.0)+x5331),-1);
if(!x5336.valid){
continue;
}
IkReal x5333=x5336.value;
if((((1.0)+(((-1.0)*x5332)))) < -0.00001)
continue;
IkReal x5334=IKsqrt(((1.0)+(((-1.0)*x5332))));
IkReal x5335=(sj4*x5333*x5334);
j8eval[0]=((IKabs((r22*sj4)))+(IKabs((x5335+(((-1.0)*x5332*x5335))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
IkReal x5337=((-1.0)*r21);
CheckValue<IkReal> x5340 = IKatan2WithCheck(IkReal(x5337),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5340.valid){
continue;
}
IkReal x5338=((1.0)*(x5340.value));
IkReal x5339=x5313;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj9=gconst118;
cj9=gconst119;
j9=((3.14159265)+(((-1.0)*x5338)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5338)));
IkReal gconst118=(x5337*x5339);
IkReal gconst119=((1.0)*r20*x5339);
IkReal x5341=r22*r22;
IkReal x5342=((1.0)*cj4*r02);
IkReal x5343=((1.0)*r12*sj4);
CheckValue<IkReal> x5347=IKPowWithIntegerCheck(((-1.0)+x5341),-1);
if(!x5347.valid){
continue;
}
IkReal x5344=x5347.value;
if((((1.0)+(((-1.0)*x5341)))) < -0.00001)
continue;
IkReal x5345=IKsqrt(((1.0)+(((-1.0)*x5341))));
IkReal x5346=(r22*x5344*x5345);
j8eval[0]=0;
j8eval[1]=((IKabs(((((-1.0)*x5343*x5346))+(((-1.0)*x5342*x5346)))))+(IKabs(((((-1.0)*x5343))+(((-1.0)*x5342))))));
j8eval[2]=0;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x5348=((1.0)*gconst119);
CheckValue<IkReal> x5349=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r20))+(((-1.0)*r21*x5348)))),-1);
if(!x5349.valid){
continue;
}
CheckValue<IkReal> x5350 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*r00*x5348))+((gconst118*r11*sj4))+((cj4*gconst118*r01))+(((-1.0)*r10*sj4*x5348)))),IkReal(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5350.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5349.value)))+(x5350.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x5351=IKcos(j8);
IkReal x5352=IKsin(j8);
IkReal x5353=((1.0)*sj4);
IkReal x5354=(gconst118*r01);
IkReal x5355=(gconst118*r20);
IkReal x5356=(gconst119*r21);
IkReal x5357=(gconst118*r21);
IkReal x5358=((1.0)*cj4);
IkReal x5359=(gconst118*r11);
IkReal x5360=((1.0)*x5352);
IkReal x5361=(gconst119*x5352);
IkReal x5362=((1.0)*gconst119*x5351);
evalcond[0]=(((x5351*x5357))+((r22*x5352))+(((-1.0)*r20*x5362)));
evalcond[1]=(cj4+(((-1.0)*r10*x5362))+((x5351*x5359))+((r12*x5352)));
evalcond[2]=(((x5351*x5354))+(((-1.0)*x5353))+((r02*x5352))+(((-1.0)*r00*x5362)));
evalcond[3]=(((sj5*sj6))+((r22*x5351))+((r20*x5361))+(((-1.0)*cj5*cj6))+(((-1.0)*x5357*x5360)));
evalcond[4]=((((-1.0)*x5355*x5358))+(((-1.0)*x5356*x5358))+((r02*x5351))+(((-1.0)*x5354*x5360))+((r00*x5361)));
evalcond[5]=((((-1.0)*x5353*x5356))+(((-1.0)*x5353*x5355))+((r12*x5351))+(((-1.0)*x5359*x5360))+((r10*x5361)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x5363=IKPowWithIntegerCheck(IKsign((((gconst118*r10))+((gconst119*r11)))),-1);
if(!x5363.valid){
continue;
}
CheckValue<IkReal> x5364 = IKatan2WithCheck(IkReal(((((-1.0)*gconst119*r20*sj4))+((gconst118*r21*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x5364.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5363.value)))+(x5364.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x5365=IKcos(j8);
IkReal x5366=IKsin(j8);
IkReal x5367=((1.0)*sj4);
IkReal x5368=(gconst118*r01);
IkReal x5369=(gconst118*r20);
IkReal x5370=(gconst119*r21);
IkReal x5371=(gconst118*r21);
IkReal x5372=((1.0)*cj4);
IkReal x5373=(gconst118*r11);
IkReal x5374=((1.0)*x5366);
IkReal x5375=(gconst119*x5366);
IkReal x5376=((1.0)*gconst119*x5365);
evalcond[0]=(((r22*x5366))+((x5365*x5371))+(((-1.0)*r20*x5376)));
evalcond[1]=(((r12*x5366))+cj4+((x5365*x5373))+(((-1.0)*r10*x5376)));
evalcond[2]=(((r02*x5366))+((x5365*x5368))+(((-1.0)*r00*x5376))+(((-1.0)*x5367)));
evalcond[3]=(((r22*x5365))+((sj5*sj6))+(((-1.0)*x5371*x5374))+(((-1.0)*cj5*cj6))+((r20*x5375)));
evalcond[4]=(((r02*x5365))+(((-1.0)*x5370*x5372))+(((-1.0)*x5368*x5374))+((r00*x5375))+(((-1.0)*x5369*x5372)));
evalcond[5]=(((r12*x5365))+(((-1.0)*x5373*x5374))+(((-1.0)*x5367*x5370))+(((-1.0)*x5367*x5369))+((r10*x5375)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x5377=IKPowWithIntegerCheck(IKsign((((gconst118*r00))+((gconst119*r01)))),-1);
if(!x5377.valid){
continue;
}
CheckValue<IkReal> x5378 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*gconst119*r20))+((cj4*gconst118*r21)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5378.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5377.value)))+(x5378.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x5379=IKcos(j8);
IkReal x5380=IKsin(j8);
IkReal x5381=((1.0)*sj4);
IkReal x5382=(gconst118*r01);
IkReal x5383=(gconst118*r20);
IkReal x5384=(gconst119*r21);
IkReal x5385=(gconst118*r21);
IkReal x5386=((1.0)*cj4);
IkReal x5387=(gconst118*r11);
IkReal x5388=((1.0)*x5380);
IkReal x5389=(gconst119*x5380);
IkReal x5390=((1.0)*gconst119*x5379);
evalcond[0]=(((x5379*x5385))+(((-1.0)*r20*x5390))+((r22*x5380)));
evalcond[1]=(cj4+((x5379*x5387))+((r12*x5380))+(((-1.0)*r10*x5390)));
evalcond[2]=(((r02*x5380))+((x5379*x5382))+(((-1.0)*x5381))+(((-1.0)*r00*x5390)));
evalcond[3]=(((sj5*sj6))+(((-1.0)*x5385*x5388))+((r22*x5379))+((r20*x5389))+(((-1.0)*cj5*cj6)));
evalcond[4]=((((-1.0)*x5382*x5388))+(((-1.0)*x5384*x5386))+((r02*x5379))+((r00*x5389))+(((-1.0)*x5383*x5386)));
evalcond[5]=(((r10*x5389))+((r12*x5379))+(((-1.0)*x5387*x5388))+(((-1.0)*x5381*x5383))+(((-1.0)*x5381*x5384)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5392 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5392)==0){
continue;
}
IkReal x5391=pow(x5392,-0.5);
CheckValue<IkReal> x5393 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5393.valid){
continue;
}
IkReal gconst120=((-1.0)*(x5393.value));
IkReal gconst121=((-1.0)*r11*x5391);
IkReal gconst122=(r10*x5391);
CheckValue<IkReal> x5394 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5394.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5394.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
CheckValue<IkReal> x5397 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5397.valid){
continue;
}
IkReal x5395=((-1.0)*(x5397.value));
IkReal x5396=x5391;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj9=gconst121;
cj9=gconst122;
j9=x5395;
IkReal gconst120=x5395;
IkReal gconst121=((-1.0)*r11*x5396);
IkReal gconst122=(r10*x5396);
j8eval[0]=cj4;
j8eval[1]=r22;
j8eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x5398=((1.0)*gconst122);
CheckValue<IkReal> x5399 = IKatan2WithCheck(IkReal(((((-1.0)*r10*sj4*x5398))+((cj4*gconst121*r01))+((gconst121*r11*sj4))+(((-1.0)*cj4*r00*x5398)))),IkReal(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5399.valid){
continue;
}
CheckValue<IkReal> x5400=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r20))+(((-1.0)*r21*x5398)))),-1);
if(!x5400.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x5399.value)+(((1.5707963267949)*(x5400.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x5401=IKcos(j8);
IkReal x5402=IKsin(j8);
IkReal x5403=((1.0)*gconst122);
IkReal x5404=((1.0)*sj4);
IkReal x5405=((1.0)*gconst121);
IkReal x5406=(gconst121*x5401);
IkReal x5407=(gconst122*x5402);
evalcond[0]=(((r21*x5406))+((r22*x5402))+(((-1.0)*r20*x5401*x5403)));
evalcond[1]=(((r12*x5402))+(((-1.0)*r10*x5401*x5403))+cj4+((r11*x5406)));
evalcond[2]=((((-1.0)*r00*x5401*x5403))+((r02*x5402))+(((-1.0)*x5404))+((r01*x5406)));
evalcond[3]=(((r22*x5401))+((sj5*sj6))+(((-1.0)*r21*x5402*x5405))+((r20*x5407))+(((-1.0)*cj5*cj6)));
evalcond[4]=((((-1.0)*cj4*r20*x5405))+((r02*x5401))+(((-1.0)*cj4*r21*x5403))+(((-1.0)*r01*x5402*x5405))+((r00*x5407)));
evalcond[5]=(((r12*x5401))+(((-1.0)*gconst121*r20*x5404))+((r10*x5407))+(((-1.0)*r21*sj4*x5403))+(((-1.0)*r11*x5402*x5405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x5408 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*gconst122*r20))+((cj4*gconst121*r21)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5408.valid){
continue;
}
CheckValue<IkReal> x5409=IKPowWithIntegerCheck(IKsign((((gconst122*r01))+((gconst121*r00)))),-1);
if(!x5409.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x5408.value)+(((1.5707963267949)*(x5409.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x5410=IKcos(j8);
IkReal x5411=IKsin(j8);
IkReal x5412=((1.0)*gconst122);
IkReal x5413=((1.0)*sj4);
IkReal x5414=((1.0)*gconst121);
IkReal x5415=(gconst121*x5410);
IkReal x5416=(gconst122*x5411);
evalcond[0]=(((r22*x5411))+((r21*x5415))+(((-1.0)*r20*x5410*x5412)));
evalcond[1]=(((r11*x5415))+cj4+(((-1.0)*r10*x5410*x5412))+((r12*x5411)));
evalcond[2]=((((-1.0)*r00*x5410*x5412))+((r02*x5411))+(((-1.0)*x5413))+((r01*x5415)));
evalcond[3]=(((sj5*sj6))+(((-1.0)*r21*x5411*x5414))+((r22*x5410))+((r20*x5416))+(((-1.0)*cj5*cj6)));
evalcond[4]=((((-1.0)*r01*x5411*x5414))+(((-1.0)*cj4*r20*x5414))+((r02*x5410))+(((-1.0)*cj4*r21*x5412))+((r00*x5416)));
evalcond[5]=((((-1.0)*r11*x5411*x5414))+((r10*x5416))+(((-1.0)*r21*sj4*x5412))+((r12*x5410))+(((-1.0)*gconst121*r20*x5413)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5418 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5418)==0){
continue;
}
IkReal x5417=pow(x5418,-0.5);
CheckValue<IkReal> x5419 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5419.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x5419.value))));
IkReal gconst124=((1.0)*r11*x5417);
IkReal gconst125=((-1.0)*r10*x5417);
CheckValue<IkReal> x5420 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5420.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5420.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
CheckValue<IkReal> x5423 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5423.valid){
continue;
}
IkReal x5421=((1.0)*(x5423.value));
IkReal x5422=x5417;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj9=gconst124;
cj9=gconst125;
j9=((3.14159265)+(((-1.0)*x5421)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5421)));
IkReal gconst124=((1.0)*r11*x5422);
IkReal gconst125=((-1.0)*r10*x5422);
j8eval[0]=cj4;
j8eval[1]=r22;
j8eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[5];
CheckValue<IkReal> x5426 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5426.valid){
continue;
}
IkReal x5424=((1.0)*(x5426.value));
IkReal x5425=x5417;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj9=gconst124;
cj9=gconst125;
j9=((3.14159265)+(((-1.0)*x5424)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5424)));
IkReal gconst124=((1.0)*r11*x5425);
IkReal gconst125=((-1.0)*r10*x5425);
j8eval[0]=0;
j8eval[1]=0;
j8eval[2]=r22;
j8eval[3]=sj4;
j8eval[4]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  || IKabs(j8eval[4]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
CheckValue<IkReal> x5429 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5429.valid){
continue;
}
IkReal x5427=((1.0)*(x5429.value));
IkReal x5428=x5417;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj9=gconst124;
cj9=gconst125;
j9=((3.14159265)+(((-1.0)*x5427)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5427)));
IkReal gconst124=((1.0)*r11*x5428);
IkReal gconst125=((-1.0)*r10*x5428);
IkReal x5430=r12*r12;
IkReal x5431=(cj4*r02);
IkReal x5432=x5417;
IkReal x5433=(sj4*x5432);
j8eval[0]=((IKabs(((((-1.0)*x5431))+(((-1.0)*r12*sj4)))))+(IKabs(((((-1.0)*x5433))+((r12*x5431*x5432))+((x5430*x5433))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x5434=((1.0)*gconst125);
CheckValue<IkReal> x5435=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*r21*x5434)))),-1);
if(!x5435.valid){
continue;
}
CheckValue<IkReal> x5436 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*r00*x5434))+((cj4*gconst124*r01))+(((-1.0)*r10*sj4*x5434))+((gconst124*r11*sj4)))),IkReal(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5436.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5435.value)))+(x5436.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x5437=IKcos(j8);
IkReal x5438=IKsin(j8);
IkReal x5439=((1.0)*sj4);
IkReal x5440=((1.0)*r21);
IkReal x5441=((1.0)*r20);
IkReal x5442=(gconst124*x5438);
IkReal x5443=(gconst124*x5437);
IkReal x5444=(gconst125*x5438);
IkReal x5445=(gconst125*x5437);
evalcond[0]=(((r22*x5438))+(((-1.0)*x5441*x5445))+((r21*x5443)));
evalcond[1]=(cj4+(((-1.0)*r10*x5445))+((r11*x5443))+((r12*x5438)));
evalcond[2]=(((r02*x5438))+((r01*x5443))+(((-1.0)*x5439))+(((-1.0)*r00*x5445)));
evalcond[3]=(((r22*x5437))+((sj5*sj6))+((r20*x5444))+(((-1.0)*x5440*x5442))+(((-1.0)*cj5*cj6)));
evalcond[4]=((((-1.0)*cj4*gconst125*x5440))+((r02*x5437))+((r00*x5444))+(((-1.0)*cj4*gconst124*x5441))+(((-1.0)*r01*x5442)));
evalcond[5]=(((r10*x5444))+(((-1.0)*gconst124*r20*x5439))+(((-1.0)*r11*x5442))+(((-1.0)*gconst125*r21*x5439))+((r12*x5437)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x5446 = IKatan2WithCheck(IkReal((((gconst124*r21*sj4))+(((-1.0)*gconst125*r20*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x5446.valid){
continue;
}
CheckValue<IkReal> x5447=IKPowWithIntegerCheck(IKsign((((gconst125*r11))+((gconst124*r10)))),-1);
if(!x5447.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x5446.value)+(((1.5707963267949)*(x5447.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x5448=IKcos(j8);
IkReal x5449=IKsin(j8);
IkReal x5450=((1.0)*sj4);
IkReal x5451=((1.0)*r21);
IkReal x5452=((1.0)*r20);
IkReal x5453=(gconst124*x5449);
IkReal x5454=(gconst124*x5448);
IkReal x5455=(gconst125*x5449);
IkReal x5456=(gconst125*x5448);
evalcond[0]=((((-1.0)*x5452*x5456))+((r21*x5454))+((r22*x5449)));
evalcond[1]=(cj4+(((-1.0)*r10*x5456))+((r12*x5449))+((r11*x5454)));
evalcond[2]=(((r01*x5454))+(((-1.0)*r00*x5456))+((r02*x5449))+(((-1.0)*x5450)));
evalcond[3]=((((-1.0)*x5451*x5453))+((sj5*sj6))+(((-1.0)*cj5*cj6))+((r22*x5448))+((r20*x5455)));
evalcond[4]=(((r00*x5455))+(((-1.0)*r01*x5453))+(((-1.0)*cj4*gconst125*x5451))+(((-1.0)*cj4*gconst124*x5452))+((r02*x5448)));
evalcond[5]=((((-1.0)*gconst125*r21*x5450))+((r10*x5455))+(((-1.0)*gconst124*r20*x5450))+((r12*x5448))+(((-1.0)*r11*x5453)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x5457=IKPowWithIntegerCheck(IKsign((((gconst124*r00))+((gconst125*r01)))),-1);
if(!x5457.valid){
continue;
}
CheckValue<IkReal> x5458 = IKatan2WithCheck(IkReal((((cj4*gconst124*r21))+(((-1.0)*cj4*gconst125*r20)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5458.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5457.value)))+(x5458.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x5459=IKcos(j8);
IkReal x5460=IKsin(j8);
IkReal x5461=((1.0)*sj4);
IkReal x5462=((1.0)*r21);
IkReal x5463=((1.0)*r20);
IkReal x5464=(gconst124*x5460);
IkReal x5465=(gconst124*x5459);
IkReal x5466=(gconst125*x5460);
IkReal x5467=(gconst125*x5459);
evalcond[0]=((((-1.0)*x5463*x5467))+((r22*x5460))+((r21*x5465)));
evalcond[1]=(cj4+((r11*x5465))+(((-1.0)*r10*x5467))+((r12*x5460)));
evalcond[2]=(((r01*x5465))+((r02*x5460))+(((-1.0)*r00*x5467))+(((-1.0)*x5461)));
evalcond[3]=(((sj5*sj6))+((r22*x5459))+(((-1.0)*cj5*cj6))+((r20*x5466))+(((-1.0)*x5462*x5464)));
evalcond[4]=((((-1.0)*cj4*gconst124*x5463))+(((-1.0)*r01*x5464))+((r02*x5459))+(((-1.0)*cj4*gconst125*x5462))+((r00*x5466)));
evalcond[5]=(((r12*x5459))+(((-1.0)*gconst125*r21*x5461))+(((-1.0)*gconst124*r20*x5461))+((r10*x5466))+(((-1.0)*r11*x5464)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj4=0;
cj4=1.0;
j4=0;
IkReal x5468=(((r00*sj9))+((cj9*r01)));
j8eval[0]=x5468;
j8eval[1]=IKsign(x5468);
j8eval[2]=((IKabs(r22))+(IKabs((((r21*sj9))+(((-1.0)*cj9*r20))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj4=0;
cj4=1.0;
j4=0;
IkReal x5469=((1.0)*cj9);
IkReal x5470=((((-1.0)*r21*x5469))+(((-1.0)*r20*sj9)));
j8eval[0]=x5470;
j8eval[1]=((IKabs(r02))+(IKabs((((r01*sj9))+(((-1.0)*r00*x5469))))));
j8eval[2]=IKsign(x5470);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj4=0;
cj4=1.0;
j4=0;
IkReal x5471=r11*r11;
IkReal x5472=cj9*cj9;
IkReal x5473=(r11*sj9);
IkReal x5474=(cj9*r10);
IkReal x5475=((((-1.0)*x5471))+(((2.0)*x5473*x5474))+((x5471*x5472))+(((-1.0)*(r12*r12)))+(((-1.0)*x5472*(r10*r10))));
j8eval[0]=x5475;
j8eval[1]=IKsign(x5475);
j8eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x5474))+x5473))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x5476=r11*r11;
IkReal x5477=cj9*cj9;
IkReal x5478=(r11*sj9);
IkReal x5479=(cj9*r10);
CheckValue<IkReal> x5480 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x5479))+x5478)),IKFAST_ATAN2_MAGTHRESH);
if(!x5480.valid){
continue;
}
CheckValue<IkReal> x5481=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5476))+(((2.0)*x5478*x5479))+(((-1.0)*x5477*(r10*r10)))+(((-1.0)*(r12*r12)))+((x5476*x5477)))),-1);
if(!x5481.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x5480.value)+(((1.5707963267949)*(x5481.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x5482=IKcos(j8);
IkReal x5483=IKsin(j8);
IkReal x5484=(cj9*r00);
IkReal x5485=((1.0)*x5482);
IkReal x5486=(cj9*x5483);
IkReal x5487=(sj9*x5482);
IkReal x5488=((1.0)*sj9*x5483);
evalcond[0]=(((r21*x5487))+((r22*x5483))+(((-1.0)*cj9*r20*x5485)));
evalcond[1]=((((-1.0)*x5484*x5485))+((r01*x5487))+((r02*x5483)));
evalcond[2]=((((-1.0)*r11*x5488))+((r12*x5482))+((r10*x5486)));
evalcond[3]=((1.0)+((r11*x5487))+((r12*x5483))+(((-1.0)*cj9*r10*x5485)));
evalcond[4]=(((r20*x5486))+(((-1.0)*r21*x5488))+((sj5*sj6))+((r22*x5482))+(((-1.0)*cj5*cj6)));
evalcond[5]=(((x5483*x5484))+(((-1.0)*cj9*r21))+(((-1.0)*r01*x5488))+((r02*x5482))+(((-1.0)*r20*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x5489=((1.0)*cj9);
CheckValue<IkReal> x5490 = IKatan2WithCheck(IkReal((((r01*sj9))+(((-1.0)*r00*x5489)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5490.valid){
continue;
}
CheckValue<IkReal> x5491=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5489))+(((-1.0)*r20*sj9)))),-1);
if(!x5491.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x5490.value)+(((1.5707963267949)*(x5491.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x5492=IKcos(j8);
IkReal x5493=IKsin(j8);
IkReal x5494=(cj9*r00);
IkReal x5495=((1.0)*x5492);
IkReal x5496=(cj9*x5493);
IkReal x5497=(sj9*x5492);
IkReal x5498=((1.0)*sj9*x5493);
evalcond[0]=(((r21*x5497))+(((-1.0)*cj9*r20*x5495))+((r22*x5493)));
evalcond[1]=(((r01*x5497))+(((-1.0)*x5494*x5495))+((r02*x5493)));
evalcond[2]=(((r12*x5492))+(((-1.0)*r11*x5498))+((r10*x5496)));
evalcond[3]=((1.0)+((r12*x5493))+(((-1.0)*cj9*r10*x5495))+((r11*x5497)));
evalcond[4]=(((r20*x5496))+((sj5*sj6))+(((-1.0)*cj5*cj6))+((r22*x5492))+(((-1.0)*r21*x5498)));
evalcond[5]=(((x5493*x5494))+(((-1.0)*r01*x5498))+(((-1.0)*cj9*r21))+((r02*x5492))+(((-1.0)*r20*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x5499=IKPowWithIntegerCheck(IKsign((((r00*sj9))+((cj9*r01)))),-1);
if(!x5499.valid){
continue;
}
CheckValue<IkReal> x5500 = IKatan2WithCheck(IkReal((((r21*sj9))+(((-1.0)*cj9*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5500.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5499.value)))+(x5500.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x5501=IKcos(j8);
IkReal x5502=IKsin(j8);
IkReal x5503=(cj9*r00);
IkReal x5504=((1.0)*x5501);
IkReal x5505=(cj9*x5502);
IkReal x5506=(sj9*x5501);
IkReal x5507=((1.0)*sj9*x5502);
evalcond[0]=(((r21*x5506))+((r22*x5502))+(((-1.0)*cj9*r20*x5504)));
evalcond[1]=((((-1.0)*x5503*x5504))+((r02*x5502))+((r01*x5506)));
evalcond[2]=(((r10*x5505))+(((-1.0)*r11*x5507))+((r12*x5501)));
evalcond[3]=((1.0)+((r12*x5502))+((r11*x5506))+(((-1.0)*cj9*r10*x5504)));
evalcond[4]=(((r20*x5505))+((sj5*sj6))+((r22*x5501))+(((-1.0)*r21*x5507))+(((-1.0)*cj5*cj6)));
evalcond[5]=(((r02*x5501))+(((-1.0)*r01*x5507))+((x5502*x5503))+(((-1.0)*cj9*r21))+(((-1.0)*r20*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x5508=(((cj9*r21))+((r20*sj9)));
j8eval[0]=x5508;
j8eval[1]=((IKabs(r02))+(IKabs((((r01*sj9))+(((-1.0)*cj9*r00))))));
j8eval[2]=IKsign(x5508);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x5509=((1.0)*cj9);
IkReal x5510=((((-1.0)*r01*x5509))+(((-1.0)*r00*sj9)));
j8eval[0]=x5510;
j8eval[1]=((IKabs((((r21*sj9))+(((-1.0)*r20*x5509)))))+(IKabs(r22)));
j8eval[2]=IKsign(x5510);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x5511=cj9*cj9;
IkReal x5512=r11*r11;
IkReal x5513=(r11*sj9);
IkReal x5514=(cj9*r10);
IkReal x5515=((r12*r12)+x5512+(((-2.0)*x5513*x5514))+(((-1.0)*x5511*x5512))+((x5511*(r10*r10))));
j8eval[0]=x5515;
j8eval[1]=IKsign(x5515);
j8eval[2]=((IKabs((x5513+(((-1.0)*x5514)))))+(IKabs(r12)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x5516=cj9*cj9;
IkReal x5517=r11*r11;
IkReal x5518=(r11*sj9);
IkReal x5519=(cj9*r10);
CheckValue<IkReal> x5520=IKPowWithIntegerCheck(IKsign(((r12*r12)+x5517+(((-2.0)*x5518*x5519))+((x5516*(r10*r10)))+(((-1.0)*x5516*x5517)))),-1);
if(!x5520.valid){
continue;
}
CheckValue<IkReal> x5521 = IKatan2WithCheck(IkReal(r12),IkReal((x5518+(((-1.0)*x5519)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5521.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5520.value)))+(x5521.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x5522=IKcos(j8);
IkReal x5523=IKsin(j8);
IkReal x5524=(cj9*r00);
IkReal x5525=((1.0)*x5522);
IkReal x5526=(sj9*x5522);
IkReal x5527=(cj9*x5523);
IkReal x5528=((1.0)*sj9*x5523);
evalcond[0]=(((r22*x5523))+((r21*x5526))+(((-1.0)*cj9*r20*x5525)));
evalcond[1]=(((r02*x5523))+((r01*x5526))+(((-1.0)*x5524*x5525)));
evalcond[2]=(((r10*x5527))+((r12*x5522))+(((-1.0)*r11*x5528)));
evalcond[3]=((-1.0)+(((-1.0)*cj9*r10*x5525))+((r11*x5526))+((r12*x5523)));
evalcond[4]=(((r02*x5522))+((x5523*x5524))+((cj9*r21))+((r20*sj9))+(((-1.0)*r01*x5528)));
evalcond[5]=(((sj5*sj6))+((r22*x5522))+(((-1.0)*r21*x5528))+((r20*x5527))+(((-1.0)*cj5*cj6)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x5529=((1.0)*cj9);
CheckValue<IkReal> x5530 = IKatan2WithCheck(IkReal((((r21*sj9))+(((-1.0)*r20*x5529)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5530.valid){
continue;
}
CheckValue<IkReal> x5531=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj9))+(((-1.0)*r01*x5529)))),-1);
if(!x5531.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x5530.value)+(((1.5707963267949)*(x5531.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x5532=IKcos(j8);
IkReal x5533=IKsin(j8);
IkReal x5534=(cj9*r00);
IkReal x5535=((1.0)*x5532);
IkReal x5536=(sj9*x5532);
IkReal x5537=(cj9*x5533);
IkReal x5538=((1.0)*sj9*x5533);
evalcond[0]=(((r22*x5533))+((r21*x5536))+(((-1.0)*cj9*r20*x5535)));
evalcond[1]=((((-1.0)*x5534*x5535))+((r01*x5536))+((r02*x5533)));
evalcond[2]=(((r10*x5537))+((r12*x5532))+(((-1.0)*r11*x5538)));
evalcond[3]=((-1.0)+(((-1.0)*cj9*r10*x5535))+((r11*x5536))+((r12*x5533)));
evalcond[4]=(((cj9*r21))+(((-1.0)*r01*x5538))+((r20*sj9))+((x5533*x5534))+((r02*x5532)));
evalcond[5]=(((sj5*sj6))+((r22*x5532))+(((-1.0)*r21*x5538))+((r20*x5537))+(((-1.0)*cj5*cj6)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x5539 = IKatan2WithCheck(IkReal((((r01*sj9))+(((-1.0)*cj9*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5539.valid){
continue;
}
CheckValue<IkReal> x5540=IKPowWithIntegerCheck(IKsign((((cj9*r21))+((r20*sj9)))),-1);
if(!x5540.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x5539.value)+(((1.5707963267949)*(x5540.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x5541=IKcos(j8);
IkReal x5542=IKsin(j8);
IkReal x5543=(cj9*r00);
IkReal x5544=((1.0)*x5541);
IkReal x5545=(sj9*x5541);
IkReal x5546=(cj9*x5542);
IkReal x5547=((1.0)*sj9*x5542);
evalcond[0]=((((-1.0)*cj9*r20*x5544))+((r22*x5542))+((r21*x5545)));
evalcond[1]=((((-1.0)*x5543*x5544))+((r02*x5542))+((r01*x5545)));
evalcond[2]=(((r12*x5541))+((r10*x5546))+(((-1.0)*r11*x5547)));
evalcond[3]=((-1.0)+((r12*x5542))+((r11*x5545))+(((-1.0)*cj9*r10*x5544)));
evalcond[4]=(((x5542*x5543))+((r02*x5541))+((cj9*r21))+((r20*sj9))+(((-1.0)*r01*x5547)));
evalcond[5]=(((sj5*sj6))+((r20*x5546))+(((-1.0)*cj5*cj6))+((r22*x5541))+(((-1.0)*r21*x5547)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5549 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5549)==0){
continue;
}
IkReal x5548=pow(x5549,-0.5);
CheckValue<IkReal> x5550 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5550.valid){
continue;
}
IkReal gconst126=((-1.0)*(x5550.value));
IkReal gconst127=((-1.0)*r01*x5548);
IkReal gconst128=(r00*x5548);
CheckValue<IkReal> x5551 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5551.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5551.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
CheckValue<IkReal> x5554 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5554.valid){
continue;
}
IkReal x5552=((-1.0)*(x5554.value));
IkReal x5553=x5548;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj9=gconst127;
cj9=gconst128;
j9=x5552;
IkReal gconst126=x5552;
IkReal gconst127=((-1.0)*r01*x5553);
IkReal gconst128=(r00*x5553);
j8eval[0]=r22;
j8eval[1]=sj4;
j8eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x5555=((1.0)*gconst128);
CheckValue<IkReal> x5556=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5555))+(((-1.0)*gconst127*r20)))),-1);
if(!x5556.valid){
continue;
}
CheckValue<IkReal> x5557 = IKatan2WithCheck(IkReal((((cj4*gconst127*r01))+(((-1.0)*cj4*r00*x5555))+(((-1.0)*r10*sj4*x5555))+((gconst127*r11*sj4)))),IkReal(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5557.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5556.value)))+(x5557.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x5558=IKcos(j8);
IkReal x5559=IKsin(j8);
IkReal x5560=((1.0)*gconst127);
IkReal x5561=((1.0)*sj4);
IkReal x5562=(gconst128*r21);
IkReal x5563=(gconst128*x5559);
IkReal x5564=(gconst127*x5558);
IkReal x5565=((1.0)*gconst128*x5558);
evalcond[0]=(((r21*x5564))+((r22*x5559))+(((-1.0)*r20*x5565)));
evalcond[1]=(cj4+(((-1.0)*r10*x5565))+((r12*x5559))+((r11*x5564)));
evalcond[2]=(((r02*x5559))+(((-1.0)*r00*x5565))+(((-1.0)*x5561))+((r01*x5564)));
evalcond[3]=(((r20*x5563))+((sj5*sj6))+(((-1.0)*r21*x5559*x5560))+((r22*x5558))+(((-1.0)*cj5*cj6)));
evalcond[4]=((((-1.0)*cj4*r20*x5560))+((r02*x5558))+(((-1.0)*r01*x5559*x5560))+((r00*x5563))+(((-1.0)*cj4*x5562)));
evalcond[5]=((((-1.0)*r20*sj4*x5560))+((r10*x5563))+((r12*x5558))+(((-1.0)*r11*x5559*x5560))+(((-1.0)*x5561*x5562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x5566=IKPowWithIntegerCheck(IKsign((((gconst128*r11))+((gconst127*r10)))),-1);
if(!x5566.valid){
continue;
}
CheckValue<IkReal> x5567 = IKatan2WithCheck(IkReal(((((-1.0)*gconst128*r20*sj4))+((gconst127*r21*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x5567.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5566.value)))+(x5567.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x5568=IKcos(j8);
IkReal x5569=IKsin(j8);
IkReal x5570=((1.0)*gconst127);
IkReal x5571=((1.0)*sj4);
IkReal x5572=(gconst128*r21);
IkReal x5573=(gconst128*x5569);
IkReal x5574=(gconst127*x5568);
IkReal x5575=((1.0)*gconst128*x5568);
evalcond[0]=(((r22*x5569))+((r21*x5574))+(((-1.0)*r20*x5575)));
evalcond[1]=(cj4+(((-1.0)*r10*x5575))+((r11*x5574))+((r12*x5569)));
evalcond[2]=(((r02*x5569))+(((-1.0)*r00*x5575))+(((-1.0)*x5571))+((r01*x5574)));
evalcond[3]=(((sj5*sj6))+((r22*x5568))+(((-1.0)*cj5*cj6))+(((-1.0)*r21*x5569*x5570))+((r20*x5573)));
evalcond[4]=(((r02*x5568))+(((-1.0)*cj4*r20*x5570))+(((-1.0)*r01*x5569*x5570))+((r00*x5573))+(((-1.0)*cj4*x5572)));
evalcond[5]=(((r10*x5573))+(((-1.0)*x5571*x5572))+(((-1.0)*r11*x5569*x5570))+((r12*x5568))+(((-1.0)*r20*sj4*x5570)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5577 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5577)==0){
continue;
}
IkReal x5576=pow(x5577,-0.5);
CheckValue<IkReal> x5578 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5578.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x5578.value))));
IkReal gconst130=((1.0)*r01*x5576);
IkReal gconst131=((-1.0)*r00*x5576);
CheckValue<IkReal> x5579 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5579.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5579.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[5];
CheckValue<IkReal> x5582 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5582.valid){
continue;
}
IkReal x5580=((1.0)*(x5582.value));
IkReal x5581=x5576;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj9=gconst130;
cj9=gconst131;
j9=((3.14159265)+(((-1.0)*x5580)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5580)));
IkReal gconst130=((1.0)*r01*x5581);
IkReal gconst131=((-1.0)*r00*x5581);
j8eval[0]=0;
j8eval[1]=cj4;
j8eval[2]=r22;
j8eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j8eval[4]=0;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  || IKabs(j8eval[4]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
CheckValue<IkReal> x5585 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5585.valid){
continue;
}
IkReal x5583=((1.0)*(x5585.value));
IkReal x5584=x5576;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj9=gconst130;
cj9=gconst131;
j9=((3.14159265)+(((-1.0)*x5583)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5583)));
IkReal gconst130=((1.0)*r01*x5584);
IkReal gconst131=((-1.0)*r00*x5584);
j8eval[0]=r22;
j8eval[1]=sj4;
j8eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
CheckValue<IkReal> x5588 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5588.valid){
continue;
}
IkReal x5586=((1.0)*(x5588.value));
IkReal x5587=x5576;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj9=gconst130;
cj9=gconst131;
j9=((3.14159265)+(((-1.0)*x5586)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5586)));
IkReal gconst130=((1.0)*r01*x5587);
IkReal gconst131=((-1.0)*r00*x5587);
IkReal x5589=r02*r02;
IkReal x5590=(r12*sj4);
IkReal x5591=x5576;
IkReal x5592=(cj4*x5591);
j8eval[0]=((IKabs(((((-1.0)*cj4*r02))+(((-1.0)*x5590)))))+(IKabs(((((-1.0)*x5592))+((x5589*x5592))+((r02*x5590*x5591))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x5593=((1.0)*gconst131);
CheckValue<IkReal> x5594=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5593))+(((-1.0)*gconst130*r20)))),-1);
if(!x5594.valid){
continue;
}
CheckValue<IkReal> x5595 = IKatan2WithCheck(IkReal((((gconst130*r11*sj4))+((cj4*gconst130*r01))+(((-1.0)*cj4*r00*x5593))+(((-1.0)*r10*sj4*x5593)))),IkReal(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5595.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5594.value)))+(x5595.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x5596=IKcos(j8);
IkReal x5597=IKsin(j8);
IkReal x5598=((1.0)*sj4);
IkReal x5599=(gconst130*r21);
IkReal x5600=(gconst130*r11);
IkReal x5601=(gconst131*r21);
IkReal x5602=(gconst130*r01);
IkReal x5603=(gconst131*x5597);
IkReal x5604=((1.0)*gconst130*r20);
IkReal x5605=((1.0)*x5597);
IkReal x5606=((1.0)*gconst131*x5596);
evalcond[0]=(((x5596*x5599))+(((-1.0)*r20*x5606))+((r22*x5597)));
evalcond[1]=(((x5596*x5600))+(((-1.0)*r10*x5606))+cj4+((r12*x5597)));
evalcond[2]=(((x5596*x5602))+(((-1.0)*r00*x5606))+((r02*x5597))+(((-1.0)*x5598)));
evalcond[3]=(((sj5*sj6))+((r20*x5603))+(((-1.0)*x5599*x5605))+(((-1.0)*cj5*cj6))+((r22*x5596)));
evalcond[4]=((((-1.0)*cj4*x5601))+(((-1.0)*cj4*x5604))+(((-1.0)*x5602*x5605))+((r02*x5596))+((r00*x5603)));
evalcond[5]=((((-1.0)*gconst130*r20*x5598))+((r12*x5596))+(((-1.0)*x5598*x5601))+(((-1.0)*x5600*x5605))+((r10*x5603)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x5607=IKPowWithIntegerCheck(IKsign((((gconst131*r11))+((gconst130*r10)))),-1);
if(!x5607.valid){
continue;
}
CheckValue<IkReal> x5608 = IKatan2WithCheck(IkReal((((gconst130*r21*sj4))+(((-1.0)*gconst131*r20*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x5608.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5607.value)))+(x5608.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x5609=IKcos(j8);
IkReal x5610=IKsin(j8);
IkReal x5611=((1.0)*sj4);
IkReal x5612=(gconst130*r21);
IkReal x5613=(gconst130*r11);
IkReal x5614=(gconst131*r21);
IkReal x5615=(gconst130*r01);
IkReal x5616=(gconst131*x5610);
IkReal x5617=((1.0)*gconst130*r20);
IkReal x5618=((1.0)*x5610);
IkReal x5619=((1.0)*gconst131*x5609);
evalcond[0]=(((x5609*x5612))+(((-1.0)*r20*x5619))+((r22*x5610)));
evalcond[1]=(((x5609*x5613))+cj4+(((-1.0)*r10*x5619))+((r12*x5610)));
evalcond[2]=(((x5609*x5615))+(((-1.0)*r00*x5619))+((r02*x5610))+(((-1.0)*x5611)));
evalcond[3]=((((-1.0)*x5612*x5618))+((sj5*sj6))+((r20*x5616))+(((-1.0)*cj5*cj6))+((r22*x5609)));
evalcond[4]=(((r02*x5609))+(((-1.0)*cj4*x5617))+((r00*x5616))+(((-1.0)*x5615*x5618))+(((-1.0)*cj4*x5614)));
evalcond[5]=((((-1.0)*x5613*x5618))+(((-1.0)*gconst130*r20*x5611))+((r12*x5609))+((r10*x5616))+(((-1.0)*x5611*x5614)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x5620=IKPowWithIntegerCheck(IKsign((((gconst131*r01))+((gconst130*r00)))),-1);
if(!x5620.valid){
continue;
}
CheckValue<IkReal> x5621 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*gconst131*r20))+((cj4*gconst130*r21)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5621.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5620.value)))+(x5621.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x5622=IKcos(j8);
IkReal x5623=IKsin(j8);
IkReal x5624=((1.0)*sj4);
IkReal x5625=(gconst130*r21);
IkReal x5626=(gconst130*r11);
IkReal x5627=(gconst131*r21);
IkReal x5628=(gconst130*r01);
IkReal x5629=(gconst131*x5623);
IkReal x5630=((1.0)*gconst130*r20);
IkReal x5631=((1.0)*x5623);
IkReal x5632=((1.0)*gconst131*x5622);
evalcond[0]=((((-1.0)*r20*x5632))+((x5622*x5625))+((r22*x5623)));
evalcond[1]=(cj4+((x5622*x5626))+((r12*x5623))+(((-1.0)*r10*x5632)));
evalcond[2]=(((r02*x5623))+((x5622*x5628))+(((-1.0)*r00*x5632))+(((-1.0)*x5624)));
evalcond[3]=(((sj5*sj6))+((r20*x5629))+(((-1.0)*cj5*cj6))+(((-1.0)*x5625*x5631))+((r22*x5622)));
evalcond[4]=((((-1.0)*cj4*x5627))+(((-1.0)*x5628*x5631))+((r02*x5622))+((r00*x5629))+(((-1.0)*cj4*x5630)));
evalcond[5]=((((-1.0)*gconst130*r20*x5624))+(((-1.0)*x5624*x5627))+((r12*x5622))+(((-1.0)*x5626*x5631))+((r10*x5629)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal x5633=(((r10*sj9))+((cj9*r11)));
j8eval[0]=x5633;
j8eval[1]=((IKabs(r22))+(IKabs((((r21*sj9))+(((-1.0)*cj9*r20))))));
j8eval[2]=IKsign(x5633);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal x5634=((1.0)*cj9);
IkReal x5635=((((-1.0)*r21*x5634))+(((-1.0)*r20*sj9)));
j8eval[0]=x5635;
j8eval[1]=((IKabs(r12))+(IKabs((((r11*sj9))+(((-1.0)*r10*x5634))))));
j8eval[2]=IKsign(x5635);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal x5636=cj9*cj9;
IkReal x5637=r01*r01;
IkReal x5638=(cj9*r00);
IkReal x5639=(r01*sj9);
IkReal x5640=(x5637+((x5636*(r00*r00)))+(r02*r02)+(((-1.0)*x5636*x5637))+(((-2.0)*x5638*x5639)));
j8eval[0]=x5640;
j8eval[1]=((IKabs(r02))+(IKabs((x5639+(((-1.0)*x5638))))));
j8eval[2]=IKsign(x5640);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x5641=cj9*cj9;
IkReal x5642=r01*r01;
IkReal x5643=(cj9*r00);
IkReal x5644=(r01*sj9);
CheckValue<IkReal> x5645 = IKatan2WithCheck(IkReal(r02),IkReal((x5644+(((-1.0)*x5643)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5645.valid){
continue;
}
CheckValue<IkReal> x5646=IKPowWithIntegerCheck(IKsign((x5642+(((-2.0)*x5643*x5644))+((x5641*(r00*r00)))+(((-1.0)*x5641*x5642))+(r02*r02))),-1);
if(!x5646.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x5645.value)+(((1.5707963267949)*(x5646.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x5647=IKcos(j8);
IkReal x5648=IKsin(j8);
IkReal x5649=(cj9*r00);
IkReal x5650=((1.0)*x5647);
IkReal x5651=(cj9*x5648);
IkReal x5652=(sj9*x5647);
IkReal x5653=((1.0)*sj9*x5648);
evalcond[0]=(((r22*x5648))+((r21*x5652))+(((-1.0)*cj9*r20*x5650)));
evalcond[1]=(((r12*x5648))+((r11*x5652))+(((-1.0)*cj9*r10*x5650)));
evalcond[2]=(((x5648*x5649))+(((-1.0)*r01*x5653))+((r02*x5647)));
evalcond[3]=((-1.0)+((r01*x5652))+(((-1.0)*x5649*x5650))+((r02*x5648)));
evalcond[4]=(((r20*x5651))+((sj5*sj6))+(((-1.0)*r21*x5653))+((r22*x5647))+(((-1.0)*cj5*cj6)));
evalcond[5]=((((-1.0)*r11*x5653))+((r12*x5647))+(((-1.0)*cj9*r21))+((r10*x5651))+(((-1.0)*r20*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x5654=((1.0)*cj9);
CheckValue<IkReal> x5655=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5654))+(((-1.0)*r20*sj9)))),-1);
if(!x5655.valid){
continue;
}
CheckValue<IkReal> x5656 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x5654))+((r11*sj9)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5656.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5655.value)))+(x5656.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x5657=IKcos(j8);
IkReal x5658=IKsin(j8);
IkReal x5659=(cj9*r00);
IkReal x5660=((1.0)*x5657);
IkReal x5661=(cj9*x5658);
IkReal x5662=(sj9*x5657);
IkReal x5663=((1.0)*sj9*x5658);
evalcond[0]=(((r22*x5658))+((r21*x5662))+(((-1.0)*cj9*r20*x5660)));
evalcond[1]=(((r12*x5658))+(((-1.0)*cj9*r10*x5660))+((r11*x5662)));
evalcond[2]=((((-1.0)*r01*x5663))+((r02*x5657))+((x5658*x5659)));
evalcond[3]=((-1.0)+((r01*x5662))+(((-1.0)*x5659*x5660))+((r02*x5658)));
evalcond[4]=((((-1.0)*r21*x5663))+((sj5*sj6))+((r22*x5657))+((r20*x5661))+(((-1.0)*cj5*cj6)));
evalcond[5]=(((r12*x5657))+(((-1.0)*cj9*r21))+(((-1.0)*r11*x5663))+((r10*x5661))+(((-1.0)*r20*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x5664=IKPowWithIntegerCheck(IKsign((((r10*sj9))+((cj9*r11)))),-1);
if(!x5664.valid){
continue;
}
CheckValue<IkReal> x5665 = IKatan2WithCheck(IkReal((((r21*sj9))+(((-1.0)*cj9*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5665.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5664.value)))+(x5665.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x5666=IKcos(j8);
IkReal x5667=IKsin(j8);
IkReal x5668=(cj9*r00);
IkReal x5669=((1.0)*x5666);
IkReal x5670=(cj9*x5667);
IkReal x5671=(sj9*x5666);
IkReal x5672=((1.0)*sj9*x5667);
evalcond[0]=(((r22*x5667))+((r21*x5671))+(((-1.0)*cj9*r20*x5669)));
evalcond[1]=(((r11*x5671))+(((-1.0)*cj9*r10*x5669))+((r12*x5667)));
evalcond[2]=((((-1.0)*r01*x5672))+((r02*x5666))+((x5667*x5668)));
evalcond[3]=((-1.0)+((r02*x5667))+(((-1.0)*x5668*x5669))+((r01*x5671)));
evalcond[4]=(((r22*x5666))+((sj5*sj6))+((r20*x5670))+(((-1.0)*cj5*cj6))+(((-1.0)*r21*x5672)));
evalcond[5]=(((r10*x5670))+(((-1.0)*r11*x5672))+(((-1.0)*cj9*r21))+((r12*x5666))+(((-1.0)*r20*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal x5673=(((cj9*r21))+((r20*sj9)));
j8eval[0]=x5673;
j8eval[1]=((IKabs(r12))+(IKabs((((r11*sj9))+(((-1.0)*cj9*r10))))));
j8eval[2]=IKsign(x5673);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal x5674=((1.0)*cj9);
IkReal x5675=((((-1.0)*r10*sj9))+(((-1.0)*r11*x5674)));
j8eval[0]=x5675;
j8eval[1]=((IKabs((((r21*sj9))+(((-1.0)*r20*x5674)))))+(IKabs(r22)));
j8eval[2]=IKsign(x5675);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=1.0;
cj7=0;
j7=1.5707963267949;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal x5676=cj9*cj9;
IkReal x5677=r01*r01;
IkReal x5678=(r01*sj9);
IkReal x5679=(cj9*r00);
IkReal x5680=((((2.0)*x5678*x5679))+(((-1.0)*x5676*(r00*r00)))+(((-1.0)*x5677))+(((-1.0)*(r02*r02)))+((x5676*x5677)));
j8eval[0]=x5680;
j8eval[1]=IKsign(x5680);
j8eval[2]=((IKabs(r02))+(IKabs((x5678+(((-1.0)*x5679))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x5681=cj9*cj9;
IkReal x5682=r01*r01;
IkReal x5683=(r01*sj9);
IkReal x5684=(cj9*r00);
CheckValue<IkReal> x5685=IKPowWithIntegerCheck(IKsign(((((2.0)*x5683*x5684))+((x5681*x5682))+(((-1.0)*(r02*r02)))+(((-1.0)*x5681*(r00*r00)))+(((-1.0)*x5682)))),-1);
if(!x5685.valid){
continue;
}
CheckValue<IkReal> x5686 = IKatan2WithCheck(IkReal(r02),IkReal((x5683+(((-1.0)*x5684)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5686.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5685.value)))+(x5686.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x5687=IKcos(j8);
IkReal x5688=IKsin(j8);
IkReal x5689=(cj9*r00);
IkReal x5690=((1.0)*x5687);
IkReal x5691=(sj9*x5687);
IkReal x5692=(cj9*x5688);
IkReal x5693=((1.0)*sj9*x5688);
evalcond[0]=(((r22*x5688))+((r21*x5691))+(((-1.0)*cj9*r20*x5690)));
evalcond[1]=((((-1.0)*cj9*r10*x5690))+((r12*x5688))+((r11*x5691)));
evalcond[2]=(((r02*x5687))+((x5688*x5689))+(((-1.0)*r01*x5693)));
evalcond[3]=((1.0)+((r02*x5688))+(((-1.0)*x5689*x5690))+((r01*x5691)));
evalcond[4]=(((cj9*r21))+((r12*x5687))+((r10*x5692))+((r20*sj9))+(((-1.0)*r11*x5693)));
evalcond[5]=(((r22*x5687))+((sj5*sj6))+((r20*x5692))+(((-1.0)*cj5*cj6))+(((-1.0)*r21*x5693)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x5694=((1.0)*cj9);
CheckValue<IkReal> x5695 = IKatan2WithCheck(IkReal((((r21*sj9))+(((-1.0)*r20*x5694)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5695.valid){
continue;
}
CheckValue<IkReal> x5696=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj9))+(((-1.0)*r11*x5694)))),-1);
if(!x5696.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x5695.value)+(((1.5707963267949)*(x5696.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x5697=IKcos(j8);
IkReal x5698=IKsin(j8);
IkReal x5699=(cj9*r00);
IkReal x5700=((1.0)*x5697);
IkReal x5701=(sj9*x5697);
IkReal x5702=(cj9*x5698);
IkReal x5703=((1.0)*sj9*x5698);
evalcond[0]=(((r22*x5698))+(((-1.0)*cj9*r20*x5700))+((r21*x5701)));
evalcond[1]=(((r11*x5701))+((r12*x5698))+(((-1.0)*cj9*r10*x5700)));
evalcond[2]=(((x5698*x5699))+((r02*x5697))+(((-1.0)*r01*x5703)));
evalcond[3]=((1.0)+((r02*x5698))+(((-1.0)*x5699*x5700))+((r01*x5701)));
evalcond[4]=(((r10*x5702))+((cj9*r21))+((r12*x5697))+((r20*sj9))+(((-1.0)*r11*x5703)));
evalcond[5]=(((r20*x5702))+((r22*x5697))+((sj5*sj6))+(((-1.0)*r21*x5703))+(((-1.0)*cj5*cj6)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x5704=IKPowWithIntegerCheck(IKsign((((cj9*r21))+((r20*sj9)))),-1);
if(!x5704.valid){
continue;
}
CheckValue<IkReal> x5705 = IKatan2WithCheck(IkReal((((r11*sj9))+(((-1.0)*cj9*r10)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5705.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5704.value)))+(x5705.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x5706=IKcos(j8);
IkReal x5707=IKsin(j8);
IkReal x5708=(cj9*r00);
IkReal x5709=((1.0)*x5706);
IkReal x5710=(sj9*x5706);
IkReal x5711=(cj9*x5707);
IkReal x5712=((1.0)*sj9*x5707);
evalcond[0]=((((-1.0)*cj9*r20*x5709))+((r22*x5707))+((r21*x5710)));
evalcond[1]=(((r12*x5707))+((r11*x5710))+(((-1.0)*cj9*r10*x5709)));
evalcond[2]=((((-1.0)*r01*x5712))+((x5707*x5708))+((r02*x5706)));
evalcond[3]=((1.0)+((r02*x5707))+(((-1.0)*x5708*x5709))+((r01*x5710)));
evalcond[4]=(((r10*x5711))+((r12*x5706))+((cj9*r21))+(((-1.0)*r11*x5712))+((r20*sj9)));
evalcond[5]=(((sj5*sj6))+((r22*x5706))+(((-1.0)*r21*x5712))+(((-1.0)*cj5*cj6))+((r20*x5711)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x5713=((-1.0)*px);
sj7=1.0;
cj7=0;
j7=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x5713);
rxp1_1=(px*r21);
rxp1_2=(r11*x5713);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j8eval[0]=(((cj9*r20))+(((-1.0)*r21*sj9)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x5715=IKPowWithIntegerCheck((((cj9*r20))+(((-1.0)*r21*sj9))),-1);
if(!x5715.valid){
continue;
}
IkReal x5714=x5715.value;
sj8array[0]=((((-1.0)*sj5*sj6*x5714))+((cj5*cj6*x5714)));
if( sj8array[0] >= -1-IKFAST_SINCOS_THRESH && sj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKasin(sj8array[0]);
    cj8array[0] = IKcos(j8array[0]);
    sj8array[1] = sj8array[0];
    j8array[1] = j8array[0] > 0 ? (IKPI-j8array[0]) : (-IKPI-j8array[0]);
    cj8array[1] = -cj8array[0];
}
else if( isnan(sj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[3];
IkReal x5716=IKcos(j8);
IkReal x5717=(sj9*x5716);
IkReal x5718=((1.0)*cj9*x5716);
evalcond[0]=(r02*x5716);
evalcond[1]=((((-1.0)*r20*x5718))+((r21*x5717)));
evalcond[2]=((((-1.0)*r10*x5718))+((r11*x5717)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x5719=((1.0)*cj9);
CheckValue<IkReal> x5720 = IKatan2WithCheck(IkReal(((((-1.0)*r10*sj4*x5719))+((r11*sj4*sj9))+((cj4*r01*sj9))+(((-1.0)*cj4*r00*x5719)))),IkReal(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5720.valid){
continue;
}
CheckValue<IkReal> x5721=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5719))+(((-1.0)*r20*sj9)))),-1);
if(!x5721.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x5720.value)+(((1.5707963267949)*(x5721.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x5722=IKcos(j8);
IkReal x5723=IKsin(j8);
IkReal x5724=(cj9*r00);
IkReal x5725=((1.0)*sj4);
IkReal x5726=(r20*sj9);
IkReal x5727=((1.0)*cj4);
IkReal x5728=(cj9*r21);
IkReal x5729=((1.0)*x5722);
IkReal x5730=(cj9*x5723);
IkReal x5731=(sj9*x5722);
IkReal x5732=((1.0)*sj9*x5723);
evalcond[0]=(((r21*x5731))+((r22*x5723))+(((-1.0)*cj9*r20*x5729)));
evalcond[1]=(((r11*x5731))+cj4+((r12*x5723))+(((-1.0)*cj9*r10*x5729)));
evalcond[2]=(((r01*x5731))+(((-1.0)*x5725))+(((-1.0)*x5724*x5729))+((r02*x5723)));
evalcond[3]=((((-1.0)*r21*x5732))+((sj5*sj6))+((r20*x5730))+(((-1.0)*cj5*cj6))+((r22*x5722)));
evalcond[4]=(((x5723*x5724))+(((-1.0)*x5727*x5728))+(((-1.0)*x5726*x5727))+((r02*x5722))+(((-1.0)*r01*x5732)));
evalcond[5]=((((-1.0)*x5725*x5728))+(((-1.0)*x5725*x5726))+(((-1.0)*r11*x5732))+((r12*x5722))+((r10*x5730)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x5733 = IKatan2WithCheck(IkReal((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x5733.valid){
continue;
}
CheckValue<IkReal> x5734=IKPowWithIntegerCheck(IKsign((((r10*sj9))+((cj9*r11)))),-1);
if(!x5734.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x5733.value)+(((1.5707963267949)*(x5734.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x5735=IKcos(j8);
IkReal x5736=IKsin(j8);
IkReal x5737=(cj9*r00);
IkReal x5738=((1.0)*sj4);
IkReal x5739=(r20*sj9);
IkReal x5740=((1.0)*cj4);
IkReal x5741=(cj9*r21);
IkReal x5742=((1.0)*x5735);
IkReal x5743=(cj9*x5736);
IkReal x5744=(sj9*x5735);
IkReal x5745=((1.0)*sj9*x5736);
evalcond[0]=((((-1.0)*cj9*r20*x5742))+((r21*x5744))+((r22*x5736)));
evalcond[1]=(((r11*x5744))+cj4+((r12*x5736))+(((-1.0)*cj9*r10*x5742)));
evalcond[2]=((((-1.0)*x5737*x5742))+(((-1.0)*x5738))+((r01*x5744))+((r02*x5736)));
evalcond[3]=((((-1.0)*r21*x5745))+((sj5*sj6))+(((-1.0)*cj5*cj6))+((r20*x5743))+((r22*x5735)));
evalcond[4]=((((-1.0)*r01*x5745))+(((-1.0)*x5740*x5741))+((x5736*x5737))+((r02*x5735))+(((-1.0)*x5739*x5740)));
evalcond[5]=(((r12*x5735))+(((-1.0)*x5738*x5741))+(((-1.0)*r11*x5745))+(((-1.0)*x5738*x5739))+((r10*x5743)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x5746=IKPowWithIntegerCheck(IKsign((((r00*sj9))+((cj9*r01)))),-1);
if(!x5746.valid){
continue;
}
CheckValue<IkReal> x5747 = IKatan2WithCheck(IkReal((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5747.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5746.value)))+(x5747.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x5748=IKcos(j8);
IkReal x5749=IKsin(j8);
IkReal x5750=(cj9*r00);
IkReal x5751=((1.0)*sj4);
IkReal x5752=(r20*sj9);
IkReal x5753=((1.0)*cj4);
IkReal x5754=(cj9*r21);
IkReal x5755=((1.0)*x5748);
IkReal x5756=(cj9*x5749);
IkReal x5757=(sj9*x5748);
IkReal x5758=((1.0)*sj9*x5749);
evalcond[0]=(((r21*x5757))+((r22*x5749))+(((-1.0)*cj9*r20*x5755)));
evalcond[1]=(cj4+((r11*x5757))+((r12*x5749))+(((-1.0)*cj9*r10*x5755)));
evalcond[2]=(((r01*x5757))+(((-1.0)*x5751))+((r02*x5749))+(((-1.0)*x5750*x5755)));
evalcond[3]=(((r22*x5748))+((sj5*sj6))+(((-1.0)*r21*x5758))+((r20*x5756))+(((-1.0)*cj5*cj6)));
evalcond[4]=((((-1.0)*x5752*x5753))+(((-1.0)*r01*x5758))+((x5749*x5750))+(((-1.0)*x5753*x5754))+((r02*x5748)));
evalcond[5]=((((-1.0)*x5751*x5754))+(((-1.0)*x5751*x5752))+(((-1.0)*r11*x5758))+((r12*x5748))+((r10*x5756)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
IkReal x5759=(((cj5*cj6))+(((-1.0)*sj5*sj6)));
j4eval[0]=x5759;
j4eval[1]=((IKabs((((r10*sj9))+((cj9*r11)))))+(IKabs((((r00*sj9))+((cj9*r01))))));
j4eval[2]=IKsign(x5759);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
IkReal x5760=r21*r21;
IkReal x5761=cj9*cj9;
IkReal x5762=(cj5*cj6);
IkReal x5763=(sj5*sj6);
IkReal x5764=(cj9*r20);
IkReal x5765=(r21*sj9);
IkReal x5766=((((2.0)*x5764*x5765))+(((-1.0)*(r22*r22)))+((x5760*x5761))+(((-1.0)*x5760))+(((-1.0)*x5761*(r20*r20))));
j8eval[0]=x5766;
j8eval[1]=IKsign(x5766);
j8eval[2]=((IKabs(((((-1.0)*x5763*x5764))+(((-1.0)*x5762*x5765))+((x5762*x5764))+((x5763*x5765)))))+(IKabs((((r22*x5762))+(((-1.0)*r22*x5763))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
j4eval[0]=(((cj5*cj6))+(((-1.0)*sj5*sj6)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j5), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j6), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((2.36617629259053)*py))+(((-0.658427386453172)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.36617629259053)*py))+(((-0.658427386453172)*px))))+IKsqr(((((0.658427386453172)*py))+(((2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((2.36617629259053)*py))+(((-0.658427386453172)*px))), ((((0.658427386453172)*py))+(((2.36617629259053)*px))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x5767=IKcos(j4);
IkReal x5768=IKsin(j4);
evalcond[0]=((((-0.10915)*x5768))+(((-1.0)*px))+(((0.39225)*x5767)));
evalcond[1]=((((-1.0)*py))+(((0.39225)*x5768))+(((0.10915)*x5767)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j8eval[3];
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
j5=0;
sj5=0;
cj5=1.0;
j6=1.5707963267949;
sj6=1.0;
cj6=0;
IkReal x5769=(((r00*sj9))+((cj9*r01)));
j8eval[0]=x5769;
j8eval[1]=IKsign(x5769);
j8eval[2]=((IKabs((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))))+(IKabs((cj4*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
j5=0;
sj5=0;
cj5=1.0;
j6=1.5707963267949;
sj6=1.0;
cj6=0;
IkReal x5770=(((r10*sj9))+((cj9*r11)));
j8eval[0]=x5770;
j8eval[1]=IKsign(x5770);
j8eval[2]=((IKabs((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))))+(IKabs((r22*sj4))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
j5=0;
sj5=0;
cj5=1.0;
j6=1.5707963267949;
sj6=1.0;
cj6=0;
IkReal x5771=((1.0)*cj9);
IkReal x5772=((((-1.0)*r21*x5771))+(((-1.0)*r20*sj9)));
j8eval[0]=x5772;
j8eval[1]=((IKabs((((r11*sj4*sj9))+(((-1.0)*cj4*r00*x5771))+(((-1.0)*r10*sj4*x5771))+((cj4*r01*sj9)))))+(IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4))))));
j8eval[2]=IKsign(x5772);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x5773=((1.0)*cj9);
CheckValue<IkReal> x5774=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5773))+(((-1.0)*r20*sj9)))),-1);
if(!x5774.valid){
continue;
}
CheckValue<IkReal> x5775 = IKatan2WithCheck(IkReal((((r11*sj4*sj9))+(((-1.0)*cj4*r00*x5773))+(((-1.0)*r10*sj4*x5773))+((cj4*r01*sj9)))),IkReal(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5775.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5774.value)))+(x5775.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x5776=IKcos(j8);
IkReal x5777=IKsin(j8);
CheckValue<IkReal> x5787=IKPowWithIntegerCheck(cj9,-1);
if(!x5787.valid){
continue;
}
IkReal x5778=x5787.value;
IkReal x5779=sj9*sj9;
IkReal x5780=((1.0)*sj4);
IkReal x5781=((1.0)*cj9);
IkReal x5782=(r10*x5777);
IkReal x5783=((1.0)*x5776);
IkReal x5784=(sj9*x5776);
IkReal x5785=(r00*x5777);
IkReal x5786=((1.0)*x5778*x5779);
evalcond[0]=(((r21*x5784))+((r22*x5777))+(((-1.0)*r20*x5776*x5781)));
evalcond[1]=(cj4+(((-1.0)*r10*x5776*x5781))+((r11*x5784))+((r12*x5777)));
evalcond[2]=((((-1.0)*r20*x5777*x5781))+((r21*sj9*x5777))+(((-1.0)*r22*x5783)));
evalcond[3]=((((-1.0)*x5780))+((r01*x5784))+((r02*x5777))+(((-1.0)*r00*x5776*x5781)));
evalcond[4]=((((-1.0)*x5785*x5786))+(((-1.0)*x5781*x5785))+(((-1.0)*r02*x5783))+(((-1.0)*cj4)));
evalcond[5]=((((-1.0)*x5782*x5786))+(((-1.0)*x5780))+(((-1.0)*r12*x5783))+(((-1.0)*x5781*x5782)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x5788 = IKatan2WithCheck(IkReal((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x5788.valid){
continue;
}
CheckValue<IkReal> x5789=IKPowWithIntegerCheck(IKsign((((r10*sj9))+((cj9*r11)))),-1);
if(!x5789.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x5788.value)+(((1.5707963267949)*(x5789.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x5790=IKcos(j8);
IkReal x5791=IKsin(j8);
CheckValue<IkReal> x5801=IKPowWithIntegerCheck(cj9,-1);
if(!x5801.valid){
continue;
}
IkReal x5792=x5801.value;
IkReal x5793=sj9*sj9;
IkReal x5794=((1.0)*sj4);
IkReal x5795=((1.0)*cj9);
IkReal x5796=(r10*x5791);
IkReal x5797=((1.0)*x5790);
IkReal x5798=(sj9*x5790);
IkReal x5799=(r00*x5791);
IkReal x5800=((1.0)*x5792*x5793);
evalcond[0]=(((r21*x5798))+(((-1.0)*r20*x5790*x5795))+((r22*x5791)));
evalcond[1]=(cj4+((r12*x5791))+((r11*x5798))+(((-1.0)*r10*x5790*x5795)));
evalcond[2]=(((r21*sj9*x5791))+(((-1.0)*r20*x5791*x5795))+(((-1.0)*r22*x5797)));
evalcond[3]=((((-1.0)*x5794))+((r01*x5798))+((r02*x5791))+(((-1.0)*r00*x5790*x5795)));
evalcond[4]=((((-1.0)*x5799*x5800))+(((-1.0)*x5795*x5799))+(((-1.0)*r02*x5797))+(((-1.0)*cj4)));
evalcond[5]=((((-1.0)*x5794))+(((-1.0)*x5796*x5800))+(((-1.0)*x5795*x5796))+(((-1.0)*r12*x5797)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x5802=IKPowWithIntegerCheck(IKsign((((r00*sj9))+((cj9*r01)))),-1);
if(!x5802.valid){
continue;
}
CheckValue<IkReal> x5803 = IKatan2WithCheck(IkReal((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5803.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5802.value)))+(x5803.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x5804=IKcos(j8);
IkReal x5805=IKsin(j8);
CheckValue<IkReal> x5815=IKPowWithIntegerCheck(cj9,-1);
if(!x5815.valid){
continue;
}
IkReal x5806=x5815.value;
IkReal x5807=sj9*sj9;
IkReal x5808=((1.0)*sj4);
IkReal x5809=((1.0)*cj9);
IkReal x5810=(r10*x5805);
IkReal x5811=((1.0)*x5804);
IkReal x5812=(sj9*x5804);
IkReal x5813=(r00*x5805);
IkReal x5814=((1.0)*x5806*x5807);
evalcond[0]=(((r21*x5812))+((r22*x5805))+(((-1.0)*r20*x5804*x5809)));
evalcond[1]=((((-1.0)*r10*x5804*x5809))+cj4+((r11*x5812))+((r12*x5805)));
evalcond[2]=(((r21*sj9*x5805))+(((-1.0)*r20*x5805*x5809))+(((-1.0)*r22*x5811)));
evalcond[3]=((((-1.0)*r00*x5804*x5809))+(((-1.0)*x5808))+((r02*x5805))+((r01*x5812)));
evalcond[4]=((((-1.0)*x5813*x5814))+(((-1.0)*r02*x5811))+(((-1.0)*x5809*x5813))+(((-1.0)*cj4)));
evalcond[5]=((((-1.0)*r12*x5811))+(((-1.0)*x5810*x5814))+(((-1.0)*x5808))+(((-1.0)*x5809*x5810)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j5), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j6), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((-0.658427386453172)*px))+(((-2.36617629259053)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((-2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))))+IKsqr(((((0.658427386453172)*py))+(((-2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))), ((((0.658427386453172)*py))+(((-2.36617629259053)*px))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x5816=IKcos(j4);
IkReal x5817=IKsin(j4);
evalcond[0]=((((-0.10915)*x5817))+(((-1.0)*px))+(((-0.39225)*x5816)));
evalcond[1]=((((0.10915)*x5816))+(((-1.0)*py))+(((-0.39225)*x5817)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j8eval[3];
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
j5=0;
sj5=0;
cj5=1.0;
j6=-1.5707963267949;
sj6=-1.0;
cj6=0;
IkReal x5818=(((r00*sj9))+((cj9*r01)));
j8eval[0]=x5818;
j8eval[1]=IKsign(x5818);
j8eval[2]=((IKabs((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))))+(IKabs((cj4*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
j5=0;
sj5=0;
cj5=1.0;
j6=-1.5707963267949;
sj6=-1.0;
cj6=0;
IkReal x5819=(((r10*sj9))+((cj9*r11)));
j8eval[0]=x5819;
j8eval[1]=IKsign(x5819);
j8eval[2]=((IKabs((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))))+(IKabs((r22*sj4))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
j5=0;
sj5=0;
cj5=1.0;
j6=-1.5707963267949;
sj6=-1.0;
cj6=0;
IkReal x5820=((1.0)*cj9);
IkReal x5821=((((-1.0)*r21*x5820))+(((-1.0)*r20*sj9)));
j8eval[0]=x5821;
j8eval[1]=((IKabs(((((-1.0)*r10*sj4*x5820))+((r11*sj4*sj9))+(((-1.0)*cj4*r00*x5820))+((cj4*r01*sj9)))))+(IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4))))));
j8eval[2]=IKsign(x5821);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x5822=((1.0)*cj9);
CheckValue<IkReal> x5823 = IKatan2WithCheck(IkReal(((((-1.0)*r10*sj4*x5822))+((r11*sj4*sj9))+(((-1.0)*cj4*r00*x5822))+((cj4*r01*sj9)))),IkReal(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5823.valid){
continue;
}
CheckValue<IkReal> x5824=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5822))+(((-1.0)*r20*sj9)))),-1);
if(!x5824.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x5823.value)+(((1.5707963267949)*(x5824.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x5825=IKcos(j8);
IkReal x5826=IKsin(j8);
CheckValue<IkReal> x5835=IKPowWithIntegerCheck(cj9,-1);
if(!x5835.valid){
continue;
}
IkReal x5827=x5835.value;
IkReal x5828=sj9*sj9;
IkReal x5829=((1.0)*cj9);
IkReal x5830=(r10*x5826);
IkReal x5831=((1.0)*x5825);
IkReal x5832=(sj9*x5825);
IkReal x5833=(r00*x5826);
IkReal x5834=((1.0)*x5827*x5828);
evalcond[0]=(((r21*x5832))+(((-1.0)*r20*x5825*x5829))+((r22*x5826)));
evalcond[1]=(cj4+((r12*x5826))+((r11*x5832))+(((-1.0)*r10*x5825*x5829)));
evalcond[2]=((((-1.0)*r22*x5831))+((r21*sj9*x5826))+(((-1.0)*r20*x5826*x5829)));
evalcond[3]=(((r02*x5826))+(((-1.0)*sj4))+((r01*x5832))+(((-1.0)*r00*x5825*x5829)));
evalcond[4]=((((-1.0)*r02*x5831))+(((-1.0)*x5833*x5834))+cj4+(((-1.0)*x5829*x5833)));
evalcond[5]=(sj4+(((-1.0)*x5830*x5834))+(((-1.0)*r12*x5831))+(((-1.0)*x5829*x5830)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x5836 = IKatan2WithCheck(IkReal((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x5836.valid){
continue;
}
CheckValue<IkReal> x5837=IKPowWithIntegerCheck(IKsign((((r10*sj9))+((cj9*r11)))),-1);
if(!x5837.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x5836.value)+(((1.5707963267949)*(x5837.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x5838=IKcos(j8);
IkReal x5839=IKsin(j8);
CheckValue<IkReal> x5848=IKPowWithIntegerCheck(cj9,-1);
if(!x5848.valid){
continue;
}
IkReal x5840=x5848.value;
IkReal x5841=sj9*sj9;
IkReal x5842=((1.0)*cj9);
IkReal x5843=(r10*x5839);
IkReal x5844=((1.0)*x5838);
IkReal x5845=(sj9*x5838);
IkReal x5846=(r00*x5839);
IkReal x5847=((1.0)*x5840*x5841);
evalcond[0]=(((r21*x5845))+((r22*x5839))+(((-1.0)*r20*x5838*x5842)));
evalcond[1]=(cj4+((r11*x5845))+((r12*x5839))+(((-1.0)*r10*x5838*x5842)));
evalcond[2]=(((r21*sj9*x5839))+(((-1.0)*r20*x5839*x5842))+(((-1.0)*r22*x5844)));
evalcond[3]=(((r02*x5839))+(((-1.0)*sj4))+(((-1.0)*r00*x5838*x5842))+((r01*x5845)));
evalcond[4]=(cj4+(((-1.0)*r02*x5844))+(((-1.0)*x5842*x5846))+(((-1.0)*x5846*x5847)));
evalcond[5]=(sj4+(((-1.0)*x5842*x5843))+(((-1.0)*x5843*x5847))+(((-1.0)*r12*x5844)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x5849=IKPowWithIntegerCheck(IKsign((((r00*sj9))+((cj9*r01)))),-1);
if(!x5849.valid){
continue;
}
CheckValue<IkReal> x5850 = IKatan2WithCheck(IkReal((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5850.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5849.value)))+(x5850.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x5851=IKcos(j8);
IkReal x5852=IKsin(j8);
CheckValue<IkReal> x5861=IKPowWithIntegerCheck(cj9,-1);
if(!x5861.valid){
continue;
}
IkReal x5853=x5861.value;
IkReal x5854=sj9*sj9;
IkReal x5855=((1.0)*cj9);
IkReal x5856=(r10*x5852);
IkReal x5857=((1.0)*x5851);
IkReal x5858=(sj9*x5851);
IkReal x5859=(r00*x5852);
IkReal x5860=((1.0)*x5853*x5854);
evalcond[0]=(((r22*x5852))+((r21*x5858))+(((-1.0)*r20*x5851*x5855)));
evalcond[1]=(cj4+((r11*x5858))+((r12*x5852))+(((-1.0)*r10*x5851*x5855)));
evalcond[2]=(((r21*sj9*x5852))+(((-1.0)*r22*x5857))+(((-1.0)*r20*x5852*x5855)));
evalcond[3]=((((-1.0)*sj4))+((r01*x5858))+(((-1.0)*r00*x5851*x5855))+((r02*x5852)));
evalcond[4]=(cj4+(((-1.0)*x5859*x5860))+(((-1.0)*x5855*x5859))+(((-1.0)*r02*x5857)));
evalcond[5]=(sj4+(((-1.0)*r12*x5857))+(((-1.0)*x5855*x5856))+(((-1.0)*x5856*x5860)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j5), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j6), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((-0.160559264620033)*px))+(((1.20217186450501)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.160559264620033)*py))+(((1.20217186450501)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.160559264620033)*px))+(((1.20217186450501)*py))))+IKsqr(((((0.160559264620033)*py))+(((1.20217186450501)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-0.160559264620033)*px))+(((1.20217186450501)*py))), ((((0.160559264620033)*py))+(((1.20217186450501)*px))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x5862=IKcos(j4);
IkReal x5863=IKsin(j4);
evalcond[0]=((((-0.10915)*x5863))+(((-1.0)*px))+(((0.81725)*x5862)));
evalcond[1]=((((0.10915)*x5862))+(((-1.0)*py))+(((0.81725)*x5863)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j8eval[3];
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j6=0;
sj6=0;
cj6=1.0;
IkReal x5864=(((r00*sj9))+((cj9*r01)));
j8eval[0]=x5864;
j8eval[1]=IKsign(x5864);
j8eval[2]=((IKabs((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))))+(IKabs((cj4*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j6=0;
sj6=0;
cj6=1.0;
IkReal x5865=(((r10*sj9))+((cj9*r11)));
j8eval[0]=x5865;
j8eval[1]=IKsign(x5865);
j8eval[2]=((IKabs((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))))+(IKabs((r22*sj4))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j6=0;
sj6=0;
cj6=1.0;
IkReal x5866=((1.0)*cj9);
IkReal x5867=((((-1.0)*r21*x5866))+(((-1.0)*r20*sj9)));
j8eval[0]=x5867;
j8eval[1]=((IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))))+(IKabs(((((-1.0)*cj4*r00*x5866))+((r11*sj4*sj9))+((cj4*r01*sj9))+(((-1.0)*r10*sj4*x5866))))));
j8eval[2]=IKsign(x5867);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x5868=((1.0)*cj9);
CheckValue<IkReal> x5869 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*r00*x5868))+((r11*sj4*sj9))+((cj4*r01*sj9))+(((-1.0)*r10*sj4*x5868)))),IkReal(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5869.valid){
continue;
}
CheckValue<IkReal> x5870=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5868))+(((-1.0)*r20*sj9)))),-1);
if(!x5870.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x5869.value)+(((1.5707963267949)*(x5870.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x5871=IKcos(j8);
IkReal x5872=IKsin(j8);
CheckValue<IkReal> x5882=IKPowWithIntegerCheck(cj9,-1);
if(!x5882.valid){
continue;
}
IkReal x5873=x5882.value;
IkReal x5874=sj9*sj9;
IkReal x5875=((1.0)*sj4);
IkReal x5876=((1.0)*cj9);
IkReal x5877=(r10*x5872);
IkReal x5878=((1.0)*x5871);
IkReal x5879=(sj9*x5871);
IkReal x5880=(r00*x5872);
IkReal x5881=((1.0)*x5873*x5874);
evalcond[0]=(((r22*x5872))+(((-1.0)*r20*x5871*x5876))+((r21*x5879)));
evalcond[1]=(cj4+((r12*x5872))+((r11*x5879))+(((-1.0)*r10*x5871*x5876)));
evalcond[2]=((((-1.0)*r22*x5878))+(((-1.0)*r20*x5872*x5876))+((r21*sj9*x5872)));
evalcond[3]=((((-1.0)*x5875))+((r02*x5872))+(((-1.0)*r00*x5871*x5876))+((r01*x5879)));
evalcond[4]=((((-1.0)*x5876*x5880))+(((-1.0)*r02*x5878))+(((-1.0)*x5880*x5881))+(((-1.0)*cj4)));
evalcond[5]=((((-1.0)*r12*x5878))+(((-1.0)*x5875))+(((-1.0)*x5877*x5881))+(((-1.0)*x5876*x5877)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x5883 = IKatan2WithCheck(IkReal((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x5883.valid){
continue;
}
CheckValue<IkReal> x5884=IKPowWithIntegerCheck(IKsign((((r10*sj9))+((cj9*r11)))),-1);
if(!x5884.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x5883.value)+(((1.5707963267949)*(x5884.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x5885=IKcos(j8);
IkReal x5886=IKsin(j8);
CheckValue<IkReal> x5896=IKPowWithIntegerCheck(cj9,-1);
if(!x5896.valid){
continue;
}
IkReal x5887=x5896.value;
IkReal x5888=sj9*sj9;
IkReal x5889=((1.0)*sj4);
IkReal x5890=((1.0)*cj9);
IkReal x5891=(r10*x5886);
IkReal x5892=((1.0)*x5885);
IkReal x5893=(sj9*x5885);
IkReal x5894=(r00*x5886);
IkReal x5895=((1.0)*x5887*x5888);
evalcond[0]=(((r21*x5893))+((r22*x5886))+(((-1.0)*r20*x5885*x5890)));
evalcond[1]=(cj4+((r12*x5886))+((r11*x5893))+(((-1.0)*r10*x5885*x5890)));
evalcond[2]=((((-1.0)*r20*x5886*x5890))+(((-1.0)*r22*x5892))+((r21*sj9*x5886)));
evalcond[3]=((((-1.0)*r00*x5885*x5890))+(((-1.0)*x5889))+((r01*x5893))+((r02*x5886)));
evalcond[4]=((((-1.0)*x5890*x5894))+(((-1.0)*r02*x5892))+(((-1.0)*x5894*x5895))+(((-1.0)*cj4)));
evalcond[5]=((((-1.0)*r12*x5892))+(((-1.0)*x5890*x5891))+(((-1.0)*x5891*x5895))+(((-1.0)*x5889)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x5897=IKPowWithIntegerCheck(IKsign((((r00*sj9))+((cj9*r01)))),-1);
if(!x5897.valid){
continue;
}
CheckValue<IkReal> x5898 = IKatan2WithCheck(IkReal((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5898.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5897.value)))+(x5898.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x5899=IKcos(j8);
IkReal x5900=IKsin(j8);
CheckValue<IkReal> x5910=IKPowWithIntegerCheck(cj9,-1);
if(!x5910.valid){
continue;
}
IkReal x5901=x5910.value;
IkReal x5902=sj9*sj9;
IkReal x5903=((1.0)*sj4);
IkReal x5904=((1.0)*cj9);
IkReal x5905=(r10*x5900);
IkReal x5906=((1.0)*x5899);
IkReal x5907=(sj9*x5899);
IkReal x5908=(r00*x5900);
IkReal x5909=((1.0)*x5901*x5902);
evalcond[0]=((((-1.0)*r20*x5899*x5904))+((r22*x5900))+((r21*x5907)));
evalcond[1]=((((-1.0)*r10*x5899*x5904))+((r12*x5900))+cj4+((r11*x5907)));
evalcond[2]=((((-1.0)*r20*x5900*x5904))+(((-1.0)*r22*x5906))+((r21*sj9*x5900)));
evalcond[3]=((((-1.0)*r00*x5899*x5904))+((r02*x5900))+(((-1.0)*x5903))+((r01*x5907)));
evalcond[4]=((((-1.0)*x5904*x5908))+(((-1.0)*r02*x5906))+(((-1.0)*x5908*x5909))+(((-1.0)*cj4)));
evalcond[5]=((((-1.0)*r12*x5906))+(((-1.0)*x5904*x5905))+(((-1.0)*x5905*x5909))+(((-1.0)*x5903)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j5), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j6, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((2.52189136462044)*py))+(((-8.4050211434602)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((8.4050211434602)*py))+(((2.52189136462044)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.52189136462044)*py))+(((-8.4050211434602)*px))))+IKsqr(((((8.4050211434602)*py))+(((2.52189136462044)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((2.52189136462044)*py))+(((-8.4050211434602)*px))), ((((8.4050211434602)*py))+(((2.52189136462044)*px))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x5911=IKcos(j4);
IkReal x5912=IKsin(j4);
evalcond[0]=((((-0.10915)*x5912))+(((-1.0)*px))+(((0.03275)*x5911)));
evalcond[1]=((((0.10915)*x5911))+(((-1.0)*py))+(((0.03275)*x5912)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j8eval[3];
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j6=3.14159265358979;
sj6=0;
cj6=-1.0;
IkReal x5913=(((r00*sj9))+((cj9*r01)));
j8eval[0]=x5913;
j8eval[1]=IKsign(x5913);
j8eval[2]=((IKabs((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))))+(IKabs((cj4*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j6=3.14159265358979;
sj6=0;
cj6=-1.0;
IkReal x5914=(((r10*sj9))+((cj9*r11)));
j8eval[0]=x5914;
j8eval[1]=IKsign(x5914);
j8eval[2]=((IKabs((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))))+(IKabs((r22*sj4))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
j5=1.5707963267949;
sj5=1.0;
cj5=0;
j6=3.14159265358979;
sj6=0;
cj6=-1.0;
IkReal x5915=((1.0)*cj9);
IkReal x5916=((((-1.0)*r21*x5915))+(((-1.0)*r20*sj9)));
j8eval[0]=x5916;
j8eval[1]=((IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))))+(IKabs(((((-1.0)*r10*sj4*x5915))+((r11*sj4*sj9))+((cj4*r01*sj9))+(((-1.0)*cj4*r00*x5915))))));
j8eval[2]=IKsign(x5916);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x5917=((1.0)*cj9);
CheckValue<IkReal> x5918=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5917))+(((-1.0)*r20*sj9)))),-1);
if(!x5918.valid){
continue;
}
CheckValue<IkReal> x5919 = IKatan2WithCheck(IkReal(((((-1.0)*r10*sj4*x5917))+((r11*sj4*sj9))+((cj4*r01*sj9))+(((-1.0)*cj4*r00*x5917)))),IkReal(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5919.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5918.value)))+(x5919.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x5920=IKcos(j8);
IkReal x5921=IKsin(j8);
CheckValue<IkReal> x5930=IKPowWithIntegerCheck(cj9,-1);
if(!x5930.valid){
continue;
}
IkReal x5922=x5930.value;
IkReal x5923=sj9*sj9;
IkReal x5924=((1.0)*cj9);
IkReal x5925=(r10*x5921);
IkReal x5926=((1.0)*x5920);
IkReal x5927=(sj9*x5920);
IkReal x5928=(r00*x5921);
IkReal x5929=((1.0)*x5922*x5923);
evalcond[0]=((((-1.0)*r20*x5920*x5924))+((r22*x5921))+((r21*x5927)));
evalcond[1]=(cj4+(((-1.0)*r10*x5920*x5924))+((r11*x5927))+((r12*x5921)));
evalcond[2]=((((-1.0)*r22*x5926))+((r21*sj9*x5921))+(((-1.0)*r20*x5921*x5924)));
evalcond[3]=((((-1.0)*r00*x5920*x5924))+(((-1.0)*sj4))+((r01*x5927))+((r02*x5921)));
evalcond[4]=(cj4+(((-1.0)*r02*x5926))+(((-1.0)*x5928*x5929))+(((-1.0)*x5924*x5928)));
evalcond[5]=(sj4+(((-1.0)*x5925*x5929))+(((-1.0)*r12*x5926))+(((-1.0)*x5924*x5925)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x5931 = IKatan2WithCheck(IkReal((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x5931.valid){
continue;
}
CheckValue<IkReal> x5932=IKPowWithIntegerCheck(IKsign((((r10*sj9))+((cj9*r11)))),-1);
if(!x5932.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x5931.value)+(((1.5707963267949)*(x5932.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x5933=IKcos(j8);
IkReal x5934=IKsin(j8);
CheckValue<IkReal> x5943=IKPowWithIntegerCheck(cj9,-1);
if(!x5943.valid){
continue;
}
IkReal x5935=x5943.value;
IkReal x5936=sj9*sj9;
IkReal x5937=((1.0)*cj9);
IkReal x5938=(r10*x5934);
IkReal x5939=((1.0)*x5933);
IkReal x5940=(sj9*x5933);
IkReal x5941=(r00*x5934);
IkReal x5942=((1.0)*x5935*x5936);
evalcond[0]=(((r22*x5934))+((r21*x5940))+(((-1.0)*r20*x5933*x5937)));
evalcond[1]=(cj4+((r12*x5934))+(((-1.0)*r10*x5933*x5937))+((r11*x5940)));
evalcond[2]=(((r21*sj9*x5934))+(((-1.0)*r22*x5939))+(((-1.0)*r20*x5934*x5937)));
evalcond[3]=((((-1.0)*sj4))+((r01*x5940))+(((-1.0)*r00*x5933*x5937))+((r02*x5934)));
evalcond[4]=(cj4+(((-1.0)*r02*x5939))+(((-1.0)*x5937*x5941))+(((-1.0)*x5941*x5942)));
evalcond[5]=(sj4+(((-1.0)*x5938*x5942))+(((-1.0)*x5937*x5938))+(((-1.0)*r12*x5939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x5944=IKPowWithIntegerCheck(IKsign((((r00*sj9))+((cj9*r01)))),-1);
if(!x5944.valid){
continue;
}
CheckValue<IkReal> x5945 = IKatan2WithCheck(IkReal((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5945.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5944.value)))+(x5945.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x5946=IKcos(j8);
IkReal x5947=IKsin(j8);
CheckValue<IkReal> x5956=IKPowWithIntegerCheck(cj9,-1);
if(!x5956.valid){
continue;
}
IkReal x5948=x5956.value;
IkReal x5949=sj9*sj9;
IkReal x5950=((1.0)*cj9);
IkReal x5951=(r10*x5947);
IkReal x5952=((1.0)*x5946);
IkReal x5953=(sj9*x5946);
IkReal x5954=(r00*x5947);
IkReal x5955=((1.0)*x5948*x5949);
evalcond[0]=(((r21*x5953))+(((-1.0)*r20*x5946*x5950))+((r22*x5947)));
evalcond[1]=(cj4+((r11*x5953))+(((-1.0)*r10*x5946*x5950))+((r12*x5947)));
evalcond[2]=((((-1.0)*r20*x5947*x5950))+((r21*sj9*x5947))+(((-1.0)*r22*x5952)));
evalcond[3]=((((-1.0)*sj4))+(((-1.0)*r00*x5946*x5950))+((r02*x5947))+((r01*x5953)));
evalcond[4]=(cj4+(((-1.0)*r02*x5952))+(((-1.0)*x5950*x5954))+(((-1.0)*x5954*x5955)));
evalcond[5]=(sj4+(((-1.0)*x5950*x5951))+(((-1.0)*x5951*x5955))+(((-1.0)*r12*x5952)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j5, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j6), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((-0.658427386453172)*px))+(((-2.36617629259053)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((-2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))))+IKsqr(((((0.658427386453172)*py))+(((-2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))), ((((0.658427386453172)*py))+(((-2.36617629259053)*px))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x5957=IKcos(j4);
IkReal x5958=IKsin(j4);
evalcond[0]=((((-0.39225)*x5957))+(((-1.0)*px))+(((-0.10915)*x5958)));
evalcond[1]=((((0.10915)*x5957))+(((-0.39225)*x5958))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j8eval[3];
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
j5=3.14159265358979;
sj5=0;
cj5=-1.0;
j6=1.5707963267949;
sj6=1.0;
cj6=0;
IkReal x5959=(((r00*sj9))+((cj9*r01)));
j8eval[0]=x5959;
j8eval[1]=IKsign(x5959);
j8eval[2]=((IKabs((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))))+(IKabs((cj4*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
j5=3.14159265358979;
sj5=0;
cj5=-1.0;
j6=1.5707963267949;
sj6=1.0;
cj6=0;
IkReal x5960=(((r10*sj9))+((cj9*r11)));
j8eval[0]=x5960;
j8eval[1]=IKsign(x5960);
j8eval[2]=((IKabs((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))))+(IKabs((r22*sj4))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
j5=3.14159265358979;
sj5=0;
cj5=-1.0;
j6=1.5707963267949;
sj6=1.0;
cj6=0;
IkReal x5961=((1.0)*cj9);
IkReal x5962=((((-1.0)*r21*x5961))+(((-1.0)*r20*sj9)));
j8eval[0]=x5962;
j8eval[1]=((IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))))+(IKabs(((((-1.0)*cj4*r00*x5961))+((r11*sj4*sj9))+(((-1.0)*r10*sj4*x5961))+((cj4*r01*sj9))))));
j8eval[2]=IKsign(x5962);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x5963=((1.0)*cj9);
CheckValue<IkReal> x5964 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*r00*x5963))+((r11*sj4*sj9))+(((-1.0)*r10*sj4*x5963))+((cj4*r01*sj9)))),IkReal(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5964.valid){
continue;
}
CheckValue<IkReal> x5965=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5963))+(((-1.0)*r20*sj9)))),-1);
if(!x5965.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x5964.value)+(((1.5707963267949)*(x5965.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x5966=IKcos(j8);
IkReal x5967=IKsin(j8);
CheckValue<IkReal> x5976=IKPowWithIntegerCheck(cj9,-1);
if(!x5976.valid){
continue;
}
IkReal x5968=x5976.value;
IkReal x5969=sj9*sj9;
IkReal x5970=((1.0)*cj9);
IkReal x5971=(r10*x5967);
IkReal x5972=((1.0)*x5966);
IkReal x5973=(sj9*x5966);
IkReal x5974=(r00*x5967);
IkReal x5975=((1.0)*x5968*x5969);
evalcond[0]=(((r22*x5967))+(((-1.0)*r20*x5966*x5970))+((r21*x5973)));
evalcond[1]=(cj4+((r11*x5973))+(((-1.0)*r10*x5966*x5970))+((r12*x5967)));
evalcond[2]=((((-1.0)*r20*x5967*x5970))+(((-1.0)*r22*x5972))+((r21*sj9*x5967)));
evalcond[3]=(((r02*x5967))+(((-1.0)*sj4))+(((-1.0)*r00*x5966*x5970))+((r01*x5973)));
evalcond[4]=((((-1.0)*r02*x5972))+cj4+(((-1.0)*x5970*x5974))+(((-1.0)*x5974*x5975)));
evalcond[5]=(sj4+(((-1.0)*r12*x5972))+(((-1.0)*x5971*x5975))+(((-1.0)*x5970*x5971)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x5977 = IKatan2WithCheck(IkReal((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x5977.valid){
continue;
}
CheckValue<IkReal> x5978=IKPowWithIntegerCheck(IKsign((((r10*sj9))+((cj9*r11)))),-1);
if(!x5978.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x5977.value)+(((1.5707963267949)*(x5978.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x5979=IKcos(j8);
IkReal x5980=IKsin(j8);
CheckValue<IkReal> x5989=IKPowWithIntegerCheck(cj9,-1);
if(!x5989.valid){
continue;
}
IkReal x5981=x5989.value;
IkReal x5982=sj9*sj9;
IkReal x5983=((1.0)*cj9);
IkReal x5984=(r10*x5980);
IkReal x5985=((1.0)*x5979);
IkReal x5986=(sj9*x5979);
IkReal x5987=(r00*x5980);
IkReal x5988=((1.0)*x5981*x5982);
evalcond[0]=(((r21*x5986))+(((-1.0)*r20*x5979*x5983))+((r22*x5980)));
evalcond[1]=(((r12*x5980))+cj4+((r11*x5986))+(((-1.0)*r10*x5979*x5983)));
evalcond[2]=(((r21*sj9*x5980))+(((-1.0)*r20*x5980*x5983))+(((-1.0)*r22*x5985)));
evalcond[3]=((((-1.0)*sj4))+((r02*x5980))+(((-1.0)*r00*x5979*x5983))+((r01*x5986)));
evalcond[4]=(cj4+(((-1.0)*x5987*x5988))+(((-1.0)*r02*x5985))+(((-1.0)*x5983*x5987)));
evalcond[5]=((((-1.0)*r12*x5985))+sj4+(((-1.0)*x5984*x5988))+(((-1.0)*x5983*x5984)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x5990=IKPowWithIntegerCheck(IKsign((((r00*sj9))+((cj9*r01)))),-1);
if(!x5990.valid){
continue;
}
CheckValue<IkReal> x5991 = IKatan2WithCheck(IkReal((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5991.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5990.value)))+(x5991.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x5992=IKcos(j8);
IkReal x5993=IKsin(j8);
CheckValue<IkReal> x6002=IKPowWithIntegerCheck(cj9,-1);
if(!x6002.valid){
continue;
}
IkReal x5994=x6002.value;
IkReal x5995=sj9*sj9;
IkReal x5996=((1.0)*cj9);
IkReal x5997=(r10*x5993);
IkReal x5998=((1.0)*x5992);
IkReal x5999=(sj9*x5992);
IkReal x6000=(r00*x5993);
IkReal x6001=((1.0)*x5994*x5995);
evalcond[0]=(((r21*x5999))+(((-1.0)*r20*x5992*x5996))+((r22*x5993)));
evalcond[1]=(((r12*x5993))+cj4+(((-1.0)*r10*x5992*x5996))+((r11*x5999)));
evalcond[2]=(((r21*sj9*x5993))+(((-1.0)*r22*x5998))+(((-1.0)*r20*x5993*x5996)));
evalcond[3]=((((-1.0)*sj4))+((r02*x5993))+(((-1.0)*r00*x5992*x5996))+((r01*x5999)));
evalcond[4]=(cj4+(((-1.0)*x5996*x6000))+(((-1.0)*r02*x5998))+(((-1.0)*x6000*x6001)));
evalcond[5]=(sj4+(((-1.0)*r12*x5998))+(((-1.0)*x5996*x5997))+(((-1.0)*x5997*x6001)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j5, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j6), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((2.36617629259053)*py))+(((-0.658427386453172)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.36617629259053)*py))+(((-0.658427386453172)*px))))+IKsqr(((((0.658427386453172)*py))+(((2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((2.36617629259053)*py))+(((-0.658427386453172)*px))), ((((0.658427386453172)*py))+(((2.36617629259053)*px))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x6003=IKcos(j4);
IkReal x6004=IKsin(j4);
evalcond[0]=((((-1.0)*px))+(((0.39225)*x6003))+(((-0.10915)*x6004)));
evalcond[1]=((((-1.0)*py))+(((0.39225)*x6004))+(((0.10915)*x6003)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j8eval[3];
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
j5=3.14159265358979;
sj5=0;
cj5=-1.0;
j6=-1.5707963267949;
sj6=-1.0;
cj6=0;
IkReal x6005=(((r00*sj9))+((cj9*r01)));
j8eval[0]=x6005;
j8eval[1]=IKsign(x6005);
j8eval[2]=((IKabs((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))))+(IKabs((cj4*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
j5=3.14159265358979;
sj5=0;
cj5=-1.0;
j6=-1.5707963267949;
sj6=-1.0;
cj6=0;
IkReal x6006=(((r10*sj9))+((cj9*r11)));
j8eval[0]=x6006;
j8eval[1]=IKsign(x6006);
j8eval[2]=((IKabs((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))))+(IKabs((r22*sj4))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
j5=3.14159265358979;
sj5=0;
cj5=-1.0;
j6=-1.5707963267949;
sj6=-1.0;
cj6=0;
IkReal x6007=((1.0)*cj9);
IkReal x6008=((((-1.0)*r21*x6007))+(((-1.0)*r20*sj9)));
j8eval[0]=x6008;
j8eval[1]=((IKabs(((((-1.0)*r10*sj4*x6007))+((r11*sj4*sj9))+((cj4*r01*sj9))+(((-1.0)*cj4*r00*x6007)))))+(IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4))))));
j8eval[2]=IKsign(x6008);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x6009=((1.0)*cj9);
CheckValue<IkReal> x6010=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6009))+(((-1.0)*r20*sj9)))),-1);
if(!x6010.valid){
continue;
}
CheckValue<IkReal> x6011 = IKatan2WithCheck(IkReal(((((-1.0)*r10*sj4*x6009))+((r11*sj4*sj9))+((cj4*r01*sj9))+(((-1.0)*cj4*r00*x6009)))),IkReal(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6011.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6010.value)))+(x6011.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x6012=IKcos(j8);
IkReal x6013=IKsin(j8);
CheckValue<IkReal> x6023=IKPowWithIntegerCheck(cj9,-1);
if(!x6023.valid){
continue;
}
IkReal x6014=x6023.value;
IkReal x6015=sj9*sj9;
IkReal x6016=((1.0)*sj4);
IkReal x6017=((1.0)*cj9);
IkReal x6018=(r10*x6013);
IkReal x6019=((1.0)*x6012);
IkReal x6020=(sj9*x6012);
IkReal x6021=(r00*x6013);
IkReal x6022=((1.0)*x6014*x6015);
evalcond[0]=(((r21*x6020))+(((-1.0)*r20*x6012*x6017))+((r22*x6013)));
evalcond[1]=(cj4+(((-1.0)*r10*x6012*x6017))+((r12*x6013))+((r11*x6020)));
evalcond[2]=(((r21*sj9*x6013))+(((-1.0)*r22*x6019))+(((-1.0)*r20*x6013*x6017)));
evalcond[3]=(((r01*x6020))+((r02*x6013))+(((-1.0)*r00*x6012*x6017))+(((-1.0)*x6016)));
evalcond[4]=((((-1.0)*r02*x6019))+(((-1.0)*x6021*x6022))+(((-1.0)*x6017*x6021))+(((-1.0)*cj4)));
evalcond[5]=((((-1.0)*x6017*x6018))+(((-1.0)*r12*x6019))+(((-1.0)*x6018*x6022))+(((-1.0)*x6016)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x6024 = IKatan2WithCheck(IkReal((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x6024.valid){
continue;
}
CheckValue<IkReal> x6025=IKPowWithIntegerCheck(IKsign((((r10*sj9))+((cj9*r11)))),-1);
if(!x6025.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x6024.value)+(((1.5707963267949)*(x6025.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x6026=IKcos(j8);
IkReal x6027=IKsin(j8);
CheckValue<IkReal> x6037=IKPowWithIntegerCheck(cj9,-1);
if(!x6037.valid){
continue;
}
IkReal x6028=x6037.value;
IkReal x6029=sj9*sj9;
IkReal x6030=((1.0)*sj4);
IkReal x6031=((1.0)*cj9);
IkReal x6032=(r10*x6027);
IkReal x6033=((1.0)*x6026);
IkReal x6034=(sj9*x6026);
IkReal x6035=(r00*x6027);
IkReal x6036=((1.0)*x6028*x6029);
evalcond[0]=(((r21*x6034))+(((-1.0)*r20*x6026*x6031))+((r22*x6027)));
evalcond[1]=(cj4+((r11*x6034))+((r12*x6027))+(((-1.0)*r10*x6026*x6031)));
evalcond[2]=(((r21*sj9*x6027))+(((-1.0)*r20*x6027*x6031))+(((-1.0)*r22*x6033)));
evalcond[3]=((((-1.0)*x6030))+((r02*x6027))+(((-1.0)*r00*x6026*x6031))+((r01*x6034)));
evalcond[4]=((((-1.0)*x6031*x6035))+(((-1.0)*x6035*x6036))+(((-1.0)*cj4))+(((-1.0)*r02*x6033)));
evalcond[5]=((((-1.0)*x6030))+(((-1.0)*x6032*x6036))+(((-1.0)*x6031*x6032))+(((-1.0)*r12*x6033)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x6038=IKPowWithIntegerCheck(IKsign((((r00*sj9))+((cj9*r01)))),-1);
if(!x6038.valid){
continue;
}
CheckValue<IkReal> x6039 = IKatan2WithCheck(IkReal((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6039.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6038.value)))+(x6039.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x6040=IKcos(j8);
IkReal x6041=IKsin(j8);
CheckValue<IkReal> x6051=IKPowWithIntegerCheck(cj9,-1);
if(!x6051.valid){
continue;
}
IkReal x6042=x6051.value;
IkReal x6043=sj9*sj9;
IkReal x6044=((1.0)*sj4);
IkReal x6045=((1.0)*cj9);
IkReal x6046=(r10*x6041);
IkReal x6047=((1.0)*x6040);
IkReal x6048=(sj9*x6040);
IkReal x6049=(r00*x6041);
IkReal x6050=((1.0)*x6042*x6043);
evalcond[0]=(((r22*x6041))+(((-1.0)*r20*x6040*x6045))+((r21*x6048)));
evalcond[1]=(((r11*x6048))+cj4+(((-1.0)*r10*x6040*x6045))+((r12*x6041)));
evalcond[2]=(((r21*sj9*x6041))+(((-1.0)*r22*x6047))+(((-1.0)*r20*x6041*x6045)));
evalcond[3]=((((-1.0)*x6044))+(((-1.0)*r00*x6040*x6045))+((r02*x6041))+((r01*x6048)));
evalcond[4]=((((-1.0)*r02*x6047))+(((-1.0)*x6049*x6050))+(((-1.0)*x6045*x6049))+(((-1.0)*cj4)));
evalcond[5]=((((-1.0)*x6044))+(((-1.0)*x6046*x6050))+(((-1.0)*x6045*x6046))+(((-1.0)*r12*x6047)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j5), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j6), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((-0.160559264620033)*px))+(((-1.20217186450501)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.160559264620033)*py))+(((-1.20217186450501)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.160559264620033)*px))+(((-1.20217186450501)*py))))+IKsqr(((((0.160559264620033)*py))+(((-1.20217186450501)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-0.160559264620033)*px))+(((-1.20217186450501)*py))), ((((0.160559264620033)*py))+(((-1.20217186450501)*px))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x6052=IKcos(j4);
IkReal x6053=IKsin(j4);
evalcond[0]=((((-0.10915)*x6053))+(((-1.0)*px))+(((-0.81725)*x6052)));
evalcond[1]=((((0.10915)*x6052))+(((-1.0)*py))+(((-0.81725)*x6053)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j8eval[3];
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j6=0;
sj6=0;
cj6=1.0;
IkReal x6054=(((r00*sj9))+((cj9*r01)));
j8eval[0]=x6054;
j8eval[1]=IKsign(x6054);
j8eval[2]=((IKabs((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))))+(IKabs((cj4*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j6=0;
sj6=0;
cj6=1.0;
IkReal x6055=(((r10*sj9))+((cj9*r11)));
j8eval[0]=x6055;
j8eval[1]=IKsign(x6055);
j8eval[2]=((IKabs((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))))+(IKabs((r22*sj4))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j6=0;
sj6=0;
cj6=1.0;
IkReal x6056=((1.0)*cj9);
IkReal x6057=((((-1.0)*r21*x6056))+(((-1.0)*r20*sj9)));
j8eval[0]=x6057;
j8eval[1]=((IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))))+(IKabs(((((-1.0)*r10*sj4*x6056))+((r11*sj4*sj9))+((cj4*r01*sj9))+(((-1.0)*cj4*r00*x6056))))));
j8eval[2]=IKsign(x6057);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x6058=((1.0)*cj9);
CheckValue<IkReal> x6059=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6058))+(((-1.0)*r20*sj9)))),-1);
if(!x6059.valid){
continue;
}
CheckValue<IkReal> x6060 = IKatan2WithCheck(IkReal(((((-1.0)*r10*sj4*x6058))+((r11*sj4*sj9))+((cj4*r01*sj9))+(((-1.0)*cj4*r00*x6058)))),IkReal(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6060.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6059.value)))+(x6060.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x6061=IKcos(j8);
IkReal x6062=IKsin(j8);
CheckValue<IkReal> x6071=IKPowWithIntegerCheck(cj9,-1);
if(!x6071.valid){
continue;
}
IkReal x6063=x6071.value;
IkReal x6064=sj9*sj9;
IkReal x6065=((1.0)*cj9);
IkReal x6066=(r10*x6062);
IkReal x6067=((1.0)*x6061);
IkReal x6068=(sj9*x6061);
IkReal x6069=(r00*x6062);
IkReal x6070=((1.0)*x6063*x6064);
evalcond[0]=(((r22*x6062))+((r21*x6068))+(((-1.0)*r20*x6061*x6065)));
evalcond[1]=((((-1.0)*r10*x6061*x6065))+cj4+((r11*x6068))+((r12*x6062)));
evalcond[2]=((((-1.0)*r22*x6067))+((r21*sj9*x6062))+(((-1.0)*r20*x6062*x6065)));
evalcond[3]=((((-1.0)*sj4))+(((-1.0)*r00*x6061*x6065))+((r01*x6068))+((r02*x6062)));
evalcond[4]=(cj4+(((-1.0)*r02*x6067))+(((-1.0)*x6069*x6070))+(((-1.0)*x6065*x6069)));
evalcond[5]=(sj4+(((-1.0)*x6066*x6070))+(((-1.0)*r12*x6067))+(((-1.0)*x6065*x6066)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x6072 = IKatan2WithCheck(IkReal((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x6072.valid){
continue;
}
CheckValue<IkReal> x6073=IKPowWithIntegerCheck(IKsign((((r10*sj9))+((cj9*r11)))),-1);
if(!x6073.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x6072.value)+(((1.5707963267949)*(x6073.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x6074=IKcos(j8);
IkReal x6075=IKsin(j8);
CheckValue<IkReal> x6084=IKPowWithIntegerCheck(cj9,-1);
if(!x6084.valid){
continue;
}
IkReal x6076=x6084.value;
IkReal x6077=sj9*sj9;
IkReal x6078=((1.0)*cj9);
IkReal x6079=(r10*x6075);
IkReal x6080=((1.0)*x6074);
IkReal x6081=(sj9*x6074);
IkReal x6082=(r00*x6075);
IkReal x6083=((1.0)*x6076*x6077);
evalcond[0]=((((-1.0)*r20*x6074*x6078))+((r22*x6075))+((r21*x6081)));
evalcond[1]=(cj4+(((-1.0)*r10*x6074*x6078))+((r11*x6081))+((r12*x6075)));
evalcond[2]=((((-1.0)*r22*x6080))+((r21*sj9*x6075))+(((-1.0)*r20*x6075*x6078)));
evalcond[3]=((((-1.0)*sj4))+((r01*x6081))+(((-1.0)*r00*x6074*x6078))+((r02*x6075)));
evalcond[4]=(cj4+(((-1.0)*r02*x6080))+(((-1.0)*x6082*x6083))+(((-1.0)*x6078*x6082)));
evalcond[5]=((((-1.0)*r12*x6080))+sj4+(((-1.0)*x6078*x6079))+(((-1.0)*x6079*x6083)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x6085=IKPowWithIntegerCheck(IKsign((((r00*sj9))+((cj9*r01)))),-1);
if(!x6085.valid){
continue;
}
CheckValue<IkReal> x6086 = IKatan2WithCheck(IkReal((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6086.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6085.value)))+(x6086.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x6087=IKcos(j8);
IkReal x6088=IKsin(j8);
CheckValue<IkReal> x6097=IKPowWithIntegerCheck(cj9,-1);
if(!x6097.valid){
continue;
}
IkReal x6089=x6097.value;
IkReal x6090=sj9*sj9;
IkReal x6091=((1.0)*cj9);
IkReal x6092=(r10*x6088);
IkReal x6093=((1.0)*x6087);
IkReal x6094=(sj9*x6087);
IkReal x6095=(r00*x6088);
IkReal x6096=((1.0)*x6089*x6090);
evalcond[0]=((((-1.0)*r20*x6087*x6091))+((r21*x6094))+((r22*x6088)));
evalcond[1]=(cj4+(((-1.0)*r10*x6087*x6091))+((r12*x6088))+((r11*x6094)));
evalcond[2]=((((-1.0)*r22*x6093))+(((-1.0)*r20*x6088*x6091))+((r21*sj9*x6088)));
evalcond[3]=((((-1.0)*sj4))+((r01*x6094))+(((-1.0)*r00*x6087*x6091))+((r02*x6088)));
evalcond[4]=((((-1.0)*x6091*x6095))+cj4+(((-1.0)*x6095*x6096))+(((-1.0)*r02*x6093)));
evalcond[5]=(sj4+(((-1.0)*x6091*x6092))+(((-1.0)*x6092*x6096))+(((-1.0)*r12*x6093)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j6, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j5), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((-2.52189136462044)*py))+(((-8.4050211434602)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((8.4050211434602)*py))+(((-2.52189136462044)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.52189136462044)*py))+(((-8.4050211434602)*px))))+IKsqr(((((8.4050211434602)*py))+(((-2.52189136462044)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-2.52189136462044)*py))+(((-8.4050211434602)*px))), ((((8.4050211434602)*py))+(((-2.52189136462044)*px))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x6098=IKcos(j4);
IkReal x6099=IKsin(j4);
evalcond[0]=((((-0.03275)*x6098))+(((-0.10915)*x6099))+(((-1.0)*px)));
evalcond[1]=((((-0.03275)*x6099))+(((0.10915)*x6098))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j8eval[3];
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j6=3.14159265358979;
sj6=0;
cj6=-1.0;
IkReal x6100=(((r00*sj9))+((cj9*r01)));
j8eval[0]=x6100;
j8eval[1]=IKsign(x6100);
j8eval[2]=((IKabs((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))))+(IKabs((cj4*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j6=3.14159265358979;
sj6=0;
cj6=-1.0;
IkReal x6101=(((r10*sj9))+((cj9*r11)));
j8eval[0]=x6101;
j8eval[1]=IKsign(x6101);
j8eval[2]=((IKabs((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))))+(IKabs((r22*sj4))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
j5=-1.5707963267949;
sj5=-1.0;
cj5=0;
j6=3.14159265358979;
sj6=0;
cj6=-1.0;
IkReal x6102=((1.0)*cj9);
IkReal x6103=((((-1.0)*r21*x6102))+(((-1.0)*r20*sj9)));
j8eval[0]=x6103;
j8eval[1]=((IKabs(((((-1.0)*r10*sj4*x6102))+((r11*sj4*sj9))+(((-1.0)*cj4*r00*x6102))+((cj4*r01*sj9)))))+(IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4))))));
j8eval[2]=IKsign(x6103);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x6104=((1.0)*cj9);
CheckValue<IkReal> x6105=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6104))+(((-1.0)*r20*sj9)))),-1);
if(!x6105.valid){
continue;
}
CheckValue<IkReal> x6106 = IKatan2WithCheck(IkReal(((((-1.0)*r10*sj4*x6104))+((r11*sj4*sj9))+(((-1.0)*cj4*r00*x6104))+((cj4*r01*sj9)))),IkReal(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6106.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6105.value)))+(x6106.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x6107=IKcos(j8);
IkReal x6108=IKsin(j8);
CheckValue<IkReal> x6118=IKPowWithIntegerCheck(cj9,-1);
if(!x6118.valid){
continue;
}
IkReal x6109=x6118.value;
IkReal x6110=sj9*sj9;
IkReal x6111=((1.0)*sj4);
IkReal x6112=((1.0)*cj9);
IkReal x6113=(r10*x6108);
IkReal x6114=((1.0)*x6107);
IkReal x6115=(sj9*x6107);
IkReal x6116=(r00*x6108);
IkReal x6117=((1.0)*x6109*x6110);
evalcond[0]=((((-1.0)*r20*x6107*x6112))+((r22*x6108))+((r21*x6115)));
evalcond[1]=(cj4+(((-1.0)*r10*x6107*x6112))+((r11*x6115))+((r12*x6108)));
evalcond[2]=(((r21*sj9*x6108))+(((-1.0)*r22*x6114))+(((-1.0)*r20*x6108*x6112)));
evalcond[3]=((((-1.0)*r00*x6107*x6112))+(((-1.0)*x6111))+((r01*x6115))+((r02*x6108)));
evalcond[4]=((((-1.0)*x6112*x6116))+(((-1.0)*x6116*x6117))+(((-1.0)*r02*x6114))+(((-1.0)*cj4)));
evalcond[5]=((((-1.0)*r12*x6114))+(((-1.0)*x6112*x6113))+(((-1.0)*x6111))+(((-1.0)*x6113*x6117)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x6119 = IKatan2WithCheck(IkReal((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x6119.valid){
continue;
}
CheckValue<IkReal> x6120=IKPowWithIntegerCheck(IKsign((((r10*sj9))+((cj9*r11)))),-1);
if(!x6120.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x6119.value)+(((1.5707963267949)*(x6120.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x6121=IKcos(j8);
IkReal x6122=IKsin(j8);
CheckValue<IkReal> x6132=IKPowWithIntegerCheck(cj9,-1);
if(!x6132.valid){
continue;
}
IkReal x6123=x6132.value;
IkReal x6124=sj9*sj9;
IkReal x6125=((1.0)*sj4);
IkReal x6126=((1.0)*cj9);
IkReal x6127=(r10*x6122);
IkReal x6128=((1.0)*x6121);
IkReal x6129=(sj9*x6121);
IkReal x6130=(r00*x6122);
IkReal x6131=((1.0)*x6123*x6124);
evalcond[0]=(((r21*x6129))+(((-1.0)*r20*x6121*x6126))+((r22*x6122)));
evalcond[1]=(((r12*x6122))+cj4+(((-1.0)*r10*x6121*x6126))+((r11*x6129)));
evalcond[2]=((((-1.0)*r22*x6128))+(((-1.0)*r20*x6122*x6126))+((r21*sj9*x6122)));
evalcond[3]=(((r01*x6129))+((r02*x6122))+(((-1.0)*x6125))+(((-1.0)*r00*x6121*x6126)));
evalcond[4]=((((-1.0)*x6130*x6131))+(((-1.0)*r02*x6128))+(((-1.0)*x6126*x6130))+(((-1.0)*cj4)));
evalcond[5]=((((-1.0)*x6126*x6127))+(((-1.0)*r12*x6128))+(((-1.0)*x6125))+(((-1.0)*x6127*x6131)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x6133=IKPowWithIntegerCheck(IKsign((((r00*sj9))+((cj9*r01)))),-1);
if(!x6133.valid){
continue;
}
CheckValue<IkReal> x6134 = IKatan2WithCheck(IkReal((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6134.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6133.value)))+(x6134.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x6135=IKcos(j8);
IkReal x6136=IKsin(j8);
CheckValue<IkReal> x6146=IKPowWithIntegerCheck(cj9,-1);
if(!x6146.valid){
continue;
}
IkReal x6137=x6146.value;
IkReal x6138=sj9*sj9;
IkReal x6139=((1.0)*sj4);
IkReal x6140=((1.0)*cj9);
IkReal x6141=(r10*x6136);
IkReal x6142=((1.0)*x6135);
IkReal x6143=(sj9*x6135);
IkReal x6144=(r00*x6136);
IkReal x6145=((1.0)*x6137*x6138);
evalcond[0]=(((r22*x6136))+(((-1.0)*r20*x6135*x6140))+((r21*x6143)));
evalcond[1]=(cj4+((r11*x6143))+(((-1.0)*r10*x6135*x6140))+((r12*x6136)));
evalcond[2]=((((-1.0)*r20*x6136*x6140))+(((-1.0)*r22*x6142))+((r21*sj9*x6136)));
evalcond[3]=((((-1.0)*r00*x6135*x6140))+((r01*x6143))+(((-1.0)*x6139))+((r02*x6136)));
evalcond[4]=((((-1.0)*x6144*x6145))+(((-1.0)*r02*x6142))+(((-1.0)*x6140*x6144))+(((-1.0)*cj4)));
evalcond[5]=((((-1.0)*x6139))+(((-1.0)*x6140*x6141))+(((-1.0)*x6141*x6145))+(((-1.0)*r12*x6142)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4, j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6147=(r00*sj9);
IkReal x6148=(cj5*cj6);
IkReal x6149=(cj9*r01);
IkReal x6150=(sj5*sj6);
IkReal x6151=((20000.0)*px);
IkReal x6152=((8500.0)*sj5);
IkReal x6153=((7845.0)*cj5*sj6);
IkReal x6154=((7845.0)*cj6*sj5);
CheckValue<IkReal> x6155=IKPowWithIntegerCheck(((((-2183.0)*x6150))+(((2183.0)*x6148))),-1);
if(!x6155.valid){
continue;
}
CheckValue<IkReal> x6156=IKPowWithIntegerCheck((x6148+(((-1.0)*x6150))),-1);
if(!x6156.valid){
continue;
}
if( IKabs(((x6155.value)*((((x6149*x6152))+((x6149*x6153))+((x6149*x6154))+((x6147*x6153))+((x6147*x6152))+((x6147*x6154))+(((1893.0)*x6149*x6150))+(((-1893.0)*x6148*x6149))+((x6150*x6151))+(((1893.0)*x6147*x6150))+(((-1.0)*x6148*x6151))+(((-1893.0)*x6147*x6148)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x6156.value)*((x6147+x6149)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x6155.value)*((((x6149*x6152))+((x6149*x6153))+((x6149*x6154))+((x6147*x6153))+((x6147*x6152))+((x6147*x6154))+(((1893.0)*x6149*x6150))+(((-1893.0)*x6148*x6149))+((x6150*x6151))+(((1893.0)*x6147*x6150))+(((-1.0)*x6148*x6151))+(((-1893.0)*x6147*x6148))))))+IKsqr(((x6156.value)*((x6147+x6149))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x6155.value)*((((x6149*x6152))+((x6149*x6153))+((x6149*x6154))+((x6147*x6153))+((x6147*x6152))+((x6147*x6154))+(((1893.0)*x6149*x6150))+(((-1893.0)*x6148*x6149))+((x6150*x6151))+(((1893.0)*x6147*x6150))+(((-1.0)*x6148*x6151))+(((-1893.0)*x6147*x6148))))), ((x6156.value)*((x6147+x6149))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x6157=IKcos(j4);
IkReal x6158=IKsin(j4);
IkReal x6159=((0.39225)*cj6);
IkReal x6160=((0.09465)*cj9);
IkReal x6161=((1.0)*sj6);
IkReal x6162=(r00*sj9);
IkReal x6163=((1.0)*cj9);
IkReal x6164=((0.39225)*sj6);
IkReal x6165=(r10*sj9);
IkReal x6166=(sj5*x6158);
IkReal x6167=(sj5*x6157);
IkReal x6168=(cj5*x6157);
IkReal x6169=(cj5*x6158);
evalcond[0]=(((cj6*x6168))+(((-1.0)*x6162))+(((-1.0)*r01*x6163))+(((-1.0)*x6161*x6167)));
evalcond[1]=(((cj6*x6169))+(((-1.0)*r11*x6163))+(((-1.0)*x6165))+(((-1.0)*x6161*x6166)));
evalcond[2]=((((-0.09465)*x6162))+(((0.425)*x6167))+(((-0.10915)*x6158))+((x6159*x6167))+(((-1.0)*px))+((x6164*x6168))+(((-1.0)*r01*x6160)));
evalcond[3]=((((-0.09465)*x6165))+(((0.425)*x6166))+((x6159*x6166))+(((-1.0)*r11*x6160))+(((-1.0)*py))+(((0.10915)*x6157))+((x6164*x6169)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j8eval[3];
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
IkReal x6170=(((r00*sj9))+((cj9*r01)));
j8eval[0]=x6170;
j8eval[1]=IKsign(x6170);
j8eval[2]=((IKabs((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))))+(IKabs((cj4*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
IkReal x6171=(((r10*sj9))+((cj9*r11)));
j8eval[0]=x6171;
j8eval[1]=IKsign(x6171);
j8eval[2]=((IKabs((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))))+(IKabs((r22*sj4))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
IkReal x6172=((1.0)*cj9);
IkReal x6173=((((-1.0)*r21*x6172))+(((-1.0)*r20*sj9)));
j8eval[0]=x6173;
j8eval[1]=((IKabs(((((-1.0)*r10*sj4*x6172))+(((-1.0)*cj4*r00*x6172))+((r11*sj4*sj9))+((cj4*r01*sj9)))))+(IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4))))));
j8eval[2]=IKsign(x6173);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x6174=((-1.0)*r20);
IkReal x6176 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6176)==0){
continue;
}
IkReal x6175=pow(x6176,-0.5);
CheckValue<IkReal> x6177 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6174),IKFAST_ATAN2_MAGTHRESH);
if(!x6177.valid){
continue;
}
IkReal gconst132=((-1.0)*(x6177.value));
IkReal gconst133=(r21*x6175);
IkReal gconst134=(x6174*x6175);
CheckValue<IkReal> x6178 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6178.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6178.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x6179=((-1.0)*r20);
IkReal x6180=x6175;
CheckValue<IkReal> x6182 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6179),IKFAST_ATAN2_MAGTHRESH);
if(!x6182.valid){
continue;
}
IkReal x6181=((-1.0)*(x6182.value));
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj9=gconst133;
cj9=gconst134;
j9=x6181;
IkReal gconst132=x6181;
IkReal gconst133=(r21*x6180);
IkReal gconst134=(x6179*x6180);
j8eval[0]=cj4;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
IkReal x6183=((-1.0)*r20);
IkReal x6184=x6175;
CheckValue<IkReal> x6186 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6183),IKFAST_ATAN2_MAGTHRESH);
if(!x6186.valid){
continue;
}
IkReal x6185=((-1.0)*(x6186.value));
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj9=gconst133;
cj9=gconst134;
j9=x6185;
IkReal gconst132=x6185;
IkReal gconst133=(r21*x6184);
IkReal gconst134=(x6183*x6184);
j8eval[0]=sj4;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x6187=((-1.0)*r20);
IkReal x6188=x6175;
CheckValue<IkReal> x6190 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6187),IKFAST_ATAN2_MAGTHRESH);
if(!x6190.valid){
continue;
}
IkReal x6189=((-1.0)*(x6190.value));
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj9=gconst133;
cj9=gconst134;
j9=x6189;
IkReal gconst132=x6189;
IkReal gconst133=(r21*x6188);
IkReal gconst134=(x6187*x6188);
IkReal x6191=((1.0)*(r22*r22));
CheckValue<IkReal> x6195=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x6191))),-1);
if(!x6195.valid){
continue;
}
IkReal x6192=x6195.value;
IkReal x6193=((1.0)*x6192);
IkReal x6194=((((-1.0)*x6191))+(((-1.0)*x6193*(r21*r21*r21*r21)))+(((-1.0)*x6193*(r20*r20*r20*r20)))+(((-2.0)*x6192*(r20*r20)*(r21*r21))));
j8eval[0]=x6194;
j8eval[1]=IKsign(x6194);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x6196=(sj5*sj6);
IkReal x6197=(gconst133*r21);
IkReal x6198=(cj5*cj6);
IkReal x6199=(gconst134*r20);
CheckValue<IkReal> x6200 = IKatan2WithCheck(IkReal((((x6198*x6199))+(((-1.0)*x6196*x6199))+(((-1.0)*x6197*x6198))+((x6196*x6197)))),IkReal(((((-1.0)*r22*x6196))+((r22*x6198)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6200.valid){
continue;
}
CheckValue<IkReal> x6201=IKPowWithIntegerCheck(IKsign(((((2.0)*x6197*x6199))+(((-1.0)*(x6199*x6199)))+(((-1.0)*(x6197*x6197)))+(((-1.0)*(r22*r22))))),-1);
if(!x6201.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x6200.value)+(((1.5707963267949)*(x6201.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x6202=IKcos(j8);
IkReal x6203=IKsin(j8);
IkReal x6204=(gconst134*r21);
IkReal x6205=(gconst133*r20);
IkReal x6206=(gconst133*x6203);
IkReal x6207=(gconst133*x6202);
IkReal x6208=((1.0)*x6202);
IkReal x6209=((1.0)*gconst134*x6203);
evalcond[0]=(((r22*x6203))+(((-1.0)*gconst134*r20*x6208))+((r21*x6207)));
evalcond[1]=(cj4+(((-1.0)*gconst134*r10*x6208))+((r11*x6207))+((r12*x6203)));
evalcond[2]=((((-1.0)*sj4))+((r01*x6207))+(((-1.0)*gconst134*r00*x6208))+((r02*x6203)));
evalcond[3]=((((-1.0)*r20*x6209))+((sj5*sj6))+((r21*x6206))+(((-1.0)*r22*x6208))+(((-1.0)*cj5*cj6)));
evalcond[4]=((((-1.0)*r00*x6209))+((r01*x6206))+(((-1.0)*r02*x6208))+((cj4*x6205))+((cj4*x6204)));
evalcond[5]=((((-1.0)*r12*x6208))+((r11*x6206))+((sj4*x6205))+((sj4*x6204))+(((-1.0)*r10*x6209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x6210 = IKatan2WithCheck(IkReal(((((-1.0)*gconst134*r20*sj4))+((gconst133*r21*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x6210.valid){
continue;
}
CheckValue<IkReal> x6211=IKPowWithIntegerCheck(IKsign((((gconst134*r11))+((gconst133*r10)))),-1);
if(!x6211.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x6210.value)+(((1.5707963267949)*(x6211.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x6212=IKcos(j8);
IkReal x6213=IKsin(j8);
IkReal x6214=(gconst134*r21);
IkReal x6215=(gconst133*r20);
IkReal x6216=(gconst133*x6213);
IkReal x6217=(gconst133*x6212);
IkReal x6218=((1.0)*x6212);
IkReal x6219=((1.0)*gconst134*x6213);
evalcond[0]=(((r21*x6217))+(((-1.0)*gconst134*r20*x6218))+((r22*x6213)));
evalcond[1]=(((r12*x6213))+((r11*x6217))+cj4+(((-1.0)*gconst134*r10*x6218)));
evalcond[2]=((((-1.0)*sj4))+((r02*x6213))+((r01*x6217))+(((-1.0)*gconst134*r00*x6218)));
evalcond[3]=(((sj5*sj6))+((r21*x6216))+(((-1.0)*r20*x6219))+(((-1.0)*cj5*cj6))+(((-1.0)*r22*x6218)));
evalcond[4]=((((-1.0)*r00*x6219))+((r01*x6216))+(((-1.0)*r02*x6218))+((cj4*x6214))+((cj4*x6215)));
evalcond[5]=(((r11*x6216))+(((-1.0)*r12*x6218))+((sj4*x6214))+((sj4*x6215))+(((-1.0)*r10*x6219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x6220 = IKatan2WithCheck(IkReal((((cj4*gconst133*r21))+(((-1.0)*cj4*gconst134*r20)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6220.valid){
continue;
}
CheckValue<IkReal> x6221=IKPowWithIntegerCheck(IKsign((((gconst134*r01))+((gconst133*r00)))),-1);
if(!x6221.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x6220.value)+(((1.5707963267949)*(x6221.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x6222=IKcos(j8);
IkReal x6223=IKsin(j8);
IkReal x6224=(gconst134*r21);
IkReal x6225=(gconst133*r20);
IkReal x6226=(gconst133*x6223);
IkReal x6227=(gconst133*x6222);
IkReal x6228=((1.0)*x6222);
IkReal x6229=((1.0)*gconst134*x6223);
evalcond[0]=(((r21*x6227))+(((-1.0)*gconst134*r20*x6228))+((r22*x6223)));
evalcond[1]=((((-1.0)*gconst134*r10*x6228))+cj4+((r11*x6227))+((r12*x6223)));
evalcond[2]=((((-1.0)*sj4))+((r02*x6223))+((r01*x6227))+(((-1.0)*gconst134*r00*x6228)));
evalcond[3]=(((sj5*sj6))+((r21*x6226))+(((-1.0)*r20*x6229))+(((-1.0)*cj5*cj6))+(((-1.0)*r22*x6228)));
evalcond[4]=((((-1.0)*r00*x6229))+((r01*x6226))+(((-1.0)*r02*x6228))+((cj4*x6225))+((cj4*x6224)));
evalcond[5]=(((r11*x6226))+(((-1.0)*r12*x6228))+((sj4*x6225))+((sj4*x6224))+(((-1.0)*r10*x6229)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6230=((-1.0)*r21);
IkReal x6232 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6232)==0){
continue;
}
IkReal x6231=pow(x6232,-0.5);
CheckValue<IkReal> x6233 = IKatan2WithCheck(IkReal(x6230),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6233.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x6233.value))));
IkReal gconst136=(x6230*x6231);
IkReal gconst137=((1.0)*r20*x6231);
CheckValue<IkReal> x6234 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6234.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6234.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x6235=((-1.0)*r21);
CheckValue<IkReal> x6238 = IKatan2WithCheck(IkReal(x6235),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6238.valid){
continue;
}
IkReal x6236=((1.0)*(x6238.value));
IkReal x6237=x6231;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj9=gconst136;
cj9=gconst137;
j9=((3.14159265)+(((-1.0)*x6236)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x6236)));
IkReal gconst136=(x6235*x6237);
IkReal gconst137=((1.0)*r20*x6237);
IkReal x6239=r22*r22;
IkReal x6240=((1.0)*x6239);
CheckValue<IkReal> x6244=IKPowWithIntegerCheck(((-1.0)+x6239),-1);
if(!x6244.valid){
continue;
}
IkReal x6241=x6244.value;
if((((1.0)+(((-1.0)*x6240)))) < -0.00001)
continue;
IkReal x6242=IKsqrt(((1.0)+(((-1.0)*x6240))));
IkReal x6243=(cj4*x6241*x6242);
j8eval[0]=((IKabs((cj4*r22)))+(IKabs((x6243+(((-1.0)*x6240*x6243))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
IkReal x6245=((-1.0)*r21);
CheckValue<IkReal> x6248 = IKatan2WithCheck(IkReal(x6245),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6248.valid){
continue;
}
IkReal x6246=((1.0)*(x6248.value));
IkReal x6247=x6231;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj9=gconst136;
cj9=gconst137;
j9=((3.14159265)+(((-1.0)*x6246)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x6246)));
IkReal gconst136=(x6245*x6247);
IkReal gconst137=((1.0)*r20*x6247);
IkReal x6249=r22*r22;
IkReal x6250=((1.0)*x6249);
CheckValue<IkReal> x6254=IKPowWithIntegerCheck(((-1.0)+x6249),-1);
if(!x6254.valid){
continue;
}
IkReal x6251=x6254.value;
if((((1.0)+(((-1.0)*x6250)))) < -0.00001)
continue;
IkReal x6252=IKsqrt(((1.0)+(((-1.0)*x6250))));
IkReal x6253=(sj4*x6251*x6252);
j8eval[0]=((IKabs((r22*sj4)))+(IKabs(((((-1.0)*x6250*x6253))+x6253))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
IkReal x6255=((-1.0)*r21);
CheckValue<IkReal> x6258 = IKatan2WithCheck(IkReal(x6255),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6258.valid){
continue;
}
IkReal x6256=((1.0)*(x6258.value));
IkReal x6257=x6231;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj9=gconst136;
cj9=gconst137;
j9=((3.14159265)+(((-1.0)*x6256)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x6256)));
IkReal gconst136=(x6255*x6257);
IkReal gconst137=((1.0)*r20*x6257);
IkReal x6259=r22*r22;
IkReal x6260=((1.0)*cj4*r02);
IkReal x6261=((1.0)*r12*sj4);
CheckValue<IkReal> x6265=IKPowWithIntegerCheck(((-1.0)+x6259),-1);
if(!x6265.valid){
continue;
}
IkReal x6262=x6265.value;
if((((1.0)+(((-1.0)*x6259)))) < -0.00001)
continue;
IkReal x6263=IKsqrt(((1.0)+(((-1.0)*x6259))));
IkReal x6264=(r22*x6262*x6263);
j8eval[0]=0;
j8eval[1]=0;
j8eval[2]=((IKabs(((((-1.0)*x6261*x6264))+(((-1.0)*x6260*x6264)))))+(IKabs(((((-1.0)*x6261))+(((-1.0)*x6260))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x6266=((1.0)*gconst137);
CheckValue<IkReal> x6267 = IKatan2WithCheck(IkReal(((((-1.0)*r10*sj4*x6266))+((gconst136*r11*sj4))+((cj4*gconst136*r01))+(((-1.0)*cj4*r00*x6266)))),IkReal(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6267.valid){
continue;
}
CheckValue<IkReal> x6268=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r20))+(((-1.0)*r21*x6266)))),-1);
if(!x6268.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x6267.value)+(((1.5707963267949)*(x6268.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x6269=IKcos(j8);
IkReal x6270=IKsin(j8);
IkReal x6271=((1.0)*gconst137);
IkReal x6272=(gconst137*r21);
IkReal x6273=(gconst136*r20);
IkReal x6274=((1.0)*x6269);
IkReal x6275=(gconst136*x6269);
IkReal x6276=(gconst136*x6270);
evalcond[0]=(((r22*x6270))+(((-1.0)*r20*x6269*x6271))+((r21*x6275)));
evalcond[1]=(((r12*x6270))+(((-1.0)*r10*x6269*x6271))+cj4+((r11*x6275)));
evalcond[2]=((((-1.0)*sj4))+((r01*x6275))+((r02*x6270))+(((-1.0)*r00*x6269*x6271)));
evalcond[3]=(((sj5*sj6))+((r21*x6276))+(((-1.0)*r22*x6274))+(((-1.0)*cj5*cj6))+(((-1.0)*r20*x6270*x6271)));
evalcond[4]=(((cj4*x6272))+((cj4*x6273))+(((-1.0)*r00*x6270*x6271))+((r01*x6276))+(((-1.0)*r02*x6274)));
evalcond[5]=((((-1.0)*r10*x6270*x6271))+(((-1.0)*r12*x6274))+((r11*x6276))+((sj4*x6272))+((sj4*x6273)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x6277 = IKatan2WithCheck(IkReal((((gconst136*r21*sj4))+(((-1.0)*gconst137*r20*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x6277.valid){
continue;
}
CheckValue<IkReal> x6278=IKPowWithIntegerCheck(IKsign((((gconst137*r11))+((gconst136*r10)))),-1);
if(!x6278.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x6277.value)+(((1.5707963267949)*(x6278.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x6279=IKcos(j8);
IkReal x6280=IKsin(j8);
IkReal x6281=((1.0)*gconst137);
IkReal x6282=(gconst137*r21);
IkReal x6283=(gconst136*r20);
IkReal x6284=((1.0)*x6279);
IkReal x6285=(gconst136*x6279);
IkReal x6286=(gconst136*x6280);
evalcond[0]=(((r22*x6280))+((r21*x6285))+(((-1.0)*r20*x6279*x6281)));
evalcond[1]=(cj4+(((-1.0)*r10*x6279*x6281))+((r12*x6280))+((r11*x6285)));
evalcond[2]=((((-1.0)*sj4))+(((-1.0)*r00*x6279*x6281))+((r02*x6280))+((r01*x6285)));
evalcond[3]=(((sj5*sj6))+(((-1.0)*r22*x6284))+(((-1.0)*cj5*cj6))+((r21*x6286))+(((-1.0)*r20*x6280*x6281)));
evalcond[4]=((((-1.0)*r02*x6284))+((cj4*x6283))+((cj4*x6282))+(((-1.0)*r00*x6280*x6281))+((r01*x6286)));
evalcond[5]=(((r11*x6286))+(((-1.0)*r12*x6284))+((sj4*x6283))+((sj4*x6282))+(((-1.0)*r10*x6280*x6281)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x6287=IKPowWithIntegerCheck(IKsign((((gconst136*r00))+((gconst137*r01)))),-1);
if(!x6287.valid){
continue;
}
CheckValue<IkReal> x6288 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*gconst137*r20))+((cj4*gconst136*r21)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6288.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6287.value)))+(x6288.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x6289=IKcos(j8);
IkReal x6290=IKsin(j8);
IkReal x6291=((1.0)*gconst137);
IkReal x6292=(gconst137*r21);
IkReal x6293=(gconst136*r20);
IkReal x6294=((1.0)*x6289);
IkReal x6295=(gconst136*x6289);
IkReal x6296=(gconst136*x6290);
evalcond[0]=(((r22*x6290))+((r21*x6295))+(((-1.0)*r20*x6289*x6291)));
evalcond[1]=(cj4+((r11*x6295))+((r12*x6290))+(((-1.0)*r10*x6289*x6291)));
evalcond[2]=((((-1.0)*r00*x6289*x6291))+(((-1.0)*sj4))+((r01*x6295))+((r02*x6290)));
evalcond[3]=(((sj5*sj6))+(((-1.0)*r22*x6294))+(((-1.0)*cj5*cj6))+((r21*x6296))+(((-1.0)*r20*x6290*x6291)));
evalcond[4]=(((r01*x6296))+((cj4*x6292))+((cj4*x6293))+(((-1.0)*r02*x6294))+(((-1.0)*r00*x6290*x6291)));
evalcond[5]=(((r11*x6296))+(((-1.0)*r12*x6294))+((sj4*x6292))+((sj4*x6293))+(((-1.0)*r10*x6290*x6291)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6298 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6298)==0){
continue;
}
IkReal x6297=pow(x6298,-0.5);
CheckValue<IkReal> x6299 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6299.valid){
continue;
}
IkReal gconst138=((-1.0)*(x6299.value));
IkReal gconst139=((-1.0)*r11*x6297);
IkReal gconst140=(r10*x6297);
CheckValue<IkReal> x6300 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6300.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6300.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
CheckValue<IkReal> x6303 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6303.valid){
continue;
}
IkReal x6301=((-1.0)*(x6303.value));
IkReal x6302=x6297;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj9=gconst139;
cj9=gconst140;
j9=x6301;
IkReal gconst138=x6301;
IkReal gconst139=((-1.0)*r11*x6302);
IkReal gconst140=(r10*x6302);
j8eval[0]=cj4;
j8eval[1]=r22;
j8eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x6304=((1.0)*gconst140);
CheckValue<IkReal> x6305 = IKatan2WithCheck(IkReal((((gconst139*r11*sj4))+(((-1.0)*cj4*r00*x6304))+(((-1.0)*r10*sj4*x6304))+((cj4*gconst139*r01)))),IkReal(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6305.valid){
continue;
}
CheckValue<IkReal> x6306=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6304))+(((-1.0)*gconst139*r20)))),-1);
if(!x6306.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x6305.value)+(((1.5707963267949)*(x6306.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x6307=IKcos(j8);
IkReal x6308=IKsin(j8);
IkReal x6309=(gconst139*r01);
IkReal x6310=(gconst140*r21);
IkReal x6311=(gconst139*r20);
IkReal x6312=((1.0)*gconst140*r10);
IkReal x6313=(gconst139*x6307);
IkReal x6314=((1.0)*x6307);
IkReal x6315=(gconst139*x6308);
IkReal x6316=((1.0)*gconst140*x6308);
evalcond[0]=((((-1.0)*gconst140*r20*x6314))+((r22*x6308))+((r21*x6313)));
evalcond[1]=(cj4+(((-1.0)*x6307*x6312))+((r11*x6313))+((r12*x6308)));
evalcond[2]=((((-1.0)*sj4))+((r02*x6308))+((x6307*x6309))+(((-1.0)*gconst140*r00*x6314)));
evalcond[3]=((((-1.0)*r22*x6314))+((sj5*sj6))+((r21*x6315))+(((-1.0)*r20*x6316))+(((-1.0)*cj5*cj6)));
evalcond[4]=(((cj4*x6310))+((cj4*x6311))+(((-1.0)*r02*x6314))+(((-1.0)*r00*x6316))+((x6308*x6309)));
evalcond[5]=(((sj4*x6311))+((sj4*x6310))+(((-1.0)*r12*x6314))+(((-1.0)*x6308*x6312))+((r11*x6315)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x6317=IKPowWithIntegerCheck(IKsign((((gconst140*r01))+((gconst139*r00)))),-1);
if(!x6317.valid){
continue;
}
CheckValue<IkReal> x6318 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*gconst140*r20))+((cj4*gconst139*r21)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6318.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6317.value)))+(x6318.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x6319=IKcos(j8);
IkReal x6320=IKsin(j8);
IkReal x6321=(gconst139*r01);
IkReal x6322=(gconst140*r21);
IkReal x6323=(gconst139*r20);
IkReal x6324=((1.0)*gconst140*r10);
IkReal x6325=(gconst139*x6319);
IkReal x6326=((1.0)*x6319);
IkReal x6327=(gconst139*x6320);
IkReal x6328=((1.0)*gconst140*x6320);
evalcond[0]=((((-1.0)*gconst140*r20*x6326))+((r22*x6320))+((r21*x6325)));
evalcond[1]=(((r11*x6325))+cj4+((r12*x6320))+(((-1.0)*x6319*x6324)));
evalcond[2]=(((r02*x6320))+(((-1.0)*sj4))+((x6319*x6321))+(((-1.0)*gconst140*r00*x6326)));
evalcond[3]=(((sj5*sj6))+(((-1.0)*r20*x6328))+(((-1.0)*r22*x6326))+(((-1.0)*cj5*cj6))+((r21*x6327)));
evalcond[4]=((((-1.0)*r00*x6328))+((cj4*x6322))+((cj4*x6323))+((x6320*x6321))+(((-1.0)*r02*x6326)));
evalcond[5]=(((r11*x6327))+(((-1.0)*x6320*x6324))+((sj4*x6322))+((sj4*x6323))+(((-1.0)*r12*x6326)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6330 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6330)==0){
continue;
}
IkReal x6329=pow(x6330,-0.5);
CheckValue<IkReal> x6331 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6331.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x6331.value))));
IkReal gconst142=((1.0)*r11*x6329);
IkReal gconst143=((-1.0)*r10*x6329);
CheckValue<IkReal> x6332 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6332.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6332.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
CheckValue<IkReal> x6335 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6335.valid){
continue;
}
IkReal x6333=((1.0)*(x6335.value));
IkReal x6334=x6329;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj9=gconst142;
cj9=gconst143;
j9=((3.14159265)+(((-1.0)*x6333)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x6333)));
IkReal gconst142=((1.0)*r11*x6334);
IkReal gconst143=((-1.0)*r10*x6334);
j8eval[0]=cj4;
j8eval[1]=r22;
j8eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[5];
CheckValue<IkReal> x6338 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6338.valid){
continue;
}
IkReal x6336=((1.0)*(x6338.value));
IkReal x6337=x6329;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj9=gconst142;
cj9=gconst143;
j9=((3.14159265)+(((-1.0)*x6336)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x6336)));
IkReal gconst142=((1.0)*r11*x6337);
IkReal gconst143=((-1.0)*r10*x6337);
j8eval[0]=0;
j8eval[1]=0;
j8eval[2]=r22;
j8eval[3]=sj4;
j8eval[4]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  || IKabs(j8eval[4]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
CheckValue<IkReal> x6341 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6341.valid){
continue;
}
IkReal x6339=((1.0)*(x6341.value));
IkReal x6340=x6329;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj9=gconst142;
cj9=gconst143;
j9=((3.14159265)+(((-1.0)*x6339)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x6339)));
IkReal gconst142=((1.0)*r11*x6340);
IkReal gconst143=((-1.0)*r10*x6340);
IkReal x6342=r12*r12;
IkReal x6343=(cj4*r02);
IkReal x6344=x6329;
IkReal x6345=(sj4*x6344);
j8eval[0]=((IKabs(((((-1.0)*x6345))+((x6342*x6345))+((r12*x6343*x6344)))))+(IKabs(((((-1.0)*x6343))+(((-1.0)*r12*sj4))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x6346=((1.0)*gconst143);
CheckValue<IkReal> x6347 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*r00*x6346))+((cj4*gconst142*r01))+((gconst142*r11*sj4))+(((-1.0)*r10*sj4*x6346)))),IkReal(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6347.valid){
continue;
}
CheckValue<IkReal> x6348=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6346))+(((-1.0)*gconst142*r20)))),-1);
if(!x6348.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x6347.value)+(((1.5707963267949)*(x6348.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x6349=IKcos(j8);
IkReal x6350=IKsin(j8);
IkReal x6351=(gconst143*r21);
IkReal x6352=(gconst142*r20);
IkReal x6353=(gconst142*x6349);
IkReal x6354=((1.0)*x6349);
IkReal x6355=(gconst142*x6350);
IkReal x6356=((1.0)*gconst143*x6350);
evalcond[0]=(((r21*x6353))+((r22*x6350))+(((-1.0)*gconst143*r20*x6354)));
evalcond[1]=(cj4+(((-1.0)*gconst143*r10*x6354))+((r11*x6353))+((r12*x6350)));
evalcond[2]=((((-1.0)*sj4))+(((-1.0)*gconst143*r00*x6354))+((r01*x6353))+((r02*x6350)));
evalcond[3]=((((-1.0)*r20*x6356))+((r21*x6355))+((sj5*sj6))+(((-1.0)*r22*x6354))+(((-1.0)*cj5*cj6)));
evalcond[4]=((((-1.0)*r00*x6356))+(((-1.0)*r02*x6354))+((r01*x6355))+((cj4*x6351))+((cj4*x6352)));
evalcond[5]=((((-1.0)*r10*x6356))+((sj4*x6351))+((sj4*x6352))+((r11*x6355))+(((-1.0)*r12*x6354)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x6357=IKPowWithIntegerCheck(IKsign((((gconst143*r11))+((gconst142*r10)))),-1);
if(!x6357.valid){
continue;
}
CheckValue<IkReal> x6358 = IKatan2WithCheck(IkReal((((gconst142*r21*sj4))+(((-1.0)*gconst143*r20*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x6358.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6357.value)))+(x6358.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x6359=IKcos(j8);
IkReal x6360=IKsin(j8);
IkReal x6361=(gconst143*r21);
IkReal x6362=(gconst142*r20);
IkReal x6363=(gconst142*x6359);
IkReal x6364=((1.0)*x6359);
IkReal x6365=(gconst142*x6360);
IkReal x6366=((1.0)*gconst143*x6360);
evalcond[0]=((((-1.0)*gconst143*r20*x6364))+((r22*x6360))+((r21*x6363)));
evalcond[1]=(cj4+((r12*x6360))+(((-1.0)*gconst143*r10*x6364))+((r11*x6363)));
evalcond[2]=((((-1.0)*sj4))+((r01*x6363))+(((-1.0)*gconst143*r00*x6364))+((r02*x6360)));
evalcond[3]=(((sj5*sj6))+(((-1.0)*r22*x6364))+(((-1.0)*cj5*cj6))+((r21*x6365))+(((-1.0)*r20*x6366)));
evalcond[4]=((((-1.0)*r00*x6366))+(((-1.0)*r02*x6364))+((r01*x6365))+((cj4*x6361))+((cj4*x6362)));
evalcond[5]=(((sj4*x6361))+((sj4*x6362))+((r11*x6365))+(((-1.0)*r12*x6364))+(((-1.0)*r10*x6366)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x6367=IKPowWithIntegerCheck(IKsign((((gconst143*r01))+((gconst142*r00)))),-1);
if(!x6367.valid){
continue;
}
CheckValue<IkReal> x6368 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*gconst143*r20))+((cj4*gconst142*r21)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6368.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6367.value)))+(x6368.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x6369=IKcos(j8);
IkReal x6370=IKsin(j8);
IkReal x6371=(gconst143*r21);
IkReal x6372=(gconst142*r20);
IkReal x6373=(gconst142*x6369);
IkReal x6374=((1.0)*x6369);
IkReal x6375=(gconst142*x6370);
IkReal x6376=((1.0)*gconst143*x6370);
evalcond[0]=(((r21*x6373))+((r22*x6370))+(((-1.0)*gconst143*r20*x6374)));
evalcond[1]=(cj4+((r12*x6370))+((r11*x6373))+(((-1.0)*gconst143*r10*x6374)));
evalcond[2]=((((-1.0)*sj4))+(((-1.0)*gconst143*r00*x6374))+((r01*x6373))+((r02*x6370)));
evalcond[3]=(((r21*x6375))+((sj5*sj6))+(((-1.0)*cj5*cj6))+(((-1.0)*r22*x6374))+(((-1.0)*r20*x6376)));
evalcond[4]=((((-1.0)*r02*x6374))+((r01*x6375))+(((-1.0)*r00*x6376))+((cj4*x6371))+((cj4*x6372)));
evalcond[5]=(((sj4*x6371))+((sj4*x6372))+((r11*x6375))+(((-1.0)*r12*x6374))+(((-1.0)*r10*x6376)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj4=0;
cj4=1.0;
j4=0;
IkReal x6377=(((r00*sj9))+((cj9*r01)));
j8eval[0]=x6377;
j8eval[1]=IKsign(x6377);
j8eval[2]=((IKabs(r22))+(IKabs((((r21*sj9))+(((-1.0)*cj9*r20))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj4=0;
cj4=1.0;
j4=0;
IkReal x6378=((1.0)*cj9);
IkReal x6379=((((-1.0)*r21*x6378))+(((-1.0)*r20*sj9)));
j8eval[0]=x6379;
j8eval[1]=((IKabs(r02))+(IKabs((((r01*sj9))+(((-1.0)*r00*x6378))))));
j8eval[2]=IKsign(x6379);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj4=0;
cj4=1.0;
j4=0;
IkReal x6380=r11*r11;
IkReal x6381=cj9*cj9;
IkReal x6382=(r11*sj9);
IkReal x6383=(cj9*r10);
IkReal x6384=((((-1.0)*x6380))+((x6380*x6381))+(((2.0)*x6382*x6383))+(((-1.0)*(r12*r12)))+(((-1.0)*x6381*(r10*r10))));
j8eval[0]=x6384;
j8eval[1]=IKsign(x6384);
j8eval[2]=((IKabs(((((-1.0)*x6383))+x6382)))+(IKabs(r12)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x6385=r11*r11;
IkReal x6386=cj9*cj9;
IkReal x6387=(r11*sj9);
IkReal x6388=(cj9*r10);
CheckValue<IkReal> x6389=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6385))+((x6385*x6386))+(((-1.0)*(r12*r12)))+(((2.0)*x6387*x6388))+(((-1.0)*x6386*(r10*r10))))),-1);
if(!x6389.valid){
continue;
}
CheckValue<IkReal> x6390 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x6388))+x6387)),IKFAST_ATAN2_MAGTHRESH);
if(!x6390.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6389.value)))+(x6390.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x6391=IKcos(j8);
IkReal x6392=IKsin(j8);
IkReal x6393=((1.0)*x6391);
IkReal x6394=(sj9*x6391);
IkReal x6395=(sj9*x6392);
IkReal x6396=(cj9*x6393);
IkReal x6397=((1.0)*cj9*x6392);
evalcond[0]=((((-1.0)*r20*x6396))+((r21*x6394))+((r22*x6392)));
evalcond[1]=((((-1.0)*r00*x6396))+((r01*x6394))+((r02*x6392)));
evalcond[2]=((1.0)+((r11*x6394))+((r12*x6392))+(((-1.0)*r10*x6396)));
evalcond[3]=(((r11*x6395))+(((-1.0)*r10*x6397))+(((-1.0)*r12*x6393)));
evalcond[4]=((((-1.0)*r00*x6397))+((cj9*r21))+((r01*x6395))+(((-1.0)*r02*x6393))+((r20*sj9)));
evalcond[5]=(((sj5*sj6))+(((-1.0)*r20*x6397))+(((-1.0)*r22*x6393))+(((-1.0)*cj5*cj6))+((r21*x6395)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x6398=((1.0)*cj9);
CheckValue<IkReal> x6399=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6398))+(((-1.0)*r20*sj9)))),-1);
if(!x6399.valid){
continue;
}
CheckValue<IkReal> x6400 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x6398))+((r01*sj9)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6400.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6399.value)))+(x6400.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x6401=IKcos(j8);
IkReal x6402=IKsin(j8);
IkReal x6403=((1.0)*x6401);
IkReal x6404=(sj9*x6401);
IkReal x6405=(sj9*x6402);
IkReal x6406=(cj9*x6403);
IkReal x6407=((1.0)*cj9*x6402);
evalcond[0]=(((r21*x6404))+(((-1.0)*r20*x6406))+((r22*x6402)));
evalcond[1]=(((r02*x6402))+((r01*x6404))+(((-1.0)*r00*x6406)));
evalcond[2]=((1.0)+(((-1.0)*r10*x6406))+((r12*x6402))+((r11*x6404)));
evalcond[3]=((((-1.0)*r10*x6407))+(((-1.0)*r12*x6403))+((r11*x6405)));
evalcond[4]=(((r01*x6405))+(((-1.0)*r02*x6403))+((cj9*r21))+(((-1.0)*r00*x6407))+((r20*sj9)));
evalcond[5]=(((sj5*sj6))+((r21*x6405))+(((-1.0)*r20*x6407))+(((-1.0)*cj5*cj6))+(((-1.0)*r22*x6403)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x6408=IKPowWithIntegerCheck(IKsign((((r00*sj9))+((cj9*r01)))),-1);
if(!x6408.valid){
continue;
}
CheckValue<IkReal> x6409 = IKatan2WithCheck(IkReal((((r21*sj9))+(((-1.0)*cj9*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6409.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6408.value)))+(x6409.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x6410=IKcos(j8);
IkReal x6411=IKsin(j8);
IkReal x6412=((1.0)*x6410);
IkReal x6413=(sj9*x6410);
IkReal x6414=(sj9*x6411);
IkReal x6415=(cj9*x6412);
IkReal x6416=((1.0)*cj9*x6411);
evalcond[0]=(((r21*x6413))+(((-1.0)*r20*x6415))+((r22*x6411)));
evalcond[1]=(((r02*x6411))+((r01*x6413))+(((-1.0)*r00*x6415)));
evalcond[2]=((1.0)+(((-1.0)*r10*x6415))+((r12*x6411))+((r11*x6413)));
evalcond[3]=((((-1.0)*r10*x6416))+(((-1.0)*r12*x6412))+((r11*x6414)));
evalcond[4]=(((r01*x6414))+(((-1.0)*r02*x6412))+((cj9*r21))+((r20*sj9))+(((-1.0)*r00*x6416)));
evalcond[5]=(((r21*x6414))+((sj5*sj6))+(((-1.0)*r20*x6416))+(((-1.0)*r22*x6412))+(((-1.0)*cj5*cj6)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x6417=(((cj9*r21))+((r20*sj9)));
j8eval[0]=x6417;
j8eval[1]=((IKabs(r02))+(IKabs((((r01*sj9))+(((-1.0)*cj9*r00))))));
j8eval[2]=IKsign(x6417);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x6418=((1.0)*cj9);
IkReal x6419=((((-1.0)*r00*sj9))+(((-1.0)*r01*x6418)));
j8eval[0]=x6419;
j8eval[1]=((IKabs(r22))+(IKabs((((r21*sj9))+(((-1.0)*r20*x6418))))));
j8eval[2]=IKsign(x6419);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x6420=cj9*cj9;
IkReal x6421=r11*r11;
IkReal x6422=(r11*sj9);
IkReal x6423=(cj9*r10);
IkReal x6424=((r12*r12)+(((-1.0)*x6420*x6421))+x6421+((x6420*(r10*r10)))+(((-2.0)*x6422*x6423)));
j8eval[0]=x6424;
j8eval[1]=IKsign(x6424);
j8eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x6423))+x6422))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x6425=cj9*cj9;
IkReal x6426=r11*r11;
IkReal x6427=(r11*sj9);
IkReal x6428=(cj9*r10);
CheckValue<IkReal> x6429=IKPowWithIntegerCheck(IKsign(((r12*r12)+x6426+(((-1.0)*x6425*x6426))+(((-2.0)*x6427*x6428))+((x6425*(r10*r10))))),-1);
if(!x6429.valid){
continue;
}
CheckValue<IkReal> x6430 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x6428))+x6427)),IKFAST_ATAN2_MAGTHRESH);
if(!x6430.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6429.value)))+(x6430.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x6431=IKcos(j8);
IkReal x6432=IKsin(j8);
IkReal x6433=(sj9*x6432);
IkReal x6434=((1.0)*x6431);
IkReal x6435=(sj9*x6431);
IkReal x6436=(cj9*x6434);
IkReal x6437=((1.0)*cj9*x6432);
evalcond[0]=(((r22*x6432))+(((-1.0)*r20*x6436))+((r21*x6435)));
evalcond[1]=(((r01*x6435))+(((-1.0)*r00*x6436))+((r02*x6432)));
evalcond[2]=((-1.0)+(((-1.0)*r10*x6436))+((r12*x6432))+((r11*x6435)));
evalcond[3]=((((-1.0)*r10*x6437))+((r11*x6433))+(((-1.0)*r12*x6434)));
evalcond[4]=(((sj5*sj6))+(((-1.0)*r22*x6434))+(((-1.0)*cj5*cj6))+(((-1.0)*r20*x6437))+((r21*x6433)));
evalcond[5]=(((r01*x6433))+(((-1.0)*r00*x6437))+(((-1.0)*r02*x6434))+(((-1.0)*cj9*r21))+(((-1.0)*r20*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x6438=((1.0)*cj9);
CheckValue<IkReal> x6439=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6438))+(((-1.0)*r00*sj9)))),-1);
if(!x6439.valid){
continue;
}
CheckValue<IkReal> x6440 = IKatan2WithCheck(IkReal((((r21*sj9))+(((-1.0)*r20*x6438)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6440.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6439.value)))+(x6440.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x6441=IKcos(j8);
IkReal x6442=IKsin(j8);
IkReal x6443=(sj9*x6442);
IkReal x6444=((1.0)*x6441);
IkReal x6445=(sj9*x6441);
IkReal x6446=(cj9*x6444);
IkReal x6447=((1.0)*cj9*x6442);
evalcond[0]=(((r22*x6442))+((r21*x6445))+(((-1.0)*r20*x6446)));
evalcond[1]=(((r01*x6445))+((r02*x6442))+(((-1.0)*r00*x6446)));
evalcond[2]=((-1.0)+((r12*x6442))+((r11*x6445))+(((-1.0)*r10*x6446)));
evalcond[3]=(((r11*x6443))+(((-1.0)*r12*x6444))+(((-1.0)*r10*x6447)));
evalcond[4]=(((sj5*sj6))+((r21*x6443))+(((-1.0)*cj5*cj6))+(((-1.0)*r22*x6444))+(((-1.0)*r20*x6447)));
evalcond[5]=(((r01*x6443))+(((-1.0)*r02*x6444))+(((-1.0)*cj9*r21))+(((-1.0)*r00*x6447))+(((-1.0)*r20*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x6448 = IKatan2WithCheck(IkReal((((r01*sj9))+(((-1.0)*cj9*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6448.valid){
continue;
}
CheckValue<IkReal> x6449=IKPowWithIntegerCheck(IKsign((((cj9*r21))+((r20*sj9)))),-1);
if(!x6449.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x6448.value)+(((1.5707963267949)*(x6449.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x6450=IKcos(j8);
IkReal x6451=IKsin(j8);
IkReal x6452=(sj9*x6451);
IkReal x6453=((1.0)*x6450);
IkReal x6454=(sj9*x6450);
IkReal x6455=(cj9*x6453);
IkReal x6456=((1.0)*cj9*x6451);
evalcond[0]=((((-1.0)*r20*x6455))+((r21*x6454))+((r22*x6451)));
evalcond[1]=((((-1.0)*r00*x6455))+((r01*x6454))+((r02*x6451)));
evalcond[2]=((-1.0)+((r11*x6454))+(((-1.0)*r10*x6455))+((r12*x6451)));
evalcond[3]=(((r11*x6452))+(((-1.0)*r12*x6453))+(((-1.0)*r10*x6456)));
evalcond[4]=((((-1.0)*r20*x6456))+((sj5*sj6))+((r21*x6452))+(((-1.0)*cj5*cj6))+(((-1.0)*r22*x6453)));
evalcond[5]=((((-1.0)*r00*x6456))+((r01*x6452))+(((-1.0)*r02*x6453))+(((-1.0)*cj9*r21))+(((-1.0)*r20*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6458 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6458)==0){
continue;
}
IkReal x6457=pow(x6458,-0.5);
CheckValue<IkReal> x6459 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6459.valid){
continue;
}
IkReal gconst144=((-1.0)*(x6459.value));
IkReal gconst145=((-1.0)*r01*x6457);
IkReal gconst146=(r00*x6457);
CheckValue<IkReal> x6460 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6460.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6460.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
CheckValue<IkReal> x6463 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6463.valid){
continue;
}
IkReal x6461=((-1.0)*(x6463.value));
IkReal x6462=x6457;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj9=gconst145;
cj9=gconst146;
j9=x6461;
IkReal gconst144=x6461;
IkReal gconst145=((-1.0)*r01*x6462);
IkReal gconst146=(r00*x6462);
j8eval[0]=r22;
j8eval[1]=sj4;
j8eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x6464=((1.0)*gconst146);
CheckValue<IkReal> x6465=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6464))+(((-1.0)*gconst145*r20)))),-1);
if(!x6465.valid){
continue;
}
CheckValue<IkReal> x6466 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*r00*x6464))+((cj4*gconst145*r01))+(((-1.0)*r10*sj4*x6464))+((gconst145*r11*sj4)))),IkReal(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6466.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6465.value)))+(x6466.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x6467=IKcos(j8);
IkReal x6468=IKsin(j8);
IkReal x6469=(gconst145*r20);
IkReal x6470=(gconst146*r21);
IkReal x6471=(gconst145*x6467);
IkReal x6472=(gconst145*x6468);
IkReal x6473=((1.0)*gconst146*r20);
IkReal x6474=((1.0)*x6467);
IkReal x6475=((1.0)*gconst146*x6468);
evalcond[0]=((((-1.0)*x6467*x6473))+((r22*x6468))+((r21*x6471)));
evalcond[1]=(cj4+((r11*x6471))+(((-1.0)*gconst146*r10*x6474))+((r12*x6468)));
evalcond[2]=((((-1.0)*gconst146*r00*x6474))+(((-1.0)*sj4))+((r01*x6471))+((r02*x6468)));
evalcond[3]=(((sj5*sj6))+(((-1.0)*r22*x6474))+(((-1.0)*x6468*x6473))+(((-1.0)*cj5*cj6))+((r21*x6472)));
evalcond[4]=(((cj4*x6470))+((cj4*x6469))+(((-1.0)*r00*x6475))+((r01*x6472))+(((-1.0)*r02*x6474)));
evalcond[5]=((((-1.0)*r12*x6474))+(((-1.0)*r10*x6475))+((sj4*x6469))+((r11*x6472))+((sj4*x6470)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x6476=IKPowWithIntegerCheck(IKsign((((gconst145*r10))+((gconst146*r11)))),-1);
if(!x6476.valid){
continue;
}
CheckValue<IkReal> x6477 = IKatan2WithCheck(IkReal(((((-1.0)*gconst146*r20*sj4))+((gconst145*r21*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x6477.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6476.value)))+(x6477.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x6478=IKcos(j8);
IkReal x6479=IKsin(j8);
IkReal x6480=(gconst145*r20);
IkReal x6481=(gconst146*r21);
IkReal x6482=(gconst145*x6478);
IkReal x6483=(gconst145*x6479);
IkReal x6484=((1.0)*gconst146*r20);
IkReal x6485=((1.0)*x6478);
IkReal x6486=((1.0)*gconst146*x6479);
evalcond[0]=(((r22*x6479))+((r21*x6482))+(((-1.0)*x6478*x6484)));
evalcond[1]=(((r11*x6482))+cj4+((r12*x6479))+(((-1.0)*gconst146*r10*x6485)));
evalcond[2]=((((-1.0)*sj4))+((r01*x6482))+((r02*x6479))+(((-1.0)*gconst146*r00*x6485)));
evalcond[3]=(((r21*x6483))+((sj5*sj6))+(((-1.0)*r22*x6485))+(((-1.0)*x6479*x6484))+(((-1.0)*cj5*cj6)));
evalcond[4]=(((r01*x6483))+(((-1.0)*r00*x6486))+(((-1.0)*r02*x6485))+((cj4*x6481))+((cj4*x6480)));
evalcond[5]=(((r11*x6483))+(((-1.0)*r12*x6485))+(((-1.0)*r10*x6486))+((sj4*x6481))+((sj4*x6480)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6488 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6488)==0){
continue;
}
IkReal x6487=pow(x6488,-0.5);
CheckValue<IkReal> x6489 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6489.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x6489.value))));
IkReal gconst148=((1.0)*r01*x6487);
IkReal gconst149=((-1.0)*r00*x6487);
CheckValue<IkReal> x6490 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6490.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6490.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[5];
CheckValue<IkReal> x6493 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6493.valid){
continue;
}
IkReal x6491=((1.0)*(x6493.value));
IkReal x6492=x6487;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj9=gconst148;
cj9=gconst149;
j9=((3.14159265)+(((-1.0)*x6491)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x6491)));
IkReal gconst148=((1.0)*r01*x6492);
IkReal gconst149=((-1.0)*r00*x6492);
j8eval[0]=0;
j8eval[1]=cj4;
j8eval[2]=r22;
j8eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j8eval[4]=0;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  || IKabs(j8eval[4]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
CheckValue<IkReal> x6496 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6496.valid){
continue;
}
IkReal x6494=((1.0)*(x6496.value));
IkReal x6495=x6487;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj9=gconst148;
cj9=gconst149;
j9=((3.14159265)+(((-1.0)*x6494)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x6494)));
IkReal gconst148=((1.0)*r01*x6495);
IkReal gconst149=((-1.0)*r00*x6495);
j8eval[0]=r22;
j8eval[1]=sj4;
j8eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
CheckValue<IkReal> x6499 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6499.valid){
continue;
}
IkReal x6497=((1.0)*(x6499.value));
IkReal x6498=x6487;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj9=gconst148;
cj9=gconst149;
j9=((3.14159265)+(((-1.0)*x6497)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x6497)));
IkReal gconst148=((1.0)*r01*x6498);
IkReal gconst149=((-1.0)*r00*x6498);
IkReal x6500=r02*r02;
IkReal x6501=(r12*sj4);
IkReal x6502=x6487;
IkReal x6503=(cj4*x6502);
j8eval[0]=((IKabs((((x6500*x6503))+(((-1.0)*x6503))+((r02*x6501*x6502)))))+(IKabs(((((-1.0)*cj4*r02))+(((-1.0)*x6501))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x6504=((1.0)*gconst149);
CheckValue<IkReal> x6505=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r20))+(((-1.0)*r21*x6504)))),-1);
if(!x6505.valid){
continue;
}
CheckValue<IkReal> x6506 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*r00*x6504))+(((-1.0)*r10*sj4*x6504))+((cj4*gconst148*r01))+((gconst148*r11*sj4)))),IkReal(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6506.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6505.value)))+(x6506.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x6507=IKcos(j8);
IkReal x6508=IKsin(j8);
IkReal x6509=((1.0)*gconst149);
IkReal x6510=(gconst148*r21);
IkReal x6511=(gconst149*r21);
IkReal x6512=(gconst148*r20);
IkReal x6513=((1.0)*x6507);
IkReal x6514=(gconst148*x6507);
IkReal x6515=(gconst148*x6508);
evalcond[0]=(((r22*x6508))+(((-1.0)*r20*x6507*x6509))+((x6507*x6510)));
evalcond[1]=(((r12*x6508))+cj4+((r11*x6514))+(((-1.0)*r10*x6507*x6509)));
evalcond[2]=(((r02*x6508))+(((-1.0)*sj4))+((r01*x6514))+(((-1.0)*r00*x6507*x6509)));
evalcond[3]=(((x6508*x6510))+(((-1.0)*r22*x6513))+((sj5*sj6))+(((-1.0)*r20*x6508*x6509))+(((-1.0)*cj5*cj6)));
evalcond[4]=((((-1.0)*r02*x6513))+((r01*x6515))+(((-1.0)*r00*x6508*x6509))+((cj4*x6512))+((cj4*x6511)));
evalcond[5]=(((r11*x6515))+(((-1.0)*r10*x6508*x6509))+((sj4*x6512))+((sj4*x6511))+(((-1.0)*r12*x6513)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x6516=IKPowWithIntegerCheck(IKsign((((gconst148*r10))+((gconst149*r11)))),-1);
if(!x6516.valid){
continue;
}
CheckValue<IkReal> x6517 = IKatan2WithCheck(IkReal(((((-1.0)*gconst149*r20*sj4))+((gconst148*r21*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x6517.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6516.value)))+(x6517.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x6518=IKcos(j8);
IkReal x6519=IKsin(j8);
IkReal x6520=((1.0)*gconst149);
IkReal x6521=(gconst148*r21);
IkReal x6522=(gconst149*r21);
IkReal x6523=(gconst148*r20);
IkReal x6524=((1.0)*x6518);
IkReal x6525=(gconst148*x6518);
IkReal x6526=(gconst148*x6519);
evalcond[0]=((((-1.0)*r20*x6518*x6520))+((x6518*x6521))+((r22*x6519)));
evalcond[1]=(cj4+(((-1.0)*r10*x6518*x6520))+((r12*x6519))+((r11*x6525)));
evalcond[2]=((((-1.0)*sj4))+(((-1.0)*r00*x6518*x6520))+((r02*x6519))+((r01*x6525)));
evalcond[3]=(((sj5*sj6))+(((-1.0)*r22*x6524))+(((-1.0)*r20*x6519*x6520))+(((-1.0)*cj5*cj6))+((x6519*x6521)));
evalcond[4]=(((cj4*x6522))+((cj4*x6523))+(((-1.0)*r00*x6519*x6520))+(((-1.0)*r02*x6524))+((r01*x6526)));
evalcond[5]=((((-1.0)*r10*x6519*x6520))+(((-1.0)*r12*x6524))+((sj4*x6522))+((sj4*x6523))+((r11*x6526)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x6527 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*gconst149*r20))+((cj4*gconst148*r21)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6527.valid){
continue;
}
CheckValue<IkReal> x6528=IKPowWithIntegerCheck(IKsign((((gconst148*r00))+((gconst149*r01)))),-1);
if(!x6528.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x6527.value)+(((1.5707963267949)*(x6528.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x6529=IKcos(j8);
IkReal x6530=IKsin(j8);
IkReal x6531=((1.0)*gconst149);
IkReal x6532=(gconst148*r21);
IkReal x6533=(gconst149*r21);
IkReal x6534=(gconst148*r20);
IkReal x6535=((1.0)*x6529);
IkReal x6536=(gconst148*x6529);
IkReal x6537=(gconst148*x6530);
evalcond[0]=(((r22*x6530))+(((-1.0)*r20*x6529*x6531))+((x6529*x6532)));
evalcond[1]=(cj4+(((-1.0)*r10*x6529*x6531))+((r11*x6536))+((r12*x6530)));
evalcond[2]=(((r02*x6530))+(((-1.0)*sj4))+(((-1.0)*r00*x6529*x6531))+((r01*x6536)));
evalcond[3]=(((sj5*sj6))+(((-1.0)*r20*x6530*x6531))+(((-1.0)*r22*x6535))+((x6530*x6532))+(((-1.0)*cj5*cj6)));
evalcond[4]=((((-1.0)*r00*x6530*x6531))+((cj4*x6533))+((cj4*x6534))+(((-1.0)*r02*x6535))+((r01*x6537)));
evalcond[5]=((((-1.0)*r10*x6530*x6531))+(((-1.0)*r12*x6535))+((sj4*x6533))+((sj4*x6534))+((r11*x6537)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal x6538=(((r10*sj9))+((cj9*r11)));
j8eval[0]=x6538;
j8eval[1]=((IKabs(r22))+(IKabs((((r21*sj9))+(((-1.0)*cj9*r20))))));
j8eval[2]=IKsign(x6538);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal x6539=((1.0)*cj9);
IkReal x6540=((((-1.0)*r21*x6539))+(((-1.0)*r20*sj9)));
j8eval[0]=x6540;
j8eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x6539))+((r11*sj9))))));
j8eval[2]=IKsign(x6540);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal x6541=cj9*cj9;
IkReal x6542=r01*r01;
IkReal x6543=(cj9*r00);
IkReal x6544=(r01*sj9);
IkReal x6545=((((-1.0)*x6541*x6542))+x6542+(((-2.0)*x6543*x6544))+(r02*r02)+((x6541*(r00*r00))));
j8eval[0]=x6545;
j8eval[1]=((IKabs(r02))+(IKabs((x6544+(((-1.0)*x6543))))));
j8eval[2]=IKsign(x6545);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x6546=cj9*cj9;
IkReal x6547=r01*r01;
IkReal x6548=(cj9*r00);
IkReal x6549=(r01*sj9);
CheckValue<IkReal> x6550 = IKatan2WithCheck(IkReal(r02),IkReal((x6549+(((-1.0)*x6548)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6550.valid){
continue;
}
CheckValue<IkReal> x6551=IKPowWithIntegerCheck(IKsign((x6547+(((-1.0)*x6546*x6547))+(r02*r02)+((x6546*(r00*r00)))+(((-2.0)*x6548*x6549)))),-1);
if(!x6551.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x6550.value)+(((1.5707963267949)*(x6551.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x6552=IKcos(j8);
IkReal x6553=IKsin(j8);
IkReal x6554=((1.0)*x6552);
IkReal x6555=(sj9*x6552);
IkReal x6556=(sj9*x6553);
IkReal x6557=(cj9*x6554);
IkReal x6558=((1.0)*cj9*x6553);
evalcond[0]=(((r22*x6553))+(((-1.0)*r20*x6557))+((r21*x6555)));
evalcond[1]=(((r11*x6555))+((r12*x6553))+(((-1.0)*r10*x6557)));
evalcond[2]=((-1.0)+(((-1.0)*r00*x6557))+((r02*x6553))+((r01*x6555)));
evalcond[3]=((((-1.0)*r00*x6558))+(((-1.0)*r02*x6554))+((r01*x6556)));
evalcond[4]=((((-1.0)*r12*x6554))+((cj9*r21))+((r11*x6556))+(((-1.0)*r10*x6558))+((r20*sj9)));
evalcond[5]=((((-1.0)*r22*x6554))+((sj5*sj6))+(((-1.0)*r20*x6558))+(((-1.0)*cj5*cj6))+((r21*x6556)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x6559=((1.0)*cj9);
CheckValue<IkReal> x6560=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6559))+(((-1.0)*r20*sj9)))),-1);
if(!x6560.valid){
continue;
}
CheckValue<IkReal> x6561 = IKatan2WithCheck(IkReal((((r11*sj9))+(((-1.0)*r10*x6559)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6561.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6560.value)))+(x6561.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x6562=IKcos(j8);
IkReal x6563=IKsin(j8);
IkReal x6564=((1.0)*x6562);
IkReal x6565=(sj9*x6562);
IkReal x6566=(sj9*x6563);
IkReal x6567=(cj9*x6564);
IkReal x6568=((1.0)*cj9*x6563);
evalcond[0]=(((r22*x6563))+((r21*x6565))+(((-1.0)*r20*x6567)));
evalcond[1]=(((r12*x6563))+(((-1.0)*r10*x6567))+((r11*x6565)));
evalcond[2]=((-1.0)+(((-1.0)*r00*x6567))+((r02*x6563))+((r01*x6565)));
evalcond[3]=((((-1.0)*r00*x6568))+(((-1.0)*r02*x6564))+((r01*x6566)));
evalcond[4]=((((-1.0)*r10*x6568))+((r11*x6566))+((cj9*r21))+((r20*sj9))+(((-1.0)*r12*x6564)));
evalcond[5]=((((-1.0)*r22*x6564))+((sj5*sj6))+((r21*x6566))+(((-1.0)*cj5*cj6))+(((-1.0)*r20*x6568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x6569=IKPowWithIntegerCheck(IKsign((((r10*sj9))+((cj9*r11)))),-1);
if(!x6569.valid){
continue;
}
CheckValue<IkReal> x6570 = IKatan2WithCheck(IkReal((((r21*sj9))+(((-1.0)*cj9*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6570.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6569.value)))+(x6570.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x6571=IKcos(j8);
IkReal x6572=IKsin(j8);
IkReal x6573=((1.0)*x6571);
IkReal x6574=(sj9*x6571);
IkReal x6575=(sj9*x6572);
IkReal x6576=(cj9*x6573);
IkReal x6577=((1.0)*cj9*x6572);
evalcond[0]=(((r22*x6572))+((r21*x6574))+(((-1.0)*r20*x6576)));
evalcond[1]=(((r12*x6572))+((r11*x6574))+(((-1.0)*r10*x6576)));
evalcond[2]=((-1.0)+((r01*x6574))+(((-1.0)*r00*x6576))+((r02*x6572)));
evalcond[3]=(((r01*x6575))+(((-1.0)*r00*x6577))+(((-1.0)*r02*x6573)));
evalcond[4]=(((r11*x6575))+(((-1.0)*r10*x6577))+((cj9*r21))+(((-1.0)*r12*x6573))+((r20*sj9)));
evalcond[5]=(((sj5*sj6))+(((-1.0)*r22*x6573))+((r21*x6575))+(((-1.0)*cj5*cj6))+(((-1.0)*r20*x6577)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal x6578=(((cj9*r21))+((r20*sj9)));
j8eval[0]=x6578;
j8eval[1]=((IKabs(r12))+(IKabs((((r11*sj9))+(((-1.0)*cj9*r10))))));
j8eval[2]=IKsign(x6578);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal x6579=((1.0)*cj9);
IkReal x6580=((((-1.0)*r10*sj9))+(((-1.0)*r11*x6579)));
j8eval[0]=x6580;
j8eval[1]=((IKabs(r22))+(IKabs((((r21*sj9))+(((-1.0)*r20*x6579))))));
j8eval[2]=IKsign(x6580);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal x6581=cj9*cj9;
IkReal x6582=r01*r01;
IkReal x6583=(r01*sj9);
IkReal x6584=(cj9*r00);
IkReal x6585=((((-1.0)*x6582))+(((-1.0)*(r02*r02)))+((x6581*x6582))+(((-1.0)*x6581*(r00*r00)))+(((2.0)*x6583*x6584)));
j8eval[0]=x6585;
j8eval[1]=IKsign(x6585);
j8eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x6584))+x6583))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x6586=cj9*cj9;
IkReal x6587=r01*r01;
IkReal x6588=(r01*sj9);
IkReal x6589=(cj9*r00);
CheckValue<IkReal> x6590=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6587))+(((2.0)*x6588*x6589))+(((-1.0)*(r02*r02)))+(((-1.0)*x6586*(r00*r00)))+((x6586*x6587)))),-1);
if(!x6590.valid){
continue;
}
CheckValue<IkReal> x6591 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x6589))+x6588)),IKFAST_ATAN2_MAGTHRESH);
if(!x6591.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6590.value)))+(x6591.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x6592=IKcos(j8);
IkReal x6593=IKsin(j8);
IkReal x6594=((1.0)*r20);
IkReal x6595=((1.0)*x6592);
IkReal x6596=(sj9*x6592);
IkReal x6597=(sj9*x6593);
IkReal x6598=(cj9*x6595);
IkReal x6599=((1.0)*cj9*x6593);
evalcond[0]=(((r22*x6593))+((r21*x6596))+(((-1.0)*cj9*x6592*x6594)));
evalcond[1]=(((r12*x6593))+((r11*x6596))+(((-1.0)*r10*x6598)));
evalcond[2]=((1.0)+(((-1.0)*r00*x6598))+((r02*x6593))+((r01*x6596)));
evalcond[3]=((((-1.0)*r00*x6599))+(((-1.0)*r02*x6595))+((r01*x6597)));
evalcond[4]=(((sj5*sj6))+((r21*x6597))+(((-1.0)*cj9*x6593*x6594))+(((-1.0)*r22*x6595))+(((-1.0)*cj5*cj6)));
evalcond[5]=(((r11*x6597))+(((-1.0)*r12*x6595))+(((-1.0)*r10*x6599))+(((-1.0)*sj9*x6594))+(((-1.0)*cj9*r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x6600=((1.0)*cj9);
CheckValue<IkReal> x6601=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj9))+(((-1.0)*r11*x6600)))),-1);
if(!x6601.valid){
continue;
}
CheckValue<IkReal> x6602 = IKatan2WithCheck(IkReal((((r21*sj9))+(((-1.0)*r20*x6600)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6602.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6601.value)))+(x6602.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x6603=IKcos(j8);
IkReal x6604=IKsin(j8);
IkReal x6605=((1.0)*r20);
IkReal x6606=((1.0)*x6603);
IkReal x6607=(sj9*x6603);
IkReal x6608=(sj9*x6604);
IkReal x6609=(cj9*x6606);
IkReal x6610=((1.0)*cj9*x6604);
evalcond[0]=(((r22*x6604))+(((-1.0)*cj9*x6603*x6605))+((r21*x6607)));
evalcond[1]=((((-1.0)*r10*x6609))+((r11*x6607))+((r12*x6604)));
evalcond[2]=((1.0)+((r01*x6607))+((r02*x6604))+(((-1.0)*r00*x6609)));
evalcond[3]=(((r01*x6608))+(((-1.0)*r02*x6606))+(((-1.0)*r00*x6610)));
evalcond[4]=(((sj5*sj6))+(((-1.0)*r22*x6606))+(((-1.0)*cj9*x6604*x6605))+((r21*x6608))+(((-1.0)*cj5*cj6)));
evalcond[5]=((((-1.0)*cj9*r21))+(((-1.0)*r12*x6606))+(((-1.0)*sj9*x6605))+((r11*x6608))+(((-1.0)*r10*x6610)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x6611=IKPowWithIntegerCheck(IKsign((((cj9*r21))+((r20*sj9)))),-1);
if(!x6611.valid){
continue;
}
CheckValue<IkReal> x6612 = IKatan2WithCheck(IkReal((((r11*sj9))+(((-1.0)*cj9*r10)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6612.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6611.value)))+(x6612.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x6613=IKcos(j8);
IkReal x6614=IKsin(j8);
IkReal x6615=((1.0)*r20);
IkReal x6616=((1.0)*x6613);
IkReal x6617=(sj9*x6613);
IkReal x6618=(sj9*x6614);
IkReal x6619=(cj9*x6616);
IkReal x6620=((1.0)*cj9*x6614);
evalcond[0]=(((r21*x6617))+(((-1.0)*cj9*x6613*x6615))+((r22*x6614)));
evalcond[1]=(((r12*x6614))+((r11*x6617))+(((-1.0)*r10*x6619)));
evalcond[2]=((1.0)+((r02*x6614))+((r01*x6617))+(((-1.0)*r00*x6619)));
evalcond[3]=(((r01*x6618))+(((-1.0)*r02*x6616))+(((-1.0)*r00*x6620)));
evalcond[4]=(((r21*x6618))+((sj5*sj6))+(((-1.0)*r22*x6616))+(((-1.0)*cj9*x6614*x6615))+(((-1.0)*cj5*cj6)));
evalcond[5]=((((-1.0)*r12*x6616))+(((-1.0)*sj9*x6615))+(((-1.0)*cj9*r21))+((r11*x6618))+(((-1.0)*r10*x6620)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x6621=((-1.0)*px);
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6621);
rxp1_1=(px*r21);
rxp1_2=(r11*x6621);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j8eval[0]=(((r21*sj9))+(((-1.0)*cj9*r20)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x6623=IKPowWithIntegerCheck((((r21*sj9))+(((-1.0)*cj9*r20))),-1);
if(!x6623.valid){
continue;
}
IkReal x6622=x6623.value;
sj8array[0]=(((cj5*cj6*x6622))+(((-1.0)*sj5*sj6*x6622)));
if( sj8array[0] >= -1-IKFAST_SINCOS_THRESH && sj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKasin(sj8array[0]);
    cj8array[0] = IKcos(j8array[0]);
    sj8array[1] = sj8array[0];
    j8array[1] = j8array[0] > 0 ? (IKPI-j8array[0]) : (-IKPI-j8array[0]);
    cj8array[1] = -cj8array[0];
}
else if( isnan(sj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[3];
IkReal x6624=IKcos(j8);
IkReal x6625=(sj9*x6624);
IkReal x6626=((1.0)*cj9*x6624);
evalcond[0]=((-1.0)*r02*x6624);
evalcond[1]=((((-1.0)*r20*x6626))+((r21*x6625)));
evalcond[2]=((((-1.0)*r10*x6626))+((r11*x6625)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x6627=((1.0)*cj9);
CheckValue<IkReal> x6628 = IKatan2WithCheck(IkReal((((r11*sj4*sj9))+(((-1.0)*cj4*r00*x6627))+((cj4*r01*sj9))+(((-1.0)*r10*sj4*x6627)))),IkReal(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6628.valid){
continue;
}
CheckValue<IkReal> x6629=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6627))+(((-1.0)*r20*sj9)))),-1);
if(!x6629.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x6628.value)+(((1.5707963267949)*(x6629.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x6630=IKcos(j8);
IkReal x6631=IKsin(j8);
IkReal x6632=((1.0)*cj9);
IkReal x6633=(r20*sj9);
IkReal x6634=(cj9*r21);
IkReal x6635=((1.0)*x6630);
IkReal x6636=(sj9*x6630);
IkReal x6637=(sj9*x6631);
evalcond[0]=(((r21*x6636))+((r22*x6631))+(((-1.0)*r20*x6630*x6632)));
evalcond[1]=((((-1.0)*r10*x6630*x6632))+cj4+((r11*x6636))+((r12*x6631)));
evalcond[2]=((((-1.0)*sj4))+((r01*x6636))+(((-1.0)*r00*x6630*x6632))+((r02*x6631)));
evalcond[3]=((((-1.0)*r20*x6631*x6632))+(((-1.0)*r22*x6635))+((r21*x6637))+((sj5*sj6))+(((-1.0)*cj5*cj6)));
evalcond[4]=(((r01*x6637))+(((-1.0)*r00*x6631*x6632))+((cj4*x6633))+((cj4*x6634))+(((-1.0)*r02*x6635)));
evalcond[5]=(((r11*x6637))+(((-1.0)*r10*x6631*x6632))+(((-1.0)*r12*x6635))+((sj4*x6633))+((sj4*x6634)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x6638 = IKatan2WithCheck(IkReal((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x6638.valid){
continue;
}
CheckValue<IkReal> x6639=IKPowWithIntegerCheck(IKsign((((r10*sj9))+((cj9*r11)))),-1);
if(!x6639.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x6638.value)+(((1.5707963267949)*(x6639.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x6640=IKcos(j8);
IkReal x6641=IKsin(j8);
IkReal x6642=((1.0)*cj9);
IkReal x6643=(r20*sj9);
IkReal x6644=(cj9*r21);
IkReal x6645=((1.0)*x6640);
IkReal x6646=(sj9*x6640);
IkReal x6647=(sj9*x6641);
evalcond[0]=(((r21*x6646))+((r22*x6641))+(((-1.0)*r20*x6640*x6642)));
evalcond[1]=(cj4+((r11*x6646))+((r12*x6641))+(((-1.0)*r10*x6640*x6642)));
evalcond[2]=((((-1.0)*sj4))+((r01*x6646))+((r02*x6641))+(((-1.0)*r00*x6640*x6642)));
evalcond[3]=((((-1.0)*r22*x6645))+((sj5*sj6))+((r21*x6647))+(((-1.0)*cj5*cj6))+(((-1.0)*r20*x6641*x6642)));
evalcond[4]=((((-1.0)*r00*x6641*x6642))+((r01*x6647))+((cj4*x6643))+((cj4*x6644))+(((-1.0)*r02*x6645)));
evalcond[5]=((((-1.0)*r10*x6641*x6642))+((r11*x6647))+((sj4*x6643))+((sj4*x6644))+(((-1.0)*r12*x6645)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x6648=IKPowWithIntegerCheck(IKsign((((r00*sj9))+((cj9*r01)))),-1);
if(!x6648.valid){
continue;
}
CheckValue<IkReal> x6649 = IKatan2WithCheck(IkReal((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6649.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6648.value)))+(x6649.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x6650=IKcos(j8);
IkReal x6651=IKsin(j8);
IkReal x6652=((1.0)*cj9);
IkReal x6653=(r20*sj9);
IkReal x6654=(cj9*r21);
IkReal x6655=((1.0)*x6650);
IkReal x6656=(sj9*x6650);
IkReal x6657=(sj9*x6651);
evalcond[0]=(((r21*x6656))+((r22*x6651))+(((-1.0)*r20*x6650*x6652)));
evalcond[1]=((((-1.0)*r10*x6650*x6652))+cj4+((r12*x6651))+((r11*x6656)));
evalcond[2]=((((-1.0)*sj4))+((r02*x6651))+((r01*x6656))+(((-1.0)*r00*x6650*x6652)));
evalcond[3]=((((-1.0)*r22*x6655))+((sj5*sj6))+(((-1.0)*cj5*cj6))+((r21*x6657))+(((-1.0)*r20*x6651*x6652)));
evalcond[4]=((((-1.0)*r00*x6651*x6652))+((cj4*x6653))+((cj4*x6654))+((r01*x6657))+(((-1.0)*r02*x6655)));
evalcond[5]=(((r11*x6657))+((sj4*x6653))+((sj4*x6654))+(((-1.0)*r12*x6655))+(((-1.0)*r10*x6651*x6652)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x6658=r21*r21;
IkReal x6659=cj9*cj9;
IkReal x6660=(cj5*cj6);
IkReal x6661=(sj5*sj6);
IkReal x6662=(cj9*r20);
IkReal x6663=(r21*sj9);
CheckValue<IkReal> x6664=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6659*(r20*r20)))+(((-1.0)*x6658))+((x6658*x6659))+(((2.0)*x6662*x6663))+(((-1.0)*(r22*r22))))),-1);
if(!x6664.valid){
continue;
}
CheckValue<IkReal> x6665 = IKatan2WithCheck(IkReal((((x6660*x6662))+(((-1.0)*x6661*x6662))+(((-1.0)*x6660*x6663))+((x6661*x6663)))),IkReal(((((-1.0)*r22*x6661))+((r22*x6660)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6665.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6664.value)))+(x6665.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[2];
IkReal x6666=IKcos(j8);
IkReal x6667=IKsin(j8);
IkReal x6668=(r21*sj9);
IkReal x6669=(cj9*r20);
IkReal x6670=((1.0)*x6666);
evalcond[0]=((((-1.0)*x6669*x6670))+((x6666*x6668))+((r22*x6667)));
evalcond[1]=((((-1.0)*x6667*x6669))+((x6667*x6668))+((sj5*sj6))+(((-1.0)*cj5*cj6))+(((-1.0)*r22*x6670)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6671=(cj8*cj9);
IkReal x6672=(cj8*sj9);
if( IKabs(((((-1.0)*r00*x6671))+((r02*sj8))+((r01*x6672)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x6672))+((r10*x6671))+(((-1.0)*r12*sj8)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x6671))+((r02*sj8))+((r01*x6672))))+IKsqr(((((-1.0)*r11*x6672))+((r10*x6671))+(((-1.0)*r12*sj8))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r00*x6671))+((r02*sj8))+((r01*x6672))), ((((-1.0)*r11*x6672))+((r10*x6671))+(((-1.0)*r12*sj8))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x6673=IKcos(j4);
IkReal x6674=IKsin(j4);
IkReal x6675=(r11*sj9);
IkReal x6676=(cj5*sj6);
IkReal x6677=(r01*sj9);
IkReal x6678=(cj9*r11);
IkReal x6679=((0.09465)*sj9);
IkReal x6680=(cj6*sj5);
IkReal x6681=((1.0)*r00);
IkReal x6682=((0.425)*sj5);
IkReal x6683=(cj5*cj6);
IkReal x6684=(r20*sj9);
IkReal x6685=((1.0)*cj8);
IkReal x6686=(cj9*r21);
IkReal x6687=(cj9*r01);
IkReal x6688=((0.39225)*x6674);
IkReal x6689=((1.0)*cj9*r10);
IkReal x6690=((1.0)*sj5*sj6);
IkReal x6691=((0.39225)*x6673);
evalcond[0]=(x6673+((cj8*x6675))+((r12*sj8))+(((-1.0)*cj9*r10*x6685)));
evalcond[1]=((((-1.0)*cj8*cj9*x6681))+((r02*sj8))+(((-1.0)*x6674))+((cj8*x6677)));
evalcond[2]=(((x6673*x6683))+(((-1.0)*sj9*x6681))+(((-1.0)*x6673*x6690))+(((-1.0)*x6687)));
evalcond[3]=(((x6674*x6683))+(((-1.0)*r10*sj9))+(((-1.0)*x6674*x6690))+(((-1.0)*x6678)));
evalcond[4]=((((-1.0)*r02*x6685))+((x6673*x6684))+((x6673*x6686))+(((-1.0)*cj9*sj8*x6681))+((sj8*x6677)));
evalcond[5]=(((x6674*x6684))+((x6674*x6686))+(((-1.0)*sj8*x6689))+((sj8*x6675))+(((-1.0)*r12*x6685)));
evalcond[6]=(((x6673*x6682))+(((-0.10915)*x6674))+(((-1.0)*r00*x6679))+(((-1.0)*px))+((x6676*x6691))+(((-0.09465)*x6687))+((x6680*x6691)));
evalcond[7]=((((-0.09465)*x6678))+(((0.10915)*x6673))+((x6674*x6682))+(((-1.0)*py))+(((-1.0)*r10*x6679))+((x6676*x6688))+((x6680*x6688)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6692 = IKatan2WithCheck(IkReal((((r10*sj9))+((cj9*r11)))),IkReal((((r00*sj9))+((cj9*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6692.valid){
continue;
}
CheckValue<IkReal> x6693=IKPowWithIntegerCheck(IKsign((((cj5*cj6))+(((-1.0)*sj5*sj6)))),-1);
if(!x6693.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6692.value)+(((1.5707963267949)*(x6693.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x6694=IKcos(j4);
IkReal x6695=IKsin(j4);
IkReal x6696=((0.39225)*cj6);
IkReal x6697=((0.09465)*cj9);
IkReal x6698=((1.0)*sj6);
IkReal x6699=(r00*sj9);
IkReal x6700=((1.0)*cj9);
IkReal x6701=((0.39225)*sj6);
IkReal x6702=(r10*sj9);
IkReal x6703=(sj5*x6695);
IkReal x6704=(sj5*x6694);
IkReal x6705=(cj5*x6694);
IkReal x6706=(cj5*x6695);
evalcond[0]=((((-1.0)*x6699))+(((-1.0)*x6698*x6704))+((cj6*x6705))+(((-1.0)*r01*x6700)));
evalcond[1]=((((-1.0)*x6698*x6703))+((cj6*x6706))+(((-1.0)*x6702))+(((-1.0)*r11*x6700)));
evalcond[2]=((((-0.10915)*x6695))+(((-1.0)*r01*x6697))+(((-1.0)*px))+(((0.425)*x6704))+((x6696*x6704))+(((-0.09465)*x6699))+((x6701*x6705)));
evalcond[3]=((((-0.09465)*x6702))+(((-1.0)*py))+(((0.425)*x6703))+((x6696*x6703))+(((-1.0)*r11*x6697))+(((0.10915)*x6694))+((x6701*x6706)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j8eval[3];
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
IkReal x6707=(((r00*sj9))+((cj9*r01)));
j8eval[0]=x6707;
j8eval[1]=IKsign(x6707);
j8eval[2]=((IKabs((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))))+(IKabs((cj4*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
IkReal x6708=(((r10*sj9))+((cj9*r11)));
j8eval[0]=x6708;
j8eval[1]=IKsign(x6708);
j8eval[2]=((IKabs((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))))+(IKabs((r22*sj4))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
IkReal x6709=((1.0)*cj9);
IkReal x6710=((((-1.0)*r21*x6709))+(((-1.0)*r20*sj9)));
j8eval[0]=x6710;
j8eval[1]=((IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))))+(IKabs(((((-1.0)*cj4*r00*x6709))+(((-1.0)*r10*sj4*x6709))+((r11*sj4*sj9))+((cj4*r01*sj9))))));
j8eval[2]=IKsign(x6710);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x6711=((-1.0)*r20);
IkReal x6713 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6713)==0){
continue;
}
IkReal x6712=pow(x6713,-0.5);
CheckValue<IkReal> x6714 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6711),IKFAST_ATAN2_MAGTHRESH);
if(!x6714.valid){
continue;
}
IkReal gconst132=((-1.0)*(x6714.value));
IkReal gconst133=(r21*x6712);
IkReal gconst134=(x6711*x6712);
CheckValue<IkReal> x6715 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6715.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6715.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x6716=((-1.0)*r20);
IkReal x6717=x6712;
CheckValue<IkReal> x6719 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6716),IKFAST_ATAN2_MAGTHRESH);
if(!x6719.valid){
continue;
}
IkReal x6718=((-1.0)*(x6719.value));
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj9=gconst133;
cj9=gconst134;
j9=x6718;
IkReal gconst132=x6718;
IkReal gconst133=(r21*x6717);
IkReal gconst134=(x6716*x6717);
j8eval[0]=cj4;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
IkReal x6720=((-1.0)*r20);
IkReal x6721=x6712;
CheckValue<IkReal> x6723 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6720),IKFAST_ATAN2_MAGTHRESH);
if(!x6723.valid){
continue;
}
IkReal x6722=((-1.0)*(x6723.value));
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj9=gconst133;
cj9=gconst134;
j9=x6722;
IkReal gconst132=x6722;
IkReal gconst133=(r21*x6721);
IkReal gconst134=(x6720*x6721);
j8eval[0]=sj4;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x6724=((-1.0)*r20);
IkReal x6725=x6712;
CheckValue<IkReal> x6727 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6724),IKFAST_ATAN2_MAGTHRESH);
if(!x6727.valid){
continue;
}
IkReal x6726=((-1.0)*(x6727.value));
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj9=gconst133;
cj9=gconst134;
j9=x6726;
IkReal gconst132=x6726;
IkReal gconst133=(r21*x6725);
IkReal gconst134=(x6724*x6725);
IkReal x6728=((1.0)*(r22*r22));
CheckValue<IkReal> x6732=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x6728))),-1);
if(!x6732.valid){
continue;
}
IkReal x6729=x6732.value;
IkReal x6730=((1.0)*x6729);
IkReal x6731=((((-2.0)*x6729*(r20*r20)*(r21*r21)))+(((-1.0)*x6728))+(((-1.0)*x6730*(r20*r20*r20*r20)))+(((-1.0)*x6730*(r21*r21*r21*r21))));
j8eval[0]=x6731;
j8eval[1]=IKsign(x6731);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x6733=(sj5*sj6);
IkReal x6734=(gconst133*r21);
IkReal x6735=(cj5*cj6);
IkReal x6736=(gconst134*r20);
CheckValue<IkReal> x6737=IKPowWithIntegerCheck(IKsign(((((2.0)*x6734*x6736))+(((-1.0)*(x6736*x6736)))+(((-1.0)*(x6734*x6734)))+(((-1.0)*(r22*r22))))),-1);
if(!x6737.valid){
continue;
}
CheckValue<IkReal> x6738 = IKatan2WithCheck(IkReal((((x6733*x6734))+((x6735*x6736))+(((-1.0)*x6734*x6735))+(((-1.0)*x6733*x6736)))),IkReal((((r22*x6735))+(((-1.0)*r22*x6733)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6738.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6737.value)))+(x6738.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x6739=IKcos(j8);
IkReal x6740=IKsin(j8);
IkReal x6741=(gconst134*r21);
IkReal x6742=(gconst133*r20);
IkReal x6743=(gconst133*x6740);
IkReal x6744=(gconst133*x6739);
IkReal x6745=((1.0)*x6739);
IkReal x6746=((1.0)*gconst134*x6740);
evalcond[0]=(((r21*x6744))+(((-1.0)*gconst134*r20*x6745))+((r22*x6740)));
evalcond[1]=(cj4+((r11*x6744))+((r12*x6740))+(((-1.0)*gconst134*r10*x6745)));
evalcond[2]=(((r02*x6740))+(((-1.0)*sj4))+(((-1.0)*gconst134*r00*x6745))+((r01*x6744)));
evalcond[3]=(((r21*x6743))+(((-1.0)*r22*x6745))+((sj5*sj6))+(((-1.0)*cj5*cj6))+(((-1.0)*r20*x6746)));
evalcond[4]=((((-1.0)*r00*x6746))+(((-1.0)*r02*x6745))+((cj4*x6742))+((cj4*x6741))+((r01*x6743)));
evalcond[5]=((((-1.0)*r12*x6745))+(((-1.0)*r10*x6746))+((r11*x6743))+((sj4*x6742))+((sj4*x6741)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x6747 = IKatan2WithCheck(IkReal(((((-1.0)*gconst134*r20*sj4))+((gconst133*r21*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x6747.valid){
continue;
}
CheckValue<IkReal> x6748=IKPowWithIntegerCheck(IKsign((((gconst134*r11))+((gconst133*r10)))),-1);
if(!x6748.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x6747.value)+(((1.5707963267949)*(x6748.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x6749=IKcos(j8);
IkReal x6750=IKsin(j8);
IkReal x6751=(gconst134*r21);
IkReal x6752=(gconst133*r20);
IkReal x6753=(gconst133*x6750);
IkReal x6754=(gconst133*x6749);
IkReal x6755=((1.0)*x6749);
IkReal x6756=((1.0)*gconst134*x6750);
evalcond[0]=(((r22*x6750))+(((-1.0)*gconst134*r20*x6755))+((r21*x6754)));
evalcond[1]=(cj4+((r12*x6750))+((r11*x6754))+(((-1.0)*gconst134*r10*x6755)));
evalcond[2]=((((-1.0)*sj4))+((r01*x6754))+(((-1.0)*gconst134*r00*x6755))+((r02*x6750)));
evalcond[3]=((((-1.0)*r20*x6756))+((sj5*sj6))+(((-1.0)*r22*x6755))+((r21*x6753))+(((-1.0)*cj5*cj6)));
evalcond[4]=(((cj4*x6752))+((cj4*x6751))+((r01*x6753))+(((-1.0)*r00*x6756))+(((-1.0)*r02*x6755)));
evalcond[5]=(((sj4*x6751))+((sj4*x6752))+((r11*x6753))+(((-1.0)*r10*x6756))+(((-1.0)*r12*x6755)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x6757 = IKatan2WithCheck(IkReal((((cj4*gconst133*r21))+(((-1.0)*cj4*gconst134*r20)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6757.valid){
continue;
}
CheckValue<IkReal> x6758=IKPowWithIntegerCheck(IKsign((((gconst134*r01))+((gconst133*r00)))),-1);
if(!x6758.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x6757.value)+(((1.5707963267949)*(x6758.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x6759=IKcos(j8);
IkReal x6760=IKsin(j8);
IkReal x6761=(gconst134*r21);
IkReal x6762=(gconst133*r20);
IkReal x6763=(gconst133*x6760);
IkReal x6764=(gconst133*x6759);
IkReal x6765=((1.0)*x6759);
IkReal x6766=((1.0)*gconst134*x6760);
evalcond[0]=(((r22*x6760))+(((-1.0)*gconst134*r20*x6765))+((r21*x6764)));
evalcond[1]=(((r12*x6760))+cj4+((r11*x6764))+(((-1.0)*gconst134*r10*x6765)));
evalcond[2]=((((-1.0)*sj4))+((r01*x6764))+(((-1.0)*gconst134*r00*x6765))+((r02*x6760)));
evalcond[3]=((((-1.0)*r20*x6766))+((sj5*sj6))+(((-1.0)*r22*x6765))+((r21*x6763))+(((-1.0)*cj5*cj6)));
evalcond[4]=(((cj4*x6761))+((cj4*x6762))+((r01*x6763))+(((-1.0)*r00*x6766))+(((-1.0)*r02*x6765)));
evalcond[5]=(((sj4*x6761))+((sj4*x6762))+((r11*x6763))+(((-1.0)*r10*x6766))+(((-1.0)*r12*x6765)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6767=((-1.0)*r21);
IkReal x6769 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6769)==0){
continue;
}
IkReal x6768=pow(x6769,-0.5);
CheckValue<IkReal> x6770 = IKatan2WithCheck(IkReal(x6767),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6770.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x6770.value))));
IkReal gconst136=(x6767*x6768);
IkReal gconst137=((1.0)*r20*x6768);
CheckValue<IkReal> x6771 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6771.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6771.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x6772=((-1.0)*r21);
CheckValue<IkReal> x6775 = IKatan2WithCheck(IkReal(x6772),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6775.valid){
continue;
}
IkReal x6773=((1.0)*(x6775.value));
IkReal x6774=x6768;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj9=gconst136;
cj9=gconst137;
j9=((3.14159265)+(((-1.0)*x6773)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x6773)));
IkReal gconst136=(x6772*x6774);
IkReal gconst137=((1.0)*r20*x6774);
IkReal x6776=r22*r22;
IkReal x6777=((1.0)*x6776);
CheckValue<IkReal> x6781=IKPowWithIntegerCheck(((-1.0)+x6776),-1);
if(!x6781.valid){
continue;
}
IkReal x6778=x6781.value;
if((((1.0)+(((-1.0)*x6777)))) < -0.00001)
continue;
IkReal x6779=IKsqrt(((1.0)+(((-1.0)*x6777))));
IkReal x6780=(cj4*x6778*x6779);
j8eval[0]=((IKabs((x6780+(((-1.0)*x6777*x6780)))))+(IKabs((cj4*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
IkReal x6782=((-1.0)*r21);
CheckValue<IkReal> x6785 = IKatan2WithCheck(IkReal(x6782),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6785.valid){
continue;
}
IkReal x6783=((1.0)*(x6785.value));
IkReal x6784=x6768;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj9=gconst136;
cj9=gconst137;
j9=((3.14159265)+(((-1.0)*x6783)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x6783)));
IkReal gconst136=(x6782*x6784);
IkReal gconst137=((1.0)*r20*x6784);
IkReal x6786=r22*r22;
IkReal x6787=((1.0)*x6786);
CheckValue<IkReal> x6791=IKPowWithIntegerCheck(((-1.0)+x6786),-1);
if(!x6791.valid){
continue;
}
IkReal x6788=x6791.value;
if((((1.0)+(((-1.0)*x6787)))) < -0.00001)
continue;
IkReal x6789=IKsqrt(((1.0)+(((-1.0)*x6787))));
IkReal x6790=(sj4*x6788*x6789);
j8eval[0]=((IKabs((x6790+(((-1.0)*x6787*x6790)))))+(IKabs((r22*sj4))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
IkReal x6792=((-1.0)*r21);
CheckValue<IkReal> x6795 = IKatan2WithCheck(IkReal(x6792),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6795.valid){
continue;
}
IkReal x6793=((1.0)*(x6795.value));
IkReal x6794=x6768;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj9=gconst136;
cj9=gconst137;
j9=((3.14159265)+(((-1.0)*x6793)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x6793)));
IkReal gconst136=(x6792*x6794);
IkReal gconst137=((1.0)*r20*x6794);
IkReal x6796=r22*r22;
IkReal x6797=((1.0)*cj4*r02);
IkReal x6798=((1.0)*r12*sj4);
CheckValue<IkReal> x6802=IKPowWithIntegerCheck(((-1.0)+x6796),-1);
if(!x6802.valid){
continue;
}
IkReal x6799=x6802.value;
if((((1.0)+(((-1.0)*x6796)))) < -0.00001)
continue;
IkReal x6800=IKsqrt(((1.0)+(((-1.0)*x6796))));
IkReal x6801=(r22*x6799*x6800);
j8eval[0]=0;
j8eval[1]=0;
j8eval[2]=((IKabs(((((-1.0)*x6798*x6801))+(((-1.0)*x6797*x6801)))))+(IKabs(((((-1.0)*x6797))+(((-1.0)*x6798))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x6803=((1.0)*gconst137);
CheckValue<IkReal> x6804 = IKatan2WithCheck(IkReal(((((-1.0)*r10*sj4*x6803))+((gconst136*r11*sj4))+((cj4*gconst136*r01))+(((-1.0)*cj4*r00*x6803)))),IkReal(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6804.valid){
continue;
}
CheckValue<IkReal> x6805=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r20))+(((-1.0)*r21*x6803)))),-1);
if(!x6805.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x6804.value)+(((1.5707963267949)*(x6805.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x6806=IKcos(j8);
IkReal x6807=IKsin(j8);
IkReal x6808=((1.0)*gconst137);
IkReal x6809=(gconst137*r21);
IkReal x6810=(gconst136*r20);
IkReal x6811=((1.0)*x6806);
IkReal x6812=(gconst136*x6806);
IkReal x6813=(gconst136*x6807);
evalcond[0]=(((r22*x6807))+((r21*x6812))+(((-1.0)*r20*x6806*x6808)));
evalcond[1]=(((r11*x6812))+(((-1.0)*r10*x6806*x6808))+cj4+((r12*x6807)));
evalcond[2]=((((-1.0)*r00*x6806*x6808))+(((-1.0)*sj4))+((r01*x6812))+((r02*x6807)));
evalcond[3]=(((sj5*sj6))+(((-1.0)*cj5*cj6))+((r21*x6813))+(((-1.0)*r22*x6811))+(((-1.0)*r20*x6807*x6808)));
evalcond[4]=(((cj4*x6809))+((cj4*x6810))+(((-1.0)*r02*x6811))+((r01*x6813))+(((-1.0)*r00*x6807*x6808)));
evalcond[5]=(((r11*x6813))+((sj4*x6810))+(((-1.0)*r10*x6807*x6808))+(((-1.0)*r12*x6811))+((sj4*x6809)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x6814 = IKatan2WithCheck(IkReal((((gconst136*r21*sj4))+(((-1.0)*gconst137*r20*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x6814.valid){
continue;
}
CheckValue<IkReal> x6815=IKPowWithIntegerCheck(IKsign((((gconst137*r11))+((gconst136*r10)))),-1);
if(!x6815.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x6814.value)+(((1.5707963267949)*(x6815.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x6816=IKcos(j8);
IkReal x6817=IKsin(j8);
IkReal x6818=((1.0)*gconst137);
IkReal x6819=(gconst137*r21);
IkReal x6820=(gconst136*r20);
IkReal x6821=((1.0)*x6816);
IkReal x6822=(gconst136*x6816);
IkReal x6823=(gconst136*x6817);
evalcond[0]=(((r21*x6822))+((r22*x6817))+(((-1.0)*r20*x6816*x6818)));
evalcond[1]=(((r12*x6817))+(((-1.0)*r10*x6816*x6818))+cj4+((r11*x6822)));
evalcond[2]=((((-1.0)*sj4))+((r01*x6822))+((r02*x6817))+(((-1.0)*r00*x6816*x6818)));
evalcond[3]=(((r21*x6823))+((sj5*sj6))+(((-1.0)*r22*x6821))+(((-1.0)*r20*x6817*x6818))+(((-1.0)*cj5*cj6)));
evalcond[4]=((((-1.0)*r02*x6821))+((r01*x6823))+((cj4*x6820))+((cj4*x6819))+(((-1.0)*r00*x6817*x6818)));
evalcond[5]=((((-1.0)*r10*x6817*x6818))+((sj4*x6819))+(((-1.0)*r12*x6821))+((r11*x6823))+((sj4*x6820)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x6824=IKPowWithIntegerCheck(IKsign((((gconst136*r00))+((gconst137*r01)))),-1);
if(!x6824.valid){
continue;
}
CheckValue<IkReal> x6825 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*gconst137*r20))+((cj4*gconst136*r21)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6825.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6824.value)))+(x6825.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x6826=IKcos(j8);
IkReal x6827=IKsin(j8);
IkReal x6828=((1.0)*gconst137);
IkReal x6829=(gconst137*r21);
IkReal x6830=(gconst136*r20);
IkReal x6831=((1.0)*x6826);
IkReal x6832=(gconst136*x6826);
IkReal x6833=(gconst136*x6827);
evalcond[0]=(((r22*x6827))+((r21*x6832))+(((-1.0)*r20*x6826*x6828)));
evalcond[1]=(cj4+((r11*x6832))+((r12*x6827))+(((-1.0)*r10*x6826*x6828)));
evalcond[2]=(((r02*x6827))+(((-1.0)*sj4))+((r01*x6832))+(((-1.0)*r00*x6826*x6828)));
evalcond[3]=(((sj5*sj6))+((r21*x6833))+(((-1.0)*r22*x6831))+(((-1.0)*cj5*cj6))+(((-1.0)*r20*x6827*x6828)));
evalcond[4]=(((cj4*x6830))+((cj4*x6829))+(((-1.0)*r02*x6831))+((r01*x6833))+(((-1.0)*r00*x6827*x6828)));
evalcond[5]=((((-1.0)*r10*x6827*x6828))+(((-1.0)*r12*x6831))+((r11*x6833))+((sj4*x6830))+((sj4*x6829)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6835 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6835)==0){
continue;
}
IkReal x6834=pow(x6835,-0.5);
CheckValue<IkReal> x6836 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6836.valid){
continue;
}
IkReal gconst138=((-1.0)*(x6836.value));
IkReal gconst139=((-1.0)*r11*x6834);
IkReal gconst140=(r10*x6834);
CheckValue<IkReal> x6837 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6837.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6837.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
CheckValue<IkReal> x6840 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6840.valid){
continue;
}
IkReal x6838=((-1.0)*(x6840.value));
IkReal x6839=x6834;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj9=gconst139;
cj9=gconst140;
j9=x6838;
IkReal gconst138=x6838;
IkReal gconst139=((-1.0)*r11*x6839);
IkReal gconst140=(r10*x6839);
j8eval[0]=cj4;
j8eval[1]=r22;
j8eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x6841=((1.0)*gconst140);
CheckValue<IkReal> x6842 = IKatan2WithCheck(IkReal(((((-1.0)*r10*sj4*x6841))+((gconst139*r11*sj4))+((cj4*gconst139*r01))+(((-1.0)*cj4*r00*x6841)))),IkReal(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6842.valid){
continue;
}
CheckValue<IkReal> x6843=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6841))+(((-1.0)*gconst139*r20)))),-1);
if(!x6843.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x6842.value)+(((1.5707963267949)*(x6843.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x6844=IKcos(j8);
IkReal x6845=IKsin(j8);
IkReal x6846=(gconst139*r01);
IkReal x6847=(gconst140*r21);
IkReal x6848=(gconst139*r20);
IkReal x6849=((1.0)*gconst140*r10);
IkReal x6850=(gconst139*x6844);
IkReal x6851=((1.0)*x6844);
IkReal x6852=(gconst139*x6845);
IkReal x6853=((1.0)*gconst140*x6845);
evalcond[0]=(((r21*x6850))+((r22*x6845))+(((-1.0)*gconst140*r20*x6851)));
evalcond[1]=(cj4+((r12*x6845))+(((-1.0)*x6844*x6849))+((r11*x6850)));
evalcond[2]=((((-1.0)*sj4))+(((-1.0)*gconst140*r00*x6851))+((r02*x6845))+((x6844*x6846)));
evalcond[3]=(((r21*x6852))+((sj5*sj6))+(((-1.0)*r22*x6851))+(((-1.0)*r20*x6853))+(((-1.0)*cj5*cj6)));
evalcond[4]=((((-1.0)*r02*x6851))+(((-1.0)*r00*x6853))+((cj4*x6847))+((cj4*x6848))+((x6845*x6846)));
evalcond[5]=(((sj4*x6848))+((sj4*x6847))+(((-1.0)*r12*x6851))+((r11*x6852))+(((-1.0)*x6845*x6849)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x6854=IKPowWithIntegerCheck(IKsign((((gconst140*r01))+((gconst139*r00)))),-1);
if(!x6854.valid){
continue;
}
CheckValue<IkReal> x6855 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*gconst140*r20))+((cj4*gconst139*r21)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6855.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6854.value)))+(x6855.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x6856=IKcos(j8);
IkReal x6857=IKsin(j8);
IkReal x6858=(gconst139*r01);
IkReal x6859=(gconst140*r21);
IkReal x6860=(gconst139*r20);
IkReal x6861=((1.0)*gconst140*r10);
IkReal x6862=(gconst139*x6856);
IkReal x6863=((1.0)*x6856);
IkReal x6864=(gconst139*x6857);
IkReal x6865=((1.0)*gconst140*x6857);
evalcond[0]=(((r22*x6857))+((r21*x6862))+(((-1.0)*gconst140*r20*x6863)));
evalcond[1]=(((r11*x6862))+cj4+((r12*x6857))+(((-1.0)*x6856*x6861)));
evalcond[2]=(((x6856*x6858))+(((-1.0)*sj4))+((r02*x6857))+(((-1.0)*gconst140*r00*x6863)));
evalcond[3]=((((-1.0)*r20*x6865))+((sj5*sj6))+((r21*x6864))+(((-1.0)*r22*x6863))+(((-1.0)*cj5*cj6)));
evalcond[4]=(((x6857*x6858))+(((-1.0)*r00*x6865))+((cj4*x6859))+(((-1.0)*r02*x6863))+((cj4*x6860)));
evalcond[5]=((((-1.0)*x6857*x6861))+((sj4*x6860))+((r11*x6864))+(((-1.0)*r12*x6863))+((sj4*x6859)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6867 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6867)==0){
continue;
}
IkReal x6866=pow(x6867,-0.5);
CheckValue<IkReal> x6868 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6868.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x6868.value))));
IkReal gconst142=((1.0)*r11*x6866);
IkReal gconst143=((-1.0)*r10*x6866);
CheckValue<IkReal> x6869 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6869.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6869.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
CheckValue<IkReal> x6872 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6872.valid){
continue;
}
IkReal x6870=((1.0)*(x6872.value));
IkReal x6871=x6866;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj9=gconst142;
cj9=gconst143;
j9=((3.14159265)+(((-1.0)*x6870)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x6870)));
IkReal gconst142=((1.0)*r11*x6871);
IkReal gconst143=((-1.0)*r10*x6871);
j8eval[0]=cj4;
j8eval[1]=r22;
j8eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[5];
CheckValue<IkReal> x6875 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6875.valid){
continue;
}
IkReal x6873=((1.0)*(x6875.value));
IkReal x6874=x6866;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj9=gconst142;
cj9=gconst143;
j9=((3.14159265)+(((-1.0)*x6873)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x6873)));
IkReal gconst142=((1.0)*r11*x6874);
IkReal gconst143=((-1.0)*r10*x6874);
j8eval[0]=0;
j8eval[1]=0;
j8eval[2]=r22;
j8eval[3]=sj4;
j8eval[4]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  || IKabs(j8eval[4]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
CheckValue<IkReal> x6878 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6878.valid){
continue;
}
IkReal x6876=((1.0)*(x6878.value));
IkReal x6877=x6866;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj9=gconst142;
cj9=gconst143;
j9=((3.14159265)+(((-1.0)*x6876)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x6876)));
IkReal gconst142=((1.0)*r11*x6877);
IkReal gconst143=((-1.0)*r10*x6877);
IkReal x6879=r12*r12;
IkReal x6880=(cj4*r02);
IkReal x6881=x6866;
IkReal x6882=(sj4*x6881);
j8eval[0]=((IKabs(((((-1.0)*r12*sj4))+(((-1.0)*x6880)))))+(IKabs((((x6879*x6882))+((r12*x6880*x6881))+(((-1.0)*x6882))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x6883=((1.0)*gconst143);
CheckValue<IkReal> x6884 = IKatan2WithCheck(IkReal((((cj4*gconst142*r01))+((gconst142*r11*sj4))+(((-1.0)*cj4*r00*x6883))+(((-1.0)*r10*sj4*x6883)))),IkReal(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6884.valid){
continue;
}
CheckValue<IkReal> x6885=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6883))+(((-1.0)*gconst142*r20)))),-1);
if(!x6885.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x6884.value)+(((1.5707963267949)*(x6885.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x6886=IKcos(j8);
IkReal x6887=IKsin(j8);
IkReal x6888=(gconst143*r21);
IkReal x6889=(gconst142*r20);
IkReal x6890=(gconst142*x6886);
IkReal x6891=((1.0)*x6886);
IkReal x6892=(gconst142*x6887);
IkReal x6893=((1.0)*gconst143*x6887);
evalcond[0]=((((-1.0)*gconst143*r20*x6891))+((r22*x6887))+((r21*x6890)));
evalcond[1]=((((-1.0)*gconst143*r10*x6891))+cj4+((r11*x6890))+((r12*x6887)));
evalcond[2]=((((-1.0)*sj4))+(((-1.0)*gconst143*r00*x6891))+((r02*x6887))+((r01*x6890)));
evalcond[3]=(((sj5*sj6))+(((-1.0)*r20*x6893))+(((-1.0)*cj5*cj6))+((r21*x6892))+(((-1.0)*r22*x6891)));
evalcond[4]=(((cj4*x6889))+((cj4*x6888))+(((-1.0)*r02*x6891))+(((-1.0)*r00*x6893))+((r01*x6892)));
evalcond[5]=((((-1.0)*r10*x6893))+((sj4*x6889))+((sj4*x6888))+(((-1.0)*r12*x6891))+((r11*x6892)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x6894=IKPowWithIntegerCheck(IKsign((((gconst143*r11))+((gconst142*r10)))),-1);
if(!x6894.valid){
continue;
}
CheckValue<IkReal> x6895 = IKatan2WithCheck(IkReal((((gconst142*r21*sj4))+(((-1.0)*gconst143*r20*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x6895.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6894.value)))+(x6895.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x6896=IKcos(j8);
IkReal x6897=IKsin(j8);
IkReal x6898=(gconst143*r21);
IkReal x6899=(gconst142*r20);
IkReal x6900=(gconst142*x6896);
IkReal x6901=((1.0)*x6896);
IkReal x6902=(gconst142*x6897);
IkReal x6903=((1.0)*gconst143*x6897);
evalcond[0]=(((r22*x6897))+((r21*x6900))+(((-1.0)*gconst143*r20*x6901)));
evalcond[1]=(((r12*x6897))+cj4+((r11*x6900))+(((-1.0)*gconst143*r10*x6901)));
evalcond[2]=((((-1.0)*sj4))+((r01*x6900))+(((-1.0)*gconst143*r00*x6901))+((r02*x6897)));
evalcond[3]=(((sj5*sj6))+(((-1.0)*r22*x6901))+(((-1.0)*r20*x6903))+((r21*x6902))+(((-1.0)*cj5*cj6)));
evalcond[4]=((((-1.0)*r02*x6901))+((r01*x6902))+((cj4*x6898))+((cj4*x6899))+(((-1.0)*r00*x6903)));
evalcond[5]=((((-1.0)*r12*x6901))+((sj4*x6898))+((sj4*x6899))+((r11*x6902))+(((-1.0)*r10*x6903)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x6904=IKPowWithIntegerCheck(IKsign((((gconst143*r01))+((gconst142*r00)))),-1);
if(!x6904.valid){
continue;
}
CheckValue<IkReal> x6905 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*gconst143*r20))+((cj4*gconst142*r21)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6905.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6904.value)))+(x6905.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x6906=IKcos(j8);
IkReal x6907=IKsin(j8);
IkReal x6908=(gconst143*r21);
IkReal x6909=(gconst142*r20);
IkReal x6910=(gconst142*x6906);
IkReal x6911=((1.0)*x6906);
IkReal x6912=(gconst142*x6907);
IkReal x6913=((1.0)*gconst143*x6907);
evalcond[0]=(((r22*x6907))+((r21*x6910))+(((-1.0)*gconst143*r20*x6911)));
evalcond[1]=((((-1.0)*gconst143*r10*x6911))+cj4+((r12*x6907))+((r11*x6910)));
evalcond[2]=((((-1.0)*sj4))+((r02*x6907))+(((-1.0)*gconst143*r00*x6911))+((r01*x6910)));
evalcond[3]=(((sj5*sj6))+(((-1.0)*r22*x6911))+((r21*x6912))+(((-1.0)*r20*x6913))+(((-1.0)*cj5*cj6)));
evalcond[4]=(((cj4*x6909))+((cj4*x6908))+(((-1.0)*r00*x6913))+(((-1.0)*r02*x6911))+((r01*x6912)));
evalcond[5]=(((sj4*x6909))+((sj4*x6908))+(((-1.0)*r12*x6911))+(((-1.0)*r10*x6913))+((r11*x6912)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj4=0;
cj4=1.0;
j4=0;
IkReal x6914=(((r00*sj9))+((cj9*r01)));
j8eval[0]=x6914;
j8eval[1]=IKsign(x6914);
j8eval[2]=((IKabs(r22))+(IKabs((((r21*sj9))+(((-1.0)*cj9*r20))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj4=0;
cj4=1.0;
j4=0;
IkReal x6915=((1.0)*cj9);
IkReal x6916=((((-1.0)*r21*x6915))+(((-1.0)*r20*sj9)));
j8eval[0]=x6916;
j8eval[1]=((IKabs(r02))+(IKabs((((r01*sj9))+(((-1.0)*r00*x6915))))));
j8eval[2]=IKsign(x6916);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj4=0;
cj4=1.0;
j4=0;
IkReal x6917=r11*r11;
IkReal x6918=cj9*cj9;
IkReal x6919=(r11*sj9);
IkReal x6920=(cj9*r10);
IkReal x6921=((((-1.0)*x6918*(r10*r10)))+(((-1.0)*x6917))+(((-1.0)*(r12*r12)))+((x6917*x6918))+(((2.0)*x6919*x6920)));
j8eval[0]=x6921;
j8eval[1]=IKsign(x6921);
j8eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x6920))+x6919))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x6922=r11*r11;
IkReal x6923=cj9*cj9;
IkReal x6924=(r11*sj9);
IkReal x6925=(cj9*r10);
CheckValue<IkReal> x6926 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x6925))+x6924)),IKFAST_ATAN2_MAGTHRESH);
if(!x6926.valid){
continue;
}
CheckValue<IkReal> x6927=IKPowWithIntegerCheck(IKsign(((((2.0)*x6924*x6925))+((x6922*x6923))+(((-1.0)*x6922))+(((-1.0)*(r12*r12)))+(((-1.0)*x6923*(r10*r10))))),-1);
if(!x6927.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x6926.value)+(((1.5707963267949)*(x6927.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x6928=IKcos(j8);
IkReal x6929=IKsin(j8);
IkReal x6930=((1.0)*x6928);
IkReal x6931=(sj9*x6928);
IkReal x6932=(sj9*x6929);
IkReal x6933=(cj9*x6930);
IkReal x6934=((1.0)*cj9*x6929);
evalcond[0]=(((r22*x6929))+(((-1.0)*r20*x6933))+((r21*x6931)));
evalcond[1]=(((r01*x6931))+(((-1.0)*r00*x6933))+((r02*x6929)));
evalcond[2]=((1.0)+(((-1.0)*r10*x6933))+((r11*x6931))+((r12*x6929)));
evalcond[3]=((((-1.0)*r10*x6934))+((r11*x6932))+(((-1.0)*r12*x6930)));
evalcond[4]=((((-1.0)*r02*x6930))+((r01*x6932))+(((-1.0)*r00*x6934))+((cj9*r21))+((r20*sj9)));
evalcond[5]=(((sj5*sj6))+(((-1.0)*r22*x6930))+(((-1.0)*r20*x6934))+(((-1.0)*cj5*cj6))+((r21*x6932)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x6935=((1.0)*cj9);
CheckValue<IkReal> x6936=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6935))+(((-1.0)*r20*sj9)))),-1);
if(!x6936.valid){
continue;
}
CheckValue<IkReal> x6937 = IKatan2WithCheck(IkReal((((r01*sj9))+(((-1.0)*r00*x6935)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6937.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6936.value)))+(x6937.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x6938=IKcos(j8);
IkReal x6939=IKsin(j8);
IkReal x6940=((1.0)*x6938);
IkReal x6941=(sj9*x6938);
IkReal x6942=(sj9*x6939);
IkReal x6943=(cj9*x6940);
IkReal x6944=((1.0)*cj9*x6939);
evalcond[0]=((((-1.0)*r20*x6943))+((r22*x6939))+((r21*x6941)));
evalcond[1]=(((r01*x6941))+((r02*x6939))+(((-1.0)*r00*x6943)));
evalcond[2]=((1.0)+((r12*x6939))+(((-1.0)*r10*x6943))+((r11*x6941)));
evalcond[3]=((((-1.0)*r12*x6940))+(((-1.0)*r10*x6944))+((r11*x6942)));
evalcond[4]=(((cj9*r21))+(((-1.0)*r02*x6940))+((r01*x6942))+((r20*sj9))+(((-1.0)*r00*x6944)));
evalcond[5]=(((sj5*sj6))+(((-1.0)*r20*x6944))+(((-1.0)*r22*x6940))+((r21*x6942))+(((-1.0)*cj5*cj6)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x6945=IKPowWithIntegerCheck(IKsign((((r00*sj9))+((cj9*r01)))),-1);
if(!x6945.valid){
continue;
}
CheckValue<IkReal> x6946 = IKatan2WithCheck(IkReal((((r21*sj9))+(((-1.0)*cj9*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6946.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6945.value)))+(x6946.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x6947=IKcos(j8);
IkReal x6948=IKsin(j8);
IkReal x6949=((1.0)*x6947);
IkReal x6950=(sj9*x6947);
IkReal x6951=(sj9*x6948);
IkReal x6952=(cj9*x6949);
IkReal x6953=((1.0)*cj9*x6948);
evalcond[0]=(((r22*x6948))+(((-1.0)*r20*x6952))+((r21*x6950)));
evalcond[1]=(((r02*x6948))+((r01*x6950))+(((-1.0)*r00*x6952)));
evalcond[2]=((1.0)+((r12*x6948))+(((-1.0)*r10*x6952))+((r11*x6950)));
evalcond[3]=((((-1.0)*r12*x6949))+(((-1.0)*r10*x6953))+((r11*x6951)));
evalcond[4]=(((cj9*r21))+(((-1.0)*r02*x6949))+((r01*x6951))+((r20*sj9))+(((-1.0)*r00*x6953)));
evalcond[5]=((((-1.0)*r20*x6953))+((sj5*sj6))+(((-1.0)*r22*x6949))+((r21*x6951))+(((-1.0)*cj5*cj6)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x6954=(((cj9*r21))+((r20*sj9)));
j8eval[0]=x6954;
j8eval[1]=((IKabs(r02))+(IKabs((((r01*sj9))+(((-1.0)*cj9*r00))))));
j8eval[2]=IKsign(x6954);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x6955=((1.0)*cj9);
IkReal x6956=((((-1.0)*r00*sj9))+(((-1.0)*r01*x6955)));
j8eval[0]=x6956;
j8eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x6955))+((r21*sj9))))));
j8eval[2]=IKsign(x6956);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x6957=cj9*cj9;
IkReal x6958=r11*r11;
IkReal x6959=(r11*sj9);
IkReal x6960=(cj9*r10);
IkReal x6961=(((x6957*(r10*r10)))+(r12*r12)+x6958+(((-1.0)*x6957*x6958))+(((-2.0)*x6959*x6960)));
j8eval[0]=x6961;
j8eval[1]=IKsign(x6961);
j8eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x6960))+x6959))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x6962=cj9*cj9;
IkReal x6963=r11*r11;
IkReal x6964=(r11*sj9);
IkReal x6965=(cj9*r10);
CheckValue<IkReal> x6966 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x6965))+x6964)),IKFAST_ATAN2_MAGTHRESH);
if(!x6966.valid){
continue;
}
CheckValue<IkReal> x6967=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x6962*x6963))+(((-2.0)*x6964*x6965))+x6963+((x6962*(r10*r10))))),-1);
if(!x6967.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x6966.value)+(((1.5707963267949)*(x6967.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x6968=IKcos(j8);
IkReal x6969=IKsin(j8);
IkReal x6970=(sj9*x6969);
IkReal x6971=((1.0)*x6968);
IkReal x6972=(sj9*x6968);
IkReal x6973=(cj9*x6971);
IkReal x6974=((1.0)*cj9*x6969);
evalcond[0]=(((r21*x6972))+((r22*x6969))+(((-1.0)*r20*x6973)));
evalcond[1]=(((r01*x6972))+((r02*x6969))+(((-1.0)*r00*x6973)));
evalcond[2]=((-1.0)+(((-1.0)*r10*x6973))+((r11*x6972))+((r12*x6969)));
evalcond[3]=((((-1.0)*r10*x6974))+(((-1.0)*r12*x6971))+((r11*x6970)));
evalcond[4]=(((r21*x6970))+((sj5*sj6))+(((-1.0)*r20*x6974))+(((-1.0)*r22*x6971))+(((-1.0)*cj5*cj6)));
evalcond[5]=((((-1.0)*r02*x6971))+((r01*x6970))+(((-1.0)*cj9*r21))+(((-1.0)*r00*x6974))+(((-1.0)*r20*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x6975=((1.0)*cj9);
CheckValue<IkReal> x6976=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj9))+(((-1.0)*r01*x6975)))),-1);
if(!x6976.valid){
continue;
}
CheckValue<IkReal> x6977 = IKatan2WithCheck(IkReal((((r21*sj9))+(((-1.0)*r20*x6975)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6977.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6976.value)))+(x6977.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x6978=IKcos(j8);
IkReal x6979=IKsin(j8);
IkReal x6980=(sj9*x6979);
IkReal x6981=((1.0)*x6978);
IkReal x6982=(sj9*x6978);
IkReal x6983=(cj9*x6981);
IkReal x6984=((1.0)*cj9*x6979);
evalcond[0]=((((-1.0)*r20*x6983))+((r22*x6979))+((r21*x6982)));
evalcond[1]=(((r02*x6979))+(((-1.0)*r00*x6983))+((r01*x6982)));
evalcond[2]=((-1.0)+((r12*x6979))+(((-1.0)*r10*x6983))+((r11*x6982)));
evalcond[3]=((((-1.0)*r10*x6984))+(((-1.0)*r12*x6981))+((r11*x6980)));
evalcond[4]=((((-1.0)*r20*x6984))+((sj5*sj6))+(((-1.0)*r22*x6981))+((r21*x6980))+(((-1.0)*cj5*cj6)));
evalcond[5]=((((-1.0)*cj9*r21))+(((-1.0)*r00*x6984))+((r01*x6980))+(((-1.0)*r02*x6981))+(((-1.0)*r20*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x6985 = IKatan2WithCheck(IkReal((((r01*sj9))+(((-1.0)*cj9*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6985.valid){
continue;
}
CheckValue<IkReal> x6986=IKPowWithIntegerCheck(IKsign((((cj9*r21))+((r20*sj9)))),-1);
if(!x6986.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x6985.value)+(((1.5707963267949)*(x6986.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x6987=IKcos(j8);
IkReal x6988=IKsin(j8);
IkReal x6989=(sj9*x6988);
IkReal x6990=((1.0)*x6987);
IkReal x6991=(sj9*x6987);
IkReal x6992=(cj9*x6990);
IkReal x6993=((1.0)*cj9*x6988);
evalcond[0]=(((r21*x6991))+((r22*x6988))+(((-1.0)*r20*x6992)));
evalcond[1]=((((-1.0)*r00*x6992))+((r02*x6988))+((r01*x6991)));
evalcond[2]=((-1.0)+((r11*x6991))+(((-1.0)*r10*x6992))+((r12*x6988)));
evalcond[3]=((((-1.0)*r12*x6990))+(((-1.0)*r10*x6993))+((r11*x6989)));
evalcond[4]=(((sj5*sj6))+(((-1.0)*r22*x6990))+((r21*x6989))+(((-1.0)*cj5*cj6))+(((-1.0)*r20*x6993)));
evalcond[5]=((((-1.0)*r00*x6993))+(((-1.0)*cj9*r21))+((r01*x6989))+(((-1.0)*r02*x6990))+(((-1.0)*r20*sj9)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6995 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6995)==0){
continue;
}
IkReal x6994=pow(x6995,-0.5);
CheckValue<IkReal> x6996 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6996.valid){
continue;
}
IkReal gconst144=((-1.0)*(x6996.value));
IkReal gconst145=((-1.0)*r01*x6994);
IkReal gconst146=(r00*x6994);
CheckValue<IkReal> x6997 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6997.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6997.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
CheckValue<IkReal> x7000 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7000.valid){
continue;
}
IkReal x6998=((-1.0)*(x7000.value));
IkReal x6999=x6994;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj9=gconst145;
cj9=gconst146;
j9=x6998;
IkReal gconst144=x6998;
IkReal gconst145=((-1.0)*r01*x6999);
IkReal gconst146=(r00*x6999);
j8eval[0]=r22;
j8eval[1]=sj4;
j8eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x7001=((1.0)*gconst146);
CheckValue<IkReal> x7002=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7001))+(((-1.0)*gconst145*r20)))),-1);
if(!x7002.valid){
continue;
}
CheckValue<IkReal> x7003 = IKatan2WithCheck(IkReal((((cj4*gconst145*r01))+(((-1.0)*r10*sj4*x7001))+(((-1.0)*cj4*r00*x7001))+((gconst145*r11*sj4)))),IkReal(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7003.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7002.value)))+(x7003.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x7004=IKcos(j8);
IkReal x7005=IKsin(j8);
IkReal x7006=(gconst145*r20);
IkReal x7007=(gconst146*r21);
IkReal x7008=(gconst145*x7004);
IkReal x7009=(gconst145*x7005);
IkReal x7010=((1.0)*gconst146*r20);
IkReal x7011=((1.0)*x7004);
IkReal x7012=((1.0)*gconst146*x7005);
evalcond[0]=(((r22*x7005))+((r21*x7008))+(((-1.0)*x7004*x7010)));
evalcond[1]=(cj4+(((-1.0)*gconst146*r10*x7011))+((r12*x7005))+((r11*x7008)));
evalcond[2]=((((-1.0)*sj4))+((r02*x7005))+((r01*x7008))+(((-1.0)*gconst146*r00*x7011)));
evalcond[3]=((((-1.0)*r22*x7011))+((sj5*sj6))+(((-1.0)*cj5*cj6))+((r21*x7009))+(((-1.0)*x7005*x7010)));
evalcond[4]=((((-1.0)*r00*x7012))+((cj4*x7006))+((cj4*x7007))+(((-1.0)*r02*x7011))+((r01*x7009)));
evalcond[5]=(((sj4*x7006))+((sj4*x7007))+(((-1.0)*r10*x7012))+((r11*x7009))+(((-1.0)*r12*x7011)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x7013=IKPowWithIntegerCheck(IKsign((((gconst145*r10))+((gconst146*r11)))),-1);
if(!x7013.valid){
continue;
}
CheckValue<IkReal> x7014 = IKatan2WithCheck(IkReal(((((-1.0)*gconst146*r20*sj4))+((gconst145*r21*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x7014.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7013.value)))+(x7014.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x7015=IKcos(j8);
IkReal x7016=IKsin(j8);
IkReal x7017=(gconst145*r20);
IkReal x7018=(gconst146*r21);
IkReal x7019=(gconst145*x7015);
IkReal x7020=(gconst145*x7016);
IkReal x7021=((1.0)*gconst146*r20);
IkReal x7022=((1.0)*x7015);
IkReal x7023=((1.0)*gconst146*x7016);
evalcond[0]=(((r21*x7019))+(((-1.0)*x7015*x7021))+((r22*x7016)));
evalcond[1]=(cj4+(((-1.0)*gconst146*r10*x7022))+((r11*x7019))+((r12*x7016)));
evalcond[2]=(((r02*x7016))+(((-1.0)*sj4))+((r01*x7019))+(((-1.0)*gconst146*r00*x7022)));
evalcond[3]=((((-1.0)*r22*x7022))+((sj5*sj6))+(((-1.0)*x7016*x7021))+(((-1.0)*cj5*cj6))+((r21*x7020)));
evalcond[4]=(((r01*x7020))+(((-1.0)*r02*x7022))+(((-1.0)*r00*x7023))+((cj4*x7017))+((cj4*x7018)));
evalcond[5]=((((-1.0)*r12*x7022))+(((-1.0)*r10*x7023))+((r11*x7020))+((sj4*x7017))+((sj4*x7018)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7025 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7025)==0){
continue;
}
IkReal x7024=pow(x7025,-0.5);
CheckValue<IkReal> x7026 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7026.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x7026.value))));
IkReal gconst148=((1.0)*r01*x7024);
IkReal gconst149=((-1.0)*r00*x7024);
CheckValue<IkReal> x7027 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7027.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7027.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[5];
CheckValue<IkReal> x7030 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7030.valid){
continue;
}
IkReal x7028=((1.0)*(x7030.value));
IkReal x7029=x7024;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj9=gconst148;
cj9=gconst149;
j9=((3.14159265)+(((-1.0)*x7028)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7028)));
IkReal gconst148=((1.0)*r01*x7029);
IkReal gconst149=((-1.0)*r00*x7029);
j8eval[0]=0;
j8eval[1]=cj4;
j8eval[2]=r22;
j8eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j8eval[4]=0;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  || IKabs(j8eval[4]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
CheckValue<IkReal> x7033 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7033.valid){
continue;
}
IkReal x7031=((1.0)*(x7033.value));
IkReal x7032=x7024;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj9=gconst148;
cj9=gconst149;
j9=((3.14159265)+(((-1.0)*x7031)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7031)));
IkReal gconst148=((1.0)*r01*x7032);
IkReal gconst149=((-1.0)*r00*x7032);
j8eval[0]=r22;
j8eval[1]=sj4;
j8eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
CheckValue<IkReal> x7036 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7036.valid){
continue;
}
IkReal x7034=((1.0)*(x7036.value));
IkReal x7035=x7024;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj9=gconst148;
cj9=gconst149;
j9=((3.14159265)+(((-1.0)*x7034)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7034)));
IkReal gconst148=((1.0)*r01*x7035);
IkReal gconst149=((-1.0)*r00*x7035);
IkReal x7037=r02*r02;
IkReal x7038=(r12*sj4);
IkReal x7039=x7024;
IkReal x7040=(cj4*x7039);
j8eval[0]=((IKabs(((((-1.0)*x7040))+((x7037*x7040))+((r02*x7038*x7039)))))+(IKabs(((((-1.0)*cj4*r02))+(((-1.0)*x7038))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x7041=((1.0)*gconst149);
CheckValue<IkReal> x7042=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r20))+(((-1.0)*r21*x7041)))),-1);
if(!x7042.valid){
continue;
}
CheckValue<IkReal> x7043 = IKatan2WithCheck(IkReal(((((-1.0)*r10*sj4*x7041))+((cj4*gconst148*r01))+(((-1.0)*cj4*r00*x7041))+((gconst148*r11*sj4)))),IkReal(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7043.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7042.value)))+(x7043.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x7044=IKcos(j8);
IkReal x7045=IKsin(j8);
IkReal x7046=((1.0)*gconst149);
IkReal x7047=(gconst148*r21);
IkReal x7048=(gconst149*r21);
IkReal x7049=(gconst148*r20);
IkReal x7050=((1.0)*x7044);
IkReal x7051=(gconst148*x7044);
IkReal x7052=(gconst148*x7045);
evalcond[0]=((((-1.0)*r20*x7044*x7046))+((r22*x7045))+((x7044*x7047)));
evalcond[1]=(cj4+((r12*x7045))+((r11*x7051))+(((-1.0)*r10*x7044*x7046)));
evalcond[2]=((((-1.0)*sj4))+(((-1.0)*r00*x7044*x7046))+((r02*x7045))+((r01*x7051)));
evalcond[3]=((((-1.0)*r22*x7050))+((sj5*sj6))+(((-1.0)*r20*x7045*x7046))+((x7045*x7047))+(((-1.0)*cj5*cj6)));
evalcond[4]=((((-1.0)*r00*x7045*x7046))+((cj4*x7048))+((cj4*x7049))+((r01*x7052))+(((-1.0)*r02*x7050)));
evalcond[5]=((((-1.0)*r10*x7045*x7046))+((sj4*x7048))+((sj4*x7049))+((r11*x7052))+(((-1.0)*r12*x7050)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x7053=IKPowWithIntegerCheck(IKsign((((gconst148*r10))+((gconst149*r11)))),-1);
if(!x7053.valid){
continue;
}
CheckValue<IkReal> x7054 = IKatan2WithCheck(IkReal(((((-1.0)*gconst149*r20*sj4))+((gconst148*r21*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x7054.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7053.value)))+(x7054.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x7055=IKcos(j8);
IkReal x7056=IKsin(j8);
IkReal x7057=((1.0)*gconst149);
IkReal x7058=(gconst148*r21);
IkReal x7059=(gconst149*r21);
IkReal x7060=(gconst148*r20);
IkReal x7061=((1.0)*x7055);
IkReal x7062=(gconst148*x7055);
IkReal x7063=(gconst148*x7056);
evalcond[0]=(((x7055*x7058))+((r22*x7056))+(((-1.0)*r20*x7055*x7057)));
evalcond[1]=((((-1.0)*r10*x7055*x7057))+cj4+((r12*x7056))+((r11*x7062)));
evalcond[2]=((((-1.0)*sj4))+(((-1.0)*r00*x7055*x7057))+((r02*x7056))+((r01*x7062)));
evalcond[3]=(((x7056*x7058))+((sj5*sj6))+(((-1.0)*r20*x7056*x7057))+(((-1.0)*r22*x7061))+(((-1.0)*cj5*cj6)));
evalcond[4]=(((cj4*x7060))+((r01*x7063))+(((-1.0)*r02*x7061))+((cj4*x7059))+(((-1.0)*r00*x7056*x7057)));
evalcond[5]=(((sj4*x7059))+(((-1.0)*r12*x7061))+(((-1.0)*r10*x7056*x7057))+((sj4*x7060))+((r11*x7063)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x7064 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*gconst149*r20))+((cj4*gconst148*r21)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7064.valid){
continue;
}
CheckValue<IkReal> x7065=IKPowWithIntegerCheck(IKsign((((gconst148*r00))+((gconst149*r01)))),-1);
if(!x7065.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x7064.value)+(((1.5707963267949)*(x7065.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x7066=IKcos(j8);
IkReal x7067=IKsin(j8);
IkReal x7068=((1.0)*gconst149);
IkReal x7069=(gconst148*r21);
IkReal x7070=(gconst149*r21);
IkReal x7071=(gconst148*r20);
IkReal x7072=((1.0)*x7066);
IkReal x7073=(gconst148*x7066);
IkReal x7074=(gconst148*x7067);
evalcond[0]=(((r22*x7067))+(((-1.0)*r20*x7066*x7068))+((x7066*x7069)));
evalcond[1]=(((r12*x7067))+((r11*x7073))+cj4+(((-1.0)*r10*x7066*x7068)));
evalcond[2]=((((-1.0)*sj4))+((r01*x7073))+(((-1.0)*r00*x7066*x7068))+((r02*x7067)));
evalcond[3]=(((x7067*x7069))+(((-1.0)*r20*x7067*x7068))+((sj5*sj6))+(((-1.0)*cj5*cj6))+(((-1.0)*r22*x7072)));
evalcond[4]=(((cj4*x7071))+((cj4*x7070))+((r01*x7074))+(((-1.0)*r02*x7072))+(((-1.0)*r00*x7067*x7068)));
evalcond[5]=(((r11*x7074))+(((-1.0)*r10*x7067*x7068))+(((-1.0)*r12*x7072))+((sj4*x7071))+((sj4*x7070)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal x7075=(((r10*sj9))+((cj9*r11)));
j8eval[0]=x7075;
j8eval[1]=((IKabs(r22))+(IKabs((((r21*sj9))+(((-1.0)*cj9*r20))))));
j8eval[2]=IKsign(x7075);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal x7076=((1.0)*cj9);
IkReal x7077=((((-1.0)*r21*x7076))+(((-1.0)*r20*sj9)));
j8eval[0]=x7077;
j8eval[1]=((IKabs((((r11*sj9))+(((-1.0)*r10*x7076)))))+(IKabs(r12)));
j8eval[2]=IKsign(x7077);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal x7078=cj9*cj9;
IkReal x7079=r01*r01;
IkReal x7080=(cj9*r00);
IkReal x7081=(r01*sj9);
IkReal x7082=(x7079+(((-1.0)*x7078*x7079))+(r02*r02)+(((-2.0)*x7080*x7081))+((x7078*(r00*r00))));
j8eval[0]=x7082;
j8eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x7080))+x7081))));
j8eval[2]=IKsign(x7082);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x7083=cj9*cj9;
IkReal x7084=r01*r01;
IkReal x7085=(cj9*r00);
IkReal x7086=(r01*sj9);
CheckValue<IkReal> x7087 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x7085))+x7086)),IKFAST_ATAN2_MAGTHRESH);
if(!x7087.valid){
continue;
}
CheckValue<IkReal> x7088=IKPowWithIntegerCheck(IKsign((x7084+(r02*r02)+((x7083*(r00*r00)))+(((-2.0)*x7085*x7086))+(((-1.0)*x7083*x7084)))),-1);
if(!x7088.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x7087.value)+(((1.5707963267949)*(x7088.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x7089=IKcos(j8);
IkReal x7090=IKsin(j8);
IkReal x7091=((1.0)*x7089);
IkReal x7092=(sj9*x7089);
IkReal x7093=(sj9*x7090);
IkReal x7094=(cj9*x7091);
IkReal x7095=((1.0)*cj9*x7090);
evalcond[0]=(((r22*x7090))+((r21*x7092))+(((-1.0)*r20*x7094)));
evalcond[1]=(((r11*x7092))+((r12*x7090))+(((-1.0)*r10*x7094)));
evalcond[2]=((-1.0)+((r01*x7092))+(((-1.0)*r00*x7094))+((r02*x7090)));
evalcond[3]=(((r01*x7093))+(((-1.0)*r00*x7095))+(((-1.0)*r02*x7091)));
evalcond[4]=(((r11*x7093))+(((-1.0)*r10*x7095))+((cj9*r21))+(((-1.0)*r12*x7091))+((r20*sj9)));
evalcond[5]=(((sj5*sj6))+((r21*x7093))+(((-1.0)*r20*x7095))+(((-1.0)*r22*x7091))+(((-1.0)*cj5*cj6)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x7096=((1.0)*cj9);
CheckValue<IkReal> x7097 = IKatan2WithCheck(IkReal((((r11*sj9))+(((-1.0)*r10*x7096)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x7097.valid){
continue;
}
CheckValue<IkReal> x7098=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7096))+(((-1.0)*r20*sj9)))),-1);
if(!x7098.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x7097.value)+(((1.5707963267949)*(x7098.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x7099=IKcos(j8);
IkReal x7100=IKsin(j8);
IkReal x7101=((1.0)*x7099);
IkReal x7102=(sj9*x7099);
IkReal x7103=(sj9*x7100);
IkReal x7104=(cj9*x7101);
IkReal x7105=((1.0)*cj9*x7100);
evalcond[0]=(((r21*x7102))+((r22*x7100))+(((-1.0)*r20*x7104)));
evalcond[1]=(((r12*x7100))+(((-1.0)*r10*x7104))+((r11*x7102)));
evalcond[2]=((-1.0)+((r02*x7100))+(((-1.0)*r00*x7104))+((r01*x7102)));
evalcond[3]=((((-1.0)*r02*x7101))+(((-1.0)*r00*x7105))+((r01*x7103)));
evalcond[4]=((((-1.0)*r12*x7101))+(((-1.0)*r10*x7105))+((cj9*r21))+((r20*sj9))+((r11*x7103)));
evalcond[5]=(((sj5*sj6))+((r21*x7103))+(((-1.0)*r20*x7105))+(((-1.0)*r22*x7101))+(((-1.0)*cj5*cj6)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x7106=IKPowWithIntegerCheck(IKsign((((r10*sj9))+((cj9*r11)))),-1);
if(!x7106.valid){
continue;
}
CheckValue<IkReal> x7107 = IKatan2WithCheck(IkReal((((r21*sj9))+(((-1.0)*cj9*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7107.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7106.value)))+(x7107.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x7108=IKcos(j8);
IkReal x7109=IKsin(j8);
IkReal x7110=((1.0)*x7108);
IkReal x7111=(sj9*x7108);
IkReal x7112=(sj9*x7109);
IkReal x7113=(cj9*x7110);
IkReal x7114=((1.0)*cj9*x7109);
evalcond[0]=(((r21*x7111))+((r22*x7109))+(((-1.0)*r20*x7113)));
evalcond[1]=(((r11*x7111))+((r12*x7109))+(((-1.0)*r10*x7113)));
evalcond[2]=((-1.0)+((r02*x7109))+((r01*x7111))+(((-1.0)*r00*x7113)));
evalcond[3]=((((-1.0)*r02*x7110))+((r01*x7112))+(((-1.0)*r00*x7114)));
evalcond[4]=(((r11*x7112))+(((-1.0)*r10*x7114))+(((-1.0)*r12*x7110))+((cj9*r21))+((r20*sj9)));
evalcond[5]=(((sj5*sj6))+((r21*x7112))+(((-1.0)*r20*x7114))+(((-1.0)*r22*x7110))+(((-1.0)*cj5*cj6)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal x7115=(((cj9*r21))+((r20*sj9)));
j8eval[0]=x7115;
j8eval[1]=((IKabs(r12))+(IKabs((((r11*sj9))+(((-1.0)*cj9*r10))))));
j8eval[2]=IKsign(x7115);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal x7116=((1.0)*cj9);
IkReal x7117=((((-1.0)*r10*sj9))+(((-1.0)*r11*x7116)));
j8eval[0]=x7117;
j8eval[1]=((IKabs((((r21*sj9))+(((-1.0)*r20*x7116)))))+(IKabs(r22)));
j8eval[2]=IKsign(x7117);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal x7118=cj9*cj9;
IkReal x7119=r01*r01;
IkReal x7120=(r01*sj9);
IkReal x7121=(cj9*r00);
IkReal x7122=(((x7118*x7119))+(((-1.0)*x7119))+(((-1.0)*x7118*(r00*r00)))+(((-1.0)*(r02*r02)))+(((2.0)*x7120*x7121)));
j8eval[0]=x7122;
j8eval[1]=IKsign(x7122);
j8eval[2]=((IKabs(r02))+(IKabs((x7120+(((-1.0)*x7121))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x7123=cj9*cj9;
IkReal x7124=r01*r01;
IkReal x7125=(r01*sj9);
IkReal x7126=(cj9*r00);
CheckValue<IkReal> x7127=IKPowWithIntegerCheck(IKsign((((x7123*x7124))+(((-1.0)*x7124))+(((-1.0)*(r02*r02)))+(((-1.0)*x7123*(r00*r00)))+(((2.0)*x7125*x7126)))),-1);
if(!x7127.valid){
continue;
}
CheckValue<IkReal> x7128 = IKatan2WithCheck(IkReal(r02),IkReal((x7125+(((-1.0)*x7126)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7128.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7127.value)))+(x7128.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x7129=IKcos(j8);
IkReal x7130=IKsin(j8);
IkReal x7131=((1.0)*r20);
IkReal x7132=((1.0)*x7129);
IkReal x7133=(sj9*x7129);
IkReal x7134=(sj9*x7130);
IkReal x7135=(cj9*x7132);
IkReal x7136=((1.0)*cj9*x7130);
evalcond[0]=(((r22*x7130))+((r21*x7133))+(((-1.0)*cj9*x7129*x7131)));
evalcond[1]=(((r11*x7133))+(((-1.0)*r10*x7135))+((r12*x7130)));
evalcond[2]=((1.0)+(((-1.0)*r00*x7135))+((r01*x7133))+((r02*x7130)));
evalcond[3]=((((-1.0)*r00*x7136))+((r01*x7134))+(((-1.0)*r02*x7132)));
evalcond[4]=((((-1.0)*cj9*x7130*x7131))+((r21*x7134))+((sj5*sj6))+(((-1.0)*r22*x7132))+(((-1.0)*cj5*cj6)));
evalcond[5]=(((r11*x7134))+(((-1.0)*r10*x7136))+(((-1.0)*r12*x7132))+(((-1.0)*sj9*x7131))+(((-1.0)*cj9*r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x7137=((1.0)*cj9);
CheckValue<IkReal> x7138 = IKatan2WithCheck(IkReal((((r21*sj9))+(((-1.0)*r20*x7137)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7138.valid){
continue;
}
CheckValue<IkReal> x7139=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7137))+(((-1.0)*r10*sj9)))),-1);
if(!x7139.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x7138.value)+(((1.5707963267949)*(x7139.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x7140=IKcos(j8);
IkReal x7141=IKsin(j8);
IkReal x7142=((1.0)*r20);
IkReal x7143=((1.0)*x7140);
IkReal x7144=(sj9*x7140);
IkReal x7145=(sj9*x7141);
IkReal x7146=(cj9*x7143);
IkReal x7147=((1.0)*cj9*x7141);
evalcond[0]=((((-1.0)*cj9*x7140*x7142))+((r22*x7141))+((r21*x7144)));
evalcond[1]=(((r11*x7144))+((r12*x7141))+(((-1.0)*r10*x7146)));
evalcond[2]=((1.0)+((r01*x7144))+((r02*x7141))+(((-1.0)*r00*x7146)));
evalcond[3]=(((r01*x7145))+(((-1.0)*r00*x7147))+(((-1.0)*r02*x7143)));
evalcond[4]=((((-1.0)*r22*x7143))+((sj5*sj6))+(((-1.0)*cj9*x7141*x7142))+(((-1.0)*cj5*cj6))+((r21*x7145)));
evalcond[5]=((((-1.0)*sj9*x7142))+(((-1.0)*cj9*r21))+(((-1.0)*r12*x7143))+((r11*x7145))+(((-1.0)*r10*x7147)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x7148=IKPowWithIntegerCheck(IKsign((((cj9*r21))+((r20*sj9)))),-1);
if(!x7148.valid){
continue;
}
CheckValue<IkReal> x7149 = IKatan2WithCheck(IkReal((((r11*sj9))+(((-1.0)*cj9*r10)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x7149.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7148.value)))+(x7149.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x7150=IKcos(j8);
IkReal x7151=IKsin(j8);
IkReal x7152=((1.0)*r20);
IkReal x7153=((1.0)*x7150);
IkReal x7154=(sj9*x7150);
IkReal x7155=(sj9*x7151);
IkReal x7156=(cj9*x7153);
IkReal x7157=((1.0)*cj9*x7151);
evalcond[0]=(((r22*x7151))+((r21*x7154))+(((-1.0)*cj9*x7150*x7152)));
evalcond[1]=(((r12*x7151))+(((-1.0)*r10*x7156))+((r11*x7154)));
evalcond[2]=((1.0)+((r02*x7151))+((r01*x7154))+(((-1.0)*r00*x7156)));
evalcond[3]=(((r01*x7155))+(((-1.0)*r00*x7157))+(((-1.0)*r02*x7153)));
evalcond[4]=(((sj5*sj6))+(((-1.0)*r22*x7153))+(((-1.0)*cj9*x7151*x7152))+((r21*x7155))+(((-1.0)*cj5*cj6)));
evalcond[5]=((((-1.0)*r12*x7153))+(((-1.0)*sj9*x7152))+(((-1.0)*r10*x7157))+(((-1.0)*cj9*r21))+((r11*x7155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x7158=((-1.0)*px);
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x7158);
rxp1_1=(px*r21);
rxp1_2=(r11*x7158);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j8eval[0]=(((r21*sj9))+(((-1.0)*cj9*r20)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x7160=IKPowWithIntegerCheck((((r21*sj9))+(((-1.0)*cj9*r20))),-1);
if(!x7160.valid){
continue;
}
IkReal x7159=x7160.value;
sj8array[0]=((((-1.0)*sj5*sj6*x7159))+((cj5*cj6*x7159)));
if( sj8array[0] >= -1-IKFAST_SINCOS_THRESH && sj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKasin(sj8array[0]);
    cj8array[0] = IKcos(j8array[0]);
    sj8array[1] = sj8array[0];
    j8array[1] = j8array[0] > 0 ? (IKPI-j8array[0]) : (-IKPI-j8array[0]);
    cj8array[1] = -cj8array[0];
}
else if( isnan(sj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[3];
IkReal x7161=IKcos(j8);
IkReal x7162=(sj9*x7161);
IkReal x7163=((1.0)*cj9*x7161);
evalcond[0]=((-1.0)*r02*x7161);
evalcond[1]=(((r21*x7162))+(((-1.0)*r20*x7163)));
evalcond[2]=(((r11*x7162))+(((-1.0)*r10*x7163)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x7164=((1.0)*cj9);
CheckValue<IkReal> x7165=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj9))+(((-1.0)*r21*x7164)))),-1);
if(!x7165.valid){
continue;
}
CheckValue<IkReal> x7166 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*r00*x7164))+(((-1.0)*r10*sj4*x7164))+((r11*sj4*sj9))+((cj4*r01*sj9)))),IkReal(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7166.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7165.value)))+(x7166.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x7167=IKcos(j8);
IkReal x7168=IKsin(j8);
IkReal x7169=((1.0)*cj9);
IkReal x7170=(r20*sj9);
IkReal x7171=(cj9*r21);
IkReal x7172=((1.0)*x7167);
IkReal x7173=(sj9*x7167);
IkReal x7174=(sj9*x7168);
evalcond[0]=(((r21*x7173))+(((-1.0)*r20*x7167*x7169))+((r22*x7168)));
evalcond[1]=(((r11*x7173))+cj4+((r12*x7168))+(((-1.0)*r10*x7167*x7169)));
evalcond[2]=((((-1.0)*sj4))+((r01*x7173))+(((-1.0)*r00*x7167*x7169))+((r02*x7168)));
evalcond[3]=(((r21*x7174))+(((-1.0)*r20*x7168*x7169))+((sj5*sj6))+(((-1.0)*r22*x7172))+(((-1.0)*cj5*cj6)));
evalcond[4]=((((-1.0)*r02*x7172))+(((-1.0)*r00*x7168*x7169))+((r01*x7174))+((cj4*x7170))+((cj4*x7171)));
evalcond[5]=(((r11*x7174))+(((-1.0)*r12*x7172))+((sj4*x7170))+((sj4*x7171))+(((-1.0)*r10*x7168*x7169)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x7175 = IKatan2WithCheck(IkReal((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x7175.valid){
continue;
}
CheckValue<IkReal> x7176=IKPowWithIntegerCheck(IKsign((((r10*sj9))+((cj9*r11)))),-1);
if(!x7176.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x7175.value)+(((1.5707963267949)*(x7176.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x7177=IKcos(j8);
IkReal x7178=IKsin(j8);
IkReal x7179=((1.0)*cj9);
IkReal x7180=(r20*sj9);
IkReal x7181=(cj9*r21);
IkReal x7182=((1.0)*x7177);
IkReal x7183=(sj9*x7177);
IkReal x7184=(sj9*x7178);
evalcond[0]=((((-1.0)*r20*x7177*x7179))+((r21*x7183))+((r22*x7178)));
evalcond[1]=((((-1.0)*r10*x7177*x7179))+cj4+((r11*x7183))+((r12*x7178)));
evalcond[2]=(((r01*x7183))+(((-1.0)*r00*x7177*x7179))+(((-1.0)*sj4))+((r02*x7178)));
evalcond[3]=(((sj5*sj6))+((r21*x7184))+(((-1.0)*r20*x7178*x7179))+(((-1.0)*cj5*cj6))+(((-1.0)*r22*x7182)));
evalcond[4]=(((r01*x7184))+(((-1.0)*r00*x7178*x7179))+((cj4*x7180))+((cj4*x7181))+(((-1.0)*r02*x7182)));
evalcond[5]=(((r11*x7184))+(((-1.0)*r10*x7178*x7179))+(((-1.0)*r12*x7182))+((sj4*x7180))+((sj4*x7181)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x7185=IKPowWithIntegerCheck(IKsign((((r00*sj9))+((cj9*r01)))),-1);
if(!x7185.valid){
continue;
}
CheckValue<IkReal> x7186 = IKatan2WithCheck(IkReal((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7186.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7185.value)))+(x7186.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x7187=IKcos(j8);
IkReal x7188=IKsin(j8);
IkReal x7189=((1.0)*cj9);
IkReal x7190=(r20*sj9);
IkReal x7191=(cj9*r21);
IkReal x7192=((1.0)*x7187);
IkReal x7193=(sj9*x7187);
IkReal x7194=(sj9*x7188);
evalcond[0]=(((r21*x7193))+((r22*x7188))+(((-1.0)*r20*x7187*x7189)));
evalcond[1]=(((r12*x7188))+((r11*x7193))+cj4+(((-1.0)*r10*x7187*x7189)));
evalcond[2]=((((-1.0)*sj4))+((r01*x7193))+((r02*x7188))+(((-1.0)*r00*x7187*x7189)));
evalcond[3]=(((sj5*sj6))+((r21*x7194))+(((-1.0)*r20*x7188*x7189))+(((-1.0)*r22*x7192))+(((-1.0)*cj5*cj6)));
evalcond[4]=(((r01*x7194))+((cj4*x7190))+((cj4*x7191))+(((-1.0)*r02*x7192))+(((-1.0)*r00*x7188*x7189)));
evalcond[5]=(((r11*x7194))+(((-1.0)*r10*x7188*x7189))+(((-1.0)*r12*x7192))+((sj4*x7190))+((sj4*x7191)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4, j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7195=cj5*cj5;
IkReal x7196=cj6*cj6;
IkReal x7197=(cj5*sj6);
IkReal x7198=(cj6*sj5);
IkReal x7199=(cj9*r01);
IkReal x7200=((170000000.0)*sj5);
IkReal x7201=((156900000.0)*px);
IkReal x7202=((14850585.0)*sj9);
IkReal x7203=(r10*sj9);
IkReal x7204=(cj9*r11);
IkReal x7205=((16090500.0)*sj5);
IkReal x7206=((133365000.0)*cj6);
IkReal x7207=((156900000.0)*py);
IkReal x7208=(r00*sj9);
CheckValue<IkReal> x7209 = IKatan2WithCheck(IkReal(((((-43660000.0)*px))+((x7198*x7207))+((py*x7200))+(((14850585.0)*x7198*x7204))+((x7203*x7205))+(((14850585.0)*x7197*x7204))+(((-4132419.0)*x7199))+(((-4132419.0)*x7208))+((x7204*x7205))+((r10*x7198*x7202))+((x7197*x7207))+((r10*x7197*x7202)))),IkReal((((x7198*x7201))+((r00*x7198*x7202))+(((43660000.0)*py))+((x7199*x7205))+(((4132419.0)*x7204))+(((4132419.0)*x7203))+((r00*x7197*x7202))+(((14850585.0)*x7197*x7199))+((x7205*x7208))+(((14850585.0)*x7198*x7199))+((x7197*x7201))+((px*x7200)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7209.valid){
continue;
}
CheckValue<IkReal> x7210=IKPowWithIntegerCheck(IKsign(((77015489.0)+(((-123088050.0)*x7195*x7196))+x7206+(((-1.0)*x7195*x7206))+(((123088050.0)*x7197*x7198))+(((61544025.0)*x7196))+(((-10705975.0)*x7195))+(((133365000.0)*sj5*x7197)))),-1);
if(!x7210.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7209.value)+(((1.5707963267949)*(x7210.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x7211=IKcos(j4);
IkReal x7212=IKsin(j4);
IkReal x7213=((0.39225)*cj6);
IkReal x7214=((0.09465)*cj9);
IkReal x7215=((0.09465)*sj9);
IkReal x7216=(sj5*x7212);
IkReal x7217=(sj5*x7211);
IkReal x7218=((0.39225)*cj5*sj6);
evalcond[0]=((((-1.0)*r01*x7214))+(((-1.0)*r00*x7215))+(((-0.10915)*x7212))+((x7211*x7218))+(((-1.0)*px))+(((0.425)*x7217))+((x7213*x7217)));
evalcond[1]=((((-1.0)*r11*x7214))+(((-1.0)*r10*x7215))+(((-1.0)*py))+(((0.425)*x7216))+(((0.10915)*x7211))+((x7213*x7216))+((x7212*x7218)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j8eval[3];
IkReal x7219=(((r00*sj9))+((cj9*r01)));
j8eval[0]=x7219;
j8eval[1]=IKsign(x7219);
j8eval[2]=((IKabs((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))))+(IKabs((cj4*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
IkReal x7220=(((r10*sj9))+((cj9*r11)));
j8eval[0]=x7220;
j8eval[1]=IKsign(x7220);
j8eval[2]=((IKabs((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))))+(IKabs((r22*sj4))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
IkReal x7221=((1.0)*cj9);
IkReal x7222=((((-1.0)*r21*x7221))+(((-1.0)*r20*sj9)));
j8eval[0]=x7222;
j8eval[1]=((IKabs(((((-1.0)*cj4*r00*x7221))+(((-1.0)*r10*sj4*x7221))+((r11*sj4*sj9))+((cj4*r01*sj9)))))+(IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4))))));
j8eval[2]=IKsign(x7222);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7223=((-1.0)*r20);
IkReal x7225 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7225)==0){
continue;
}
IkReal x7224=pow(x7225,-0.5);
CheckValue<IkReal> x7226 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7223),IKFAST_ATAN2_MAGTHRESH);
if(!x7226.valid){
continue;
}
IkReal gconst0=((-1.0)*(x7226.value));
IkReal gconst1=(r21*x7224);
IkReal gconst2=(x7223*x7224);
CheckValue<IkReal> x7227 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7227.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7227.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x7228=((-1.0)*r20);
IkReal x7229=x7224;
CheckValue<IkReal> x7231 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7228),IKFAST_ATAN2_MAGTHRESH);
if(!x7231.valid){
continue;
}
IkReal x7230=((-1.0)*(x7231.value));
sj9=gconst1;
cj9=gconst2;
j9=x7230;
IkReal gconst0=x7230;
IkReal gconst1=(r21*x7229);
IkReal gconst2=(x7228*x7229);
j8eval[0]=cj4;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
IkReal x7232=((-1.0)*r20);
IkReal x7233=x7224;
CheckValue<IkReal> x7235 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7232),IKFAST_ATAN2_MAGTHRESH);
if(!x7235.valid){
continue;
}
IkReal x7234=((-1.0)*(x7235.value));
sj9=gconst1;
cj9=gconst2;
j9=x7234;
IkReal gconst0=x7234;
IkReal gconst1=(r21*x7233);
IkReal gconst2=(x7232*x7233);
j8eval[0]=sj4;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x7236=((-1.0)*r20);
IkReal x7237=x7224;
CheckValue<IkReal> x7239 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7236),IKFAST_ATAN2_MAGTHRESH);
if(!x7239.valid){
continue;
}
IkReal x7238=((-1.0)*(x7239.value));
sj9=gconst1;
cj9=gconst2;
j9=x7238;
IkReal gconst0=x7238;
IkReal gconst1=(r21*x7237);
IkReal gconst2=(x7236*x7237);
IkReal x7240=r22*r22;
CheckValue<IkReal> x7244=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7240))),-1);
if(!x7244.valid){
continue;
}
IkReal x7241=x7244.value;
IkReal x7242=(sj7*x7241);
IkReal x7243=((((2.0)*x7242*(r20*r20)*(r21*r21)))+((x7242*(r21*r21*r21*r21)))+((x7242*(r20*r20*r20*r20)))+((sj7*x7240)));
j8eval[0]=x7243;
j8eval[1]=IKsign(x7243);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x7245=((-1.0)*r20);
IkReal x7246=x7224;
CheckValue<IkReal> x7248 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7245),IKFAST_ATAN2_MAGTHRESH);
if(!x7248.valid){
continue;
}
IkReal x7247=((-1.0)*(x7248.value));
sj9=gconst1;
cj9=gconst2;
j9=x7247;
sj7=0;
cj7=1.0;
j7=0;
IkReal gconst0=x7247;
IkReal gconst1=(r21*x7246);
IkReal gconst2=(x7245*x7246);
j8eval[0]=cj4;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
IkReal x7249=((-1.0)*r20);
IkReal x7250=x7224;
CheckValue<IkReal> x7252 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7249),IKFAST_ATAN2_MAGTHRESH);
if(!x7252.valid){
continue;
}
IkReal x7251=((-1.0)*(x7252.value));
sj9=gconst1;
cj9=gconst2;
j9=x7251;
sj7=0;
cj7=1.0;
j7=0;
IkReal gconst0=x7251;
IkReal gconst1=(r21*x7250);
IkReal gconst2=(x7249*x7250);
j8eval[0]=sj4;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x7253=((-1.0)*r20);
IkReal x7254=x7224;
CheckValue<IkReal> x7256 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7253),IKFAST_ATAN2_MAGTHRESH);
if(!x7256.valid){
continue;
}
IkReal x7255=((-1.0)*(x7256.value));
sj9=gconst1;
cj9=gconst2;
j9=x7255;
sj7=0;
cj7=1.0;
j7=0;
IkReal gconst0=x7255;
IkReal gconst1=(r21*x7254);
IkReal gconst2=(x7253*x7254);
IkReal x7257=r22*r22;
CheckValue<IkReal> x7260=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7257))),-1);
if(!x7260.valid){
continue;
}
IkReal x7258=x7260.value;
IkReal x7259=(x7257+((x7258*(r20*r20*r20*r20)))+(((2.0)*x7258*(r20*r20)*(r21*r21)))+((x7258*(r21*r21*r21*r21))));
j8eval[0]=x7259;
j8eval[1]=IKsign(x7259);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x7261=((-1.0)*r20);
IkReal x7262=x7224;
CheckValue<IkReal> x7264 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7261),IKFAST_ATAN2_MAGTHRESH);
if(!x7264.valid){
continue;
}
IkReal x7263=((-1.0)*(x7264.value));
sj9=gconst1;
cj9=gconst2;
j9=x7263;
sj7=0;
cj7=1.0;
j7=0;
sj4=0;
cj4=1.0;
j4=0;
IkReal gconst0=x7263;
IkReal gconst1=(r21*x7262);
IkReal gconst2=(x7261*x7262);
j8eval[0]=1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[4];
IkReal x7265=((-1.0)*r20);
IkReal x7266=x7224;
CheckValue<IkReal> x7268 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7265),IKFAST_ATAN2_MAGTHRESH);
if(!x7268.valid){
continue;
}
IkReal x7267=((-1.0)*(x7268.value));
sj9=gconst1;
cj9=gconst2;
j9=x7267;
sj7=0;
cj7=1.0;
j7=0;
sj4=0;
cj4=1.0;
j4=0;
IkReal gconst0=x7267;
IkReal gconst1=(r21*x7266);
IkReal gconst2=(x7265*x7266);
IkReal x7269=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x7273=IKPowWithIntegerCheck(x7269,-1);
if(!x7273.valid){
continue;
}
IkReal x7270=x7273.value;
IkReal x7271=((1.0)*x7270);
IkReal x7272=((((-2.0)*r10*r11*r20*r21*x7270))+(((-1.0)*x7271*(r10*r10)*(r20*r20)))+(((-1.0)*x7271*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12))));
j8eval[0]=x7272;
j8eval[1]=IKsign(x7272);
j8eval[2]=r12;
j8eval[3]=x7269;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x7274=((-1.0)*r20);
IkReal x7275=x7224;
CheckValue<IkReal> x7277 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7274),IKFAST_ATAN2_MAGTHRESH);
if(!x7277.valid){
continue;
}
IkReal x7276=((-1.0)*(x7277.value));
sj9=gconst1;
cj9=gconst2;
j9=x7276;
sj7=0;
cj7=1.0;
j7=0;
sj4=0;
cj4=1.0;
j4=0;
IkReal gconst0=x7276;
IkReal gconst1=(r21*x7275);
IkReal gconst2=(x7274*x7275);
IkReal x7278=r22*r22;
CheckValue<IkReal> x7281=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7278))),-1);
if(!x7281.valid){
continue;
}
IkReal x7279=x7281.value;
IkReal x7280=(x7278+((x7279*(r20*r20*r20*r20)))+((x7279*(r21*r21*r21*r21)))+(((2.0)*x7279*(r20*r20)*(r21*r21))));
j8eval[0]=x7280;
j8eval[1]=IKsign(x7280);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x7282=(cj6*sj5);
IkReal x7283=(cj5*sj6);
IkReal x7284=(gconst2*r20);
IkReal x7285=(gconst1*r21);
CheckValue<IkReal> x7286=IKPowWithIntegerCheck(IKsign(((x7284*x7284)+(r22*r22)+(((-2.0)*x7284*x7285))+(x7285*x7285))),-1);
if(!x7286.valid){
continue;
}
CheckValue<IkReal> x7287 = IKatan2WithCheck(IkReal((((x7282*x7284))+(((-1.0)*x7282*x7285))+(((-1.0)*x7283*x7285))+((x7283*x7284)))),IkReal((((r22*x7283))+((r22*x7282)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7287.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7286.value)))+(x7287.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x7288=IKcos(j8);
IkReal x7289=IKsin(j8);
IkReal x7290=((1.0)*sj5);
IkReal x7291=(gconst1*x7288);
IkReal x7292=(gconst2*x7289);
IkReal x7293=((1.0)*gconst2*x7288);
IkReal x7294=((1.0)*gconst1*x7289);
evalcond[0]=(((r22*x7289))+(((-1.0)*r20*x7293))+((r21*x7291)));
evalcond[1]=((((-1.0)*r00*x7293))+((r02*x7289))+((r01*x7291)));
evalcond[2]=(((r12*x7288))+((r10*x7292))+(((-1.0)*r11*x7294)));
evalcond[3]=((1.0)+((r12*x7289))+((r11*x7291))+(((-1.0)*r10*x7293)));
evalcond[4]=((((-1.0)*sj6*x7290))+(((-1.0)*r01*x7294))+((r02*x7288))+((cj5*cj6))+((r00*x7292)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*cj6*x7290))+((r22*x7288))+(((-1.0)*r21*x7294))+((r20*x7292)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x7295=(gconst1*r11);
IkReal x7296=(gconst2*r10);
CheckValue<IkReal> x7297=IKPowWithIntegerCheck(IKsign(((((2.0)*x7295*x7296))+(((-1.0)*(r12*r12)))+(((-1.0)*(x7295*x7295)))+(((-1.0)*(x7296*x7296))))),-1);
if(!x7297.valid){
continue;
}
CheckValue<IkReal> x7298 = IKatan2WithCheck(IkReal(r12),IkReal((x7295+(((-1.0)*x7296)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7298.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7297.value)))+(x7298.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x7299=IKcos(j8);
IkReal x7300=IKsin(j8);
IkReal x7301=((1.0)*sj5);
IkReal x7302=(gconst1*x7299);
IkReal x7303=(gconst2*x7300);
IkReal x7304=((1.0)*gconst2*x7299);
IkReal x7305=((1.0)*gconst1*x7300);
evalcond[0]=(((r22*x7300))+(((-1.0)*r20*x7304))+((r21*x7302)));
evalcond[1]=(((r02*x7300))+(((-1.0)*r00*x7304))+((r01*x7302)));
evalcond[2]=(((r12*x7299))+((r10*x7303))+(((-1.0)*r11*x7305)));
evalcond[3]=((1.0)+((r12*x7300))+(((-1.0)*r10*x7304))+((r11*x7302)));
evalcond[4]=(((r02*x7299))+(((-1.0)*sj6*x7301))+((cj5*cj6))+((r00*x7303))+(((-1.0)*r01*x7305)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*cj6*x7301))+(((-1.0)*r21*x7305))+((r22*x7299))+((r20*x7303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x7306=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x7306.valid){
continue;
}
CheckValue<IkReal> x7307 = IKatan2WithCheck(IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7307.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7306.value)))+(x7307.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x7308=IKcos(j8);
IkReal x7309=IKsin(j8);
IkReal x7310=((1.0)*sj5);
IkReal x7311=(gconst1*x7308);
IkReal x7312=(gconst2*x7309);
IkReal x7313=((1.0)*gconst2*x7308);
IkReal x7314=((1.0)*gconst1*x7309);
evalcond[0]=(((r22*x7309))+(((-1.0)*r20*x7313))+((r21*x7311)));
evalcond[1]=(((r02*x7309))+((r01*x7311))+(((-1.0)*r00*x7313)));
evalcond[2]=(((r12*x7308))+((r10*x7312))+(((-1.0)*r11*x7314)));
evalcond[3]=((1.0)+((r12*x7309))+(((-1.0)*r10*x7313))+((r11*x7311)));
evalcond[4]=(((r02*x7308))+(((-1.0)*sj6*x7310))+((cj5*cj6))+(((-1.0)*r01*x7314))+((r00*x7312)));
evalcond[5]=((((-1.0)*cj5*sj6))+((r22*x7308))+(((-1.0)*r21*x7314))+(((-1.0)*cj6*x7310))+((r20*x7312)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x7315=((-1.0)*r20);
IkReal x7316=x7224;
CheckValue<IkReal> x7318 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7315),IKFAST_ATAN2_MAGTHRESH);
if(!x7318.valid){
continue;
}
IkReal x7317=((-1.0)*(x7318.value));
sj9=gconst1;
cj9=gconst2;
j9=x7317;
sj7=0;
cj7=1.0;
j7=0;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal gconst0=x7317;
IkReal gconst1=(r21*x7316);
IkReal gconst2=(x7315*x7316);
j8eval[0]=1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x7319=((-1.0)*r20);
IkReal x7320=x7224;
CheckValue<IkReal> x7322 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7319),IKFAST_ATAN2_MAGTHRESH);
if(!x7322.valid){
continue;
}
IkReal x7321=((-1.0)*(x7322.value));
sj9=gconst1;
cj9=gconst2;
j9=x7321;
sj7=0;
cj7=1.0;
j7=0;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal gconst0=x7321;
IkReal gconst1=(r21*x7320);
IkReal gconst2=(x7319*x7320);
j8eval[0]=r12;
j8eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x7323=((-1.0)*r20);
IkReal x7324=x7224;
CheckValue<IkReal> x7326 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7323),IKFAST_ATAN2_MAGTHRESH);
if(!x7326.valid){
continue;
}
IkReal x7325=((-1.0)*(x7326.value));
sj9=gconst1;
cj9=gconst2;
j9=x7325;
sj7=0;
cj7=1.0;
j7=0;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal gconst0=x7325;
IkReal gconst1=(r21*x7324);
IkReal gconst2=(x7323*x7324);
IkReal x7327=r22*r22;
CheckValue<IkReal> x7330=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7327))),-1);
if(!x7330.valid){
continue;
}
IkReal x7328=x7330.value;
IkReal x7329=(x7327+((x7328*(r21*r21*r21*r21)))+(((2.0)*x7328*(r20*r20)*(r21*r21)))+((x7328*(r20*r20*r20*r20))));
j8eval[0]=x7329;
j8eval[1]=IKsign(x7329);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x7331=(cj6*sj5);
IkReal x7332=(cj5*sj6);
IkReal x7333=(gconst2*r20);
IkReal x7334=(gconst1*r21);
CheckValue<IkReal> x7335 = IKatan2WithCheck(IkReal(((((-1.0)*x7331*x7334))+((x7332*x7333))+((x7331*x7333))+(((-1.0)*x7332*x7334)))),IkReal((((r22*x7332))+((r22*x7331)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7335.valid){
continue;
}
CheckValue<IkReal> x7336=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x7333*x7333)+(x7334*x7334)+(((-2.0)*x7333*x7334)))),-1);
if(!x7336.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x7335.value)+(((1.5707963267949)*(x7336.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x7337=IKcos(j8);
IkReal x7338=IKsin(j8);
IkReal x7339=((1.0)*cj6);
IkReal x7340=(gconst1*x7337);
IkReal x7341=(gconst2*x7338);
IkReal x7342=((1.0)*gconst2*x7337);
IkReal x7343=((1.0)*gconst1*x7338);
evalcond[0]=(((r22*x7338))+((r21*x7340))+(((-1.0)*r20*x7342)));
evalcond[1]=((((-1.0)*r00*x7342))+((r02*x7338))+((r01*x7340)));
evalcond[2]=(((r12*x7337))+(((-1.0)*r11*x7343))+((r10*x7341)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x7342))+((r12*x7338))+((r11*x7340)));
evalcond[4]=(((r02*x7337))+((sj5*sj6))+(((-1.0)*r01*x7343))+(((-1.0)*cj5*x7339))+((r00*x7341)));
evalcond[5]=((((-1.0)*cj5*sj6))+((r22*x7337))+(((-1.0)*sj5*x7339))+((r20*x7341))+(((-1.0)*r21*x7343)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x7344=(gconst2*r10);
IkReal x7345=(gconst1*r11);
CheckValue<IkReal> x7346=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x7344*x7345))+(x7344*x7344)+(x7345*x7345))),-1);
if(!x7346.valid){
continue;
}
CheckValue<IkReal> x7347 = IKatan2WithCheck(IkReal(r12),IkReal((x7345+(((-1.0)*x7344)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7347.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7346.value)))+(x7347.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x7348=IKcos(j8);
IkReal x7349=IKsin(j8);
IkReal x7350=((1.0)*cj6);
IkReal x7351=(gconst1*x7348);
IkReal x7352=(gconst2*x7349);
IkReal x7353=((1.0)*gconst2*x7348);
IkReal x7354=((1.0)*gconst1*x7349);
evalcond[0]=(((r21*x7351))+((r22*x7349))+(((-1.0)*r20*x7353)));
evalcond[1]=((((-1.0)*r00*x7353))+((r01*x7351))+((r02*x7349)));
evalcond[2]=(((r10*x7352))+(((-1.0)*r11*x7354))+((r12*x7348)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x7353))+((r11*x7351))+((r12*x7349)));
evalcond[4]=((((-1.0)*r01*x7354))+((sj5*sj6))+((r00*x7352))+(((-1.0)*cj5*x7350))+((r02*x7348)));
evalcond[5]=((((-1.0)*sj5*x7350))+(((-1.0)*cj5*sj6))+((r20*x7352))+((r22*x7348))+(((-1.0)*r21*x7354)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x7355=((1.0)*gconst2);
CheckValue<IkReal> x7356=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7355))+(((-1.0)*gconst1*r00)))),-1);
if(!x7356.valid){
continue;
}
CheckValue<IkReal> x7357 = IKatan2WithCheck(IkReal((((gconst1*r21))+(((-1.0)*r20*x7355)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7357.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7356.value)))+(x7357.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x7358=IKcos(j8);
IkReal x7359=IKsin(j8);
IkReal x7360=((1.0)*cj6);
IkReal x7361=(gconst1*x7358);
IkReal x7362=(gconst2*x7359);
IkReal x7363=((1.0)*gconst2*x7358);
IkReal x7364=((1.0)*gconst1*x7359);
evalcond[0]=((((-1.0)*r20*x7363))+((r21*x7361))+((r22*x7359)));
evalcond[1]=(((r01*x7361))+(((-1.0)*r00*x7363))+((r02*x7359)));
evalcond[2]=(((r12*x7358))+(((-1.0)*r11*x7364))+((r10*x7362)));
evalcond[3]=((-1.0)+((r11*x7361))+(((-1.0)*r10*x7363))+((r12*x7359)));
evalcond[4]=(((r00*x7362))+((sj5*sj6))+(((-1.0)*r01*x7364))+((r02*x7358))+(((-1.0)*cj5*x7360)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*r21*x7364))+((r20*x7362))+(((-1.0)*sj5*x7360))+((r22*x7358)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x7365=((-1.0)*r20);
IkReal x7366=x7224;
CheckValue<IkReal> x7368 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7365),IKFAST_ATAN2_MAGTHRESH);
if(!x7368.valid){
continue;
}
IkReal x7367=((-1.0)*(x7368.value));
sj9=gconst1;
cj9=gconst2;
j9=x7367;
sj7=0;
cj7=1.0;
j7=0;
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal gconst0=x7367;
IkReal gconst1=(r21*x7366);
IkReal gconst2=(x7365*x7366);
j8eval[0]=1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x7369=((-1.0)*r20);
IkReal x7370=x7224;
CheckValue<IkReal> x7372 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7369),IKFAST_ATAN2_MAGTHRESH);
if(!x7372.valid){
continue;
}
IkReal x7371=((-1.0)*(x7372.value));
sj9=gconst1;
cj9=gconst2;
j9=x7371;
sj7=0;
cj7=1.0;
j7=0;
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal gconst0=x7371;
IkReal gconst1=(r21*x7370);
IkReal gconst2=(x7369*x7370);
j8eval[0]=r02;
j8eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x7373=((-1.0)*r20);
IkReal x7374=x7224;
CheckValue<IkReal> x7376 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7373),IKFAST_ATAN2_MAGTHRESH);
if(!x7376.valid){
continue;
}
IkReal x7375=((-1.0)*(x7376.value));
sj9=gconst1;
cj9=gconst2;
j9=x7375;
sj7=0;
cj7=1.0;
j7=0;
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal gconst0=x7375;
IkReal gconst1=(r21*x7374);
IkReal gconst2=(x7373*x7374);
IkReal x7377=r22*r22;
CheckValue<IkReal> x7380=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7377))),-1);
if(!x7380.valid){
continue;
}
IkReal x7378=x7380.value;
IkReal x7379=(x7377+(((2.0)*x7378*(r20*r20)*(r21*r21)))+((x7378*(r21*r21*r21*r21)))+((x7378*(r20*r20*r20*r20))));
j8eval[0]=x7379;
j8eval[1]=IKsign(x7379);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x7381=(cj6*sj5);
IkReal x7382=(cj5*sj6);
IkReal x7383=(gconst2*r20);
IkReal x7384=(gconst1*r21);
CheckValue<IkReal> x7385=IKPowWithIntegerCheck(IKsign(((x7384*x7384)+(r22*r22)+(x7383*x7383)+(((-2.0)*x7383*x7384)))),-1);
if(!x7385.valid){
continue;
}
CheckValue<IkReal> x7386 = IKatan2WithCheck(IkReal(((((-1.0)*x7381*x7384))+((x7381*x7383))+(((-1.0)*x7382*x7384))+((x7382*x7383)))),IkReal((((r22*x7382))+((r22*x7381)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7386.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7385.value)))+(x7386.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x7387=IKcos(j8);
IkReal x7388=IKsin(j8);
IkReal x7389=((1.0)*sj5);
IkReal x7390=(gconst1*x7387);
IkReal x7391=(gconst2*x7388);
IkReal x7392=((1.0)*gconst2*x7387);
IkReal x7393=((1.0)*gconst1*x7388);
evalcond[0]=((((-1.0)*r20*x7392))+((r21*x7390))+((r22*x7388)));
evalcond[1]=(((r11*x7390))+(((-1.0)*r10*x7392))+((r12*x7388)));
evalcond[2]=((((-1.0)*r01*x7393))+((r00*x7391))+((r02*x7387)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x7392))+((r01*x7390))+((r02*x7388)));
evalcond[4]=((((-1.0)*sj6*x7389))+(((-1.0)*r11*x7393))+((r10*x7391))+((cj5*cj6))+((r12*x7387)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*cj6*x7389))+((r20*x7391))+(((-1.0)*r21*x7393))+((r22*x7387)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x7394=(gconst1*r01);
IkReal x7395=(gconst2*r00);
CheckValue<IkReal> x7396=IKPowWithIntegerCheck(IKsign(((x7394*x7394)+(x7395*x7395)+(((-2.0)*x7394*x7395))+(r02*r02))),-1);
if(!x7396.valid){
continue;
}
CheckValue<IkReal> x7397 = IKatan2WithCheck(IkReal(r02),IkReal((x7394+(((-1.0)*x7395)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7397.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7396.value)))+(x7397.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x7398=IKcos(j8);
IkReal x7399=IKsin(j8);
IkReal x7400=((1.0)*sj5);
IkReal x7401=(gconst1*x7398);
IkReal x7402=(gconst2*x7399);
IkReal x7403=((1.0)*gconst2*x7398);
IkReal x7404=((1.0)*gconst1*x7399);
evalcond[0]=((((-1.0)*r20*x7403))+((r21*x7401))+((r22*x7399)));
evalcond[1]=(((r11*x7401))+((r12*x7399))+(((-1.0)*r10*x7403)));
evalcond[2]=((((-1.0)*r01*x7404))+((r02*x7398))+((r00*x7402)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x7403))+((r02*x7399))+((r01*x7401)));
evalcond[4]=((((-1.0)*r11*x7404))+(((-1.0)*sj6*x7400))+((r12*x7398))+((cj5*cj6))+((r10*x7402)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*cj6*x7400))+(((-1.0)*r21*x7404))+((r20*x7402))+((r22*x7398)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x7405 = IKatan2WithCheck(IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7405.valid){
continue;
}
CheckValue<IkReal> x7406=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x7406.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x7405.value)+(((1.5707963267949)*(x7406.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x7407=IKcos(j8);
IkReal x7408=IKsin(j8);
IkReal x7409=((1.0)*sj5);
IkReal x7410=(gconst1*x7407);
IkReal x7411=(gconst2*x7408);
IkReal x7412=((1.0)*gconst2*x7407);
IkReal x7413=((1.0)*gconst1*x7408);
evalcond[0]=((((-1.0)*r20*x7412))+((r21*x7410))+((r22*x7408)));
evalcond[1]=((((-1.0)*r10*x7412))+((r12*x7408))+((r11*x7410)));
evalcond[2]=(((r02*x7407))+(((-1.0)*r01*x7413))+((r00*x7411)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x7412))+((r02*x7408))+((r01*x7410)));
evalcond[4]=((((-1.0)*r11*x7413))+(((-1.0)*sj6*x7409))+((cj5*cj6))+((r12*x7407))+((r10*x7411)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*cj6*x7409))+(((-1.0)*r21*x7413))+((r20*x7411))+((r22*x7407)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x7414=((-1.0)*r20);
IkReal x7415=x7224;
CheckValue<IkReal> x7417 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7414),IKFAST_ATAN2_MAGTHRESH);
if(!x7417.valid){
continue;
}
IkReal x7416=((-1.0)*(x7417.value));
sj9=gconst1;
cj9=gconst2;
j9=x7416;
sj7=0;
cj7=1.0;
j7=0;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal gconst0=x7416;
IkReal gconst1=(r21*x7415);
IkReal gconst2=(x7414*x7415);
j8eval[0]=1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[4];
IkReal x7418=((-1.0)*r20);
IkReal x7419=x7224;
CheckValue<IkReal> x7421 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7418),IKFAST_ATAN2_MAGTHRESH);
if(!x7421.valid){
continue;
}
IkReal x7420=((-1.0)*(x7421.value));
sj9=gconst1;
cj9=gconst2;
j9=x7420;
sj7=0;
cj7=1.0;
j7=0;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal gconst0=x7420;
IkReal gconst1=(r21*x7419);
IkReal gconst2=(x7418*x7419);
IkReal x7422=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x7426=IKPowWithIntegerCheck(x7422,-1);
if(!x7426.valid){
continue;
}
IkReal x7423=x7426.value;
IkReal x7424=((1.0)*x7423);
IkReal x7425=((((-1.0)*x7424*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x7423))+(((-1.0)*x7424*(r01*r01)*(r21*r21))));
j8eval[0]=x7425;
j8eval[1]=IKsign(x7425);
j8eval[2]=r02;
j8eval[3]=x7422;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x7427=((-1.0)*r20);
IkReal x7428=x7224;
CheckValue<IkReal> x7430 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7427),IKFAST_ATAN2_MAGTHRESH);
if(!x7430.valid){
continue;
}
IkReal x7429=((-1.0)*(x7430.value));
sj9=gconst1;
cj9=gconst2;
j9=x7429;
sj7=0;
cj7=1.0;
j7=0;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal gconst0=x7429;
IkReal gconst1=(r21*x7428);
IkReal gconst2=(x7427*x7428);
IkReal x7431=r22*r22;
CheckValue<IkReal> x7434=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7431))),-1);
if(!x7434.valid){
continue;
}
IkReal x7432=x7434.value;
IkReal x7433=(((x7432*(r21*r21*r21*r21)))+(((2.0)*x7432*(r20*r20)*(r21*r21)))+x7431+((x7432*(r20*r20*r20*r20))));
j8eval[0]=x7433;
j8eval[1]=IKsign(x7433);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x7435=(cj6*sj5);
IkReal x7436=(cj5*sj6);
IkReal x7437=(gconst2*r20);
IkReal x7438=(gconst1*r21);
CheckValue<IkReal> x7439 = IKatan2WithCheck(IkReal((((x7436*x7437))+((x7435*x7437))+(((-1.0)*x7435*x7438))+(((-1.0)*x7436*x7438)))),IkReal((((r22*x7435))+((r22*x7436)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7439.valid){
continue;
}
CheckValue<IkReal> x7440=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x7437*x7437)+(x7438*x7438)+(((-2.0)*x7437*x7438)))),-1);
if(!x7440.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x7439.value)+(((1.5707963267949)*(x7440.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x7441=IKcos(j8);
IkReal x7442=IKsin(j8);
IkReal x7443=((1.0)*cj6);
IkReal x7444=(gconst1*x7441);
IkReal x7445=(gconst2*x7442);
IkReal x7446=((1.0)*gconst2*x7441);
IkReal x7447=((1.0)*gconst1*x7442);
evalcond[0]=(((r22*x7442))+((r21*x7444))+(((-1.0)*r20*x7446)));
evalcond[1]=((((-1.0)*r10*x7446))+((r12*x7442))+((r11*x7444)));
evalcond[2]=((((-1.0)*r01*x7447))+((r00*x7445))+((r02*x7441)));
evalcond[3]=((1.0)+(((-1.0)*r00*x7446))+((r01*x7444))+((r02*x7442)));
evalcond[4]=(((r12*x7441))+((sj5*sj6))+((r10*x7445))+(((-1.0)*r11*x7447))+(((-1.0)*cj5*x7443)));
evalcond[5]=((((-1.0)*cj5*sj6))+((r20*x7445))+(((-1.0)*sj5*x7443))+((r22*x7441))+(((-1.0)*r21*x7447)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x7448=(gconst1*r01);
IkReal x7449=(gconst2*r00);
CheckValue<IkReal> x7450 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x7449))+x7448)),IKFAST_ATAN2_MAGTHRESH);
if(!x7450.valid){
continue;
}
CheckValue<IkReal> x7451=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x7449*x7449)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x7448*x7448)))+(((2.0)*x7448*x7449)))),-1);
if(!x7451.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x7450.value)+(((1.5707963267949)*(x7451.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x7452=IKcos(j8);
IkReal x7453=IKsin(j8);
IkReal x7454=((1.0)*cj6);
IkReal x7455=(gconst1*x7452);
IkReal x7456=(gconst2*x7453);
IkReal x7457=((1.0)*gconst2*x7452);
IkReal x7458=((1.0)*gconst1*x7453);
evalcond[0]=(((r22*x7453))+((r21*x7455))+(((-1.0)*r20*x7457)));
evalcond[1]=((((-1.0)*r10*x7457))+((r12*x7453))+((r11*x7455)));
evalcond[2]=(((r02*x7452))+(((-1.0)*r01*x7458))+((r00*x7456)));
evalcond[3]=((1.0)+((r02*x7453))+(((-1.0)*r00*x7457))+((r01*x7455)));
evalcond[4]=(((r12*x7452))+((sj5*sj6))+((r10*x7456))+(((-1.0)*cj5*x7454))+(((-1.0)*r11*x7458)));
evalcond[5]=((((-1.0)*cj5*sj6))+((r20*x7456))+(((-1.0)*sj5*x7454))+((r22*x7452))+(((-1.0)*r21*x7458)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x7459=((1.0)*gconst2);
CheckValue<IkReal> x7460=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x7459)))),-1);
if(!x7460.valid){
continue;
}
CheckValue<IkReal> x7461 = IKatan2WithCheck(IkReal((((gconst1*r21))+(((-1.0)*r20*x7459)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7461.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7460.value)))+(x7461.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x7462=IKcos(j8);
IkReal x7463=IKsin(j8);
IkReal x7464=((1.0)*cj6);
IkReal x7465=(gconst1*x7462);
IkReal x7466=(gconst2*x7463);
IkReal x7467=((1.0)*gconst2*x7462);
IkReal x7468=((1.0)*gconst1*x7463);
evalcond[0]=(((r21*x7465))+(((-1.0)*r20*x7467))+((r22*x7463)));
evalcond[1]=((((-1.0)*r10*x7467))+((r12*x7463))+((r11*x7465)));
evalcond[2]=(((r02*x7462))+((r00*x7466))+(((-1.0)*r01*x7468)));
evalcond[3]=((1.0)+((r02*x7463))+(((-1.0)*r00*x7467))+((r01*x7465)));
evalcond[4]=(((r10*x7466))+((sj5*sj6))+(((-1.0)*cj5*x7464))+(((-1.0)*r11*x7468))+((r12*x7462)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*r21*x7468))+((r20*x7466))+(((-1.0)*sj5*x7464))+((r22*x7462)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x7469=((-1.0)*r20);
IkReal x7470=((-1.0)*px);
CheckValue<IkReal> x7472 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7469),IKFAST_ATAN2_MAGTHRESH);
if(!x7472.valid){
continue;
}
IkReal x7471=((-1.0)*(x7472.value));
sj9=gconst1;
cj9=gconst2;
j9=x7471;
sj7=0;
cj7=1.0;
j7=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x7470);
rxp1_1=(px*r21);
rxp1_2=(r11*x7470);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x7471;
IkReal gconst1=r21;
IkReal gconst2=x7469;
j8eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x7474=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x7474.valid){
continue;
}
IkReal x7473=x7474.value;
sj8array[0]=(((cj6*sj5*x7473))+((cj5*sj6*x7473)));
if( sj8array[0] >= -1-IKFAST_SINCOS_THRESH && sj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKasin(sj8array[0]);
    cj8array[0] = IKcos(j8array[0]);
    sj8array[1] = sj8array[0];
    j8array[1] = j8array[0] > 0 ? (IKPI-j8array[0]) : (-IKPI-j8array[0]);
    cj8array[1] = -cj8array[0];
}
else if( isnan(sj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[3];
IkReal x7475=IKcos(j8);
IkReal x7476=(gconst1*x7475);
IkReal x7477=((1.0)*gconst2*x7475);
evalcond[0]=(r02*x7475);
evalcond[1]=((((-1.0)*r20*x7477))+((r21*x7476)));
evalcond[2]=(((r11*x7476))+(((-1.0)*r10*x7477)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x7478=(cj6*sj5);
IkReal x7479=(cj5*sj6);
IkReal x7480=(gconst2*r20);
IkReal x7481=(gconst1*r21);
CheckValue<IkReal> x7482=IKPowWithIntegerCheck(IKsign(((((-2.0)*x7480*x7481))+(r22*r22)+(x7480*x7480)+(x7481*x7481))),-1);
if(!x7482.valid){
continue;
}
CheckValue<IkReal> x7483 = IKatan2WithCheck(IkReal((((x7478*x7480))+(((-1.0)*x7479*x7481))+(((-1.0)*x7478*x7481))+((x7479*x7480)))),IkReal((((r22*x7478))+((r22*x7479)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7483.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7482.value)))+(x7483.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x7484=IKcos(j8);
IkReal x7485=IKsin(j8);
IkReal x7486=((1.0)*sj5);
IkReal x7487=(cj5*cj6);
IkReal x7488=(gconst1*x7484);
IkReal x7489=(gconst2*x7485);
IkReal x7490=((1.0)*gconst2*x7484);
IkReal x7491=((1.0)*gconst1*x7485);
evalcond[0]=(((r22*x7485))+(((-1.0)*r20*x7490))+((r21*x7488)));
evalcond[1]=(cj4+((r11*x7488))+((r12*x7485))+(((-1.0)*r10*x7490)));
evalcond[2]=((((-1.0)*sj4))+((r01*x7488))+((r02*x7485))+(((-1.0)*r00*x7490)));
evalcond[3]=(((r22*x7484))+(((-1.0)*cj6*x7486))+(((-1.0)*cj5*sj6))+((r20*x7489))+(((-1.0)*r21*x7491)));
evalcond[4]=(((cj4*x7487))+((r00*x7489))+(((-1.0)*r01*x7491))+((r02*x7484))+(((-1.0)*cj4*sj6*x7486)));
evalcond[5]=(((r12*x7484))+((r10*x7489))+((sj4*x7487))+(((-1.0)*sj4*sj6*x7486))+(((-1.0)*r11*x7491)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x7492=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x7492.valid){
continue;
}
CheckValue<IkReal> x7493 = IKatan2WithCheck(IkReal(((((-1.0)*gconst2*r20*sj4))+((gconst1*r21*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x7493.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7492.value)))+(x7493.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x7494=IKcos(j8);
IkReal x7495=IKsin(j8);
IkReal x7496=((1.0)*sj5);
IkReal x7497=(cj5*cj6);
IkReal x7498=(gconst1*x7494);
IkReal x7499=(gconst2*x7495);
IkReal x7500=((1.0)*gconst2*x7494);
IkReal x7501=((1.0)*gconst1*x7495);
evalcond[0]=(((r22*x7495))+(((-1.0)*r20*x7500))+((r21*x7498)));
evalcond[1]=(cj4+((r11*x7498))+((r12*x7495))+(((-1.0)*r10*x7500)));
evalcond[2]=((((-1.0)*sj4))+(((-1.0)*r00*x7500))+((r01*x7498))+((r02*x7495)));
evalcond[3]=((((-1.0)*cj5*sj6))+(((-1.0)*cj6*x7496))+((r22*x7494))+(((-1.0)*r21*x7501))+((r20*x7499)));
evalcond[4]=(((cj4*x7497))+(((-1.0)*r01*x7501))+((r00*x7499))+((r02*x7494))+(((-1.0)*cj4*sj6*x7496)));
evalcond[5]=(((r12*x7494))+((r10*x7499))+(((-1.0)*sj4*sj6*x7496))+((sj4*x7497))+(((-1.0)*r11*x7501)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x7502=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x7502.valid){
continue;
}
CheckValue<IkReal> x7503 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*gconst2*r20))+((cj4*gconst1*r21)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7503.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7502.value)))+(x7503.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x7504=IKcos(j8);
IkReal x7505=IKsin(j8);
IkReal x7506=((1.0)*sj5);
IkReal x7507=(cj5*cj6);
IkReal x7508=(gconst1*x7504);
IkReal x7509=(gconst2*x7505);
IkReal x7510=((1.0)*gconst2*x7504);
IkReal x7511=((1.0)*gconst1*x7505);
evalcond[0]=((((-1.0)*r20*x7510))+((r22*x7505))+((r21*x7508)));
evalcond[1]=((((-1.0)*r10*x7510))+((r12*x7505))+cj4+((r11*x7508)));
evalcond[2]=((((-1.0)*sj4))+(((-1.0)*r00*x7510))+((r02*x7505))+((r01*x7508)));
evalcond[3]=((((-1.0)*cj5*sj6))+((r20*x7509))+(((-1.0)*cj6*x7506))+(((-1.0)*r21*x7511))+((r22*x7504)));
evalcond[4]=(((r00*x7509))+(((-1.0)*r01*x7511))+((r02*x7504))+(((-1.0)*cj4*sj6*x7506))+((cj4*x7507)));
evalcond[5]=(((r12*x7504))+(((-1.0)*sj4*sj6*x7506))+((r10*x7509))+(((-1.0)*r11*x7511))+((sj4*x7507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x7512=((-1.0)*r20);
IkReal x7513=x7224;
CheckValue<IkReal> x7515 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7512),IKFAST_ATAN2_MAGTHRESH);
if(!x7515.valid){
continue;
}
IkReal x7514=((-1.0)*(x7515.value));
sj9=gconst1;
cj9=gconst2;
j9=x7514;
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
IkReal gconst0=x7514;
IkReal gconst1=(r21*x7513);
IkReal gconst2=(x7512*x7513);
j8eval[0]=cj4;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
IkReal x7516=((-1.0)*r20);
IkReal x7517=x7224;
CheckValue<IkReal> x7519 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7516),IKFAST_ATAN2_MAGTHRESH);
if(!x7519.valid){
continue;
}
IkReal x7518=((-1.0)*(x7519.value));
sj9=gconst1;
cj9=gconst2;
j9=x7518;
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
IkReal gconst0=x7518;
IkReal gconst1=(r21*x7517);
IkReal gconst2=(x7516*x7517);
j8eval[0]=sj4;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x7520=((-1.0)*r20);
IkReal x7521=x7224;
CheckValue<IkReal> x7523 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7520),IKFAST_ATAN2_MAGTHRESH);
if(!x7523.valid){
continue;
}
IkReal x7522=((-1.0)*(x7523.value));
sj9=gconst1;
cj9=gconst2;
j9=x7522;
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
IkReal gconst0=x7522;
IkReal gconst1=(r21*x7521);
IkReal gconst2=(x7520*x7521);
IkReal x7524=((1.0)*(r22*r22));
CheckValue<IkReal> x7528=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7524))),-1);
if(!x7528.valid){
continue;
}
IkReal x7525=x7528.value;
IkReal x7526=((1.0)*x7525);
IkReal x7527=((((-1.0)*x7526*(r20*r20*r20*r20)))+(((-2.0)*x7525*(r20*r20)*(r21*r21)))+(((-1.0)*x7526*(r21*r21*r21*r21)))+(((-1.0)*x7524)));
j8eval[0]=x7527;
j8eval[1]=IKsign(x7527);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x7529=((-1.0)*r20);
IkReal x7530=x7224;
CheckValue<IkReal> x7532 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7529),IKFAST_ATAN2_MAGTHRESH);
if(!x7532.valid){
continue;
}
IkReal x7531=((-1.0)*(x7532.value));
sj9=gconst1;
cj9=gconst2;
j9=x7531;
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
sj4=0;
cj4=1.0;
j4=0;
IkReal gconst0=x7531;
IkReal gconst1=(r21*x7530);
IkReal gconst2=(x7529*x7530);
j8eval[0]=1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[4];
IkReal x7533=((-1.0)*r20);
IkReal x7534=x7224;
CheckValue<IkReal> x7536 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7533),IKFAST_ATAN2_MAGTHRESH);
if(!x7536.valid){
continue;
}
IkReal x7535=((-1.0)*(x7536.value));
sj9=gconst1;
cj9=gconst2;
j9=x7535;
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
sj4=0;
cj4=1.0;
j4=0;
IkReal gconst0=x7535;
IkReal gconst1=(r21*x7534);
IkReal gconst2=(x7533*x7534);
IkReal x7537=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x7541=IKPowWithIntegerCheck(x7537,-1);
if(!x7541.valid){
continue;
}
IkReal x7538=x7541.value;
IkReal x7539=((1.0)*x7538);
IkReal x7540=((((-1.0)*x7539*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x7538))+(((-1.0)*(r12*r12)))+(((-1.0)*x7539*(r10*r10)*(r20*r20))));
j8eval[0]=x7540;
j8eval[1]=IKsign(x7540);
j8eval[2]=r12;
j8eval[3]=x7537;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x7542=((-1.0)*r20);
IkReal x7543=x7224;
CheckValue<IkReal> x7545 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7542),IKFAST_ATAN2_MAGTHRESH);
if(!x7545.valid){
continue;
}
IkReal x7544=((-1.0)*(x7545.value));
sj9=gconst1;
cj9=gconst2;
j9=x7544;
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
sj4=0;
cj4=1.0;
j4=0;
IkReal gconst0=x7544;
IkReal gconst1=(r21*x7543);
IkReal gconst2=(x7542*x7543);
IkReal x7546=((1.0)*(r22*r22));
CheckValue<IkReal> x7550=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7546))),-1);
if(!x7550.valid){
continue;
}
IkReal x7547=x7550.value;
IkReal x7548=((1.0)*x7547);
IkReal x7549=((((-2.0)*x7547*(r20*r20)*(r21*r21)))+(((-1.0)*x7548*(r20*r20*r20*r20)))+(((-1.0)*x7546))+(((-1.0)*x7548*(r21*r21*r21*r21))));
j8eval[0]=x7549;
j8eval[1]=IKsign(x7549);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x7551=(cj6*sj5);
IkReal x7552=(cj5*sj6);
IkReal x7553=(gconst2*r20);
IkReal x7554=(gconst1*r21);
CheckValue<IkReal> x7555=IKPowWithIntegerCheck(IKsign(((((2.0)*x7553*x7554))+(((-1.0)*(x7553*x7553)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x7554*x7554))))),-1);
if(!x7555.valid){
continue;
}
CheckValue<IkReal> x7556 = IKatan2WithCheck(IkReal((((x7551*x7553))+(((-1.0)*x7551*x7554))+((x7552*x7553))+(((-1.0)*x7552*x7554)))),IkReal((((r22*x7552))+((r22*x7551)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7556.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7555.value)))+(x7556.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x7557=IKcos(j8);
IkReal x7558=IKsin(j8);
IkReal x7559=((1.0)*gconst2);
IkReal x7560=(gconst1*r11);
IkReal x7561=((1.0)*sj5);
IkReal x7562=((1.0)*x7557);
IkReal x7563=(gconst1*x7557);
IkReal x7564=(gconst1*x7558);
evalcond[0]=(((r21*x7563))+((r22*x7558))+(((-1.0)*r20*x7557*x7559)));
evalcond[1]=(((r02*x7558))+((r01*x7563))+(((-1.0)*r00*x7557*x7559)));
evalcond[2]=((1.0)+((x7557*x7560))+((r12*x7558))+(((-1.0)*r10*x7557*x7559)));
evalcond[3]=((((-1.0)*r10*x7558*x7559))+(((-1.0)*r12*x7562))+((x7558*x7560)));
evalcond[4]=((((-1.0)*sj6*x7561))+(((-1.0)*r02*x7562))+(((-1.0)*r00*x7558*x7559))+((cj5*cj6))+((r01*x7564)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*r22*x7562))+(((-1.0)*r20*x7558*x7559))+((r21*x7564))+(((-1.0)*cj6*x7561)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x7565=(gconst1*r11);
IkReal x7566=(gconst2*r10);
CheckValue<IkReal> x7567 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x7566))+x7565)),IKFAST_ATAN2_MAGTHRESH);
if(!x7567.valid){
continue;
}
CheckValue<IkReal> x7568=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x7565*x7565)))+(((2.0)*x7565*x7566))+(((-1.0)*(x7566*x7566)))+(((-1.0)*(r12*r12))))),-1);
if(!x7568.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x7567.value)+(((1.5707963267949)*(x7568.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x7569=IKcos(j8);
IkReal x7570=IKsin(j8);
IkReal x7571=((1.0)*gconst2);
IkReal x7572=(gconst1*r11);
IkReal x7573=((1.0)*sj5);
IkReal x7574=((1.0)*x7569);
IkReal x7575=(gconst1*x7569);
IkReal x7576=(gconst1*x7570);
evalcond[0]=((((-1.0)*r20*x7569*x7571))+((r22*x7570))+((r21*x7575)));
evalcond[1]=((((-1.0)*r00*x7569*x7571))+((r01*x7575))+((r02*x7570)));
evalcond[2]=((1.0)+(((-1.0)*r10*x7569*x7571))+((r12*x7570))+((x7569*x7572)));
evalcond[3]=(((x7570*x7572))+(((-1.0)*r12*x7574))+(((-1.0)*r10*x7570*x7571)));
evalcond[4]=(((r01*x7576))+(((-1.0)*sj6*x7573))+(((-1.0)*r02*x7574))+((cj5*cj6))+(((-1.0)*r00*x7570*x7571)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*cj6*x7573))+(((-1.0)*r20*x7570*x7571))+(((-1.0)*r22*x7574))+((r21*x7576)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x7577=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x7577.valid){
continue;
}
CheckValue<IkReal> x7578 = IKatan2WithCheck(IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7578.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7577.value)))+(x7578.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x7579=IKcos(j8);
IkReal x7580=IKsin(j8);
IkReal x7581=((1.0)*gconst2);
IkReal x7582=(gconst1*r11);
IkReal x7583=((1.0)*sj5);
IkReal x7584=((1.0)*x7579);
IkReal x7585=(gconst1*x7579);
IkReal x7586=(gconst1*x7580);
evalcond[0]=((((-1.0)*r20*x7579*x7581))+((r22*x7580))+((r21*x7585)));
evalcond[1]=(((r02*x7580))+(((-1.0)*r00*x7579*x7581))+((r01*x7585)));
evalcond[2]=((1.0)+((r12*x7580))+((x7579*x7582))+(((-1.0)*r10*x7579*x7581)));
evalcond[3]=((((-1.0)*r10*x7580*x7581))+(((-1.0)*r12*x7584))+((x7580*x7582)));
evalcond[4]=((((-1.0)*sj6*x7583))+(((-1.0)*r02*x7584))+((cj5*cj6))+(((-1.0)*r00*x7580*x7581))+((r01*x7586)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*r22*x7584))+(((-1.0)*cj6*x7583))+((r21*x7586))+(((-1.0)*r20*x7580*x7581)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x7587=((-1.0)*r20);
IkReal x7588=x7224;
CheckValue<IkReal> x7590 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7587),IKFAST_ATAN2_MAGTHRESH);
if(!x7590.valid){
continue;
}
IkReal x7589=((-1.0)*(x7590.value));
sj9=gconst1;
cj9=gconst2;
j9=x7589;
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal gconst0=x7589;
IkReal gconst1=(r21*x7588);
IkReal gconst2=(x7587*x7588);
j8eval[0]=1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x7591=((-1.0)*r20);
IkReal x7592=x7224;
CheckValue<IkReal> x7594 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7591),IKFAST_ATAN2_MAGTHRESH);
if(!x7594.valid){
continue;
}
IkReal x7593=((-1.0)*(x7594.value));
sj9=gconst1;
cj9=gconst2;
j9=x7593;
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal gconst0=x7593;
IkReal gconst1=(r21*x7592);
IkReal gconst2=(x7591*x7592);
j8eval[0]=r12;
j8eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x7595=((-1.0)*r20);
IkReal x7596=x7224;
CheckValue<IkReal> x7598 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7595),IKFAST_ATAN2_MAGTHRESH);
if(!x7598.valid){
continue;
}
IkReal x7597=((-1.0)*(x7598.value));
sj9=gconst1;
cj9=gconst2;
j9=x7597;
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal gconst0=x7597;
IkReal gconst1=(r21*x7596);
IkReal gconst2=(x7595*x7596);
IkReal x7599=((1.0)*(r22*r22));
CheckValue<IkReal> x7603=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7599))),-1);
if(!x7603.valid){
continue;
}
IkReal x7600=x7603.value;
IkReal x7601=((1.0)*x7600);
IkReal x7602=((((-2.0)*x7600*(r20*r20)*(r21*r21)))+(((-1.0)*x7601*(r20*r20*r20*r20)))+(((-1.0)*x7599))+(((-1.0)*x7601*(r21*r21*r21*r21))));
j8eval[0]=x7602;
j8eval[1]=IKsign(x7602);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x7604=(cj6*sj5);
IkReal x7605=(cj5*sj6);
IkReal x7606=(gconst2*r20);
IkReal x7607=(gconst1*r21);
CheckValue<IkReal> x7608=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x7606*x7606)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x7607*x7607)))+(((2.0)*x7606*x7607)))),-1);
if(!x7608.valid){
continue;
}
CheckValue<IkReal> x7609 = IKatan2WithCheck(IkReal((((x7605*x7606))+(((-1.0)*x7604*x7607))+(((-1.0)*x7605*x7607))+((x7604*x7606)))),IkReal((((r22*x7605))+((r22*x7604)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7609.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7608.value)))+(x7609.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x7610=IKcos(j8);
IkReal x7611=IKsin(j8);
IkReal x7612=((1.0)*gconst2);
IkReal x7613=(gconst1*r11);
IkReal x7614=((1.0)*cj6);
IkReal x7615=((1.0)*x7610);
IkReal x7616=(gconst1*x7610);
IkReal x7617=(gconst1*x7611);
evalcond[0]=(((r21*x7616))+(((-1.0)*r20*x7610*x7612))+((r22*x7611)));
evalcond[1]=(((r01*x7616))+(((-1.0)*r00*x7610*x7612))+((r02*x7611)));
evalcond[2]=((-1.0)+((r12*x7611))+(((-1.0)*r10*x7610*x7612))+((x7610*x7613)));
evalcond[3]=((((-1.0)*r12*x7615))+(((-1.0)*r10*x7611*x7612))+((x7611*x7613)));
evalcond[4]=((((-1.0)*r00*x7611*x7612))+((r01*x7617))+(((-1.0)*cj5*x7614))+((sj5*sj6))+(((-1.0)*r02*x7615)));
evalcond[5]=((((-1.0)*cj5*sj6))+((r21*x7617))+(((-1.0)*r22*x7615))+(((-1.0)*sj5*x7614))+(((-1.0)*r20*x7611*x7612)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x7618=(gconst2*r10);
IkReal x7619=(gconst1*r11);
CheckValue<IkReal> x7620=IKPowWithIntegerCheck(IKsign(((x7619*x7619)+(r12*r12)+(x7618*x7618)+(((-2.0)*x7618*x7619)))),-1);
if(!x7620.valid){
continue;
}
CheckValue<IkReal> x7621 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x7618))+x7619)),IKFAST_ATAN2_MAGTHRESH);
if(!x7621.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7620.value)))+(x7621.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x7622=IKcos(j8);
IkReal x7623=IKsin(j8);
IkReal x7624=((1.0)*gconst2);
IkReal x7625=(gconst1*r11);
IkReal x7626=((1.0)*cj6);
IkReal x7627=((1.0)*x7622);
IkReal x7628=(gconst1*x7622);
IkReal x7629=(gconst1*x7623);
evalcond[0]=(((r21*x7628))+(((-1.0)*r20*x7622*x7624))+((r22*x7623)));
evalcond[1]=(((r02*x7623))+((r01*x7628))+(((-1.0)*r00*x7622*x7624)));
evalcond[2]=((-1.0)+(((-1.0)*r10*x7622*x7624))+((x7622*x7625))+((r12*x7623)));
evalcond[3]=((((-1.0)*r12*x7627))+(((-1.0)*r10*x7623*x7624))+((x7623*x7625)));
evalcond[4]=((((-1.0)*r00*x7623*x7624))+((sj5*sj6))+((r01*x7629))+(((-1.0)*cj5*x7626))+(((-1.0)*r02*x7627)));
evalcond[5]=(((r21*x7629))+(((-1.0)*cj5*sj6))+(((-1.0)*sj5*x7626))+(((-1.0)*r22*x7627))+(((-1.0)*r20*x7623*x7624)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x7630=((1.0)*gconst2);
CheckValue<IkReal> x7631=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x7630)))),-1);
if(!x7631.valid){
continue;
}
CheckValue<IkReal> x7632 = IKatan2WithCheck(IkReal((((gconst1*r21))+(((-1.0)*r20*x7630)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7632.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7631.value)))+(x7632.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x7633=IKcos(j8);
IkReal x7634=IKsin(j8);
IkReal x7635=((1.0)*gconst2);
IkReal x7636=(gconst1*r11);
IkReal x7637=((1.0)*cj6);
IkReal x7638=((1.0)*x7633);
IkReal x7639=(gconst1*x7633);
IkReal x7640=(gconst1*x7634);
evalcond[0]=(((r21*x7639))+((r22*x7634))+(((-1.0)*r20*x7633*x7635)));
evalcond[1]=(((r01*x7639))+(((-1.0)*r00*x7633*x7635))+((r02*x7634)));
evalcond[2]=((-1.0)+((x7633*x7636))+((r12*x7634))+(((-1.0)*r10*x7633*x7635)));
evalcond[3]=(((x7634*x7636))+(((-1.0)*r10*x7634*x7635))+(((-1.0)*r12*x7638)));
evalcond[4]=(((sj5*sj6))+(((-1.0)*r00*x7634*x7635))+(((-1.0)*r02*x7638))+((r01*x7640))+(((-1.0)*cj5*x7637)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*r22*x7638))+((r21*x7640))+(((-1.0)*sj5*x7637))+(((-1.0)*r20*x7634*x7635)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x7641=((-1.0)*r20);
IkReal x7642=x7224;
CheckValue<IkReal> x7644 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7641),IKFAST_ATAN2_MAGTHRESH);
if(!x7644.valid){
continue;
}
IkReal x7643=((-1.0)*(x7644.value));
sj9=gconst1;
cj9=gconst2;
j9=x7643;
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal gconst0=x7643;
IkReal gconst1=(r21*x7642);
IkReal gconst2=(x7641*x7642);
j8eval[0]=1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x7645=((-1.0)*r20);
IkReal x7646=x7224;
CheckValue<IkReal> x7648 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7645),IKFAST_ATAN2_MAGTHRESH);
if(!x7648.valid){
continue;
}
IkReal x7647=((-1.0)*(x7648.value));
sj9=gconst1;
cj9=gconst2;
j9=x7647;
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal gconst0=x7647;
IkReal gconst1=(r21*x7646);
IkReal gconst2=(x7645*x7646);
j8eval[0]=r02;
j8eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x7649=((-1.0)*r20);
IkReal x7650=x7224;
CheckValue<IkReal> x7652 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7649),IKFAST_ATAN2_MAGTHRESH);
if(!x7652.valid){
continue;
}
IkReal x7651=((-1.0)*(x7652.value));
sj9=gconst1;
cj9=gconst2;
j9=x7651;
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal gconst0=x7651;
IkReal gconst1=(r21*x7650);
IkReal gconst2=(x7649*x7650);
IkReal x7653=((1.0)*(r22*r22));
CheckValue<IkReal> x7657=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7653))),-1);
if(!x7657.valid){
continue;
}
IkReal x7654=x7657.value;
IkReal x7655=((1.0)*x7654);
IkReal x7656=((((-2.0)*x7654*(r20*r20)*(r21*r21)))+(((-1.0)*x7655*(r21*r21*r21*r21)))+(((-1.0)*x7655*(r20*r20*r20*r20)))+(((-1.0)*x7653)));
j8eval[0]=x7656;
j8eval[1]=IKsign(x7656);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x7658=(cj6*sj5);
IkReal x7659=(cj5*sj6);
IkReal x7660=(gconst2*r20);
IkReal x7661=(gconst1*r21);
CheckValue<IkReal> x7662=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x7660*x7660)))+(((2.0)*x7660*x7661))+(((-1.0)*(r22*r22)))+(((-1.0)*(x7661*x7661))))),-1);
if(!x7662.valid){
continue;
}
CheckValue<IkReal> x7663 = IKatan2WithCheck(IkReal(((((-1.0)*x7659*x7661))+((x7658*x7660))+((x7659*x7660))+(((-1.0)*x7658*x7661)))),IkReal((((r22*x7658))+((r22*x7659)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7663.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7662.value)))+(x7663.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x7664=IKcos(j8);
IkReal x7665=IKsin(j8);
IkReal x7666=((1.0)*gconst2);
IkReal x7667=(gconst1*r11);
IkReal x7668=((1.0)*sj5);
IkReal x7669=((1.0)*x7664);
IkReal x7670=(gconst1*x7664);
IkReal x7671=(gconst1*x7665);
evalcond[0]=(((r21*x7670))+((r22*x7665))+(((-1.0)*r20*x7664*x7666)));
evalcond[1]=(((r12*x7665))+((x7664*x7667))+(((-1.0)*r10*x7664*x7666)));
evalcond[2]=((-1.0)+(((-1.0)*r00*x7664*x7666))+((r01*x7670))+((r02*x7665)));
evalcond[3]=((((-1.0)*r02*x7669))+((r01*x7671))+(((-1.0)*r00*x7665*x7666)));
evalcond[4]=((((-1.0)*r12*x7669))+((x7665*x7667))+(((-1.0)*sj6*x7668))+((cj5*cj6))+(((-1.0)*r10*x7665*x7666)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*cj6*x7668))+(((-1.0)*r22*x7669))+((r21*x7671))+(((-1.0)*r20*x7665*x7666)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x7672=(gconst1*r01);
IkReal x7673=(gconst2*r00);
CheckValue<IkReal> x7674 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x7673))+x7672)),IKFAST_ATAN2_MAGTHRESH);
if(!x7674.valid){
continue;
}
CheckValue<IkReal> x7675=IKPowWithIntegerCheck(IKsign(((x7672*x7672)+(x7673*x7673)+(r02*r02)+(((-2.0)*x7672*x7673)))),-1);
if(!x7675.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x7674.value)+(((1.5707963267949)*(x7675.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x7676=IKcos(j8);
IkReal x7677=IKsin(j8);
IkReal x7678=((1.0)*gconst2);
IkReal x7679=(gconst1*r11);
IkReal x7680=((1.0)*sj5);
IkReal x7681=((1.0)*x7676);
IkReal x7682=(gconst1*x7676);
IkReal x7683=(gconst1*x7677);
evalcond[0]=(((r22*x7677))+(((-1.0)*r20*x7676*x7678))+((r21*x7682)));
evalcond[1]=(((r12*x7677))+(((-1.0)*r10*x7676*x7678))+((x7676*x7679)));
evalcond[2]=((-1.0)+(((-1.0)*r00*x7676*x7678))+((r02*x7677))+((r01*x7682)));
evalcond[3]=(((r01*x7683))+(((-1.0)*r00*x7677*x7678))+(((-1.0)*r02*x7681)));
evalcond[4]=((((-1.0)*sj6*x7680))+(((-1.0)*r12*x7681))+((cj5*cj6))+(((-1.0)*r10*x7677*x7678))+((x7677*x7679)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*r20*x7677*x7678))+(((-1.0)*r22*x7681))+(((-1.0)*cj6*x7680))+((r21*x7683)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x7684 = IKatan2WithCheck(IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7684.valid){
continue;
}
CheckValue<IkReal> x7685=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x7685.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x7684.value)+(((1.5707963267949)*(x7685.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x7686=IKcos(j8);
IkReal x7687=IKsin(j8);
IkReal x7688=((1.0)*gconst2);
IkReal x7689=(gconst1*r11);
IkReal x7690=((1.0)*sj5);
IkReal x7691=((1.0)*x7686);
IkReal x7692=(gconst1*x7686);
IkReal x7693=(gconst1*x7687);
evalcond[0]=((((-1.0)*r20*x7686*x7688))+((r21*x7692))+((r22*x7687)));
evalcond[1]=(((x7686*x7689))+((r12*x7687))+(((-1.0)*r10*x7686*x7688)));
evalcond[2]=((-1.0)+(((-1.0)*r00*x7686*x7688))+((r01*x7692))+((r02*x7687)));
evalcond[3]=((((-1.0)*r02*x7691))+(((-1.0)*r00*x7687*x7688))+((r01*x7693)));
evalcond[4]=(((x7687*x7689))+(((-1.0)*r10*x7687*x7688))+(((-1.0)*sj6*x7690))+(((-1.0)*r12*x7691))+((cj5*cj6)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*cj6*x7690))+(((-1.0)*r22*x7691))+((r21*x7693))+(((-1.0)*r20*x7687*x7688)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x7694=((-1.0)*r20);
IkReal x7695=x7224;
CheckValue<IkReal> x7697 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7694),IKFAST_ATAN2_MAGTHRESH);
if(!x7697.valid){
continue;
}
IkReal x7696=((-1.0)*(x7697.value));
sj9=gconst1;
cj9=gconst2;
j9=x7696;
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal gconst0=x7696;
IkReal gconst1=(r21*x7695);
IkReal gconst2=(x7694*x7695);
j8eval[0]=1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[4];
IkReal x7698=((-1.0)*r20);
IkReal x7699=x7224;
CheckValue<IkReal> x7701 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7698),IKFAST_ATAN2_MAGTHRESH);
if(!x7701.valid){
continue;
}
IkReal x7700=((-1.0)*(x7701.value));
sj9=gconst1;
cj9=gconst2;
j9=x7700;
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal gconst0=x7700;
IkReal gconst1=(r21*x7699);
IkReal gconst2=(x7698*x7699);
IkReal x7702=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x7706=IKPowWithIntegerCheck(x7702,-1);
if(!x7706.valid){
continue;
}
IkReal x7703=x7706.value;
IkReal x7704=((1.0)*x7703);
IkReal x7705=((((-2.0)*r00*r01*r20*r21*x7703))+(((-1.0)*x7704*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-1.0)*x7704*(r00*r00)*(r20*r20))));
j8eval[0]=x7705;
j8eval[1]=IKsign(x7705);
j8eval[2]=r02;
j8eval[3]=x7702;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x7707=((-1.0)*r20);
IkReal x7708=x7224;
CheckValue<IkReal> x7710 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7707),IKFAST_ATAN2_MAGTHRESH);
if(!x7710.valid){
continue;
}
IkReal x7709=((-1.0)*(x7710.value));
sj9=gconst1;
cj9=gconst2;
j9=x7709;
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal gconst0=x7709;
IkReal gconst1=(r21*x7708);
IkReal gconst2=(x7707*x7708);
IkReal x7711=((1.0)*(r22*r22));
CheckValue<IkReal> x7715=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7711))),-1);
if(!x7715.valid){
continue;
}
IkReal x7712=x7715.value;
IkReal x7713=((1.0)*x7712);
IkReal x7714=((((-1.0)*x7711))+(((-1.0)*x7713*(r20*r20*r20*r20)))+(((-1.0)*x7713*(r21*r21*r21*r21)))+(((-2.0)*x7712*(r20*r20)*(r21*r21))));
j8eval[0]=x7714;
j8eval[1]=IKsign(x7714);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x7716=(cj6*sj5);
IkReal x7717=(cj5*sj6);
IkReal x7718=(gconst2*r20);
IkReal x7719=(gconst1*r21);
CheckValue<IkReal> x7720 = IKatan2WithCheck(IkReal(((((-1.0)*x7716*x7719))+(((-1.0)*x7717*x7719))+((x7716*x7718))+((x7717*x7718)))),IkReal((((r22*x7717))+((r22*x7716)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7720.valid){
continue;
}
CheckValue<IkReal> x7721=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x7719*x7719)))+(((2.0)*x7718*x7719))+(((-1.0)*(r22*r22)))+(((-1.0)*(x7718*x7718))))),-1);
if(!x7721.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x7720.value)+(((1.5707963267949)*(x7721.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x7722=IKcos(j8);
IkReal x7723=IKsin(j8);
IkReal x7724=((1.0)*gconst2);
IkReal x7725=(gconst1*r11);
IkReal x7726=((1.0)*cj6);
IkReal x7727=((1.0)*x7722);
IkReal x7728=(gconst1*x7722);
IkReal x7729=(gconst1*x7723);
evalcond[0]=(((r22*x7723))+((r21*x7728))+(((-1.0)*r20*x7722*x7724)));
evalcond[1]=(((x7722*x7725))+((r12*x7723))+(((-1.0)*r10*x7722*x7724)));
evalcond[2]=((1.0)+(((-1.0)*r00*x7722*x7724))+((r01*x7728))+((r02*x7723)));
evalcond[3]=((((-1.0)*r00*x7723*x7724))+((r01*x7729))+(((-1.0)*r02*x7727)));
evalcond[4]=(((sj5*sj6))+((x7723*x7725))+(((-1.0)*cj5*x7726))+(((-1.0)*r10*x7723*x7724))+(((-1.0)*r12*x7727)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*r20*x7723*x7724))+((r21*x7729))+(((-1.0)*sj5*x7726))+(((-1.0)*r22*x7727)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x7730=(gconst1*r01);
IkReal x7731=(gconst2*r00);
CheckValue<IkReal> x7732 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x7731))+x7730)),IKFAST_ATAN2_MAGTHRESH);
if(!x7732.valid){
continue;
}
CheckValue<IkReal> x7733=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x7730*x7730)))+(((2.0)*x7730*x7731))+(((-1.0)*(x7731*x7731))))),-1);
if(!x7733.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x7732.value)+(((1.5707963267949)*(x7733.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x7734=IKcos(j8);
IkReal x7735=IKsin(j8);
IkReal x7736=((1.0)*gconst2);
IkReal x7737=(gconst1*r11);
IkReal x7738=((1.0)*cj6);
IkReal x7739=((1.0)*x7734);
IkReal x7740=(gconst1*x7734);
IkReal x7741=(gconst1*x7735);
evalcond[0]=((((-1.0)*r20*x7734*x7736))+((r22*x7735))+((r21*x7740)));
evalcond[1]=(((r12*x7735))+(((-1.0)*r10*x7734*x7736))+((x7734*x7737)));
evalcond[2]=((1.0)+((r01*x7740))+((r02*x7735))+(((-1.0)*r00*x7734*x7736)));
evalcond[3]=(((r01*x7741))+(((-1.0)*r00*x7735*x7736))+(((-1.0)*r02*x7739)));
evalcond[4]=(((sj5*sj6))+(((-1.0)*cj5*x7738))+(((-1.0)*r12*x7739))+(((-1.0)*r10*x7735*x7736))+((x7735*x7737)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*sj5*x7738))+(((-1.0)*r22*x7739))+(((-1.0)*r20*x7735*x7736))+((r21*x7741)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x7742=((1.0)*gconst2);
CheckValue<IkReal> x7743 = IKatan2WithCheck(IkReal((((gconst1*r21))+(((-1.0)*r20*x7742)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7743.valid){
continue;
}
CheckValue<IkReal> x7744=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x7742)))),-1);
if(!x7744.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x7743.value)+(((1.5707963267949)*(x7744.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x7745=IKcos(j8);
IkReal x7746=IKsin(j8);
IkReal x7747=((1.0)*gconst2);
IkReal x7748=(gconst1*r11);
IkReal x7749=((1.0)*cj6);
IkReal x7750=((1.0)*x7745);
IkReal x7751=(gconst1*x7745);
IkReal x7752=(gconst1*x7746);
evalcond[0]=((((-1.0)*r20*x7745*x7747))+((r21*x7751))+((r22*x7746)));
evalcond[1]=(((r12*x7746))+((x7745*x7748))+(((-1.0)*r10*x7745*x7747)));
evalcond[2]=((1.0)+((r01*x7751))+((r02*x7746))+(((-1.0)*r00*x7745*x7747)));
evalcond[3]=(((r01*x7752))+(((-1.0)*r00*x7746*x7747))+(((-1.0)*r02*x7750)));
evalcond[4]=(((sj5*sj6))+(((-1.0)*r10*x7746*x7747))+(((-1.0)*r12*x7750))+((x7746*x7748))+(((-1.0)*cj5*x7749)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*r22*x7750))+(((-1.0)*sj5*x7749))+(((-1.0)*r20*x7746*x7747))+((r21*x7752)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x7753=((-1.0)*r20);
IkReal x7754=((-1.0)*px);
CheckValue<IkReal> x7756 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7753),IKFAST_ATAN2_MAGTHRESH);
if(!x7756.valid){
continue;
}
IkReal x7755=((-1.0)*(x7756.value));
sj9=gconst1;
cj9=gconst2;
j9=x7755;
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x7754);
rxp1_1=(px*r21);
rxp1_2=(r11*x7754);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x7755;
IkReal gconst1=r21;
IkReal gconst2=x7753;
j8eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x7758=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x7758.valid){
continue;
}
IkReal x7757=x7758.value;
sj8array[0]=(((cj5*sj6*x7757))+((cj6*sj5*x7757)));
if( sj8array[0] >= -1-IKFAST_SINCOS_THRESH && sj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKasin(sj8array[0]);
    cj8array[0] = IKcos(j8array[0]);
    sj8array[1] = sj8array[0];
    j8array[1] = j8array[0] > 0 ? (IKPI-j8array[0]) : (-IKPI-j8array[0]);
    cj8array[1] = -cj8array[0];
}
else if( isnan(sj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[3];
IkReal x7759=IKcos(j8);
IkReal x7760=(gconst1*x7759);
IkReal x7761=((1.0)*gconst2*x7759);
evalcond[0]=((-1.0)*r02*x7759);
evalcond[1]=((((-1.0)*r20*x7761))+((r21*x7760)));
evalcond[2]=((((-1.0)*r10*x7761))+((r11*x7760)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x7762=(cj6*sj5);
IkReal x7763=(cj5*sj6);
IkReal x7764=(gconst2*r20);
IkReal x7765=(gconst1*r21);
CheckValue<IkReal> x7766=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x7764*x7764)))+(((-1.0)*(x7765*x7765)))+(((2.0)*x7764*x7765))+(((-1.0)*(r22*r22))))),-1);
if(!x7766.valid){
continue;
}
CheckValue<IkReal> x7767 = IKatan2WithCheck(IkReal(((((-1.0)*x7763*x7765))+((x7762*x7764))+((x7763*x7764))+(((-1.0)*x7762*x7765)))),IkReal((((r22*x7762))+((r22*x7763)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7767.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7766.value)))+(x7767.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x7768=IKcos(j8);
IkReal x7769=IKsin(j8);
IkReal x7770=((1.0)*gconst2);
IkReal x7771=(gconst1*r11);
IkReal x7772=((1.0)*sj5);
IkReal x7773=(cj5*cj6);
IkReal x7774=((1.0)*x7768);
IkReal x7775=(gconst1*x7768);
IkReal x7776=(gconst1*x7769);
evalcond[0]=(((r22*x7769))+(((-1.0)*r20*x7768*x7770))+((r21*x7775)));
evalcond[1]=(cj4+((x7768*x7771))+(((-1.0)*r10*x7768*x7770))+((r12*x7769)));
evalcond[2]=((((-1.0)*sj4))+(((-1.0)*r00*x7768*x7770))+((r02*x7769))+((r01*x7775)));
evalcond[3]=((((-1.0)*cj5*sj6))+(((-1.0)*r22*x7774))+(((-1.0)*cj6*x7772))+(((-1.0)*r20*x7769*x7770))+((r21*x7776)));
evalcond[4]=((((-1.0)*r02*x7774))+((cj4*x7773))+(((-1.0)*cj4*sj6*x7772))+(((-1.0)*r00*x7769*x7770))+((r01*x7776)));
evalcond[5]=(((x7769*x7771))+(((-1.0)*r10*x7769*x7770))+((sj4*x7773))+(((-1.0)*r12*x7774))+(((-1.0)*sj4*sj6*x7772)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x7777=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x7777.valid){
continue;
}
CheckValue<IkReal> x7778 = IKatan2WithCheck(IkReal(((((-1.0)*gconst2*r20*sj4))+((gconst1*r21*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x7778.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7777.value)))+(x7778.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x7779=IKcos(j8);
IkReal x7780=IKsin(j8);
IkReal x7781=((1.0)*gconst2);
IkReal x7782=(gconst1*r11);
IkReal x7783=((1.0)*sj5);
IkReal x7784=(cj5*cj6);
IkReal x7785=((1.0)*x7779);
IkReal x7786=(gconst1*x7779);
IkReal x7787=(gconst1*x7780);
evalcond[0]=(((r22*x7780))+(((-1.0)*r20*x7779*x7781))+((r21*x7786)));
evalcond[1]=(((x7779*x7782))+cj4+(((-1.0)*r10*x7779*x7781))+((r12*x7780)));
evalcond[2]=((((-1.0)*sj4))+((r01*x7786))+(((-1.0)*r00*x7779*x7781))+((r02*x7780)));
evalcond[3]=((((-1.0)*cj5*sj6))+(((-1.0)*r20*x7780*x7781))+(((-1.0)*cj6*x7783))+((r21*x7787))+(((-1.0)*r22*x7785)));
evalcond[4]=(((r01*x7787))+(((-1.0)*r00*x7780*x7781))+(((-1.0)*r02*x7785))+((cj4*x7784))+(((-1.0)*cj4*sj6*x7783)));
evalcond[5]=(((x7780*x7782))+(((-1.0)*r10*x7780*x7781))+((sj4*x7784))+(((-1.0)*r12*x7785))+(((-1.0)*sj4*sj6*x7783)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x7788=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x7788.valid){
continue;
}
CheckValue<IkReal> x7789 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*gconst2*r20))+((cj4*gconst1*r21)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7789.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7788.value)))+(x7789.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x7790=IKcos(j8);
IkReal x7791=IKsin(j8);
IkReal x7792=((1.0)*gconst2);
IkReal x7793=(gconst1*r11);
IkReal x7794=((1.0)*sj5);
IkReal x7795=(cj5*cj6);
IkReal x7796=((1.0)*x7790);
IkReal x7797=(gconst1*x7790);
IkReal x7798=(gconst1*x7791);
evalcond[0]=(((r21*x7797))+((r22*x7791))+(((-1.0)*r20*x7790*x7792)));
evalcond[1]=(cj4+((r12*x7791))+((x7790*x7793))+(((-1.0)*r10*x7790*x7792)));
evalcond[2]=((((-1.0)*sj4))+(((-1.0)*r00*x7790*x7792))+((r02*x7791))+((r01*x7797)));
evalcond[3]=((((-1.0)*cj5*sj6))+(((-1.0)*r22*x7796))+(((-1.0)*cj6*x7794))+((r21*x7798))+(((-1.0)*r20*x7791*x7792)));
evalcond[4]=((((-1.0)*r00*x7791*x7792))+(((-1.0)*cj4*sj6*x7794))+((cj4*x7795))+((r01*x7798))+(((-1.0)*r02*x7796)));
evalcond[5]=((((-1.0)*r10*x7791*x7792))+((sj4*x7795))+(((-1.0)*r12*x7796))+(((-1.0)*sj4*sj6*x7794))+((x7791*x7793)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x7799=((-1.0)*r20);
IkReal x7800=x7224;
CheckValue<IkReal> x7802 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7799),IKFAST_ATAN2_MAGTHRESH);
if(!x7802.valid){
continue;
}
IkReal x7801=((-1.0)*(x7802.value));
sj9=gconst1;
cj9=gconst2;
j9=x7801;
sj4=0;
cj4=1.0;
j4=0;
IkReal gconst0=x7801;
IkReal gconst1=(r21*x7800);
IkReal gconst2=(x7799*x7800);
j8eval[0]=1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
IkReal x7803=((-1.0)*r20);
IkReal x7804=x7224;
CheckValue<IkReal> x7806 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7803),IKFAST_ATAN2_MAGTHRESH);
if(!x7806.valid){
continue;
}
IkReal x7805=((-1.0)*(x7806.value));
sj9=gconst1;
cj9=gconst2;
j9=x7805;
sj4=0;
cj4=1.0;
j4=0;
IkReal gconst0=x7805;
IkReal gconst1=(r21*x7804);
IkReal gconst2=(x7803*x7804);
CheckValue<IkReal> x7814=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x7814.valid){
continue;
}
IkReal x7807=x7814.value;
IkReal x7808=(sj7*x7807);
IkReal x7809=(r11*x7808);
IkReal x7810=(r00*x7808);
IkReal x7811=(r01*x7808);
IkReal x7812=(r10*x7808);
IkReal x7813=(r20*r21*x7808);
j8eval[0]=IKsign((((r02*r12*sj7))+((r01*x7809*(r21*r21)))+((r00*r20*r21*x7809))+((r10*r20*r21*x7811))+((r10*x7810*(r20*r20)))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
IkReal x7815=((-1.0)*r20);
IkReal x7816=x7224;
CheckValue<IkReal> x7818 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7815),IKFAST_ATAN2_MAGTHRESH);
if(!x7818.valid){
continue;
}
IkReal x7817=((-1.0)*(x7818.value));
sj9=gconst1;
cj9=gconst2;
j9=x7817;
sj4=0;
cj4=1.0;
j4=0;
IkReal gconst0=x7817;
IkReal gconst1=(r21*x7816);
IkReal gconst2=(x7815*x7816);
CheckValue<IkReal> x7826=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x7826.valid){
continue;
}
IkReal x7819=x7826.value;
IkReal x7820=(cj7*x7819);
IkReal x7821=(r10*x7820);
IkReal x7822=(r00*x7820);
IkReal x7823=(r01*x7820);
IkReal x7824=(r11*x7820);
IkReal x7825=(r20*r21*x7820);
j8eval[0]=IKsign((((r11*x7823*(r21*r21)))+((r01*r20*r21*x7821))+((cj7*r02*r12))+((r00*x7821*(r20*r20)))+((r11*r20*r21*x7822))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x7827=((-1.0)*r20);
IkReal x7828=x7224;
CheckValue<IkReal> x7830 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7827),IKFAST_ATAN2_MAGTHRESH);
if(!x7830.valid){
continue;
}
IkReal x7829=((-1.0)*(x7830.value));
sj9=gconst1;
cj9=gconst2;
j9=x7829;
sj4=0;
cj4=1.0;
j4=0;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
IkReal gconst0=x7829;
IkReal gconst1=(r21*x7828);
IkReal gconst2=(x7827*x7828);
j8eval[0]=1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[4];
IkReal x7831=((-1.0)*r20);
IkReal x7832=x7224;
CheckValue<IkReal> x7834 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7831),IKFAST_ATAN2_MAGTHRESH);
if(!x7834.valid){
continue;
}
IkReal x7833=((-1.0)*(x7834.value));
sj9=gconst1;
cj9=gconst2;
j9=x7833;
sj4=0;
cj4=1.0;
j4=0;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
IkReal gconst0=x7833;
IkReal gconst1=(r21*x7832);
IkReal gconst2=(x7831*x7832);
IkReal x7835=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x7839=IKPowWithIntegerCheck(x7835,-1);
if(!x7839.valid){
continue;
}
IkReal x7836=x7839.value;
IkReal x7837=((1.0)*x7836);
IkReal x7838=((((-2.0)*r10*r11*r20*r21*x7836))+(((-1.0)*(r12*r12)))+(((-1.0)*x7837*(r10*r10)*(r20*r20)))+(((-1.0)*x7837*(r11*r11)*(r21*r21))));
j8eval[0]=x7838;
j8eval[1]=IKsign(x7838);
j8eval[2]=r12;
j8eval[3]=x7835;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
IkReal x7840=((-1.0)*r20);
IkReal x7841=x7224;
CheckValue<IkReal> x7843 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7840),IKFAST_ATAN2_MAGTHRESH);
if(!x7843.valid){
continue;
}
IkReal x7842=((-1.0)*(x7843.value));
sj9=gconst1;
cj9=gconst2;
j9=x7842;
sj4=0;
cj4=1.0;
j4=0;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
IkReal gconst0=x7842;
IkReal gconst1=(r21*x7841);
IkReal gconst2=(x7840*x7841);
IkReal x7844=r22*r22;
IkReal x7845=(r12*sj5*sj6);
CheckValue<IkReal> x7850=IKPowWithIntegerCheck(((-1.0)+x7844),-1);
if(!x7850.valid){
continue;
}
IkReal x7846=x7850.value;
IkReal x7847=((1.0)*cj5*cj6*r12);
if((((1.0)+(((-1.0)*x7844)))) < -0.00001)
continue;
IkReal x7848=IKsqrt(((1.0)+(((-1.0)*x7844))));
IkReal x7849=(r22*x7846*x7848);
j8eval[0]=((IKabs(((((-1.0)*x7847*x7849))+((x7845*x7849)))))+(IKabs((x7845+(((-1.0)*x7847))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x7851=(gconst1*r11);
IkReal x7852=(sj5*sj6);
IkReal x7853=(gconst2*r10);
IkReal x7854=((1.0)*cj5*cj6);
CheckValue<IkReal> x7855=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x7855.valid){
continue;
}
CheckValue<IkReal> x7856 = IKatan2WithCheck(IkReal((((r12*x7852))+(((-1.0)*r12*x7854)))),IkReal((((cj5*cj6*x7853))+(((-1.0)*x7851*x7854))+((x7851*x7852))+(((-1.0)*x7852*x7853)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7856.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7855.value)))+(x7856.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x7857=IKcos(j8);
IkReal x7858=IKsin(j8);
IkReal x7859=((1.0)*cj6);
IkReal x7860=(gconst1*x7857);
IkReal x7861=(gconst2*x7858);
IkReal x7862=((1.0)*gconst2*x7857);
IkReal x7863=((1.0)*gconst1*x7858);
evalcond[0]=(((r22*x7858))+((r21*x7860))+(((-1.0)*r20*x7862)));
evalcond[1]=(((r02*x7858))+(((-1.0)*r00*x7862))+((r01*x7860)));
evalcond[2]=(((r12*x7857))+(((-1.0)*r11*x7863))+((r10*x7861)));
evalcond[3]=((1.0)+((r12*x7858))+((r11*x7860))+(((-1.0)*r10*x7862)));
evalcond[4]=(((r22*x7857))+((sj5*sj6))+((r20*x7861))+(((-1.0)*cj5*x7859))+(((-1.0)*r21*x7863)));
evalcond[5]=((((-1.0)*cj5*sj6))+((r02*x7857))+(((-1.0)*r01*x7863))+(((-1.0)*sj5*x7859))+((r00*x7861)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x7864=(gconst1*r11);
IkReal x7865=(gconst2*r10);
CheckValue<IkReal> x7866=IKPowWithIntegerCheck(IKsign(((((2.0)*x7864*x7865))+(((-1.0)*(r12*r12)))+(((-1.0)*(x7865*x7865)))+(((-1.0)*(x7864*x7864))))),-1);
if(!x7866.valid){
continue;
}
CheckValue<IkReal> x7867 = IKatan2WithCheck(IkReal(r12),IkReal((x7864+(((-1.0)*x7865)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7867.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7866.value)))+(x7867.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x7868=IKcos(j8);
IkReal x7869=IKsin(j8);
IkReal x7870=((1.0)*cj6);
IkReal x7871=(gconst1*x7868);
IkReal x7872=(gconst2*x7869);
IkReal x7873=((1.0)*gconst2*x7868);
IkReal x7874=((1.0)*gconst1*x7869);
evalcond[0]=(((r22*x7869))+(((-1.0)*r20*x7873))+((r21*x7871)));
evalcond[1]=((((-1.0)*r00*x7873))+((r01*x7871))+((r02*x7869)));
evalcond[2]=(((r10*x7872))+((r12*x7868))+(((-1.0)*r11*x7874)));
evalcond[3]=((1.0)+((r11*x7871))+((r12*x7869))+(((-1.0)*r10*x7873)));
evalcond[4]=(((sj5*sj6))+((r20*x7872))+(((-1.0)*cj5*x7870))+((r22*x7868))+(((-1.0)*r21*x7874)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*sj5*x7870))+(((-1.0)*r01*x7874))+((r00*x7872))+((r02*x7868)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x7875=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x7875.valid){
continue;
}
CheckValue<IkReal> x7876 = IKatan2WithCheck(IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7876.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7875.value)))+(x7876.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x7877=IKcos(j8);
IkReal x7878=IKsin(j8);
IkReal x7879=((1.0)*cj6);
IkReal x7880=(gconst1*x7877);
IkReal x7881=(gconst2*x7878);
IkReal x7882=((1.0)*gconst2*x7877);
IkReal x7883=((1.0)*gconst1*x7878);
evalcond[0]=(((r21*x7880))+((r22*x7878))+(((-1.0)*r20*x7882)));
evalcond[1]=((((-1.0)*r00*x7882))+((r01*x7880))+((r02*x7878)));
evalcond[2]=(((r10*x7881))+((r12*x7877))+(((-1.0)*r11*x7883)));
evalcond[3]=((1.0)+(((-1.0)*r10*x7882))+((r12*x7878))+((r11*x7880)));
evalcond[4]=(((sj5*sj6))+((r20*x7881))+(((-1.0)*cj5*x7879))+(((-1.0)*r21*x7883))+((r22*x7877)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*r01*x7883))+(((-1.0)*sj5*x7879))+((r00*x7881))+((r02*x7877)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x7884=((-1.0)*r20);
IkReal x7885=x7224;
CheckValue<IkReal> x7887 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7884),IKFAST_ATAN2_MAGTHRESH);
if(!x7887.valid){
continue;
}
IkReal x7886=((-1.0)*(x7887.value));
sj9=gconst1;
cj9=gconst2;
j9=x7886;
sj4=0;
cj4=1.0;
j4=0;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
IkReal gconst0=x7886;
IkReal gconst1=(r21*x7885);
IkReal gconst2=(x7884*x7885);
j8eval[0]=1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[4];
IkReal x7888=((-1.0)*r20);
IkReal x7889=x7224;
CheckValue<IkReal> x7891 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7888),IKFAST_ATAN2_MAGTHRESH);
if(!x7891.valid){
continue;
}
IkReal x7890=((-1.0)*(x7891.value));
sj9=gconst1;
cj9=gconst2;
j9=x7890;
sj4=0;
cj4=1.0;
j4=0;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
IkReal gconst0=x7890;
IkReal gconst1=(r21*x7889);
IkReal gconst2=(x7888*x7889);
IkReal x7892=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x7896=IKPowWithIntegerCheck(x7892,-1);
if(!x7896.valid){
continue;
}
IkReal x7893=x7896.value;
IkReal x7894=((1.0)*x7893);
IkReal x7895=((((-2.0)*r10*r11*r20*r21*x7893))+(((-1.0)*x7894*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-1.0)*x7894*(r11*r11)*(r21*r21))));
j8eval[0]=x7895;
j8eval[1]=IKsign(x7895);
j8eval[2]=r12;
j8eval[3]=x7892;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
IkReal x7897=((-1.0)*r20);
IkReal x7898=x7224;
CheckValue<IkReal> x7900 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7897),IKFAST_ATAN2_MAGTHRESH);
if(!x7900.valid){
continue;
}
IkReal x7899=((-1.0)*(x7900.value));
sj9=gconst1;
cj9=gconst2;
j9=x7899;
sj4=0;
cj4=1.0;
j4=0;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
IkReal gconst0=x7899;
IkReal gconst1=(r21*x7898);
IkReal gconst2=(x7897*x7898);
IkReal x7901=r22*r22;
IkReal x7902=((1.0)+(((-1.0)*x7901)));
IkReal x7903=(cj5*r02*sj6);
IkReal x7904=(cj6*r02*sj5);
CheckValue<IkReal> x7911=IKPowWithIntegerCheck(x7902,-1);
if(!x7911.valid){
continue;
}
IkReal x7905=x7911.value;
CheckValue<IkReal> x7912=IKPowWithIntegerCheck(((-1.0)+x7901),-1);
if(!x7912.valid){
continue;
}
IkReal x7906=x7912.value;
IkReal x7907=((1.0)*x7905);
if((x7902) < -0.00001)
continue;
IkReal x7908=IKsqrt(x7902);
IkReal x7909=((1.0)*r22*x7906*x7908);
IkReal x7910=((((-1.0)*(r02*r02)))+(((-1.0)*x7907*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x7905))+(((-1.0)*x7907*(r01*r01)*(r21*r21))));
j8eval[0]=x7910;
j8eval[1]=IKsign(x7910);
j8eval[2]=((IKabs(((((-1.0)*x7904*x7909))+(((-1.0)*x7903*x7909)))))+(IKabs((x7903+x7904))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x7913=(cj5*sj6);
IkReal x7914=(gconst2*r00);
IkReal x7915=(cj6*sj5);
IkReal x7916=((1.0)*gconst1*r01);
CheckValue<IkReal> x7917 = IKatan2WithCheck(IkReal(((((-1.0)*x7915*x7916))+((x7913*x7914))+(((-1.0)*x7913*x7916))+((x7914*x7915)))),IkReal((((r02*x7913))+((r02*x7915)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7917.valid){
continue;
}
CheckValue<IkReal> x7918=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x7914*x7914)))+(((2.0)*gconst1*r01*x7914))+(((-1.0)*(r02*r02)))+(((-1.0)*gconst1*r01*x7916)))),-1);
if(!x7918.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x7917.value)+(((1.5707963267949)*(x7918.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x7919=IKcos(j8);
IkReal x7920=IKsin(j8);
IkReal x7921=((1.0)*gconst2);
IkReal x7922=(gconst1*r11);
IkReal x7923=((1.0)*cj6);
IkReal x7924=((1.0)*x7919);
IkReal x7925=(gconst1*x7919);
IkReal x7926=(gconst1*x7920);
evalcond[0]=(((r22*x7920))+(((-1.0)*r20*x7919*x7921))+((r21*x7925)));
evalcond[1]=(((r02*x7920))+((r01*x7925))+(((-1.0)*r00*x7919*x7921)));
evalcond[2]=((1.0)+((r12*x7920))+((x7919*x7922))+(((-1.0)*r10*x7919*x7921)));
evalcond[3]=(((x7920*x7922))+(((-1.0)*r12*x7924))+(((-1.0)*r10*x7920*x7921)));
evalcond[4]=(((sj5*sj6))+(((-1.0)*r22*x7924))+(((-1.0)*cj5*x7923))+(((-1.0)*r20*x7920*x7921))+((r21*x7926)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*r02*x7924))+(((-1.0)*sj5*x7923))+(((-1.0)*r00*x7920*x7921))+((r01*x7926)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x7927=(gconst1*r11);
IkReal x7928=(gconst2*r10);
CheckValue<IkReal> x7929 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x7928))+x7927)),IKFAST_ATAN2_MAGTHRESH);
if(!x7929.valid){
continue;
}
CheckValue<IkReal> x7930=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x7927*x7927)))+(((-1.0)*(r12*r12)))+(((2.0)*x7927*x7928))+(((-1.0)*(x7928*x7928))))),-1);
if(!x7930.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x7929.value)+(((1.5707963267949)*(x7930.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x7931=IKcos(j8);
IkReal x7932=IKsin(j8);
IkReal x7933=((1.0)*gconst2);
IkReal x7934=(gconst1*r11);
IkReal x7935=((1.0)*cj6);
IkReal x7936=((1.0)*x7931);
IkReal x7937=(gconst1*x7931);
IkReal x7938=(gconst1*x7932);
evalcond[0]=(((r21*x7937))+(((-1.0)*r20*x7931*x7933))+((r22*x7932)));
evalcond[1]=(((r02*x7932))+((r01*x7937))+(((-1.0)*r00*x7931*x7933)));
evalcond[2]=((1.0)+((r12*x7932))+((x7931*x7934))+(((-1.0)*r10*x7931*x7933)));
evalcond[3]=(((x7932*x7934))+(((-1.0)*r10*x7932*x7933))+(((-1.0)*r12*x7936)));
evalcond[4]=(((r21*x7938))+((sj5*sj6))+(((-1.0)*cj5*x7935))+(((-1.0)*r22*x7936))+(((-1.0)*r20*x7932*x7933)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*r02*x7936))+(((-1.0)*r00*x7932*x7933))+(((-1.0)*sj5*x7935))+((r01*x7938)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x7939=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x7939.valid){
continue;
}
CheckValue<IkReal> x7940 = IKatan2WithCheck(IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7940.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7939.value)))+(x7940.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x7941=IKcos(j8);
IkReal x7942=IKsin(j8);
IkReal x7943=((1.0)*gconst2);
IkReal x7944=(gconst1*r11);
IkReal x7945=((1.0)*cj6);
IkReal x7946=((1.0)*x7941);
IkReal x7947=(gconst1*x7941);
IkReal x7948=(gconst1*x7942);
evalcond[0]=(((r21*x7947))+(((-1.0)*r20*x7941*x7943))+((r22*x7942)));
evalcond[1]=(((r02*x7942))+(((-1.0)*r00*x7941*x7943))+((r01*x7947)));
evalcond[2]=((1.0)+((r12*x7942))+(((-1.0)*r10*x7941*x7943))+((x7941*x7944)));
evalcond[3]=((((-1.0)*r12*x7946))+((x7942*x7944))+(((-1.0)*r10*x7942*x7943)));
evalcond[4]=(((r21*x7948))+(((-1.0)*r22*x7946))+((sj5*sj6))+(((-1.0)*cj5*x7945))+(((-1.0)*r20*x7942*x7943)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*r00*x7942*x7943))+(((-1.0)*r02*x7946))+(((-1.0)*sj5*x7945))+((r01*x7948)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[2];
IkReal x7949=((-1.0)*r20);
IkReal x7950=((-1.0)*px);
CheckValue<IkReal> x7952 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7949),IKFAST_ATAN2_MAGTHRESH);
if(!x7952.valid){
continue;
}
IkReal x7951=((-1.0)*(x7952.value));
sj9=gconst1;
cj9=gconst2;
j9=x7951;
sj4=0;
cj4=1.0;
j4=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x7950);
rxp1_1=(px*r21);
rxp1_2=(r11*x7950);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x7951;
IkReal gconst1=r21;
IkReal gconst2=x7949;
IkReal x7953=(r10*r20);
IkReal x7954=((1.0)*sj7);
IkReal x7955=(r11*r21);
j8eval[0]=((((-1.0)*x7954*x7955))+(((-1.0)*x7953*x7954)));
j8eval[1]=(x7955+x7953);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x7956=((-1.0)*r20);
IkReal x7957=((-1.0)*px);
CheckValue<IkReal> x7959 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7956),IKFAST_ATAN2_MAGTHRESH);
if(!x7959.valid){
continue;
}
IkReal x7958=((-1.0)*(x7959.value));
sj9=gconst1;
cj9=gconst2;
j9=x7958;
sj4=0;
cj4=1.0;
j4=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x7957);
rxp1_1=(px*r21);
rxp1_2=(r11*x7957);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x7958;
IkReal gconst1=r21;
IkReal gconst2=x7956;
IkReal x7960=((1.0)*cj7);
IkReal x7961=(r11*r21);
IkReal x7962=(r10*r20);
j8eval[0]=((((-1.0)*x7960*x7961))+(((-1.0)*x7960*x7962)));
j8eval[1]=(x7962+x7961);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
IkReal x7963=((-1.0)*r20);
IkReal x7964=((-1.0)*px);
CheckValue<IkReal> x7966 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7963),IKFAST_ATAN2_MAGTHRESH);
if(!x7966.valid){
continue;
}
IkReal x7965=((-1.0)*(x7966.value));
sj9=gconst1;
cj9=gconst2;
j9=x7965;
sj4=0;
cj4=1.0;
j4=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x7964);
rxp1_1=(px*r21);
rxp1_2=(r11*x7964);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x7965;
IkReal gconst1=r21;
IkReal gconst2=x7963;
IkReal x7967=((1.0)*cj7);
j8eval[0]=((((-1.0)*r11*r21*x7967))+(((-1.0)*r10*r20*x7967)));
j8eval[1]=r02;
j8eval[2]=sj7;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x7968=((1.0)*gconst1);
CheckValue<IkReal> x7969=IKPowWithIntegerCheck(((((-1.0)*cj7*r11*x7968))+((cj7*gconst2*r10))),-1);
if(!x7969.valid){
continue;
}
CheckValue<IkReal> x7970=IKPowWithIntegerCheck(r02,-1);
if(!x7970.valid){
continue;
}
CheckValue<IkReal> x7971=IKPowWithIntegerCheck(sj7,-1);
if(!x7971.valid){
continue;
}
if( IKabs(((x7969.value)*(((((-1.0)*r10*sj7*x7968))+(((-1.0)*gconst2*r11*sj7)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7970.value)*(x7971.value)*((((cj6*sj5))+((cj5*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7969.value)*(((((-1.0)*r10*sj7*x7968))+(((-1.0)*gconst2*r11*sj7))))))+IKsqr(((x7970.value)*(x7971.value)*((((cj6*sj5))+((cj5*sj6))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((x7969.value)*(((((-1.0)*r10*sj7*x7968))+(((-1.0)*gconst2*r11*sj7))))), ((x7970.value)*(x7971.value)*((((cj6*sj5))+((cj5*sj6))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x7972=IKcos(j8);
IkReal x7973=IKsin(j8);
IkReal x7974=((1.0)*cj7);
IkReal x7975=(gconst1*r10);
IkReal x7976=(gconst2*r20);
IkReal x7977=((1.0)*sj5);
IkReal x7978=(gconst2*r11);
IkReal x7979=(cj5*cj6);
IkReal x7980=((1.0)*gconst1);
IkReal x7981=(gconst2*r21);
IkReal x7982=(gconst2*r10);
IkReal x7983=(gconst1*r20);
IkReal x7984=((1.0)*cj5*sj6);
IkReal x7985=(cj6*x7977);
IkReal x7986=((1.0)*x7972);
IkReal x7987=(cj7*x7973);
IkReal x7988=(gconst1*x7972);
IkReal x7989=(sj7*x7973);
IkReal x7990=(r02*x7972);
IkReal x7991=(gconst1*x7973);
IkReal x7992=(x7984+x7985);
evalcond[0]=(r02*x7973);
evalcond[1]=(((r21*x7988))+(((-1.0)*x7976*x7986)));
evalcond[2]=((((-1.0)*sj6*x7977))+x7979+((cj7*x7990)));
evalcond[3]=((1.0)+(((-1.0)*x7982*x7986))+((r11*x7988)));
evalcond[4]=(((sj7*x7990))+(((-1.0)*x7992)));
evalcond[5]=(((x7982*x7987))+(((-1.0)*r11*x7974*x7991))+((sj7*x7978))+((sj7*x7975)));
evalcond[6]=(((x7982*x7989))+(((-1.0)*x7974*x7975))+(((-1.0)*x7974*x7978))+(((-1.0)*r11*x7980*x7989)));
evalcond[7]=(((x7976*x7987))+(((-1.0)*r21*x7974*x7991))+((sj7*x7983))+((sj7*x7981))+(((-1.0)*x7992)));
evalcond[8]=(((x7976*x7989))+(((-1.0)*r21*x7980*x7989))+((sj5*sj6))+(((-1.0)*x7979))+(((-1.0)*x7974*x7983))+(((-1.0)*x7974*x7981)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x7993=(gconst2*r10);
IkReal x7994=((1.0)*gconst1);
CheckValue<IkReal> x7995=IKPowWithIntegerCheck((((cj7*x7993))+(((-1.0)*cj7*r11*x7994))),-1);
if(!x7995.valid){
continue;
}
CheckValue<IkReal> x7996=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*x7993))),-1);
if(!x7996.valid){
continue;
}
if( IKabs(((x7995.value)*(((((-1.0)*gconst2*r11*sj7))+(((-1.0)*r10*sj7*x7994)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x7996.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7995.value)*(((((-1.0)*gconst2*r11*sj7))+(((-1.0)*r10*sj7*x7994))))))+IKsqr(((-1.0)*(x7996.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((x7995.value)*(((((-1.0)*gconst2*r11*sj7))+(((-1.0)*r10*sj7*x7994))))), ((-1.0)*(x7996.value)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x7997=IKcos(j8);
IkReal x7998=IKsin(j8);
IkReal x7999=((1.0)*cj7);
IkReal x8000=(gconst1*r10);
IkReal x8001=(gconst2*r20);
IkReal x8002=((1.0)*sj5);
IkReal x8003=(gconst2*r11);
IkReal x8004=(cj5*cj6);
IkReal x8005=((1.0)*gconst1);
IkReal x8006=(gconst2*r21);
IkReal x8007=(gconst2*r10);
IkReal x8008=(gconst1*r20);
IkReal x8009=((1.0)*cj5*sj6);
IkReal x8010=(cj6*x8002);
IkReal x8011=((1.0)*x7997);
IkReal x8012=(cj7*x7998);
IkReal x8013=(gconst1*x7997);
IkReal x8014=(sj7*x7998);
IkReal x8015=(r02*x7997);
IkReal x8016=(gconst1*x7998);
IkReal x8017=(x8009+x8010);
evalcond[0]=(r02*x7998);
evalcond[1]=((((-1.0)*x8001*x8011))+((r21*x8013)));
evalcond[2]=((((-1.0)*sj6*x8002))+((cj7*x8015))+x8004);
evalcond[3]=((1.0)+((r11*x8013))+(((-1.0)*x8007*x8011)));
evalcond[4]=((((-1.0)*x8017))+((sj7*x8015)));
evalcond[5]=((((-1.0)*r11*x7999*x8016))+((x8007*x8012))+((sj7*x8000))+((sj7*x8003)));
evalcond[6]=((((-1.0)*x7999*x8000))+(((-1.0)*x7999*x8003))+((x8007*x8014))+(((-1.0)*r11*x8005*x8014)));
evalcond[7]=((((-1.0)*x8017))+((x8001*x8012))+(((-1.0)*r21*x7999*x8016))+((sj7*x8006))+((sj7*x8008)));
evalcond[8]=(((sj5*sj6))+((x8001*x8014))+(((-1.0)*x7999*x8006))+(((-1.0)*x7999*x8008))+(((-1.0)*x8004))+(((-1.0)*r21*x8005*x8014)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x8018=(gconst1*r11);
IkReal x8019=(gconst2*r10);
CheckValue<IkReal> x8020=IKPowWithIntegerCheck(((((-1.0)*sj7*x8018))+((sj7*x8019))),-1);
if(!x8020.valid){
continue;
}
CheckValue<IkReal> x8021=IKPowWithIntegerCheck(((((-1.0)*x8019))+x8018),-1);
if(!x8021.valid){
continue;
}
if( IKabs(((x8020.value)*((((cj7*gconst2*r11))+((cj7*gconst1*r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x8021.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x8020.value)*((((cj7*gconst2*r11))+((cj7*gconst1*r10))))))+IKsqr(((-1.0)*(x8021.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((x8020.value)*((((cj7*gconst2*r11))+((cj7*gconst1*r10))))), ((-1.0)*(x8021.value)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x8022=IKcos(j8);
IkReal x8023=IKsin(j8);
IkReal x8024=((1.0)*cj7);
IkReal x8025=(gconst1*r10);
IkReal x8026=(gconst2*r20);
IkReal x8027=((1.0)*sj5);
IkReal x8028=(gconst2*r11);
IkReal x8029=(cj5*cj6);
IkReal x8030=((1.0)*gconst1);
IkReal x8031=(gconst2*r21);
IkReal x8032=(gconst2*r10);
IkReal x8033=(gconst1*r20);
IkReal x8034=((1.0)*cj5*sj6);
IkReal x8035=(cj6*x8027);
IkReal x8036=((1.0)*x8022);
IkReal x8037=(cj7*x8023);
IkReal x8038=(gconst1*x8022);
IkReal x8039=(sj7*x8023);
IkReal x8040=(r02*x8022);
IkReal x8041=(gconst1*x8023);
IkReal x8042=(x8035+x8034);
evalcond[0]=(r02*x8023);
evalcond[1]=(((r21*x8038))+(((-1.0)*x8026*x8036)));
evalcond[2]=(((cj7*x8040))+(((-1.0)*sj6*x8027))+x8029);
evalcond[3]=((1.0)+((r11*x8038))+(((-1.0)*x8032*x8036)));
evalcond[4]=(((sj7*x8040))+(((-1.0)*x8042)));
evalcond[5]=(((sj7*x8025))+((sj7*x8028))+((x8032*x8037))+(((-1.0)*r11*x8024*x8041)));
evalcond[6]=((((-1.0)*r11*x8030*x8039))+((x8032*x8039))+(((-1.0)*x8024*x8025))+(((-1.0)*x8024*x8028)));
evalcond[7]=(((x8026*x8037))+((sj7*x8031))+((sj7*x8033))+(((-1.0)*r21*x8024*x8041))+(((-1.0)*x8042)));
evalcond[8]=((((-1.0)*x8024*x8033))+(((-1.0)*x8024*x8031))+(((-1.0)*x8029))+((x8026*x8039))+((sj5*sj6))+(((-1.0)*r21*x8030*x8039)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x8043=gconst2*gconst2;
IkReal x8044=gconst1*gconst1;
IkReal x8045=(r01*r11);
IkReal x8046=(gconst1*gconst2);
IkReal x8047=((1.0)*cj7);
IkReal x8048=(r01*r10);
IkReal x8049=(r00*r11);
IkReal x8050=((1.0)*sj7);
IkReal x8051=(r00*r10);
CheckValue<IkReal> x8052=IKPowWithIntegerCheck(IKsign((((cj7*x8044*x8045))+((cj7*x8043*x8051))+((cj7*r02*r12))+(((-1.0)*x8046*x8047*x8048))+(((-1.0)*x8046*x8047*x8049)))),-1);
if(!x8052.valid){
continue;
}
CheckValue<IkReal> x8053 = IKatan2WithCheck(IkReal((((sj7*x8045*x8046))+(((-1.0)*x8046*x8050*x8051))+((sj7*x8044*x8048))+(((-1.0)*x8043*x8049*x8050)))),IkReal(((((-1.0)*gconst2*r02*r11*x8050))+(((-1.0)*gconst1*r02*r10*x8050)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8053.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8052.value)))+(x8053.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x8054=IKcos(j8);
IkReal x8055=IKsin(j8);
IkReal x8056=((1.0)*sj6);
IkReal x8057=(gconst2*r20);
IkReal x8058=(cj5*cj6);
IkReal x8059=((1.0)*gconst1);
IkReal x8060=(gconst2*sj7);
IkReal x8061=(gconst2*r10);
IkReal x8062=(gconst2*r00);
IkReal x8063=(gconst1*sj7);
IkReal x8064=(cj5*x8056);
IkReal x8065=((1.0)*cj6*sj5);
IkReal x8066=((1.0)*x8054);
IkReal x8067=(cj7*x8055);
IkReal x8068=((1.0)*cj7*gconst2);
IkReal x8069=(gconst1*x8054);
IkReal x8070=(r21*x8059);
IkReal x8071=(sj7*x8055);
IkReal x8072=(r12*x8054);
IkReal x8073=(sj7*x8054);
IkReal x8074=(cj7*x8054);
IkReal x8075=(x8064+x8065);
evalcond[0]=(((r21*x8069))+(((-1.0)*x8057*x8066))+((r22*x8055)));
evalcond[1]=(((r01*x8069))+((r02*x8055))+(((-1.0)*x8062*x8066)));
evalcond[2]=((1.0)+(((-1.0)*x8061*x8066))+((r12*x8055))+((r11*x8069)));
evalcond[3]=(((r10*x8063))+((x8061*x8067))+(((-1.0)*r11*x8059*x8067))+((cj7*x8072))+((r11*x8060)));
evalcond[4]=(((r10*x8055*x8060))+(((-1.0)*r11*x8059*x8071))+(((-1.0)*r11*x8068))+((sj7*x8072))+(((-1.0)*cj7*r10*x8059)));
evalcond[5]=(((r02*x8074))+((r01*x8060))+((r00*x8063))+((x8062*x8067))+(((-1.0)*r01*x8059*x8067))+x8058+(((-1.0)*sj5*x8056)));
evalcond[6]=(((r21*x8060))+((x8057*x8067))+(((-1.0)*x8067*x8070))+(((-1.0)*x8075))+((r22*x8074))+((r20*x8063)));
evalcond[7]=(((sj5*sj6))+(((-1.0)*x8058))+(((-1.0)*x8070*x8071))+((r22*x8073))+((x8057*x8071))+(((-1.0)*r21*x8068))+(((-1.0)*cj7*r20*x8059)));
evalcond[8]=(((r02*x8073))+(((-1.0)*x8075))+((r00*x8055*x8060))+(((-1.0)*r01*x8068))+(((-1.0)*r01*x8059*x8071))+(((-1.0)*cj7*r00*x8059)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x8076=gconst2*gconst2;
IkReal x8077=gconst1*gconst1;
IkReal x8078=(cj7*r11);
IkReal x8079=(r01*sj7);
IkReal x8080=((1.0)*r10);
IkReal x8081=(gconst1*gconst2);
IkReal x8082=(cj7*r10);
IkReal x8083=(r00*x8076);
CheckValue<IkReal> x8084 = IKatan2WithCheck(IkReal(((((-1.0)*cj7*r01*x8077*x8080))+((x8078*x8083))+(((-1.0)*r01*x8078*x8081))+((r00*x8081*x8082)))),IkReal((((gconst2*r02*x8078))+((gconst1*r02*x8082)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8084.valid){
continue;
}
CheckValue<IkReal> x8085=IKPowWithIntegerCheck(IKsign((((r02*r12*sj7))+(((-1.0)*x8079*x8080*x8081))+(((-1.0)*r00*r11*sj7*x8081))+((r11*x8077*x8079))+((r10*sj7*x8083)))),-1);
if(!x8085.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x8084.value)+(((1.5707963267949)*(x8085.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x8086=IKcos(j8);
IkReal x8087=IKsin(j8);
IkReal x8088=((1.0)*sj6);
IkReal x8089=(gconst2*r20);
IkReal x8090=(cj5*cj6);
IkReal x8091=((1.0)*gconst1);
IkReal x8092=(gconst2*sj7);
IkReal x8093=(gconst2*r10);
IkReal x8094=(gconst2*r00);
IkReal x8095=(gconst1*sj7);
IkReal x8096=(cj5*x8088);
IkReal x8097=((1.0)*cj6*sj5);
IkReal x8098=((1.0)*x8086);
IkReal x8099=(cj7*x8087);
IkReal x8100=((1.0)*cj7*gconst2);
IkReal x8101=(gconst1*x8086);
IkReal x8102=(r21*x8091);
IkReal x8103=(sj7*x8087);
IkReal x8104=(r12*x8086);
IkReal x8105=(sj7*x8086);
IkReal x8106=(cj7*x8086);
IkReal x8107=(x8097+x8096);
evalcond[0]=(((r22*x8087))+(((-1.0)*x8089*x8098))+((r21*x8101)));
evalcond[1]=((((-1.0)*x8094*x8098))+((r01*x8101))+((r02*x8087)));
evalcond[2]=((1.0)+(((-1.0)*x8093*x8098))+((r11*x8101))+((r12*x8087)));
evalcond[3]=(((r10*x8095))+((cj7*x8104))+((r11*x8092))+((x8093*x8099))+(((-1.0)*r11*x8091*x8099)));
evalcond[4]=((((-1.0)*r11*x8100))+((r10*x8087*x8092))+(((-1.0)*r11*x8091*x8103))+(((-1.0)*cj7*r10*x8091))+((sj7*x8104)));
evalcond[5]=(((r02*x8106))+((r00*x8095))+(((-1.0)*r01*x8091*x8099))+((r01*x8092))+x8090+((x8094*x8099))+(((-1.0)*sj5*x8088)));
evalcond[6]=((((-1.0)*x8099*x8102))+(((-1.0)*x8107))+((x8089*x8099))+((r22*x8106))+((r21*x8092))+((r20*x8095)));
evalcond[7]=((((-1.0)*x8090))+((sj5*sj6))+(((-1.0)*cj7*r20*x8091))+(((-1.0)*r21*x8100))+(((-1.0)*x8102*x8103))+((r22*x8105))+((x8089*x8103)));
evalcond[8]=((((-1.0)*r01*x8100))+(((-1.0)*x8107))+((r02*x8105))+(((-1.0)*r01*x8091*x8103))+((r00*x8087*x8092))+(((-1.0)*cj7*r00*x8091)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x8108=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8108.valid){
continue;
}
CheckValue<IkReal> x8109 = IKatan2WithCheck(IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8109.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8108.value)))+(x8109.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x8110=IKcos(j8);
IkReal x8111=IKsin(j8);
IkReal x8112=((1.0)*sj6);
IkReal x8113=(gconst2*r20);
IkReal x8114=(cj5*cj6);
IkReal x8115=((1.0)*gconst1);
IkReal x8116=(gconst2*sj7);
IkReal x8117=(gconst2*r10);
IkReal x8118=(gconst2*r00);
IkReal x8119=(gconst1*sj7);
IkReal x8120=(cj5*x8112);
IkReal x8121=((1.0)*cj6*sj5);
IkReal x8122=((1.0)*x8110);
IkReal x8123=(cj7*x8111);
IkReal x8124=((1.0)*cj7*gconst2);
IkReal x8125=(gconst1*x8110);
IkReal x8126=(r21*x8115);
IkReal x8127=(sj7*x8111);
IkReal x8128=(r12*x8110);
IkReal x8129=(sj7*x8110);
IkReal x8130=(cj7*x8110);
IkReal x8131=(x8121+x8120);
evalcond[0]=((((-1.0)*x8113*x8122))+((r21*x8125))+((r22*x8111)));
evalcond[1]=(((r02*x8111))+((r01*x8125))+(((-1.0)*x8118*x8122)));
evalcond[2]=((1.0)+((r12*x8111))+((r11*x8125))+(((-1.0)*x8117*x8122)));
evalcond[3]=(((x8117*x8123))+((r10*x8119))+((cj7*x8128))+(((-1.0)*r11*x8115*x8123))+((r11*x8116)));
evalcond[4]=(((sj7*x8128))+(((-1.0)*r11*x8124))+(((-1.0)*r11*x8115*x8127))+((r10*x8111*x8116))+(((-1.0)*cj7*r10*x8115)));
evalcond[5]=(((x8118*x8123))+((r02*x8130))+(((-1.0)*r01*x8115*x8123))+((r01*x8116))+((r00*x8119))+(((-1.0)*sj5*x8112))+x8114);
evalcond[6]=(((r22*x8130))+(((-1.0)*x8131))+((r20*x8119))+(((-1.0)*x8123*x8126))+((r21*x8116))+((x8113*x8123)));
evalcond[7]=(((sj5*sj6))+(((-1.0)*r21*x8124))+((x8113*x8127))+(((-1.0)*cj7*r20*x8115))+((r22*x8129))+(((-1.0)*x8114))+(((-1.0)*x8126*x8127)));
evalcond[8]=(((r02*x8129))+(((-1.0)*x8131))+(((-1.0)*r01*x8115*x8127))+((r00*x8111*x8116))+(((-1.0)*cj7*r00*x8115))+(((-1.0)*r01*x8124)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x8132=((-1.0)*r20);
IkReal x8133=x7224;
CheckValue<IkReal> x8135 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8132),IKFAST_ATAN2_MAGTHRESH);
if(!x8135.valid){
continue;
}
IkReal x8134=((-1.0)*(x8135.value));
sj9=gconst1;
cj9=gconst2;
j9=x8134;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal gconst0=x8134;
IkReal gconst1=(r21*x8133);
IkReal gconst2=(x8132*x8133);
j8eval[0]=1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
IkReal x8136=((-1.0)*r20);
IkReal x8137=x7224;
CheckValue<IkReal> x8139 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8136),IKFAST_ATAN2_MAGTHRESH);
if(!x8139.valid){
continue;
}
IkReal x8138=((-1.0)*(x8139.value));
sj9=gconst1;
cj9=gconst2;
j9=x8138;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal gconst0=x8138;
IkReal gconst1=(r21*x8137);
IkReal gconst2=(x8136*x8137);
CheckValue<IkReal> x8147=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x8147.valid){
continue;
}
IkReal x8140=x8147.value;
IkReal x8141=(sj7*x8140);
IkReal x8142=(r11*x8141);
IkReal x8143=(r00*x8141);
IkReal x8144=(r01*x8141);
IkReal x8145=(r10*x8141);
IkReal x8146=(r20*r21*x8141);
j8eval[0]=IKsign((((r02*r12*sj7))+((r01*x8142*(r21*r21)))+((r00*r20*r21*x8142))+((r10*r20*r21*x8144))+((r10*x8143*(r20*r20)))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
IkReal x8148=((-1.0)*r20);
IkReal x8149=x7224;
CheckValue<IkReal> x8151 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8148),IKFAST_ATAN2_MAGTHRESH);
if(!x8151.valid){
continue;
}
IkReal x8150=((-1.0)*(x8151.value));
sj9=gconst1;
cj9=gconst2;
j9=x8150;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal gconst0=x8150;
IkReal gconst1=(r21*x8149);
IkReal gconst2=(x8148*x8149);
CheckValue<IkReal> x8159=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x8159.valid){
continue;
}
IkReal x8152=x8159.value;
IkReal x8153=(cj7*x8152);
IkReal x8154=(r10*x8153);
IkReal x8155=(r00*x8153);
IkReal x8156=(r01*x8153);
IkReal x8157=(r11*x8153);
IkReal x8158=(r20*r21*x8153);
j8eval[0]=IKsign((((r00*x8154*(r20*r20)))+((cj7*r02*r12))+((r11*x8156*(r21*r21)))+((r01*r20*r21*x8154))+((r11*r20*r21*x8155))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x8160=((-1.0)*r20);
IkReal x8161=x7224;
CheckValue<IkReal> x8163 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8160),IKFAST_ATAN2_MAGTHRESH);
if(!x8163.valid){
continue;
}
IkReal x8162=((-1.0)*(x8163.value));
sj9=gconst1;
cj9=gconst2;
j9=x8162;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
IkReal gconst0=x8162;
IkReal gconst1=(r21*x8161);
IkReal gconst2=(x8160*x8161);
j8eval[0]=1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x8164=((-1.0)*r20);
IkReal x8165=x7224;
CheckValue<IkReal> x8167 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8164),IKFAST_ATAN2_MAGTHRESH);
if(!x8167.valid){
continue;
}
IkReal x8166=((-1.0)*(x8167.value));
sj9=gconst1;
cj9=gconst2;
j9=x8166;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
IkReal gconst0=x8166;
IkReal gconst1=(r21*x8165);
IkReal gconst2=(x8164*x8165);
j8eval[0]=r12;
j8eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x8168=((-1.0)*r20);
IkReal x8169=x7224;
CheckValue<IkReal> x8171 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8168),IKFAST_ATAN2_MAGTHRESH);
if(!x8171.valid){
continue;
}
IkReal x8170=((-1.0)*(x8171.value));
sj9=gconst1;
cj9=gconst2;
j9=x8170;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
IkReal gconst0=x8170;
IkReal gconst1=(r21*x8169);
IkReal gconst2=(x8168*x8169);
IkReal x8172=r22*r22;
CheckValue<IkReal> x8175=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8172))),-1);
if(!x8175.valid){
continue;
}
IkReal x8173=x8175.value;
IkReal x8174=(((x8173*(r21*r21*r21*r21)))+((x8173*(r20*r20*r20*r20)))+x8172+(((2.0)*x8173*(r20*r20)*(r21*r21))));
j8eval[0]=x8174;
j8eval[1]=IKsign(x8174);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x8176=(cj5*cj6);
IkReal x8177=(sj5*sj6);
IkReal x8178=(gconst1*r21);
IkReal x8179=(gconst2*r20);
CheckValue<IkReal> x8180=IKPowWithIntegerCheck(IKsign(((x8179*x8179)+(r22*r22)+(x8178*x8178)+(((-2.0)*x8178*x8179)))),-1);
if(!x8180.valid){
continue;
}
CheckValue<IkReal> x8181 = IKatan2WithCheck(IkReal((((x8177*x8178))+(((-1.0)*x8177*x8179))+((x8176*x8179))+(((-1.0)*x8176*x8178)))),IkReal(((((-1.0)*r22*x8177))+((r22*x8176)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8181.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8180.value)))+(x8181.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x8182=IKcos(j8);
IkReal x8183=IKsin(j8);
IkReal x8184=(gconst1*x8182);
IkReal x8185=(gconst2*x8183);
IkReal x8186=((1.0)*gconst2*x8182);
IkReal x8187=((1.0)*gconst1*x8183);
evalcond[0]=(((r21*x8184))+((r22*x8183))+(((-1.0)*r20*x8186)));
evalcond[1]=(((r01*x8184))+(((-1.0)*r00*x8186))+((r02*x8183)));
evalcond[2]=(((r12*x8182))+((r10*x8185))+(((-1.0)*r11*x8187)));
evalcond[3]=((-1.0)+((r12*x8183))+((r11*x8184))+(((-1.0)*r10*x8186)));
evalcond[4]=(((r00*x8185))+((cj6*sj5))+(((-1.0)*r01*x8187))+((cj5*sj6))+((r02*x8182)));
evalcond[5]=(((sj5*sj6))+((r22*x8182))+(((-1.0)*r21*x8187))+(((-1.0)*cj5*cj6))+((r20*x8185)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x8188=(gconst2*r10);
IkReal x8189=(gconst1*r11);
CheckValue<IkReal> x8190 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x8188))+x8189)),IKFAST_ATAN2_MAGTHRESH);
if(!x8190.valid){
continue;
}
CheckValue<IkReal> x8191=IKPowWithIntegerCheck(IKsign(((x8189*x8189)+(((-2.0)*x8188*x8189))+(r12*r12)+(x8188*x8188))),-1);
if(!x8191.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x8190.value)+(((1.5707963267949)*(x8191.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x8192=IKcos(j8);
IkReal x8193=IKsin(j8);
IkReal x8194=(gconst1*x8192);
IkReal x8195=(gconst2*x8193);
IkReal x8196=((1.0)*gconst2*x8192);
IkReal x8197=((1.0)*gconst1*x8193);
evalcond[0]=(((r21*x8194))+((r22*x8193))+(((-1.0)*r20*x8196)));
evalcond[1]=(((r01*x8194))+(((-1.0)*r00*x8196))+((r02*x8193)));
evalcond[2]=(((r10*x8195))+((r12*x8192))+(((-1.0)*r11*x8197)));
evalcond[3]=((-1.0)+((r12*x8193))+((r11*x8194))+(((-1.0)*r10*x8196)));
evalcond[4]=(((r00*x8195))+((cj6*sj5))+(((-1.0)*r01*x8197))+((cj5*sj6))+((r02*x8192)));
evalcond[5]=(((r20*x8195))+((sj5*sj6))+((r22*x8192))+(((-1.0)*r21*x8197))+(((-1.0)*cj5*cj6)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x8198=((1.0)*gconst2);
CheckValue<IkReal> x8199=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x8198)))),-1);
if(!x8199.valid){
continue;
}
CheckValue<IkReal> x8200 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x8198))+((gconst1*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8200.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8199.value)))+(x8200.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x8201=IKcos(j8);
IkReal x8202=IKsin(j8);
IkReal x8203=(gconst1*x8201);
IkReal x8204=(gconst2*x8202);
IkReal x8205=((1.0)*gconst2*x8201);
IkReal x8206=((1.0)*gconst1*x8202);
evalcond[0]=(((r22*x8202))+((r21*x8203))+(((-1.0)*r20*x8205)));
evalcond[1]=(((r02*x8202))+(((-1.0)*r00*x8205))+((r01*x8203)));
evalcond[2]=(((r12*x8201))+(((-1.0)*r11*x8206))+((r10*x8204)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x8205))+((r11*x8203))+((r12*x8202)));
evalcond[4]=(((r02*x8201))+(((-1.0)*r01*x8206))+((cj6*sj5))+((cj5*sj6))+((r00*x8204)));
evalcond[5]=((((-1.0)*r21*x8206))+((sj5*sj6))+((r22*x8201))+(((-1.0)*cj5*cj6))+((r20*x8204)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x8207=((-1.0)*r20);
IkReal x8208=x7224;
CheckValue<IkReal> x8210 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8207),IKFAST_ATAN2_MAGTHRESH);
if(!x8210.valid){
continue;
}
IkReal x8209=((-1.0)*(x8210.value));
sj9=gconst1;
cj9=gconst2;
j9=x8209;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
IkReal gconst0=x8209;
IkReal gconst1=(r21*x8208);
IkReal gconst2=(x8207*x8208);
j8eval[0]=1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x8211=((-1.0)*r20);
IkReal x8212=x7224;
CheckValue<IkReal> x8214 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8211),IKFAST_ATAN2_MAGTHRESH);
if(!x8214.valid){
continue;
}
IkReal x8213=((-1.0)*(x8214.value));
sj9=gconst1;
cj9=gconst2;
j9=x8213;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
IkReal gconst0=x8213;
IkReal gconst1=(r21*x8212);
IkReal gconst2=(x8211*x8212);
j8eval[0]=r12;
j8eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x8215=((-1.0)*r20);
IkReal x8216=x7224;
CheckValue<IkReal> x8218 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8215),IKFAST_ATAN2_MAGTHRESH);
if(!x8218.valid){
continue;
}
IkReal x8217=((-1.0)*(x8218.value));
sj9=gconst1;
cj9=gconst2;
j9=x8217;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
IkReal gconst0=x8217;
IkReal gconst1=(r21*x8216);
IkReal gconst2=(x8215*x8216);
IkReal x8219=((1.0)*(r22*r22));
CheckValue<IkReal> x8223=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8219))),-1);
if(!x8223.valid){
continue;
}
IkReal x8220=x8223.value;
IkReal x8221=((1.0)*x8220);
IkReal x8222=((((-1.0)*x8219))+(((-1.0)*x8221*(r20*r20*r20*r20)))+(((-2.0)*x8220*(r20*r20)*(r21*r21)))+(((-1.0)*x8221*(r21*r21*r21*r21))));
j8eval[0]=x8222;
j8eval[1]=IKsign(x8222);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x8224=(cj5*cj6);
IkReal x8225=(sj5*sj6);
IkReal x8226=(gconst1*r21);
IkReal x8227=(gconst2*r20);
CheckValue<IkReal> x8228 = IKatan2WithCheck(IkReal(((((-1.0)*x8224*x8226))+(((-1.0)*x8225*x8227))+((x8224*x8227))+((x8225*x8226)))),IkReal(((((-1.0)*r22*x8225))+((r22*x8224)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8228.valid){
continue;
}
CheckValue<IkReal> x8229=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8227*x8227)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x8226*x8226)))+(((2.0)*x8226*x8227)))),-1);
if(!x8229.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x8228.value)+(((1.5707963267949)*(x8229.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x8230=IKcos(j8);
IkReal x8231=IKsin(j8);
IkReal x8232=((1.0)*gconst2);
IkReal x8233=(gconst1*r11);
IkReal x8234=((1.0)*x8230);
IkReal x8235=(gconst1*x8230);
IkReal x8236=(gconst1*x8231);
evalcond[0]=(((r22*x8231))+((r21*x8235))+(((-1.0)*r20*x8230*x8232)));
evalcond[1]=(((r02*x8231))+((r01*x8235))+(((-1.0)*r00*x8230*x8232)));
evalcond[2]=((-1.0)+((r12*x8231))+(((-1.0)*r10*x8230*x8232))+((x8230*x8233)));
evalcond[3]=(((x8231*x8233))+(((-1.0)*r10*x8231*x8232))+(((-1.0)*r12*x8234)));
evalcond[4]=(((cj6*sj5))+(((-1.0)*r00*x8231*x8232))+(((-1.0)*r02*x8234))+((cj5*sj6))+((r01*x8236)));
evalcond[5]=(((sj5*sj6))+((r21*x8236))+(((-1.0)*r22*x8234))+(((-1.0)*cj5*cj6))+(((-1.0)*r20*x8231*x8232)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x8237=(gconst2*r10);
IkReal x8238=(gconst1*r11);
CheckValue<IkReal> x8239=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x8237*x8237)+(x8238*x8238)+(((-2.0)*x8237*x8238)))),-1);
if(!x8239.valid){
continue;
}
CheckValue<IkReal> x8240 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x8237))+x8238)),IKFAST_ATAN2_MAGTHRESH);
if(!x8240.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8239.value)))+(x8240.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x8241=IKcos(j8);
IkReal x8242=IKsin(j8);
IkReal x8243=((1.0)*gconst2);
IkReal x8244=(gconst1*r11);
IkReal x8245=((1.0)*x8241);
IkReal x8246=(gconst1*x8241);
IkReal x8247=(gconst1*x8242);
evalcond[0]=(((r21*x8246))+((r22*x8242))+(((-1.0)*r20*x8241*x8243)));
evalcond[1]=(((r02*x8242))+(((-1.0)*r00*x8241*x8243))+((r01*x8246)));
evalcond[2]=((-1.0)+((x8241*x8244))+((r12*x8242))+(((-1.0)*r10*x8241*x8243)));
evalcond[3]=((((-1.0)*r10*x8242*x8243))+((x8242*x8244))+(((-1.0)*r12*x8245)));
evalcond[4]=(((cj6*sj5))+(((-1.0)*r00*x8242*x8243))+((cj5*sj6))+(((-1.0)*r02*x8245))+((r01*x8247)));
evalcond[5]=(((sj5*sj6))+(((-1.0)*r22*x8245))+((r21*x8247))+(((-1.0)*r20*x8242*x8243))+(((-1.0)*cj5*cj6)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x8248=((1.0)*gconst2);
CheckValue<IkReal> x8249=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x8248)))),-1);
if(!x8249.valid){
continue;
}
CheckValue<IkReal> x8250 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x8248))+((gconst1*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8250.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8249.value)))+(x8250.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x8251=IKcos(j8);
IkReal x8252=IKsin(j8);
IkReal x8253=((1.0)*gconst2);
IkReal x8254=(gconst1*r11);
IkReal x8255=((1.0)*x8251);
IkReal x8256=(gconst1*x8251);
IkReal x8257=(gconst1*x8252);
evalcond[0]=(((r21*x8256))+(((-1.0)*r20*x8251*x8253))+((r22*x8252)));
evalcond[1]=(((r01*x8256))+(((-1.0)*r00*x8251*x8253))+((r02*x8252)));
evalcond[2]=((-1.0)+((x8251*x8254))+(((-1.0)*r10*x8251*x8253))+((r12*x8252)));
evalcond[3]=((((-1.0)*r10*x8252*x8253))+(((-1.0)*r12*x8255))+((x8252*x8254)));
evalcond[4]=(((r01*x8257))+((cj6*sj5))+(((-1.0)*r00*x8252*x8253))+((cj5*sj6))+(((-1.0)*r02*x8255)));
evalcond[5]=(((r21*x8257))+((sj5*sj6))+(((-1.0)*r22*x8255))+(((-1.0)*cj5*cj6))+(((-1.0)*r20*x8252*x8253)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[2];
IkReal x8258=((-1.0)*r20);
IkReal x8259=((-1.0)*px);
CheckValue<IkReal> x8261 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8258),IKFAST_ATAN2_MAGTHRESH);
if(!x8261.valid){
continue;
}
IkReal x8260=((-1.0)*(x8261.value));
sj9=gconst1;
cj9=gconst2;
j9=x8260;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8259);
rxp1_1=(px*r21);
rxp1_2=(r11*x8259);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8260;
IkReal gconst1=r21;
IkReal gconst2=x8258;
IkReal x8262=((1.0)*cj7);
IkReal x8263=(r11*r21);
IkReal x8264=(r10*r20);
j8eval[0]=((((-1.0)*x8262*x8263))+(((-1.0)*x8262*x8264)));
j8eval[1]=(x8264+x8263);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
IkReal x8265=((-1.0)*r20);
IkReal x8266=((-1.0)*px);
CheckValue<IkReal> x8268 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8265),IKFAST_ATAN2_MAGTHRESH);
if(!x8268.valid){
continue;
}
IkReal x8267=((-1.0)*(x8268.value));
sj9=gconst1;
cj9=gconst2;
j9=x8267;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8266);
rxp1_1=(px*r21);
rxp1_2=(r11*x8266);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8267;
IkReal gconst1=r21;
IkReal gconst2=x8265;
IkReal x8269=((1.0)*sj7);
j8eval[0]=((((-1.0)*r11*r21*x8269))+(((-1.0)*r10*r20*x8269)));
j8eval[1]=r02;
j8eval[2]=sj7;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
IkReal x8270=((-1.0)*r20);
IkReal x8271=((-1.0)*px);
CheckValue<IkReal> x8273 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8270),IKFAST_ATAN2_MAGTHRESH);
if(!x8273.valid){
continue;
}
IkReal x8272=((-1.0)*(x8273.value));
sj9=gconst1;
cj9=gconst2;
j9=x8272;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8271);
rxp1_1=(px*r21);
rxp1_2=(r11*x8271);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8272;
IkReal gconst1=r21;
IkReal gconst2=x8270;
IkReal x8274=((1.0)*cj7);
j8eval[0]=((((-1.0)*r10*r20*x8274))+(((-1.0)*r11*r21*x8274)));
j8eval[1]=cj7;
j8eval[2]=r02;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x8275=((1.0)*gconst1);
CheckValue<IkReal> x8276=IKPowWithIntegerCheck((((cj7*gconst2*r10))+(((-1.0)*cj7*r11*x8275))),-1);
if(!x8276.valid){
continue;
}
CheckValue<IkReal> x8277=IKPowWithIntegerCheck(cj7,-1);
if(!x8277.valid){
continue;
}
CheckValue<IkReal> x8278=IKPowWithIntegerCheck(r02,-1);
if(!x8278.valid){
continue;
}
if( IKabs(((x8276.value)*(((((-1.0)*r10*sj7*x8275))+(((-1.0)*gconst2*r11*sj7)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x8277.value)*(x8278.value)*((((cj5*cj6))+(((-1.0)*sj5*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x8276.value)*(((((-1.0)*r10*sj7*x8275))+(((-1.0)*gconst2*r11*sj7))))))+IKsqr(((x8277.value)*(x8278.value)*((((cj5*cj6))+(((-1.0)*sj5*sj6))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((x8276.value)*(((((-1.0)*r10*sj7*x8275))+(((-1.0)*gconst2*r11*sj7))))), ((x8277.value)*(x8278.value)*((((cj5*cj6))+(((-1.0)*sj5*sj6))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x8279=IKcos(j8);
IkReal x8280=IKsin(j8);
IkReal x8281=(sj5*sj6);
IkReal x8282=((1.0)*cj5);
IkReal x8283=(gconst2*r20);
IkReal x8284=(gconst1*r11);
IkReal x8285=(gconst2*r11);
IkReal x8286=((1.0)*cj7);
IkReal x8287=(cj6*sj5);
IkReal x8288=(gconst2*r21);
IkReal x8289=(gconst2*r10);
IkReal x8290=(gconst1*r20);
IkReal x8291=(gconst1*r10);
IkReal x8292=(cj6*x8282);
IkReal x8293=(r02*x8279);
IkReal x8294=(cj7*x8280);
IkReal x8295=((1.0)*gconst1*r21);
IkReal x8296=(sj7*x8280);
IkReal x8297=((1.0)*x8279);
evalcond[0]=(r02*x8280);
evalcond[1]=(((cj5*sj6))+((sj7*x8293))+x8287);
evalcond[2]=(((gconst1*r21*x8279))+(((-1.0)*x8283*x8297)));
evalcond[3]=(((cj7*x8293))+(((-1.0)*x8292))+x8281);
evalcond[4]=((-1.0)+((x8279*x8284))+(((-1.0)*x8289*x8297)));
evalcond[5]=(((x8289*x8294))+(((-1.0)*x8280*x8284*x8286))+((sj7*x8285))+((sj7*x8291)));
evalcond[6]=((((-1.0)*x8285*x8286))+((x8289*x8296))+(((-1.0)*x8286*x8291))+(((-1.0)*x8284*x8296)));
evalcond[7]=((((-1.0)*sj6*x8282))+(((-1.0)*x8287))+((sj7*x8288))+((sj7*x8290))+(((-1.0)*gconst1*r21*x8280*x8286))+((x8283*x8294)));
evalcond[8]=((((-1.0)*x8286*x8290))+(((-1.0)*x8286*x8288))+(((-1.0)*x8295*x8296))+(((-1.0)*x8292))+((x8283*x8296))+x8281);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x8298=IKPowWithIntegerCheck((((gconst2*r10*sj7))+(((-1.0)*gconst1*r11*sj7))),-1);
if(!x8298.valid){
continue;
}
CheckValue<IkReal> x8299=IKPowWithIntegerCheck(r02,-1);
if(!x8299.valid){
continue;
}
CheckValue<IkReal> x8300=IKPowWithIntegerCheck(sj7,-1);
if(!x8300.valid){
continue;
}
if( IKabs(((x8298.value)*((((cj7*gconst2*r11))+((cj7*gconst1*r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x8299.value)*(x8300.value)*(((((-1.0)*cj5*sj6))+(((-1.0)*cj6*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x8298.value)*((((cj7*gconst2*r11))+((cj7*gconst1*r10))))))+IKsqr(((x8299.value)*(x8300.value)*(((((-1.0)*cj5*sj6))+(((-1.0)*cj6*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((x8298.value)*((((cj7*gconst2*r11))+((cj7*gconst1*r10))))), ((x8299.value)*(x8300.value)*(((((-1.0)*cj5*sj6))+(((-1.0)*cj6*sj5))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x8301=IKcos(j8);
IkReal x8302=IKsin(j8);
IkReal x8303=(sj5*sj6);
IkReal x8304=((1.0)*cj5);
IkReal x8305=(gconst2*r20);
IkReal x8306=(gconst1*r11);
IkReal x8307=(gconst2*r11);
IkReal x8308=((1.0)*cj7);
IkReal x8309=(cj6*sj5);
IkReal x8310=(gconst2*r21);
IkReal x8311=(gconst2*r10);
IkReal x8312=(gconst1*r20);
IkReal x8313=(gconst1*r10);
IkReal x8314=(cj6*x8304);
IkReal x8315=(r02*x8301);
IkReal x8316=(cj7*x8302);
IkReal x8317=((1.0)*gconst1*r21);
IkReal x8318=(sj7*x8302);
IkReal x8319=((1.0)*x8301);
evalcond[0]=(r02*x8302);
evalcond[1]=(x8309+((sj7*x8315))+((cj5*sj6)));
evalcond[2]=((((-1.0)*x8305*x8319))+((gconst1*r21*x8301)));
evalcond[3]=(x8303+((cj7*x8315))+(((-1.0)*x8314)));
evalcond[4]=((-1.0)+((x8301*x8306))+(((-1.0)*x8311*x8319)));
evalcond[5]=(((sj7*x8307))+((x8311*x8316))+((sj7*x8313))+(((-1.0)*x8302*x8306*x8308)));
evalcond[6]=((((-1.0)*x8306*x8318))+((x8311*x8318))+(((-1.0)*x8308*x8313))+(((-1.0)*x8307*x8308)));
evalcond[7]=((((-1.0)*sj6*x8304))+((sj7*x8312))+((sj7*x8310))+(((-1.0)*gconst1*r21*x8302*x8308))+((x8305*x8316))+(((-1.0)*x8309)));
evalcond[8]=(x8303+(((-1.0)*x8317*x8318))+(((-1.0)*x8314))+(((-1.0)*x8308*x8310))+(((-1.0)*x8308*x8312))+((x8305*x8318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x8320=(gconst2*r10);
IkReal x8321=(gconst1*r11);
IkReal x8322=((1.0)*sj7);
CheckValue<IkReal> x8323=IKPowWithIntegerCheck((((cj7*x8320))+(((-1.0)*cj7*x8321))),-1);
if(!x8323.valid){
continue;
}
CheckValue<IkReal> x8324=IKPowWithIntegerCheck((x8321+(((-1.0)*x8320))),-1);
if(!x8324.valid){
continue;
}
if( IKabs(((x8323.value)*(((((-1.0)*gconst2*r11*x8322))+(((-1.0)*gconst1*r10*x8322)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x8324.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x8323.value)*(((((-1.0)*gconst2*r11*x8322))+(((-1.0)*gconst1*r10*x8322))))))+IKsqr(x8324.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((x8323.value)*(((((-1.0)*gconst2*r11*x8322))+(((-1.0)*gconst1*r10*x8322))))), x8324.value);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x8325=IKcos(j8);
IkReal x8326=IKsin(j8);
IkReal x8327=(sj5*sj6);
IkReal x8328=((1.0)*cj5);
IkReal x8329=(gconst2*r20);
IkReal x8330=(gconst1*r11);
IkReal x8331=(gconst2*r11);
IkReal x8332=((1.0)*cj7);
IkReal x8333=(cj6*sj5);
IkReal x8334=(gconst2*r21);
IkReal x8335=(gconst2*r10);
IkReal x8336=(gconst1*r20);
IkReal x8337=(gconst1*r10);
IkReal x8338=(cj6*x8328);
IkReal x8339=(r02*x8325);
IkReal x8340=(cj7*x8326);
IkReal x8341=((1.0)*gconst1*r21);
IkReal x8342=(sj7*x8326);
IkReal x8343=((1.0)*x8325);
evalcond[0]=(r02*x8326);
evalcond[1]=(x8333+((sj7*x8339))+((cj5*sj6)));
evalcond[2]=(((gconst1*r21*x8325))+(((-1.0)*x8329*x8343)));
evalcond[3]=(x8327+((cj7*x8339))+(((-1.0)*x8338)));
evalcond[4]=((-1.0)+((x8325*x8330))+(((-1.0)*x8335*x8343)));
evalcond[5]=(((sj7*x8337))+((sj7*x8331))+(((-1.0)*x8326*x8330*x8332))+((x8335*x8340)));
evalcond[6]=((((-1.0)*x8332*x8337))+(((-1.0)*x8330*x8342))+(((-1.0)*x8331*x8332))+((x8335*x8342)));
evalcond[7]=(((sj7*x8334))+((sj7*x8336))+(((-1.0)*sj6*x8328))+(((-1.0)*gconst1*r21*x8326*x8332))+((x8329*x8340))+(((-1.0)*x8333)));
evalcond[8]=((((-1.0)*x8332*x8334))+(((-1.0)*x8332*x8336))+x8327+(((-1.0)*x8341*x8342))+(((-1.0)*x8338))+((x8329*x8342)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x8344=gconst2*gconst2;
IkReal x8345=gconst1*gconst1;
IkReal x8346=(r01*r11);
IkReal x8347=(gconst1*gconst2);
IkReal x8348=((1.0)*cj7);
IkReal x8349=(r01*r10);
IkReal x8350=(r00*r11);
IkReal x8351=((1.0)*sj7);
IkReal x8352=(r00*r10);
CheckValue<IkReal> x8353=IKPowWithIntegerCheck(IKsign((((cj7*x8344*x8352))+(((-1.0)*x8347*x8348*x8350))+(((-1.0)*x8347*x8348*x8349))+((cj7*r02*r12))+((cj7*x8345*x8346)))),-1);
if(!x8353.valid){
continue;
}
CheckValue<IkReal> x8354 = IKatan2WithCheck(IkReal((((sj7*x8345*x8349))+(((-1.0)*x8347*x8351*x8352))+((sj7*x8346*x8347))+(((-1.0)*x8344*x8350*x8351)))),IkReal(((((-1.0)*gconst2*r02*r11*x8351))+(((-1.0)*gconst1*r02*r10*x8351)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8354.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8353.value)))+(x8354.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x8355=IKcos(j8);
IkReal x8356=IKsin(j8);
IkReal x8357=(sj5*sj6);
IkReal x8358=((1.0)*cj5);
IkReal x8359=(gconst2*r20);
IkReal x8360=(cj6*sj5);
IkReal x8361=((1.0)*gconst1);
IkReal x8362=(gconst2*sj7);
IkReal x8363=(gconst2*r10);
IkReal x8364=(gconst2*r00);
IkReal x8365=(gconst1*sj7);
IkReal x8366=(cj6*x8358);
IkReal x8367=((1.0)*x8355);
IkReal x8368=(cj7*x8356);
IkReal x8369=((1.0)*cj7*gconst2);
IkReal x8370=(gconst1*x8355);
IkReal x8371=(r21*x8361);
IkReal x8372=(sj7*x8356);
IkReal x8373=(r12*x8355);
IkReal x8374=(sj7*x8355);
IkReal x8375=(cj7*x8355);
evalcond[0]=(((r22*x8356))+(((-1.0)*x8359*x8367))+((r21*x8370)));
evalcond[1]=(((r02*x8356))+(((-1.0)*x8364*x8367))+((r01*x8370)));
evalcond[2]=((-1.0)+((r12*x8356))+((r11*x8370))+(((-1.0)*x8363*x8367)));
evalcond[3]=(((x8363*x8368))+(((-1.0)*r11*x8361*x8368))+((cj7*x8373))+((r10*x8365))+((r11*x8362)));
evalcond[4]=((((-1.0)*r11*x8369))+((r10*x8356*x8362))+(((-1.0)*r11*x8361*x8372))+((sj7*x8373))+(((-1.0)*cj7*r10*x8361)));
evalcond[5]=((((-1.0)*r01*x8361*x8368))+x8357+((r01*x8362))+((r00*x8365))+((x8364*x8368))+((r02*x8375))+(((-1.0)*x8366)));
evalcond[6]=((((-1.0)*sj6*x8358))+(((-1.0)*x8368*x8371))+(((-1.0)*x8360))+((x8359*x8368))+((r20*x8365))+((r21*x8362))+((r22*x8375)));
evalcond[7]=(x8360+(((-1.0)*r01*x8369))+((r00*x8356*x8362))+((cj5*sj6))+(((-1.0)*cj7*r00*x8361))+(((-1.0)*r01*x8361*x8372))+((r02*x8374)));
evalcond[8]=((((-1.0)*x8371*x8372))+x8357+(((-1.0)*r21*x8369))+(((-1.0)*cj7*r20*x8361))+((x8359*x8372))+((r22*x8374))+(((-1.0)*x8366)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x8376=gconst2*gconst2;
IkReal x8377=gconst1*gconst1;
IkReal x8378=(cj7*r11);
IkReal x8379=(r01*sj7);
IkReal x8380=((1.0)*r10);
IkReal x8381=(gconst1*gconst2);
IkReal x8382=(cj7*r10);
IkReal x8383=(r00*x8376);
CheckValue<IkReal> x8384=IKPowWithIntegerCheck(IKsign((((r02*r12*sj7))+(((-1.0)*r00*r11*sj7*x8381))+((r11*x8377*x8379))+(((-1.0)*x8379*x8380*x8381))+((r10*sj7*x8383)))),-1);
if(!x8384.valid){
continue;
}
CheckValue<IkReal> x8385 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x8378*x8381))+((r00*x8381*x8382))+(((-1.0)*cj7*r01*x8377*x8380))+((x8378*x8383)))),IkReal((((gconst1*r02*x8382))+((gconst2*r02*x8378)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8385.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8384.value)))+(x8385.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x8386=IKcos(j8);
IkReal x8387=IKsin(j8);
IkReal x8388=(sj5*sj6);
IkReal x8389=((1.0)*cj5);
IkReal x8390=(gconst2*r20);
IkReal x8391=(cj6*sj5);
IkReal x8392=((1.0)*gconst1);
IkReal x8393=(gconst2*sj7);
IkReal x8394=(gconst2*r10);
IkReal x8395=(gconst2*r00);
IkReal x8396=(gconst1*sj7);
IkReal x8397=(cj6*x8389);
IkReal x8398=((1.0)*x8386);
IkReal x8399=(cj7*x8387);
IkReal x8400=((1.0)*cj7*gconst2);
IkReal x8401=(gconst1*x8386);
IkReal x8402=(r21*x8392);
IkReal x8403=(sj7*x8387);
IkReal x8404=(r12*x8386);
IkReal x8405=(sj7*x8386);
IkReal x8406=(cj7*x8386);
evalcond[0]=((((-1.0)*x8390*x8398))+((r22*x8387))+((r21*x8401)));
evalcond[1]=(((r01*x8401))+(((-1.0)*x8395*x8398))+((r02*x8387)));
evalcond[2]=((-1.0)+((r11*x8401))+(((-1.0)*x8394*x8398))+((r12*x8387)));
evalcond[3]=(((x8394*x8399))+((cj7*x8404))+(((-1.0)*r11*x8392*x8399))+((r10*x8396))+((r11*x8393)));
evalcond[4]=((((-1.0)*r11*x8392*x8403))+((r10*x8387*x8393))+(((-1.0)*cj7*r10*x8392))+(((-1.0)*r11*x8400))+((sj7*x8404)));
evalcond[5]=(x8388+(((-1.0)*x8397))+((x8395*x8399))+((r02*x8406))+(((-1.0)*r01*x8392*x8399))+((r00*x8396))+((r01*x8393)));
evalcond[6]=(((r20*x8396))+((r22*x8406))+((x8390*x8399))+(((-1.0)*x8391))+(((-1.0)*x8399*x8402))+((r21*x8393))+(((-1.0)*sj6*x8389)));
evalcond[7]=((((-1.0)*r01*x8400))+x8391+(((-1.0)*cj7*r00*x8392))+((r00*x8387*x8393))+((cj5*sj6))+(((-1.0)*r01*x8392*x8403))+((r02*x8405)));
evalcond[8]=((((-1.0)*cj7*r20*x8392))+x8388+(((-1.0)*r21*x8400))+((r22*x8405))+(((-1.0)*x8397))+(((-1.0)*x8402*x8403))+((x8390*x8403)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x8407=((1.0)*gconst2);
CheckValue<IkReal> x8408=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8407))+(((-1.0)*gconst1*r00)))),-1);
if(!x8408.valid){
continue;
}
CheckValue<IkReal> x8409 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x8407))+((gconst1*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8409.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8408.value)))+(x8409.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x8410=IKcos(j8);
IkReal x8411=IKsin(j8);
IkReal x8412=(sj5*sj6);
IkReal x8413=((1.0)*cj5);
IkReal x8414=(gconst2*r20);
IkReal x8415=(cj6*sj5);
IkReal x8416=((1.0)*gconst1);
IkReal x8417=(gconst2*sj7);
IkReal x8418=(gconst2*r10);
IkReal x8419=(gconst2*r00);
IkReal x8420=(gconst1*sj7);
IkReal x8421=(cj6*x8413);
IkReal x8422=((1.0)*x8410);
IkReal x8423=(cj7*x8411);
IkReal x8424=((1.0)*cj7*gconst2);
IkReal x8425=(gconst1*x8410);
IkReal x8426=(r21*x8416);
IkReal x8427=(sj7*x8411);
IkReal x8428=(r12*x8410);
IkReal x8429=(sj7*x8410);
IkReal x8430=(cj7*x8410);
evalcond[0]=(((r21*x8425))+(((-1.0)*x8414*x8422))+((r22*x8411)));
evalcond[1]=(((r02*x8411))+((r01*x8425))+(((-1.0)*x8419*x8422)));
evalcond[2]=((-1.0)+((r12*x8411))+((r11*x8425))+(((-1.0)*x8418*x8422)));
evalcond[3]=(((r10*x8420))+(((-1.0)*r11*x8416*x8423))+((r11*x8417))+((x8418*x8423))+((cj7*x8428)));
evalcond[4]=(((r10*x8411*x8417))+(((-1.0)*r11*x8416*x8427))+((sj7*x8428))+(((-1.0)*r11*x8424))+(((-1.0)*cj7*r10*x8416)));
evalcond[5]=(x8412+(((-1.0)*r01*x8416*x8423))+(((-1.0)*x8421))+((r01*x8417))+((x8419*x8423))+((r02*x8430))+((r00*x8420)));
evalcond[6]=((((-1.0)*x8415))+((r20*x8420))+(((-1.0)*sj6*x8413))+((r22*x8430))+((r21*x8417))+((x8414*x8423))+(((-1.0)*x8423*x8426)));
evalcond[7]=(((r02*x8429))+x8415+(((-1.0)*r01*x8416*x8427))+((cj5*sj6))+(((-1.0)*cj7*r00*x8416))+(((-1.0)*r01*x8424))+((r00*x8411*x8417)));
evalcond[8]=((((-1.0)*x8426*x8427))+x8412+((x8414*x8427))+(((-1.0)*x8421))+(((-1.0)*r21*x8424))+(((-1.0)*cj7*r20*x8416))+((r22*x8429)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x8431=((-1.0)*r20);
IkReal x8432=x7224;
CheckValue<IkReal> x8434 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8431),IKFAST_ATAN2_MAGTHRESH);
if(!x8434.valid){
continue;
}
IkReal x8433=((-1.0)*(x8434.value));
sj9=gconst1;
cj9=gconst2;
j9=x8433;
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal gconst0=x8433;
IkReal gconst1=(r21*x8432);
IkReal gconst2=(x8431*x8432);
j8eval[0]=1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
IkReal x8435=((-1.0)*r20);
IkReal x8436=x7224;
CheckValue<IkReal> x8438 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8435),IKFAST_ATAN2_MAGTHRESH);
if(!x8438.valid){
continue;
}
IkReal x8437=((-1.0)*(x8438.value));
sj9=gconst1;
cj9=gconst2;
j9=x8437;
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal gconst0=x8437;
IkReal gconst1=(r21*x8436);
IkReal gconst2=(x8435*x8436);
CheckValue<IkReal> x8446=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x8446.valid){
continue;
}
IkReal x8439=x8446.value;
IkReal x8440=(sj7*x8439);
IkReal x8441=(r11*x8440);
IkReal x8442=(r00*x8440);
IkReal x8443=(r01*x8440);
IkReal x8444=(r10*x8440);
IkReal x8445=(r20*r21*x8440);
j8eval[0]=IKsign((((r02*r12*sj7))+((r00*r20*r21*x8441))+((r01*x8441*(r21*r21)))+((r10*x8442*(r20*r20)))+((r10*r20*r21*x8443))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
IkReal x8447=((-1.0)*r20);
IkReal x8448=x7224;
CheckValue<IkReal> x8450 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8447),IKFAST_ATAN2_MAGTHRESH);
if(!x8450.valid){
continue;
}
IkReal x8449=((-1.0)*(x8450.value));
sj9=gconst1;
cj9=gconst2;
j9=x8449;
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal gconst0=x8449;
IkReal gconst1=(r21*x8448);
IkReal gconst2=(x8447*x8448);
CheckValue<IkReal> x8458=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x8458.valid){
continue;
}
IkReal x8451=x8458.value;
IkReal x8452=(cj7*x8451);
IkReal x8453=(r10*x8452);
IkReal x8454=(r00*x8452);
IkReal x8455=(r01*x8452);
IkReal x8456=(r11*x8452);
IkReal x8457=(r20*r21*x8452);
j8eval[0]=IKsign((((r01*r20*r21*x8453))+((r00*x8453*(r20*r20)))+((r11*r20*r21*x8454))+((cj7*r02*r12))+((r11*x8455*(r21*r21)))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x8459=((-1.0)*r20);
IkReal x8460=x7224;
CheckValue<IkReal> x8462 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8459),IKFAST_ATAN2_MAGTHRESH);
if(!x8462.valid){
continue;
}
IkReal x8461=((-1.0)*(x8462.value));
sj9=gconst1;
cj9=gconst2;
j9=x8461;
sj4=1.0;
cj4=0;
j4=1.5707963267949;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
IkReal gconst0=x8461;
IkReal gconst1=(r21*x8460);
IkReal gconst2=(x8459*x8460);
j8eval[0]=1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x8463=((-1.0)*r20);
IkReal x8464=x7224;
CheckValue<IkReal> x8466 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8463),IKFAST_ATAN2_MAGTHRESH);
if(!x8466.valid){
continue;
}
IkReal x8465=((-1.0)*(x8466.value));
sj9=gconst1;
cj9=gconst2;
j9=x8465;
sj4=1.0;
cj4=0;
j4=1.5707963267949;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
IkReal gconst0=x8465;
IkReal gconst1=(r21*x8464);
IkReal gconst2=(x8463*x8464);
j8eval[0]=r02;
j8eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
IkReal x8467=((-1.0)*r20);
IkReal x8468=x7224;
CheckValue<IkReal> x8470 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8467),IKFAST_ATAN2_MAGTHRESH);
if(!x8470.valid){
continue;
}
IkReal x8469=((-1.0)*(x8470.value));
sj9=gconst1;
cj9=gconst2;
j9=x8469;
sj4=1.0;
cj4=0;
j4=1.5707963267949;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
IkReal gconst0=x8469;
IkReal gconst1=(r21*x8468);
IkReal gconst2=(x8467*x8468);
IkReal x8471=r22*r22;
IkReal x8472=(r02*sj5*sj6);
CheckValue<IkReal> x8477=IKPowWithIntegerCheck(((-1.0)+x8471),-1);
if(!x8477.valid){
continue;
}
IkReal x8473=x8477.value;
IkReal x8474=((1.0)*cj5*cj6*r02);
if((((1.0)+(((-1.0)*x8471)))) < -0.00001)
continue;
IkReal x8475=IKsqrt(((1.0)+(((-1.0)*x8471))));
IkReal x8476=(r22*x8473*x8475);
j8eval[0]=((IKabs((x8472+(((-1.0)*x8474)))))+(IKabs((((x8472*x8476))+(((-1.0)*x8474*x8476))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x8478=(cj5*cj6);
IkReal x8479=(gconst2*r00);
IkReal x8480=(gconst1*r01);
IkReal x8481=(sj5*sj6);
CheckValue<IkReal> x8482 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x8478))+((r02*x8481)))),IkReal(((((-1.0)*x8479*x8481))+((x8480*x8481))+(((-1.0)*x8478*x8480))+((x8478*x8479)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8482.valid){
continue;
}
CheckValue<IkReal> x8483=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8483.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x8482.value)+(((1.5707963267949)*(x8483.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x8484=IKcos(j8);
IkReal x8485=IKsin(j8);
IkReal x8486=((1.0)*cj6);
IkReal x8487=(gconst1*x8484);
IkReal x8488=(gconst2*x8485);
IkReal x8489=((1.0)*gconst2*x8484);
IkReal x8490=((1.0)*gconst1*x8485);
evalcond[0]=((((-1.0)*r20*x8489))+((r22*x8485))+((r21*x8487)));
evalcond[1]=((((-1.0)*r10*x8489))+((r12*x8485))+((r11*x8487)));
evalcond[2]=(((r02*x8484))+(((-1.0)*r01*x8490))+((r00*x8488)));
evalcond[3]=((-1.0)+((r01*x8487))+((r02*x8485))+(((-1.0)*r00*x8489)));
evalcond[4]=((((-1.0)*r21*x8490))+((sj5*sj6))+((r22*x8484))+((r20*x8488))+(((-1.0)*cj5*x8486)));
evalcond[5]=(((r10*x8488))+(((-1.0)*cj5*sj6))+(((-1.0)*r11*x8490))+((r12*x8484))+(((-1.0)*sj5*x8486)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x8491=(gconst1*r01);
IkReal x8492=(gconst2*r00);
CheckValue<IkReal> x8493=IKPowWithIntegerCheck(IKsign(((x8492*x8492)+(x8491*x8491)+(r02*r02)+(((-2.0)*x8491*x8492)))),-1);
if(!x8493.valid){
continue;
}
CheckValue<IkReal> x8494 = IKatan2WithCheck(IkReal(r02),IkReal((x8491+(((-1.0)*x8492)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8494.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8493.value)))+(x8494.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x8495=IKcos(j8);
IkReal x8496=IKsin(j8);
IkReal x8497=((1.0)*cj6);
IkReal x8498=(gconst1*x8495);
IkReal x8499=(gconst2*x8496);
IkReal x8500=((1.0)*gconst2*x8495);
IkReal x8501=((1.0)*gconst1*x8496);
evalcond[0]=((((-1.0)*r20*x8500))+((r22*x8496))+((r21*x8498)));
evalcond[1]=(((r12*x8496))+(((-1.0)*r10*x8500))+((r11*x8498)));
evalcond[2]=(((r00*x8499))+(((-1.0)*r01*x8501))+((r02*x8495)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x8500))+((r02*x8496))+((r01*x8498)));
evalcond[4]=(((sj5*sj6))+(((-1.0)*r21*x8501))+((r22*x8495))+((r20*x8499))+(((-1.0)*cj5*x8497)));
evalcond[5]=((((-1.0)*cj5*sj6))+((r10*x8499))+((r12*x8495))+(((-1.0)*r11*x8501))+(((-1.0)*sj5*x8497)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x8502 = IKatan2WithCheck(IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8502.valid){
continue;
}
CheckValue<IkReal> x8503=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8503.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x8502.value)+(((1.5707963267949)*(x8503.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x8504=IKcos(j8);
IkReal x8505=IKsin(j8);
IkReal x8506=((1.0)*cj6);
IkReal x8507=(gconst1*x8504);
IkReal x8508=(gconst2*x8505);
IkReal x8509=((1.0)*gconst2*x8504);
IkReal x8510=((1.0)*gconst1*x8505);
evalcond[0]=(((r22*x8505))+(((-1.0)*r20*x8509))+((r21*x8507)));
evalcond[1]=(((r11*x8507))+((r12*x8505))+(((-1.0)*r10*x8509)));
evalcond[2]=(((r02*x8504))+(((-1.0)*r01*x8510))+((r00*x8508)));
evalcond[3]=((-1.0)+((r02*x8505))+(((-1.0)*r00*x8509))+((r01*x8507)));
evalcond[4]=(((r22*x8504))+((sj5*sj6))+(((-1.0)*r21*x8510))+(((-1.0)*cj5*x8506))+((r20*x8508)));
evalcond[5]=((((-1.0)*cj5*sj6))+((r10*x8508))+((r12*x8504))+(((-1.0)*sj5*x8506))+(((-1.0)*r11*x8510)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x8511=((-1.0)*r20);
IkReal x8512=x7224;
CheckValue<IkReal> x8514 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8511),IKFAST_ATAN2_MAGTHRESH);
if(!x8514.valid){
continue;
}
IkReal x8513=((-1.0)*(x8514.value));
sj9=gconst1;
cj9=gconst2;
j9=x8513;
sj4=1.0;
cj4=0;
j4=1.5707963267949;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
IkReal gconst0=x8513;
IkReal gconst1=(r21*x8512);
IkReal gconst2=(x8511*x8512);
j8eval[0]=1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x8515=((-1.0)*r20);
IkReal x8516=x7224;
CheckValue<IkReal> x8518 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8515),IKFAST_ATAN2_MAGTHRESH);
if(!x8518.valid){
continue;
}
IkReal x8517=((-1.0)*(x8518.value));
sj9=gconst1;
cj9=gconst2;
j9=x8517;
sj4=1.0;
cj4=0;
j4=1.5707963267949;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
IkReal gconst0=x8517;
IkReal gconst1=(r21*x8516);
IkReal gconst2=(x8515*x8516);
j8eval[0]=r02;
j8eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
IkReal x8519=((-1.0)*r20);
IkReal x8520=x7224;
CheckValue<IkReal> x8522 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8519),IKFAST_ATAN2_MAGTHRESH);
if(!x8522.valid){
continue;
}
IkReal x8521=((-1.0)*(x8522.value));
sj9=gconst1;
cj9=gconst2;
j9=x8521;
sj4=1.0;
cj4=0;
j4=1.5707963267949;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
IkReal gconst0=x8521;
IkReal gconst1=(r21*x8520);
IkReal gconst2=(x8519*x8520);
IkReal x8523=r22*r22;
IkReal x8524=((1.0)+(((-1.0)*x8523)));
IkReal x8525=(cj5*r12*sj6);
IkReal x8526=(cj6*r12*sj5);
CheckValue<IkReal> x8533=IKPowWithIntegerCheck(x8524,-1);
if(!x8533.valid){
continue;
}
IkReal x8527=x8533.value;
CheckValue<IkReal> x8534=IKPowWithIntegerCheck(((-1.0)+x8523),-1);
if(!x8534.valid){
continue;
}
IkReal x8528=x8534.value;
IkReal x8529=((1.0)*x8527);
if((x8524) < -0.00001)
continue;
IkReal x8530=IKsqrt(x8524);
IkReal x8531=((1.0)*r22*x8528*x8530);
IkReal x8532=((((-2.0)*r10*r11*r20*r21*x8527))+(((-1.0)*x8529*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-1.0)*x8529*(r10*r10)*(r20*r20))));
j8eval[0]=x8532;
j8eval[1]=IKsign(x8532);
j8eval[2]=((IKabs((x8526+x8525)))+(IKabs(((((-1.0)*x8526*x8531))+(((-1.0)*x8525*x8531))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x8535=(gconst2*r10);
IkReal x8536=(cj6*sj5);
IkReal x8537=(cj5*sj6);
IkReal x8538=((1.0)*gconst1*r11);
CheckValue<IkReal> x8539 = IKatan2WithCheck(IkReal(((((-1.0)*x8537*x8538))+(((-1.0)*x8536*x8538))+((x8535*x8537))+((x8535*x8536)))),IkReal((((r12*x8536))+((r12*x8537)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8539.valid){
continue;
}
CheckValue<IkReal> x8540=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8535*x8535)))+(((-1.0)*(r12*r12)))+(((-1.0)*gconst1*r11*x8538))+(((2.0)*gconst1*r11*x8535)))),-1);
if(!x8540.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x8539.value)+(((1.5707963267949)*(x8540.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x8541=IKcos(j8);
IkReal x8542=IKsin(j8);
IkReal x8543=((1.0)*gconst2);
IkReal x8544=(gconst1*r11);
IkReal x8545=((1.0)*cj6);
IkReal x8546=((1.0)*x8541);
IkReal x8547=(gconst1*x8541);
IkReal x8548=(gconst1*x8542);
evalcond[0]=((((-1.0)*r20*x8541*x8543))+((r21*x8547))+((r22*x8542)));
evalcond[1]=((((-1.0)*r10*x8541*x8543))+((x8541*x8544))+((r12*x8542)));
evalcond[2]=((-1.0)+((r01*x8547))+(((-1.0)*r00*x8541*x8543))+((r02*x8542)));
evalcond[3]=((((-1.0)*r02*x8546))+((r01*x8548))+(((-1.0)*r00*x8542*x8543)));
evalcond[4]=((((-1.0)*cj5*x8545))+(((-1.0)*r20*x8542*x8543))+((sj5*sj6))+(((-1.0)*r22*x8546))+((r21*x8548)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*r10*x8542*x8543))+((x8542*x8544))+(((-1.0)*r12*x8546))+(((-1.0)*sj5*x8545)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x8549=(gconst1*r01);
IkReal x8550=(gconst2*r00);
CheckValue<IkReal> x8551 = IKatan2WithCheck(IkReal(r02),IkReal((x8549+(((-1.0)*x8550)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8551.valid){
continue;
}
CheckValue<IkReal> x8552=IKPowWithIntegerCheck(IKsign(((x8549*x8549)+(x8550*x8550)+(((-2.0)*x8549*x8550))+(r02*r02))),-1);
if(!x8552.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x8551.value)+(((1.5707963267949)*(x8552.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x8553=IKcos(j8);
IkReal x8554=IKsin(j8);
IkReal x8555=((1.0)*gconst2);
IkReal x8556=(gconst1*r11);
IkReal x8557=((1.0)*cj6);
IkReal x8558=((1.0)*x8553);
IkReal x8559=(gconst1*x8553);
IkReal x8560=(gconst1*x8554);
evalcond[0]=(((r21*x8559))+((r22*x8554))+(((-1.0)*r20*x8553*x8555)));
evalcond[1]=(((r12*x8554))+(((-1.0)*r10*x8553*x8555))+((x8553*x8556)));
evalcond[2]=((-1.0)+((r01*x8559))+((r02*x8554))+(((-1.0)*r00*x8553*x8555)));
evalcond[3]=((((-1.0)*r00*x8554*x8555))+(((-1.0)*r02*x8558))+((r01*x8560)));
evalcond[4]=((((-1.0)*r20*x8554*x8555))+(((-1.0)*r22*x8558))+((sj5*sj6))+(((-1.0)*cj5*x8557))+((r21*x8560)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*r12*x8558))+(((-1.0)*r10*x8554*x8555))+((x8554*x8556))+(((-1.0)*sj5*x8557)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x8561 = IKatan2WithCheck(IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8561.valid){
continue;
}
CheckValue<IkReal> x8562=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8562.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x8561.value)+(((1.5707963267949)*(x8562.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x8563=IKcos(j8);
IkReal x8564=IKsin(j8);
IkReal x8565=((1.0)*gconst2);
IkReal x8566=(gconst1*r11);
IkReal x8567=((1.0)*cj6);
IkReal x8568=((1.0)*x8563);
IkReal x8569=(gconst1*x8563);
IkReal x8570=(gconst1*x8564);
evalcond[0]=((((-1.0)*r20*x8563*x8565))+((r22*x8564))+((r21*x8569)));
evalcond[1]=(((x8563*x8566))+(((-1.0)*r10*x8563*x8565))+((r12*x8564)));
evalcond[2]=((-1.0)+((r02*x8564))+(((-1.0)*r00*x8563*x8565))+((r01*x8569)));
evalcond[3]=(((r01*x8570))+(((-1.0)*r00*x8564*x8565))+(((-1.0)*r02*x8568)));
evalcond[4]=(((sj5*sj6))+((r21*x8570))+(((-1.0)*r22*x8568))+(((-1.0)*cj5*x8567))+(((-1.0)*r20*x8564*x8565)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*r12*x8568))+((x8564*x8566))+(((-1.0)*sj5*x8567))+(((-1.0)*r10*x8564*x8565)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[2];
IkReal x8571=((-1.0)*r20);
IkReal x8572=((-1.0)*r21);
CheckValue<IkReal> x8574 = IKatan2WithCheck(IkReal(x8572),IkReal(x8571),IKFAST_ATAN2_MAGTHRESH);
if(!x8574.valid){
continue;
}
IkReal x8573=((-1.0)*(x8574.value));
sj9=gconst1;
cj9=gconst2;
j9=x8573;
sj4=1.0;
cj4=0;
j4=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x8571);
rxp0_2=(py*r00);
rxp1_0=(py*x8572);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x8573;
IkReal gconst1=r21;
IkReal gconst2=x8571;
IkReal x8575=(r00*r20);
IkReal x8576=((1.0)*sj7);
IkReal x8577=(r01*r21);
j8eval[0]=((((-1.0)*x8575*x8576))+(((-1.0)*x8576*x8577)));
j8eval[1]=(x8575+x8577);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x8578=((-1.0)*r20);
IkReal x8579=((-1.0)*r21);
CheckValue<IkReal> x8581 = IKatan2WithCheck(IkReal(x8579),IkReal(x8578),IKFAST_ATAN2_MAGTHRESH);
if(!x8581.valid){
continue;
}
IkReal x8580=((-1.0)*(x8581.value));
sj9=gconst1;
cj9=gconst2;
j9=x8580;
sj4=1.0;
cj4=0;
j4=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x8578);
rxp0_2=(py*r00);
rxp1_0=(py*x8579);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x8580;
IkReal gconst1=r21;
IkReal gconst2=x8578;
IkReal x8582=(r01*r21);
IkReal x8583=((1.0)*cj7);
IkReal x8584=(r00*r20);
j8eval[0]=((((-1.0)*x8582*x8583))+(((-1.0)*x8583*x8584)));
j8eval[1]=(x8582+x8584);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
IkReal x8585=((-1.0)*r20);
IkReal x8586=((-1.0)*r21);
CheckValue<IkReal> x8588 = IKatan2WithCheck(IkReal(x8586),IkReal(x8585),IKFAST_ATAN2_MAGTHRESH);
if(!x8588.valid){
continue;
}
IkReal x8587=((-1.0)*(x8588.value));
sj9=gconst1;
cj9=gconst2;
j9=x8587;
sj4=1.0;
cj4=0;
j4=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x8585);
rxp0_2=(py*r00);
rxp1_0=(py*x8586);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x8587;
IkReal gconst1=r21;
IkReal gconst2=x8585;
IkReal x8589=((1.0)*cj7);
j8eval[0]=((((-1.0)*r00*r20*x8589))+(((-1.0)*r01*r21*x8589)));
j8eval[1]=r12;
j8eval[2]=sj7;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x8590=((1.0)*sj7);
CheckValue<IkReal> x8591=IKPowWithIntegerCheck(((((-1.0)*cj7*gconst1*r01))+((cj7*gconst2*r00))),-1);
if(!x8591.valid){
continue;
}
CheckValue<IkReal> x8592=IKPowWithIntegerCheck(r12,-1);
if(!x8592.valid){
continue;
}
CheckValue<IkReal> x8593=IKPowWithIntegerCheck(sj7,-1);
if(!x8593.valid){
continue;
}
if( IKabs(((x8591.value)*(((((-1.0)*gconst1*r00*x8590))+(((-1.0)*gconst2*r01*x8590)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x8592.value)*(x8593.value)*((((cj6*sj5))+((cj5*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x8591.value)*(((((-1.0)*gconst1*r00*x8590))+(((-1.0)*gconst2*r01*x8590))))))+IKsqr(((x8592.value)*(x8593.value)*((((cj6*sj5))+((cj5*sj6))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((x8591.value)*(((((-1.0)*gconst1*r00*x8590))+(((-1.0)*gconst2*r01*x8590))))), ((x8592.value)*(x8593.value)*((((cj6*sj5))+((cj5*sj6))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x8594=IKcos(j8);
IkReal x8595=IKsin(j8);
IkReal x8596=(gconst2*r20);
IkReal x8597=((1.0)*cj7);
IkReal x8598=(gconst2*r01);
IkReal x8599=((1.0)*sj5);
IkReal x8600=(cj5*cj6);
IkReal x8601=(gconst1*r21);
IkReal x8602=(gconst1*r00);
IkReal x8603=(gconst2*r21);
IkReal x8604=(gconst1*r01);
IkReal x8605=(gconst2*r00);
IkReal x8606=(gconst1*r20);
IkReal x8607=((1.0)*cj5*sj6);
IkReal x8608=(cj6*x8599);
IkReal x8609=(sj7*x8595);
IkReal x8610=((1.0)*x8594);
IkReal x8611=(cj7*x8595);
IkReal x8612=(r12*x8594);
IkReal x8613=(x8608+x8607);
evalcond[0]=(r12*x8595);
evalcond[1]=((((-1.0)*x8596*x8610))+((x8594*x8601)));
evalcond[2]=(((cj7*x8612))+x8600+(((-1.0)*sj6*x8599)));
evalcond[3]=((-1.0)+((x8594*x8604))+(((-1.0)*x8605*x8610)));
evalcond[4]=((((-1.0)*x8613))+((sj7*x8612)));
evalcond[5]=(((x8605*x8611))+((sj7*x8598))+((sj7*x8602))+(((-1.0)*x8595*x8597*x8604)));
evalcond[6]=((((-1.0)*x8597*x8602))+((x8605*x8609))+(((-1.0)*x8604*x8609))+(((-1.0)*x8597*x8598)));
evalcond[7]=(((x8596*x8611))+(((-1.0)*x8613))+((sj7*x8606))+((sj7*x8603))+(((-1.0)*x8595*x8597*x8601)));
evalcond[8]=((((-1.0)*x8597*x8606))+(((-1.0)*x8597*x8603))+((x8596*x8609))+((sj5*sj6))+(((-1.0)*x8601*x8609))+(((-1.0)*x8600)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x8614=((1.0)*sj7);
IkReal x8615=(gconst1*r01);
IkReal x8616=(gconst2*r00);
CheckValue<IkReal> x8617=IKPowWithIntegerCheck((((cj7*x8616))+(((-1.0)*cj7*x8615))),-1);
if(!x8617.valid){
continue;
}
CheckValue<IkReal> x8618=IKPowWithIntegerCheck((x8615+(((-1.0)*x8616))),-1);
if(!x8618.valid){
continue;
}
if( IKabs(((x8617.value)*(((((-1.0)*gconst2*r01*x8614))+(((-1.0)*gconst1*r00*x8614)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x8618.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x8617.value)*(((((-1.0)*gconst2*r01*x8614))+(((-1.0)*gconst1*r00*x8614))))))+IKsqr(x8618.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((x8617.value)*(((((-1.0)*gconst2*r01*x8614))+(((-1.0)*gconst1*r00*x8614))))), x8618.value);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x8619=IKcos(j8);
IkReal x8620=IKsin(j8);
IkReal x8621=(gconst2*r20);
IkReal x8622=((1.0)*cj7);
IkReal x8623=(gconst2*r01);
IkReal x8624=((1.0)*sj5);
IkReal x8625=(cj5*cj6);
IkReal x8626=(gconst1*r21);
IkReal x8627=(gconst1*r00);
IkReal x8628=(gconst2*r21);
IkReal x8629=(gconst1*r01);
IkReal x8630=(gconst2*r00);
IkReal x8631=(gconst1*r20);
IkReal x8632=((1.0)*cj5*sj6);
IkReal x8633=(cj6*x8624);
IkReal x8634=(sj7*x8620);
IkReal x8635=((1.0)*x8619);
IkReal x8636=(cj7*x8620);
IkReal x8637=(r12*x8619);
IkReal x8638=(x8633+x8632);
evalcond[0]=(r12*x8620);
evalcond[1]=(((x8619*x8626))+(((-1.0)*x8621*x8635)));
evalcond[2]=((((-1.0)*sj6*x8624))+x8625+((cj7*x8637)));
evalcond[3]=((-1.0)+((x8619*x8629))+(((-1.0)*x8630*x8635)));
evalcond[4]=((((-1.0)*x8638))+((sj7*x8637)));
evalcond[5]=(((x8630*x8636))+((sj7*x8627))+((sj7*x8623))+(((-1.0)*x8620*x8622*x8629)));
evalcond[6]=(((x8630*x8634))+(((-1.0)*x8629*x8634))+(((-1.0)*x8622*x8627))+(((-1.0)*x8622*x8623)));
evalcond[7]=((((-1.0)*x8638))+((sj7*x8628))+((sj7*x8631))+(((-1.0)*x8620*x8622*x8626))+((x8621*x8636)));
evalcond[8]=((((-1.0)*x8626*x8634))+(((-1.0)*x8625))+((sj5*sj6))+(((-1.0)*x8622*x8628))+(((-1.0)*x8622*x8631))+((x8621*x8634)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x8639=(gconst1*r01);
IkReal x8640=(gconst2*r00);
CheckValue<IkReal> x8641=IKPowWithIntegerCheck(((((-1.0)*sj7*x8639))+((sj7*x8640))),-1);
if(!x8641.valid){
continue;
}
CheckValue<IkReal> x8642=IKPowWithIntegerCheck((x8639+(((-1.0)*x8640))),-1);
if(!x8642.valid){
continue;
}
if( IKabs(((x8641.value)*((((cj7*gconst2*r01))+((cj7*gconst1*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x8642.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x8641.value)*((((cj7*gconst2*r01))+((cj7*gconst1*r00))))))+IKsqr(x8642.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((x8641.value)*((((cj7*gconst2*r01))+((cj7*gconst1*r00))))), x8642.value);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x8643=IKcos(j8);
IkReal x8644=IKsin(j8);
IkReal x8645=(gconst2*r20);
IkReal x8646=((1.0)*cj7);
IkReal x8647=(gconst2*r01);
IkReal x8648=((1.0)*sj5);
IkReal x8649=(cj5*cj6);
IkReal x8650=(gconst1*r21);
IkReal x8651=(gconst1*r00);
IkReal x8652=(gconst2*r21);
IkReal x8653=(gconst1*r01);
IkReal x8654=(gconst2*r00);
IkReal x8655=(gconst1*r20);
IkReal x8656=((1.0)*cj5*sj6);
IkReal x8657=(cj6*x8648);
IkReal x8658=(sj7*x8644);
IkReal x8659=((1.0)*x8643);
IkReal x8660=(cj7*x8644);
IkReal x8661=(r12*x8643);
IkReal x8662=(x8657+x8656);
evalcond[0]=(r12*x8644);
evalcond[1]=(((x8643*x8650))+(((-1.0)*x8645*x8659)));
evalcond[2]=(x8649+(((-1.0)*sj6*x8648))+((cj7*x8661)));
evalcond[3]=((-1.0)+((x8643*x8653))+(((-1.0)*x8654*x8659)));
evalcond[4]=((((-1.0)*x8662))+((sj7*x8661)));
evalcond[5]=(((x8654*x8660))+((sj7*x8647))+(((-1.0)*x8644*x8646*x8653))+((sj7*x8651)));
evalcond[6]=((((-1.0)*x8646*x8651))+(((-1.0)*x8653*x8658))+((x8654*x8658))+(((-1.0)*x8646*x8647)));
evalcond[7]=((((-1.0)*x8662))+((x8645*x8660))+(((-1.0)*x8644*x8646*x8650))+((sj7*x8655))+((sj7*x8652)));
evalcond[8]=((((-1.0)*x8646*x8652))+(((-1.0)*x8646*x8655))+((x8645*x8658))+(((-1.0)*x8650*x8658))+((sj5*sj6))+(((-1.0)*x8649)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x8663=gconst1*gconst1;
IkReal x8664=gconst2*gconst2;
IkReal x8665=(gconst1*sj7);
IkReal x8666=((1.0)*r00);
IkReal x8667=(r01*r11);
IkReal x8668=((1.0)*r01);
IkReal x8669=(cj7*gconst1*gconst2);
IkReal x8670=(r10*x8664);
CheckValue<IkReal> x8671 = IKatan2WithCheck(IkReal(((((-1.0)*gconst2*r10*x8665*x8666))+(((-1.0)*sj7*x8668*x8670))+((gconst2*x8665*x8667))+((r00*r11*sj7*x8663)))),IkReal(((((-1.0)*gconst2*r12*sj7*x8668))+(((-1.0)*r12*x8665*x8666)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8671.valid){
continue;
}
CheckValue<IkReal> x8672=IKPowWithIntegerCheck(IKsign((((cj7*r00*x8670))+((cj7*r02*r12))+(((-1.0)*r11*x8666*x8669))+(((-1.0)*r10*x8668*x8669))+((cj7*x8663*x8667)))),-1);
if(!x8672.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x8671.value)+(((1.5707963267949)*(x8672.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x8673=IKcos(j8);
IkReal x8674=IKsin(j8);
IkReal x8675=(gconst2*r20);
IkReal x8676=(sj5*sj6);
IkReal x8677=(cj5*cj6);
IkReal x8678=((1.0)*gconst1);
IkReal x8679=(gconst2*sj7);
IkReal x8680=(gconst2*r10);
IkReal x8681=(gconst2*r00);
IkReal x8682=(gconst1*sj7);
IkReal x8683=((1.0)*cj5*sj6);
IkReal x8684=((1.0)*cj6*sj5);
IkReal x8685=(sj7*x8674);
IkReal x8686=((1.0)*x8673);
IkReal x8687=(cj7*x8674);
IkReal x8688=((1.0)*cj7*gconst2);
IkReal x8689=(gconst1*x8673);
IkReal x8690=(r21*x8678);
IkReal x8691=(r12*x8673);
IkReal x8692=(sj7*x8673);
IkReal x8693=(cj7*x8673);
IkReal x8694=(x8683+x8684);
evalcond[0]=((((-1.0)*x8675*x8686))+((r22*x8674))+((r21*x8689)));
evalcond[1]=(((r11*x8689))+((r12*x8674))+(((-1.0)*x8680*x8686)));
evalcond[2]=((-1.0)+(((-1.0)*x8681*x8686))+((r01*x8689))+((r02*x8674)));
evalcond[3]=(((x8681*x8687))+((r00*x8682))+(((-1.0)*r01*x8678*x8687))+((r01*x8679))+((r02*x8693)));
evalcond[4]=((((-1.0)*r01*x8688))+(((-1.0)*cj7*r00*x8678))+(((-1.0)*r01*x8678*x8685))+((r02*x8692))+((r00*x8674*x8679)));
evalcond[5]=(x8677+((r11*x8679))+((x8680*x8687))+((r10*x8682))+((cj7*x8691))+(((-1.0)*x8676))+(((-1.0)*r11*x8678*x8687)));
evalcond[6]=((((-1.0)*x8694))+((r22*x8693))+((r20*x8682))+(((-1.0)*x8687*x8690))+((x8675*x8687))+((r21*x8679)));
evalcond[7]=(x8676+((r22*x8692))+(((-1.0)*x8685*x8690))+(((-1.0)*r21*x8688))+((x8675*x8685))+(((-1.0)*x8677))+(((-1.0)*cj7*r20*x8678)));
evalcond[8]=((((-1.0)*x8694))+((sj7*x8691))+(((-1.0)*cj7*r10*x8678))+(((-1.0)*r11*x8688))+((r10*x8674*x8679))+(((-1.0)*r11*x8678*x8685)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x8695=gconst2*gconst2;
IkReal x8696=gconst1*gconst1;
IkReal x8697=(r01*sj7);
IkReal x8698=(cj7*r01);
IkReal x8699=(r00*sj7);
IkReal x8700=(r11*x8696);
IkReal x8701=((1.0)*gconst1*gconst2);
IkReal x8702=(r10*x8695);
IkReal x8703=(cj7*gconst1*r00);
CheckValue<IkReal> x8704 = IKatan2WithCheck(IkReal(((((-1.0)*cj7*r00*x8700))+((gconst2*r10*x8703))+(((-1.0)*r11*x8698*x8701))+((x8698*x8702)))),IkReal((((r12*x8703))+((gconst2*r12*x8698)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8704.valid){
continue;
}
CheckValue<IkReal> x8705=IKPowWithIntegerCheck(IKsign((((r02*r12*sj7))+(((-1.0)*r11*x8699*x8701))+((x8697*x8700))+(((-1.0)*r10*x8697*x8701))+((x8699*x8702)))),-1);
if(!x8705.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x8704.value)+(((1.5707963267949)*(x8705.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x8706=IKcos(j8);
IkReal x8707=IKsin(j8);
IkReal x8708=(gconst2*r20);
IkReal x8709=(sj5*sj6);
IkReal x8710=(cj5*cj6);
IkReal x8711=((1.0)*gconst1);
IkReal x8712=(gconst2*sj7);
IkReal x8713=(gconst2*r10);
IkReal x8714=(gconst2*r00);
IkReal x8715=(gconst1*sj7);
IkReal x8716=((1.0)*cj5*sj6);
IkReal x8717=((1.0)*cj6*sj5);
IkReal x8718=(sj7*x8707);
IkReal x8719=((1.0)*x8706);
IkReal x8720=(cj7*x8707);
IkReal x8721=((1.0)*cj7*gconst2);
IkReal x8722=(gconst1*x8706);
IkReal x8723=(r21*x8711);
IkReal x8724=(r12*x8706);
IkReal x8725=(sj7*x8706);
IkReal x8726=(cj7*x8706);
IkReal x8727=(x8716+x8717);
evalcond[0]=(((r21*x8722))+(((-1.0)*x8708*x8719))+((r22*x8707)));
evalcond[1]=((((-1.0)*x8713*x8719))+((r11*x8722))+((r12*x8707)));
evalcond[2]=((-1.0)+(((-1.0)*x8714*x8719))+((r02*x8707))+((r01*x8722)));
evalcond[3]=((((-1.0)*r01*x8711*x8720))+((r02*x8726))+((r00*x8715))+((x8714*x8720))+((r01*x8712)));
evalcond[4]=(((r02*x8725))+((r00*x8707*x8712))+(((-1.0)*cj7*r00*x8711))+(((-1.0)*r01*x8721))+(((-1.0)*r01*x8711*x8718)));
evalcond[5]=(((cj7*x8724))+x8710+(((-1.0)*x8709))+((x8713*x8720))+(((-1.0)*r11*x8711*x8720))+((r11*x8712))+((r10*x8715)));
evalcond[6]=((((-1.0)*x8720*x8723))+((r22*x8726))+((r20*x8715))+(((-1.0)*x8727))+((r21*x8712))+((x8708*x8720)));
evalcond[7]=(x8709+((r22*x8725))+((x8708*x8718))+(((-1.0)*r21*x8721))+(((-1.0)*x8710))+(((-1.0)*x8718*x8723))+(((-1.0)*cj7*r20*x8711)));
evalcond[8]=(((sj7*x8724))+(((-1.0)*cj7*r10*x8711))+(((-1.0)*r11*x8711*x8718))+((r10*x8707*x8712))+(((-1.0)*x8727))+(((-1.0)*r11*x8721)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x8728 = IKatan2WithCheck(IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8728.valid){
continue;
}
CheckValue<IkReal> x8729=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8729.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x8728.value)+(((1.5707963267949)*(x8729.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x8730=IKcos(j8);
IkReal x8731=IKsin(j8);
IkReal x8732=(gconst2*r20);
IkReal x8733=(sj5*sj6);
IkReal x8734=(cj5*cj6);
IkReal x8735=((1.0)*gconst1);
IkReal x8736=(gconst2*sj7);
IkReal x8737=(gconst2*r10);
IkReal x8738=(gconst2*r00);
IkReal x8739=(gconst1*sj7);
IkReal x8740=((1.0)*cj5*sj6);
IkReal x8741=((1.0)*cj6*sj5);
IkReal x8742=(sj7*x8731);
IkReal x8743=((1.0)*x8730);
IkReal x8744=(cj7*x8731);
IkReal x8745=((1.0)*cj7*gconst2);
IkReal x8746=(gconst1*x8730);
IkReal x8747=(r21*x8735);
IkReal x8748=(r12*x8730);
IkReal x8749=(sj7*x8730);
IkReal x8750=(cj7*x8730);
IkReal x8751=(x8741+x8740);
evalcond[0]=(((r22*x8731))+(((-1.0)*x8732*x8743))+((r21*x8746)));
evalcond[1]=((((-1.0)*x8737*x8743))+((r12*x8731))+((r11*x8746)));
evalcond[2]=((-1.0)+((r01*x8746))+(((-1.0)*x8738*x8743))+((r02*x8731)));
evalcond[3]=(((r02*x8750))+(((-1.0)*r01*x8735*x8744))+((x8738*x8744))+((r00*x8739))+((r01*x8736)));
evalcond[4]=((((-1.0)*cj7*r00*x8735))+(((-1.0)*r01*x8735*x8742))+(((-1.0)*r01*x8745))+((r02*x8749))+((r00*x8731*x8736)));
evalcond[5]=(((r11*x8736))+((r10*x8739))+x8734+(((-1.0)*x8733))+((x8737*x8744))+((cj7*x8748))+(((-1.0)*r11*x8735*x8744)));
evalcond[6]=(((r22*x8750))+((r21*x8736))+(((-1.0)*x8751))+(((-1.0)*x8744*x8747))+((r20*x8739))+((x8732*x8744)));
evalcond[7]=(x8733+(((-1.0)*x8742*x8747))+(((-1.0)*x8734))+(((-1.0)*cj7*r20*x8735))+((r22*x8749))+((x8732*x8742))+(((-1.0)*r21*x8745)));
evalcond[8]=((((-1.0)*r11*x8745))+(((-1.0)*cj7*r10*x8735))+(((-1.0)*x8751))+(((-1.0)*r11*x8735*x8742))+((r10*x8731*x8736))+((sj7*x8748)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x8752=((-1.0)*r20);
IkReal x8753=x7224;
CheckValue<IkReal> x8755 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8752),IKFAST_ATAN2_MAGTHRESH);
if(!x8755.valid){
continue;
}
IkReal x8754=((-1.0)*(x8755.value));
sj9=gconst1;
cj9=gconst2;
j9=x8754;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal gconst0=x8754;
IkReal gconst1=(r21*x8753);
IkReal gconst2=(x8752*x8753);
j8eval[0]=1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
IkReal x8756=((-1.0)*r20);
IkReal x8757=x7224;
CheckValue<IkReal> x8759 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8756),IKFAST_ATAN2_MAGTHRESH);
if(!x8759.valid){
continue;
}
IkReal x8758=((-1.0)*(x8759.value));
sj9=gconst1;
cj9=gconst2;
j9=x8758;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal gconst0=x8758;
IkReal gconst1=(r21*x8757);
IkReal gconst2=(x8756*x8757);
CheckValue<IkReal> x8767=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x8767.valid){
continue;
}
IkReal x8760=x8767.value;
IkReal x8761=(sj7*x8760);
IkReal x8762=(r11*x8761);
IkReal x8763=(r00*x8761);
IkReal x8764=(r01*x8761);
IkReal x8765=(r10*x8761);
IkReal x8766=(r20*r21*x8761);
j8eval[0]=IKsign((((r02*r12*sj7))+((r00*r20*r21*x8762))+((r10*x8763*(r20*r20)))+((r10*r20*r21*x8764))+((r01*x8762*(r21*r21)))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
IkReal x8768=((-1.0)*r20);
IkReal x8769=x7224;
CheckValue<IkReal> x8771 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8768),IKFAST_ATAN2_MAGTHRESH);
if(!x8771.valid){
continue;
}
IkReal x8770=((-1.0)*(x8771.value));
sj9=gconst1;
cj9=gconst2;
j9=x8770;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal gconst0=x8770;
IkReal gconst1=(r21*x8769);
IkReal gconst2=(x8768*x8769);
CheckValue<IkReal> x8779=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x8779.valid){
continue;
}
IkReal x8772=x8779.value;
IkReal x8773=(cj7*x8772);
IkReal x8774=(r10*x8773);
IkReal x8775=(r00*x8773);
IkReal x8776=(r01*x8773);
IkReal x8777=(r11*x8773);
IkReal x8778=(r20*r21*x8773);
j8eval[0]=IKsign((((r00*x8774*(r20*r20)))+((cj7*r02*r12))+((r11*x8776*(r21*r21)))+((r11*r20*r21*x8775))+((r01*r20*r21*x8774))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x8780=((-1.0)*r20);
IkReal x8781=x7224;
CheckValue<IkReal> x8783 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8780),IKFAST_ATAN2_MAGTHRESH);
if(!x8783.valid){
continue;
}
IkReal x8782=((-1.0)*(x8783.value));
sj9=gconst1;
cj9=gconst2;
j9=x8782;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
IkReal gconst0=x8782;
IkReal gconst1=(r21*x8781);
IkReal gconst2=(x8780*x8781);
j8eval[0]=1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[4];
IkReal x8784=((-1.0)*r20);
IkReal x8785=x7224;
CheckValue<IkReal> x8787 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8784),IKFAST_ATAN2_MAGTHRESH);
if(!x8787.valid){
continue;
}
IkReal x8786=((-1.0)*(x8787.value));
sj9=gconst1;
cj9=gconst2;
j9=x8786;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
IkReal gconst0=x8786;
IkReal gconst1=(r21*x8785);
IkReal gconst2=(x8784*x8785);
IkReal x8788=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8792=IKPowWithIntegerCheck(x8788,-1);
if(!x8792.valid){
continue;
}
IkReal x8789=x8792.value;
IkReal x8790=((1.0)*x8789);
IkReal x8791=((((-2.0)*r00*r01*r20*r21*x8789))+(((-1.0)*(r02*r02)))+(((-1.0)*x8790*(r01*r01)*(r21*r21)))+(((-1.0)*x8790*(r00*r00)*(r20*r20))));
j8eval[0]=x8791;
j8eval[1]=IKsign(x8791);
j8eval[2]=r02;
j8eval[3]=x8788;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x8793=((-1.0)*r20);
IkReal x8794=x7224;
CheckValue<IkReal> x8796 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8793),IKFAST_ATAN2_MAGTHRESH);
if(!x8796.valid){
continue;
}
IkReal x8795=((-1.0)*(x8796.value));
sj9=gconst1;
cj9=gconst2;
j9=x8795;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
IkReal gconst0=x8795;
IkReal gconst1=(r21*x8794);
IkReal gconst2=(x8793*x8794);
IkReal x8797=r22*r22;
CheckValue<IkReal> x8800=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8797))),-1);
if(!x8800.valid){
continue;
}
IkReal x8798=x8800.value;
IkReal x8799=(((x8798*(r20*r20*r20*r20)))+x8797+(((2.0)*x8798*(r20*r20)*(r21*r21)))+((x8798*(r21*r21*r21*r21))));
j8eval[0]=x8799;
j8eval[1]=IKsign(x8799);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x8801=(cj5*cj6);
IkReal x8802=(sj5*sj6);
IkReal x8803=(gconst1*r21);
IkReal x8804=(gconst2*r20);
CheckValue<IkReal> x8805 = IKatan2WithCheck(IkReal((((x8801*x8804))+((x8802*x8803))+(((-1.0)*x8801*x8803))+(((-1.0)*x8802*x8804)))),IkReal(((((-1.0)*r22*x8802))+((r22*x8801)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8805.valid){
continue;
}
CheckValue<IkReal> x8806=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x8803*x8804))+(x8804*x8804)+(x8803*x8803))),-1);
if(!x8806.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x8805.value)+(((1.5707963267949)*(x8806.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x8807=IKcos(j8);
IkReal x8808=IKsin(j8);
IkReal x8809=(gconst1*x8807);
IkReal x8810=(gconst2*x8808);
IkReal x8811=((1.0)*gconst2*x8807);
IkReal x8812=((1.0)*gconst1*x8808);
evalcond[0]=(((r21*x8809))+((r22*x8808))+(((-1.0)*r20*x8811)));
evalcond[1]=((((-1.0)*r10*x8811))+((r12*x8808))+((r11*x8809)));
evalcond[2]=(((r02*x8807))+(((-1.0)*r01*x8812))+((r00*x8810)));
evalcond[3]=((1.0)+((r02*x8808))+((r01*x8809))+(((-1.0)*r00*x8811)));
evalcond[4]=((((-1.0)*r11*x8812))+((cj6*sj5))+((r10*x8810))+((r12*x8807))+((cj5*sj6)));
evalcond[5]=(((r22*x8807))+(((-1.0)*r21*x8812))+((sj5*sj6))+((r20*x8810))+(((-1.0)*cj5*cj6)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x8813=(gconst1*r01);
IkReal x8814=(gconst2*r00);
CheckValue<IkReal> x8815=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x8814*x8814)))+(((-1.0)*(x8813*x8813)))+(((2.0)*x8813*x8814)))),-1);
if(!x8815.valid){
continue;
}
CheckValue<IkReal> x8816 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x8814))+x8813)),IKFAST_ATAN2_MAGTHRESH);
if(!x8816.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8815.value)))+(x8816.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x8817=IKcos(j8);
IkReal x8818=IKsin(j8);
IkReal x8819=(gconst1*x8817);
IkReal x8820=(gconst2*x8818);
IkReal x8821=((1.0)*gconst2*x8817);
IkReal x8822=((1.0)*gconst1*x8818);
evalcond[0]=(((r21*x8819))+((r22*x8818))+(((-1.0)*r20*x8821)));
evalcond[1]=(((r12*x8818))+((r11*x8819))+(((-1.0)*r10*x8821)));
evalcond[2]=(((r02*x8817))+(((-1.0)*r01*x8822))+((r00*x8820)));
evalcond[3]=((1.0)+((r02*x8818))+((r01*x8819))+(((-1.0)*r00*x8821)));
evalcond[4]=((((-1.0)*r11*x8822))+((cj6*sj5))+((r12*x8817))+((r10*x8820))+((cj5*sj6)));
evalcond[5]=((((-1.0)*r21*x8822))+((r22*x8817))+((sj5*sj6))+((r20*x8820))+(((-1.0)*cj5*cj6)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x8823=((1.0)*gconst2);
CheckValue<IkReal> x8824=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8823))+(((-1.0)*gconst1*r10)))),-1);
if(!x8824.valid){
continue;
}
CheckValue<IkReal> x8825 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x8823))+((gconst1*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8825.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8824.value)))+(x8825.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x8826=IKcos(j8);
IkReal x8827=IKsin(j8);
IkReal x8828=(gconst1*x8826);
IkReal x8829=(gconst2*x8827);
IkReal x8830=((1.0)*gconst2*x8826);
IkReal x8831=((1.0)*gconst1*x8827);
evalcond[0]=(((r21*x8828))+((r22*x8827))+(((-1.0)*r20*x8830)));
evalcond[1]=(((r12*x8827))+(((-1.0)*r10*x8830))+((r11*x8828)));
evalcond[2]=(((r02*x8826))+((r00*x8829))+(((-1.0)*r01*x8831)));
evalcond[3]=((1.0)+((r02*x8827))+((r01*x8828))+(((-1.0)*r00*x8830)));
evalcond[4]=(((cj6*sj5))+((r12*x8826))+((r10*x8829))+((cj5*sj6))+(((-1.0)*r11*x8831)));
evalcond[5]=(((r22*x8826))+((sj5*sj6))+(((-1.0)*r21*x8831))+((r20*x8829))+(((-1.0)*cj5*cj6)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x8832=((-1.0)*r20);
IkReal x8833=x7224;
CheckValue<IkReal> x8835 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8832),IKFAST_ATAN2_MAGTHRESH);
if(!x8835.valid){
continue;
}
IkReal x8834=((-1.0)*(x8835.value));
sj9=gconst1;
cj9=gconst2;
j9=x8834;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
IkReal gconst0=x8834;
IkReal gconst1=(r21*x8833);
IkReal gconst2=(x8832*x8833);
j8eval[0]=1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[4];
IkReal x8836=((-1.0)*r20);
IkReal x8837=x7224;
CheckValue<IkReal> x8839 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8836),IKFAST_ATAN2_MAGTHRESH);
if(!x8839.valid){
continue;
}
IkReal x8838=((-1.0)*(x8839.value));
sj9=gconst1;
cj9=gconst2;
j9=x8838;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
IkReal gconst0=x8838;
IkReal gconst1=(r21*x8837);
IkReal gconst2=(x8836*x8837);
IkReal x8840=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8844=IKPowWithIntegerCheck(x8840,-1);
if(!x8844.valid){
continue;
}
IkReal x8841=x8844.value;
IkReal x8842=((1.0)*x8841);
IkReal x8843=((((-1.0)*x8842*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x8841))+(((-1.0)*(r02*r02)))+(((-1.0)*x8842*(r01*r01)*(r21*r21))));
j8eval[0]=x8843;
j8eval[1]=IKsign(x8843);
j8eval[2]=r02;
j8eval[3]=x8840;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x8845=((-1.0)*r20);
IkReal x8846=x7224;
CheckValue<IkReal> x8848 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8845),IKFAST_ATAN2_MAGTHRESH);
if(!x8848.valid){
continue;
}
IkReal x8847=((-1.0)*(x8848.value));
sj9=gconst1;
cj9=gconst2;
j9=x8847;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
IkReal gconst0=x8847;
IkReal gconst1=(r21*x8846);
IkReal gconst2=(x8845*x8846);
IkReal x8849=((1.0)*(r22*r22));
CheckValue<IkReal> x8853=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8849))),-1);
if(!x8853.valid){
continue;
}
IkReal x8850=x8853.value;
IkReal x8851=((1.0)*x8850);
IkReal x8852=((((-2.0)*x8850*(r20*r20)*(r21*r21)))+(((-1.0)*x8851*(r20*r20*r20*r20)))+(((-1.0)*x8851*(r21*r21*r21*r21)))+(((-1.0)*x8849)));
j8eval[0]=x8852;
j8eval[1]=IKsign(x8852);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x8854=(cj5*cj6);
IkReal x8855=(sj5*sj6);
IkReal x8856=(gconst1*r21);
IkReal x8857=(gconst2*r20);
CheckValue<IkReal> x8858=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8856*x8856)))+(((-1.0)*(x8857*x8857)))+(((-1.0)*(r22*r22)))+(((2.0)*x8856*x8857)))),-1);
if(!x8858.valid){
continue;
}
CheckValue<IkReal> x8859 = IKatan2WithCheck(IkReal(((((-1.0)*x8854*x8856))+(((-1.0)*x8855*x8857))+((x8854*x8857))+((x8855*x8856)))),IkReal(((((-1.0)*r22*x8855))+((r22*x8854)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8859.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8858.value)))+(x8859.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x8860=IKcos(j8);
IkReal x8861=IKsin(j8);
IkReal x8862=((1.0)*gconst2);
IkReal x8863=(gconst1*r11);
IkReal x8864=((1.0)*x8860);
IkReal x8865=(gconst1*x8860);
IkReal x8866=(gconst1*x8861);
evalcond[0]=(((r21*x8865))+((r22*x8861))+(((-1.0)*r20*x8860*x8862)));
evalcond[1]=(((x8860*x8863))+((r12*x8861))+(((-1.0)*r10*x8860*x8862)));
evalcond[2]=((1.0)+(((-1.0)*r00*x8860*x8862))+((r02*x8861))+((r01*x8865)));
evalcond[3]=((((-1.0)*r00*x8861*x8862))+((r01*x8866))+(((-1.0)*r02*x8864)));
evalcond[4]=(((cj6*sj5))+((x8861*x8863))+((cj5*sj6))+(((-1.0)*r12*x8864))+(((-1.0)*r10*x8861*x8862)));
evalcond[5]=((((-1.0)*r20*x8861*x8862))+((sj5*sj6))+((r21*x8866))+(((-1.0)*r22*x8864))+(((-1.0)*cj5*cj6)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x8867=(gconst1*r01);
IkReal x8868=(gconst2*r00);
CheckValue<IkReal> x8869 = IKatan2WithCheck(IkReal(r02),IkReal((x8867+(((-1.0)*x8868)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8869.valid){
continue;
}
CheckValue<IkReal> x8870=IKPowWithIntegerCheck(IKsign(((((2.0)*x8867*x8868))+(((-1.0)*(r02*r02)))+(((-1.0)*(x8868*x8868)))+(((-1.0)*(x8867*x8867))))),-1);
if(!x8870.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x8869.value)+(((1.5707963267949)*(x8870.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x8871=IKcos(j8);
IkReal x8872=IKsin(j8);
IkReal x8873=((1.0)*gconst2);
IkReal x8874=(gconst1*r11);
IkReal x8875=((1.0)*x8871);
IkReal x8876=(gconst1*x8871);
IkReal x8877=(gconst1*x8872);
evalcond[0]=(((r21*x8876))+((r22*x8872))+(((-1.0)*r20*x8871*x8873)));
evalcond[1]=((((-1.0)*r10*x8871*x8873))+((x8871*x8874))+((r12*x8872)));
evalcond[2]=((1.0)+((r02*x8872))+((r01*x8876))+(((-1.0)*r00*x8871*x8873)));
evalcond[3]=((((-1.0)*r02*x8875))+((r01*x8877))+(((-1.0)*r00*x8872*x8873)));
evalcond[4]=((((-1.0)*r10*x8872*x8873))+((cj6*sj5))+((x8872*x8874))+((cj5*sj6))+(((-1.0)*r12*x8875)));
evalcond[5]=(((sj5*sj6))+(((-1.0)*r22*x8875))+((r21*x8877))+(((-1.0)*r20*x8872*x8873))+(((-1.0)*cj5*cj6)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x8878=((1.0)*gconst2);
CheckValue<IkReal> x8879 = IKatan2WithCheck(IkReal((((gconst1*r21))+(((-1.0)*r20*x8878)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x8879.valid){
continue;
}
CheckValue<IkReal> x8880=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x8878)))),-1);
if(!x8880.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x8879.value)+(((1.5707963267949)*(x8880.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x8881=IKcos(j8);
IkReal x8882=IKsin(j8);
IkReal x8883=((1.0)*gconst2);
IkReal x8884=(gconst1*r11);
IkReal x8885=((1.0)*x8881);
IkReal x8886=(gconst1*x8881);
IkReal x8887=(gconst1*x8882);
evalcond[0]=(((r21*x8886))+((r22*x8882))+(((-1.0)*r20*x8881*x8883)));
evalcond[1]=((((-1.0)*r10*x8881*x8883))+((x8881*x8884))+((r12*x8882)));
evalcond[2]=((1.0)+((r02*x8882))+(((-1.0)*r00*x8881*x8883))+((r01*x8886)));
evalcond[3]=((((-1.0)*r00*x8882*x8883))+(((-1.0)*r02*x8885))+((r01*x8887)));
evalcond[4]=(((cj6*sj5))+(((-1.0)*r12*x8885))+((cj5*sj6))+(((-1.0)*r10*x8882*x8883))+((x8882*x8884)));
evalcond[5]=((((-1.0)*r22*x8885))+((r21*x8887))+((sj5*sj6))+(((-1.0)*r20*x8882*x8883))+(((-1.0)*cj5*cj6)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[2];
IkReal x8888=((-1.0)*r20);
IkReal x8889=((-1.0)*r21);
CheckValue<IkReal> x8891 = IKatan2WithCheck(IkReal(x8889),IkReal(x8888),IKFAST_ATAN2_MAGTHRESH);
if(!x8891.valid){
continue;
}
IkReal x8890=((-1.0)*(x8891.value));
sj9=gconst1;
cj9=gconst2;
j9=x8890;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x8888);
rxp0_2=(py*r00);
rxp1_0=(py*x8889);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x8890;
IkReal gconst1=r21;
IkReal gconst2=x8888;
IkReal x8892=(r01*r21);
IkReal x8893=((1.0)*cj7);
IkReal x8894=(r00*r20);
j8eval[0]=((((-1.0)*x8892*x8893))+(((-1.0)*x8893*x8894)));
j8eval[1]=(x8894+x8892);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
IkReal x8895=((-1.0)*r20);
IkReal x8896=((-1.0)*r21);
CheckValue<IkReal> x8898 = IKatan2WithCheck(IkReal(x8896),IkReal(x8895),IKFAST_ATAN2_MAGTHRESH);
if(!x8898.valid){
continue;
}
IkReal x8897=((-1.0)*(x8898.value));
sj9=gconst1;
cj9=gconst2;
j9=x8897;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x8895);
rxp0_2=(py*r00);
rxp1_0=(py*x8896);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x8897;
IkReal gconst1=r21;
IkReal gconst2=x8895;
IkReal x8899=((1.0)*sj7);
j8eval[0]=((((-1.0)*r00*r20*x8899))+(((-1.0)*r01*r21*x8899)));
j8eval[1]=r12;
j8eval[2]=sj7;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
IkReal x8900=((-1.0)*r20);
IkReal x8901=((-1.0)*r21);
CheckValue<IkReal> x8903 = IKatan2WithCheck(IkReal(x8901),IkReal(x8900),IKFAST_ATAN2_MAGTHRESH);
if(!x8903.valid){
continue;
}
IkReal x8902=((-1.0)*(x8903.value));
sj9=gconst1;
cj9=gconst2;
j9=x8902;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x8900);
rxp0_2=(py*r00);
rxp1_0=(py*x8901);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x8902;
IkReal gconst1=r21;
IkReal gconst2=x8900;
IkReal x8904=((1.0)*cj7);
j8eval[0]=((((-1.0)*r00*r20*x8904))+(((-1.0)*r01*r21*x8904)));
j8eval[1]=cj7;
j8eval[2]=r12;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x8905=((1.0)*sj7);
CheckValue<IkReal> x8906=IKPowWithIntegerCheck(((((-1.0)*cj7*gconst1*r01))+((cj7*gconst2*r00))),-1);
if(!x8906.valid){
continue;
}
CheckValue<IkReal> x8907=IKPowWithIntegerCheck(cj7,-1);
if(!x8907.valid){
continue;
}
CheckValue<IkReal> x8908=IKPowWithIntegerCheck(r12,-1);
if(!x8908.valid){
continue;
}
if( IKabs(((x8906.value)*(((((-1.0)*gconst1*r00*x8905))+(((-1.0)*gconst2*r01*x8905)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x8907.value)*(x8908.value)*((((cj5*cj6))+(((-1.0)*sj5*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x8906.value)*(((((-1.0)*gconst1*r00*x8905))+(((-1.0)*gconst2*r01*x8905))))))+IKsqr(((x8907.value)*(x8908.value)*((((cj5*cj6))+(((-1.0)*sj5*sj6))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((x8906.value)*(((((-1.0)*gconst1*r00*x8905))+(((-1.0)*gconst2*r01*x8905))))), ((x8907.value)*(x8908.value)*((((cj5*cj6))+(((-1.0)*sj5*sj6))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x8909=IKcos(j8);
IkReal x8910=IKsin(j8);
IkReal x8911=(sj5*sj6);
IkReal x8912=(gconst2*r20);
IkReal x8913=((1.0)*cj7);
IkReal x8914=(gconst2*r01);
IkReal x8915=((1.0)*cj6);
IkReal x8916=(gconst1*r00);
IkReal x8917=(gconst2*r21);
IkReal x8918=(gconst2*r00);
IkReal x8919=(gconst1*r20);
IkReal x8920=(cj5*sj6);
IkReal x8921=(cj5*x8915);
IkReal x8922=(sj7*x8910);
IkReal x8923=((1.0)*x8909);
IkReal x8924=(cj7*x8910);
IkReal x8925=((1.0)*gconst1*r21);
IkReal x8926=(r12*x8909);
IkReal x8927=(gconst1*x8909);
IkReal x8928=((1.0)*gconst1*r01);
evalcond[0]=(r12*x8910);
evalcond[1]=(((cj6*sj5))+x8920+((sj7*x8926)));
evalcond[2]=((((-1.0)*x8912*x8923))+((r21*x8927)));
evalcond[3]=(((cj7*x8926))+(((-1.0)*x8921))+x8911);
evalcond[4]=((1.0)+(((-1.0)*x8918*x8923))+((r01*x8927)));
evalcond[5]=((((-1.0)*gconst1*r01*x8910*x8913))+((sj7*x8916))+((sj7*x8914))+((x8918*x8924)));
evalcond[6]=((((-1.0)*x8922*x8928))+((x8918*x8922))+(((-1.0)*x8913*x8914))+(((-1.0)*x8913*x8916)));
evalcond[7]=(((sj7*x8917))+((sj7*x8919))+(((-1.0)*sj5*x8915))+(((-1.0)*gconst1*r21*x8910*x8913))+((x8912*x8924))+(((-1.0)*x8920)));
evalcond[8]=((((-1.0)*x8922*x8925))+(((-1.0)*x8921))+x8911+(((-1.0)*x8913*x8919))+(((-1.0)*x8913*x8917))+((x8912*x8922)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x8929=IKPowWithIntegerCheck(((((-1.0)*gconst1*r01*sj7))+((gconst2*r00*sj7))),-1);
if(!x8929.valid){
continue;
}
CheckValue<IkReal> x8930=IKPowWithIntegerCheck(r12,-1);
if(!x8930.valid){
continue;
}
CheckValue<IkReal> x8931=IKPowWithIntegerCheck(sj7,-1);
if(!x8931.valid){
continue;
}
if( IKabs(((x8929.value)*((((cj7*gconst2*r01))+((cj7*gconst1*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x8930.value)*(x8931.value)*(((((-1.0)*cj5*sj6))+(((-1.0)*cj6*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x8929.value)*((((cj7*gconst2*r01))+((cj7*gconst1*r00))))))+IKsqr(((x8930.value)*(x8931.value)*(((((-1.0)*cj5*sj6))+(((-1.0)*cj6*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((x8929.value)*((((cj7*gconst2*r01))+((cj7*gconst1*r00))))), ((x8930.value)*(x8931.value)*(((((-1.0)*cj5*sj6))+(((-1.0)*cj6*sj5))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x8932=IKcos(j8);
IkReal x8933=IKsin(j8);
IkReal x8934=(sj5*sj6);
IkReal x8935=(gconst2*r20);
IkReal x8936=((1.0)*cj7);
IkReal x8937=(gconst2*r01);
IkReal x8938=((1.0)*cj6);
IkReal x8939=(gconst1*r00);
IkReal x8940=(gconst2*r21);
IkReal x8941=(gconst2*r00);
IkReal x8942=(gconst1*r20);
IkReal x8943=(cj5*sj6);
IkReal x8944=(cj5*x8938);
IkReal x8945=(sj7*x8933);
IkReal x8946=((1.0)*x8932);
IkReal x8947=(cj7*x8933);
IkReal x8948=((1.0)*gconst1*r21);
IkReal x8949=(r12*x8932);
IkReal x8950=(gconst1*x8932);
IkReal x8951=((1.0)*gconst1*r01);
evalcond[0]=(r12*x8933);
evalcond[1]=(((cj6*sj5))+x8943+((sj7*x8949)));
evalcond[2]=((((-1.0)*x8935*x8946))+((r21*x8950)));
evalcond[3]=(x8934+((cj7*x8949))+(((-1.0)*x8944)));
evalcond[4]=((1.0)+(((-1.0)*x8941*x8946))+((r01*x8950)));
evalcond[5]=((((-1.0)*gconst1*r01*x8933*x8936))+((sj7*x8939))+((sj7*x8937))+((x8941*x8947)));
evalcond[6]=((((-1.0)*x8936*x8937))+(((-1.0)*x8936*x8939))+(((-1.0)*x8945*x8951))+((x8941*x8945)));
evalcond[7]=((((-1.0)*sj5*x8938))+(((-1.0)*gconst1*r21*x8933*x8936))+(((-1.0)*x8943))+((sj7*x8940))+((sj7*x8942))+((x8935*x8947)));
evalcond[8]=((((-1.0)*x8936*x8940))+(((-1.0)*x8936*x8942))+x8934+(((-1.0)*x8945*x8948))+(((-1.0)*x8944))+((x8935*x8945)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x8952=((1.0)*sj7);
IkReal x8953=(gconst1*r01);
IkReal x8954=(gconst2*r00);
CheckValue<IkReal> x8955=IKPowWithIntegerCheck(((((-1.0)*cj7*x8953))+((cj7*x8954))),-1);
if(!x8955.valid){
continue;
}
CheckValue<IkReal> x8956=IKPowWithIntegerCheck((x8953+(((-1.0)*x8954))),-1);
if(!x8956.valid){
continue;
}
if( IKabs(((x8955.value)*(((((-1.0)*gconst2*r01*x8952))+(((-1.0)*gconst1*r00*x8952)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x8956.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x8955.value)*(((((-1.0)*gconst2*r01*x8952))+(((-1.0)*gconst1*r00*x8952))))))+IKsqr(((-1.0)*(x8956.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((x8955.value)*(((((-1.0)*gconst2*r01*x8952))+(((-1.0)*gconst1*r00*x8952))))), ((-1.0)*(x8956.value)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x8957=IKcos(j8);
IkReal x8958=IKsin(j8);
IkReal x8959=(sj5*sj6);
IkReal x8960=(gconst2*r20);
IkReal x8961=((1.0)*cj7);
IkReal x8962=(gconst2*r01);
IkReal x8963=((1.0)*cj6);
IkReal x8964=(gconst1*r00);
IkReal x8965=(gconst2*r21);
IkReal x8966=(gconst2*r00);
IkReal x8967=(gconst1*r20);
IkReal x8968=(cj5*sj6);
IkReal x8969=(cj5*x8963);
IkReal x8970=(sj7*x8958);
IkReal x8971=((1.0)*x8957);
IkReal x8972=(cj7*x8958);
IkReal x8973=((1.0)*gconst1*r21);
IkReal x8974=(r12*x8957);
IkReal x8975=(gconst1*x8957);
IkReal x8976=((1.0)*gconst1*r01);
evalcond[0]=(r12*x8958);
evalcond[1]=(((cj6*sj5))+x8968+((sj7*x8974)));
evalcond[2]=(((r21*x8975))+(((-1.0)*x8960*x8971)));
evalcond[3]=(x8959+((cj7*x8974))+(((-1.0)*x8969)));
evalcond[4]=((1.0)+((r01*x8975))+(((-1.0)*x8966*x8971)));
evalcond[5]=((((-1.0)*gconst1*r01*x8958*x8961))+((sj7*x8964))+((sj7*x8962))+((x8966*x8972)));
evalcond[6]=(((x8966*x8970))+(((-1.0)*x8961*x8962))+(((-1.0)*x8961*x8964))+(((-1.0)*x8970*x8976)));
evalcond[7]=((((-1.0)*sj5*x8963))+(((-1.0)*gconst1*r21*x8958*x8961))+((x8960*x8972))+(((-1.0)*x8968))+((sj7*x8965))+((sj7*x8967)));
evalcond[8]=(x8959+((x8960*x8970))+(((-1.0)*x8961*x8967))+(((-1.0)*x8961*x8965))+(((-1.0)*x8969))+(((-1.0)*x8970*x8973)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x8977=gconst1*gconst1;
IkReal x8978=gconst2*gconst2;
IkReal x8979=(gconst1*sj7);
IkReal x8980=((1.0)*r00);
IkReal x8981=(r01*r11);
IkReal x8982=((1.0)*r01);
IkReal x8983=(cj7*gconst1*gconst2);
IkReal x8984=(r10*x8978);
CheckValue<IkReal> x8985 = IKatan2WithCheck(IkReal(((((-1.0)*gconst2*r10*x8979*x8980))+(((-1.0)*sj7*x8982*x8984))+((gconst2*x8979*x8981))+((r00*r11*sj7*x8977)))),IkReal(((((-1.0)*r12*x8979*x8980))+(((-1.0)*gconst2*r12*sj7*x8982)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8985.valid){
continue;
}
CheckValue<IkReal> x8986=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8980*x8983))+((cj7*r00*x8984))+(((-1.0)*r10*x8982*x8983))+((cj7*r02*r12))+((cj7*x8977*x8981)))),-1);
if(!x8986.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x8985.value)+(((1.5707963267949)*(x8986.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x8987=IKcos(j8);
IkReal x8988=IKsin(j8);
IkReal x8989=(sj5*sj6);
IkReal x8990=((1.0)*cj7);
IkReal x8991=(gconst1*r10);
IkReal x8992=(gconst2*r20);
IkReal x8993=(gconst2*r01);
IkReal x8994=(gconst2*r11);
IkReal x8995=((1.0)*cj6);
IkReal x8996=(gconst1*r11);
IkReal x8997=(gconst1*r00);
IkReal x8998=(gconst2*r21);
IkReal x8999=(gconst1*r01);
IkReal x9000=(gconst2*r10);
IkReal x9001=(gconst2*r00);
IkReal x9002=(gconst1*r20);
IkReal x9003=(cj5*sj6);
IkReal x9004=(cj5*x8995);
IkReal x9005=((1.0)*x8987);
IkReal x9006=(cj7*x8988);
IkReal x9007=(gconst1*x8987);
IkReal x9008=(sj7*x8988);
IkReal x9009=(r12*x8987);
IkReal x9010=(sj7*x8987);
IkReal x9011=(cj7*x8987);
IkReal x9012=(gconst1*r21*x8988);
evalcond[0]=(((r21*x9007))+((r22*x8988))+(((-1.0)*x8992*x9005)));
evalcond[1]=(((x8987*x8996))+(((-1.0)*x9000*x9005))+((r12*x8988)));
evalcond[2]=((1.0)+((r02*x8988))+((x8987*x8999))+(((-1.0)*x9001*x9005)));
evalcond[3]=(((x9001*x9006))+(((-1.0)*x8988*x8990*x8999))+((r02*x9011))+((sj7*x8997))+((sj7*x8993)));
evalcond[4]=((((-1.0)*x8990*x8997))+(((-1.0)*x8990*x8993))+((x9001*x9008))+((r02*x9010))+(((-1.0)*x8999*x9008)));
evalcond[5]=((((-1.0)*x9004))+((x9000*x9006))+(((-1.0)*x8988*x8990*x8996))+x8989+((cj7*x9009))+((sj7*x8994))+((sj7*x8991)));
evalcond[6]=(((x8992*x9006))+(((-1.0)*x9003))+((r22*x9011))+((sj7*x9002))+((sj7*x8998))+(((-1.0)*sj5*x8995))+(((-1.0)*x8990*x9012)));
evalcond[7]=((((-1.0)*x8990*x8994))+(((-1.0)*x8990*x8991))+((cj6*sj5))+((x9000*x9008))+x9003+((sj7*x9009))+(((-1.0)*x8996*x9008)));
evalcond[8]=((((-1.0)*x9004))+(((-1.0)*gconst1*r21*x9008))+(((-1.0)*x8990*x8998))+(((-1.0)*x8990*x9002))+((x8992*x9008))+x8989+((r22*x9010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x9013=gconst2*gconst2;
IkReal x9014=gconst1*gconst1;
IkReal x9015=(r01*sj7);
IkReal x9016=(cj7*r01);
IkReal x9017=(r00*sj7);
IkReal x9018=(r11*x9014);
IkReal x9019=((1.0)*gconst1*gconst2);
IkReal x9020=(r10*x9013);
IkReal x9021=(cj7*gconst1*r00);
CheckValue<IkReal> x9022=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x9015*x9019))+((r02*r12*sj7))+((x9015*x9018))+((x9017*x9020))+(((-1.0)*r11*x9017*x9019)))),-1);
if(!x9022.valid){
continue;
}
CheckValue<IkReal> x9023 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x9016*x9019))+((gconst2*r10*x9021))+((x9016*x9020))+(((-1.0)*cj7*r00*x9018)))),IkReal((((gconst2*r12*x9016))+((r12*x9021)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9023.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9022.value)))+(x9023.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x9024=IKcos(j8);
IkReal x9025=IKsin(j8);
IkReal x9026=(sj5*sj6);
IkReal x9027=((1.0)*cj7);
IkReal x9028=(gconst1*r10);
IkReal x9029=(gconst2*r20);
IkReal x9030=(gconst2*r01);
IkReal x9031=(gconst2*r11);
IkReal x9032=((1.0)*cj6);
IkReal x9033=(gconst1*r11);
IkReal x9034=(gconst1*r00);
IkReal x9035=(gconst2*r21);
IkReal x9036=(gconst1*r01);
IkReal x9037=(gconst2*r10);
IkReal x9038=(gconst2*r00);
IkReal x9039=(gconst1*r20);
IkReal x9040=(cj5*sj6);
IkReal x9041=(cj5*x9032);
IkReal x9042=((1.0)*x9024);
IkReal x9043=(cj7*x9025);
IkReal x9044=(gconst1*x9024);
IkReal x9045=(sj7*x9025);
IkReal x9046=(r12*x9024);
IkReal x9047=(sj7*x9024);
IkReal x9048=(cj7*x9024);
IkReal x9049=(gconst1*r21*x9025);
evalcond[0]=(((r22*x9025))+((r21*x9044))+(((-1.0)*x9029*x9042)));
evalcond[1]=(((x9024*x9033))+(((-1.0)*x9037*x9042))+((r12*x9025)));
evalcond[2]=((1.0)+(((-1.0)*x9038*x9042))+((x9024*x9036))+((r02*x9025)));
evalcond[3]=(((x9038*x9043))+((sj7*x9034))+((sj7*x9030))+((r02*x9048))+(((-1.0)*x9025*x9027*x9036)));
evalcond[4]=(((x9038*x9045))+(((-1.0)*x9027*x9034))+(((-1.0)*x9027*x9030))+(((-1.0)*x9036*x9045))+((r02*x9047)));
evalcond[5]=(((x9037*x9043))+((sj7*x9031))+x9026+((sj7*x9028))+(((-1.0)*x9041))+((cj7*x9046))+(((-1.0)*x9025*x9027*x9033)));
evalcond[6]=((((-1.0)*x9040))+((x9029*x9043))+((sj7*x9035))+((sj7*x9039))+(((-1.0)*sj5*x9032))+(((-1.0)*x9027*x9049))+((r22*x9048)));
evalcond[7]=(((cj6*sj5))+((sj7*x9046))+((x9037*x9045))+x9040+(((-1.0)*x9027*x9031))+(((-1.0)*x9027*x9028))+(((-1.0)*x9033*x9045)));
evalcond[8]=(((x9029*x9045))+x9026+(((-1.0)*x9027*x9035))+(((-1.0)*x9027*x9039))+(((-1.0)*gconst1*r21*x9045))+(((-1.0)*x9041))+((r22*x9047)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x9050=((1.0)*gconst2);
CheckValue<IkReal> x9051=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9050)))),-1);
if(!x9051.valid){
continue;
}
CheckValue<IkReal> x9052 = IKatan2WithCheck(IkReal((((gconst1*r21))+(((-1.0)*r20*x9050)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9052.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9051.value)))+(x9052.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x9053=IKcos(j8);
IkReal x9054=IKsin(j8);
IkReal x9055=(sj5*sj6);
IkReal x9056=((1.0)*cj7);
IkReal x9057=(gconst1*r10);
IkReal x9058=(gconst2*r20);
IkReal x9059=(gconst2*r01);
IkReal x9060=(gconst2*r11);
IkReal x9061=((1.0)*cj6);
IkReal x9062=(gconst1*r11);
IkReal x9063=(gconst1*r00);
IkReal x9064=(gconst2*r21);
IkReal x9065=(gconst1*r01);
IkReal x9066=(gconst2*r10);
IkReal x9067=(gconst2*r00);
IkReal x9068=(gconst1*r20);
IkReal x9069=(cj5*sj6);
IkReal x9070=(cj5*x9061);
IkReal x9071=((1.0)*x9053);
IkReal x9072=(cj7*x9054);
IkReal x9073=(gconst1*x9053);
IkReal x9074=(sj7*x9054);
IkReal x9075=(r12*x9053);
IkReal x9076=(sj7*x9053);
IkReal x9077=(cj7*x9053);
IkReal x9078=(gconst1*r21*x9054);
evalcond[0]=(((r21*x9073))+((r22*x9054))+(((-1.0)*x9058*x9071)));
evalcond[1]=(((r12*x9054))+(((-1.0)*x9066*x9071))+((x9053*x9062)));
evalcond[2]=((1.0)+(((-1.0)*x9067*x9071))+((x9053*x9065))+((r02*x9054)));
evalcond[3]=(((sj7*x9059))+((x9067*x9072))+((sj7*x9063))+(((-1.0)*x9054*x9056*x9065))+((r02*x9077)));
evalcond[4]=((((-1.0)*x9056*x9059))+(((-1.0)*x9065*x9074))+((x9067*x9074))+((r02*x9076))+(((-1.0)*x9056*x9063)));
evalcond[5]=(((x9066*x9072))+((sj7*x9057))+x9055+(((-1.0)*x9070))+((sj7*x9060))+((cj7*x9075))+(((-1.0)*x9054*x9056*x9062)));
evalcond[6]=((((-1.0)*sj5*x9061))+(((-1.0)*x9056*x9078))+((x9058*x9072))+(((-1.0)*x9069))+((r22*x9077))+((sj7*x9064))+((sj7*x9068)));
evalcond[7]=(((sj7*x9075))+((x9066*x9074))+((cj6*sj5))+(((-1.0)*x9056*x9057))+x9069+(((-1.0)*x9062*x9074))+(((-1.0)*x9056*x9060)));
evalcond[8]=(x9055+(((-1.0)*x9070))+((x9058*x9074))+((r22*x9076))+(((-1.0)*gconst1*r21*x9074))+(((-1.0)*x9056*x9064))+(((-1.0)*x9056*x9068)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[2];
IkReal x9079=((-1.0)*r20);
IkReal x9080=((-1.0)*px);
CheckValue<IkReal> x9082 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9079),IKFAST_ATAN2_MAGTHRESH);
if(!x9082.valid){
continue;
}
IkReal x9081=((-1.0)*(x9082.value));
sj9=gconst1;
cj9=gconst2;
j9=x9081;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9080);
rxp1_1=(px*r21);
rxp1_2=(r11*x9080);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9081;
IkReal gconst1=r21;
IkReal gconst2=x9079;
j8eval[0]=r02;
j8eval[1]=(((r11*r21))+((r10*r20)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x9083=((-1.0)*r20);
IkReal x9084=((-1.0)*px);
CheckValue<IkReal> x9086 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9083),IKFAST_ATAN2_MAGTHRESH);
if(!x9086.valid){
continue;
}
IkReal x9085=((-1.0)*(x9086.value));
sj9=gconst1;
cj9=gconst2;
j9=x9085;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9084);
rxp1_1=(px*r21);
rxp1_2=(r11*x9084);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9085;
IkReal gconst1=r21;
IkReal gconst2=x9083;
IkReal x9087=((1.0)*cj7);
j8eval[0]=((((-1.0)*x9087))+((cj7*(r10*r10)))+(((-1.0)*x9087*(r21*r21))));
j8eval[1]=(((r11*r21))+((r10*r20)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x9088=((-1.0)*r20);
IkReal x9089=((-1.0)*px);
CheckValue<IkReal> x9091 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9088),IKFAST_ATAN2_MAGTHRESH);
if(!x9091.valid){
continue;
}
IkReal x9090=((-1.0)*(x9091.value));
sj9=gconst1;
cj9=gconst2;
j9=x9090;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9089);
rxp1_1=(px*r21);
rxp1_2=(r11*x9089);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9090;
IkReal gconst1=r21;
IkReal gconst2=x9088;
j8eval[0]=r02;
j8eval[1]=sj7;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x9092=((-1.0)*r20);
IkReal x9093=((-1.0)*px);
CheckValue<IkReal> x9095 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9092),IKFAST_ATAN2_MAGTHRESH);
if(!x9095.valid){
continue;
}
IkReal x9094=((-1.0)*(x9095.value));
sj9=gconst1;
cj9=gconst2;
j9=x9094;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9093);
rxp1_1=(px*r21);
rxp1_2=(r11*x9093);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj7=1.0;
cj7=0;
j7=1.5707963267949;
IkReal gconst0=x9094;
IkReal gconst1=r21;
IkReal gconst2=x9092;
j8eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x9097=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x9097.valid){
continue;
}
IkReal x9096=x9097.value;
sj8array[0]=((((-1.0)*sj5*sj6*x9096))+((cj5*cj6*x9096)));
if( sj8array[0] >= -1-IKFAST_SINCOS_THRESH && sj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKasin(sj8array[0]);
    cj8array[0] = IKcos(j8array[0]);
    sj8array[1] = sj8array[0];
    j8array[1] = j8array[0] > 0 ? (IKPI-j8array[0]) : (-IKPI-j8array[0]);
    cj8array[1] = -cj8array[0];
}
else if( isnan(sj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[3];
IkReal x9098=IKcos(j8);
IkReal x9099=(gconst1*x9098);
IkReal x9100=((1.0)*gconst2*x9098);
evalcond[0]=(r02*x9098);
evalcond[1]=((((-1.0)*r20*x9100))+((r21*x9099)));
evalcond[2]=(((r11*x9099))+(((-1.0)*r10*x9100)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x9101=((-1.0)*r20);
IkReal x9102=((-1.0)*px);
CheckValue<IkReal> x9104 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9101),IKFAST_ATAN2_MAGTHRESH);
if(!x9104.valid){
continue;
}
IkReal x9103=((-1.0)*(x9104.value));
sj9=gconst1;
cj9=gconst2;
j9=x9103;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9102);
rxp1_1=(px*r21);
rxp1_2=(r11*x9102);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
IkReal gconst0=x9103;
IkReal gconst1=r21;
IkReal gconst2=x9101;
j8eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x9106=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x9106.valid){
continue;
}
IkReal x9105=x9106.value;
sj8array[0]=((((-1.0)*sj5*sj6*x9105))+((cj5*cj6*x9105)));
if( sj8array[0] >= -1-IKFAST_SINCOS_THRESH && sj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKasin(sj8array[0]);
    cj8array[0] = IKcos(j8array[0]);
    sj8array[1] = sj8array[0];
    j8array[1] = j8array[0] > 0 ? (IKPI-j8array[0]) : (-IKPI-j8array[0]);
    cj8array[1] = -cj8array[0];
}
else if( isnan(sj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[3];
IkReal x9107=IKcos(j8);
IkReal x9108=(gconst1*x9107);
IkReal x9109=((1.0)*gconst2*x9107);
evalcond[0]=((-1.0)*r02*x9107);
evalcond[1]=(((r21*x9108))+(((-1.0)*r20*x9109)));
evalcond[2]=((((-1.0)*r10*x9109))+((r11*x9108)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x9111=IKPowWithIntegerCheck(r02,-1);
if(!x9111.valid){
continue;
}
IkReal x9110=x9111.value;
CheckValue<IkReal> x9112=IKPowWithIntegerCheck(sj7,-1);
if(!x9112.valid){
continue;
}
if( IKabs((sj4*x9110)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x9110*(x9112.value)*((((cj4*cj5*sj6))+((cj4*cj6*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj4*x9110))+IKsqr((x9110*(x9112.value)*((((cj4*cj5*sj6))+((cj4*cj6*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((sj4*x9110), (x9110*(x9112.value)*((((cj4*cj5*sj6))+((cj4*cj6*sj5))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x9113=IKcos(j8);
IkReal x9114=IKsin(j8);
IkReal x9115=(gconst2*r20);
IkReal x9116=(gconst1*r11);
IkReal x9117=((1.0)*cj6);
IkReal x9118=((1.0)*sj4);
IkReal x9119=(gconst2*r11);
IkReal x9120=((1.0)*cj7);
IkReal x9121=(sj5*sj6);
IkReal x9122=(gconst1*r21);
IkReal x9123=(gconst2*r21);
IkReal x9124=(gconst2*r10);
IkReal x9125=(gconst1*r20);
IkReal x9126=(cj5*cj6);
IkReal x9127=(gconst1*r10);
IkReal x9128=((1.0)*cj5*sj6);
IkReal x9129=((1.0)*x9113);
IkReal x9130=(cj7*x9114);
IkReal x9131=(sj7*x9114);
IkReal x9132=(r02*x9113);
evalcond[0]=((((-1.0)*x9118))+((r02*x9114)));
evalcond[1]=(((x9113*x9122))+(((-1.0)*x9115*x9129)));
evalcond[2]=((((-1.0)*x9124*x9129))+cj4+((x9113*x9116)));
evalcond[3]=((((-1.0)*cj4*x9121))+((cj7*x9132))+((cj4*x9126)));
evalcond[4]=((((-1.0)*cj4*sj5*x9117))+((sj7*x9132))+(((-1.0)*cj4*x9128)));
evalcond[5]=((((-1.0)*sj5*x9117))+(((-1.0)*x9114*x9120*x9122))+(((-1.0)*x9128))+((x9115*x9130))+((sj7*x9123))+((sj7*x9125)));
evalcond[6]=(x9121+(((-1.0)*x9120*x9125))+(((-1.0)*x9120*x9123))+(((-1.0)*cj5*x9117))+((x9115*x9131))+(((-1.0)*x9122*x9131)));
evalcond[7]=((((-1.0)*x9114*x9116*x9120))+((sj7*x9119))+(((-1.0)*x9118*x9121))+((sj7*x9127))+((x9124*x9130))+((sj4*x9126)));
evalcond[8]=((((-1.0)*x9119*x9120))+(((-1.0)*sj4*sj5*x9117))+(((-1.0)*x9120*x9127))+(((-1.0)*cj5*sj6*x9118))+((x9124*x9131))+(((-1.0)*x9116*x9131)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x9133=((1.0)*gconst1);
IkReal x9134=((1.0)*gconst2);
CheckValue<IkReal> x9135=IKPowWithIntegerCheck(((((-1.0)*cj7*r21*x9133))+((cj7*gconst2*r20))),-1);
if(!x9135.valid){
continue;
}
CheckValue<IkReal> x9136=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*r10*x9134))),-1);
if(!x9136.valid){
continue;
}
if( IKabs(((x9135.value)*((((cj6*sj5))+((cj5*sj6))+(((-1.0)*r21*sj7*x9134))+(((-1.0)*r20*sj7*x9133)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj4*(x9136.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9135.value)*((((cj6*sj5))+((cj5*sj6))+(((-1.0)*r21*sj7*x9134))+(((-1.0)*r20*sj7*x9133))))))+IKsqr(((-1.0)*cj4*(x9136.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((x9135.value)*((((cj6*sj5))+((cj5*sj6))+(((-1.0)*r21*sj7*x9134))+(((-1.0)*r20*sj7*x9133))))), ((-1.0)*cj4*(x9136.value)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x9137=IKcos(j8);
IkReal x9138=IKsin(j8);
IkReal x9139=(gconst2*r20);
IkReal x9140=(gconst1*r11);
IkReal x9141=((1.0)*cj6);
IkReal x9142=((1.0)*sj4);
IkReal x9143=(gconst2*r11);
IkReal x9144=((1.0)*cj7);
IkReal x9145=(sj5*sj6);
IkReal x9146=(gconst1*r21);
IkReal x9147=(gconst2*r21);
IkReal x9148=(gconst2*r10);
IkReal x9149=(gconst1*r20);
IkReal x9150=(cj5*cj6);
IkReal x9151=(gconst1*r10);
IkReal x9152=((1.0)*cj5*sj6);
IkReal x9153=((1.0)*x9137);
IkReal x9154=(cj7*x9138);
IkReal x9155=(sj7*x9138);
IkReal x9156=(r02*x9137);
evalcond[0]=((((-1.0)*x9142))+((r02*x9138)));
evalcond[1]=((((-1.0)*x9139*x9153))+((x9137*x9146)));
evalcond[2]=(cj4+(((-1.0)*x9148*x9153))+((x9137*x9140)));
evalcond[3]=(((cj4*x9150))+((cj7*x9156))+(((-1.0)*cj4*x9145)));
evalcond[4]=((((-1.0)*cj4*x9152))+((sj7*x9156))+(((-1.0)*cj4*sj5*x9141)));
evalcond[5]=(((sj7*x9149))+((sj7*x9147))+(((-1.0)*sj5*x9141))+(((-1.0)*x9152))+(((-1.0)*x9138*x9144*x9146))+((x9139*x9154)));
evalcond[6]=((((-1.0)*x9146*x9155))+(((-1.0)*cj5*x9141))+x9145+(((-1.0)*x9144*x9147))+(((-1.0)*x9144*x9149))+((x9139*x9155)));
evalcond[7]=((((-1.0)*x9142*x9145))+((x9148*x9154))+((sj7*x9143))+((sj7*x9151))+((sj4*x9150))+(((-1.0)*x9138*x9140*x9144)));
evalcond[8]=((((-1.0)*x9140*x9155))+((x9148*x9155))+(((-1.0)*x9143*x9144))+(((-1.0)*cj5*sj6*x9142))+(((-1.0)*sj4*sj5*x9141))+(((-1.0)*x9144*x9151)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x9157=IKPowWithIntegerCheck(r02,-1);
if(!x9157.valid){
continue;
}
CheckValue<IkReal> x9158=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x9158.valid){
continue;
}
if( IKabs((sj4*(x9157.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj4*(x9158.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj4*(x9157.value)))+IKsqr(((-1.0)*cj4*(x9158.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((sj4*(x9157.value)), ((-1.0)*cj4*(x9158.value)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x9159=IKcos(j8);
IkReal x9160=IKsin(j8);
IkReal x9161=(gconst2*r20);
IkReal x9162=(gconst1*r11);
IkReal x9163=((1.0)*cj6);
IkReal x9164=((1.0)*sj4);
IkReal x9165=(gconst2*r11);
IkReal x9166=((1.0)*cj7);
IkReal x9167=(sj5*sj6);
IkReal x9168=(gconst1*r21);
IkReal x9169=(gconst2*r21);
IkReal x9170=(gconst2*r10);
IkReal x9171=(gconst1*r20);
IkReal x9172=(cj5*cj6);
IkReal x9173=(gconst1*r10);
IkReal x9174=((1.0)*cj5*sj6);
IkReal x9175=((1.0)*x9159);
IkReal x9176=(cj7*x9160);
IkReal x9177=(sj7*x9160);
IkReal x9178=(r02*x9159);
evalcond[0]=(((r02*x9160))+(((-1.0)*x9164)));
evalcond[1]=(((x9159*x9168))+(((-1.0)*x9161*x9175)));
evalcond[2]=(((x9159*x9162))+cj4+(((-1.0)*x9170*x9175)));
evalcond[3]=(((cj4*x9172))+((cj7*x9178))+(((-1.0)*cj4*x9167)));
evalcond[4]=((((-1.0)*cj4*x9174))+((sj7*x9178))+(((-1.0)*cj4*sj5*x9163)));
evalcond[5]=(((sj7*x9171))+(((-1.0)*x9174))+((sj7*x9169))+((x9161*x9176))+(((-1.0)*sj5*x9163))+(((-1.0)*x9160*x9166*x9168)));
evalcond[6]=(x9167+(((-1.0)*x9166*x9169))+((x9161*x9177))+(((-1.0)*x9168*x9177))+(((-1.0)*cj5*x9163))+(((-1.0)*x9166*x9171)));
evalcond[7]=(((x9170*x9176))+((sj7*x9173))+(((-1.0)*x9164*x9167))+((sj7*x9165))+((sj4*x9172))+(((-1.0)*x9160*x9162*x9166)));
evalcond[8]=(((x9170*x9177))+(((-1.0)*x9162*x9177))+(((-1.0)*x9165*x9166))+(((-1.0)*cj5*sj6*x9164))+(((-1.0)*sj4*sj5*x9163))+(((-1.0)*x9166*x9173)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x9179=gconst2*gconst2;
IkReal x9180=r20*r20;
IkReal x9181=gconst1*gconst1;
IkReal x9182=r21*r21;
IkReal x9183=(cj7*r20);
IkReal x9184=(cj5*cj6);
IkReal x9185=(sj5*sj6);
IkReal x9186=(gconst1*r21);
IkReal x9187=(gconst2*r20);
IkReal x9188=(cj7*gconst2);
CheckValue<IkReal> x9189=IKPowWithIntegerCheck(IKsign((((sj7*x9179*x9180))+(((-2.0)*sj7*x9186*x9187))+((sj7*(r22*r22)))+((sj7*x9181*x9182)))),-1);
if(!x9189.valid){
continue;
}
CheckValue<IkReal> x9190 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x9181*x9183))+(((-1.0)*x9185*x9187))+((r21*x9179*x9183))+((x9185*x9186))+(((-1.0)*gconst1*x9182*x9188))+((x9184*x9187))+(((-1.0)*x9184*x9186))+((gconst1*x9180*x9188)))),IkReal((((gconst1*r22*x9183))+((r22*x9184))+((r21*r22*x9188))+(((-1.0)*r22*x9185)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9190.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9189.value)))+(x9190.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x9191=IKcos(j8);
IkReal x9192=IKsin(j8);
IkReal x9193=(gconst2*r20);
IkReal x9194=(gconst1*r11);
IkReal x9195=((1.0)*cj6);
IkReal x9196=((1.0)*sj4);
IkReal x9197=(cj5*sj6);
IkReal x9198=((1.0)*cj4);
IkReal x9199=(sj5*sj6);
IkReal x9200=(gconst2*sj7);
IkReal x9201=(gconst1*r21);
IkReal x9202=(cj5*cj6);
IkReal x9203=(gconst1*sj7);
IkReal x9204=((1.0)*gconst1);
IkReal x9205=(gconst2*r10);
IkReal x9206=(gconst2*r00);
IkReal x9207=(sj7*x9192);
IkReal x9208=((1.0)*x9191);
IkReal x9209=(cj7*x9192);
IkReal x9210=((1.0)*cj7*gconst2);
IkReal x9211=(r12*x9191);
IkReal x9212=(sj7*x9191);
IkReal x9213=(cj7*x9191);
evalcond[0]=(((x9191*x9201))+((r22*x9192))+(((-1.0)*x9193*x9208)));
evalcond[1]=(cj4+(((-1.0)*x9205*x9208))+((r12*x9192))+((x9191*x9194)));
evalcond[2]=(((gconst1*r01*x9191))+((r02*x9192))+(((-1.0)*x9196))+(((-1.0)*x9206*x9208)));
evalcond[3]=(((r20*x9203))+((x9193*x9209))+((r21*x9200))+((r22*x9213))+(((-1.0)*sj5*x9195))+(((-1.0)*x9201*x9209))+(((-1.0)*x9197)));
evalcond[4]=((((-1.0)*cj5*x9195))+x9199+((x9193*x9207))+((r22*x9212))+(((-1.0)*r21*x9210))+(((-1.0)*x9201*x9207))+(((-1.0)*cj7*r20*x9204)));
evalcond[5]=(((r00*x9203))+((cj4*x9202))+((r01*x9200))+(((-1.0)*r01*x9204*x9209))+((r02*x9213))+(((-1.0)*x9198*x9199))+((x9206*x9209)));
evalcond[6]=(((x9205*x9209))+((r10*x9203))+((r11*x9200))+(((-1.0)*x9194*x9209))+((cj7*x9211))+(((-1.0)*x9196*x9199))+((sj4*x9202)));
evalcond[7]=((((-1.0)*r01*x9210))+(((-1.0)*r01*x9192*x9203))+(((-1.0)*cj4*sj5*x9195))+((r02*x9212))+(((-1.0)*x9197*x9198))+((r00*x9192*x9200))+(((-1.0)*cj7*r00*x9204)));
evalcond[8]=((((-1.0)*sj4*sj5*x9195))+((r10*x9192*x9200))+(((-1.0)*x9194*x9207))+((sj7*x9211))+(((-1.0)*r11*x9210))+(((-1.0)*x9196*x9197))+(((-1.0)*cj7*r10*x9204)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x9214=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9214.valid){
continue;
}
CheckValue<IkReal> x9215 = IKatan2WithCheck(IkReal(((((-1.0)*gconst2*r20*sj4))+((gconst1*r21*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x9215.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9214.value)))+(x9215.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x9216=IKcos(j8);
IkReal x9217=IKsin(j8);
IkReal x9218=(gconst2*r20);
IkReal x9219=(gconst1*r11);
IkReal x9220=((1.0)*cj6);
IkReal x9221=((1.0)*sj4);
IkReal x9222=(cj5*sj6);
IkReal x9223=((1.0)*cj4);
IkReal x9224=(sj5*sj6);
IkReal x9225=(gconst2*sj7);
IkReal x9226=(gconst1*r21);
IkReal x9227=(cj5*cj6);
IkReal x9228=(gconst1*sj7);
IkReal x9229=((1.0)*gconst1);
IkReal x9230=(gconst2*r10);
IkReal x9231=(gconst2*r00);
IkReal x9232=(sj7*x9217);
IkReal x9233=((1.0)*x9216);
IkReal x9234=(cj7*x9217);
IkReal x9235=((1.0)*cj7*gconst2);
IkReal x9236=(r12*x9216);
IkReal x9237=(sj7*x9216);
IkReal x9238=(cj7*x9216);
evalcond[0]=((((-1.0)*x9218*x9233))+((r22*x9217))+((x9216*x9226)));
evalcond[1]=(cj4+((r12*x9217))+((x9216*x9219))+(((-1.0)*x9230*x9233)));
evalcond[2]=((((-1.0)*x9221))+((gconst1*r01*x9216))+((r02*x9217))+(((-1.0)*x9231*x9233)));
evalcond[3]=(((r20*x9228))+((r21*x9225))+((r22*x9238))+(((-1.0)*sj5*x9220))+((x9218*x9234))+(((-1.0)*x9226*x9234))+(((-1.0)*x9222)));
evalcond[4]=((((-1.0)*cj5*x9220))+x9224+((r22*x9237))+(((-1.0)*r21*x9235))+((x9218*x9232))+(((-1.0)*x9226*x9232))+(((-1.0)*cj7*r20*x9229)));
evalcond[5]=(((r00*x9228))+((r01*x9225))+((r02*x9238))+((cj4*x9227))+(((-1.0)*r01*x9229*x9234))+(((-1.0)*x9223*x9224))+((x9231*x9234)));
evalcond[6]=(((cj7*x9236))+(((-1.0)*x9221*x9224))+((r11*x9225))+((x9230*x9234))+((sj4*x9227))+(((-1.0)*x9219*x9234))+((r10*x9228)));
evalcond[7]=((((-1.0)*cj7*r00*x9229))+((r00*x9217*x9225))+((r02*x9237))+(((-1.0)*r01*x9217*x9228))+(((-1.0)*r01*x9235))+(((-1.0)*x9222*x9223))+(((-1.0)*cj4*sj5*x9220)));
evalcond[8]=((((-1.0)*r11*x9235))+((r10*x9217*x9225))+(((-1.0)*x9221*x9222))+(((-1.0)*sj4*sj5*x9220))+((sj7*x9236))+(((-1.0)*cj7*r10*x9229))+(((-1.0)*x9219*x9232)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x9239=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9239.valid){
continue;
}
CheckValue<IkReal> x9240 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*gconst2*r20))+((cj4*gconst1*r21)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9240.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9239.value)))+(x9240.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x9241=IKcos(j8);
IkReal x9242=IKsin(j8);
IkReal x9243=(gconst2*r20);
IkReal x9244=(gconst1*r11);
IkReal x9245=((1.0)*cj6);
IkReal x9246=((1.0)*sj4);
IkReal x9247=(cj5*sj6);
IkReal x9248=((1.0)*cj4);
IkReal x9249=(sj5*sj6);
IkReal x9250=(gconst2*sj7);
IkReal x9251=(gconst1*r21);
IkReal x9252=(cj5*cj6);
IkReal x9253=(gconst1*sj7);
IkReal x9254=((1.0)*gconst1);
IkReal x9255=(gconst2*r10);
IkReal x9256=(gconst2*r00);
IkReal x9257=(sj7*x9242);
IkReal x9258=((1.0)*x9241);
IkReal x9259=(cj7*x9242);
IkReal x9260=((1.0)*cj7*gconst2);
IkReal x9261=(r12*x9241);
IkReal x9262=(sj7*x9241);
IkReal x9263=(cj7*x9241);
evalcond[0]=(((r22*x9242))+(((-1.0)*x9243*x9258))+((x9241*x9251)));
evalcond[1]=(((x9241*x9244))+cj4+(((-1.0)*x9255*x9258))+((r12*x9242)));
evalcond[2]=(((r02*x9242))+(((-1.0)*x9256*x9258))+(((-1.0)*x9246))+((gconst1*r01*x9241)));
evalcond[3]=(((r22*x9263))+(((-1.0)*sj5*x9245))+((r21*x9250))+(((-1.0)*x9251*x9259))+((r20*x9253))+(((-1.0)*x9247))+((x9243*x9259)));
evalcond[4]=((((-1.0)*r21*x9260))+((r22*x9262))+(((-1.0)*cj5*x9245))+x9249+(((-1.0)*cj7*r20*x9254))+(((-1.0)*x9251*x9257))+((x9243*x9257)));
evalcond[5]=(((r00*x9253))+((r01*x9250))+((cj4*x9252))+((x9256*x9259))+(((-1.0)*x9248*x9249))+(((-1.0)*r01*x9254*x9259))+((r02*x9263)));
evalcond[6]=(((x9255*x9259))+(((-1.0)*x9246*x9249))+((sj4*x9252))+((r10*x9253))+((r11*x9250))+((cj7*x9261))+(((-1.0)*x9244*x9259)));
evalcond[7]=((((-1.0)*x9247*x9248))+((r00*x9242*x9250))+(((-1.0)*r01*x9242*x9253))+(((-1.0)*cj4*sj5*x9245))+(((-1.0)*cj7*r00*x9254))+(((-1.0)*r01*x9260))+((r02*x9262)));
evalcond[8]=((((-1.0)*cj7*r10*x9254))+(((-1.0)*x9246*x9247))+(((-1.0)*sj4*sj5*x9245))+((r10*x9242*x9250))+((sj7*x9261))+(((-1.0)*r11*x9260))+(((-1.0)*x9244*x9257)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x9264=((-1.0)*r21);
IkReal x9266 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x9266)==0){
continue;
}
IkReal x9265=pow(x9266,-0.5);
CheckValue<IkReal> x9267 = IKatan2WithCheck(IkReal(x9264),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9267.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x9267.value))));
IkReal gconst4=(x9264*x9265);
IkReal gconst5=((1.0)*r20*x9265);
CheckValue<IkReal> x9268 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9268.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x9268.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x9269=((-1.0)*r21);
CheckValue<IkReal> x9272 = IKatan2WithCheck(IkReal(x9269),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9272.valid){
continue;
}
IkReal x9270=((1.0)*(x9272.value));
IkReal x9271=x9265;
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x9270)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9270)));
IkReal gconst4=(x9269*x9271);
IkReal gconst5=((1.0)*r20*x9271);
IkReal x9273=r22*r22;
IkReal x9274=((1.0)*x9273);
CheckValue<IkReal> x9278=IKPowWithIntegerCheck(((-1.0)+x9273),-1);
if(!x9278.valid){
continue;
}
IkReal x9275=x9278.value;
if((((1.0)+(((-1.0)*x9274)))) < -0.00001)
continue;
IkReal x9276=IKsqrt(((1.0)+(((-1.0)*x9274))));
IkReal x9277=(cj4*x9275*x9276);
j8eval[0]=((IKabs((x9277+(((-1.0)*x9274*x9277)))))+(IKabs((cj4*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
IkReal x9279=((-1.0)*r21);
CheckValue<IkReal> x9282 = IKatan2WithCheck(IkReal(x9279),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9282.valid){
continue;
}
IkReal x9280=((1.0)*(x9282.value));
IkReal x9281=x9265;
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x9280)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9280)));
IkReal gconst4=(x9279*x9281);
IkReal gconst5=((1.0)*r20*x9281);
IkReal x9283=r22*r22;
IkReal x9284=((1.0)*x9283);
CheckValue<IkReal> x9288=IKPowWithIntegerCheck(((-1.0)+x9283),-1);
if(!x9288.valid){
continue;
}
IkReal x9285=x9288.value;
if((((1.0)+(((-1.0)*x9284)))) < -0.00001)
continue;
IkReal x9286=IKsqrt(((1.0)+(((-1.0)*x9284))));
IkReal x9287=(sj4*x9285*x9286);
j8eval[0]=((IKabs((x9287+(((-1.0)*x9284*x9287)))))+(IKabs((r22*sj4))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
IkReal x9289=((-1.0)*r21);
CheckValue<IkReal> x9292 = IKatan2WithCheck(IkReal(x9289),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9292.valid){
continue;
}
IkReal x9290=((1.0)*(x9292.value));
IkReal x9291=x9265;
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x9290)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9290)));
IkReal gconst4=(x9289*x9291);
IkReal gconst5=((1.0)*r20*x9291);
IkReal x9293=r22*r22;
IkReal x9294=((1.0)*cj4*r02);
IkReal x9295=((1.0)*r12*sj4);
CheckValue<IkReal> x9299=IKPowWithIntegerCheck(((-1.0)+x9293),-1);
if(!x9299.valid){
continue;
}
IkReal x9296=x9299.value;
if((((1.0)+(((-1.0)*x9293)))) < -0.00001)
continue;
IkReal x9297=IKsqrt(((1.0)+(((-1.0)*x9293))));
IkReal x9298=(r22*x9296*x9297);
j8eval[0]=0;
j8eval[1]=0;
j8eval[2]=((IKabs(((((-1.0)*x9294))+(((-1.0)*x9295)))))+(IKabs(((((-1.0)*x9294*x9298))+(((-1.0)*x9295*x9298))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x9300=((-1.0)*r21);
CheckValue<IkReal> x9303 = IKatan2WithCheck(IkReal(x9300),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9303.valid){
continue;
}
IkReal x9301=((1.0)*(x9303.value));
IkReal x9302=x9265;
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x9301)));
sj4=0;
cj4=1.0;
j4=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9301)));
IkReal gconst4=(x9300*x9302);
IkReal gconst5=((1.0)*r20*x9302);
j8eval[0]=1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[4];
IkReal x9304=((-1.0)*r21);
CheckValue<IkReal> x9307 = IKatan2WithCheck(IkReal(x9304),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9307.valid){
continue;
}
IkReal x9305=((1.0)*(x9307.value));
IkReal x9306=x9265;
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x9305)));
sj4=0;
cj4=1.0;
j4=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9305)));
IkReal gconst4=(x9304*x9306);
IkReal gconst5=((1.0)*r20*x9306);
j8eval[0]=0;
j8eval[1]=0;
j8eval[2]=r02;
j8eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
IkReal x9308=((-1.0)*r21);
CheckValue<IkReal> x9311 = IKatan2WithCheck(IkReal(x9308),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9311.valid){
continue;
}
IkReal x9309=((1.0)*(x9311.value));
IkReal x9310=x9265;
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x9309)));
sj4=0;
cj4=1.0;
j4=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9309)));
IkReal gconst4=(x9308*x9310);
IkReal gconst5=((1.0)*r20*x9310);
j8eval[0]=r02;
j8eval[1]=sj7;
j8eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x9312=((-1.0)*r21);
CheckValue<IkReal> x9315 = IKatan2WithCheck(IkReal(x9312),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9315.valid){
continue;
}
IkReal x9313=((1.0)*(x9315.value));
IkReal x9314=x9265;
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x9313)));
sj4=0;
cj4=1.0;
j4=0;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9313)));
IkReal gconst4=(x9312*x9314);
IkReal gconst5=((1.0)*r20*x9314);
j8eval[0]=1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[4];
IkReal x9316=((-1.0)*r21);
CheckValue<IkReal> x9319 = IKatan2WithCheck(IkReal(x9316),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9319.valid){
continue;
}
IkReal x9317=((1.0)*(x9319.value));
IkReal x9318=x9265;
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x9317)));
sj4=0;
cj4=1.0;
j4=0;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9317)));
IkReal gconst4=(x9316*x9318);
IkReal gconst5=((1.0)*r20*x9318);
j8eval[0]=0;
j8eval[1]=0;
j8eval[2]=r02;
j8eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  )
{
{
IkReal j8eval[4];
IkReal x9320=((-1.0)*r21);
CheckValue<IkReal> x9323 = IKatan2WithCheck(IkReal(x9320),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9323.valid){
continue;
}
IkReal x9321=((1.0)*(x9323.value));
IkReal x9322=x9265;
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x9321)));
sj4=0;
cj4=1.0;
j4=0;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9321)));
IkReal gconst4=(x9320*x9322);
IkReal gconst5=((1.0)*r20*x9322);
IkReal x9324=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9328=IKPowWithIntegerCheck(x9324,-1);
if(!x9328.valid){
continue;
}
IkReal x9325=x9328.value;
IkReal x9326=((1.0)*x9325);
IkReal x9327=((((-1.0)*x9326*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x9325))+(((-1.0)*x9326*(r10*r10)*(r20*r20))));
j8eval[0]=x9327;
j8eval[1]=r12;
j8eval[2]=x9324;
j8eval[3]=IKsign(x9327);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x9329=(gconst5*r10);
IkReal x9330=(gconst4*r11);
CheckValue<IkReal> x9331 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x9329))+x9330)),IKFAST_ATAN2_MAGTHRESH);
if(!x9331.valid){
continue;
}
CheckValue<IkReal> x9332=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9330*x9330)))+(((-1.0)*(r12*r12)))+(((2.0)*x9329*x9330))+(((-1.0)*(x9329*x9329))))),-1);
if(!x9332.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x9331.value)+(((1.5707963267949)*(x9332.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x9333=IKcos(j8);
IkReal x9334=IKsin(j8);
IkReal x9335=((1.0)*cj6);
IkReal x9336=(gconst4*r11);
IkReal x9337=(gconst5*r10);
IkReal x9338=(gconst5*r00);
IkReal x9339=(gconst4*r21);
IkReal x9340=(gconst4*r01);
IkReal x9341=(gconst5*r20);
IkReal x9342=((1.0)*x9333);
IkReal x9343=((1.0)*x9334);
evalcond[0]=(((r22*x9334))+((x9333*x9339))+(((-1.0)*x9341*x9342)));
evalcond[1]=(((x9333*x9340))+((r02*x9334))+(((-1.0)*x9338*x9342)));
evalcond[2]=((((-1.0)*x9336*x9343))+((r12*x9333))+((x9334*x9337)));
evalcond[3]=((1.0)+(((-1.0)*x9337*x9342))+((r12*x9334))+((x9333*x9336)));
evalcond[4]=(((sj5*sj6))+(((-1.0)*cj5*x9335))+((r22*x9333))+((x9334*x9341))+(((-1.0)*x9339*x9343)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*sj5*x9335))+(((-1.0)*x9340*x9343))+((r02*x9333))+((x9334*x9338)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x9344=((1.0)*gconst5);
CheckValue<IkReal> x9345 = IKatan2WithCheck(IkReal((((gconst4*r01))+(((-1.0)*r00*x9344)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9345.valid){
continue;
}
CheckValue<IkReal> x9346=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9344))+(((-1.0)*gconst4*r20)))),-1);
if(!x9346.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x9345.value)+(((1.5707963267949)*(x9346.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x9347=IKcos(j8);
IkReal x9348=IKsin(j8);
IkReal x9349=((1.0)*cj6);
IkReal x9350=(gconst4*r11);
IkReal x9351=(gconst5*r10);
IkReal x9352=(gconst5*r00);
IkReal x9353=(gconst4*r21);
IkReal x9354=(gconst4*r01);
IkReal x9355=(gconst5*r20);
IkReal x9356=((1.0)*x9347);
IkReal x9357=((1.0)*x9348);
evalcond[0]=(((x9347*x9353))+(((-1.0)*x9355*x9356))+((r22*x9348)));
evalcond[1]=(((x9347*x9354))+((r02*x9348))+(((-1.0)*x9352*x9356)));
evalcond[2]=(((r12*x9347))+((x9348*x9351))+(((-1.0)*x9350*x9357)));
evalcond[3]=((1.0)+((r12*x9348))+((x9347*x9350))+(((-1.0)*x9351*x9356)));
evalcond[4]=(((x9348*x9355))+(((-1.0)*cj5*x9349))+((sj5*sj6))+((r22*x9347))+(((-1.0)*x9353*x9357)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*sj5*x9349))+((x9348*x9352))+(((-1.0)*x9354*x9357))+((r02*x9347)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x9358 = IKatan2WithCheck(IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9358.valid){
continue;
}
CheckValue<IkReal> x9359=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x9359.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x9358.value)+(((1.5707963267949)*(x9359.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x9360=IKcos(j8);
IkReal x9361=IKsin(j8);
IkReal x9362=((1.0)*cj6);
IkReal x9363=(gconst4*r11);
IkReal x9364=(gconst5*r10);
IkReal x9365=(gconst5*r00);
IkReal x9366=(gconst4*r21);
IkReal x9367=(gconst4*r01);
IkReal x9368=(gconst5*r20);
IkReal x9369=((1.0)*x9360);
IkReal x9370=((1.0)*x9361);
evalcond[0]=(((r22*x9361))+(((-1.0)*x9368*x9369))+((x9360*x9366)));
evalcond[1]=((((-1.0)*x9365*x9369))+((r02*x9361))+((x9360*x9367)));
evalcond[2]=(((r12*x9360))+((x9361*x9364))+(((-1.0)*x9363*x9370)));
evalcond[3]=((1.0)+(((-1.0)*x9364*x9369))+((r12*x9361))+((x9360*x9363)));
evalcond[4]=((((-1.0)*x9366*x9370))+((sj5*sj6))+((r22*x9360))+(((-1.0)*cj5*x9362))+((x9361*x9368)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*sj5*x9362))+((r02*x9360))+(((-1.0)*x9367*x9370))+((x9361*x9365)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x9371=((-1.0)*r21);
CheckValue<IkReal> x9374 = IKatan2WithCheck(IkReal(x9371),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9374.valid){
continue;
}
IkReal x9372=((1.0)*(x9374.value));
IkReal x9373=x9265;
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x9372)));
sj4=0;
cj4=1.0;
j4=0;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9372)));
IkReal gconst4=(x9371*x9373);
IkReal gconst5=((1.0)*r20*x9373);
j8eval[0]=1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[4];
IkReal x9375=((-1.0)*r21);
CheckValue<IkReal> x9378 = IKatan2WithCheck(IkReal(x9375),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9378.valid){
continue;
}
IkReal x9376=((1.0)*(x9378.value));
IkReal x9377=x9265;
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x9376)));
sj4=0;
cj4=1.0;
j4=0;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9376)));
IkReal gconst4=(x9375*x9377);
IkReal gconst5=((1.0)*r20*x9377);
j8eval[0]=0;
j8eval[1]=0;
j8eval[2]=r02;
j8eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  )
{
{
IkReal j8eval[4];
IkReal x9379=((-1.0)*r21);
CheckValue<IkReal> x9382 = IKatan2WithCheck(IkReal(x9379),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9382.valid){
continue;
}
IkReal x9380=((1.0)*(x9382.value));
IkReal x9381=x9265;
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x9380)));
sj4=0;
cj4=1.0;
j4=0;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9380)));
IkReal gconst4=(x9379*x9381);
IkReal gconst5=((1.0)*r20*x9381);
IkReal x9383=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9387=IKPowWithIntegerCheck(x9383,-1);
if(!x9387.valid){
continue;
}
IkReal x9384=x9387.value;
IkReal x9385=((1.0)*x9384);
IkReal x9386=((((-1.0)*x9385*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-1.0)*x9385*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x9384)));
j8eval[0]=x9386;
j8eval[1]=r12;
j8eval[2]=x9383;
j8eval[3]=IKsign(x9386);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x9388=(gconst5*r10);
IkReal x9389=(gconst4*r11);
CheckValue<IkReal> x9390=IKPowWithIntegerCheck(IKsign(((((2.0)*x9388*x9389))+(((-1.0)*(x9388*x9388)))+(((-1.0)*(x9389*x9389)))+(((-1.0)*(r12*r12))))),-1);
if(!x9390.valid){
continue;
}
CheckValue<IkReal> x9391 = IKatan2WithCheck(IkReal(r12),IkReal((x9389+(((-1.0)*x9388)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9391.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9390.value)))+(x9391.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x9392=IKcos(j8);
IkReal x9393=IKsin(j8);
IkReal x9394=(gconst4*r11);
IkReal x9395=((1.0)*cj6);
IkReal x9396=(gconst5*r00);
IkReal x9397=(gconst5*r20);
IkReal x9398=((1.0)*gconst5*r10);
IkReal x9399=((1.0)*x9392);
IkReal x9400=(gconst4*x9393);
IkReal x9401=((1.0)*x9393);
IkReal x9402=(gconst4*x9392);
evalcond[0]=(((r22*x9393))+((r21*x9402))+(((-1.0)*x9397*x9399)));
evalcond[1]=(((r01*x9402))+((r02*x9393))+(((-1.0)*x9396*x9399)));
evalcond[2]=((1.0)+((r12*x9393))+((x9392*x9394))+(((-1.0)*x9392*x9398)));
evalcond[3]=((((-1.0)*r12*x9399))+((x9393*x9394))+(((-1.0)*x9393*x9398)));
evalcond[4]=((((-1.0)*x9397*x9401))+(((-1.0)*cj5*x9395))+((sj5*sj6))+(((-1.0)*r22*x9399))+((r21*x9400)));
evalcond[5]=(((r01*x9400))+(((-1.0)*cj5*sj6))+(((-1.0)*x9396*x9401))+(((-1.0)*sj5*x9395))+(((-1.0)*r02*x9399)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x9403=((1.0)*gconst5);
CheckValue<IkReal> x9404 = IKatan2WithCheck(IkReal((((gconst4*r01))+(((-1.0)*r00*x9403)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9404.valid){
continue;
}
CheckValue<IkReal> x9405=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9403))+(((-1.0)*gconst4*r20)))),-1);
if(!x9405.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x9404.value)+(((1.5707963267949)*(x9405.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x9406=IKcos(j8);
IkReal x9407=IKsin(j8);
IkReal x9408=(gconst4*r11);
IkReal x9409=((1.0)*cj6);
IkReal x9410=(gconst5*r00);
IkReal x9411=(gconst5*r20);
IkReal x9412=((1.0)*gconst5*r10);
IkReal x9413=((1.0)*x9406);
IkReal x9414=(gconst4*x9407);
IkReal x9415=((1.0)*x9407);
IkReal x9416=(gconst4*x9406);
evalcond[0]=(((r22*x9407))+((r21*x9416))+(((-1.0)*x9411*x9413)));
evalcond[1]=(((r01*x9416))+((r02*x9407))+(((-1.0)*x9410*x9413)));
evalcond[2]=((1.0)+((r12*x9407))+(((-1.0)*x9406*x9412))+((x9406*x9408)));
evalcond[3]=((((-1.0)*r12*x9413))+(((-1.0)*x9407*x9412))+((x9407*x9408)));
evalcond[4]=(((r21*x9414))+(((-1.0)*cj5*x9409))+((sj5*sj6))+(((-1.0)*r22*x9413))+(((-1.0)*x9411*x9415)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*sj5*x9409))+(((-1.0)*r02*x9413))+((r01*x9414))+(((-1.0)*x9410*x9415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x9417 = IKatan2WithCheck(IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9417.valid){
continue;
}
CheckValue<IkReal> x9418=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x9418.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x9417.value)+(((1.5707963267949)*(x9418.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x9419=IKcos(j8);
IkReal x9420=IKsin(j8);
IkReal x9421=(gconst4*r11);
IkReal x9422=((1.0)*cj6);
IkReal x9423=(gconst5*r00);
IkReal x9424=(gconst5*r20);
IkReal x9425=((1.0)*gconst5*r10);
IkReal x9426=((1.0)*x9419);
IkReal x9427=(gconst4*x9420);
IkReal x9428=((1.0)*x9420);
IkReal x9429=(gconst4*x9419);
evalcond[0]=((((-1.0)*x9424*x9426))+((r21*x9429))+((r22*x9420)));
evalcond[1]=((((-1.0)*x9423*x9426))+((r01*x9429))+((r02*x9420)));
evalcond[2]=((1.0)+((r12*x9420))+((x9419*x9421))+(((-1.0)*x9419*x9425)));
evalcond[3]=((((-1.0)*x9420*x9425))+((x9420*x9421))+(((-1.0)*r12*x9426)));
evalcond[4]=((((-1.0)*x9424*x9428))+(((-1.0)*cj5*x9422))+((sj5*sj6))+((r21*x9427))+(((-1.0)*r22*x9426)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*x9423*x9428))+((r01*x9427))+(((-1.0)*sj5*x9422))+(((-1.0)*r02*x9426)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x9430=((-1.0)*r21);
CheckValue<IkReal> x9433 = IKatan2WithCheck(IkReal(x9430),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9433.valid){
continue;
}
IkReal x9431=((1.0)*(x9433.value));
IkReal x9432=x9265;
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x9431)));
sj4=0;
cj4=1.0;
j4=0;
sj7=0;
cj7=1.0;
j7=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9431)));
IkReal gconst4=(x9430*x9432);
IkReal gconst5=((1.0)*r20*x9432);
j8eval[0]=1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[4];
IkReal x9434=((-1.0)*r21);
CheckValue<IkReal> x9437 = IKatan2WithCheck(IkReal(x9434),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9437.valid){
continue;
}
IkReal x9435=((1.0)*(x9437.value));
IkReal x9436=x9265;
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x9435)));
sj4=0;
cj4=1.0;
j4=0;
sj7=0;
cj7=1.0;
j7=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9435)));
IkReal gconst4=(x9434*x9436);
IkReal gconst5=((1.0)*r20*x9436);
j8eval[0]=0;
j8eval[1]=0;
j8eval[2]=r02;
j8eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  )
{
{
IkReal j8eval[4];
IkReal x9438=((-1.0)*r21);
CheckValue<IkReal> x9441 = IKatan2WithCheck(IkReal(x9438),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9441.valid){
continue;
}
IkReal x9439=((1.0)*(x9441.value));
IkReal x9440=x9265;
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x9439)));
sj4=0;
cj4=1.0;
j4=0;
sj7=0;
cj7=1.0;
j7=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9439)));
IkReal gconst4=(x9438*x9440);
IkReal gconst5=((1.0)*r20*x9440);
IkReal x9442=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9446=IKPowWithIntegerCheck(x9442,-1);
if(!x9446.valid){
continue;
}
IkReal x9443=x9446.value;
IkReal x9444=((1.0)*x9443);
IkReal x9445=((((-1.0)*x9444*(r10*r10)*(r20*r20)))+(((-1.0)*x9444*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x9443)));
j8eval[0]=x9445;
j8eval[1]=r12;
j8eval[2]=x9442;
j8eval[3]=IKsign(x9445);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x9447=(gconst5*r10);
IkReal x9448=(gconst4*r11);
CheckValue<IkReal> x9449 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x9447))+x9448)),IKFAST_ATAN2_MAGTHRESH);
if(!x9449.valid){
continue;
}
CheckValue<IkReal> x9450=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9447*x9447)))+(((-1.0)*(x9448*x9448)))+(((2.0)*x9447*x9448))+(((-1.0)*(r12*r12))))),-1);
if(!x9450.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x9449.value)+(((1.5707963267949)*(x9450.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x9451=IKcos(j8);
IkReal x9452=IKsin(j8);
IkReal x9453=((1.0)*sj5);
IkReal x9454=(gconst4*r11);
IkReal x9455=(gconst5*r10);
IkReal x9456=(gconst5*r00);
IkReal x9457=(gconst4*r21);
IkReal x9458=(gconst4*r01);
IkReal x9459=(gconst5*r20);
IkReal x9460=((1.0)*x9451);
IkReal x9461=((1.0)*x9452);
evalcond[0]=(((x9451*x9457))+((r22*x9452))+(((-1.0)*x9459*x9460)));
evalcond[1]=((((-1.0)*x9456*x9460))+((x9451*x9458))+((r02*x9452)));
evalcond[2]=(((x9452*x9455))+((r12*x9451))+(((-1.0)*x9454*x9461)));
evalcond[3]=((1.0)+((x9451*x9454))+(((-1.0)*x9455*x9460))+((r12*x9452)));
evalcond[4]=(((x9452*x9456))+(((-1.0)*x9458*x9461))+((cj5*cj6))+(((-1.0)*sj6*x9453))+((r02*x9451)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*x9457*x9461))+(((-1.0)*cj6*x9453))+((x9452*x9459))+((r22*x9451)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x9462=((1.0)*gconst5);
CheckValue<IkReal> x9463=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9462))+(((-1.0)*gconst4*r20)))),-1);
if(!x9463.valid){
continue;
}
CheckValue<IkReal> x9464 = IKatan2WithCheck(IkReal((((gconst4*r01))+(((-1.0)*r00*x9462)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9464.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9463.value)))+(x9464.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x9465=IKcos(j8);
IkReal x9466=IKsin(j8);
IkReal x9467=((1.0)*sj5);
IkReal x9468=(gconst4*r11);
IkReal x9469=(gconst5*r10);
IkReal x9470=(gconst5*r00);
IkReal x9471=(gconst4*r21);
IkReal x9472=(gconst4*r01);
IkReal x9473=(gconst5*r20);
IkReal x9474=((1.0)*x9465);
IkReal x9475=((1.0)*x9466);
evalcond[0]=(((r22*x9466))+(((-1.0)*x9473*x9474))+((x9465*x9471)));
evalcond[1]=((((-1.0)*x9470*x9474))+((r02*x9466))+((x9465*x9472)));
evalcond[2]=((((-1.0)*x9468*x9475))+((x9466*x9469))+((r12*x9465)));
evalcond[3]=((1.0)+((x9465*x9468))+(((-1.0)*x9469*x9474))+((r12*x9466)));
evalcond[4]=((((-1.0)*sj6*x9467))+((x9466*x9470))+((cj5*cj6))+(((-1.0)*x9472*x9475))+((r02*x9465)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*x9471*x9475))+((r22*x9465))+(((-1.0)*cj6*x9467))+((x9466*x9473)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x9476 = IKatan2WithCheck(IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9476.valid){
continue;
}
CheckValue<IkReal> x9477=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x9477.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x9476.value)+(((1.5707963267949)*(x9477.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x9478=IKcos(j8);
IkReal x9479=IKsin(j8);
IkReal x9480=((1.0)*sj5);
IkReal x9481=(gconst4*r11);
IkReal x9482=(gconst5*r10);
IkReal x9483=(gconst5*r00);
IkReal x9484=(gconst4*r21);
IkReal x9485=(gconst4*r01);
IkReal x9486=(gconst5*r20);
IkReal x9487=((1.0)*x9478);
IkReal x9488=((1.0)*x9479);
evalcond[0]=(((x9478*x9484))+((r22*x9479))+(((-1.0)*x9486*x9487)));
evalcond[1]=(((x9478*x9485))+(((-1.0)*x9483*x9487))+((r02*x9479)));
evalcond[2]=((((-1.0)*x9481*x9488))+((x9479*x9482))+((r12*x9478)));
evalcond[3]=((1.0)+((x9478*x9481))+(((-1.0)*x9482*x9487))+((r12*x9479)));
evalcond[4]=((((-1.0)*x9485*x9488))+(((-1.0)*sj6*x9480))+((x9479*x9483))+((cj5*cj6))+((r02*x9478)));
evalcond[5]=((((-1.0)*cj5*sj6))+((r22*x9478))+(((-1.0)*x9484*x9488))+((x9479*x9486))+(((-1.0)*cj6*x9480)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x9489=((-1.0)*r21);
CheckValue<IkReal> x9492 = IKatan2WithCheck(IkReal(x9489),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9492.valid){
continue;
}
IkReal x9490=((1.0)*(x9492.value));
IkReal x9491=x9265;
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x9490)));
sj4=0;
cj4=1.0;
j4=0;
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9490)));
IkReal gconst4=(x9489*x9491);
IkReal gconst5=((1.0)*r20*x9491);
j8eval[0]=1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[4];
IkReal x9493=((-1.0)*r21);
CheckValue<IkReal> x9496 = IKatan2WithCheck(IkReal(x9493),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9496.valid){
continue;
}
IkReal x9494=((1.0)*(x9496.value));
IkReal x9495=x9265;
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x9494)));
sj4=0;
cj4=1.0;
j4=0;
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9494)));
IkReal gconst4=(x9493*x9495);
IkReal gconst5=((1.0)*r20*x9495);
j8eval[0]=0;
j8eval[1]=0;
j8eval[2]=r02;
j8eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  )
{
{
IkReal j8eval[4];
IkReal x9497=((-1.0)*r21);
CheckValue<IkReal> x9500 = IKatan2WithCheck(IkReal(x9497),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9500.valid){
continue;
}
IkReal x9498=((1.0)*(x9500.value));
IkReal x9499=x9265;
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x9498)));
sj4=0;
cj4=1.0;
j4=0;
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9498)));
IkReal gconst4=(x9497*x9499);
IkReal gconst5=((1.0)*r20*x9499);
IkReal x9501=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9505=IKPowWithIntegerCheck(x9501,-1);
if(!x9505.valid){
continue;
}
IkReal x9502=x9505.value;
IkReal x9503=((1.0)*x9502);
IkReal x9504=((((-2.0)*r10*r11*r20*r21*x9502))+(((-1.0)*x9503*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-1.0)*x9503*(r11*r11)*(r21*r21))));
j8eval[0]=x9504;
j8eval[1]=r12;
j8eval[2]=x9501;
j8eval[3]=IKsign(x9504);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x9506=(gconst5*r10);
IkReal x9507=(gconst4*r11);
CheckValue<IkReal> x9508=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9506*x9506)))+(((2.0)*x9506*x9507))+(((-1.0)*(x9507*x9507)))+(((-1.0)*(r12*r12))))),-1);
if(!x9508.valid){
continue;
}
CheckValue<IkReal> x9509 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x9506))+x9507)),IKFAST_ATAN2_MAGTHRESH);
if(!x9509.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9508.value)))+(x9509.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x9510=IKcos(j8);
IkReal x9511=IKsin(j8);
IkReal x9512=(gconst4*r11);
IkReal x9513=((1.0)*sj5);
IkReal x9514=(gconst5*r00);
IkReal x9515=(gconst5*r20);
IkReal x9516=((1.0)*gconst5*r10);
IkReal x9517=((1.0)*x9510);
IkReal x9518=(gconst4*x9511);
IkReal x9519=((1.0)*x9511);
IkReal x9520=(gconst4*x9510);
evalcond[0]=(((r22*x9511))+(((-1.0)*x9515*x9517))+((r21*x9520)));
evalcond[1]=((((-1.0)*x9514*x9517))+((r01*x9520))+((r02*x9511)));
evalcond[2]=((1.0)+(((-1.0)*x9510*x9516))+((x9510*x9512))+((r12*x9511)));
evalcond[3]=((((-1.0)*x9511*x9516))+((x9511*x9512))+(((-1.0)*r12*x9517)));
evalcond[4]=((((-1.0)*x9514*x9519))+(((-1.0)*r02*x9517))+((r01*x9518))+(((-1.0)*sj6*x9513))+((cj5*cj6)));
evalcond[5]=((((-1.0)*cj5*sj6))+((r21*x9518))+(((-1.0)*cj6*x9513))+(((-1.0)*x9515*x9519))+(((-1.0)*r22*x9517)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x9521=((1.0)*gconst5);
CheckValue<IkReal> x9522 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x9521))+((gconst4*r01)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9522.valid){
continue;
}
CheckValue<IkReal> x9523=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9521))+(((-1.0)*gconst4*r20)))),-1);
if(!x9523.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x9522.value)+(((1.5707963267949)*(x9523.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x9524=IKcos(j8);
IkReal x9525=IKsin(j8);
IkReal x9526=(gconst4*r11);
IkReal x9527=((1.0)*sj5);
IkReal x9528=(gconst5*r00);
IkReal x9529=(gconst5*r20);
IkReal x9530=((1.0)*gconst5*r10);
IkReal x9531=((1.0)*x9524);
IkReal x9532=(gconst4*x9525);
IkReal x9533=((1.0)*x9525);
IkReal x9534=(gconst4*x9524);
evalcond[0]=(((r22*x9525))+(((-1.0)*x9529*x9531))+((r21*x9534)));
evalcond[1]=(((r02*x9525))+((r01*x9534))+(((-1.0)*x9528*x9531)));
evalcond[2]=((1.0)+((x9524*x9526))+(((-1.0)*x9524*x9530))+((r12*x9525)));
evalcond[3]=((((-1.0)*x9525*x9530))+((x9525*x9526))+(((-1.0)*r12*x9531)));
evalcond[4]=((((-1.0)*sj6*x9527))+(((-1.0)*r02*x9531))+((cj5*cj6))+((r01*x9532))+(((-1.0)*x9528*x9533)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*r22*x9531))+(((-1.0)*cj6*x9527))+(((-1.0)*x9529*x9533))+((r21*x9532)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x9535 = IKatan2WithCheck(IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9535.valid){
continue;
}
CheckValue<IkReal> x9536=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x9536.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x9535.value)+(((1.5707963267949)*(x9536.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x9537=IKcos(j8);
IkReal x9538=IKsin(j8);
IkReal x9539=(gconst4*r11);
IkReal x9540=((1.0)*sj5);
IkReal x9541=(gconst5*r00);
IkReal x9542=(gconst5*r20);
IkReal x9543=((1.0)*gconst5*r10);
IkReal x9544=((1.0)*x9537);
IkReal x9545=(gconst4*x9538);
IkReal x9546=((1.0)*x9538);
IkReal x9547=(gconst4*x9537);
evalcond[0]=((((-1.0)*x9542*x9544))+((r22*x9538))+((r21*x9547)));
evalcond[1]=(((r02*x9538))+(((-1.0)*x9541*x9544))+((r01*x9547)));
evalcond[2]=((1.0)+(((-1.0)*x9537*x9543))+((x9537*x9539))+((r12*x9538)));
evalcond[3]=((((-1.0)*r12*x9544))+((x9538*x9539))+(((-1.0)*x9538*x9543)));
evalcond[4]=((((-1.0)*x9541*x9546))+(((-1.0)*r02*x9544))+((r01*x9545))+((cj5*cj6))+(((-1.0)*sj6*x9540)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*x9542*x9546))+(((-1.0)*r22*x9544))+(((-1.0)*cj6*x9540))+((r21*x9545)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[2];
IkReal x9548=((-1.0)*r21);
IkReal x9549=((-1.0)*px);
CheckValue<IkReal> x9551 = IKatan2WithCheck(IkReal(x9548),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9551.valid){
continue;
}
IkReal x9550=((1.0)*(x9551.value));
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x9550)));
sj4=0;
cj4=1.0;
j4=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9549);
rxp1_1=(px*r21);
rxp1_2=(r11*x9549);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9550)));
IkReal gconst4=x9548;
IkReal gconst5=((1.0)*r20);
IkReal x9552=((1.0)*sj7);
IkReal x9553=(r10*r20);
IkReal x9554=(r11*r21);
j8eval[0]=(((x9552*x9554))+((x9552*x9553)));
j8eval[1]=((((-1.0)*x9554))+(((-1.0)*x9553)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x9555=((-1.0)*r21);
IkReal x9556=((-1.0)*px);
CheckValue<IkReal> x9558 = IKatan2WithCheck(IkReal(x9555),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9558.valid){
continue;
}
IkReal x9557=((1.0)*(x9558.value));
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x9557)));
sj4=0;
cj4=1.0;
j4=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9556);
rxp1_1=(px*r21);
rxp1_2=(r11*x9556);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9557)));
IkReal gconst4=x9555;
IkReal gconst5=((1.0)*r20);
IkReal x9559=((1.0)*r11*r21);
IkReal x9560=((1.0)*r10*r20);
j8eval[0]=(((cj7*x9560))+((cj7*x9559)));
j8eval[1]=((((-1.0)*x9560))+(((-1.0)*x9559)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
IkReal x9561=((-1.0)*r21);
IkReal x9562=((-1.0)*px);
CheckValue<IkReal> x9564 = IKatan2WithCheck(IkReal(x9561),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9564.valid){
continue;
}
IkReal x9563=((1.0)*(x9564.value));
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x9563)));
sj4=0;
cj4=1.0;
j4=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9562);
rxp1_1=(px*r21);
rxp1_2=(r11*x9562);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9563)));
IkReal gconst4=x9561;
IkReal gconst5=((1.0)*r20);
IkReal x9565=((1.0)*cj7);
j8eval[0]=(((r11*r21*x9565))+((r10*r20*x9565)));
j8eval[1]=r02;
j8eval[2]=sj7;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x9566=((1.0)*r11);
CheckValue<IkReal> x9567=IKPowWithIntegerCheck((((cj7*gconst5*r10))+(((-1.0)*cj7*gconst4*x9566))),-1);
if(!x9567.valid){
continue;
}
CheckValue<IkReal> x9568=IKPowWithIntegerCheck(r02,-1);
if(!x9568.valid){
continue;
}
CheckValue<IkReal> x9569=IKPowWithIntegerCheck(sj7,-1);
if(!x9569.valid){
continue;
}
if( IKabs(((x9567.value)*(((((-1.0)*gconst4*r10*sj7))+(((-1.0)*gconst5*sj7*x9566)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9568.value)*(x9569.value)*((((cj6*sj5))+((cj5*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9567.value)*(((((-1.0)*gconst4*r10*sj7))+(((-1.0)*gconst5*sj7*x9566))))))+IKsqr(((x9568.value)*(x9569.value)*((((cj6*sj5))+((cj5*sj6))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((x9567.value)*(((((-1.0)*gconst4*r10*sj7))+(((-1.0)*gconst5*sj7*x9566))))), ((x9568.value)*(x9569.value)*((((cj6*sj5))+((cj5*sj6))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x9570=IKcos(j8);
IkReal x9571=IKsin(j8);
IkReal x9572=(gconst5*r10);
IkReal x9573=(gconst4*r11);
IkReal x9574=((1.0)*cj7);
IkReal x9575=((1.0)*cj6);
IkReal x9576=(gconst5*r21);
IkReal x9577=(sj5*sj6);
IkReal x9578=(gconst5*r20);
IkReal x9579=(gconst4*r21);
IkReal x9580=(gconst4*r10);
IkReal x9581=(gconst4*r20);
IkReal x9582=(gconst5*r11);
IkReal x9583=((1.0)*cj5*sj6);
IkReal x9584=(sj5*x9575);
IkReal x9585=(sj7*x9571);
IkReal x9586=(r02*x9570);
IkReal x9587=((1.0)*x9570);
IkReal x9588=(cj7*x9571);
IkReal x9589=(x9583+x9584);
evalcond[0]=(r02*x9571);
evalcond[1]=((((-1.0)*x9578*x9587))+((x9570*x9579)));
evalcond[2]=((((-1.0)*x9577))+((cj5*cj6))+((cj7*x9586)));
evalcond[3]=((1.0)+(((-1.0)*x9572*x9587))+((x9570*x9573)));
evalcond[4]=(((sj7*x9586))+(((-1.0)*x9589)));
evalcond[5]=(((sj7*x9582))+((sj7*x9580))+(((-1.0)*x9571*x9573*x9574))+((x9572*x9588)));
evalcond[6]=((((-1.0)*x9573*x9585))+(((-1.0)*x9574*x9580))+(((-1.0)*x9574*x9582))+((x9572*x9585)));
evalcond[7]=((((-1.0)*x9571*x9574*x9579))+((sj7*x9581))+((sj7*x9576))+((x9578*x9588))+(((-1.0)*x9589)));
evalcond[8]=((((-1.0)*x9574*x9581))+(((-1.0)*x9579*x9585))+(((-1.0)*x9574*x9576))+((x9578*x9585))+x9577+(((-1.0)*cj5*x9575)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x9590=((1.0)*gconst5);
IkReal x9591=(gconst4*r11);
CheckValue<IkReal> x9592=IKPowWithIntegerCheck((((cj7*gconst5*r10))+(((-1.0)*cj7*x9591))),-1);
if(!x9592.valid){
continue;
}
CheckValue<IkReal> x9593=IKPowWithIntegerCheck((x9591+(((-1.0)*r10*x9590))),-1);
if(!x9593.valid){
continue;
}
if( IKabs(((x9592.value)*(((((-1.0)*gconst4*r10*sj7))+(((-1.0)*r11*sj7*x9590)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x9593.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9592.value)*(((((-1.0)*gconst4*r10*sj7))+(((-1.0)*r11*sj7*x9590))))))+IKsqr(((-1.0)*(x9593.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((x9592.value)*(((((-1.0)*gconst4*r10*sj7))+(((-1.0)*r11*sj7*x9590))))), ((-1.0)*(x9593.value)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x9594=IKcos(j8);
IkReal x9595=IKsin(j8);
IkReal x9596=(gconst5*r10);
IkReal x9597=(gconst4*r11);
IkReal x9598=((1.0)*cj7);
IkReal x9599=((1.0)*cj6);
IkReal x9600=(gconst5*r21);
IkReal x9601=(sj5*sj6);
IkReal x9602=(gconst5*r20);
IkReal x9603=(gconst4*r21);
IkReal x9604=(gconst4*r10);
IkReal x9605=(gconst4*r20);
IkReal x9606=(gconst5*r11);
IkReal x9607=((1.0)*cj5*sj6);
IkReal x9608=(sj5*x9599);
IkReal x9609=(sj7*x9595);
IkReal x9610=(r02*x9594);
IkReal x9611=((1.0)*x9594);
IkReal x9612=(cj7*x9595);
IkReal x9613=(x9607+x9608);
evalcond[0]=(r02*x9595);
evalcond[1]=(((x9594*x9603))+(((-1.0)*x9602*x9611)));
evalcond[2]=(((cj7*x9610))+(((-1.0)*x9601))+((cj5*cj6)));
evalcond[3]=((1.0)+((x9594*x9597))+(((-1.0)*x9596*x9611)));
evalcond[4]=((((-1.0)*x9613))+((sj7*x9610)));
evalcond[5]=(((x9596*x9612))+((sj7*x9604))+((sj7*x9606))+(((-1.0)*x9595*x9597*x9598)));
evalcond[6]=((((-1.0)*x9597*x9609))+((x9596*x9609))+(((-1.0)*x9598*x9604))+(((-1.0)*x9598*x9606)));
evalcond[7]=((((-1.0)*x9595*x9598*x9603))+((x9602*x9612))+((sj7*x9605))+((sj7*x9600))+(((-1.0)*x9613)));
evalcond[8]=((((-1.0)*x9603*x9609))+((x9602*x9609))+x9601+(((-1.0)*x9598*x9605))+(((-1.0)*x9598*x9600))+(((-1.0)*cj5*x9599)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x9614=(gconst5*r10);
IkReal x9615=(gconst4*r11);
CheckValue<IkReal> x9616=IKPowWithIntegerCheck((((sj7*x9614))+(((-1.0)*sj7*x9615))),-1);
if(!x9616.valid){
continue;
}
CheckValue<IkReal> x9617=IKPowWithIntegerCheck(((((-1.0)*x9614))+x9615),-1);
if(!x9617.valid){
continue;
}
if( IKabs(((x9616.value)*((((cj7*gconst5*r11))+((cj7*gconst4*r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x9617.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9616.value)*((((cj7*gconst5*r11))+((cj7*gconst4*r10))))))+IKsqr(((-1.0)*(x9617.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((x9616.value)*((((cj7*gconst5*r11))+((cj7*gconst4*r10))))), ((-1.0)*(x9617.value)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x9618=IKcos(j8);
IkReal x9619=IKsin(j8);
IkReal x9620=(gconst5*r10);
IkReal x9621=(gconst4*r11);
IkReal x9622=((1.0)*cj7);
IkReal x9623=((1.0)*cj6);
IkReal x9624=(gconst5*r21);
IkReal x9625=(sj5*sj6);
IkReal x9626=(gconst5*r20);
IkReal x9627=(gconst4*r21);
IkReal x9628=(gconst4*r10);
IkReal x9629=(gconst4*r20);
IkReal x9630=(gconst5*r11);
IkReal x9631=((1.0)*cj5*sj6);
IkReal x9632=(sj5*x9623);
IkReal x9633=(sj7*x9619);
IkReal x9634=(r02*x9618);
IkReal x9635=((1.0)*x9618);
IkReal x9636=(cj7*x9619);
IkReal x9637=(x9631+x9632);
evalcond[0]=(r02*x9619);
evalcond[1]=((((-1.0)*x9626*x9635))+((x9618*x9627)));
evalcond[2]=(((cj7*x9634))+(((-1.0)*x9625))+((cj5*cj6)));
evalcond[3]=((1.0)+((x9618*x9621))+(((-1.0)*x9620*x9635)));
evalcond[4]=(((sj7*x9634))+(((-1.0)*x9637)));
evalcond[5]=(((sj7*x9630))+((sj7*x9628))+((x9620*x9636))+(((-1.0)*x9619*x9621*x9622)));
evalcond[6]=((((-1.0)*x9621*x9633))+((x9620*x9633))+(((-1.0)*x9622*x9630))+(((-1.0)*x9622*x9628)));
evalcond[7]=(((sj7*x9624))+((sj7*x9629))+(((-1.0)*x9619*x9622*x9627))+(((-1.0)*x9637))+((x9626*x9636)));
evalcond[8]=((((-1.0)*cj5*x9623))+x9625+(((-1.0)*x9622*x9629))+(((-1.0)*x9622*x9624))+(((-1.0)*x9627*x9633))+((x9626*x9633)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x9638=gconst4*gconst4;
IkReal x9639=gconst5*gconst5;
IkReal x9640=(r10*r20);
IkReal x9641=(r11*r20);
IkReal x9642=(r10*r21);
IkReal x9643=((1.0)*sj7);
IkReal x9644=(gconst5*r11);
IkReal x9645=((1.0)*gconst4*gconst5);
CheckValue<IkReal> x9646=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj7*x9642*x9645))+((cj7*r12*r22))+((cj7*x9639*x9640))+((cj7*r11*r21*x9638))+(((-1.0)*cj7*x9641*x9645)))),-1);
if(!x9646.valid){
continue;
}
CheckValue<IkReal> x9647 = IKatan2WithCheck(IkReal(((((-1.0)*x9639*x9641*x9643))+((sj7*x9638*x9642))+(((-1.0)*gconst4*gconst5*x9640*x9643))+((gconst4*r21*sj7*x9644)))),IkReal(((((-1.0)*r22*x9643*x9644))+(((-1.0)*gconst4*r10*r22*x9643)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9647.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9646.value)))+(x9647.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x9648=IKcos(j8);
IkReal x9649=IKsin(j8);
IkReal x9650=(gconst5*r10);
IkReal x9651=((1.0)*cj6);
IkReal x9652=(gconst4*sj7);
IkReal x9653=(gconst4*r11);
IkReal x9654=(cj7*gconst5);
IkReal x9655=((1.0)*r21);
IkReal x9656=(sj5*sj6);
IkReal x9657=(gconst5*r20);
IkReal x9658=(gconst5*sj7);
IkReal x9659=((1.0)*r01);
IkReal x9660=(gconst5*r00);
IkReal x9661=((1.0)*cj5*sj6);
IkReal x9662=(sj5*x9651);
IkReal x9663=((1.0)*cj7*gconst4);
IkReal x9664=(sj7*x9649);
IkReal x9665=(sj7*x9648);
IkReal x9666=((1.0)*x9648);
IkReal x9667=(cj7*x9648);
IkReal x9668=(gconst4*x9648);
IkReal x9669=(x9662+x9661);
evalcond[0]=(((r22*x9649))+((r21*x9668))+(((-1.0)*x9657*x9666)));
evalcond[1]=(((r02*x9649))+(((-1.0)*x9660*x9666))+((r01*x9668)));
evalcond[2]=((1.0)+((x9648*x9653))+(((-1.0)*x9650*x9666))+((r12*x9649)));
evalcond[3]=(((cj7*x9649*x9650))+((r11*x9658))+(((-1.0)*cj7*x9649*x9653))+((r12*x9667))+((r10*x9652)));
evalcond[4]=((((-1.0)*r10*x9663))+(((-1.0)*r11*x9649*x9652))+((r12*x9665))+(((-1.0)*r11*x9654))+((x9650*x9664)));
evalcond[5]=(((r01*x9658))+((r00*x9652))+(((-1.0)*cj7*gconst4*x9649*x9659))+((cj5*cj6))+(((-1.0)*x9656))+((r02*x9667))+((r00*x9649*x9654)));
evalcond[6]=((((-1.0)*x9669))+((r21*x9658))+((r20*x9652))+(((-1.0)*cj7*gconst4*x9649*x9655))+((r22*x9667))+((r20*x9649*x9654)));
evalcond[7]=((((-1.0)*r20*x9663))+(((-1.0)*x9654*x9655))+((x9657*x9664))+x9656+((r22*x9665))+(((-1.0)*cj5*x9651))+(((-1.0)*x9649*x9652*x9655)));
evalcond[8]=((((-1.0)*x9669))+(((-1.0)*r00*x9663))+(((-1.0)*x9654*x9659))+((r02*x9665))+((r00*x9649*x9658))+(((-1.0)*x9649*x9652*x9659)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x9670=((1.0)*gconst5);
CheckValue<IkReal> x9671 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x9670))+((gconst4*r01)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9671.valid){
continue;
}
CheckValue<IkReal> x9672=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x9670))+(((-1.0)*gconst4*r20)))),-1);
if(!x9672.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x9671.value)+(((1.5707963267949)*(x9672.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x9673=IKcos(j8);
IkReal x9674=IKsin(j8);
IkReal x9675=(gconst5*r10);
IkReal x9676=((1.0)*cj6);
IkReal x9677=(gconst4*sj7);
IkReal x9678=(gconst4*r11);
IkReal x9679=(cj7*gconst5);
IkReal x9680=((1.0)*r21);
IkReal x9681=(sj5*sj6);
IkReal x9682=(gconst5*r20);
IkReal x9683=(gconst5*sj7);
IkReal x9684=((1.0)*r01);
IkReal x9685=(gconst5*r00);
IkReal x9686=((1.0)*cj5*sj6);
IkReal x9687=(sj5*x9676);
IkReal x9688=((1.0)*cj7*gconst4);
IkReal x9689=(sj7*x9674);
IkReal x9690=(sj7*x9673);
IkReal x9691=((1.0)*x9673);
IkReal x9692=(cj7*x9673);
IkReal x9693=(gconst4*x9673);
IkReal x9694=(x9687+x9686);
evalcond[0]=(((r21*x9693))+(((-1.0)*x9682*x9691))+((r22*x9674)));
evalcond[1]=((((-1.0)*x9685*x9691))+((r02*x9674))+((r01*x9693)));
evalcond[2]=((1.0)+((x9673*x9678))+((r12*x9674))+(((-1.0)*x9675*x9691)));
evalcond[3]=((((-1.0)*cj7*x9674*x9678))+((cj7*x9674*x9675))+((r10*x9677))+((r12*x9692))+((r11*x9683)));
evalcond[4]=((((-1.0)*r11*x9674*x9677))+(((-1.0)*r10*x9688))+((x9675*x9689))+((r12*x9690))+(((-1.0)*r11*x9679)));
evalcond[5]=(((r00*x9674*x9679))+(((-1.0)*cj7*gconst4*x9674*x9684))+(((-1.0)*x9681))+((r02*x9692))+((r00*x9677))+((cj5*cj6))+((r01*x9683)));
evalcond[6]=((((-1.0)*cj7*gconst4*x9674*x9680))+((r22*x9692))+((r20*x9677))+((r21*x9683))+(((-1.0)*x9694))+((r20*x9674*x9679)));
evalcond[7]=(((x9682*x9689))+((r22*x9690))+x9681+(((-1.0)*x9679*x9680))+(((-1.0)*r20*x9688))+(((-1.0)*x9674*x9677*x9680))+(((-1.0)*cj5*x9676)));
evalcond[8]=(((r02*x9690))+(((-1.0)*r00*x9688))+((r00*x9674*x9683))+(((-1.0)*x9694))+(((-1.0)*x9679*x9684))+(((-1.0)*x9674*x9677*x9684)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x9695 = IKatan2WithCheck(IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9695.valid){
continue;
}
CheckValue<IkReal> x9696=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x9696.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x9695.value)+(((1.5707963267949)*(x9696.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x9697=IKcos(j8);
IkReal x9698=IKsin(j8);
IkReal x9699=(gconst5*r10);
IkReal x9700=((1.0)*cj6);
IkReal x9701=(gconst4*sj7);
IkReal x9702=(gconst4*r11);
IkReal x9703=(cj7*gconst5);
IkReal x9704=((1.0)*r21);
IkReal x9705=(sj5*sj6);
IkReal x9706=(gconst5*r20);
IkReal x9707=(gconst5*sj7);
IkReal x9708=((1.0)*r01);
IkReal x9709=(gconst5*r00);
IkReal x9710=((1.0)*cj5*sj6);
IkReal x9711=(sj5*x9700);
IkReal x9712=((1.0)*cj7*gconst4);
IkReal x9713=(sj7*x9698);
IkReal x9714=(sj7*x9697);
IkReal x9715=((1.0)*x9697);
IkReal x9716=(cj7*x9697);
IkReal x9717=(gconst4*x9697);
IkReal x9718=(x9711+x9710);
evalcond[0]=(((r22*x9698))+((r21*x9717))+(((-1.0)*x9706*x9715)));
evalcond[1]=((((-1.0)*x9709*x9715))+((r02*x9698))+((r01*x9717)));
evalcond[2]=((1.0)+((x9697*x9702))+((r12*x9698))+(((-1.0)*x9699*x9715)));
evalcond[3]=(((r10*x9701))+((r12*x9716))+((r11*x9707))+((cj7*x9698*x9699))+(((-1.0)*cj7*x9698*x9702)));
evalcond[4]=((((-1.0)*r10*x9712))+((r12*x9714))+(((-1.0)*r11*x9698*x9701))+((x9699*x9713))+(((-1.0)*r11*x9703)));
evalcond[5]=((((-1.0)*cj7*gconst4*x9698*x9708))+(((-1.0)*x9705))+((r02*x9716))+((r01*x9707))+((r00*x9701))+((cj5*cj6))+((r00*x9698*x9703)));
evalcond[6]=(((r22*x9716))+(((-1.0)*cj7*gconst4*x9698*x9704))+((r20*x9701))+((r21*x9707))+((r20*x9698*x9703))+(((-1.0)*x9718)));
evalcond[7]=(((x9706*x9713))+((r22*x9714))+(((-1.0)*r20*x9712))+x9705+(((-1.0)*x9703*x9704))+(((-1.0)*cj5*x9700))+(((-1.0)*x9698*x9701*x9704)));
evalcond[8]=((((-1.0)*r00*x9712))+((r02*x9714))+(((-1.0)*x9703*x9708))+(((-1.0)*x9718))+((r00*x9698*x9707))+(((-1.0)*x9698*x9701*x9708)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[4];
IkReal x9719=((-1.0)*r21);
CheckValue<IkReal> x9722 = IKatan2WithCheck(IkReal(x9719),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9722.valid){
continue;
}
IkReal x9720=((1.0)*(x9722.value));
IkReal x9721=x9265;
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x9720)));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9720)));
IkReal gconst4=(x9719*x9721);
IkReal gconst5=((1.0)*r20*x9721);
j8eval[0]=0;
j8eval[1]=0;
j8eval[2]=r02;
j8eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
IkReal x9723=((-1.0)*r21);
CheckValue<IkReal> x9726 = IKatan2WithCheck(IkReal(x9723),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9726.valid){
continue;
}
IkReal x9724=((1.0)*(x9726.value));
IkReal x9725=x9265;
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x9724)));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9724)));
IkReal gconst4=(x9723*x9725);
IkReal gconst5=((1.0)*r20*x9725);
j8eval[0]=1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
IkReal x9727=((-1.0)*r21);
CheckValue<IkReal> x9730 = IKatan2WithCheck(IkReal(x9727),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9730.valid){
continue;
}
IkReal x9728=((1.0)*(x9730.value));
IkReal x9729=x9265;
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x9728)));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9728)));
IkReal gconst4=(x9727*x9729);
IkReal gconst5=((1.0)*r20*x9729);
j8eval[0]=r02;
j8eval[1]=sj7;
j8eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[4];
IkReal x9731=((-1.0)*r21);
CheckValue<IkReal> x9734 = IKatan2WithCheck(IkReal(x9731),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9734.valid){
continue;
}
IkReal x9732=((1.0)*(x9734.value));
IkReal x9733=x9265;
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x9732)));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9732)));
IkReal gconst4=(x9731*x9733);
IkReal gconst5=((1.0)*r20*x9733);
j8eval[0]=0;
j8eval[1]=0;
j8eval[2]=r02;
j8eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
IkReal x9735=((-1.0)*r21);
CheckValue<IkReal> x9738 = IKatan2WithCheck(IkReal(x9735),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9738.valid){
continue;
}
IkReal x9736=((1.0)*(x9738.value));
IkReal x9737=x9265;
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x9736)));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9736)));
IkReal gconst4=(x9735*x9737);
IkReal gconst5=((1.0)*r20*x9737);
j8eval[0]=1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x9739=((-1.0)*r21);
CheckValue<IkReal> x9742 = IKatan2WithCheck(IkReal(x9739),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9742.valid){
continue;
}
IkReal x9740=((1.0)*(x9742.value));
IkReal x9741=x9265;
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x9740)));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9740)));
IkReal gconst4=(x9739*x9741);
IkReal gconst5=((1.0)*r20*x9741);
j8eval[0]=r12;
j8eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x9743=(gconst5*r10);
IkReal x9744=(gconst4*r11);
CheckValue<IkReal> x9745=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x9744*x9744)+(((-2.0)*x9743*x9744))+(x9743*x9743))),-1);
if(!x9745.valid){
continue;
}
CheckValue<IkReal> x9746 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x9743))+x9744)),IKFAST_ATAN2_MAGTHRESH);
if(!x9746.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9745.value)))+(x9746.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x9747=IKcos(j8);
IkReal x9748=IKsin(j8);
IkReal x9749=(gconst4*r11);
IkReal x9750=(gconst5*r10);
IkReal x9751=(gconst5*r00);
IkReal x9752=(gconst4*r21);
IkReal x9753=(gconst4*r01);
IkReal x9754=(gconst5*r20);
IkReal x9755=((1.0)*x9747);
IkReal x9756=((1.0)*x9748);
evalcond[0]=(((r22*x9748))+((x9747*x9752))+(((-1.0)*x9754*x9755)));
evalcond[1]=(((r02*x9748))+((x9747*x9753))+(((-1.0)*x9751*x9755)));
evalcond[2]=(((x9748*x9750))+(((-1.0)*x9749*x9756))+((r12*x9747)));
evalcond[3]=((-1.0)+((x9747*x9749))+((r12*x9748))+(((-1.0)*x9750*x9755)));
evalcond[4]=(((x9748*x9751))+((cj6*sj5))+((cj5*sj6))+((r02*x9747))+(((-1.0)*x9753*x9756)));
evalcond[5]=(((x9748*x9754))+((sj5*sj6))+((r22*x9747))+(((-1.0)*x9752*x9756))+(((-1.0)*cj5*cj6)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x9757=((1.0)*gconst5);
CheckValue<IkReal> x9758 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x9757))+((gconst4*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9758.valid){
continue;
}
CheckValue<IkReal> x9759=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x9757)))),-1);
if(!x9759.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x9758.value)+(((1.5707963267949)*(x9759.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x9760=IKcos(j8);
IkReal x9761=IKsin(j8);
IkReal x9762=(gconst4*r11);
IkReal x9763=(gconst5*r10);
IkReal x9764=(gconst5*r00);
IkReal x9765=(gconst4*r21);
IkReal x9766=(gconst4*r01);
IkReal x9767=(gconst5*r20);
IkReal x9768=((1.0)*x9760);
IkReal x9769=((1.0)*x9761);
evalcond[0]=(((r22*x9761))+(((-1.0)*x9767*x9768))+((x9760*x9765)));
evalcond[1]=((((-1.0)*x9764*x9768))+((r02*x9761))+((x9760*x9766)));
evalcond[2]=(((x9761*x9763))+((r12*x9760))+(((-1.0)*x9762*x9769)));
evalcond[3]=((-1.0)+(((-1.0)*x9763*x9768))+((r12*x9761))+((x9760*x9762)));
evalcond[4]=(((x9761*x9764))+((cj6*sj5))+((cj5*sj6))+((r02*x9760))+(((-1.0)*x9766*x9769)));
evalcond[5]=(((x9761*x9767))+(((-1.0)*x9765*x9769))+((r22*x9760))+((sj5*sj6))+(((-1.0)*cj5*cj6)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x9770 = IKatan2WithCheck(IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9770.valid){
continue;
}
CheckValue<IkReal> x9771=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x9771.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x9770.value)+(((1.5707963267949)*(x9771.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x9772=IKcos(j8);
IkReal x9773=IKsin(j8);
IkReal x9774=(gconst4*r11);
IkReal x9775=(gconst5*r10);
IkReal x9776=(gconst5*r00);
IkReal x9777=(gconst4*r21);
IkReal x9778=(gconst4*r01);
IkReal x9779=(gconst5*r20);
IkReal x9780=((1.0)*x9772);
IkReal x9781=((1.0)*x9773);
evalcond[0]=(((x9772*x9777))+((r22*x9773))+(((-1.0)*x9779*x9780)));
evalcond[1]=(((x9772*x9778))+((r02*x9773))+(((-1.0)*x9776*x9780)));
evalcond[2]=(((r12*x9772))+((x9773*x9775))+(((-1.0)*x9774*x9781)));
evalcond[3]=((-1.0)+((r12*x9773))+((x9772*x9774))+(((-1.0)*x9775*x9780)));
evalcond[4]=(((x9773*x9776))+((cj6*sj5))+((cj5*sj6))+((r02*x9772))+(((-1.0)*x9778*x9781)));
evalcond[5]=(((x9773*x9779))+((r22*x9772))+((sj5*sj6))+(((-1.0)*x9777*x9781))+(((-1.0)*cj5*cj6)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[4];
IkReal x9782=((-1.0)*r21);
CheckValue<IkReal> x9785 = IKatan2WithCheck(IkReal(x9782),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9785.valid){
continue;
}
IkReal x9783=((1.0)*(x9785.value));
IkReal x9784=x9265;
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x9783)));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9783)));
IkReal gconst4=(x9782*x9784);
IkReal gconst5=((1.0)*r20*x9784);
j8eval[0]=0;
j8eval[1]=0;
j8eval[2]=r02;
j8eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
IkReal x9786=((-1.0)*r21);
CheckValue<IkReal> x9789 = IKatan2WithCheck(IkReal(x9786),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9789.valid){
continue;
}
IkReal x9787=((1.0)*(x9789.value));
IkReal x9788=x9265;
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x9787)));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9787)));
IkReal gconst4=(x9786*x9788);
IkReal gconst5=((1.0)*r20*x9788);
j8eval[0]=1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x9790=((-1.0)*r21);
CheckValue<IkReal> x9793 = IKatan2WithCheck(IkReal(x9790),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9793.valid){
continue;
}
IkReal x9791=((1.0)*(x9793.value));
IkReal x9792=x9265;
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x9791)));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9791)));
IkReal gconst4=(x9790*x9792);
IkReal gconst5=((1.0)*r20*x9792);
j8eval[0]=r12;
j8eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x9794=(gconst5*r10);
IkReal x9795=(gconst4*r11);
CheckValue<IkReal> x9796 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x9794))+x9795)),IKFAST_ATAN2_MAGTHRESH);
if(!x9796.valid){
continue;
}
CheckValue<IkReal> x9797=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x9794*x9795))+(x9794*x9794)+(x9795*x9795))),-1);
if(!x9797.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x9796.value)+(((1.5707963267949)*(x9797.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x9798=IKcos(j8);
IkReal x9799=IKsin(j8);
IkReal x9800=(gconst4*r11);
IkReal x9801=(gconst5*r00);
IkReal x9802=(gconst5*r20);
IkReal x9803=((1.0)*gconst5*r10);
IkReal x9804=((1.0)*x9798);
IkReal x9805=(gconst4*x9799);
IkReal x9806=((1.0)*x9799);
IkReal x9807=(gconst4*x9798);
evalcond[0]=(((r21*x9807))+((r22*x9799))+(((-1.0)*x9802*x9804)));
evalcond[1]=(((r02*x9799))+(((-1.0)*x9801*x9804))+((r01*x9807)));
evalcond[2]=((-1.0)+((x9798*x9800))+((r12*x9799))+(((-1.0)*x9798*x9803)));
evalcond[3]=(((x9799*x9800))+(((-1.0)*x9799*x9803))+(((-1.0)*r12*x9804)));
evalcond[4]=((((-1.0)*r02*x9804))+((cj6*sj5))+((cj5*sj6))+(((-1.0)*x9801*x9806))+((r01*x9805)));
evalcond[5]=(((r21*x9805))+((sj5*sj6))+(((-1.0)*r22*x9804))+(((-1.0)*cj5*cj6))+(((-1.0)*x9802*x9806)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x9808=((1.0)*gconst5);
CheckValue<IkReal> x9809=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x9808)))),-1);
if(!x9809.valid){
continue;
}
CheckValue<IkReal> x9810 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x9808))+((gconst4*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9810.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9809.value)))+(x9810.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x9811=IKcos(j8);
IkReal x9812=IKsin(j8);
IkReal x9813=(gconst4*r11);
IkReal x9814=(gconst5*r00);
IkReal x9815=(gconst5*r20);
IkReal x9816=((1.0)*gconst5*r10);
IkReal x9817=((1.0)*x9811);
IkReal x9818=(gconst4*x9812);
IkReal x9819=((1.0)*x9812);
IkReal x9820=(gconst4*x9811);
evalcond[0]=(((r22*x9812))+((r21*x9820))+(((-1.0)*x9815*x9817)));
evalcond[1]=((((-1.0)*x9814*x9817))+((r01*x9820))+((r02*x9812)));
evalcond[2]=((-1.0)+((r12*x9812))+((x9811*x9813))+(((-1.0)*x9811*x9816)));
evalcond[3]=(((x9812*x9813))+(((-1.0)*x9812*x9816))+(((-1.0)*r12*x9817)));
evalcond[4]=((((-1.0)*r02*x9817))+(((-1.0)*x9814*x9819))+((cj6*sj5))+((cj5*sj6))+((r01*x9818)));
evalcond[5]=(((r21*x9818))+((sj5*sj6))+(((-1.0)*r22*x9817))+(((-1.0)*x9815*x9819))+(((-1.0)*cj5*cj6)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x9821 = IKatan2WithCheck(IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9821.valid){
continue;
}
CheckValue<IkReal> x9822=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x9822.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x9821.value)+(((1.5707963267949)*(x9822.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x9823=IKcos(j8);
IkReal x9824=IKsin(j8);
IkReal x9825=(gconst4*r11);
IkReal x9826=(gconst5*r00);
IkReal x9827=(gconst5*r20);
IkReal x9828=((1.0)*gconst5*r10);
IkReal x9829=((1.0)*x9823);
IkReal x9830=(gconst4*x9824);
IkReal x9831=((1.0)*x9824);
IkReal x9832=(gconst4*x9823);
evalcond[0]=((((-1.0)*x9827*x9829))+((r21*x9832))+((r22*x9824)));
evalcond[1]=(((r01*x9832))+(((-1.0)*x9826*x9829))+((r02*x9824)));
evalcond[2]=((-1.0)+(((-1.0)*x9823*x9828))+((r12*x9824))+((x9823*x9825)));
evalcond[3]=((((-1.0)*x9824*x9828))+(((-1.0)*r12*x9829))+((x9824*x9825)));
evalcond[4]=(((r01*x9830))+((cj6*sj5))+(((-1.0)*r02*x9829))+((cj5*sj6))+(((-1.0)*x9826*x9831)));
evalcond[5]=((((-1.0)*x9827*x9831))+((sj5*sj6))+((r21*x9830))+(((-1.0)*cj5*cj6))+(((-1.0)*r22*x9829)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[4];
IkReal x9833=((-1.0)*r21);
CheckValue<IkReal> x9836 = IKatan2WithCheck(IkReal(x9833),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9836.valid){
continue;
}
IkReal x9834=((1.0)*(x9836.value));
IkReal x9835=x9265;
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x9834)));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj7=0;
cj7=1.0;
j7=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9834)));
IkReal gconst4=(x9833*x9835);
IkReal gconst5=((1.0)*r20*x9835);
j8eval[0]=0;
j8eval[1]=0;
j8eval[2]=r02;
j8eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
IkReal x9837=((-1.0)*r21);
CheckValue<IkReal> x9840 = IKatan2WithCheck(IkReal(x9837),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9840.valid){
continue;
}
IkReal x9838=((1.0)*(x9840.value));
IkReal x9839=x9265;
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x9838)));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj7=0;
cj7=1.0;
j7=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9838)));
IkReal gconst4=(x9837*x9839);
IkReal gconst5=((1.0)*r20*x9839);
j8eval[0]=1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x9841=((-1.0)*r21);
CheckValue<IkReal> x9844 = IKatan2WithCheck(IkReal(x9841),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9844.valid){
continue;
}
IkReal x9842=((1.0)*(x9844.value));
IkReal x9843=x9265;
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x9842)));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj7=0;
cj7=1.0;
j7=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9842)));
IkReal gconst4=(x9841*x9843);
IkReal gconst5=((1.0)*r20*x9843);
j8eval[0]=r12;
j8eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x9845=(gconst5*r10);
IkReal x9846=(gconst4*r11);
CheckValue<IkReal> x9847 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x9845))+x9846)),IKFAST_ATAN2_MAGTHRESH);
if(!x9847.valid){
continue;
}
CheckValue<IkReal> x9848=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x9845*x9845)+(((-2.0)*x9845*x9846))+(x9846*x9846))),-1);
if(!x9848.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x9847.value)+(((1.5707963267949)*(x9848.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x9849=IKcos(j8);
IkReal x9850=IKsin(j8);
IkReal x9851=((1.0)*cj6);
IkReal x9852=(gconst4*r11);
IkReal x9853=(gconst5*r10);
IkReal x9854=(gconst5*r00);
IkReal x9855=(gconst4*r21);
IkReal x9856=(gconst4*r01);
IkReal x9857=(gconst5*r20);
IkReal x9858=((1.0)*x9849);
IkReal x9859=((1.0)*x9850);
evalcond[0]=(((x9849*x9855))+((r22*x9850))+(((-1.0)*x9857*x9858)));
evalcond[1]=((((-1.0)*x9854*x9858))+((x9849*x9856))+((r02*x9850)));
evalcond[2]=(((x9850*x9853))+((r12*x9849))+(((-1.0)*x9852*x9859)));
evalcond[3]=((-1.0)+((x9849*x9852))+(((-1.0)*x9853*x9858))+((r12*x9850)));
evalcond[4]=(((r02*x9849))+(((-1.0)*cj5*x9851))+((sj5*sj6))+((x9850*x9854))+(((-1.0)*x9856*x9859)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*x9855*x9859))+(((-1.0)*sj5*x9851))+((x9850*x9857))+((r22*x9849)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x9860=((1.0)*gconst5);
CheckValue<IkReal> x9861 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x9860))+((gconst4*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9861.valid){
continue;
}
CheckValue<IkReal> x9862=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x9860)))),-1);
if(!x9862.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x9861.value)+(((1.5707963267949)*(x9862.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x9863=IKcos(j8);
IkReal x9864=IKsin(j8);
IkReal x9865=((1.0)*cj6);
IkReal x9866=(gconst4*r11);
IkReal x9867=(gconst5*r10);
IkReal x9868=(gconst5*r00);
IkReal x9869=(gconst4*r21);
IkReal x9870=(gconst4*r01);
IkReal x9871=(gconst5*r20);
IkReal x9872=((1.0)*x9863);
IkReal x9873=((1.0)*x9864);
evalcond[0]=(((r22*x9864))+((x9863*x9869))+(((-1.0)*x9871*x9872)));
evalcond[1]=(((r02*x9864))+((x9863*x9870))+(((-1.0)*x9868*x9872)));
evalcond[2]=(((x9864*x9867))+(((-1.0)*x9866*x9873))+((r12*x9863)));
evalcond[3]=((-1.0)+((x9863*x9866))+(((-1.0)*x9867*x9872))+((r12*x9864)));
evalcond[4]=(((sj5*sj6))+((x9864*x9868))+((r02*x9863))+(((-1.0)*cj5*x9865))+(((-1.0)*x9870*x9873)));
evalcond[5]=((((-1.0)*cj5*sj6))+((x9864*x9871))+(((-1.0)*sj5*x9865))+((r22*x9863))+(((-1.0)*x9869*x9873)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x9874 = IKatan2WithCheck(IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9874.valid){
continue;
}
CheckValue<IkReal> x9875=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x9875.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x9874.value)+(((1.5707963267949)*(x9875.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x9876=IKcos(j8);
IkReal x9877=IKsin(j8);
IkReal x9878=((1.0)*cj6);
IkReal x9879=(gconst4*r11);
IkReal x9880=(gconst5*r10);
IkReal x9881=(gconst5*r00);
IkReal x9882=(gconst4*r21);
IkReal x9883=(gconst4*r01);
IkReal x9884=(gconst5*r20);
IkReal x9885=((1.0)*x9876);
IkReal x9886=((1.0)*x9877);
evalcond[0]=((((-1.0)*x9884*x9885))+((x9876*x9882))+((r22*x9877)));
evalcond[1]=(((r02*x9877))+((x9876*x9883))+(((-1.0)*x9881*x9885)));
evalcond[2]=(((r12*x9876))+((x9877*x9880))+(((-1.0)*x9879*x9886)));
evalcond[3]=((-1.0)+((r12*x9877))+((x9876*x9879))+(((-1.0)*x9880*x9885)));
evalcond[4]=(((r02*x9876))+((sj5*sj6))+(((-1.0)*x9883*x9886))+((x9877*x9881))+(((-1.0)*cj5*x9878)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*x9882*x9886))+(((-1.0)*sj5*x9878))+((x9877*x9884))+((r22*x9876)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[4];
IkReal x9887=((-1.0)*r21);
CheckValue<IkReal> x9890 = IKatan2WithCheck(IkReal(x9887),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9890.valid){
continue;
}
IkReal x9888=((1.0)*(x9890.value));
IkReal x9889=x9265;
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x9888)));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9888)));
IkReal gconst4=(x9887*x9889);
IkReal gconst5=((1.0)*r20*x9889);
j8eval[0]=0;
j8eval[1]=0;
j8eval[2]=r02;
j8eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
IkReal x9891=((-1.0)*r21);
CheckValue<IkReal> x9894 = IKatan2WithCheck(IkReal(x9891),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9894.valid){
continue;
}
IkReal x9892=((1.0)*(x9894.value));
IkReal x9893=x9265;
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x9892)));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9892)));
IkReal gconst4=(x9891*x9893);
IkReal gconst5=((1.0)*r20*x9893);
j8eval[0]=1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x9895=((-1.0)*r21);
CheckValue<IkReal> x9898 = IKatan2WithCheck(IkReal(x9895),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9898.valid){
continue;
}
IkReal x9896=((1.0)*(x9898.value));
IkReal x9897=x9265;
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x9896)));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9896)));
IkReal gconst4=(x9895*x9897);
IkReal gconst5=((1.0)*r20*x9897);
j8eval[0]=r12;
j8eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x9899=(gconst5*r10);
IkReal x9900=(gconst4*r11);
CheckValue<IkReal> x9901=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x9899*x9900))+(x9900*x9900)+(x9899*x9899))),-1);
if(!x9901.valid){
continue;
}
CheckValue<IkReal> x9902 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x9899))+x9900)),IKFAST_ATAN2_MAGTHRESH);
if(!x9902.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9901.value)))+(x9902.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x9903=IKcos(j8);
IkReal x9904=IKsin(j8);
IkReal x9905=(gconst4*r11);
IkReal x9906=((1.0)*cj6);
IkReal x9907=(gconst5*r00);
IkReal x9908=(gconst5*r20);
IkReal x9909=((1.0)*gconst5*r10);
IkReal x9910=((1.0)*x9903);
IkReal x9911=(gconst4*x9904);
IkReal x9912=((1.0)*x9904);
IkReal x9913=(gconst4*x9903);
evalcond[0]=((((-1.0)*x9908*x9910))+((r22*x9904))+((r21*x9913)));
evalcond[1]=(((r02*x9904))+((r01*x9913))+(((-1.0)*x9907*x9910)));
evalcond[2]=((-1.0)+((r12*x9904))+((x9903*x9905))+(((-1.0)*x9903*x9909)));
evalcond[3]=(((x9904*x9905))+(((-1.0)*r12*x9910))+(((-1.0)*x9904*x9909)));
evalcond[4]=(((sj5*sj6))+((r01*x9911))+(((-1.0)*r02*x9910))+(((-1.0)*cj5*x9906))+(((-1.0)*x9907*x9912)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*x9908*x9912))+(((-1.0)*r22*x9910))+((r21*x9911))+(((-1.0)*sj5*x9906)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x9914=((1.0)*gconst5);
CheckValue<IkReal> x9915 = IKatan2WithCheck(IkReal((((gconst4*r21))+(((-1.0)*r20*x9914)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9915.valid){
continue;
}
CheckValue<IkReal> x9916=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x9914)))),-1);
if(!x9916.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x9915.value)+(((1.5707963267949)*(x9916.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x9917=IKcos(j8);
IkReal x9918=IKsin(j8);
IkReal x9919=(gconst4*r11);
IkReal x9920=((1.0)*cj6);
IkReal x9921=(gconst5*r00);
IkReal x9922=(gconst5*r20);
IkReal x9923=((1.0)*gconst5*r10);
IkReal x9924=((1.0)*x9917);
IkReal x9925=(gconst4*x9918);
IkReal x9926=((1.0)*x9918);
IkReal x9927=(gconst4*x9917);
evalcond[0]=((((-1.0)*x9922*x9924))+((r22*x9918))+((r21*x9927)));
evalcond[1]=((((-1.0)*x9921*x9924))+((r01*x9927))+((r02*x9918)));
evalcond[2]=((-1.0)+((r12*x9918))+((x9917*x9919))+(((-1.0)*x9917*x9923)));
evalcond[3]=((((-1.0)*x9918*x9923))+(((-1.0)*r12*x9924))+((x9918*x9919)));
evalcond[4]=((((-1.0)*r02*x9924))+(((-1.0)*cj5*x9920))+((sj5*sj6))+(((-1.0)*x9921*x9926))+((r01*x9925)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*r22*x9924))+(((-1.0)*x9922*x9926))+(((-1.0)*sj5*x9920))+((r21*x9925)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x9928 = IKatan2WithCheck(IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9928.valid){
continue;
}
CheckValue<IkReal> x9929=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x9929.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x9928.value)+(((1.5707963267949)*(x9929.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x9930=IKcos(j8);
IkReal x9931=IKsin(j8);
IkReal x9932=(gconst4*r11);
IkReal x9933=((1.0)*cj6);
IkReal x9934=(gconst5*r00);
IkReal x9935=(gconst5*r20);
IkReal x9936=((1.0)*gconst5*r10);
IkReal x9937=((1.0)*x9930);
IkReal x9938=(gconst4*x9931);
IkReal x9939=((1.0)*x9931);
IkReal x9940=(gconst4*x9930);
evalcond[0]=(((r22*x9931))+(((-1.0)*x9935*x9937))+((r21*x9940)));
evalcond[1]=((((-1.0)*x9934*x9937))+((r01*x9940))+((r02*x9931)));
evalcond[2]=((-1.0)+((r12*x9931))+(((-1.0)*x9930*x9936))+((x9930*x9932)));
evalcond[3]=(((x9931*x9932))+(((-1.0)*r12*x9937))+(((-1.0)*x9931*x9936)));
evalcond[4]=(((r01*x9938))+((sj5*sj6))+(((-1.0)*r02*x9937))+(((-1.0)*x9934*x9939))+(((-1.0)*cj5*x9933)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*r22*x9937))+((r21*x9938))+(((-1.0)*x9935*x9939))+(((-1.0)*sj5*x9933)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
j8array[0]=0;
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x9941=gconst4*gconst4;
IkReal x9942=gconst5*gconst5;
IkReal x9943=(r10*r20);
IkReal x9944=(r11*r20);
IkReal x9945=(r10*r21);
IkReal x9946=((1.0)*sj7);
IkReal x9947=(gconst5*r11);
IkReal x9948=((1.0)*gconst4*gconst5);
CheckValue<IkReal> x9949 = IKatan2WithCheck(IkReal((((sj7*x9941*x9945))+(((-1.0)*x9942*x9944*x9946))+((gconst4*r21*sj7*x9947))+(((-1.0)*gconst4*gconst5*x9943*x9946)))),IkReal(((((-1.0)*r22*x9946*x9947))+(((-1.0)*gconst4*r10*r22*x9946)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9949.valid){
continue;
}
CheckValue<IkReal> x9950=IKPowWithIntegerCheck(IKsign((((cj7*r12*r22))+(((-1.0)*cj7*x9945*x9948))+((cj7*r11*r21*x9941))+((cj7*x9942*x9943))+(((-1.0)*cj7*x9944*x9948)))),-1);
if(!x9950.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x9949.value)+(((1.5707963267949)*(x9950.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x9951=IKcos(j8);
IkReal x9952=IKsin(j8);
IkReal x9953=(sj5*sj6);
IkReal x9954=(gconst5*r10);
IkReal x9955=((1.0)*cj6);
IkReal x9956=(gconst4*sj7);
IkReal x9957=(gconst4*r11);
IkReal x9958=(cj7*gconst5);
IkReal x9959=((1.0)*r21);
IkReal x9960=(gconst5*r20);
IkReal x9961=(gconst5*sj7);
IkReal x9962=((1.0)*r01);
IkReal x9963=(gconst5*r00);
IkReal x9964=(cj5*sj6);
IkReal x9965=(cj5*x9955);
IkReal x9966=((1.0)*cj7*gconst4);
IkReal x9967=(sj7*x9952);
IkReal x9968=(sj7*x9951);
IkReal x9969=((1.0)*x9951);
IkReal x9970=(cj7*x9951);
IkReal x9971=(gconst4*x9951);
evalcond[0]=((((-1.0)*x9960*x9969))+((r21*x9971))+((r22*x9952)));
evalcond[1]=((((-1.0)*x9963*x9969))+((r02*x9952))+((r01*x9971)));
evalcond[2]=((-1.0)+(((-1.0)*x9954*x9969))+((x9951*x9957))+((r12*x9952)));
evalcond[3]=((((-1.0)*cj7*x9952*x9957))+((r12*x9970))+((cj7*x9952*x9954))+((r10*x9956))+((r11*x9961)));
evalcond[4]=((((-1.0)*r11*x9958))+(((-1.0)*r11*x9952*x9956))+(((-1.0)*r10*x9966))+((r12*x9968))+((x9954*x9967)));
evalcond[5]=((((-1.0)*cj7*gconst4*x9952*x9962))+((r00*x9952*x9958))+((r01*x9961))+(((-1.0)*x9965))+((r02*x9970))+x9953+((r00*x9956)));
evalcond[6]=(((r22*x9970))+((r21*x9961))+((r20*x9956))+(((-1.0)*sj5*x9955))+((r20*x9952*x9958))+(((-1.0)*cj7*gconst4*x9952*x9959))+(((-1.0)*x9964)));
evalcond[7]=(((r02*x9968))+((cj6*sj5))+(((-1.0)*x9952*x9956*x9962))+((r00*x9952*x9961))+(((-1.0)*x9958*x9962))+x9964+(((-1.0)*r00*x9966)));
evalcond[8]=((((-1.0)*x9952*x9956*x9959))+(((-1.0)*x9965))+(((-1.0)*x9958*x9959))+((r22*x9968))+(((-1.0)*r20*x9966))+x9953+((x9960*x9967)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x9972=((1.0)*gconst5);
CheckValue<IkReal> x9973 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x9972))+((gconst4*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x9973.valid){
continue;
}
CheckValue<IkReal> x9974=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x9972)))),-1);
if(!x9974.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x9973.value)+(((1.5707963267949)*(x9974.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x9975=IKcos(j8);
IkReal x9976=IKsin(j8);
IkReal x9977=(sj5*sj6);
IkReal x9978=(gconst5*r10);
IkReal x9979=((1.0)*cj6);
IkReal x9980=(gconst4*sj7);
IkReal x9981=(gconst4*r11);
IkReal x9982=(cj7*gconst5);
IkReal x9983=((1.0)*r21);
IkReal x9984=(gconst5*r20);
IkReal x9985=(gconst5*sj7);
IkReal x9986=((1.0)*r01);
IkReal x9987=(gconst5*r00);
IkReal x9988=(cj5*sj6);
IkReal x9989=(cj5*x9979);
IkReal x9990=((1.0)*cj7*gconst4);
IkReal x9991=(sj7*x9976);
IkReal x9992=(sj7*x9975);
IkReal x9993=((1.0)*x9975);
IkReal x9994=(cj7*x9975);
IkReal x9995=(gconst4*x9975);
evalcond[0]=((((-1.0)*x9984*x9993))+((r22*x9976))+((r21*x9995)));
evalcond[1]=(((r01*x9995))+((r02*x9976))+(((-1.0)*x9987*x9993)));
evalcond[2]=((-1.0)+((x9975*x9981))+((r12*x9976))+(((-1.0)*x9978*x9993)));
evalcond[3]=(((r11*x9985))+((r10*x9980))+((cj7*x9976*x9978))+((r12*x9994))+(((-1.0)*cj7*x9976*x9981)));
evalcond[4]=((((-1.0)*r10*x9990))+((r12*x9992))+(((-1.0)*r11*x9976*x9980))+((x9978*x9991))+(((-1.0)*r11*x9982)));
evalcond[5]=(((r00*x9980))+((r01*x9985))+((r02*x9994))+x9977+((r00*x9976*x9982))+(((-1.0)*cj7*gconst4*x9976*x9986))+(((-1.0)*x9989)));
evalcond[6]=(((r22*x9994))+((r21*x9985))+(((-1.0)*sj5*x9979))+((r20*x9976*x9982))+(((-1.0)*x9988))+((r20*x9980))+(((-1.0)*cj7*gconst4*x9976*x9983)));
evalcond[7]=(((cj6*sj5))+(((-1.0)*r00*x9990))+((r02*x9992))+(((-1.0)*x9976*x9980*x9986))+x9988+((r00*x9976*x9985))+(((-1.0)*x9982*x9986)));
evalcond[8]=(((r22*x9992))+((x9984*x9991))+(((-1.0)*r20*x9990))+(((-1.0)*x9976*x9980*x9983))+x9977+(((-1.0)*x9989))+(((-1.0)*x9982*x9983)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x9996 = IKatan2WithCheck(IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9996.valid){
continue;
}
CheckValue<IkReal> x9997=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x9997.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x9996.value)+(((1.5707963267949)*(x9997.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x9998=IKcos(j8);
IkReal x9999=IKsin(j8);
IkReal x10000=(sj5*sj6);
IkReal x10001=(gconst5*r10);
IkReal x10002=((1.0)*cj6);
IkReal x10003=(gconst4*sj7);
IkReal x10004=(gconst4*r11);
IkReal x10005=(cj7*gconst5);
IkReal x10006=((1.0)*r21);
IkReal x10007=(gconst5*r20);
IkReal x10008=(gconst5*sj7);
IkReal x10009=((1.0)*r01);
IkReal x10010=(gconst5*r00);
IkReal x10011=(cj5*sj6);
IkReal x10012=(cj5*x10002);
IkReal x10013=((1.0)*cj7*gconst4);
IkReal x10014=(sj7*x9999);
IkReal x10015=(sj7*x9998);
IkReal x10016=((1.0)*x9998);
IkReal x10017=(cj7*x9998);
IkReal x10018=(gconst4*x9998);
evalcond[0]=(((r21*x10018))+((r22*x9999))+(((-1.0)*x10007*x10016)));
evalcond[1]=((((-1.0)*x10010*x10016))+((r02*x9999))+((r01*x10018)));
evalcond[2]=((-1.0)+((r12*x9999))+((x10004*x9998))+(((-1.0)*x10001*x10016)));
evalcond[3]=(((cj7*x10001*x9999))+((r12*x10017))+((r10*x10003))+((r11*x10008))+(((-1.0)*cj7*x10004*x9999)));
evalcond[4]=(((r12*x10015))+((x10001*x10014))+(((-1.0)*r11*x10003*x9999))+(((-1.0)*r11*x10005))+(((-1.0)*r10*x10013)));
evalcond[5]=(((r02*x10017))+((r00*x10005*x9999))+x10000+((r01*x10008))+(((-1.0)*cj7*gconst4*x10009*x9999))+((r00*x10003))+(((-1.0)*x10012)));
evalcond[6]=(((r22*x10017))+(((-1.0)*x10011))+((r20*x10003))+((r20*x10005*x9999))+((r21*x10008))+(((-1.0)*sj5*x10002))+(((-1.0)*cj7*gconst4*x10006*x9999)));
evalcond[7]=(((cj6*sj5))+(((-1.0)*x10003*x10009*x9999))+(((-1.0)*x10005*x10009))+((r02*x10015))+x10011+(((-1.0)*r00*x10013))+((r00*x10008*x9999)));
evalcond[8]=((((-1.0)*r20*x10013))+(((-1.0)*x10005*x10006))+((r22*x10015))+(((-1.0)*x10003*x10006*x9999))+((x10007*x10014))+x10000+(((-1.0)*x10012)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x10019=((-1.0)*r21);
CheckValue<IkReal> x10022 = IKatan2WithCheck(IkReal(x10019),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10022.valid){
continue;
}
IkReal x10020=((1.0)*(x10022.value));
IkReal x10021=x9265;
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x10020)));
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10020)));
IkReal gconst4=(x10019*x10021);
IkReal gconst5=((1.0)*r20*x10021);
j8eval[0]=1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[4];
IkReal x10023=((-1.0)*r21);
CheckValue<IkReal> x10026 = IKatan2WithCheck(IkReal(x10023),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10026.valid){
continue;
}
IkReal x10024=((1.0)*(x10026.value));
IkReal x10025=x9265;
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x10024)));
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10024)));
IkReal gconst4=(x10023*x10025);
IkReal gconst5=((1.0)*r20*x10025);
j8eval[0]=0;
j8eval[1]=r12;
j8eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j8eval[3]=0;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
IkReal x10027=((-1.0)*r21);
CheckValue<IkReal> x10030 = IKatan2WithCheck(IkReal(x10027),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10030.valid){
continue;
}
IkReal x10028=((1.0)*(x10030.value));
IkReal x10029=x9265;
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x10028)));
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10028)));
IkReal gconst4=(x10027*x10029);
IkReal gconst5=((1.0)*r20*x10029);
j8eval[0]=r12;
j8eval[1]=sj7;
j8eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x10031=((-1.0)*r21);
CheckValue<IkReal> x10034 = IKatan2WithCheck(IkReal(x10031),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10034.valid){
continue;
}
IkReal x10032=((1.0)*(x10034.value));
IkReal x10033=x9265;
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x10032)));
sj4=1.0;
cj4=0;
j4=1.5707963267949;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10032)));
IkReal gconst4=(x10031*x10033);
IkReal gconst5=((1.0)*r20*x10033);
j8eval[0]=1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[4];
IkReal x10035=((-1.0)*r21);
CheckValue<IkReal> x10038 = IKatan2WithCheck(IkReal(x10035),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10038.valid){
continue;
}
IkReal x10036=((1.0)*(x10038.value));
IkReal x10037=x9265;
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x10036)));
sj4=1.0;
cj4=0;
j4=1.5707963267949;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10036)));
IkReal gconst4=(x10035*x10037);
IkReal gconst5=((1.0)*r20*x10037);
j8eval[0]=0;
j8eval[1]=r12;
j8eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j8eval[3]=0;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x10039=((-1.0)*r21);
CheckValue<IkReal> x10042 = IKatan2WithCheck(IkReal(x10039),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10042.valid){
continue;
}
IkReal x10040=((1.0)*(x10042.value));
IkReal x10041=x9265;
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x10040)));
sj4=1.0;
cj4=0;
j4=1.5707963267949;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10040)));
IkReal gconst4=(x10039*x10041);
IkReal gconst5=((1.0)*r20*x10041);
j8eval[0]=r02;
j8eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x10043=(gconst4*r01);
IkReal x10044=(gconst5*r00);
CheckValue<IkReal> x10045 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x10044))+x10043)),IKFAST_ATAN2_MAGTHRESH);
if(!x10045.valid){
continue;
}
CheckValue<IkReal> x10046=IKPowWithIntegerCheck(IKsign(((x10043*x10043)+(x10044*x10044)+(r02*r02)+(((-2.0)*x10043*x10044)))),-1);
if(!x10046.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x10045.value)+(((1.5707963267949)*(x10046.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x10047=IKcos(j8);
IkReal x10048=IKsin(j8);
IkReal x10049=((1.0)*cj6);
IkReal x10050=(gconst4*r11);
IkReal x10051=(gconst4*r21);
IkReal x10052=(gconst4*r01);
IkReal x10053=(gconst5*x10048);
IkReal x10054=((1.0)*x10048);
IkReal x10055=((1.0)*gconst5*x10047);
evalcond[0]=((((-1.0)*r20*x10055))+((x10047*x10051))+((r22*x10048)));
evalcond[1]=(((r12*x10048))+(((-1.0)*r10*x10055))+((x10047*x10050)));
evalcond[2]=(((r00*x10053))+(((-1.0)*x10052*x10054))+((r02*x10047)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x10055))+((x10047*x10052))+((r02*x10048)));
evalcond[4]=(((r20*x10053))+((sj5*sj6))+(((-1.0)*x10051*x10054))+(((-1.0)*cj5*x10049))+((r22*x10047)));
evalcond[5]=((((-1.0)*cj5*sj6))+((r10*x10053))+(((-1.0)*x10050*x10054))+((r12*x10047))+(((-1.0)*sj5*x10049)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x10056=((1.0)*gconst5);
CheckValue<IkReal> x10057 = IKatan2WithCheck(IkReal((((gconst4*r11))+(((-1.0)*r10*x10056)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10057.valid){
continue;
}
CheckValue<IkReal> x10058=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10056))+(((-1.0)*gconst4*r20)))),-1);
if(!x10058.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x10057.value)+(((1.5707963267949)*(x10058.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x10059=IKcos(j8);
IkReal x10060=IKsin(j8);
IkReal x10061=((1.0)*cj6);
IkReal x10062=(gconst4*r11);
IkReal x10063=(gconst4*r21);
IkReal x10064=(gconst4*r01);
IkReal x10065=(gconst5*x10060);
IkReal x10066=((1.0)*x10060);
IkReal x10067=((1.0)*gconst5*x10059);
evalcond[0]=(((r22*x10060))+(((-1.0)*r20*x10067))+((x10059*x10063)));
evalcond[1]=(((r12*x10060))+(((-1.0)*r10*x10067))+((x10059*x10062)));
evalcond[2]=((((-1.0)*x10064*x10066))+((r00*x10065))+((r02*x10059)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x10067))+((r02*x10060))+((x10059*x10064)));
evalcond[4]=(((sj5*sj6))+((r20*x10065))+((r22*x10059))+(((-1.0)*cj5*x10061))+(((-1.0)*x10063*x10066)));
evalcond[5]=((((-1.0)*cj5*sj6))+((r10*x10065))+(((-1.0)*x10062*x10066))+(((-1.0)*sj5*x10061))+((r12*x10059)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x10068=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x10068.valid){
continue;
}
CheckValue<IkReal> x10069 = IKatan2WithCheck(IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x10069.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10068.value)))+(x10069.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x10070=IKcos(j8);
IkReal x10071=IKsin(j8);
IkReal x10072=((1.0)*cj6);
IkReal x10073=(gconst4*r11);
IkReal x10074=(gconst4*r21);
IkReal x10075=(gconst4*r01);
IkReal x10076=(gconst5*x10071);
IkReal x10077=((1.0)*x10071);
IkReal x10078=((1.0)*gconst5*x10070);
evalcond[0]=(((x10070*x10074))+(((-1.0)*r20*x10078))+((r22*x10071)));
evalcond[1]=(((r12*x10071))+((x10070*x10073))+(((-1.0)*r10*x10078)));
evalcond[2]=(((r00*x10076))+((r02*x10070))+(((-1.0)*x10075*x10077)));
evalcond[3]=((-1.0)+((x10070*x10075))+(((-1.0)*r00*x10078))+((r02*x10071)));
evalcond[4]=(((sj5*sj6))+(((-1.0)*x10074*x10077))+((r20*x10076))+((r22*x10070))+(((-1.0)*cj5*x10072)));
evalcond[5]=(((r10*x10076))+(((-1.0)*cj5*sj6))+((r12*x10070))+(((-1.0)*sj5*x10072))+(((-1.0)*x10073*x10077)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x10079=((-1.0)*r21);
CheckValue<IkReal> x10082 = IKatan2WithCheck(IkReal(x10079),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10082.valid){
continue;
}
IkReal x10080=((1.0)*(x10082.value));
IkReal x10081=x9265;
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x10080)));
sj4=1.0;
cj4=0;
j4=1.5707963267949;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10080)));
IkReal gconst4=(x10079*x10081);
IkReal gconst5=((1.0)*r20*x10081);
j8eval[0]=1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[4];
IkReal x10083=((-1.0)*r21);
CheckValue<IkReal> x10086 = IKatan2WithCheck(IkReal(x10083),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10086.valid){
continue;
}
IkReal x10084=((1.0)*(x10086.value));
IkReal x10085=x9265;
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x10084)));
sj4=1.0;
cj4=0;
j4=1.5707963267949;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10084)));
IkReal gconst4=(x10083*x10085);
IkReal gconst5=((1.0)*r20*x10085);
j8eval[0]=0;
j8eval[1]=r12;
j8eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j8eval[3]=0;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x10087=((-1.0)*r21);
CheckValue<IkReal> x10090 = IKatan2WithCheck(IkReal(x10087),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10090.valid){
continue;
}
IkReal x10088=((1.0)*(x10090.value));
IkReal x10089=x9265;
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x10088)));
sj4=1.0;
cj4=0;
j4=1.5707963267949;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10088)));
IkReal gconst4=(x10087*x10089);
IkReal gconst5=((1.0)*r20*x10089);
j8eval[0]=r02;
j8eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x10091=(gconst4*r01);
IkReal x10092=(gconst5*r00);
CheckValue<IkReal> x10093=IKPowWithIntegerCheck(IKsign(((x10092*x10092)+(((-2.0)*x10091*x10092))+(r02*r02)+(x10091*x10091))),-1);
if(!x10093.valid){
continue;
}
CheckValue<IkReal> x10094 = IKatan2WithCheck(IkReal(r02),IkReal((x10091+(((-1.0)*x10092)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10094.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10093.value)))+(x10094.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x10095=IKcos(j8);
IkReal x10096=IKsin(j8);
IkReal x10097=(gconst4*r11);
IkReal x10098=((1.0)*cj6);
IkReal x10099=(gconst5*r00);
IkReal x10100=(gconst5*r20);
IkReal x10101=((1.0)*gconst5*r10);
IkReal x10102=((1.0)*x10095);
IkReal x10103=(gconst4*x10096);
IkReal x10104=((1.0)*x10096);
IkReal x10105=(gconst4*x10095);
evalcond[0]=(((r21*x10105))+(((-1.0)*x10100*x10102))+((r22*x10096)));
evalcond[1]=(((r12*x10096))+((x10095*x10097))+(((-1.0)*x10095*x10101)));
evalcond[2]=((-1.0)+((r01*x10105))+((r02*x10096))+(((-1.0)*x10099*x10102)));
evalcond[3]=(((r01*x10103))+(((-1.0)*r02*x10102))+(((-1.0)*x10099*x10104)));
evalcond[4]=(((r21*x10103))+((sj5*sj6))+(((-1.0)*x10100*x10104))+(((-1.0)*r22*x10102))+(((-1.0)*cj5*x10098)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*r12*x10102))+(((-1.0)*sj5*x10098))+((x10096*x10097))+(((-1.0)*x10096*x10101)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x10106=((1.0)*gconst5);
CheckValue<IkReal> x10107 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x10106))+((gconst4*r11)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10107.valid){
continue;
}
CheckValue<IkReal> x10108=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10106))+(((-1.0)*gconst4*r20)))),-1);
if(!x10108.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x10107.value)+(((1.5707963267949)*(x10108.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x10109=IKcos(j8);
IkReal x10110=IKsin(j8);
IkReal x10111=(gconst4*r11);
IkReal x10112=((1.0)*cj6);
IkReal x10113=(gconst5*r00);
IkReal x10114=(gconst5*r20);
IkReal x10115=((1.0)*gconst5*r10);
IkReal x10116=((1.0)*x10109);
IkReal x10117=(gconst4*x10110);
IkReal x10118=((1.0)*x10110);
IkReal x10119=(gconst4*x10109);
evalcond[0]=(((r21*x10119))+(((-1.0)*x10114*x10116))+((r22*x10110)));
evalcond[1]=(((x10109*x10111))+(((-1.0)*x10109*x10115))+((r12*x10110)));
evalcond[2]=((-1.0)+((r01*x10119))+(((-1.0)*x10113*x10116))+((r02*x10110)));
evalcond[3]=(((r01*x10117))+(((-1.0)*x10113*x10118))+(((-1.0)*r02*x10116)));
evalcond[4]=(((r21*x10117))+(((-1.0)*cj5*x10112))+((sj5*sj6))+(((-1.0)*r22*x10116))+(((-1.0)*x10114*x10118)));
evalcond[5]=((((-1.0)*cj5*sj6))+((x10110*x10111))+(((-1.0)*x10110*x10115))+(((-1.0)*r12*x10116))+(((-1.0)*sj5*x10112)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x10120=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x10120.valid){
continue;
}
CheckValue<IkReal> x10121 = IKatan2WithCheck(IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x10121.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10120.value)))+(x10121.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x10122=IKcos(j8);
IkReal x10123=IKsin(j8);
IkReal x10124=(gconst4*r11);
IkReal x10125=((1.0)*cj6);
IkReal x10126=(gconst5*r00);
IkReal x10127=(gconst5*r20);
IkReal x10128=((1.0)*gconst5*r10);
IkReal x10129=((1.0)*x10122);
IkReal x10130=(gconst4*x10123);
IkReal x10131=((1.0)*x10123);
IkReal x10132=(gconst4*x10122);
evalcond[0]=((((-1.0)*x10127*x10129))+((r21*x10132))+((r22*x10123)));
evalcond[1]=(((x10122*x10124))+(((-1.0)*x10122*x10128))+((r12*x10123)));
evalcond[2]=((-1.0)+(((-1.0)*x10126*x10129))+((r02*x10123))+((r01*x10132)));
evalcond[3]=((((-1.0)*r02*x10129))+(((-1.0)*x10126*x10131))+((r01*x10130)));
evalcond[4]=((((-1.0)*x10127*x10131))+((r21*x10130))+((sj5*sj6))+(((-1.0)*cj5*x10125))+(((-1.0)*r22*x10129)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*x10123*x10128))+(((-1.0)*sj5*x10125))+((x10123*x10124))+(((-1.0)*r12*x10129)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x10133=((-1.0)*r21);
CheckValue<IkReal> x10136 = IKatan2WithCheck(IkReal(x10133),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10136.valid){
continue;
}
IkReal x10134=((1.0)*(x10136.value));
IkReal x10135=x9265;
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x10134)));
sj4=1.0;
cj4=0;
j4=1.5707963267949;
sj7=0;
cj7=1.0;
j7=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10134)));
IkReal gconst4=(x10133*x10135);
IkReal gconst5=((1.0)*r20*x10135);
j8eval[0]=1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[4];
IkReal x10137=((-1.0)*r21);
CheckValue<IkReal> x10140 = IKatan2WithCheck(IkReal(x10137),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10140.valid){
continue;
}
IkReal x10138=((1.0)*(x10140.value));
IkReal x10139=x9265;
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x10138)));
sj4=1.0;
cj4=0;
j4=1.5707963267949;
sj7=0;
cj7=1.0;
j7=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10138)));
IkReal gconst4=(x10137*x10139);
IkReal gconst5=((1.0)*r20*x10139);
j8eval[0]=0;
j8eval[1]=r12;
j8eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j8eval[3]=0;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x10141=((-1.0)*r21);
CheckValue<IkReal> x10144 = IKatan2WithCheck(IkReal(x10141),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10144.valid){
continue;
}
IkReal x10142=((1.0)*(x10144.value));
IkReal x10143=x9265;
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x10142)));
sj4=1.0;
cj4=0;
j4=1.5707963267949;
sj7=0;
cj7=1.0;
j7=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10142)));
IkReal gconst4=(x10141*x10143);
IkReal gconst5=((1.0)*r20*x10143);
j8eval[0]=r02;
j8eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x10145=(gconst4*r01);
IkReal x10146=(gconst5*r00);
CheckValue<IkReal> x10147 = IKatan2WithCheck(IkReal(r02),IkReal((x10145+(((-1.0)*x10146)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10147.valid){
continue;
}
CheckValue<IkReal> x10148=IKPowWithIntegerCheck(IKsign(((x10146*x10146)+(((-2.0)*x10145*x10146))+(r02*r02)+(x10145*x10145))),-1);
if(!x10148.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x10147.value)+(((1.5707963267949)*(x10148.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x10149=IKcos(j8);
IkReal x10150=IKsin(j8);
IkReal x10151=((1.0)*sj5);
IkReal x10152=(gconst4*r11);
IkReal x10153=(gconst4*r21);
IkReal x10154=(gconst4*r01);
IkReal x10155=(gconst5*x10150);
IkReal x10156=((1.0)*x10150);
IkReal x10157=((1.0)*gconst5*x10149);
evalcond[0]=(((x10149*x10153))+((r22*x10150))+(((-1.0)*r20*x10157)));
evalcond[1]=(((r12*x10150))+((x10149*x10152))+(((-1.0)*r10*x10157)));
evalcond[2]=((((-1.0)*x10154*x10156))+((r02*x10149))+((r00*x10155)));
evalcond[3]=((-1.0)+((r02*x10150))+((x10149*x10154))+(((-1.0)*r00*x10157)));
evalcond[4]=(((r12*x10149))+((r10*x10155))+(((-1.0)*sj6*x10151))+((cj5*cj6))+(((-1.0)*x10152*x10156)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*x10153*x10156))+(((-1.0)*cj6*x10151))+((r22*x10149))+((r20*x10155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x10158=((1.0)*gconst5);
CheckValue<IkReal> x10159=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10158))+(((-1.0)*gconst4*r20)))),-1);
if(!x10159.valid){
continue;
}
CheckValue<IkReal> x10160 = IKatan2WithCheck(IkReal((((gconst4*r11))+(((-1.0)*r10*x10158)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10160.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10159.value)))+(x10160.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x10161=IKcos(j8);
IkReal x10162=IKsin(j8);
IkReal x10163=((1.0)*sj5);
IkReal x10164=(gconst4*r11);
IkReal x10165=(gconst4*r21);
IkReal x10166=(gconst4*r01);
IkReal x10167=(gconst5*x10162);
IkReal x10168=((1.0)*x10162);
IkReal x10169=((1.0)*gconst5*x10161);
evalcond[0]=(((x10161*x10165))+((r22*x10162))+(((-1.0)*r20*x10169)));
evalcond[1]=(((x10161*x10164))+(((-1.0)*r10*x10169))+((r12*x10162)));
evalcond[2]=((((-1.0)*x10166*x10168))+((r00*x10167))+((r02*x10161)));
evalcond[3]=((-1.0)+((x10161*x10166))+(((-1.0)*r00*x10169))+((r02*x10162)));
evalcond[4]=(((r10*x10167))+(((-1.0)*x10164*x10168))+((r12*x10161))+((cj5*cj6))+(((-1.0)*sj6*x10163)));
evalcond[5]=((((-1.0)*cj5*sj6))+((r22*x10161))+((r20*x10167))+(((-1.0)*cj6*x10163))+(((-1.0)*x10165*x10168)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x10170=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x10170.valid){
continue;
}
CheckValue<IkReal> x10171 = IKatan2WithCheck(IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x10171.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10170.value)))+(x10171.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x10172=IKcos(j8);
IkReal x10173=IKsin(j8);
IkReal x10174=((1.0)*sj5);
IkReal x10175=(gconst4*r11);
IkReal x10176=(gconst4*r21);
IkReal x10177=(gconst4*r01);
IkReal x10178=(gconst5*x10173);
IkReal x10179=((1.0)*x10173);
IkReal x10180=((1.0)*gconst5*x10172);
evalcond[0]=((((-1.0)*r20*x10180))+((r22*x10173))+((x10172*x10176)));
evalcond[1]=(((r12*x10173))+((x10172*x10175))+(((-1.0)*r10*x10180)));
evalcond[2]=((((-1.0)*x10177*x10179))+((r02*x10172))+((r00*x10178)));
evalcond[3]=((-1.0)+((r02*x10173))+(((-1.0)*r00*x10180))+((x10172*x10177)));
evalcond[4]=(((r10*x10178))+((r12*x10172))+(((-1.0)*x10175*x10179))+(((-1.0)*sj6*x10174))+((cj5*cj6)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*x10176*x10179))+(((-1.0)*cj6*x10174))+((r22*x10172))+((r20*x10178)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x10181=((-1.0)*r21);
CheckValue<IkReal> x10184 = IKatan2WithCheck(IkReal(x10181),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10184.valid){
continue;
}
IkReal x10182=((1.0)*(x10184.value));
IkReal x10183=x9265;
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x10182)));
sj4=1.0;
cj4=0;
j4=1.5707963267949;
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10182)));
IkReal gconst4=(x10181*x10183);
IkReal gconst5=((1.0)*r20*x10183);
j8eval[0]=1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[4];
IkReal x10185=((-1.0)*r21);
CheckValue<IkReal> x10188 = IKatan2WithCheck(IkReal(x10185),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10188.valid){
continue;
}
IkReal x10186=((1.0)*(x10188.value));
IkReal x10187=x9265;
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x10186)));
sj4=1.0;
cj4=0;
j4=1.5707963267949;
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10186)));
IkReal gconst4=(x10185*x10187);
IkReal gconst5=((1.0)*r20*x10187);
j8eval[0]=0;
j8eval[1]=r12;
j8eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j8eval[3]=0;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x10189=((-1.0)*r21);
CheckValue<IkReal> x10192 = IKatan2WithCheck(IkReal(x10189),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10192.valid){
continue;
}
IkReal x10190=((1.0)*(x10192.value));
IkReal x10191=x9265;
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x10190)));
sj4=1.0;
cj4=0;
j4=1.5707963267949;
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10190)));
IkReal gconst4=(x10189*x10191);
IkReal gconst5=((1.0)*r20*x10191);
j8eval[0]=r02;
j8eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x10193=(gconst4*r01);
IkReal x10194=(gconst5*r00);
CheckValue<IkReal> x10195=IKPowWithIntegerCheck(IKsign(((x10194*x10194)+(((-2.0)*x10193*x10194))+(x10193*x10193)+(r02*r02))),-1);
if(!x10195.valid){
continue;
}
CheckValue<IkReal> x10196 = IKatan2WithCheck(IkReal(r02),IkReal((x10193+(((-1.0)*x10194)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10196.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10195.value)))+(x10196.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x10197=IKcos(j8);
IkReal x10198=IKsin(j8);
IkReal x10199=(gconst4*r11);
IkReal x10200=((1.0)*sj5);
IkReal x10201=(gconst5*r00);
IkReal x10202=(gconst5*r20);
IkReal x10203=((1.0)*gconst5*r10);
IkReal x10204=((1.0)*x10197);
IkReal x10205=(gconst4*x10198);
IkReal x10206=((1.0)*x10198);
IkReal x10207=(gconst4*x10197);
evalcond[0]=(((r21*x10207))+((r22*x10198))+(((-1.0)*x10202*x10204)));
evalcond[1]=(((x10197*x10199))+(((-1.0)*x10197*x10203))+((r12*x10198)));
evalcond[2]=((-1.0)+((r02*x10198))+((r01*x10207))+(((-1.0)*x10201*x10204)));
evalcond[3]=((((-1.0)*r02*x10204))+((r01*x10205))+(((-1.0)*x10201*x10206)));
evalcond[4]=(((cj5*cj6))+(((-1.0)*sj6*x10200))+((x10198*x10199))+(((-1.0)*x10198*x10203))+(((-1.0)*r12*x10204)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*cj6*x10200))+(((-1.0)*r22*x10204))+((r21*x10205))+(((-1.0)*x10202*x10206)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x10208=((1.0)*gconst5);
CheckValue<IkReal> x10209=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10208))+(((-1.0)*gconst4*r20)))),-1);
if(!x10209.valid){
continue;
}
CheckValue<IkReal> x10210 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x10208))+((gconst4*r11)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10210.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10209.value)))+(x10210.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x10211=IKcos(j8);
IkReal x10212=IKsin(j8);
IkReal x10213=(gconst4*r11);
IkReal x10214=((1.0)*sj5);
IkReal x10215=(gconst5*r00);
IkReal x10216=(gconst5*r20);
IkReal x10217=((1.0)*gconst5*r10);
IkReal x10218=((1.0)*x10211);
IkReal x10219=(gconst4*x10212);
IkReal x10220=((1.0)*x10212);
IkReal x10221=(gconst4*x10211);
evalcond[0]=((((-1.0)*x10216*x10218))+((r21*x10221))+((r22*x10212)));
evalcond[1]=((((-1.0)*x10211*x10217))+((r12*x10212))+((x10211*x10213)));
evalcond[2]=((-1.0)+(((-1.0)*x10215*x10218))+((r02*x10212))+((r01*x10221)));
evalcond[3]=((((-1.0)*x10215*x10220))+((r01*x10219))+(((-1.0)*r02*x10218)));
evalcond[4]=((((-1.0)*x10212*x10217))+(((-1.0)*r12*x10218))+((cj5*cj6))+((x10212*x10213))+(((-1.0)*sj6*x10214)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*x10216*x10220))+(((-1.0)*r22*x10218))+(((-1.0)*cj6*x10214))+((r21*x10219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x10222=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x10222.valid){
continue;
}
CheckValue<IkReal> x10223 = IKatan2WithCheck(IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x10223.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10222.value)))+(x10223.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x10224=IKcos(j8);
IkReal x10225=IKsin(j8);
IkReal x10226=(gconst4*r11);
IkReal x10227=((1.0)*sj5);
IkReal x10228=(gconst5*r00);
IkReal x10229=(gconst5*r20);
IkReal x10230=((1.0)*gconst5*r10);
IkReal x10231=((1.0)*x10224);
IkReal x10232=(gconst4*x10225);
IkReal x10233=((1.0)*x10225);
IkReal x10234=(gconst4*x10224);
evalcond[0]=(((r22*x10225))+((r21*x10234))+(((-1.0)*x10229*x10231)));
evalcond[1]=(((r12*x10225))+(((-1.0)*x10224*x10230))+((x10224*x10226)));
evalcond[2]=((-1.0)+((r02*x10225))+((r01*x10234))+(((-1.0)*x10228*x10231)));
evalcond[3]=(((r01*x10232))+(((-1.0)*x10228*x10233))+(((-1.0)*r02*x10231)));
evalcond[4]=(((x10225*x10226))+(((-1.0)*sj6*x10227))+(((-1.0)*x10225*x10230))+((cj5*cj6))+(((-1.0)*r12*x10231)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*cj6*x10227))+((r21*x10232))+(((-1.0)*r22*x10231))+(((-1.0)*x10229*x10233)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[2];
IkReal x10235=((-1.0)*r21);
IkReal x10236=((-1.0)*r20);
CheckValue<IkReal> x10238 = IKatan2WithCheck(IkReal(x10235),IkReal(x10236),IKFAST_ATAN2_MAGTHRESH);
if(!x10238.valid){
continue;
}
IkReal x10237=((1.0)*(x10238.value));
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x10237)));
sj4=1.0;
cj4=0;
j4=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x10236);
rxp0_2=(py*r00);
rxp1_0=(py*x10235);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10237)));
IkReal gconst4=x10235;
IkReal gconst5=((1.0)*r20);
IkReal x10239=((1.0)*r01*r21);
IkReal x10240=((1.0)*r00*r20);
j8eval[0]=(((sj7*x10240))+((sj7*x10239)));
j8eval[1]=((((-1.0)*x10240))+(((-1.0)*x10239)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x10241=((-1.0)*r21);
IkReal x10242=((-1.0)*r20);
CheckValue<IkReal> x10244 = IKatan2WithCheck(IkReal(x10241),IkReal(x10242),IKFAST_ATAN2_MAGTHRESH);
if(!x10244.valid){
continue;
}
IkReal x10243=((1.0)*(x10244.value));
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x10243)));
sj4=1.0;
cj4=0;
j4=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x10242);
rxp0_2=(py*r00);
rxp1_0=(py*x10241);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10243)));
IkReal gconst4=x10241;
IkReal gconst5=((1.0)*r20);
IkReal x10245=((1.0)*r01*r21);
IkReal x10246=((1.0)*r00*r20);
j8eval[0]=(((cj7*x10246))+((cj7*x10245)));
j8eval[1]=((((-1.0)*x10246))+(((-1.0)*x10245)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
IkReal x10247=((-1.0)*r21);
IkReal x10248=((-1.0)*r20);
CheckValue<IkReal> x10250 = IKatan2WithCheck(IkReal(x10247),IkReal(x10248),IKFAST_ATAN2_MAGTHRESH);
if(!x10250.valid){
continue;
}
IkReal x10249=((1.0)*(x10250.value));
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x10249)));
sj4=1.0;
cj4=0;
j4=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x10248);
rxp0_2=(py*r00);
rxp1_0=(py*x10247);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10249)));
IkReal gconst4=x10247;
IkReal gconst5=((1.0)*r20);
IkReal x10251=((1.0)*cj7);
j8eval[0]=(((r01*r21*x10251))+((r00*r20*x10251)));
j8eval[1]=r12;
j8eval[2]=sj7;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x10252=((1.0)*sj7);
CheckValue<IkReal> x10253=IKPowWithIntegerCheck(((((-1.0)*cj7*gconst4*r01))+((cj7*gconst5*r00))),-1);
if(!x10253.valid){
continue;
}
CheckValue<IkReal> x10254=IKPowWithIntegerCheck(r12,-1);
if(!x10254.valid){
continue;
}
CheckValue<IkReal> x10255=IKPowWithIntegerCheck(sj7,-1);
if(!x10255.valid){
continue;
}
if( IKabs(((x10253.value)*(((((-1.0)*gconst5*r01*x10252))+(((-1.0)*gconst4*r00*x10252)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10254.value)*(x10255.value)*((((cj6*sj5))+((cj5*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10253.value)*(((((-1.0)*gconst5*r01*x10252))+(((-1.0)*gconst4*r00*x10252))))))+IKsqr(((x10254.value)*(x10255.value)*((((cj6*sj5))+((cj5*sj6))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((x10253.value)*(((((-1.0)*gconst5*r01*x10252))+(((-1.0)*gconst4*r00*x10252))))), ((x10254.value)*(x10255.value)*((((cj6*sj5))+((cj5*sj6))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x10256=IKcos(j8);
IkReal x10257=IKsin(j8);
IkReal x10258=((1.0)*cj7);
IkReal x10259=(gconst4*r00);
IkReal x10260=(gconst5*r01);
IkReal x10261=((1.0)*sj5);
IkReal x10262=(gconst5*r21);
IkReal x10263=(cj5*cj6);
IkReal x10264=((1.0)*sj7);
IkReal x10265=(r20*sj7);
IkReal x10266=((1.0)*cj5*sj6);
IkReal x10267=(cj6*x10261);
IkReal x10268=(gconst5*x10257);
IkReal x10269=(r12*x10256);
IkReal x10270=(gconst4*x10256);
IkReal x10271=(gconst4*r01*x10257);
IkReal x10272=((1.0)*gconst5*x10256);
IkReal x10273=(gconst4*r21*x10257);
IkReal x10274=(x10266+x10267);
evalcond[0]=(r12*x10257);
evalcond[1]=(((r21*x10270))+(((-1.0)*r20*x10272)));
evalcond[2]=((((-1.0)*sj6*x10261))+x10263+((cj7*x10269)));
evalcond[3]=((-1.0)+((r01*x10270))+(((-1.0)*r00*x10272)));
evalcond[4]=(((sj7*x10269))+(((-1.0)*x10274)));
evalcond[5]=(((cj7*r00*x10268))+((sj7*x10260))+(((-1.0)*x10258*x10271))+((sj7*x10259)));
evalcond[6]=((((-1.0)*x10264*x10271))+(((-1.0)*x10258*x10259))+((r00*sj7*x10268))+(((-1.0)*x10258*x10260)));
evalcond[7]=(((sj7*x10262))+((cj7*r20*x10268))+(((-1.0)*x10274))+((gconst4*x10265))+(((-1.0)*x10258*x10273)));
evalcond[8]=(((sj5*sj6))+(((-1.0)*x10264*x10273))+(((-1.0)*x10263))+(((-1.0)*gconst4*r20*x10258))+((x10265*x10268))+(((-1.0)*x10258*x10262)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x10275=(gconst5*r00);
IkReal x10276=(gconst4*r01);
IkReal x10277=((1.0)*sj7);
CheckValue<IkReal> x10278=IKPowWithIntegerCheck((((cj7*x10275))+(((-1.0)*cj7*x10276))),-1);
if(!x10278.valid){
continue;
}
CheckValue<IkReal> x10279=IKPowWithIntegerCheck((x10276+(((-1.0)*x10275))),-1);
if(!x10279.valid){
continue;
}
if( IKabs(((x10278.value)*(((((-1.0)*gconst5*r01*x10277))+(((-1.0)*gconst4*r00*x10277)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x10279.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10278.value)*(((((-1.0)*gconst5*r01*x10277))+(((-1.0)*gconst4*r00*x10277))))))+IKsqr(x10279.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((x10278.value)*(((((-1.0)*gconst5*r01*x10277))+(((-1.0)*gconst4*r00*x10277))))), x10279.value);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x10280=IKcos(j8);
IkReal x10281=IKsin(j8);
IkReal x10282=((1.0)*cj7);
IkReal x10283=(gconst4*r00);
IkReal x10284=(gconst5*r01);
IkReal x10285=((1.0)*sj5);
IkReal x10286=(gconst5*r21);
IkReal x10287=(cj5*cj6);
IkReal x10288=((1.0)*sj7);
IkReal x10289=(r20*sj7);
IkReal x10290=((1.0)*cj5*sj6);
IkReal x10291=(cj6*x10285);
IkReal x10292=(gconst5*x10281);
IkReal x10293=(r12*x10280);
IkReal x10294=(gconst4*x10280);
IkReal x10295=(gconst4*r01*x10281);
IkReal x10296=((1.0)*gconst5*x10280);
IkReal x10297=(gconst4*r21*x10281);
IkReal x10298=(x10291+x10290);
evalcond[0]=(r12*x10281);
evalcond[1]=(((r21*x10294))+(((-1.0)*r20*x10296)));
evalcond[2]=((((-1.0)*sj6*x10285))+x10287+((cj7*x10293)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x10296))+((r01*x10294)));
evalcond[4]=(((sj7*x10293))+(((-1.0)*x10298)));
evalcond[5]=((((-1.0)*x10282*x10295))+((cj7*r00*x10292))+((sj7*x10284))+((sj7*x10283)));
evalcond[6]=((((-1.0)*x10282*x10283))+(((-1.0)*x10282*x10284))+((r00*sj7*x10292))+(((-1.0)*x10288*x10295)));
evalcond[7]=((((-1.0)*x10282*x10297))+((sj7*x10286))+((gconst4*x10289))+((cj7*r20*x10292))+(((-1.0)*x10298)));
evalcond[8]=(((x10289*x10292))+(((-1.0)*x10282*x10286))+((sj5*sj6))+(((-1.0)*gconst4*r20*x10282))+(((-1.0)*x10287))+(((-1.0)*x10288*x10297)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x10299=(gconst4*r01);
IkReal x10300=(gconst5*r00);
CheckValue<IkReal> x10301=IKPowWithIntegerCheck((((sj7*x10300))+(((-1.0)*sj7*x10299))),-1);
if(!x10301.valid){
continue;
}
CheckValue<IkReal> x10302=IKPowWithIntegerCheck(((((-1.0)*x10300))+x10299),-1);
if(!x10302.valid){
continue;
}
if( IKabs(((x10301.value)*((((cj7*gconst4*r00))+((cj7*gconst5*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x10302.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10301.value)*((((cj7*gconst4*r00))+((cj7*gconst5*r01))))))+IKsqr(x10302.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((x10301.value)*((((cj7*gconst4*r00))+((cj7*gconst5*r01))))), x10302.value);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x10303=IKcos(j8);
IkReal x10304=IKsin(j8);
IkReal x10305=((1.0)*cj7);
IkReal x10306=(gconst4*r00);
IkReal x10307=(gconst5*r01);
IkReal x10308=((1.0)*sj5);
IkReal x10309=(gconst5*r21);
IkReal x10310=(cj5*cj6);
IkReal x10311=((1.0)*sj7);
IkReal x10312=(r20*sj7);
IkReal x10313=((1.0)*cj5*sj6);
IkReal x10314=(cj6*x10308);
IkReal x10315=(gconst5*x10304);
IkReal x10316=(r12*x10303);
IkReal x10317=(gconst4*x10303);
IkReal x10318=(gconst4*r01*x10304);
IkReal x10319=((1.0)*gconst5*x10303);
IkReal x10320=(gconst4*r21*x10304);
IkReal x10321=(x10313+x10314);
evalcond[0]=(r12*x10304);
evalcond[1]=(((r21*x10317))+(((-1.0)*r20*x10319)));
evalcond[2]=((((-1.0)*sj6*x10308))+x10310+((cj7*x10316)));
evalcond[3]=((-1.0)+((r01*x10317))+(((-1.0)*r00*x10319)));
evalcond[4]=((((-1.0)*x10321))+((sj7*x10316)));
evalcond[5]=(((sj7*x10306))+((sj7*x10307))+(((-1.0)*x10305*x10318))+((cj7*r00*x10315)));
evalcond[6]=((((-1.0)*x10305*x10306))+(((-1.0)*x10305*x10307))+((r00*sj7*x10315))+(((-1.0)*x10311*x10318)));
evalcond[7]=(((cj7*r20*x10315))+((gconst4*x10312))+(((-1.0)*x10305*x10320))+((sj7*x10309))+(((-1.0)*x10321)));
evalcond[8]=((((-1.0)*x10305*x10309))+((sj5*sj6))+(((-1.0)*x10310))+((x10312*x10315))+(((-1.0)*gconst4*r20*x10305))+(((-1.0)*x10311*x10320)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x10322=gconst4*gconst4;
IkReal x10323=gconst5*gconst5;
IkReal x10324=(r00*sj7);
IkReal x10325=(cj7*r00);
IkReal x10326=(cj7*r01);
IkReal x10327=(r21*x10322);
IkReal x10328=(r20*x10323);
IkReal x10329=((1.0)*r01*sj7);
IkReal x10330=(gconst4*gconst5*r21);
IkReal x10331=((1.0)*gconst4*gconst5*r20);
CheckValue<IkReal> x10332=IKPowWithIntegerCheck(IKsign((((x10325*x10328))+((x10326*x10327))+((cj7*r02*r22))+(((-1.0)*x10325*x10330))+(((-1.0)*x10326*x10331)))),-1);
if(!x10332.valid){
continue;
}
CheckValue<IkReal> x10333 = IKatan2WithCheck(IkReal(((((-1.0)*x10324*x10331))+((x10324*x10327))+((r01*sj7*x10330))+(((-1.0)*x10328*x10329)))),IkReal(((((-1.0)*gconst4*r22*x10324))+(((-1.0)*gconst5*r22*x10329)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10333.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10332.value)))+(x10333.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x10334=IKcos(j8);
IkReal x10335=IKsin(j8);
IkReal x10336=((1.0)*cj7);
IkReal x10337=(gconst4*r00);
IkReal x10338=(gconst5*r10);
IkReal x10339=(gconst5*r01);
IkReal x10340=((1.0)*sj5);
IkReal x10341=(gconst5*r11);
IkReal x10342=(gconst4*r11);
IkReal x10343=(gconst5*r21);
IkReal x10344=(cj5*cj6);
IkReal x10345=(gconst5*r00);
IkReal x10346=(gconst4*r10);
IkReal x10347=(gconst4*r01);
IkReal x10348=(gconst4*r20);
IkReal x10349=(gconst4*r21);
IkReal x10350=(gconst5*r20);
IkReal x10351=((1.0)*cj5*sj6);
IkReal x10352=(cj6*x10340);
IkReal x10353=(sj7*x10335);
IkReal x10354=(sj7*x10334);
IkReal x10355=((1.0)*x10334);
IkReal x10356=(cj7*x10335);
IkReal x10357=(cj7*x10334);
IkReal x10358=(x10352+x10351);
evalcond[0]=(((r22*x10335))+((x10334*x10349))+(((-1.0)*x10350*x10355)));
evalcond[1]=(((x10334*x10342))+(((-1.0)*x10338*x10355))+((r12*x10335)));
evalcond[2]=((-1.0)+((r02*x10335))+((x10334*x10347))+(((-1.0)*x10345*x10355)));
evalcond[3]=((((-1.0)*x10335*x10336*x10347))+((sj7*x10339))+((sj7*x10337))+((x10345*x10356))+((r02*x10357)));
evalcond[4]=((((-1.0)*x10336*x10339))+(((-1.0)*x10336*x10337))+(((-1.0)*x10347*x10353))+((x10345*x10353))+((r02*x10354)));
evalcond[5]=((((-1.0)*x10335*x10336*x10342))+(((-1.0)*sj6*x10340))+x10344+((x10338*x10356))+((sj7*x10341))+((sj7*x10346))+((r12*x10357)));
evalcond[6]=(((x10350*x10356))+(((-1.0)*x10335*x10336*x10349))+(((-1.0)*x10358))+((r22*x10357))+((sj7*x10348))+((sj7*x10343)));
evalcond[7]=(((x10350*x10353))+((sj5*sj6))+((r22*x10354))+(((-1.0)*x10344))+(((-1.0)*x10349*x10353))+(((-1.0)*x10336*x10348))+(((-1.0)*x10336*x10343)));
evalcond[8]=((((-1.0)*x10358))+(((-1.0)*x10342*x10353))+((x10338*x10353))+(((-1.0)*x10336*x10341))+(((-1.0)*x10336*x10346))+((r12*x10354)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x10359=((1.0)*gconst5);
CheckValue<IkReal> x10360=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10359))+(((-1.0)*gconst4*r20)))),-1);
if(!x10360.valid){
continue;
}
CheckValue<IkReal> x10361 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x10359))+((gconst4*r11)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10361.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10360.value)))+(x10361.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x10362=IKcos(j8);
IkReal x10363=IKsin(j8);
IkReal x10364=((1.0)*cj7);
IkReal x10365=(gconst4*r00);
IkReal x10366=(gconst5*r10);
IkReal x10367=(gconst5*r01);
IkReal x10368=((1.0)*sj5);
IkReal x10369=(gconst5*r11);
IkReal x10370=(gconst4*r11);
IkReal x10371=(gconst5*r21);
IkReal x10372=(cj5*cj6);
IkReal x10373=(gconst5*r00);
IkReal x10374=(gconst4*r10);
IkReal x10375=(gconst4*r01);
IkReal x10376=(gconst4*r20);
IkReal x10377=(gconst4*r21);
IkReal x10378=(gconst5*r20);
IkReal x10379=((1.0)*cj5*sj6);
IkReal x10380=(cj6*x10368);
IkReal x10381=(sj7*x10363);
IkReal x10382=(sj7*x10362);
IkReal x10383=((1.0)*x10362);
IkReal x10384=(cj7*x10363);
IkReal x10385=(cj7*x10362);
IkReal x10386=(x10379+x10380);
evalcond[0]=(((r22*x10363))+((x10362*x10377))+(((-1.0)*x10378*x10383)));
evalcond[1]=((((-1.0)*x10366*x10383))+((x10362*x10370))+((r12*x10363)));
evalcond[2]=((-1.0)+((r02*x10363))+((x10362*x10375))+(((-1.0)*x10373*x10383)));
evalcond[3]=(((sj7*x10367))+((sj7*x10365))+(((-1.0)*x10363*x10364*x10375))+((r02*x10385))+((x10373*x10384)));
evalcond[4]=((((-1.0)*x10375*x10381))+((r02*x10382))+((x10373*x10381))+(((-1.0)*x10364*x10367))+(((-1.0)*x10364*x10365)));
evalcond[5]=(((sj7*x10369))+((sj7*x10374))+((r12*x10385))+((x10366*x10384))+(((-1.0)*x10363*x10364*x10370))+x10372+(((-1.0)*sj6*x10368)));
evalcond[6]=(((sj7*x10371))+((sj7*x10376))+(((-1.0)*x10386))+((r22*x10385))+(((-1.0)*x10363*x10364*x10377))+((x10378*x10384)));
evalcond[7]=(((sj5*sj6))+(((-1.0)*x10377*x10381))+((r22*x10382))+(((-1.0)*x10372))+((x10378*x10381))+(((-1.0)*x10364*x10371))+(((-1.0)*x10364*x10376)));
evalcond[8]=(((r12*x10382))+((x10366*x10381))+(((-1.0)*x10386))+(((-1.0)*x10370*x10381))+(((-1.0)*x10364*x10369))+(((-1.0)*x10364*x10374)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x10387=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x10387.valid){
continue;
}
CheckValue<IkReal> x10388 = IKatan2WithCheck(IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x10388.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10387.value)))+(x10388.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x10389=IKcos(j8);
IkReal x10390=IKsin(j8);
IkReal x10391=((1.0)*cj7);
IkReal x10392=(gconst4*r00);
IkReal x10393=(gconst5*r10);
IkReal x10394=(gconst5*r01);
IkReal x10395=((1.0)*sj5);
IkReal x10396=(gconst5*r11);
IkReal x10397=(gconst4*r11);
IkReal x10398=(gconst5*r21);
IkReal x10399=(cj5*cj6);
IkReal x10400=(gconst5*r00);
IkReal x10401=(gconst4*r10);
IkReal x10402=(gconst4*r01);
IkReal x10403=(gconst4*r20);
IkReal x10404=(gconst4*r21);
IkReal x10405=(gconst5*r20);
IkReal x10406=((1.0)*cj5*sj6);
IkReal x10407=(cj6*x10395);
IkReal x10408=(sj7*x10390);
IkReal x10409=(sj7*x10389);
IkReal x10410=((1.0)*x10389);
IkReal x10411=(cj7*x10390);
IkReal x10412=(cj7*x10389);
IkReal x10413=(x10406+x10407);
evalcond[0]=(((x10389*x10404))+((r22*x10390))+(((-1.0)*x10405*x10410)));
evalcond[1]=(((r12*x10390))+((x10389*x10397))+(((-1.0)*x10393*x10410)));
evalcond[2]=((-1.0)+(((-1.0)*x10400*x10410))+((x10389*x10402))+((r02*x10390)));
evalcond[3]=(((x10400*x10411))+((r02*x10412))+(((-1.0)*x10390*x10391*x10402))+((sj7*x10394))+((sj7*x10392)));
evalcond[4]=(((x10400*x10408))+((r02*x10409))+(((-1.0)*x10391*x10394))+(((-1.0)*x10391*x10392))+(((-1.0)*x10402*x10408)));
evalcond[5]=((((-1.0)*x10390*x10391*x10397))+(((-1.0)*sj6*x10395))+x10399+((x10393*x10411))+((r12*x10412))+((sj7*x10401))+((sj7*x10396)));
evalcond[6]=(((x10405*x10411))+((r22*x10412))+(((-1.0)*x10413))+(((-1.0)*x10390*x10391*x10404))+((sj7*x10403))+((sj7*x10398)));
evalcond[7]=((((-1.0)*x10391*x10403))+((r22*x10409))+((sj5*sj6))+(((-1.0)*x10391*x10398))+(((-1.0)*x10399))+(((-1.0)*x10404*x10408))+((x10405*x10408)));
evalcond[8]=((((-1.0)*x10391*x10401))+(((-1.0)*x10397*x10408))+(((-1.0)*x10391*x10396))+(((-1.0)*x10413))+((x10393*x10408))+((r12*x10409)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[4];
IkReal x10414=((-1.0)*r21);
CheckValue<IkReal> x10417 = IKatan2WithCheck(IkReal(x10414),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10417.valid){
continue;
}
IkReal x10415=((1.0)*(x10417.value));
IkReal x10416=x9265;
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x10415)));
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10415)));
IkReal gconst4=(x10414*x10416);
IkReal gconst5=((1.0)*r20*x10416);
j8eval[0]=0;
j8eval[1]=0;
j8eval[2]=r12;
j8eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
IkReal x10418=((-1.0)*r21);
CheckValue<IkReal> x10421 = IKatan2WithCheck(IkReal(x10418),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10421.valid){
continue;
}
IkReal x10419=((1.0)*(x10421.value));
IkReal x10420=x9265;
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x10419)));
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10419)));
IkReal gconst4=(x10418*x10420);
IkReal gconst5=((1.0)*r20*x10420);
j8eval[0]=1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
IkReal x10422=((-1.0)*r21);
CheckValue<IkReal> x10425 = IKatan2WithCheck(IkReal(x10422),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10425.valid){
continue;
}
IkReal x10423=((1.0)*(x10425.value));
IkReal x10424=x9265;
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x10423)));
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10423)));
IkReal gconst4=(x10422*x10424);
IkReal gconst5=((1.0)*r20*x10424);
j8eval[0]=r12;
j8eval[1]=sj7;
j8eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[4];
IkReal x10426=((-1.0)*r21);
CheckValue<IkReal> x10429 = IKatan2WithCheck(IkReal(x10426),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10429.valid){
continue;
}
IkReal x10427=((1.0)*(x10429.value));
IkReal x10428=x9265;
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x10427)));
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10427)));
IkReal gconst4=(x10426*x10428);
IkReal gconst5=((1.0)*r20*x10428);
j8eval[0]=0;
j8eval[1]=0;
j8eval[2]=r12;
j8eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
IkReal x10430=((-1.0)*r21);
CheckValue<IkReal> x10433 = IKatan2WithCheck(IkReal(x10430),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10433.valid){
continue;
}
IkReal x10431=((1.0)*(x10433.value));
IkReal x10432=x9265;
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x10431)));
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10431)));
IkReal gconst4=(x10430*x10432);
IkReal gconst5=((1.0)*r20*x10432);
j8eval[0]=1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[4];
IkReal x10434=((-1.0)*r21);
CheckValue<IkReal> x10437 = IKatan2WithCheck(IkReal(x10434),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10437.valid){
continue;
}
IkReal x10435=((1.0)*(x10437.value));
IkReal x10436=x9265;
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x10435)));
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10435)));
IkReal gconst4=(x10434*x10436);
IkReal gconst5=((1.0)*r20*x10436);
IkReal x10438=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10442=IKPowWithIntegerCheck(x10438,-1);
if(!x10442.valid){
continue;
}
IkReal x10439=x10442.value;
IkReal x10440=((1.0)*x10439);
IkReal x10441=((((-1.0)*x10440*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x10439))+(((-1.0)*x10440*(r01*r01)*(r21*r21))));
j8eval[0]=x10441;
j8eval[1]=r02;
j8eval[2]=x10438;
j8eval[3]=IKsign(x10441);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x10443=(gconst4*r01);
IkReal x10444=(gconst5*r00);
CheckValue<IkReal> x10445 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x10444))+x10443)),IKFAST_ATAN2_MAGTHRESH);
if(!x10445.valid){
continue;
}
CheckValue<IkReal> x10446=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10443*x10443)))+(((-1.0)*(r02*r02)))+(((2.0)*x10443*x10444))+(((-1.0)*(x10444*x10444))))),-1);
if(!x10446.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x10445.value)+(((1.5707963267949)*(x10446.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x10447=IKcos(j8);
IkReal x10448=IKsin(j8);
IkReal x10449=(gconst4*r11);
IkReal x10450=(gconst4*r21);
IkReal x10451=(gconst4*r01);
IkReal x10452=(gconst5*x10448);
IkReal x10453=((1.0)*x10448);
IkReal x10454=((1.0)*gconst5*x10447);
evalcond[0]=(((r22*x10448))+((x10447*x10450))+(((-1.0)*r20*x10454)));
evalcond[1]=((((-1.0)*r10*x10454))+((x10447*x10449))+((r12*x10448)));
evalcond[2]=(((r00*x10452))+((r02*x10447))+(((-1.0)*x10451*x10453)));
evalcond[3]=((1.0)+((x10447*x10451))+(((-1.0)*r00*x10454))+((r02*x10448)));
evalcond[4]=(((r10*x10452))+((cj6*sj5))+(((-1.0)*x10449*x10453))+((cj5*sj6))+((r12*x10447)));
evalcond[5]=(((r22*x10447))+((sj5*sj6))+(((-1.0)*x10450*x10453))+(((-1.0)*cj5*cj6))+((r20*x10452)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x10455=((1.0)*gconst5);
CheckValue<IkReal> x10456 = IKatan2WithCheck(IkReal((((gconst4*r21))+(((-1.0)*r20*x10455)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x10456.valid){
continue;
}
CheckValue<IkReal> x10457=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10455))+(((-1.0)*gconst4*r10)))),-1);
if(!x10457.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x10456.value)+(((1.5707963267949)*(x10457.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x10458=IKcos(j8);
IkReal x10459=IKsin(j8);
IkReal x10460=(gconst4*r11);
IkReal x10461=(gconst4*r21);
IkReal x10462=(gconst4*r01);
IkReal x10463=(gconst5*x10459);
IkReal x10464=((1.0)*x10459);
IkReal x10465=((1.0)*gconst5*x10458);
evalcond[0]=(((r22*x10459))+(((-1.0)*r20*x10465))+((x10458*x10461)));
evalcond[1]=(((r12*x10459))+(((-1.0)*r10*x10465))+((x10458*x10460)));
evalcond[2]=(((r00*x10463))+(((-1.0)*x10462*x10464))+((r02*x10458)));
evalcond[3]=((1.0)+(((-1.0)*r00*x10465))+((r02*x10459))+((x10458*x10462)));
evalcond[4]=(((cj6*sj5))+(((-1.0)*x10460*x10464))+((cj5*sj6))+((r12*x10458))+((r10*x10463)));
evalcond[5]=((((-1.0)*x10461*x10464))+((r20*x10463))+((sj5*sj6))+((r22*x10458))+(((-1.0)*cj5*cj6)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x10466 = IKatan2WithCheck(IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10466.valid){
continue;
}
CheckValue<IkReal> x10467=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10467.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x10466.value)+(((1.5707963267949)*(x10467.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x10468=IKcos(j8);
IkReal x10469=IKsin(j8);
IkReal x10470=(gconst4*r11);
IkReal x10471=(gconst4*r21);
IkReal x10472=(gconst4*r01);
IkReal x10473=(gconst5*x10469);
IkReal x10474=((1.0)*x10469);
IkReal x10475=((1.0)*gconst5*x10468);
evalcond[0]=(((r22*x10469))+(((-1.0)*r20*x10475))+((x10468*x10471)));
evalcond[1]=(((r12*x10469))+((x10468*x10470))+(((-1.0)*r10*x10475)));
evalcond[2]=(((r00*x10473))+(((-1.0)*x10472*x10474))+((r02*x10468)));
evalcond[3]=((1.0)+(((-1.0)*r00*x10475))+((x10468*x10472))+((r02*x10469)));
evalcond[4]=(((cj6*sj5))+(((-1.0)*x10470*x10474))+((r12*x10468))+((cj5*sj6))+((r10*x10473)));
evalcond[5]=(((r20*x10473))+((sj5*sj6))+((r22*x10468))+(((-1.0)*cj5*cj6))+(((-1.0)*x10471*x10474)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[4];
IkReal x10476=((-1.0)*r21);
CheckValue<IkReal> x10479 = IKatan2WithCheck(IkReal(x10476),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10479.valid){
continue;
}
IkReal x10477=((1.0)*(x10479.value));
IkReal x10478=x9265;
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x10477)));
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10477)));
IkReal gconst4=(x10476*x10478);
IkReal gconst5=((1.0)*r20*x10478);
j8eval[0]=0;
j8eval[1]=0;
j8eval[2]=r12;
j8eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
IkReal x10480=((-1.0)*r21);
CheckValue<IkReal> x10483 = IKatan2WithCheck(IkReal(x10480),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10483.valid){
continue;
}
IkReal x10481=((1.0)*(x10483.value));
IkReal x10482=x9265;
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x10481)));
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10481)));
IkReal gconst4=(x10480*x10482);
IkReal gconst5=((1.0)*r20*x10482);
j8eval[0]=1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[4];
IkReal x10484=((-1.0)*r21);
CheckValue<IkReal> x10487 = IKatan2WithCheck(IkReal(x10484),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10487.valid){
continue;
}
IkReal x10485=((1.0)*(x10487.value));
IkReal x10486=x9265;
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x10485)));
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10485)));
IkReal gconst4=(x10484*x10486);
IkReal gconst5=((1.0)*r20*x10486);
IkReal x10488=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10492=IKPowWithIntegerCheck(x10488,-1);
if(!x10492.valid){
continue;
}
IkReal x10489=x10492.value;
IkReal x10490=((1.0)*x10489);
IkReal x10491=((((-2.0)*r00*r01*r20*r21*x10489))+(((-1.0)*(r02*r02)))+(((-1.0)*x10490*(r01*r01)*(r21*r21)))+(((-1.0)*x10490*(r00*r00)*(r20*r20))));
j8eval[0]=x10491;
j8eval[1]=r02;
j8eval[2]=x10488;
j8eval[3]=IKsign(x10491);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x10493=(gconst4*r01);
IkReal x10494=(gconst5*r00);
CheckValue<IkReal> x10495 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x10494))+x10493)),IKFAST_ATAN2_MAGTHRESH);
if(!x10495.valid){
continue;
}
CheckValue<IkReal> x10496=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10494*x10494)))+(((-1.0)*(r02*r02)))+(((2.0)*x10493*x10494))+(((-1.0)*(x10493*x10493))))),-1);
if(!x10496.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x10495.value)+(((1.5707963267949)*(x10496.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x10497=IKcos(j8);
IkReal x10498=IKsin(j8);
IkReal x10499=(gconst4*r11);
IkReal x10500=(gconst5*r00);
IkReal x10501=(gconst5*r20);
IkReal x10502=((1.0)*gconst5*r10);
IkReal x10503=((1.0)*x10497);
IkReal x10504=(gconst4*x10498);
IkReal x10505=((1.0)*x10498);
IkReal x10506=(gconst4*x10497);
evalcond[0]=((((-1.0)*x10501*x10503))+((r22*x10498))+((r21*x10506)));
evalcond[1]=(((r12*x10498))+(((-1.0)*x10497*x10502))+((x10497*x10499)));
evalcond[2]=((1.0)+((r01*x10506))+((r02*x10498))+(((-1.0)*x10500*x10503)));
evalcond[3]=(((r01*x10504))+(((-1.0)*r02*x10503))+(((-1.0)*x10500*x10505)));
evalcond[4]=((((-1.0)*x10498*x10502))+((cj6*sj5))+((cj5*sj6))+((x10498*x10499))+(((-1.0)*r12*x10503)));
evalcond[5]=((((-1.0)*x10501*x10505))+(((-1.0)*r22*x10503))+((sj5*sj6))+((r21*x10504))+(((-1.0)*cj5*cj6)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x10507=((1.0)*gconst5);
CheckValue<IkReal> x10508 = IKatan2WithCheck(IkReal((((gconst4*r21))+(((-1.0)*r20*x10507)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x10508.valid){
continue;
}
CheckValue<IkReal> x10509=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10507))+(((-1.0)*gconst4*r10)))),-1);
if(!x10509.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x10508.value)+(((1.5707963267949)*(x10509.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x10510=IKcos(j8);
IkReal x10511=IKsin(j8);
IkReal x10512=(gconst4*r11);
IkReal x10513=(gconst5*r00);
IkReal x10514=(gconst5*r20);
IkReal x10515=((1.0)*gconst5*r10);
IkReal x10516=((1.0)*x10510);
IkReal x10517=(gconst4*x10511);
IkReal x10518=((1.0)*x10511);
IkReal x10519=(gconst4*x10510);
evalcond[0]=((((-1.0)*x10514*x10516))+((r21*x10519))+((r22*x10511)));
evalcond[1]=(((r12*x10511))+((x10510*x10512))+(((-1.0)*x10510*x10515)));
evalcond[2]=((1.0)+(((-1.0)*x10513*x10516))+((r01*x10519))+((r02*x10511)));
evalcond[3]=((((-1.0)*r02*x10516))+(((-1.0)*x10513*x10518))+((r01*x10517)));
evalcond[4]=((((-1.0)*x10511*x10515))+((cj6*sj5))+((cj5*sj6))+((x10511*x10512))+(((-1.0)*r12*x10516)));
evalcond[5]=(((sj5*sj6))+(((-1.0)*r22*x10516))+(((-1.0)*x10514*x10518))+((r21*x10517))+(((-1.0)*cj5*cj6)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x10520 = IKatan2WithCheck(IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10520.valid){
continue;
}
CheckValue<IkReal> x10521=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10521.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x10520.value)+(((1.5707963267949)*(x10521.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x10522=IKcos(j8);
IkReal x10523=IKsin(j8);
IkReal x10524=(gconst4*r11);
IkReal x10525=(gconst5*r00);
IkReal x10526=(gconst5*r20);
IkReal x10527=((1.0)*gconst5*r10);
IkReal x10528=((1.0)*x10522);
IkReal x10529=(gconst4*x10523);
IkReal x10530=((1.0)*x10523);
IkReal x10531=(gconst4*x10522);
evalcond[0]=((((-1.0)*x10526*x10528))+((r22*x10523))+((r21*x10531)));
evalcond[1]=(((x10522*x10524))+((r12*x10523))+(((-1.0)*x10522*x10527)));
evalcond[2]=((1.0)+((r02*x10523))+((r01*x10531))+(((-1.0)*x10525*x10528)));
evalcond[3]=((((-1.0)*r02*x10528))+((r01*x10529))+(((-1.0)*x10525*x10530)));
evalcond[4]=(((cj6*sj5))+(((-1.0)*x10523*x10527))+(((-1.0)*r12*x10528))+((x10523*x10524))+((cj5*sj6)));
evalcond[5]=((((-1.0)*r22*x10528))+((sj5*sj6))+((r21*x10529))+(((-1.0)*cj5*cj6))+(((-1.0)*x10526*x10530)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[4];
IkReal x10532=((-1.0)*r21);
CheckValue<IkReal> x10535 = IKatan2WithCheck(IkReal(x10532),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10535.valid){
continue;
}
IkReal x10533=((1.0)*(x10535.value));
IkReal x10534=x9265;
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x10533)));
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj7=0;
cj7=1.0;
j7=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10533)));
IkReal gconst4=(x10532*x10534);
IkReal gconst5=((1.0)*r20*x10534);
j8eval[0]=0;
j8eval[1]=0;
j8eval[2]=r12;
j8eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
IkReal x10536=((-1.0)*r21);
CheckValue<IkReal> x10539 = IKatan2WithCheck(IkReal(x10536),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10539.valid){
continue;
}
IkReal x10537=((1.0)*(x10539.value));
IkReal x10538=x9265;
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x10537)));
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj7=0;
cj7=1.0;
j7=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10537)));
IkReal gconst4=(x10536*x10538);
IkReal gconst5=((1.0)*r20*x10538);
j8eval[0]=1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[4];
IkReal x10540=((-1.0)*r21);
CheckValue<IkReal> x10543 = IKatan2WithCheck(IkReal(x10540),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10543.valid){
continue;
}
IkReal x10541=((1.0)*(x10543.value));
IkReal x10542=x9265;
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x10541)));
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj7=0;
cj7=1.0;
j7=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10541)));
IkReal gconst4=(x10540*x10542);
IkReal gconst5=((1.0)*r20*x10542);
IkReal x10544=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10548=IKPowWithIntegerCheck(x10544,-1);
if(!x10548.valid){
continue;
}
IkReal x10545=x10548.value;
IkReal x10546=((1.0)*x10545);
IkReal x10547=((((-1.0)*x10546*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-1.0)*x10546*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x10545)));
j8eval[0]=x10547;
j8eval[1]=r02;
j8eval[2]=x10544;
j8eval[3]=IKsign(x10547);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x10549=(gconst4*r01);
IkReal x10550=(gconst5*r00);
CheckValue<IkReal> x10551=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x10550*x10550)))+(((2.0)*x10549*x10550))+(((-1.0)*(x10549*x10549))))),-1);
if(!x10551.valid){
continue;
}
CheckValue<IkReal> x10552 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x10550))+x10549)),IKFAST_ATAN2_MAGTHRESH);
if(!x10552.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10551.value)))+(x10552.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x10553=IKcos(j8);
IkReal x10554=IKsin(j8);
IkReal x10555=((1.0)*cj6);
IkReal x10556=(gconst4*r11);
IkReal x10557=(gconst4*r21);
IkReal x10558=(gconst4*r01);
IkReal x10559=(gconst5*x10554);
IkReal x10560=((1.0)*x10554);
IkReal x10561=((1.0)*gconst5*x10553);
evalcond[0]=(((r22*x10554))+(((-1.0)*r20*x10561))+((x10553*x10557)));
evalcond[1]=((((-1.0)*r10*x10561))+((r12*x10554))+((x10553*x10556)));
evalcond[2]=(((r02*x10553))+(((-1.0)*x10558*x10560))+((r00*x10559)));
evalcond[3]=((1.0)+(((-1.0)*r00*x10561))+((r02*x10554))+((x10553*x10558)));
evalcond[4]=(((sj5*sj6))+(((-1.0)*x10556*x10560))+((r10*x10559))+((r12*x10553))+(((-1.0)*cj5*x10555)));
evalcond[5]=((((-1.0)*cj5*sj6))+((r22*x10553))+(((-1.0)*sj5*x10555))+(((-1.0)*x10557*x10560))+((r20*x10559)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x10562=((1.0)*gconst5);
CheckValue<IkReal> x10563 = IKatan2WithCheck(IkReal((((gconst4*r21))+(((-1.0)*r20*x10562)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x10563.valid){
continue;
}
CheckValue<IkReal> x10564=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10562))+(((-1.0)*gconst4*r10)))),-1);
if(!x10564.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x10563.value)+(((1.5707963267949)*(x10564.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x10565=IKcos(j8);
IkReal x10566=IKsin(j8);
IkReal x10567=((1.0)*cj6);
IkReal x10568=(gconst4*r11);
IkReal x10569=(gconst4*r21);
IkReal x10570=(gconst4*r01);
IkReal x10571=(gconst5*x10566);
IkReal x10572=((1.0)*x10566);
IkReal x10573=((1.0)*gconst5*x10565);
evalcond[0]=(((r22*x10566))+(((-1.0)*r20*x10573))+((x10565*x10569)));
evalcond[1]=((((-1.0)*r10*x10573))+((r12*x10566))+((x10565*x10568)));
evalcond[2]=(((r00*x10571))+((r02*x10565))+(((-1.0)*x10570*x10572)));
evalcond[3]=((1.0)+((x10565*x10570))+(((-1.0)*r00*x10573))+((r02*x10566)));
evalcond[4]=((((-1.0)*cj5*x10567))+((sj5*sj6))+((r10*x10571))+(((-1.0)*x10568*x10572))+((r12*x10565)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*x10569*x10572))+(((-1.0)*sj5*x10567))+((r20*x10571))+((r22*x10565)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x10574 = IKatan2WithCheck(IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10574.valid){
continue;
}
CheckValue<IkReal> x10575=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10575.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x10574.value)+(((1.5707963267949)*(x10575.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x10576=IKcos(j8);
IkReal x10577=IKsin(j8);
IkReal x10578=((1.0)*cj6);
IkReal x10579=(gconst4*r11);
IkReal x10580=(gconst4*r21);
IkReal x10581=(gconst4*r01);
IkReal x10582=(gconst5*x10577);
IkReal x10583=((1.0)*x10577);
IkReal x10584=((1.0)*gconst5*x10576);
evalcond[0]=(((x10576*x10580))+(((-1.0)*r20*x10584))+((r22*x10577)));
evalcond[1]=(((x10576*x10579))+(((-1.0)*r10*x10584))+((r12*x10577)));
evalcond[2]=((((-1.0)*x10581*x10583))+((r02*x10576))+((r00*x10582)));
evalcond[3]=((1.0)+(((-1.0)*r00*x10584))+((x10576*x10581))+((r02*x10577)));
evalcond[4]=(((r10*x10582))+(((-1.0)*cj5*x10578))+((sj5*sj6))+((r12*x10576))+(((-1.0)*x10579*x10583)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*sj5*x10578))+((r22*x10576))+((r20*x10582))+(((-1.0)*x10580*x10583)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[4];
IkReal x10585=((-1.0)*r21);
CheckValue<IkReal> x10588 = IKatan2WithCheck(IkReal(x10585),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10588.valid){
continue;
}
IkReal x10586=((1.0)*(x10588.value));
IkReal x10587=x9265;
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x10586)));
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10586)));
IkReal gconst4=(x10585*x10587);
IkReal gconst5=((1.0)*r20*x10587);
j8eval[0]=0;
j8eval[1]=0;
j8eval[2]=r12;
j8eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
IkReal x10589=((-1.0)*r21);
CheckValue<IkReal> x10592 = IKatan2WithCheck(IkReal(x10589),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10592.valid){
continue;
}
IkReal x10590=((1.0)*(x10592.value));
IkReal x10591=x9265;
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x10590)));
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10590)));
IkReal gconst4=(x10589*x10591);
IkReal gconst5=((1.0)*r20*x10591);
j8eval[0]=1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[4];
IkReal x10593=((-1.0)*r21);
CheckValue<IkReal> x10596 = IKatan2WithCheck(IkReal(x10593),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10596.valid){
continue;
}
IkReal x10594=((1.0)*(x10596.value));
IkReal x10595=x9265;
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x10594)));
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10594)));
IkReal gconst4=(x10593*x10595);
IkReal gconst5=((1.0)*r20*x10595);
IkReal x10597=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10601=IKPowWithIntegerCheck(x10597,-1);
if(!x10601.valid){
continue;
}
IkReal x10598=x10601.value;
IkReal x10599=((1.0)*x10598);
IkReal x10600=((((-2.0)*r00*r01*r20*r21*x10598))+(((-1.0)*(r02*r02)))+(((-1.0)*x10599*(r00*r00)*(r20*r20)))+(((-1.0)*x10599*(r01*r01)*(r21*r21))));
j8eval[0]=x10600;
j8eval[1]=r02;
j8eval[2]=x10597;
j8eval[3]=IKsign(x10600);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x10602=(gconst4*r01);
IkReal x10603=(gconst5*r00);
CheckValue<IkReal> x10604=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x10602*x10603))+(((-1.0)*(x10602*x10602)))+(((-1.0)*(x10603*x10603))))),-1);
if(!x10604.valid){
continue;
}
CheckValue<IkReal> x10605 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x10603))+x10602)),IKFAST_ATAN2_MAGTHRESH);
if(!x10605.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10604.value)))+(x10605.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x10606=IKcos(j8);
IkReal x10607=IKsin(j8);
IkReal x10608=(gconst4*r11);
IkReal x10609=((1.0)*cj6);
IkReal x10610=(gconst5*r00);
IkReal x10611=(gconst5*r20);
IkReal x10612=((1.0)*gconst5*r10);
IkReal x10613=((1.0)*x10606);
IkReal x10614=(gconst4*x10607);
IkReal x10615=((1.0)*x10607);
IkReal x10616=(gconst4*x10606);
evalcond[0]=((((-1.0)*x10611*x10613))+((r22*x10607))+((r21*x10616)));
evalcond[1]=(((x10606*x10608))+((r12*x10607))+(((-1.0)*x10606*x10612)));
evalcond[2]=((1.0)+(((-1.0)*x10610*x10613))+((r02*x10607))+((r01*x10616)));
evalcond[3]=((((-1.0)*x10610*x10615))+(((-1.0)*r02*x10613))+((r01*x10614)));
evalcond[4]=(((sj5*sj6))+((x10607*x10608))+(((-1.0)*x10607*x10612))+(((-1.0)*r12*x10613))+(((-1.0)*cj5*x10609)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*x10611*x10615))+(((-1.0)*r22*x10613))+(((-1.0)*sj5*x10609))+((r21*x10614)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x10617=((1.0)*gconst5);
CheckValue<IkReal> x10618=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10617))+(((-1.0)*gconst4*r10)))),-1);
if(!x10618.valid){
continue;
}
CheckValue<IkReal> x10619 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x10617))+((gconst4*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x10619.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10618.value)))+(x10619.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x10620=IKcos(j8);
IkReal x10621=IKsin(j8);
IkReal x10622=(gconst4*r11);
IkReal x10623=((1.0)*cj6);
IkReal x10624=(gconst5*r00);
IkReal x10625=(gconst5*r20);
IkReal x10626=((1.0)*gconst5*r10);
IkReal x10627=((1.0)*x10620);
IkReal x10628=(gconst4*x10621);
IkReal x10629=((1.0)*x10621);
IkReal x10630=(gconst4*x10620);
evalcond[0]=((((-1.0)*x10625*x10627))+((r22*x10621))+((r21*x10630)));
evalcond[1]=(((x10620*x10622))+((r12*x10621))+(((-1.0)*x10620*x10626)));
evalcond[2]=((1.0)+(((-1.0)*x10624*x10627))+((r01*x10630))+((r02*x10621)));
evalcond[3]=((((-1.0)*r02*x10627))+(((-1.0)*x10624*x10629))+((r01*x10628)));
evalcond[4]=(((sj5*sj6))+(((-1.0)*r12*x10627))+(((-1.0)*cj5*x10623))+((x10621*x10622))+(((-1.0)*x10621*x10626)));
evalcond[5]=(((r21*x10628))+(((-1.0)*cj5*sj6))+(((-1.0)*sj5*x10623))+(((-1.0)*x10625*x10629))+(((-1.0)*r22*x10627)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x10631 = IKatan2WithCheck(IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10631.valid){
continue;
}
CheckValue<IkReal> x10632=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10632.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x10631.value)+(((1.5707963267949)*(x10632.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x10633=IKcos(j8);
IkReal x10634=IKsin(j8);
IkReal x10635=(gconst4*r11);
IkReal x10636=((1.0)*cj6);
IkReal x10637=(gconst5*r00);
IkReal x10638=(gconst5*r20);
IkReal x10639=((1.0)*gconst5*r10);
IkReal x10640=((1.0)*x10633);
IkReal x10641=(gconst4*x10634);
IkReal x10642=((1.0)*x10634);
IkReal x10643=(gconst4*x10633);
evalcond[0]=(((r21*x10643))+(((-1.0)*x10638*x10640))+((r22*x10634)));
evalcond[1]=((((-1.0)*x10633*x10639))+((x10633*x10635))+((r12*x10634)));
evalcond[2]=((1.0)+((r01*x10643))+((r02*x10634))+(((-1.0)*x10637*x10640)));
evalcond[3]=((((-1.0)*r02*x10640))+((r01*x10641))+(((-1.0)*x10637*x10642)));
evalcond[4]=((((-1.0)*x10634*x10639))+((sj5*sj6))+(((-1.0)*r12*x10640))+((x10634*x10635))+(((-1.0)*cj5*x10636)));
evalcond[5]=(((r21*x10641))+(((-1.0)*cj5*sj6))+(((-1.0)*x10638*x10642))+(((-1.0)*sj5*x10636))+(((-1.0)*r22*x10640)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r12);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
j8array[0]=0;
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x10644=gconst4*gconst4;
IkReal x10645=gconst5*gconst5;
IkReal x10646=(r00*sj7);
IkReal x10647=(cj7*r00);
IkReal x10648=(cj7*r01);
IkReal x10649=(r21*x10644);
IkReal x10650=(r20*x10645);
IkReal x10651=((1.0)*r01*sj7);
IkReal x10652=(gconst4*gconst5*r21);
IkReal x10653=((1.0)*gconst4*gconst5*r20);
CheckValue<IkReal> x10654=IKPowWithIntegerCheck(IKsign((((x10647*x10650))+((x10648*x10649))+((cj7*r02*r22))+(((-1.0)*x10648*x10653))+(((-1.0)*x10647*x10652)))),-1);
if(!x10654.valid){
continue;
}
CheckValue<IkReal> x10655 = IKatan2WithCheck(IkReal(((((-1.0)*x10646*x10653))+((x10646*x10649))+((r01*sj7*x10652))+(((-1.0)*x10650*x10651)))),IkReal(((((-1.0)*gconst4*r22*x10646))+(((-1.0)*gconst5*r22*x10651)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10655.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10654.value)))+(x10655.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x10656=IKcos(j8);
IkReal x10657=IKsin(j8);
IkReal x10658=(sj5*sj6);
IkReal x10659=((1.0)*cj7);
IkReal x10660=(gconst4*r00);
IkReal x10661=(gconst5*r10);
IkReal x10662=(gconst5*r01);
IkReal x10663=((1.0)*cj6);
IkReal x10664=(gconst4*r11);
IkReal x10665=(gconst5*r21);
IkReal x10666=(gconst5*r20);
IkReal x10667=(gconst5*r00);
IkReal x10668=(gconst4*r10);
IkReal x10669=(gconst4*r01);
IkReal x10670=(gconst4*r20);
IkReal x10671=(gconst5*r11);
IkReal x10672=(gconst4*r21);
IkReal x10673=(cj5*sj6);
IkReal x10674=(cj5*x10663);
IkReal x10675=(sj7*x10657);
IkReal x10676=(sj7*x10656);
IkReal x10677=((1.0)*x10656);
IkReal x10678=(cj7*x10657);
IkReal x10679=(cj7*x10656);
evalcond[0]=(((r22*x10657))+((x10656*x10672))+(((-1.0)*x10666*x10677)));
evalcond[1]=((((-1.0)*x10661*x10677))+((r12*x10657))+((x10656*x10664)));
evalcond[2]=((1.0)+((r02*x10657))+((x10656*x10669))+(((-1.0)*x10667*x10677)));
evalcond[3]=(((sj7*x10662))+((sj7*x10660))+((r02*x10679))+(((-1.0)*x10657*x10659*x10669))+((x10667*x10678)));
evalcond[4]=(((r02*x10676))+(((-1.0)*x10669*x10675))+(((-1.0)*x10659*x10662))+(((-1.0)*x10659*x10660))+((x10667*x10675)));
evalcond[5]=(((sj7*x10668))+((x10661*x10678))+((sj7*x10671))+(((-1.0)*x10657*x10659*x10664))+(((-1.0)*x10674))+x10658+((r12*x10679)));
evalcond[6]=(((x10666*x10678))+(((-1.0)*sj5*x10663))+((sj7*x10665))+((r22*x10679))+((sj7*x10670))+(((-1.0)*x10657*x10659*x10672))+(((-1.0)*x10673)));
evalcond[7]=((((-1.0)*x10664*x10675))+((cj6*sj5))+((x10661*x10675))+(((-1.0)*x10659*x10671))+(((-1.0)*x10659*x10668))+x10673+((r12*x10676)));
evalcond[8]=(((x10666*x10675))+(((-1.0)*x10672*x10675))+((r22*x10676))+(((-1.0)*x10659*x10670))+(((-1.0)*x10659*x10665))+(((-1.0)*x10674))+x10658);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x10680=((1.0)*gconst5);
CheckValue<IkReal> x10681 = IKatan2WithCheck(IkReal((((gconst4*r21))+(((-1.0)*r20*x10680)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x10681.valid){
continue;
}
CheckValue<IkReal> x10682=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10680))+(((-1.0)*gconst4*r10)))),-1);
if(!x10682.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x10681.value)+(((1.5707963267949)*(x10682.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x10683=IKcos(j8);
IkReal x10684=IKsin(j8);
IkReal x10685=(sj5*sj6);
IkReal x10686=((1.0)*cj7);
IkReal x10687=(gconst4*r00);
IkReal x10688=(gconst5*r10);
IkReal x10689=(gconst5*r01);
IkReal x10690=((1.0)*cj6);
IkReal x10691=(gconst4*r11);
IkReal x10692=(gconst5*r21);
IkReal x10693=(gconst5*r20);
IkReal x10694=(gconst5*r00);
IkReal x10695=(gconst4*r10);
IkReal x10696=(gconst4*r01);
IkReal x10697=(gconst4*r20);
IkReal x10698=(gconst5*r11);
IkReal x10699=(gconst4*r21);
IkReal x10700=(cj5*sj6);
IkReal x10701=(cj5*x10690);
IkReal x10702=(sj7*x10684);
IkReal x10703=(sj7*x10683);
IkReal x10704=((1.0)*x10683);
IkReal x10705=(cj7*x10684);
IkReal x10706=(cj7*x10683);
evalcond[0]=(((x10683*x10699))+((r22*x10684))+(((-1.0)*x10693*x10704)));
evalcond[1]=(((x10683*x10691))+(((-1.0)*x10688*x10704))+((r12*x10684)));
evalcond[2]=((1.0)+((x10683*x10696))+((r02*x10684))+(((-1.0)*x10694*x10704)));
evalcond[3]=(((sj7*x10687))+((sj7*x10689))+(((-1.0)*x10684*x10686*x10696))+((r02*x10706))+((x10694*x10705)));
evalcond[4]=((((-1.0)*x10686*x10689))+(((-1.0)*x10686*x10687))+((r02*x10703))+((x10694*x10702))+(((-1.0)*x10696*x10702)));
evalcond[5]=(((x10688*x10705))+((r12*x10706))+(((-1.0)*x10684*x10686*x10691))+x10685+(((-1.0)*x10701))+((sj7*x10695))+((sj7*x10698)));
evalcond[6]=((((-1.0)*x10700))+((x10693*x10705))+((r22*x10706))+(((-1.0)*x10684*x10686*x10699))+(((-1.0)*sj5*x10690))+((sj7*x10692))+((sj7*x10697)));
evalcond[7]=((((-1.0)*x10691*x10702))+((cj6*sj5))+(((-1.0)*x10686*x10695))+(((-1.0)*x10686*x10698))+((x10688*x10702))+((r12*x10703))+x10700);
evalcond[8]=((((-1.0)*x10699*x10702))+(((-1.0)*x10686*x10697))+(((-1.0)*x10686*x10692))+((x10693*x10702))+((r22*x10703))+x10685+(((-1.0)*x10701)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x10707 = IKatan2WithCheck(IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10707.valid){
continue;
}
CheckValue<IkReal> x10708=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10708.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x10707.value)+(((1.5707963267949)*(x10708.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x10709=IKcos(j8);
IkReal x10710=IKsin(j8);
IkReal x10711=(sj5*sj6);
IkReal x10712=((1.0)*cj7);
IkReal x10713=(gconst4*r00);
IkReal x10714=(gconst5*r10);
IkReal x10715=(gconst5*r01);
IkReal x10716=((1.0)*cj6);
IkReal x10717=(gconst4*r11);
IkReal x10718=(gconst5*r21);
IkReal x10719=(gconst5*r20);
IkReal x10720=(gconst5*r00);
IkReal x10721=(gconst4*r10);
IkReal x10722=(gconst4*r01);
IkReal x10723=(gconst4*r20);
IkReal x10724=(gconst5*r11);
IkReal x10725=(gconst4*r21);
IkReal x10726=(cj5*sj6);
IkReal x10727=(cj5*x10716);
IkReal x10728=(sj7*x10710);
IkReal x10729=(sj7*x10709);
IkReal x10730=((1.0)*x10709);
IkReal x10731=(cj7*x10710);
IkReal x10732=(cj7*x10709);
evalcond[0]=(((x10709*x10725))+(((-1.0)*x10719*x10730))+((r22*x10710)));
evalcond[1]=(((r12*x10710))+((x10709*x10717))+(((-1.0)*x10714*x10730)));
evalcond[2]=((1.0)+(((-1.0)*x10720*x10730))+((x10709*x10722))+((r02*x10710)));
evalcond[3]=(((r02*x10732))+((x10720*x10731))+((sj7*x10713))+((sj7*x10715))+(((-1.0)*x10710*x10712*x10722)));
evalcond[4]=(((r02*x10729))+((x10720*x10728))+(((-1.0)*x10712*x10713))+(((-1.0)*x10712*x10715))+(((-1.0)*x10722*x10728)));
evalcond[5]=(((sj7*x10724))+((sj7*x10721))+(((-1.0)*x10710*x10712*x10717))+((x10714*x10731))+(((-1.0)*x10727))+x10711+((r12*x10732)));
evalcond[6]=(((x10719*x10731))+(((-1.0)*sj5*x10716))+((sj7*x10723))+(((-1.0)*x10726))+((sj7*x10718))+(((-1.0)*x10710*x10712*x10725))+((r22*x10732)));
evalcond[7]=(((cj6*sj5))+((x10714*x10728))+((r12*x10729))+x10726+(((-1.0)*x10712*x10724))+(((-1.0)*x10712*x10721))+(((-1.0)*x10717*x10728)));
evalcond[8]=(((r22*x10729))+(((-1.0)*x10725*x10728))+((x10719*x10728))+(((-1.0)*x10712*x10718))+(((-1.0)*x10727))+x10711+(((-1.0)*x10712*x10723)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[2];
IkReal x10733=((-1.0)*r21);
IkReal x10734=((-1.0)*px);
CheckValue<IkReal> x10736 = IKatan2WithCheck(IkReal(x10733),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10736.valid){
continue;
}
IkReal x10735=((1.0)*(x10736.value));
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x10735)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10734);
rxp1_1=(px*r21);
rxp1_2=(r11*x10734);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10735)));
IkReal gconst4=x10733;
IkReal gconst5=((1.0)*r20);
j8eval[0]=r02;
j8eval[1]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x10737=((-1.0)*r21);
IkReal x10738=((-1.0)*px);
CheckValue<IkReal> x10740 = IKatan2WithCheck(IkReal(x10737),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10740.valid){
continue;
}
IkReal x10739=((1.0)*(x10740.value));
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x10739)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10738);
rxp1_1=(px*r21);
rxp1_2=(r11*x10738);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10739)));
IkReal gconst4=x10737;
IkReal gconst5=((1.0)*r20);
IkReal x10741=((1.0)*cj7);
j8eval[0]=(((x10741*(r21*r21)))+x10741+(((-1.0)*x10741*(r10*r10))));
j8eval[1]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x10742=((-1.0)*r21);
IkReal x10743=((-1.0)*px);
CheckValue<IkReal> x10745 = IKatan2WithCheck(IkReal(x10742),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10745.valid){
continue;
}
IkReal x10744=((1.0)*(x10745.value));
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x10744)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10743);
rxp1_1=(px*r21);
rxp1_2=(r11*x10743);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10744)));
IkReal gconst4=x10742;
IkReal gconst5=((1.0)*r20);
j8eval[0]=r02;
j8eval[1]=sj7;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x10746=((-1.0)*r21);
IkReal x10747=((-1.0)*px);
CheckValue<IkReal> x10749 = IKatan2WithCheck(IkReal(x10746),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10749.valid){
continue;
}
IkReal x10748=((1.0)*(x10749.value));
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x10748)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10747);
rxp1_1=(px*r21);
rxp1_2=(r11*x10747);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj7=0;
cj7=1.0;
j7=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10748)));
IkReal gconst4=x10746;
IkReal gconst5=((1.0)*r20);
j8eval[0]=((1.0)+(((1.0)*(r21*r21)))+(((-1.0)*(r10*r10))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x10751=IKPowWithIntegerCheck((((gconst5*r20))+(((-1.0)*gconst4*r21))),-1);
if(!x10751.valid){
continue;
}
IkReal x10750=x10751.value;
sj8array[0]=(((cj6*sj5*x10750))+((cj5*sj6*x10750)));
if( sj8array[0] >= -1-IKFAST_SINCOS_THRESH && sj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKasin(sj8array[0]);
    cj8array[0] = IKcos(j8array[0]);
    sj8array[1] = sj8array[0];
    j8array[1] = j8array[0] > 0 ? (IKPI-j8array[0]) : (-IKPI-j8array[0]);
    cj8array[1] = -cj8array[0];
}
else if( isnan(sj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[3];
IkReal x10752=IKcos(j8);
IkReal x10753=(gconst4*x10752);
IkReal x10754=((1.0)*gconst5*x10752);
evalcond[0]=(r02*x10752);
evalcond[1]=((((-1.0)*r20*x10754))+((r21*x10753)));
evalcond[2]=((((-1.0)*r10*x10754))+((r11*x10753)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x10755=((-1.0)*r21);
IkReal x10756=((-1.0)*px);
CheckValue<IkReal> x10758 = IKatan2WithCheck(IkReal(x10755),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10758.valid){
continue;
}
IkReal x10757=((1.0)*(x10758.value));
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x10757)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10756);
rxp1_1=(px*r21);
rxp1_2=(r11*x10756);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10757)));
IkReal gconst4=x10755;
IkReal gconst5=((1.0)*r20);
j8eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(((1.0)*(r10*r10))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x10760=IKPowWithIntegerCheck((((gconst4*r21))+(((-1.0)*gconst5*r20))),-1);
if(!x10760.valid){
continue;
}
IkReal x10759=x10760.value;
sj8array[0]=(((cj6*sj5*x10759))+((cj5*sj6*x10759)));
if( sj8array[0] >= -1-IKFAST_SINCOS_THRESH && sj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKasin(sj8array[0]);
    cj8array[0] = IKcos(j8array[0]);
    sj8array[1] = sj8array[0];
    j8array[1] = j8array[0] > 0 ? (IKPI-j8array[0]) : (-IKPI-j8array[0]);
    cj8array[1] = -cj8array[0];
}
else if( isnan(sj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[3];
IkReal x10761=IKcos(j8);
IkReal x10762=(gconst4*x10761);
IkReal x10763=((1.0)*gconst5*x10761);
evalcond[0]=((-1.0)*r02*x10761);
evalcond[1]=((((-1.0)*r20*x10763))+((r21*x10762)));
evalcond[2]=((((-1.0)*r10*x10763))+((r11*x10762)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x10764=((-1.0)*r21);
IkReal x10765=((-1.0)*px);
CheckValue<IkReal> x10767 = IKatan2WithCheck(IkReal(x10764),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10767.valid){
continue;
}
IkReal x10766=((1.0)*(x10767.value));
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x10766)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10765);
rxp1_1=(px*r21);
rxp1_2=(r11*x10765);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj7=1.0;
cj7=0;
j7=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10766)));
IkReal gconst4=x10764;
IkReal gconst5=((1.0)*r20);
j8eval[0]=((1.0)+(((1.0)*(r21*r21)))+(((-1.0)*(r10*r10))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x10769=IKPowWithIntegerCheck((((gconst5*r20))+(((-1.0)*gconst4*r21))),-1);
if(!x10769.valid){
continue;
}
IkReal x10768=x10769.value;
sj8array[0]=((((-1.0)*sj5*sj6*x10768))+((cj5*cj6*x10768)));
if( sj8array[0] >= -1-IKFAST_SINCOS_THRESH && sj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKasin(sj8array[0]);
    cj8array[0] = IKcos(j8array[0]);
    sj8array[1] = sj8array[0];
    j8array[1] = j8array[0] > 0 ? (IKPI-j8array[0]) : (-IKPI-j8array[0]);
    cj8array[1] = -cj8array[0];
}
else if( isnan(sj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[3];
IkReal x10770=IKcos(j8);
IkReal x10771=(gconst4*x10770);
IkReal x10772=((1.0)*gconst5*x10770);
evalcond[0]=(r02*x10770);
evalcond[1]=((((-1.0)*r20*x10772))+((r21*x10771)));
evalcond[2]=(((r11*x10771))+(((-1.0)*r10*x10772)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x10773=((-1.0)*r21);
IkReal x10774=((-1.0)*px);
CheckValue<IkReal> x10776 = IKatan2WithCheck(IkReal(x10773),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10776.valid){
continue;
}
IkReal x10775=((1.0)*(x10776.value));
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x10775)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10774);
rxp1_1=(px*r21);
rxp1_2=(r11*x10774);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10775)));
IkReal gconst4=x10773;
IkReal gconst5=((1.0)*r20);
j8eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(((1.0)*(r10*r10))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x10778=IKPowWithIntegerCheck((((gconst4*r21))+(((-1.0)*gconst5*r20))),-1);
if(!x10778.valid){
continue;
}
IkReal x10777=x10778.value;
sj8array[0]=(((cj5*cj6*x10777))+(((-1.0)*sj5*sj6*x10777)));
if( sj8array[0] >= -1-IKFAST_SINCOS_THRESH && sj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKasin(sj8array[0]);
    cj8array[0] = IKcos(j8array[0]);
    sj8array[1] = sj8array[0];
    j8array[1] = j8array[0] > 0 ? (IKPI-j8array[0]) : (-IKPI-j8array[0]);
    cj8array[1] = -cj8array[0];
}
else if( isnan(sj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[3];
IkReal x10779=IKcos(j8);
IkReal x10780=(gconst4*x10779);
IkReal x10781=((1.0)*gconst5*x10779);
evalcond[0]=((-1.0)*r02*x10779);
evalcond[1]=(((r21*x10780))+(((-1.0)*r20*x10781)));
evalcond[2]=(((r11*x10780))+(((-1.0)*r10*x10781)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x10783=IKPowWithIntegerCheck(r02,-1);
if(!x10783.valid){
continue;
}
IkReal x10782=x10783.value;
CheckValue<IkReal> x10784=IKPowWithIntegerCheck(sj7,-1);
if(!x10784.valid){
continue;
}
if( IKabs((sj4*x10782)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x10782*(x10784.value)*((((cj4*cj5*sj6))+((cj4*cj6*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj4*x10782))+IKsqr((x10782*(x10784.value)*((((cj4*cj5*sj6))+((cj4*cj6*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((sj4*x10782), (x10782*(x10784.value)*((((cj4*cj5*sj6))+((cj4*cj6*sj5))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x10785=IKcos(j8);
IkReal x10786=IKsin(j8);
IkReal x10787=(gconst4*r11);
IkReal x10788=((1.0)*cj7);
IkReal x10789=((1.0)*cj6);
IkReal x10790=((1.0)*sj4);
IkReal x10791=(gconst5*r10);
IkReal x10792=(gconst5*r21);
IkReal x10793=(sj5*sj6);
IkReal x10794=(gconst4*r21);
IkReal x10795=(gconst4*r10);
IkReal x10796=(gconst4*r20);
IkReal x10797=(gconst5*r20);
IkReal x10798=(cj5*cj6);
IkReal x10799=(gconst5*r11);
IkReal x10800=((1.0)*cj5*sj6);
IkReal x10801=(r02*x10785);
IkReal x10802=(sj7*x10786);
IkReal x10803=((1.0)*x10785);
IkReal x10804=(cj7*x10786);
evalcond[0]=(((r02*x10786))+(((-1.0)*x10790)));
evalcond[1]=((((-1.0)*x10797*x10803))+((x10785*x10794)));
evalcond[2]=((((-1.0)*x10791*x10803))+cj4+((x10785*x10787)));
evalcond[3]=((((-1.0)*cj4*x10793))+((cj4*x10798))+((cj7*x10801)));
evalcond[4]=(((sj7*x10801))+(((-1.0)*cj4*x10800))+(((-1.0)*cj4*sj5*x10789)));
evalcond[5]=(((sj7*x10792))+((sj7*x10796))+(((-1.0)*x10800))+(((-1.0)*x10786*x10788*x10794))+(((-1.0)*sj5*x10789))+((x10797*x10804)));
evalcond[6]=((((-1.0)*cj5*x10789))+(((-1.0)*x10794*x10802))+(((-1.0)*x10788*x10796))+(((-1.0)*x10788*x10792))+x10793+((x10797*x10802)));
evalcond[7]=(((sj4*x10798))+((sj7*x10795))+((sj7*x10799))+(((-1.0)*x10790*x10793))+(((-1.0)*x10786*x10787*x10788))+((x10791*x10804)));
evalcond[8]=((((-1.0)*x10788*x10799))+(((-1.0)*x10788*x10795))+(((-1.0)*sj4*sj5*x10789))+(((-1.0)*cj5*sj6*x10790))+(((-1.0)*x10787*x10802))+((x10791*x10802)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x10805=((1.0)*gconst4);
IkReal x10806=((1.0)*gconst5);
CheckValue<IkReal> x10807=IKPowWithIntegerCheck(((((-1.0)*cj7*r21*x10805))+((cj7*gconst5*r20))),-1);
if(!x10807.valid){
continue;
}
CheckValue<IkReal> x10808=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*r10*x10806))),-1);
if(!x10808.valid){
continue;
}
if( IKabs(((x10807.value)*((((cj6*sj5))+(((-1.0)*r20*sj7*x10805))+((cj5*sj6))+(((-1.0)*r21*sj7*x10806)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj4*(x10808.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10807.value)*((((cj6*sj5))+(((-1.0)*r20*sj7*x10805))+((cj5*sj6))+(((-1.0)*r21*sj7*x10806))))))+IKsqr(((-1.0)*cj4*(x10808.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((x10807.value)*((((cj6*sj5))+(((-1.0)*r20*sj7*x10805))+((cj5*sj6))+(((-1.0)*r21*sj7*x10806))))), ((-1.0)*cj4*(x10808.value)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x10809=IKcos(j8);
IkReal x10810=IKsin(j8);
IkReal x10811=(gconst4*r11);
IkReal x10812=((1.0)*cj7);
IkReal x10813=((1.0)*cj6);
IkReal x10814=((1.0)*sj4);
IkReal x10815=(gconst5*r10);
IkReal x10816=(gconst5*r21);
IkReal x10817=(sj5*sj6);
IkReal x10818=(gconst4*r21);
IkReal x10819=(gconst4*r10);
IkReal x10820=(gconst4*r20);
IkReal x10821=(gconst5*r20);
IkReal x10822=(cj5*cj6);
IkReal x10823=(gconst5*r11);
IkReal x10824=((1.0)*cj5*sj6);
IkReal x10825=(r02*x10809);
IkReal x10826=(sj7*x10810);
IkReal x10827=((1.0)*x10809);
IkReal x10828=(cj7*x10810);
evalcond[0]=(((r02*x10810))+(((-1.0)*x10814)));
evalcond[1]=((((-1.0)*x10821*x10827))+((x10809*x10818)));
evalcond[2]=((((-1.0)*x10815*x10827))+cj4+((x10809*x10811)));
evalcond[3]=(((cj4*x10822))+((cj7*x10825))+(((-1.0)*cj4*x10817)));
evalcond[4]=((((-1.0)*cj4*x10824))+((sj7*x10825))+(((-1.0)*cj4*sj5*x10813)));
evalcond[5]=((((-1.0)*x10810*x10812*x10818))+((sj7*x10820))+((sj7*x10816))+((x10821*x10828))+(((-1.0)*sj5*x10813))+(((-1.0)*x10824)));
evalcond[6]=((((-1.0)*x10812*x10816))+(((-1.0)*cj5*x10813))+(((-1.0)*x10812*x10820))+((x10821*x10826))+(((-1.0)*x10818*x10826))+x10817);
evalcond[7]=((((-1.0)*x10814*x10817))+((sj4*x10822))+((x10815*x10828))+(((-1.0)*x10810*x10811*x10812))+((sj7*x10823))+((sj7*x10819)));
evalcond[8]=((((-1.0)*x10812*x10819))+((x10815*x10826))+(((-1.0)*x10812*x10823))+(((-1.0)*cj5*sj6*x10814))+(((-1.0)*x10811*x10826))+(((-1.0)*sj4*sj5*x10813)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x10829=IKPowWithIntegerCheck(r02,-1);
if(!x10829.valid){
continue;
}
CheckValue<IkReal> x10830=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x10830.valid){
continue;
}
if( IKabs((sj4*(x10829.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj4*(x10830.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj4*(x10829.value)))+IKsqr(((-1.0)*cj4*(x10830.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((sj4*(x10829.value)), ((-1.0)*cj4*(x10830.value)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x10831=IKcos(j8);
IkReal x10832=IKsin(j8);
IkReal x10833=(gconst4*r11);
IkReal x10834=((1.0)*cj7);
IkReal x10835=((1.0)*cj6);
IkReal x10836=((1.0)*sj4);
IkReal x10837=(gconst5*r10);
IkReal x10838=(gconst5*r21);
IkReal x10839=(sj5*sj6);
IkReal x10840=(gconst4*r21);
IkReal x10841=(gconst4*r10);
IkReal x10842=(gconst4*r20);
IkReal x10843=(gconst5*r20);
IkReal x10844=(cj5*cj6);
IkReal x10845=(gconst5*r11);
IkReal x10846=((1.0)*cj5*sj6);
IkReal x10847=(r02*x10831);
IkReal x10848=(sj7*x10832);
IkReal x10849=((1.0)*x10831);
IkReal x10850=(cj7*x10832);
evalcond[0]=(((r02*x10832))+(((-1.0)*x10836)));
evalcond[1]=((((-1.0)*x10843*x10849))+((x10831*x10840)));
evalcond[2]=(cj4+((x10831*x10833))+(((-1.0)*x10837*x10849)));
evalcond[3]=(((cj7*x10847))+((cj4*x10844))+(((-1.0)*cj4*x10839)));
evalcond[4]=(((sj7*x10847))+(((-1.0)*cj4*x10846))+(((-1.0)*cj4*sj5*x10835)));
evalcond[5]=((((-1.0)*x10846))+((x10843*x10850))+((sj7*x10842))+(((-1.0)*x10832*x10834*x10840))+(((-1.0)*sj5*x10835))+((sj7*x10838)));
evalcond[6]=((((-1.0)*x10834*x10838))+(((-1.0)*x10840*x10848))+(((-1.0)*cj5*x10835))+(((-1.0)*x10834*x10842))+((x10843*x10848))+x10839);
evalcond[7]=((((-1.0)*x10836*x10839))+(((-1.0)*x10832*x10833*x10834))+((sj4*x10844))+((x10837*x10850))+((sj7*x10845))+((sj7*x10841)));
evalcond[8]=((((-1.0)*cj5*sj6*x10836))+(((-1.0)*x10834*x10845))+(((-1.0)*x10834*x10841))+(((-1.0)*x10833*x10848))+(((-1.0)*sj4*sj5*x10835))+((x10837*x10848)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x10851=((1.0)*gconst5);
CheckValue<IkReal> x10852 = IKatan2WithCheck(IkReal((((gconst4*r11*sj4))+((cj4*gconst4*r01))+(((-1.0)*cj4*r00*x10851))+(((-1.0)*r10*sj4*x10851)))),IkReal(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10852.valid){
continue;
}
CheckValue<IkReal> x10853=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10851))+(((-1.0)*gconst4*r20)))),-1);
if(!x10853.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x10852.value)+(((1.5707963267949)*(x10853.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x10854=IKcos(j8);
IkReal x10855=IKsin(j8);
IkReal x10856=((1.0)*cj6);
IkReal x10857=((1.0)*sj4);
IkReal x10858=(gconst4*sj7);
IkReal x10859=(gconst5*r10);
IkReal x10860=(cj7*gconst5);
IkReal x10861=((1.0)*r21);
IkReal x10862=(sj5*sj6);
IkReal x10863=(cj5*cj6);
IkReal x10864=(gconst5*sj7);
IkReal x10865=((1.0)*r01);
IkReal x10866=(gconst5*r20);
IkReal x10867=(gconst5*r00);
IkReal x10868=((1.0)*cj7*gconst4);
IkReal x10869=((1.0)*cj5*sj6);
IkReal x10870=(sj7*x10854);
IkReal x10871=(r11*x10855);
IkReal x10872=(sj7*x10855);
IkReal x10873=(gconst4*x10854);
IkReal x10874=((1.0)*x10854);
IkReal x10875=(cj7*x10854);
evalcond[0]=(((r21*x10873))+(((-1.0)*x10866*x10874))+((r22*x10855)));
evalcond[1]=(cj4+((r12*x10855))+(((-1.0)*x10859*x10874))+((r11*x10873)));
evalcond[2]=((((-1.0)*x10867*x10874))+((r01*x10873))+(((-1.0)*x10857))+((r02*x10855)));
evalcond[3]=(((r21*x10864))+((r20*x10858))+(((-1.0)*sj5*x10856))+(((-1.0)*x10869))+(((-1.0)*cj7*gconst4*x10855*x10861))+((r20*x10855*x10860))+((r22*x10875)));
evalcond[4]=((((-1.0)*x10855*x10858*x10861))+(((-1.0)*r20*x10868))+(((-1.0)*x10860*x10861))+(((-1.0)*cj5*x10856))+((r20*x10855*x10864))+((r22*x10870))+x10862);
evalcond[5]=(((r02*x10875))+(((-1.0)*cj4*x10862))+((r00*x10855*x10860))+((cj4*x10863))+(((-1.0)*cj7*gconst4*x10855*x10865))+((r01*x10864))+((r00*x10858)));
evalcond[6]=(((r12*x10875))+((r11*x10864))+((cj7*x10855*x10859))+(((-1.0)*x10868*x10871))+((r10*x10858))+(((-1.0)*x10857*x10862))+((sj4*x10863)));
evalcond[7]=(((r02*x10870))+(((-1.0)*x10855*x10858*x10865))+((r00*x10855*x10864))+(((-1.0)*cj4*sj5*x10856))+(((-1.0)*x10860*x10865))+(((-1.0)*cj4*x10869))+(((-1.0)*r00*x10868)));
evalcond[8]=(((r12*x10870))+(((-1.0)*r11*x10860))+(((-1.0)*cj5*sj6*x10857))+(((-1.0)*x10858*x10871))+(((-1.0)*r10*x10868))+(((-1.0)*sj4*sj5*x10856))+((x10859*x10872)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x10876=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x10876.valid){
continue;
}
CheckValue<IkReal> x10877 = IKatan2WithCheck(IkReal(((((-1.0)*gconst5*r20*sj4))+((gconst4*r21*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x10877.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10876.value)))+(x10877.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x10878=IKcos(j8);
IkReal x10879=IKsin(j8);
IkReal x10880=((1.0)*cj6);
IkReal x10881=((1.0)*sj4);
IkReal x10882=(gconst4*sj7);
IkReal x10883=(gconst5*r10);
IkReal x10884=(cj7*gconst5);
IkReal x10885=((1.0)*r21);
IkReal x10886=(sj5*sj6);
IkReal x10887=(cj5*cj6);
IkReal x10888=(gconst5*sj7);
IkReal x10889=((1.0)*r01);
IkReal x10890=(gconst5*r20);
IkReal x10891=(gconst5*r00);
IkReal x10892=((1.0)*cj7*gconst4);
IkReal x10893=((1.0)*cj5*sj6);
IkReal x10894=(sj7*x10878);
IkReal x10895=(r11*x10879);
IkReal x10896=(sj7*x10879);
IkReal x10897=(gconst4*x10878);
IkReal x10898=((1.0)*x10878);
IkReal x10899=(cj7*x10878);
evalcond[0]=((((-1.0)*x10890*x10898))+((r21*x10897))+((r22*x10879)));
evalcond[1]=(((r12*x10879))+cj4+(((-1.0)*x10883*x10898))+((r11*x10897)));
evalcond[2]=(((r02*x10879))+((r01*x10897))+(((-1.0)*x10891*x10898))+(((-1.0)*x10881)));
evalcond[3]=((((-1.0)*cj7*gconst4*x10879*x10885))+(((-1.0)*x10893))+((r22*x10899))+((r20*x10879*x10884))+((r21*x10888))+((r20*x10882))+(((-1.0)*sj5*x10880)));
evalcond[4]=((((-1.0)*cj5*x10880))+(((-1.0)*x10884*x10885))+((r22*x10894))+((r20*x10879*x10888))+(((-1.0)*x10879*x10882*x10885))+(((-1.0)*r20*x10892))+x10886);
evalcond[5]=(((r00*x10882))+(((-1.0)*cj7*gconst4*x10879*x10889))+((r00*x10879*x10884))+((r02*x10899))+(((-1.0)*cj4*x10886))+((cj4*x10887))+((r01*x10888)));
evalcond[6]=((((-1.0)*x10892*x10895))+((cj7*x10879*x10883))+((sj4*x10887))+((r12*x10899))+((r11*x10888))+(((-1.0)*x10881*x10886))+((r10*x10882)));
evalcond[7]=((((-1.0)*x10884*x10889))+(((-1.0)*cj4*x10893))+(((-1.0)*r00*x10892))+(((-1.0)*cj4*sj5*x10880))+((r00*x10879*x10888))+((r02*x10894))+(((-1.0)*x10879*x10882*x10889)));
evalcond[8]=(((x10883*x10896))+((r12*x10894))+(((-1.0)*sj4*sj5*x10880))+(((-1.0)*r11*x10884))+(((-1.0)*cj5*sj6*x10881))+(((-1.0)*r10*x10892))+(((-1.0)*x10882*x10895)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x10900=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10900.valid){
continue;
}
CheckValue<IkReal> x10901 = IKatan2WithCheck(IkReal((((cj4*gconst4*r21))+(((-1.0)*cj4*gconst5*r20)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x10901.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10900.value)))+(x10901.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x10902=IKcos(j8);
IkReal x10903=IKsin(j8);
IkReal x10904=((1.0)*cj6);
IkReal x10905=((1.0)*sj4);
IkReal x10906=(gconst4*sj7);
IkReal x10907=(gconst5*r10);
IkReal x10908=(cj7*gconst5);
IkReal x10909=((1.0)*r21);
IkReal x10910=(sj5*sj6);
IkReal x10911=(cj5*cj6);
IkReal x10912=(gconst5*sj7);
IkReal x10913=((1.0)*r01);
IkReal x10914=(gconst5*r20);
IkReal x10915=(gconst5*r00);
IkReal x10916=((1.0)*cj7*gconst4);
IkReal x10917=((1.0)*cj5*sj6);
IkReal x10918=(sj7*x10902);
IkReal x10919=(r11*x10903);
IkReal x10920=(sj7*x10903);
IkReal x10921=(gconst4*x10902);
IkReal x10922=((1.0)*x10902);
IkReal x10923=(cj7*x10902);
evalcond[0]=((((-1.0)*x10914*x10922))+((r22*x10903))+((r21*x10921)));
evalcond[1]=(((r12*x10903))+cj4+(((-1.0)*x10907*x10922))+((r11*x10921)));
evalcond[2]=(((r01*x10921))+(((-1.0)*x10905))+(((-1.0)*x10915*x10922))+((r02*x10903)));
evalcond[3]=(((r20*x10903*x10908))+(((-1.0)*x10917))+((r20*x10906))+((r21*x10912))+((r22*x10923))+(((-1.0)*sj5*x10904))+(((-1.0)*cj7*gconst4*x10903*x10909)));
evalcond[4]=((((-1.0)*cj5*x10904))+(((-1.0)*r20*x10916))+((r20*x10903*x10912))+((r22*x10918))+(((-1.0)*x10908*x10909))+(((-1.0)*x10903*x10906*x10909))+x10910);
evalcond[5]=((((-1.0)*cj7*gconst4*x10903*x10913))+((r02*x10923))+((cj4*x10911))+((r00*x10906))+((r01*x10912))+((r00*x10903*x10908))+(((-1.0)*cj4*x10910)));
evalcond[6]=((((-1.0)*x10905*x10910))+((cj7*x10903*x10907))+((r12*x10923))+((r11*x10912))+((r10*x10906))+((sj4*x10911))+(((-1.0)*x10916*x10919)));
evalcond[7]=(((r00*x10903*x10912))+(((-1.0)*x10908*x10913))+(((-1.0)*cj4*x10917))+((r02*x10918))+(((-1.0)*cj4*sj5*x10904))+(((-1.0)*r00*x10916))+(((-1.0)*x10903*x10906*x10913)));
evalcond[8]=((((-1.0)*r10*x10916))+(((-1.0)*cj5*sj6*x10905))+((x10907*x10920))+(((-1.0)*x10906*x10919))+((r12*x10918))+(((-1.0)*sj4*sj5*x10904))+(((-1.0)*r11*x10908)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10925 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x10925)==0){
continue;
}
IkReal x10924=pow(x10925,-0.5);
CheckValue<IkReal> x10926 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10926.valid){
continue;
}
IkReal gconst6=((-1.0)*(x10926.value));
IkReal gconst7=((-1.0)*r11*x10924);
IkReal gconst8=(r10*x10924);
CheckValue<IkReal> x10927 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10927.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x10927.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
CheckValue<IkReal> x10930 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10930.valid){
continue;
}
IkReal x10928=((-1.0)*(x10930.value));
IkReal x10929=x10924;
sj9=gconst7;
cj9=gconst8;
j9=x10928;
IkReal gconst6=x10928;
IkReal gconst7=((-1.0)*r11*x10929);
IkReal gconst8=(r10*x10929);
j8eval[0]=cj4;
j8eval[1]=r22;
j8eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x10931=((1.0)*gconst8);
CheckValue<IkReal> x10932 = IKatan2WithCheck(IkReal((((cj4*gconst7*r01))+((gconst7*r11*sj4))+(((-1.0)*r10*sj4*x10931))+(((-1.0)*cj4*r00*x10931)))),IkReal(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10932.valid){
continue;
}
CheckValue<IkReal> x10933=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst7*r20))+(((-1.0)*r21*x10931)))),-1);
if(!x10933.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x10932.value)+(((1.5707963267949)*(x10933.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x10934=IKcos(j8);
IkReal x10935=IKsin(j8);
IkReal x10936=(cj7*gconst8);
IkReal x10937=((1.0)*r21);
IkReal x10938=(gconst7*r10);
IkReal x10939=((1.0)*cj7);
IkReal x10940=(gconst7*sj7);
IkReal x10941=((1.0)*cj6);
IkReal x10942=((1.0)*sj4);
IkReal x10943=(sj5*sj6);
IkReal x10944=(cj5*cj6);
IkReal x10945=(gconst8*sj7);
IkReal x10946=(gconst7*r01);
IkReal x10947=((1.0)*r01);
IkReal x10948=(r10*x10935);
IkReal x10949=((1.0)*cj5*sj6);
IkReal x10950=(r11*x10935);
IkReal x10951=(r12*x10934);
IkReal x10952=(sj7*x10934);
IkReal x10953=(r00*x10935);
IkReal x10954=(r20*x10935);
IkReal x10955=(cj7*x10934);
IkReal x10956=(gconst7*x10934);
IkReal x10957=((1.0)*gconst8*x10934);
evalcond[0]=((((-1.0)*r20*x10957))+((r22*x10935))+((r21*x10956)));
evalcond[1]=(cj4+(((-1.0)*r10*x10957))+((r12*x10935))+((r11*x10956)));
evalcond[2]=(((r02*x10935))+((x10934*x10946))+(((-1.0)*x10942))+(((-1.0)*r00*x10957)));
evalcond[3]=(((r21*x10945))+((x10936*x10954))+((r22*x10955))+((r20*x10940))+(((-1.0)*x10949))+(((-1.0)*sj5*x10941))+(((-1.0)*cj7*gconst7*x10935*x10937)));
evalcond[4]=((((-1.0)*gconst7*r20*x10939))+((x10945*x10954))+((r22*x10952))+(((-1.0)*x10936*x10937))+(((-1.0)*x10935*x10937*x10940))+(((-1.0)*cj5*x10941))+x10943);
evalcond[5]=(((x10936*x10953))+(((-1.0)*x10935*x10939*x10946))+((r02*x10955))+(((-1.0)*cj4*x10943))+((r01*x10945))+((r00*x10940))+((cj4*x10944)));
evalcond[6]=(((r11*x10945))+((x10936*x10948))+((sj4*x10944))+((sj7*x10938))+(((-1.0)*x10942*x10943))+((cj7*x10951))+(((-1.0)*gconst7*x10939*x10950)));
evalcond[7]=((((-1.0)*x10936*x10947))+((x10945*x10953))+((r02*x10952))+(((-1.0)*x10935*x10940*x10947))+(((-1.0)*cj4*sj5*x10941))+(((-1.0)*gconst7*r00*x10939))+(((-1.0)*cj4*x10949)));
evalcond[8]=((((-1.0)*x10938*x10939))+(((-1.0)*cj5*sj6*x10942))+(((-1.0)*r11*x10936))+((sj7*x10951))+(((-1.0)*sj4*sj5*x10941))+((x10945*x10948))+(((-1.0)*x10940*x10950)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x10958=IKPowWithIntegerCheck(IKsign((((gconst7*r00))+((gconst8*r01)))),-1);
if(!x10958.valid){
continue;
}
CheckValue<IkReal> x10959 = IKatan2WithCheck(IkReal((((cj4*gconst7*r21))+(((-1.0)*cj4*gconst8*r20)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x10959.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10958.value)))+(x10959.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x10960=IKcos(j8);
IkReal x10961=IKsin(j8);
IkReal x10962=(cj7*gconst8);
IkReal x10963=((1.0)*r21);
IkReal x10964=(gconst7*r10);
IkReal x10965=((1.0)*cj7);
IkReal x10966=(gconst7*sj7);
IkReal x10967=((1.0)*cj6);
IkReal x10968=((1.0)*sj4);
IkReal x10969=(sj5*sj6);
IkReal x10970=(cj5*cj6);
IkReal x10971=(gconst8*sj7);
IkReal x10972=(gconst7*r01);
IkReal x10973=((1.0)*r01);
IkReal x10974=(r10*x10961);
IkReal x10975=((1.0)*cj5*sj6);
IkReal x10976=(r11*x10961);
IkReal x10977=(r12*x10960);
IkReal x10978=(sj7*x10960);
IkReal x10979=(r00*x10961);
IkReal x10980=(r20*x10961);
IkReal x10981=(cj7*x10960);
IkReal x10982=(gconst7*x10960);
IkReal x10983=((1.0)*gconst8*x10960);
evalcond[0]=(((r21*x10982))+(((-1.0)*r20*x10983))+((r22*x10961)));
evalcond[1]=(((r11*x10982))+cj4+(((-1.0)*r10*x10983))+((r12*x10961)));
evalcond[2]=(((r02*x10961))+((x10960*x10972))+(((-1.0)*r00*x10983))+(((-1.0)*x10968)));
evalcond[3]=(((r22*x10981))+((x10962*x10980))+(((-1.0)*cj7*gconst7*x10961*x10963))+(((-1.0)*sj5*x10967))+((r20*x10966))+((r21*x10971))+(((-1.0)*x10975)));
evalcond[4]=((((-1.0)*gconst7*r20*x10965))+((r22*x10978))+(((-1.0)*cj5*x10967))+(((-1.0)*x10962*x10963))+(((-1.0)*x10961*x10963*x10966))+((x10971*x10980))+x10969);
evalcond[5]=((((-1.0)*cj4*x10969))+((r01*x10971))+((r00*x10966))+((x10962*x10979))+((cj4*x10970))+((r02*x10981))+(((-1.0)*x10961*x10965*x10972)));
evalcond[6]=(((r11*x10971))+(((-1.0)*x10968*x10969))+(((-1.0)*gconst7*x10965*x10976))+((x10962*x10974))+((cj7*x10977))+((sj4*x10970))+((sj7*x10964)));
evalcond[7]=(((r02*x10978))+(((-1.0)*gconst7*r00*x10965))+(((-1.0)*cj4*x10975))+(((-1.0)*x10962*x10973))+(((-1.0)*x10961*x10966*x10973))+(((-1.0)*cj4*sj5*x10967))+((x10971*x10979)));
evalcond[8]=((((-1.0)*cj5*sj6*x10968))+(((-1.0)*x10966*x10976))+((x10971*x10974))+((sj7*x10977))+(((-1.0)*x10964*x10965))+(((-1.0)*sj4*sj5*x10967))+(((-1.0)*r11*x10962)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10985 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x10985)==0){
continue;
}
IkReal x10984=pow(x10985,-0.5);
CheckValue<IkReal> x10986 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10986.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x10986.value))));
IkReal gconst10=((1.0)*r11*x10984);
IkReal gconst11=((-1.0)*r10*x10984);
CheckValue<IkReal> x10987 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10987.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x10987.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
CheckValue<IkReal> x10990 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10990.valid){
continue;
}
IkReal x10988=((1.0)*(x10990.value));
IkReal x10989=x10984;
sj9=gconst10;
cj9=gconst11;
j9=((3.14159265)+(((-1.0)*x10988)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10988)));
IkReal gconst10=((1.0)*r11*x10989);
IkReal gconst11=((-1.0)*r10*x10989);
j8eval[0]=cj4;
j8eval[1]=r22;
j8eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[5];
CheckValue<IkReal> x10993 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10993.valid){
continue;
}
IkReal x10991=((1.0)*(x10993.value));
IkReal x10992=x10984;
sj9=gconst10;
cj9=gconst11;
j9=((3.14159265)+(((-1.0)*x10991)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10991)));
IkReal gconst10=((1.0)*r11*x10992);
IkReal gconst11=((-1.0)*r10*x10992);
j8eval[0]=0;
j8eval[1]=0;
j8eval[2]=r22;
j8eval[3]=sj4;
j8eval[4]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  || IKabs(j8eval[4]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
CheckValue<IkReal> x10996 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x10996.valid){
continue;
}
IkReal x10994=((1.0)*(x10996.value));
IkReal x10995=x10984;
sj9=gconst10;
cj9=gconst11;
j9=((3.14159265)+(((-1.0)*x10994)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x10994)));
IkReal gconst10=((1.0)*r11*x10995);
IkReal gconst11=((-1.0)*r10*x10995);
IkReal x10997=r12*r12;
IkReal x10998=(cj4*r02);
IkReal x10999=x10984;
IkReal x11000=(sj4*x10999);
j8eval[0]=((IKabs(((((-1.0)*x10998))+(((-1.0)*r12*sj4)))))+(IKabs((((x10997*x11000))+(((-1.0)*x11000))+((r12*x10998*x10999))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
IkReal x11001=(cj5*cj6);
IkReal x11002=(cj7*r02);
IkReal x11003=((2.0)*cj7);
IkReal x11004=(gconst10*r00*sj7);
IkReal x11005=(gconst11*r01*sj7);
IkReal x11006=((1.0)*sj5*sj6);
IkReal x11007=(x11001+x11005+x11004);
op[0]=((((-1.0)*x11006))+x11007+(((-1.0)*x11002)));
op[1]=((((-1.0)*gconst10*r01*x11003))+((gconst11*r00*x11003)));
op[2]=((((-1.0)*x11006))+x11002+x11007);
polyroots2(op,zeror,numroots);
IkReal j8array[2], cj8array[2], sj8array[2], tempj8array[1];
int numsolutions = 0;
for(int ij8 = 0; ij8 < numroots; ++ij8)
{
IkReal htj8 = zeror[ij8];
tempj8array[0]=((2.0)*(atan(htj8)));
for(int kj8 = 0; kj8 < 1; ++kj8)
{
j8array[numsolutions] = tempj8array[kj8];
if( j8array[numsolutions] > IKPI )
{
    j8array[numsolutions]-=IK2PI;
}
else if( j8array[numsolutions] < -IKPI )
{
    j8array[numsolutions]+=IK2PI;
}
sj8array[numsolutions] = IKsin(j8array[numsolutions]);
cj8array[numsolutions] = IKcos(j8array[numsolutions]);
numsolutions++;
}
}
bool j8valid[2]={true,true};
_nj8 = 2;
for(int ij8 = 0; ij8 < numsolutions; ++ij8)
    {
if( !j8valid[ij8] )
{
    continue;
}
    j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
htj8 = IKtan(j8/2);

_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < numsolutions; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
IkReal x11008=(gconst11*r10);
IkReal x11009=(gconst10*r11);
op[0]=((-1.0)+x11008+(((-1.0)*x11009)));
op[1]=((2.0)*r12);
op[2]=((-1.0)+x11009+(((-1.0)*x11008)));
polyroots2(op,zeror,numroots);
IkReal j8array[2], cj8array[2], sj8array[2], tempj8array[1];
int numsolutions = 0;
for(int ij8 = 0; ij8 < numroots; ++ij8)
{
IkReal htj8 = zeror[ij8];
tempj8array[0]=((2.0)*(atan(htj8)));
for(int kj8 = 0; kj8 < 1; ++kj8)
{
j8array[numsolutions] = tempj8array[kj8];
if( j8array[numsolutions] > IKPI )
{
    j8array[numsolutions]-=IK2PI;
}
else if( j8array[numsolutions] < -IKPI )
{
    j8array[numsolutions]+=IK2PI;
}
sj8array[numsolutions] = IKsin(j8array[numsolutions]);
cj8array[numsolutions] = IKcos(j8array[numsolutions]);
numsolutions++;
}
}
bool j8valid[2]={true,true};
_nj8 = 2;
for(int ij8 = 0; ij8 < numsolutions; ++ij8)
    {
if( !j8valid[ij8] )
{
    continue;
}
    j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
htj8 = IKtan(j8/2);

_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < numsolutions; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[4];
CheckValue<IkReal> x11012 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x11012.valid){
continue;
}
IkReal x11010=((1.0)*(x11012.value));
IkReal x11011=x10984;
sj9=gconst10;
cj9=gconst11;
j9=((3.14159265)+(((-1.0)*x11010)));
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11010)));
IkReal gconst10=((1.0)*r11*x11011);
IkReal gconst11=((-1.0)*r10*x11011);
j8eval[0]=0;
j8eval[1]=r22;
j8eval[2]=((1.0)+(((-1.0)*(r12*r12))));
j8eval[3]=0;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
CheckValue<IkReal> x11015 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x11015.valid){
continue;
}
IkReal x11013=((1.0)*(x11015.value));
IkReal x11014=x10984;
sj9=gconst10;
cj9=gconst11;
j9=((3.14159265)+(((-1.0)*x11013)));
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11013)));
IkReal gconst10=((1.0)*r11*x11014);
IkReal gconst11=((-1.0)*r10*x11014);
j8eval[0]=1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x11016=gconst10*gconst10;
IkReal x11017=gconst11*gconst11;
IkReal x11018=(r00*sj7);
IkReal x11019=(cj7*r01);
IkReal x11020=((1.0)*r22);
IkReal x11021=(gconst10*r21);
IkReal x11022=(cj7*r00);
IkReal x11023=(r21*x11016);
IkReal x11024=(gconst11*r01*sj7);
IkReal x11025=(r20*x11017);
IkReal x11026=((1.0)*gconst10*gconst11*r20);
CheckValue<IkReal> x11027 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj7*x11025))+((x11021*x11024))+(((-1.0)*x11018*x11026))+((x11018*x11023)))),IkReal(((((-1.0)*x11020*x11024))+(((-1.0)*gconst10*x11018*x11020)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11027.valid){
continue;
}
CheckValue<IkReal> x11028=IKPowWithIntegerCheck(IKsign((((x11022*x11025))+((x11019*x11023))+((cj7*r02*r22))+(((-1.0)*gconst11*x11021*x11022))+(((-1.0)*x11019*x11026)))),-1);
if(!x11028.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x11027.value)+(((1.5707963267949)*(x11028.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x11029=IKcos(j8);
IkReal x11030=IKsin(j8);
IkReal x11031=(gconst10*r21);
IkReal x11032=((1.0)*cj5);
IkReal x11033=(gconst11*r20);
IkReal x11034=((1.0)*sj5);
IkReal x11035=((1.0)*gconst11);
IkReal x11036=(gconst11*sj7);
IkReal x11037=((1.0)*gconst10);
IkReal x11038=(gconst11*r10);
IkReal x11039=(gconst11*r00);
IkReal x11040=(gconst10*sj7);
IkReal x11041=(sj6*x11032);
IkReal x11042=(cj6*x11034);
IkReal x11043=(sj7*x11029);
IkReal x11044=(sj7*x11030);
IkReal x11045=(r11*x11037);
IkReal x11046=(cj7*x11030);
IkReal x11047=(cj7*x11029);
IkReal x11048=(gconst10*x11029);
IkReal x11049=(x11041+x11042);
evalcond[0]=(((x11029*x11031))+(((-1.0)*x11029*x11033))+((r22*x11030)));
evalcond[1]=(((r11*x11048))+((r12*x11030))+(((-1.0)*r10*x11029*x11035)));
evalcond[2]=((-1.0)+(((-1.0)*r00*x11029*x11035))+((r01*x11048))+((r02*x11030)));
evalcond[3]=(((r01*x11036))+((r00*x11040))+(((-1.0)*r01*x11037*x11046))+((r02*x11047))+((x11039*x11046)));
evalcond[4]=((((-1.0)*cj7*r00*x11037))+(((-1.0)*r01*x11037*x11044))+((r00*x11030*x11036))+(((-1.0)*cj7*r01*x11035))+((r02*x11043)));
evalcond[5]=((((-1.0)*x11045*x11046))+(((-1.0)*sj6*x11034))+((r10*x11040))+((cj5*cj6))+((r11*x11036))+((r12*x11047))+((x11038*x11046)));
evalcond[6]=((((-1.0)*x11049))+(((-1.0)*x11031*x11046))+((r20*x11040))+((r21*x11036))+((r22*x11047))+((x11033*x11046)));
evalcond[7]=((((-1.0)*x11031*x11044))+((sj5*sj6))+((r22*x11043))+(((-1.0)*cj7*r21*x11035))+(((-1.0)*cj7*r20*x11037))+((x11033*x11044))+(((-1.0)*cj6*x11032)));
evalcond[8]=((((-1.0)*x11049))+(((-1.0)*cj7*r11*x11035))+(((-1.0)*cj7*r10*x11037))+((r10*x11030*x11036))+(((-1.0)*x11044*x11045))+((r12*x11043)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x11050=((1.0)*gconst11);
CheckValue<IkReal> x11051 = IKatan2WithCheck(IkReal((((gconst10*r11))+(((-1.0)*r10*x11050)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x11051.valid){
continue;
}
CheckValue<IkReal> x11052=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x11050)))),-1);
if(!x11052.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x11051.value)+(((1.5707963267949)*(x11052.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x11053=IKcos(j8);
IkReal x11054=IKsin(j8);
IkReal x11055=(gconst10*r21);
IkReal x11056=((1.0)*cj5);
IkReal x11057=(gconst11*r20);
IkReal x11058=((1.0)*sj5);
IkReal x11059=((1.0)*gconst11);
IkReal x11060=(gconst11*sj7);
IkReal x11061=((1.0)*gconst10);
IkReal x11062=(gconst11*r10);
IkReal x11063=(gconst11*r00);
IkReal x11064=(gconst10*sj7);
IkReal x11065=(sj6*x11056);
IkReal x11066=(cj6*x11058);
IkReal x11067=(sj7*x11053);
IkReal x11068=(sj7*x11054);
IkReal x11069=(r11*x11061);
IkReal x11070=(cj7*x11054);
IkReal x11071=(cj7*x11053);
IkReal x11072=(gconst10*x11053);
IkReal x11073=(x11066+x11065);
evalcond[0]=((((-1.0)*x11053*x11057))+((r22*x11054))+((x11053*x11055)));
evalcond[1]=(((r12*x11054))+(((-1.0)*r10*x11053*x11059))+((r11*x11072)));
evalcond[2]=((-1.0)+((r02*x11054))+(((-1.0)*r00*x11053*x11059))+((r01*x11072)));
evalcond[3]=(((r02*x11071))+((r01*x11060))+((x11063*x11070))+((r00*x11064))+(((-1.0)*r01*x11061*x11070)));
evalcond[4]=((((-1.0)*cj7*r01*x11059))+(((-1.0)*r01*x11061*x11068))+(((-1.0)*cj7*r00*x11061))+((r00*x11054*x11060))+((r02*x11067)));
evalcond[5]=(((r12*x11071))+((r10*x11064))+(((-1.0)*sj6*x11058))+((cj5*cj6))+((r11*x11060))+((x11062*x11070))+(((-1.0)*x11069*x11070)));
evalcond[6]=(((r20*x11064))+(((-1.0)*x11055*x11070))+((x11057*x11070))+((r21*x11060))+(((-1.0)*x11073))+((r22*x11071)));
evalcond[7]=((((-1.0)*x11055*x11068))+((sj5*sj6))+((r22*x11067))+(((-1.0)*cj7*r20*x11061))+(((-1.0)*cj7*r21*x11059))+((x11057*x11068))+(((-1.0)*cj6*x11056)));
evalcond[8]=((((-1.0)*x11068*x11069))+(((-1.0)*cj7*r11*x11059))+(((-1.0)*cj7*r10*x11061))+(((-1.0)*x11073))+((r12*x11067))+((r10*x11054*x11060)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x11074=IKPowWithIntegerCheck(IKsign((((gconst10*r10))+((gconst11*r11)))),-1);
if(!x11074.valid){
continue;
}
CheckValue<IkReal> x11075 = IKatan2WithCheck(IkReal((((gconst10*r21))+(((-1.0)*gconst11*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x11075.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11074.value)))+(x11075.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x11076=IKcos(j8);
IkReal x11077=IKsin(j8);
IkReal x11078=(gconst10*r21);
IkReal x11079=((1.0)*cj5);
IkReal x11080=(gconst11*r20);
IkReal x11081=((1.0)*sj5);
IkReal x11082=((1.0)*gconst11);
IkReal x11083=(gconst11*sj7);
IkReal x11084=((1.0)*gconst10);
IkReal x11085=(gconst11*r10);
IkReal x11086=(gconst11*r00);
IkReal x11087=(gconst10*sj7);
IkReal x11088=(sj6*x11079);
IkReal x11089=(cj6*x11081);
IkReal x11090=(sj7*x11076);
IkReal x11091=(sj7*x11077);
IkReal x11092=(r11*x11084);
IkReal x11093=(cj7*x11077);
IkReal x11094=(cj7*x11076);
IkReal x11095=(gconst10*x11076);
IkReal x11096=(x11089+x11088);
evalcond[0]=(((x11076*x11078))+((r22*x11077))+(((-1.0)*x11076*x11080)));
evalcond[1]=(((r12*x11077))+((r11*x11095))+(((-1.0)*r10*x11076*x11082)));
evalcond[2]=((-1.0)+((r02*x11077))+(((-1.0)*r00*x11076*x11082))+((r01*x11095)));
evalcond[3]=(((r02*x11094))+((r01*x11083))+((r00*x11087))+(((-1.0)*r01*x11084*x11093))+((x11086*x11093)));
evalcond[4]=(((r02*x11090))+((r00*x11077*x11083))+(((-1.0)*cj7*r00*x11084))+(((-1.0)*r01*x11084*x11091))+(((-1.0)*cj7*r01*x11082)));
evalcond[5]=((((-1.0)*x11092*x11093))+((r12*x11094))+((cj5*cj6))+((r10*x11087))+((x11085*x11093))+((r11*x11083))+(((-1.0)*sj6*x11081)));
evalcond[6]=(((r21*x11083))+(((-1.0)*x11096))+(((-1.0)*x11078*x11093))+((r22*x11094))+((r20*x11087))+((x11080*x11093)));
evalcond[7]=(((sj5*sj6))+(((-1.0)*cj7*r21*x11082))+(((-1.0)*cj6*x11079))+(((-1.0)*cj7*r20*x11084))+(((-1.0)*x11078*x11091))+((r22*x11090))+((x11080*x11091)));
evalcond[8]=(((r10*x11077*x11083))+(((-1.0)*x11096))+(((-1.0)*cj7*r11*x11082))+((r12*x11090))+(((-1.0)*cj7*r10*x11084))+(((-1.0)*x11091*x11092)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
CheckValue<IkReal> x11099 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x11099.valid){
continue;
}
IkReal x11097=((1.0)*(x11099.value));
IkReal x11098=x10984;
sj9=gconst10;
cj9=gconst11;
j9=((3.14159265)+(((-1.0)*x11097)));
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11097)));
IkReal gconst10=((1.0)*r11*x11098);
IkReal gconst11=((-1.0)*r10*x11098);
j8eval[0]=1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[4];
CheckValue<IkReal> x11102 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x11102.valid){
continue;
}
IkReal x11100=((1.0)*(x11102.value));
IkReal x11101=x10984;
sj9=gconst10;
cj9=gconst11;
j9=((3.14159265)+(((-1.0)*x11100)));
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11100)));
IkReal gconst10=((1.0)*r11*x11101);
IkReal gconst11=((-1.0)*r10*x11101);
j8eval[0]=0;
j8eval[1]=0;
j8eval[2]=r22;
j8eval[3]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  )
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x11103=gconst10*gconst10;
IkReal x11104=gconst11*gconst11;
IkReal x11105=(r00*sj7);
IkReal x11106=(cj7*r01);
IkReal x11107=((1.0)*r22);
IkReal x11108=(gconst10*r21);
IkReal x11109=(cj7*r00);
IkReal x11110=(r21*x11103);
IkReal x11111=(gconst11*r01*sj7);
IkReal x11112=(r20*x11104);
IkReal x11113=((1.0)*gconst10*gconst11*r20);
CheckValue<IkReal> x11114=IKPowWithIntegerCheck(IKsign((((x11106*x11110))+(((-1.0)*gconst11*x11108*x11109))+((cj7*r02*r22))+((x11109*x11112))+(((-1.0)*x11106*x11113)))),-1);
if(!x11114.valid){
continue;
}
CheckValue<IkReal> x11115 = IKatan2WithCheck(IkReal((((x11105*x11110))+(((-1.0)*x11105*x11113))+(((-1.0)*r01*sj7*x11112))+((x11108*x11111)))),IkReal(((((-1.0)*gconst10*x11105*x11107))+(((-1.0)*x11107*x11111)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11115.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11114.value)))+(x11115.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x11116=IKcos(j8);
IkReal x11117=IKsin(j8);
IkReal x11118=(sj5*sj6);
IkReal x11119=(gconst10*r21);
IkReal x11120=((1.0)*cj5);
IkReal x11121=(gconst11*sj7);
IkReal x11122=(cj6*sj5);
IkReal x11123=((1.0)*gconst11);
IkReal x11124=(cj7*gconst10);
IkReal x11125=(gconst10*sj7);
IkReal x11126=(cj7*gconst11);
IkReal x11127=(cj6*x11120);
IkReal x11128=(sj7*x11116);
IkReal x11129=(r20*x11117);
IkReal x11130=((1.0)*x11117);
IkReal x11131=(cj7*x11116);
IkReal x11132=(r10*x11117);
IkReal x11133=(r00*x11117);
IkReal x11134=(gconst10*x11116);
evalcond[0]=(((x11116*x11119))+(((-1.0)*r20*x11116*x11123))+((r22*x11117)));
evalcond[1]=((((-1.0)*r10*x11116*x11123))+((r11*x11134))+((r12*x11117)));
evalcond[2]=((1.0)+((r02*x11117))+(((-1.0)*r00*x11116*x11123))+((r01*x11134)));
evalcond[3]=((((-1.0)*r01*x11124*x11130))+((r02*x11131))+((x11126*x11133))+((r00*x11125))+((r01*x11121)));
evalcond[4]=(((x11121*x11133))+(((-1.0)*cj7*r01*x11123))+((r02*x11128))+(((-1.0)*r00*x11124))+(((-1.0)*r01*x11125*x11130)));
evalcond[5]=((((-1.0)*x11127))+((x11126*x11132))+((r10*x11125))+x11118+((r11*x11121))+((r12*x11131))+(((-1.0)*r11*x11124*x11130)));
evalcond[6]=(((r22*x11131))+((r21*x11121))+(((-1.0)*x11122))+(((-1.0)*sj6*x11120))+(((-1.0)*cj7*x11119*x11130))+((r20*x11125))+((x11126*x11129)));
evalcond[7]=(((x11121*x11132))+(((-1.0)*r11*x11125*x11130))+((cj5*sj6))+((r12*x11128))+x11122+(((-1.0)*cj7*r11*x11123))+(((-1.0)*r10*x11124)));
evalcond[8]=((((-1.0)*x11127))+(((-1.0)*cj7*r21*x11123))+(((-1.0)*sj7*x11119*x11130))+((r22*x11128))+((x11121*x11129))+(((-1.0)*r20*x11124))+x11118);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x11135=((1.0)*gconst11);
CheckValue<IkReal> x11136 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x11135))+((gconst10*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x11136.valid){
continue;
}
CheckValue<IkReal> x11137=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r10))+(((-1.0)*r11*x11135)))),-1);
if(!x11137.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x11136.value)+(((1.5707963267949)*(x11137.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x11138=IKcos(j8);
IkReal x11139=IKsin(j8);
IkReal x11140=(sj5*sj6);
IkReal x11141=(gconst10*r21);
IkReal x11142=((1.0)*cj5);
IkReal x11143=(gconst11*sj7);
IkReal x11144=(cj6*sj5);
IkReal x11145=((1.0)*gconst11);
IkReal x11146=(cj7*gconst10);
IkReal x11147=(gconst10*sj7);
IkReal x11148=(cj7*gconst11);
IkReal x11149=(cj6*x11142);
IkReal x11150=(sj7*x11138);
IkReal x11151=(r20*x11139);
IkReal x11152=((1.0)*x11139);
IkReal x11153=(cj7*x11138);
IkReal x11154=(r10*x11139);
IkReal x11155=(r00*x11139);
IkReal x11156=(gconst10*x11138);
evalcond[0]=(((r22*x11139))+(((-1.0)*r20*x11138*x11145))+((x11138*x11141)));
evalcond[1]=(((r11*x11156))+((r12*x11139))+(((-1.0)*r10*x11138*x11145)));
evalcond[2]=((1.0)+((r02*x11139))+((r01*x11156))+(((-1.0)*r00*x11138*x11145)));
evalcond[3]=(((r01*x11143))+((r00*x11147))+((r02*x11153))+(((-1.0)*r01*x11146*x11152))+((x11148*x11155)));
evalcond[4]=(((x11143*x11155))+((r02*x11150))+(((-1.0)*cj7*r01*x11145))+(((-1.0)*r00*x11146))+(((-1.0)*r01*x11147*x11152)));
evalcond[5]=((((-1.0)*r11*x11146*x11152))+((r11*x11143))+x11140+((r12*x11153))+((r10*x11147))+((x11148*x11154))+(((-1.0)*x11149)));
evalcond[6]=((((-1.0)*cj7*x11141*x11152))+((r22*x11153))+((r21*x11143))+(((-1.0)*x11144))+(((-1.0)*sj6*x11142))+((r20*x11147))+((x11148*x11151)));
evalcond[7]=((((-1.0)*r10*x11146))+(((-1.0)*r11*x11147*x11152))+((x11143*x11154))+((cj5*sj6))+(((-1.0)*cj7*r11*x11145))+x11144+((r12*x11150)));
evalcond[8]=((((-1.0)*cj7*r21*x11145))+((r22*x11150))+((x11143*x11151))+(((-1.0)*r20*x11146))+(((-1.0)*sj7*x11141*x11152))+x11140+(((-1.0)*x11149)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x11157 = IKatan2WithCheck(IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x11157.valid){
continue;
}
CheckValue<IkReal> x11158=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11158.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x11157.value)+(((1.5707963267949)*(x11158.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x11159=IKcos(j8);
IkReal x11160=IKsin(j8);
IkReal x11161=(sj5*sj6);
IkReal x11162=(gconst10*r21);
IkReal x11163=((1.0)*cj5);
IkReal x11164=(gconst11*sj7);
IkReal x11165=(cj6*sj5);
IkReal x11166=((1.0)*gconst11);
IkReal x11167=(cj7*gconst10);
IkReal x11168=(gconst10*sj7);
IkReal x11169=(cj7*gconst11);
IkReal x11170=(cj6*x11163);
IkReal x11171=(sj7*x11159);
IkReal x11172=(r20*x11160);
IkReal x11173=((1.0)*x11160);
IkReal x11174=(cj7*x11159);
IkReal x11175=(r10*x11160);
IkReal x11176=(r00*x11160);
IkReal x11177=(gconst10*x11159);
evalcond[0]=((((-1.0)*r20*x11159*x11166))+((x11159*x11162))+((r22*x11160)));
evalcond[1]=(((r12*x11160))+((r11*x11177))+(((-1.0)*r10*x11159*x11166)));
evalcond[2]=((1.0)+(((-1.0)*r00*x11159*x11166))+((r01*x11177))+((r02*x11160)));
evalcond[3]=(((r01*x11164))+((r00*x11168))+((x11169*x11176))+(((-1.0)*r01*x11167*x11173))+((r02*x11174)));
evalcond[4]=((((-1.0)*cj7*r01*x11166))+(((-1.0)*r01*x11168*x11173))+((r02*x11171))+(((-1.0)*r00*x11167))+((x11164*x11176)));
evalcond[5]=(((r12*x11174))+((x11169*x11175))+((r11*x11164))+(((-1.0)*x11170))+x11161+(((-1.0)*r11*x11167*x11173))+((r10*x11168)));
evalcond[6]=(((r20*x11168))+((x11169*x11172))+(((-1.0)*x11165))+(((-1.0)*sj6*x11163))+(((-1.0)*cj7*x11162*x11173))+((r22*x11174))+((r21*x11164)));
evalcond[7]=(((r12*x11171))+(((-1.0)*cj7*r11*x11166))+((cj5*sj6))+x11165+(((-1.0)*r11*x11168*x11173))+(((-1.0)*r10*x11167))+((x11164*x11175)));
evalcond[8]=((((-1.0)*sj7*x11162*x11173))+(((-1.0)*r20*x11167))+(((-1.0)*x11170))+x11161+((r22*x11171))+(((-1.0)*cj7*r21*x11166))+((x11164*x11172)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[2];
CheckValue<IkReal> x11180 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x11180.valid){
continue;
}
IkReal x11178=((1.0)*(x11180.value));
IkReal x11179=((-1.0)*px);
sj9=gconst10;
cj9=gconst11;
j9=((3.14159265)+(((-1.0)*x11178)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11179);
rxp1_1=(px*r21);
rxp1_2=(r11*x11179);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11178)));
IkReal gconst10=((1.0)*r11);
IkReal gconst11=((-1.0)*r10);
j8eval[0]=r02;
j8eval[1]=1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
CheckValue<IkReal> x11183 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x11183.valid){
continue;
}
IkReal x11181=((1.0)*(x11183.value));
IkReal x11182=((-1.0)*px);
sj9=gconst10;
cj9=gconst11;
j9=((3.14159265)+(((-1.0)*x11181)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11182);
rxp1_1=(px*r21);
rxp1_2=(r11*x11182);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11181)));
IkReal gconst10=((1.0)*r11);
IkReal gconst11=((-1.0)*r10);
IkReal x11184=((1.0)*cj7);
j8eval[0]=((((-1.0)*r10*r20*x11184))+(((-1.0)*r11*r21*x11184)));
j8eval[1]=1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
CheckValue<IkReal> x11187 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x11187.valid){
continue;
}
IkReal x11185=((1.0)*(x11187.value));
IkReal x11186=((-1.0)*px);
sj9=gconst10;
cj9=gconst11;
j9=((3.14159265)+(((-1.0)*x11185)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11186);
rxp1_1=(px*r21);
rxp1_2=(r11*x11186);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11185)));
IkReal gconst10=((1.0)*r11);
IkReal gconst11=((-1.0)*r10);
j8eval[0]=r02;
j8eval[1]=sj7;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
CheckValue<IkReal> x11190 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x11190.valid){
continue;
}
IkReal x11188=((1.0)*(x11190.value));
IkReal x11189=((-1.0)*px);
sj9=gconst10;
cj9=gconst11;
j9=((3.14159265)+(((-1.0)*x11188)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11189);
rxp1_1=(px*r21);
rxp1_2=(r11*x11189);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj7=0;
cj7=1.0;
j7=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11188)));
IkReal gconst10=((1.0)*r11);
IkReal gconst11=((-1.0)*r10);
j8eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x11192=IKPowWithIntegerCheck((((gconst11*r20))+(((-1.0)*gconst10*r21))),-1);
if(!x11192.valid){
continue;
}
IkReal x11191=x11192.value;
sj8array[0]=(((cj5*sj6*x11191))+((cj6*sj5*x11191)));
if( sj8array[0] >= -1-IKFAST_SINCOS_THRESH && sj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKasin(sj8array[0]);
    cj8array[0] = IKcos(j8array[0]);
    sj8array[1] = sj8array[0];
    j8array[1] = j8array[0] > 0 ? (IKPI-j8array[0]) : (-IKPI-j8array[0]);
    cj8array[1] = -cj8array[0];
}
else if( isnan(sj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[3];
IkReal x11193=IKcos(j8);
IkReal x11194=(gconst10*x11193);
IkReal x11195=((1.0)*gconst11*x11193);
evalcond[0]=(r02*x11193);
evalcond[1]=(((r21*x11194))+(((-1.0)*r20*x11195)));
evalcond[2]=(((r11*x11194))+(((-1.0)*r10*x11195)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
CheckValue<IkReal> x11198 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x11198.valid){
continue;
}
IkReal x11196=((1.0)*(x11198.value));
IkReal x11197=((-1.0)*px);
sj9=gconst10;
cj9=gconst11;
j9=((3.14159265)+(((-1.0)*x11196)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11197);
rxp1_1=(px*r21);
rxp1_2=(r11*x11197);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11196)));
IkReal gconst10=((1.0)*r11);
IkReal gconst11=((-1.0)*r10);
j8eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x11200=IKPowWithIntegerCheck((((gconst10*r21))+(((-1.0)*gconst11*r20))),-1);
if(!x11200.valid){
continue;
}
IkReal x11199=x11200.value;
sj8array[0]=(((cj5*sj6*x11199))+((cj6*sj5*x11199)));
if( sj8array[0] >= -1-IKFAST_SINCOS_THRESH && sj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKasin(sj8array[0]);
    cj8array[0] = IKcos(j8array[0]);
    sj8array[1] = sj8array[0];
    j8array[1] = j8array[0] > 0 ? (IKPI-j8array[0]) : (-IKPI-j8array[0]);
    cj8array[1] = -cj8array[0];
}
else if( isnan(sj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[3];
IkReal x11201=IKcos(j8);
IkReal x11202=(gconst10*x11201);
IkReal x11203=((1.0)*gconst11*x11201);
evalcond[0]=((-1.0)*r02*x11201);
evalcond[1]=(((r21*x11202))+(((-1.0)*r20*x11203)));
evalcond[2]=((((-1.0)*r10*x11203))+((r11*x11202)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
CheckValue<IkReal> x11206 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x11206.valid){
continue;
}
IkReal x11204=((1.0)*(x11206.value));
IkReal x11205=((-1.0)*px);
sj9=gconst10;
cj9=gconst11;
j9=((3.14159265)+(((-1.0)*x11204)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11205);
rxp1_1=(px*r21);
rxp1_2=(r11*x11205);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj7=1.0;
cj7=0;
j7=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11204)));
IkReal gconst10=((1.0)*r11);
IkReal gconst11=((-1.0)*r10);
j8eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x11208=IKPowWithIntegerCheck((((gconst11*r20))+(((-1.0)*gconst10*r21))),-1);
if(!x11208.valid){
continue;
}
IkReal x11207=x11208.value;
sj8array[0]=(((cj5*cj6*x11207))+(((-1.0)*sj5*sj6*x11207)));
if( sj8array[0] >= -1-IKFAST_SINCOS_THRESH && sj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKasin(sj8array[0]);
    cj8array[0] = IKcos(j8array[0]);
    sj8array[1] = sj8array[0];
    j8array[1] = j8array[0] > 0 ? (IKPI-j8array[0]) : (-IKPI-j8array[0]);
    cj8array[1] = -cj8array[0];
}
else if( isnan(sj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[3];
IkReal x11209=IKcos(j8);
IkReal x11210=(gconst10*x11209);
IkReal x11211=((1.0)*gconst11*x11209);
evalcond[0]=(r02*x11209);
evalcond[1]=(((r21*x11210))+(((-1.0)*r20*x11211)));
evalcond[2]=(((r11*x11210))+(((-1.0)*r10*x11211)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
CheckValue<IkReal> x11214 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x11214.valid){
continue;
}
IkReal x11212=((1.0)*(x11214.value));
IkReal x11213=((-1.0)*px);
sj9=gconst10;
cj9=gconst11;
j9=((3.14159265)+(((-1.0)*x11212)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11213);
rxp1_1=(px*r21);
rxp1_2=(r11*x11213);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11212)));
IkReal gconst10=((1.0)*r11);
IkReal gconst11=((-1.0)*r10);
j8eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x11216=IKPowWithIntegerCheck((((gconst10*r21))+(((-1.0)*gconst11*r20))),-1);
if(!x11216.valid){
continue;
}
IkReal x11215=x11216.value;
sj8array[0]=(((cj5*cj6*x11215))+(((-1.0)*sj5*sj6*x11215)));
if( sj8array[0] >= -1-IKFAST_SINCOS_THRESH && sj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKasin(sj8array[0]);
    cj8array[0] = IKcos(j8array[0]);
    sj8array[1] = sj8array[0];
    j8array[1] = j8array[0] > 0 ? (IKPI-j8array[0]) : (-IKPI-j8array[0]);
    cj8array[1] = -cj8array[0];
}
else if( isnan(sj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[3];
IkReal x11217=IKcos(j8);
IkReal x11218=(gconst10*x11217);
IkReal x11219=((1.0)*gconst11*x11217);
evalcond[0]=((-1.0)*r02*x11217);
evalcond[1]=(((r21*x11218))+(((-1.0)*r20*x11219)));
evalcond[2]=(((r11*x11218))+(((-1.0)*r10*x11219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x11221=IKPowWithIntegerCheck(r02,-1);
if(!x11221.valid){
continue;
}
IkReal x11220=x11221.value;
CheckValue<IkReal> x11222=IKPowWithIntegerCheck(sj7,-1);
if(!x11222.valid){
continue;
}
if( IKabs((sj4*x11220)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x11220*(x11222.value)*((((cj4*cj5*sj6))+((cj4*cj6*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj4*x11220))+IKsqr((x11220*(x11222.value)*((((cj4*cj5*sj6))+((cj4*cj6*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((sj4*x11220), (x11220*(x11222.value)*((((cj4*cj5*sj6))+((cj4*cj6*sj5))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x11223=IKcos(j8);
IkReal x11224=IKsin(j8);
IkReal x11225=(gconst10*r21);
IkReal x11226=((1.0)*cj6);
IkReal x11227=((1.0)*sj4);
IkReal x11228=(sj5*sj6);
IkReal x11229=(gconst11*r21);
IkReal x11230=((1.0)*cj7);
IkReal x11231=(gconst10*r10);
IkReal x11232=(gconst10*r11);
IkReal x11233=(gconst11*r11);
IkReal x11234=(cj5*cj6);
IkReal x11235=(gconst11*r10);
IkReal x11236=(gconst10*r20);
IkReal x11237=(gconst11*r20);
IkReal x11238=((1.0)*cj5*sj6);
IkReal x11239=(r02*x11223);
IkReal x11240=((1.0)*x11223);
IkReal x11241=(cj7*x11224);
IkReal x11242=(gconst11*sj7*x11224);
IkReal x11243=((1.0)*sj7*x11224);
evalcond[0]=((((-1.0)*x11227))+((r02*x11224)));
evalcond[1]=(((x11223*x11225))+(((-1.0)*x11237*x11240)));
evalcond[2]=(cj4+((x11223*x11232))+(((-1.0)*x11235*x11240)));
evalcond[3]=(((cj4*x11234))+((cj7*x11239))+(((-1.0)*cj4*x11228)));
evalcond[4]=(((sj7*x11239))+(((-1.0)*cj4*sj5*x11226))+(((-1.0)*cj4*x11238)));
evalcond[5]=(((sj7*x11236))+(((-1.0)*sj5*x11226))+((sj7*x11229))+(((-1.0)*x11238))+((x11237*x11241))+(((-1.0)*x11224*x11225*x11230)));
evalcond[6]=((((-1.0)*x11230*x11236))+x11228+(((-1.0)*x11225*x11243))+((sj7*x11224*x11237))+(((-1.0)*x11229*x11230))+(((-1.0)*cj5*x11226)));
evalcond[7]=(((sj7*x11233))+((sj7*x11231))+((sj4*x11234))+(((-1.0)*x11224*x11230*x11232))+((x11235*x11241))+(((-1.0)*x11227*x11228)));
evalcond[8]=((((-1.0)*x11230*x11233))+(((-1.0)*x11230*x11231))+(((-1.0)*x11232*x11243))+((sj7*x11224*x11235))+(((-1.0)*sj4*sj5*x11226))+(((-1.0)*cj5*sj6*x11227)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x11244=((1.0)*r21);
CheckValue<IkReal> x11245=IKPowWithIntegerCheck(((((-1.0)*cj7*gconst10*x11244))+((cj7*gconst11*r20))),-1);
if(!x11245.valid){
continue;
}
CheckValue<IkReal> x11246=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x11246.valid){
continue;
}
if( IKabs(((x11245.value)*((((cj6*sj5))+(((-1.0)*gconst10*r20*sj7))+((cj5*sj6))+(((-1.0)*gconst11*sj7*x11244)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj4*(x11246.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11245.value)*((((cj6*sj5))+(((-1.0)*gconst10*r20*sj7))+((cj5*sj6))+(((-1.0)*gconst11*sj7*x11244))))))+IKsqr(((-1.0)*cj4*(x11246.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((x11245.value)*((((cj6*sj5))+(((-1.0)*gconst10*r20*sj7))+((cj5*sj6))+(((-1.0)*gconst11*sj7*x11244))))), ((-1.0)*cj4*(x11246.value)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x11247=IKcos(j8);
IkReal x11248=IKsin(j8);
IkReal x11249=(gconst10*r21);
IkReal x11250=((1.0)*cj6);
IkReal x11251=((1.0)*sj4);
IkReal x11252=(sj5*sj6);
IkReal x11253=(gconst11*r21);
IkReal x11254=((1.0)*cj7);
IkReal x11255=(gconst10*r10);
IkReal x11256=(gconst10*r11);
IkReal x11257=(gconst11*r11);
IkReal x11258=(cj5*cj6);
IkReal x11259=(gconst11*r10);
IkReal x11260=(gconst10*r20);
IkReal x11261=(gconst11*r20);
IkReal x11262=((1.0)*cj5*sj6);
IkReal x11263=(r02*x11247);
IkReal x11264=((1.0)*x11247);
IkReal x11265=(cj7*x11248);
IkReal x11266=(gconst11*sj7*x11248);
IkReal x11267=((1.0)*sj7*x11248);
evalcond[0]=((((-1.0)*x11251))+((r02*x11248)));
evalcond[1]=(((x11247*x11249))+(((-1.0)*x11261*x11264)));
evalcond[2]=(((x11247*x11256))+cj4+(((-1.0)*x11259*x11264)));
evalcond[3]=(((cj4*x11258))+(((-1.0)*cj4*x11252))+((cj7*x11263)));
evalcond[4]=((((-1.0)*cj4*sj5*x11250))+(((-1.0)*cj4*x11262))+((sj7*x11263)));
evalcond[5]=(((sj7*x11253))+(((-1.0)*sj5*x11250))+((x11261*x11265))+(((-1.0)*x11262))+(((-1.0)*x11248*x11249*x11254))+((sj7*x11260)));
evalcond[6]=(x11252+(((-1.0)*x11254*x11260))+(((-1.0)*x11249*x11267))+((sj7*x11248*x11261))+(((-1.0)*cj5*x11250))+(((-1.0)*x11253*x11254)));
evalcond[7]=(((sj7*x11257))+((sj7*x11255))+(((-1.0)*x11248*x11254*x11256))+(((-1.0)*x11251*x11252))+((sj4*x11258))+((x11259*x11265)));
evalcond[8]=((((-1.0)*sj4*sj5*x11250))+(((-1.0)*x11256*x11267))+(((-1.0)*cj5*sj6*x11251))+((sj7*x11248*x11259))+(((-1.0)*x11254*x11255))+(((-1.0)*x11254*x11257)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x11268=IKPowWithIntegerCheck(r02,-1);
if(!x11268.valid){
continue;
}
CheckValue<IkReal> x11269=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x11269.valid){
continue;
}
if( IKabs((sj4*(x11268.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj4*(x11269.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj4*(x11268.value)))+IKsqr(((-1.0)*cj4*(x11269.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((sj4*(x11268.value)), ((-1.0)*cj4*(x11269.value)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x11270=IKcos(j8);
IkReal x11271=IKsin(j8);
IkReal x11272=(gconst10*r21);
IkReal x11273=((1.0)*cj6);
IkReal x11274=((1.0)*sj4);
IkReal x11275=(sj5*sj6);
IkReal x11276=(gconst11*r21);
IkReal x11277=((1.0)*cj7);
IkReal x11278=(gconst10*r10);
IkReal x11279=(gconst10*r11);
IkReal x11280=(gconst11*r11);
IkReal x11281=(cj5*cj6);
IkReal x11282=(gconst11*r10);
IkReal x11283=(gconst10*r20);
IkReal x11284=(gconst11*r20);
IkReal x11285=((1.0)*cj5*sj6);
IkReal x11286=(r02*x11270);
IkReal x11287=((1.0)*x11270);
IkReal x11288=(cj7*x11271);
IkReal x11289=(gconst11*sj7*x11271);
IkReal x11290=((1.0)*sj7*x11271);
evalcond[0]=((((-1.0)*x11274))+((r02*x11271)));
evalcond[1]=((((-1.0)*x11284*x11287))+((x11270*x11272)));
evalcond[2]=(cj4+(((-1.0)*x11282*x11287))+((x11270*x11279)));
evalcond[3]=(((cj7*x11286))+(((-1.0)*cj4*x11275))+((cj4*x11281)));
evalcond[4]=(((sj7*x11286))+(((-1.0)*cj4*x11285))+(((-1.0)*cj4*sj5*x11273)));
evalcond[5]=(((x11284*x11288))+(((-1.0)*x11271*x11272*x11277))+((sj7*x11283))+(((-1.0)*sj5*x11273))+(((-1.0)*x11285))+((sj7*x11276)));
evalcond[6]=(x11275+((sj7*x11271*x11284))+(((-1.0)*cj5*x11273))+(((-1.0)*x11272*x11290))+(((-1.0)*x11276*x11277))+(((-1.0)*x11277*x11283)));
evalcond[7]=(((sj7*x11280))+(((-1.0)*x11271*x11277*x11279))+(((-1.0)*x11274*x11275))+((sj4*x11281))+((sj7*x11278))+((x11282*x11288)));
evalcond[8]=((((-1.0)*sj4*sj5*x11273))+(((-1.0)*cj5*sj6*x11274))+((sj7*x11271*x11282))+(((-1.0)*x11279*x11290))+(((-1.0)*x11277*x11278))+(((-1.0)*x11277*x11280)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
CheckValue<IkReal> x11293 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x11293.valid){
continue;
}
IkReal x11291=((1.0)*(x11293.value));
IkReal x11292=x10984;
sj9=gconst10;
cj9=gconst11;
j9=((3.14159265)+(((-1.0)*x11291)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11291)));
IkReal gconst10=((1.0)*r11*x11292);
IkReal gconst11=((-1.0)*r10*x11292);
IkReal x11294=r12*r12;
IkReal x11295=(cj4*r02);
IkReal x11296=x10984;
IkReal x11297=(sj4*x11296);
j8eval[0]=((IKabs(((((-1.0)*x11295))+(((-1.0)*r12*sj4)))))+(IKabs(((((-1.0)*x11297))+((r12*x11295*x11296))+((x11294*x11297))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x11298=(cj5*sj6);
IkReal x11299=((1.0)*r12);
IkReal x11300=(cj7*r20);
IkReal x11301=(gconst10*gconst11);
IkReal x11302=(cj7*r21);
IkReal x11303=(cj6*sj5);
IkReal x11304=((1.0)*x11302);
IkReal x11305=(gconst11*r21*sj7);
IkReal x11306=(gconst10*r20*sj7);
CheckValue<IkReal> x11307=IKPowWithIntegerCheck((((gconst11*x11300))+(((-1.0)*gconst10*x11304))),-1);
if(!x11307.valid){
continue;
}
CheckValue<IkReal> x11308=IKPowWithIntegerCheck(((((-1.0)*r10*x11300*(gconst11*gconst11)))+(((-1.0)*r11*x11304*(gconst10*gconst10)))+((r10*x11301*x11302))+((r11*x11300*x11301))),-1);
if(!x11308.valid){
continue;
}
if( IKabs(((x11307.value)*((x11298+x11303+(((-1.0)*x11305))+(((-1.0)*x11306)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11308.value)*(((((-1.0)*x11299*x11303))+(((-1.0)*x11298*x11299))+(((-1.0)*cj4*gconst11*x11300))+((r12*x11305))+((r12*x11306))+((cj4*gconst10*x11302)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11307.value)*((x11298+x11303+(((-1.0)*x11305))+(((-1.0)*x11306))))))+IKsqr(((x11308.value)*(((((-1.0)*x11299*x11303))+(((-1.0)*x11298*x11299))+(((-1.0)*cj4*gconst11*x11300))+((r12*x11305))+((r12*x11306))+((cj4*gconst10*x11302))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((x11307.value)*((x11298+x11303+(((-1.0)*x11305))+(((-1.0)*x11306))))), ((x11308.value)*(((((-1.0)*x11299*x11303))+(((-1.0)*x11298*x11299))+(((-1.0)*cj4*gconst11*x11300))+((r12*x11305))+((r12*x11306))+((cj4*gconst10*x11302))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x11309=IKcos(j8);
IkReal x11310=IKsin(j8);
IkReal x11311=(gconst10*r21);
IkReal x11312=(r20*sj7);
IkReal x11313=((1.0)*cj6);
IkReal x11314=((1.0)*sj4);
IkReal x11315=(r00*sj7);
IkReal x11316=(sj5*sj6);
IkReal x11317=(gconst11*sj7);
IkReal x11318=(gconst10*r01);
IkReal x11319=((1.0)*cj4);
IkReal x11320=(cj7*r00);
IkReal x11321=((1.0)*cj7);
IkReal x11322=(gconst10*r10);
IkReal x11323=(cj5*sj6);
IkReal x11324=(gconst10*r11);
IkReal x11325=(cj5*cj6);
IkReal x11326=(sj7*x11309);
IkReal x11327=(gconst11*x11310);
IkReal x11328=(gconst11*x11321);
IkReal x11329=(cj7*x11309);
IkReal x11330=((1.0)*sj7*x11310);
IkReal x11331=((1.0)*gconst11*x11309);
evalcond[0]=((((-1.0)*r20*x11331))+((x11309*x11311)));
evalcond[1]=(cj4+((x11309*x11324))+((r12*x11310))+(((-1.0)*r10*x11331)));
evalcond[2]=((((-1.0)*r00*x11331))+((r02*x11310))+((x11309*x11318))+(((-1.0)*x11314)));
evalcond[3]=(((r21*x11317))+((gconst10*x11312))+((cj7*r20*x11327))+(((-1.0)*sj5*x11313))+(((-1.0)*x11323))+(((-1.0)*x11310*x11311*x11321)));
evalcond[4]=((((-1.0)*x11311*x11330))+x11316+(((-1.0)*r21*x11328))+(((-1.0)*cj5*x11313))+((x11312*x11327))+(((-1.0)*gconst10*r20*x11321)));
evalcond[5]=(((x11320*x11327))+(((-1.0)*x11310*x11318*x11321))+((gconst10*x11315))+((r02*x11329))+((cj4*x11325))+(((-1.0)*x11316*x11319))+((r01*x11317)));
evalcond[6]=(((r11*x11317))+((sj4*x11325))+(((-1.0)*x11310*x11321*x11324))+((sj7*x11322))+(((-1.0)*x11314*x11316))+((cj7*r10*x11327))+((r12*x11329)));
evalcond[7]=((((-1.0)*x11319*x11323))+((r02*x11326))+((x11315*x11327))+(((-1.0)*x11318*x11330))+(((-1.0)*gconst10*x11320))+(((-1.0)*cj4*sj5*x11313))+(((-1.0)*r01*x11328)));
evalcond[8]=((((-1.0)*x11324*x11330))+((r10*x11310*x11317))+(((-1.0)*r11*x11328))+(((-1.0)*x11314*x11323))+(((-1.0)*x11321*x11322))+((r12*x11326))+(((-1.0)*sj4*sj5*x11313)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x11332=((1.0)*sj4);
IkReal x11333=((1.0)*cj4);
CheckValue<IkReal> x11334=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*gconst11*r21)))),-1);
if(!x11334.valid){
continue;
}
CheckValue<IkReal> x11335 = IKatan2WithCheck(IkReal(((((-1.0)*gconst11*r00*x11333))+(((-1.0)*gconst11*r10*x11332))+((gconst10*r11*sj4))+((cj4*gconst10*r01)))),IkReal(((((-1.0)*r12*x11332))+(((-1.0)*r02*x11333)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11335.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11334.value)))+(x11335.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x11336=IKcos(j8);
IkReal x11337=IKsin(j8);
IkReal x11338=(gconst10*r21);
IkReal x11339=(r20*sj7);
IkReal x11340=((1.0)*cj6);
IkReal x11341=((1.0)*sj4);
IkReal x11342=(r00*sj7);
IkReal x11343=(sj5*sj6);
IkReal x11344=(gconst11*sj7);
IkReal x11345=(gconst10*r01);
IkReal x11346=((1.0)*cj4);
IkReal x11347=(cj7*r00);
IkReal x11348=((1.0)*cj7);
IkReal x11349=(gconst10*r10);
IkReal x11350=(cj5*sj6);
IkReal x11351=(gconst10*r11);
IkReal x11352=(cj5*cj6);
IkReal x11353=(sj7*x11336);
IkReal x11354=(gconst11*x11337);
IkReal x11355=(gconst11*x11348);
IkReal x11356=(cj7*x11336);
IkReal x11357=((1.0)*sj7*x11337);
IkReal x11358=((1.0)*gconst11*x11336);
evalcond[0]=((((-1.0)*r20*x11358))+((x11336*x11338)));
evalcond[1]=(((x11336*x11351))+cj4+((r12*x11337))+(((-1.0)*r10*x11358)));
evalcond[2]=((((-1.0)*r00*x11358))+(((-1.0)*x11341))+((x11336*x11345))+((r02*x11337)));
evalcond[3]=(((cj7*r20*x11354))+(((-1.0)*x11337*x11338*x11348))+((gconst10*x11339))+(((-1.0)*x11350))+(((-1.0)*sj5*x11340))+((r21*x11344)));
evalcond[4]=(((x11339*x11354))+(((-1.0)*r21*x11355))+x11343+(((-1.0)*x11338*x11357))+(((-1.0)*gconst10*r20*x11348))+(((-1.0)*cj5*x11340)));
evalcond[5]=((((-1.0)*x11343*x11346))+((r02*x11356))+((cj4*x11352))+(((-1.0)*x11337*x11345*x11348))+((gconst10*x11342))+((x11347*x11354))+((r01*x11344)));
evalcond[6]=(((r11*x11344))+((r12*x11356))+((cj7*r10*x11354))+((sj7*x11349))+(((-1.0)*x11337*x11348*x11351))+(((-1.0)*x11341*x11343))+((sj4*x11352)));
evalcond[7]=(((r02*x11353))+(((-1.0)*x11346*x11350))+(((-1.0)*cj4*sj5*x11340))+((x11342*x11354))+(((-1.0)*x11345*x11357))+(((-1.0)*gconst10*x11347))+(((-1.0)*r01*x11355)));
evalcond[8]=((((-1.0)*x11348*x11349))+((r12*x11353))+(((-1.0)*sj4*sj5*x11340))+(((-1.0)*r11*x11355))+(((-1.0)*x11351*x11357))+((r10*x11337*x11344))+(((-1.0)*x11341*x11350)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x11359=((1.0)*sj4);
IkReal x11360=((1.0)*cj4);
CheckValue<IkReal> x11361 = IKatan2WithCheck(IkReal(((((-1.0)*gconst11*r10*x11359))+(((-1.0)*gconst11*r00*x11360))+((gconst10*r11*sj4))+((cj4*gconst10*r01)))),IkReal(((((-1.0)*r12*x11359))+(((-1.0)*r02*x11360)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11361.valid){
continue;
}
CheckValue<IkReal> x11362=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*gconst11*r21)))),-1);
if(!x11362.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x11361.value)+(((1.5707963267949)*(x11362.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x11363=IKcos(j8);
IkReal x11364=IKsin(j8);
IkReal x11365=(gconst10*r21);
IkReal x11366=(r20*sj7);
IkReal x11367=((1.0)*cj6);
IkReal x11368=((1.0)*sj4);
IkReal x11369=(r00*sj7);
IkReal x11370=(gconst11*sj7);
IkReal x11371=(sj5*sj6);
IkReal x11372=(gconst10*r01);
IkReal x11373=(cj5*cj6);
IkReal x11374=((1.0)*cj4);
IkReal x11375=(cj7*r00);
IkReal x11376=((1.0)*cj7);
IkReal x11377=(gconst10*r10);
IkReal x11378=(cj5*sj6);
IkReal x11379=(gconst10*r11);
IkReal x11380=(sj7*x11363);
IkReal x11381=(gconst11*x11364);
IkReal x11382=(gconst11*x11376);
IkReal x11383=(cj7*x11363);
IkReal x11384=((1.0)*sj7*x11364);
IkReal x11385=((1.0)*gconst11*x11363);
evalcond[0]=(((r22*x11364))+(((-1.0)*r20*x11385))+((x11363*x11365)));
evalcond[1]=(cj4+(((-1.0)*r10*x11385))+((r12*x11364))+((x11363*x11379)));
evalcond[2]=((((-1.0)*x11368))+((r02*x11364))+((x11363*x11372))+(((-1.0)*r00*x11385)));
evalcond[3]=(((cj7*r20*x11381))+(((-1.0)*x11378))+((gconst10*x11366))+((r21*x11370))+(((-1.0)*x11364*x11365*x11376))+(((-1.0)*sj5*x11367))+((r22*x11383)));
evalcond[4]=((((-1.0)*x11365*x11384))+(((-1.0)*cj5*x11367))+x11371+(((-1.0)*r21*x11382))+(((-1.0)*gconst10*r20*x11376))+((x11366*x11381))+((r22*x11380)));
evalcond[5]=(((r02*x11383))+((x11375*x11381))+((gconst10*x11369))+((r01*x11370))+((cj4*x11373))+(((-1.0)*x11364*x11372*x11376))+(((-1.0)*x11371*x11374)));
evalcond[6]=(((r12*x11383))+((sj7*x11377))+((sj4*x11373))+(((-1.0)*x11368*x11371))+(((-1.0)*x11364*x11376*x11379))+((r11*x11370))+((cj7*r10*x11381)));
evalcond[7]=(((r02*x11380))+(((-1.0)*x11372*x11384))+(((-1.0)*cj4*sj5*x11367))+(((-1.0)*x11374*x11378))+(((-1.0)*gconst10*x11375))+((x11369*x11381))+(((-1.0)*r01*x11382)));
evalcond[8]=(((r12*x11380))+(((-1.0)*x11379*x11384))+((r10*x11364*x11370))+(((-1.0)*x11368*x11378))+(((-1.0)*r11*x11382))+(((-1.0)*sj4*sj5*x11367))+(((-1.0)*x11376*x11377)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x11386 = IKatan2WithCheck(IkReal(((((-1.0)*gconst11*r20*sj4))+((gconst10*r21*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x11386.valid){
continue;
}
CheckValue<IkReal> x11387=IKPowWithIntegerCheck(IKsign((((gconst10*r10))+((gconst11*r11)))),-1);
if(!x11387.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x11386.value)+(((1.5707963267949)*(x11387.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x11388=IKcos(j8);
IkReal x11389=IKsin(j8);
IkReal x11390=(gconst10*r21);
IkReal x11391=(r20*sj7);
IkReal x11392=((1.0)*cj6);
IkReal x11393=((1.0)*sj4);
IkReal x11394=(r00*sj7);
IkReal x11395=(gconst11*sj7);
IkReal x11396=(sj5*sj6);
IkReal x11397=(gconst10*r01);
IkReal x11398=(cj5*cj6);
IkReal x11399=((1.0)*cj4);
IkReal x11400=(cj7*r00);
IkReal x11401=((1.0)*cj7);
IkReal x11402=(gconst10*r10);
IkReal x11403=(cj5*sj6);
IkReal x11404=(gconst10*r11);
IkReal x11405=(sj7*x11388);
IkReal x11406=(gconst11*x11389);
IkReal x11407=(gconst11*x11401);
IkReal x11408=(cj7*x11388);
IkReal x11409=((1.0)*sj7*x11389);
IkReal x11410=((1.0)*gconst11*x11388);
evalcond[0]=((((-1.0)*r20*x11410))+((x11388*x11390))+((r22*x11389)));
evalcond[1]=(((x11388*x11404))+((r12*x11389))+(((-1.0)*r10*x11410))+cj4);
evalcond[2]=(((r02*x11389))+(((-1.0)*x11393))+(((-1.0)*r00*x11410))+((x11388*x11397)));
evalcond[3]=(((gconst10*x11391))+((r22*x11408))+(((-1.0)*sj5*x11392))+((cj7*r20*x11406))+(((-1.0)*x11389*x11390*x11401))+((r21*x11395))+(((-1.0)*x11403)));
evalcond[4]=(((r22*x11405))+x11396+(((-1.0)*cj5*x11392))+(((-1.0)*x11390*x11409))+(((-1.0)*gconst10*r20*x11401))+(((-1.0)*r21*x11407))+((x11391*x11406)));
evalcond[5]=(((gconst10*x11394))+((x11400*x11406))+(((-1.0)*x11389*x11397*x11401))+((r01*x11395))+(((-1.0)*x11396*x11399))+((cj4*x11398))+((r02*x11408)));
evalcond[6]=((((-1.0)*x11393*x11396))+((cj7*r10*x11406))+((r12*x11408))+((sj4*x11398))+((r11*x11395))+(((-1.0)*x11389*x11401*x11404))+((sj7*x11402)));
evalcond[7]=((((-1.0)*gconst10*x11400))+(((-1.0)*cj4*sj5*x11392))+(((-1.0)*x11399*x11403))+(((-1.0)*x11397*x11409))+((r02*x11405))+((x11394*x11406))+(((-1.0)*r01*x11407)));
evalcond[8]=(((r10*x11389*x11395))+((r12*x11405))+(((-1.0)*sj4*sj5*x11392))+(((-1.0)*x11401*x11402))+(((-1.0)*x11393*x11403))+(((-1.0)*x11404*x11409))+(((-1.0)*r11*x11407)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x11411=IKPowWithIntegerCheck(IKsign((((gconst10*r00))+((gconst11*r01)))),-1);
if(!x11411.valid){
continue;
}
CheckValue<IkReal> x11412 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*gconst11*r20))+((cj4*gconst10*r21)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x11412.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11411.value)))+(x11412.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x11413=IKcos(j8);
IkReal x11414=IKsin(j8);
IkReal x11415=(gconst10*r21);
IkReal x11416=(r20*sj7);
IkReal x11417=((1.0)*cj6);
IkReal x11418=((1.0)*sj4);
IkReal x11419=(r00*sj7);
IkReal x11420=(gconst11*sj7);
IkReal x11421=(sj5*sj6);
IkReal x11422=(gconst10*r01);
IkReal x11423=(cj5*cj6);
IkReal x11424=((1.0)*cj4);
IkReal x11425=(cj7*r00);
IkReal x11426=((1.0)*cj7);
IkReal x11427=(gconst10*r10);
IkReal x11428=(cj5*sj6);
IkReal x11429=(gconst10*r11);
IkReal x11430=(sj7*x11413);
IkReal x11431=(gconst11*x11414);
IkReal x11432=(gconst11*x11426);
IkReal x11433=(cj7*x11413);
IkReal x11434=((1.0)*sj7*x11414);
IkReal x11435=((1.0)*gconst11*x11413);
evalcond[0]=(((r22*x11414))+(((-1.0)*r20*x11435))+((x11413*x11415)));
evalcond[1]=(cj4+(((-1.0)*r10*x11435))+((r12*x11414))+((x11413*x11429)));
evalcond[2]=((((-1.0)*r00*x11435))+(((-1.0)*x11418))+((r02*x11414))+((x11413*x11422)));
evalcond[3]=(((cj7*r20*x11431))+(((-1.0)*x11414*x11415*x11426))+((r21*x11420))+(((-1.0)*x11428))+((r22*x11433))+((gconst10*x11416))+(((-1.0)*sj5*x11417)));
evalcond[4]=((((-1.0)*cj5*x11417))+x11421+(((-1.0)*gconst10*r20*x11426))+((x11416*x11431))+(((-1.0)*x11415*x11434))+((r22*x11430))+(((-1.0)*r21*x11432)));
evalcond[5]=(((r02*x11433))+((x11425*x11431))+(((-1.0)*x11414*x11422*x11426))+(((-1.0)*x11421*x11424))+((r01*x11420))+((gconst10*x11419))+((cj4*x11423)));
evalcond[6]=(((sj7*x11427))+(((-1.0)*x11414*x11426*x11429))+((sj4*x11423))+((r11*x11420))+((cj7*r10*x11431))+((r12*x11433))+(((-1.0)*x11418*x11421)));
evalcond[7]=(((r02*x11430))+(((-1.0)*r01*x11432))+(((-1.0)*gconst10*x11425))+(((-1.0)*x11424*x11428))+((x11419*x11431))+(((-1.0)*cj4*sj5*x11417))+(((-1.0)*x11422*x11434)));
evalcond[8]=((((-1.0)*r11*x11432))+(((-1.0)*x11426*x11427))+(((-1.0)*x11429*x11434))+(((-1.0)*sj4*sj5*x11417))+((r12*x11430))+((r10*x11414*x11420))+(((-1.0)*x11418*x11428)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
sj4=0;
cj4=1.0;
j4=0;
IkReal x11436=(((r00*sj9))+((cj9*r01)));
j8eval[0]=x11436;
j8eval[1]=IKsign(x11436);
j8eval[2]=((IKabs(r22))+(IKabs((((r21*sj9))+(((-1.0)*cj9*r20))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj4=0;
cj4=1.0;
j4=0;
IkReal x11437=((1.0)*cj9);
IkReal x11438=((((-1.0)*r21*x11437))+(((-1.0)*r20*sj9)));
j8eval[0]=x11438;
j8eval[1]=((IKabs(r02))+(IKabs((((r01*sj9))+(((-1.0)*r00*x11437))))));
j8eval[2]=IKsign(x11438);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
sj4=0;
cj4=1.0;
j4=0;
IkReal x11439=cj9*cj9;
IkReal x11440=(cj7*r11);
IkReal x11441=(cj7*r10);
IkReal x11442=((1.0)*cj9*sj9);
IkReal x11443=(((r20*x11439*x11441))+(((-1.0)*r21*x11441*x11442))+(((-1.0)*r21*x11439*x11440))+((cj7*r12*r22))+((r21*x11440))+(((-1.0)*r20*x11440*x11442)));
j8eval[0]=x11443;
j8eval[1]=IKsign(x11443);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
IkReal x11444=(((r00*sj9))+((cj9*r01)));
j8eval[0]=x11444;
j8eval[1]=IKsign(x11444);
j8eval[2]=((IKabs(r22))+(IKabs((((r21*sj9))+(((-1.0)*cj9*r20))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
IkReal x11445=((1.0)*cj9);
IkReal x11446=((((-1.0)*r21*x11445))+(((-1.0)*r20*sj9)));
j8eval[0]=x11446;
j8eval[1]=((IKabs(r02))+(IKabs((((r01*sj9))+(((-1.0)*r00*x11445))))));
j8eval[2]=IKsign(x11446);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
IkReal x11447=r11*r11;
IkReal x11448=cj9*cj9;
IkReal x11449=(r11*sj9);
IkReal x11450=(cj9*r10);
IkReal x11451=((((2.0)*x11449*x11450))+(((-1.0)*x11447))+((x11447*x11448))+(((-1.0)*(r12*r12)))+(((-1.0)*x11448*(r10*r10))));
j8eval[0]=x11451;
j8eval[1]=IKsign(x11451);
j8eval[2]=((IKabs((x11449+(((-1.0)*x11450)))))+(IKabs(r12)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[2];
IkReal x11452=((-1.0)*pz);
sj4=0;
cj4=1.0;
j4=0;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x11452);
rxp1_0=(pz*r11);
rxp1_1=(r01*x11452);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j8eval[0]=((((-1.0)*r01*sj9))+((cj9*r00)));
j8eval[1]=r22;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x11453=((-1.0)*pz);
sj4=0;
cj4=1.0;
j4=0;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x11453);
rxp1_0=(pz*r11);
rxp1_1=(r01*x11453);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j8eval[0]=((((-1.0)*r01*sj9))+((cj9*r00)));
j8eval[1]=(((r11*sj9))+(((-1.0)*cj9*r10)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x11454=IKPowWithIntegerCheck(((((-1.0)*r01*sj9))+((cj9*r00))),-1);
if(!x11454.valid){
continue;
}
CheckValue<IkReal> x11455=IKPowWithIntegerCheck((((r11*sj9))+(((-1.0)*cj9*r10))),-1);
if(!x11455.valid){
continue;
}
if( IKabs(((x11454.value)*((((cj6*sj5))+((cj5*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x11455.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11454.value)*((((cj6*sj5))+((cj5*sj6))))))+IKsqr(((-1.0)*(x11455.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((x11454.value)*((((cj6*sj5))+((cj5*sj6))))), ((-1.0)*(x11455.value)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x11456=IKcos(j8);
IkReal x11457=IKsin(j8);
IkReal x11458=(cj9*r00);
IkReal x11459=(cj9*r10);
IkReal x11460=((1.0)*cj5);
IkReal x11461=((1.0)*x11456);
IkReal x11462=(sj9*x11456);
IkReal x11463=((1.0)*sj9*x11457);
evalcond[0]=(r22*x11457);
evalcond[1]=((((-1.0)*cj6*x11460))+((sj5*sj6))+((r22*x11456)));
evalcond[2]=(((r01*x11462))+(((-1.0)*x11458*x11461)));
evalcond[3]=((((-1.0)*r11*x11463))+((x11457*x11459)));
evalcond[4]=((1.0)+((r11*x11462))+(((-1.0)*x11459*x11461)));
evalcond[5]=((((-1.0)*sj6*x11460))+((x11457*x11458))+(((-1.0)*r01*x11463))+(((-1.0)*cj6*sj5)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x11464=IKPowWithIntegerCheck(((((-1.0)*r01*sj9))+((cj9*r00))),-1);
if(!x11464.valid){
continue;
}
CheckValue<IkReal> x11465=IKPowWithIntegerCheck(r22,-1);
if(!x11465.valid){
continue;
}
if( IKabs(((x11464.value)*((((cj6*sj5))+((cj5*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11465.value)*((((cj5*cj6))+(((-1.0)*sj5*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11464.value)*((((cj6*sj5))+((cj5*sj6))))))+IKsqr(((x11465.value)*((((cj5*cj6))+(((-1.0)*sj5*sj6))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((x11464.value)*((((cj6*sj5))+((cj5*sj6))))), ((x11465.value)*((((cj5*cj6))+(((-1.0)*sj5*sj6))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x11466=IKcos(j8);
IkReal x11467=IKsin(j8);
IkReal x11468=(cj9*r00);
IkReal x11469=(cj9*r10);
IkReal x11470=((1.0)*cj5);
IkReal x11471=((1.0)*x11466);
IkReal x11472=(sj9*x11466);
IkReal x11473=((1.0)*sj9*x11467);
evalcond[0]=(r22*x11467);
evalcond[1]=(((sj5*sj6))+(((-1.0)*cj6*x11470))+((r22*x11466)));
evalcond[2]=((((-1.0)*x11468*x11471))+((r01*x11472)));
evalcond[3]=((((-1.0)*r11*x11473))+((x11467*x11469)));
evalcond[4]=((1.0)+((r11*x11472))+(((-1.0)*x11469*x11471)));
evalcond[5]=(((x11467*x11468))+(((-1.0)*sj6*x11470))+(((-1.0)*r01*x11473))+(((-1.0)*cj6*sj5)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[2];
IkReal x11474=((-1.0)*px);
sj4=0;
cj4=1.0;
j4=0;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11474);
rxp1_1=(px*r21);
rxp1_2=(r11*x11474);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j8eval[0]=(((cj9*r20))+(((-1.0)*r21*sj9)));
j8eval[1]=r02;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x11475=((-1.0)*px);
sj4=0;
cj4=1.0;
j4=0;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11475);
rxp1_1=(px*r21);
rxp1_2=(r11*x11475);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j8eval[0]=(((cj9*r20))+(((-1.0)*r21*sj9)));
j8eval[1]=(((r11*sj9))+(((-1.0)*cj9*r10)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x11476=IKPowWithIntegerCheck((((cj9*r20))+(((-1.0)*r21*sj9))),-1);
if(!x11476.valid){
continue;
}
CheckValue<IkReal> x11477=IKPowWithIntegerCheck((((r11*sj9))+(((-1.0)*cj9*r10))),-1);
if(!x11477.valid){
continue;
}
if( IKabs(((x11476.value)*((((cj5*cj6))+(((-1.0)*sj5*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x11477.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11476.value)*((((cj5*cj6))+(((-1.0)*sj5*sj6))))))+IKsqr(((-1.0)*(x11477.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((x11476.value)*((((cj5*cj6))+(((-1.0)*sj5*sj6))))), ((-1.0)*(x11477.value)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x11478=IKcos(j8);
IkReal x11479=IKsin(j8);
IkReal x11480=(cj9*r10);
IkReal x11481=((1.0)*cj5);
IkReal x11482=(cj9*r20);
IkReal x11483=((1.0)*x11478);
IkReal x11484=(sj9*x11478);
IkReal x11485=((1.0)*sj9*x11479);
evalcond[0]=(r02*x11479);
evalcond[1]=((((-1.0)*x11482*x11483))+((r21*x11484)));
evalcond[2]=((((-1.0)*sj6*x11481))+((r02*x11478))+(((-1.0)*cj6*sj5)));
evalcond[3]=((((-1.0)*r11*x11485))+((x11479*x11480)));
evalcond[4]=((1.0)+(((-1.0)*x11480*x11483))+((r11*x11484)));
evalcond[5]=((((-1.0)*r21*x11485))+((sj5*sj6))+((x11479*x11482))+(((-1.0)*cj6*x11481)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x11486=IKPowWithIntegerCheck((((cj9*r20))+(((-1.0)*r21*sj9))),-1);
if(!x11486.valid){
continue;
}
CheckValue<IkReal> x11487=IKPowWithIntegerCheck(r02,-1);
if(!x11487.valid){
continue;
}
if( IKabs(((x11486.value)*((((cj5*cj6))+(((-1.0)*sj5*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11487.value)*((((cj6*sj5))+((cj5*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11486.value)*((((cj5*cj6))+(((-1.0)*sj5*sj6))))))+IKsqr(((x11487.value)*((((cj6*sj5))+((cj5*sj6))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((x11486.value)*((((cj5*cj6))+(((-1.0)*sj5*sj6))))), ((x11487.value)*((((cj6*sj5))+((cj5*sj6))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x11488=IKcos(j8);
IkReal x11489=IKsin(j8);
IkReal x11490=(cj9*r10);
IkReal x11491=((1.0)*cj5);
IkReal x11492=(cj9*r20);
IkReal x11493=((1.0)*x11488);
IkReal x11494=(sj9*x11488);
IkReal x11495=((1.0)*sj9*x11489);
evalcond[0]=(r02*x11489);
evalcond[1]=(((r21*x11494))+(((-1.0)*x11492*x11493)));
evalcond[2]=((((-1.0)*sj6*x11491))+((r02*x11488))+(((-1.0)*cj6*sj5)));
evalcond[3]=(((x11489*x11490))+(((-1.0)*r11*x11495)));
evalcond[4]=((1.0)+(((-1.0)*x11490*x11493))+((r11*x11494)));
evalcond[5]=(((sj5*sj6))+((x11489*x11492))+(((-1.0)*cj6*x11491))+(((-1.0)*r21*x11495)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x11496=r11*r11;
IkReal x11497=cj9*cj9;
IkReal x11498=(r11*sj9);
IkReal x11499=(cj9*r10);
CheckValue<IkReal> x11500 = IKatan2WithCheck(IkReal(r12),IkReal((x11498+(((-1.0)*x11499)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11500.valid){
continue;
}
CheckValue<IkReal> x11501=IKPowWithIntegerCheck(IKsign(((((-1.0)*x11497*(r10*r10)))+(((-1.0)*(r12*r12)))+((x11496*x11497))+(((2.0)*x11498*x11499))+(((-1.0)*x11496)))),-1);
if(!x11501.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x11500.value)+(((1.5707963267949)*(x11501.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x11502=IKcos(j8);
IkReal x11503=IKsin(j8);
IkReal x11504=(cj9*r00);
IkReal x11505=((1.0)*cj6);
IkReal x11506=((1.0)*x11502);
IkReal x11507=(cj9*x11503);
IkReal x11508=(sj9*x11502);
IkReal x11509=((1.0)*sj9*x11503);
evalcond[0]=(((r21*x11508))+(((-1.0)*cj9*r20*x11506))+((r22*x11503)));
evalcond[1]=((((-1.0)*x11504*x11506))+((r01*x11508))+((r02*x11503)));
evalcond[2]=((((-1.0)*r11*x11509))+((r12*x11502))+((r10*x11507)));
evalcond[3]=((1.0)+(((-1.0)*cj9*r10*x11506))+((r12*x11503))+((r11*x11508)));
evalcond[4]=(((sj5*sj6))+((r20*x11507))+(((-1.0)*cj5*x11505))+(((-1.0)*r21*x11509))+((r22*x11502)));
evalcond[5]=((((-1.0)*cj5*sj6))+((x11503*x11504))+(((-1.0)*r01*x11509))+(((-1.0)*sj5*x11505))+((r02*x11502)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x11510=((1.0)*cj9);
CheckValue<IkReal> x11511=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11510))+(((-1.0)*r20*sj9)))),-1);
if(!x11511.valid){
continue;
}
CheckValue<IkReal> x11512 = IKatan2WithCheck(IkReal((((r01*sj9))+(((-1.0)*r00*x11510)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11512.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11511.value)))+(x11512.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x11513=IKcos(j8);
IkReal x11514=IKsin(j8);
IkReal x11515=(cj9*r00);
IkReal x11516=((1.0)*cj6);
IkReal x11517=((1.0)*x11513);
IkReal x11518=(cj9*x11514);
IkReal x11519=(sj9*x11513);
IkReal x11520=((1.0)*sj9*x11514);
evalcond[0]=(((r22*x11514))+((r21*x11519))+(((-1.0)*cj9*r20*x11517)));
evalcond[1]=(((r01*x11519))+((r02*x11514))+(((-1.0)*x11515*x11517)));
evalcond[2]=(((r12*x11513))+((r10*x11518))+(((-1.0)*r11*x11520)));
evalcond[3]=((1.0)+(((-1.0)*cj9*r10*x11517))+((r12*x11514))+((r11*x11519)));
evalcond[4]=(((r20*x11518))+((sj5*sj6))+(((-1.0)*cj5*x11516))+((r22*x11513))+(((-1.0)*r21*x11520)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*sj5*x11516))+((r02*x11513))+((x11514*x11515))+(((-1.0)*r01*x11520)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x11521=IKPowWithIntegerCheck(IKsign((((r00*sj9))+((cj9*r01)))),-1);
if(!x11521.valid){
continue;
}
CheckValue<IkReal> x11522 = IKatan2WithCheck(IkReal((((r21*sj9))+(((-1.0)*cj9*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x11522.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11521.value)))+(x11522.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x11523=IKcos(j8);
IkReal x11524=IKsin(j8);
IkReal x11525=(cj9*r00);
IkReal x11526=((1.0)*cj6);
IkReal x11527=((1.0)*x11523);
IkReal x11528=(cj9*x11524);
IkReal x11529=(sj9*x11523);
IkReal x11530=((1.0)*sj9*x11524);
evalcond[0]=(((r21*x11529))+(((-1.0)*cj9*r20*x11527))+((r22*x11524)));
evalcond[1]=(((r01*x11529))+((r02*x11524))+(((-1.0)*x11525*x11527)));
evalcond[2]=((((-1.0)*r11*x11530))+((r12*x11523))+((r10*x11528)));
evalcond[3]=((1.0)+(((-1.0)*cj9*r10*x11527))+((r11*x11529))+((r12*x11524)));
evalcond[4]=(((sj5*sj6))+((r20*x11528))+(((-1.0)*cj5*x11526))+(((-1.0)*r21*x11530))+((r22*x11523)));
evalcond[5]=((((-1.0)*cj5*sj6))+((x11524*x11525))+(((-1.0)*r01*x11530))+((r02*x11523))+(((-1.0)*sj5*x11526)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
IkReal x11531=(((r00*sj9))+((cj9*r01)));
j8eval[0]=x11531;
j8eval[1]=IKsign(x11531);
j8eval[2]=((IKabs(r22))+(IKabs((((r21*sj9))+(((-1.0)*cj9*r20))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
IkReal x11532=((1.0)*cj9);
IkReal x11533=((((-1.0)*r21*x11532))+(((-1.0)*r20*sj9)));
j8eval[0]=x11533;
j8eval[1]=((IKabs(r02))+(IKabs((((r01*sj9))+(((-1.0)*r00*x11532))))));
j8eval[2]=IKsign(x11533);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj4=0;
cj4=1.0;
j4=0;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
IkReal x11534=r11*r11;
IkReal x11535=cj9*cj9;
IkReal x11536=(r11*sj9);
IkReal x11537=(cj9*r10);
IkReal x11538=(((x11534*x11535))+(((-1.0)*(r12*r12)))+(((2.0)*x11536*x11537))+(((-1.0)*x11534))+(((-1.0)*x11535*(r10*r10))));
j8eval[0]=x11538;
j8eval[1]=IKsign(x11538);
j8eval[2]=((IKabs(r12))+(IKabs((x11536+(((-1.0)*x11537))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[2];
IkReal x11539=((-1.0)*pz);
sj4=0;
cj4=1.0;
j4=0;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x11539);
rxp1_0=(pz*r11);
rxp1_1=(r01*x11539);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x11540=((1.0)*cj9);
j8eval[0]=((((-1.0)*r00*x11540))+((r01*sj9)));
j8eval[1]=(((r11*sj9))+(((-1.0)*r10*x11540)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x11541=((-1.0)*pz);
sj4=0;
cj4=1.0;
j4=0;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x11541);
rxp1_0=(pz*r11);
rxp1_1=(r01*x11541);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j8eval[0]=(((r01*sj9))+(((-1.0)*cj9*r00)));
j8eval[1]=r22;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x11542=IKPowWithIntegerCheck((((r01*sj9))+(((-1.0)*cj9*r00))),-1);
if(!x11542.valid){
continue;
}
CheckValue<IkReal> x11543=IKPowWithIntegerCheck(r22,-1);
if(!x11543.valid){
continue;
}
if( IKabs(((x11542.value)*((((cj6*sj5))+((cj5*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11543.value)*((((sj5*sj6))+(((-1.0)*cj5*cj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11542.value)*((((cj6*sj5))+((cj5*sj6))))))+IKsqr(((x11543.value)*((((sj5*sj6))+(((-1.0)*cj5*cj6))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((x11542.value)*((((cj6*sj5))+((cj5*sj6))))), ((x11543.value)*((((sj5*sj6))+(((-1.0)*cj5*cj6))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x11544=IKcos(j8);
IkReal x11545=IKsin(j8);
IkReal x11546=(cj9*r00);
IkReal x11547=(cj9*r10);
IkReal x11548=((1.0)*cj5);
IkReal x11549=((1.0)*x11544);
IkReal x11550=(sj9*x11544);
IkReal x11551=(sj9*x11545);
IkReal x11552=((1.0)*x11545);
evalcond[0]=(r22*x11545);
evalcond[1]=((((-1.0)*x11546*x11549))+((r01*x11550)));
evalcond[2]=(((sj5*sj6))+(((-1.0)*cj6*x11548))+(((-1.0)*r22*x11549)));
evalcond[3]=(((r11*x11551))+(((-1.0)*x11547*x11552)));
evalcond[4]=((1.0)+((r11*x11550))+(((-1.0)*x11547*x11549)));
evalcond[5]=((((-1.0)*x11546*x11552))+(((-1.0)*sj6*x11548))+((r01*x11551))+(((-1.0)*cj6*sj5)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x11553=((1.0)*cj9);
CheckValue<IkReal> x11554=IKPowWithIntegerCheck((((r01*sj9))+(((-1.0)*r00*x11553))),-1);
if(!x11554.valid){
continue;
}
CheckValue<IkReal> x11555=IKPowWithIntegerCheck(((((-1.0)*r10*x11553))+((r11*sj9))),-1);
if(!x11555.valid){
continue;
}
if( IKabs(((x11554.value)*((((cj6*sj5))+((cj5*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x11555.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11554.value)*((((cj6*sj5))+((cj5*sj6))))))+IKsqr(((-1.0)*(x11555.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((x11554.value)*((((cj6*sj5))+((cj5*sj6))))), ((-1.0)*(x11555.value)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x11556=IKcos(j8);
IkReal x11557=IKsin(j8);
IkReal x11558=(cj9*r00);
IkReal x11559=(cj9*r10);
IkReal x11560=((1.0)*cj5);
IkReal x11561=((1.0)*x11556);
IkReal x11562=(sj9*x11556);
IkReal x11563=(sj9*x11557);
IkReal x11564=((1.0)*x11557);
evalcond[0]=(r22*x11557);
evalcond[1]=(((r01*x11562))+(((-1.0)*x11558*x11561)));
evalcond[2]=(((sj5*sj6))+(((-1.0)*cj6*x11560))+(((-1.0)*r22*x11561)));
evalcond[3]=((((-1.0)*x11559*x11564))+((r11*x11563)));
evalcond[4]=((1.0)+(((-1.0)*x11559*x11561))+((r11*x11562)));
evalcond[5]=((((-1.0)*sj6*x11560))+((r01*x11563))+(((-1.0)*x11558*x11564))+(((-1.0)*cj6*sj5)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[2];
IkReal x11565=((-1.0)*px);
sj4=0;
cj4=1.0;
j4=0;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11565);
rxp1_1=(px*r21);
rxp1_2=(r11*x11565);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x11566=((1.0)*cj9);
j8eval[0]=(((r21*sj9))+(((-1.0)*r20*x11566)));
j8eval[1]=(((r11*sj9))+(((-1.0)*r10*x11566)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x11567=((-1.0)*px);
sj4=0;
cj4=1.0;
j4=0;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11567);
rxp1_1=(px*r21);
rxp1_2=(r11*x11567);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j8eval[0]=(((r21*sj9))+(((-1.0)*cj9*r20)));
j8eval[1]=r02;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x11568=((1.0)*sj5);
CheckValue<IkReal> x11569=IKPowWithIntegerCheck((((r21*sj9))+(((-1.0)*cj9*r20))),-1);
if(!x11569.valid){
continue;
}
CheckValue<IkReal> x11570=IKPowWithIntegerCheck(r02,-1);
if(!x11570.valid){
continue;
}
if( IKabs(((x11569.value)*(((((-1.0)*sj6*x11568))+((cj5*cj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11570.value)*(((((-1.0)*cj5*sj6))+(((-1.0)*cj6*x11568)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11569.value)*(((((-1.0)*sj6*x11568))+((cj5*cj6))))))+IKsqr(((x11570.value)*(((((-1.0)*cj5*sj6))+(((-1.0)*cj6*x11568))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((x11569.value)*(((((-1.0)*sj6*x11568))+((cj5*cj6))))), ((x11570.value)*(((((-1.0)*cj5*sj6))+(((-1.0)*cj6*x11568))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x11571=IKcos(j8);
IkReal x11572=IKsin(j8);
IkReal x11573=((1.0)*cj5);
IkReal x11574=((1.0)*cj9);
IkReal x11575=(sj9*x11571);
IkReal x11576=(sj9*x11572);
evalcond[0]=(r02*x11572);
evalcond[1]=(((r21*x11575))+(((-1.0)*r20*x11571*x11574)));
evalcond[2]=((((-1.0)*r10*x11572*x11574))+((r11*x11576)));
evalcond[3]=((1.0)+(((-1.0)*r10*x11571*x11574))+((r11*x11575)));
evalcond[4]=((((-1.0)*r02*x11571))+(((-1.0)*sj6*x11573))+(((-1.0)*cj6*sj5)));
evalcond[5]=(((sj5*sj6))+(((-1.0)*cj6*x11573))+(((-1.0)*r20*x11572*x11574))+((r21*x11576)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x11577=((1.0)*cj9);
CheckValue<IkReal> x11578=IKPowWithIntegerCheck((((r21*sj9))+(((-1.0)*r20*x11577))),-1);
if(!x11578.valid){
continue;
}
CheckValue<IkReal> x11579=IKPowWithIntegerCheck((((r11*sj9))+(((-1.0)*r10*x11577))),-1);
if(!x11579.valid){
continue;
}
if( IKabs(((x11578.value)*((((cj5*cj6))+(((-1.0)*sj5*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x11579.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11578.value)*((((cj5*cj6))+(((-1.0)*sj5*sj6))))))+IKsqr(((-1.0)*(x11579.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((x11578.value)*((((cj5*cj6))+(((-1.0)*sj5*sj6))))), ((-1.0)*(x11579.value)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x11580=IKcos(j8);
IkReal x11581=IKsin(j8);
IkReal x11582=((1.0)*cj5);
IkReal x11583=((1.0)*cj9);
IkReal x11584=(sj9*x11580);
IkReal x11585=(sj9*x11581);
evalcond[0]=(r02*x11581);
evalcond[1]=(((r21*x11584))+(((-1.0)*r20*x11580*x11583)));
evalcond[2]=((((-1.0)*r10*x11581*x11583))+((r11*x11585)));
evalcond[3]=((1.0)+(((-1.0)*r10*x11580*x11583))+((r11*x11584)));
evalcond[4]=((((-1.0)*sj6*x11582))+(((-1.0)*r02*x11580))+(((-1.0)*cj6*sj5)));
evalcond[5]=((((-1.0)*r20*x11581*x11583))+((sj5*sj6))+((r21*x11585))+(((-1.0)*cj6*x11582)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x11586=r11*r11;
IkReal x11587=cj9*cj9;
IkReal x11588=(r11*sj9);
IkReal x11589=(cj9*r10);
CheckValue<IkReal> x11590 = IKatan2WithCheck(IkReal(r12),IkReal((x11588+(((-1.0)*x11589)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11590.valid){
continue;
}
CheckValue<IkReal> x11591=IKPowWithIntegerCheck(IKsign(((((-1.0)*x11586))+(((-1.0)*x11587*(r10*r10)))+((x11586*x11587))+(((-1.0)*(r12*r12)))+(((2.0)*x11588*x11589)))),-1);
if(!x11591.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x11590.value)+(((1.5707963267949)*(x11591.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x11592=IKcos(j8);
IkReal x11593=IKsin(j8);
IkReal x11594=((1.0)*cj6);
IkReal x11595=((1.0)*x11592);
IkReal x11596=(sj9*x11592);
IkReal x11597=(sj9*x11593);
IkReal x11598=(cj9*x11595);
IkReal x11599=((1.0)*cj9*x11593);
evalcond[0]=(((r21*x11596))+(((-1.0)*r20*x11598))+((r22*x11593)));
evalcond[1]=(((r01*x11596))+(((-1.0)*r00*x11598))+((r02*x11593)));
evalcond[2]=((1.0)+((r11*x11596))+((r12*x11593))+(((-1.0)*r10*x11598)));
evalcond[3]=(((r11*x11597))+(((-1.0)*r10*x11599))+(((-1.0)*r12*x11595)));
evalcond[4]=((((-1.0)*cj5*x11594))+((sj5*sj6))+((r21*x11597))+(((-1.0)*r20*x11599))+(((-1.0)*r22*x11595)));
evalcond[5]=((((-1.0)*cj5*sj6))+((r01*x11597))+(((-1.0)*r00*x11599))+(((-1.0)*sj5*x11594))+(((-1.0)*r02*x11595)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x11600=((1.0)*cj9);
CheckValue<IkReal> x11601 = IKatan2WithCheck(IkReal((((r01*sj9))+(((-1.0)*r00*x11600)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11601.valid){
continue;
}
CheckValue<IkReal> x11602=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11600))+(((-1.0)*r20*sj9)))),-1);
if(!x11602.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x11601.value)+(((1.5707963267949)*(x11602.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x11603=IKcos(j8);
IkReal x11604=IKsin(j8);
IkReal x11605=((1.0)*cj6);
IkReal x11606=((1.0)*x11603);
IkReal x11607=(sj9*x11603);
IkReal x11608=(sj9*x11604);
IkReal x11609=(cj9*x11606);
IkReal x11610=((1.0)*cj9*x11604);
evalcond[0]=((((-1.0)*r20*x11609))+((r22*x11604))+((r21*x11607)));
evalcond[1]=(((r01*x11607))+(((-1.0)*r00*x11609))+((r02*x11604)));
evalcond[2]=((1.0)+(((-1.0)*r10*x11609))+((r11*x11607))+((r12*x11604)));
evalcond[3]=((((-1.0)*r10*x11610))+(((-1.0)*r12*x11606))+((r11*x11608)));
evalcond[4]=((((-1.0)*r22*x11606))+((sj5*sj6))+((r21*x11608))+(((-1.0)*cj5*x11605))+(((-1.0)*r20*x11610)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*sj5*x11605))+((r01*x11608))+(((-1.0)*r02*x11606))+(((-1.0)*r00*x11610)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x11611=IKPowWithIntegerCheck(IKsign((((r00*sj9))+((cj9*r01)))),-1);
if(!x11611.valid){
continue;
}
CheckValue<IkReal> x11612 = IKatan2WithCheck(IkReal((((r21*sj9))+(((-1.0)*cj9*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x11612.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11611.value)))+(x11612.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x11613=IKcos(j8);
IkReal x11614=IKsin(j8);
IkReal x11615=((1.0)*cj6);
IkReal x11616=((1.0)*x11613);
IkReal x11617=(sj9*x11613);
IkReal x11618=(sj9*x11614);
IkReal x11619=(cj9*x11616);
IkReal x11620=((1.0)*cj9*x11614);
evalcond[0]=(((r21*x11617))+((r22*x11614))+(((-1.0)*r20*x11619)));
evalcond[1]=((((-1.0)*r00*x11619))+((r02*x11614))+((r01*x11617)));
evalcond[2]=((1.0)+((r12*x11614))+((r11*x11617))+(((-1.0)*r10*x11619)));
evalcond[3]=((((-1.0)*r12*x11616))+(((-1.0)*r10*x11620))+((r11*x11618)));
evalcond[4]=(((sj5*sj6))+((r21*x11618))+(((-1.0)*r22*x11616))+(((-1.0)*cj5*x11615))+(((-1.0)*r20*x11620)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*r00*x11620))+((r01*x11618))+(((-1.0)*r02*x11616))+(((-1.0)*sj5*x11615)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11622 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x11622)==0){
continue;
}
IkReal x11621=pow(x11622,-0.5);
CheckValue<IkReal> x11623 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11623.valid){
continue;
}
IkReal gconst24=((-1.0)*(x11623.value));
IkReal gconst25=((-1.0)*r01*x11621);
IkReal gconst26=(r00*x11621);
CheckValue<IkReal> x11624 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11624.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x11624.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
CheckValue<IkReal> x11627 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11627.valid){
continue;
}
IkReal x11625=((-1.0)*(x11627.value));
IkReal x11626=x11621;
sj4=0;
cj4=1.0;
j4=0;
sj9=gconst25;
cj9=gconst26;
j9=x11625;
IkReal gconst24=x11625;
IkReal gconst25=((-1.0)*r01*x11626);
IkReal gconst26=(r00*x11626);
j8eval[0]=1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
CheckValue<IkReal> x11630 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11630.valid){
continue;
}
IkReal x11628=((-1.0)*(x11630.value));
IkReal x11629=x11621;
sj4=0;
cj4=1.0;
j4=0;
sj9=gconst25;
cj9=gconst26;
j9=x11628;
IkReal gconst24=x11628;
IkReal gconst25=((-1.0)*r01*x11629);
IkReal gconst26=(r00*x11629);
CheckValue<IkReal> x11638=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x11638.valid){
continue;
}
IkReal x11631=x11638.value;
IkReal x11632=(sj7*x11631);
IkReal x11633=(r21*x11632);
IkReal x11634=(r10*x11632);
IkReal x11635=(r11*x11632);
IkReal x11636=(r20*x11632);
IkReal x11637=(r00*r01*x11632);
j8eval[0]=IKsign((((r00*r01*r20*x11635))+((r20*x11634*(r00*r00)))+((r00*r01*r10*x11633))+((r12*r22*sj7))+((r11*x11633*(r01*r01)))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
CheckValue<IkReal> x11641 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11641.valid){
continue;
}
IkReal x11639=((-1.0)*(x11641.value));
IkReal x11640=x11621;
sj4=0;
cj4=1.0;
j4=0;
sj9=gconst25;
cj9=gconst26;
j9=x11639;
IkReal gconst24=x11639;
IkReal gconst25=((-1.0)*r01*x11640);
IkReal gconst26=(r00*x11640);
CheckValue<IkReal> x11649=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x11649.valid){
continue;
}
IkReal x11642=x11649.value;
IkReal x11643=(cj7*x11642);
IkReal x11644=(r20*x11643);
IkReal x11645=(r11*x11643);
IkReal x11646=(r10*x11643);
IkReal x11647=(r21*x11643);
IkReal x11648=(r00*r01*x11643);
j8eval[0]=IKsign((((r00*r01*r21*x11646))+((r10*x11644*(r00*r00)))+((cj7*r12*r22))+((r21*x11645*(r01*r01)))+((r00*r01*r11*x11644))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
CheckValue<IkReal> x11652 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11652.valid){
continue;
}
IkReal x11650=((-1.0)*(x11652.value));
IkReal x11651=x11621;
sj4=0;
cj4=1.0;
j4=0;
sj9=gconst25;
cj9=gconst26;
j9=x11650;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
IkReal gconst24=x11650;
IkReal gconst25=((-1.0)*r01*x11651);
IkReal gconst26=(r00*x11651);
j8eval[0]=1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[4];
CheckValue<IkReal> x11655 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11655.valid){
continue;
}
IkReal x11653=((-1.0)*(x11655.value));
IkReal x11654=x11621;
sj4=0;
cj4=1.0;
j4=0;
sj9=gconst25;
cj9=gconst26;
j9=x11653;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
IkReal gconst24=x11653;
IkReal gconst25=((-1.0)*r01*x11654);
IkReal gconst26=(r00*x11654);
IkReal x11656=((1.0)+(((-1.0)*(r02*r02))));
CheckValue<IkReal> x11660=IKPowWithIntegerCheck(x11656,-1);
if(!x11660.valid){
continue;
}
IkReal x11657=x11660.value;
IkReal x11658=((1.0)*x11657);
IkReal x11659=((((-1.0)*(r12*r12)))+(((-2.0)*r00*r01*r10*r11*x11657))+(((-1.0)*x11658*(r00*r00)*(r10*r10)))+(((-1.0)*x11658*(r01*r01)*(r11*r11))));
j8eval[0]=x11659;
j8eval[1]=IKsign(x11659);
j8eval[2]=r12;
j8eval[3]=x11656;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
CheckValue<IkReal> x11663 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11663.valid){
continue;
}
IkReal x11661=((-1.0)*(x11663.value));
IkReal x11662=x11621;
sj4=0;
cj4=1.0;
j4=0;
sj9=gconst25;
cj9=gconst26;
j9=x11661;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
IkReal gconst24=x11661;
IkReal gconst25=((-1.0)*r01*x11662);
IkReal gconst26=(r00*x11662);
IkReal x11664=r02*r02;
CheckValue<IkReal> x11667=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x11664))),-1);
if(!x11667.valid){
continue;
}
IkReal x11665=x11667.value;
IkReal x11666=((((2.0)*x11665*(r00*r00)*(r01*r01)))+x11664+((x11665*(r01*r01*r01*r01)))+((x11665*(r00*r00*r00*r00))));
j8eval[0]=x11666;
j8eval[1]=IKsign(x11666);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x11668=(cj5*sj6);
IkReal x11669=(cj6*sj5);
IkReal x11670=(gconst26*r00);
IkReal x11671=((1.0)*gconst25*r01);
CheckValue<IkReal> x11672 = IKatan2WithCheck(IkReal(((((-1.0)*x11669*x11671))+((x11669*x11670))+(((-1.0)*x11668*x11671))+((x11668*x11670)))),IkReal((((r02*x11669))+((r02*x11668)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11672.valid){
continue;
}
CheckValue<IkReal> x11673=IKPowWithIntegerCheck(IKsign(((((gconst25*gconst25)*(r01*r01)))+(((-2.0)*gconst25*r01*x11670))+(r02*r02)+(x11670*x11670))),-1);
if(!x11673.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x11672.value)+(((1.5707963267949)*(x11673.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x11674=IKcos(j8);
IkReal x11675=IKsin(j8);
IkReal x11676=((1.0)*cj6);
IkReal x11677=(gconst25*x11674);
IkReal x11678=(gconst26*x11675);
IkReal x11679=((1.0)*gconst26*x11674);
IkReal x11680=((1.0)*gconst25*x11675);
evalcond[0]=(((r22*x11675))+(((-1.0)*r20*x11679))+((r21*x11677)));
evalcond[1]=(((r02*x11675))+((r01*x11677))+(((-1.0)*r00*x11679)));
evalcond[2]=(((r12*x11674))+(((-1.0)*r11*x11680))+((r10*x11678)));
evalcond[3]=((1.0)+((r12*x11675))+((r11*x11677))+(((-1.0)*r10*x11679)));
evalcond[4]=(((r22*x11674))+((sj5*sj6))+(((-1.0)*r21*x11680))+((r20*x11678))+(((-1.0)*cj5*x11676)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*r01*x11680))+((r02*x11674))+((r00*x11678))+(((-1.0)*sj5*x11676)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x11681=(gconst25*r11);
IkReal x11682=(gconst26*r10);
CheckValue<IkReal> x11683 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x11682))+x11681)),IKFAST_ATAN2_MAGTHRESH);
if(!x11683.valid){
continue;
}
CheckValue<IkReal> x11684=IKPowWithIntegerCheck(IKsign(((((2.0)*x11681*x11682))+(((-1.0)*(x11681*x11681)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x11682*x11682))))),-1);
if(!x11684.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x11683.value)+(((1.5707963267949)*(x11684.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x11685=IKcos(j8);
IkReal x11686=IKsin(j8);
IkReal x11687=((1.0)*cj6);
IkReal x11688=(gconst25*x11685);
IkReal x11689=(gconst26*x11686);
IkReal x11690=((1.0)*gconst26*x11685);
IkReal x11691=((1.0)*gconst25*x11686);
evalcond[0]=((((-1.0)*r20*x11690))+((r22*x11686))+((r21*x11688)));
evalcond[1]=(((r02*x11686))+(((-1.0)*r00*x11690))+((r01*x11688)));
evalcond[2]=(((r12*x11685))+((r10*x11689))+(((-1.0)*r11*x11691)));
evalcond[3]=((1.0)+((r12*x11686))+((r11*x11688))+(((-1.0)*r10*x11690)));
evalcond[4]=((((-1.0)*cj5*x11687))+(((-1.0)*r21*x11691))+((r22*x11685))+((sj5*sj6))+((r20*x11689)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*sj5*x11687))+((r00*x11689))+((r02*x11685))+(((-1.0)*r01*x11691)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x11692=((1.0)*gconst26);
CheckValue<IkReal> x11693=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11692))+(((-1.0)*gconst25*r20)))),-1);
if(!x11693.valid){
continue;
}
CheckValue<IkReal> x11694 = IKatan2WithCheck(IkReal((((gconst25*r01))+(((-1.0)*r00*x11692)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11694.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11693.value)))+(x11694.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x11695=IKcos(j8);
IkReal x11696=IKsin(j8);
IkReal x11697=((1.0)*cj6);
IkReal x11698=(gconst25*x11695);
IkReal x11699=(gconst26*x11696);
IkReal x11700=((1.0)*gconst26*x11695);
IkReal x11701=((1.0)*gconst25*x11696);
evalcond[0]=((((-1.0)*r20*x11700))+((r22*x11696))+((r21*x11698)));
evalcond[1]=(((r01*x11698))+((r02*x11696))+(((-1.0)*r00*x11700)));
evalcond[2]=(((r12*x11695))+((r10*x11699))+(((-1.0)*r11*x11701)));
evalcond[3]=((1.0)+((r12*x11696))+((r11*x11698))+(((-1.0)*r10*x11700)));
evalcond[4]=(((sj5*sj6))+(((-1.0)*r21*x11701))+(((-1.0)*cj5*x11697))+((r20*x11699))+((r22*x11695)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*sj5*x11697))+((r00*x11699))+((r02*x11695))+(((-1.0)*r01*x11701)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
CheckValue<IkReal> x11704 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11704.valid){
continue;
}
IkReal x11702=((-1.0)*(x11704.value));
IkReal x11703=x11621;
sj4=0;
cj4=1.0;
j4=0;
sj9=gconst25;
cj9=gconst26;
j9=x11702;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
IkReal gconst24=x11702;
IkReal gconst25=((-1.0)*r01*x11703);
IkReal gconst26=(r00*x11703);
j8eval[0]=1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[4];
CheckValue<IkReal> x11707 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11707.valid){
continue;
}
IkReal x11705=((-1.0)*(x11707.value));
IkReal x11706=x11621;
sj4=0;
cj4=1.0;
j4=0;
sj9=gconst25;
cj9=gconst26;
j9=x11705;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
IkReal gconst24=x11705;
IkReal gconst25=((-1.0)*r01*x11706);
IkReal gconst26=(r00*x11706);
IkReal x11708=((1.0)+(((-1.0)*(r02*r02))));
CheckValue<IkReal> x11712=IKPowWithIntegerCheck(x11708,-1);
if(!x11712.valid){
continue;
}
IkReal x11709=x11712.value;
IkReal x11710=((1.0)*x11709);
IkReal x11711=((((-1.0)*x11710*(r01*r01)*(r11*r11)))+(((-1.0)*(r12*r12)))+(((-1.0)*x11710*(r00*r00)*(r10*r10)))+(((-2.0)*r00*r01*r10*r11*x11709)));
j8eval[0]=x11711;
j8eval[1]=IKsign(x11711);
j8eval[2]=r12;
j8eval[3]=x11708;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
CheckValue<IkReal> x11715 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11715.valid){
continue;
}
IkReal x11713=((-1.0)*(x11715.value));
IkReal x11714=x11621;
sj4=0;
cj4=1.0;
j4=0;
sj9=gconst25;
cj9=gconst26;
j9=x11713;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
IkReal gconst24=x11713;
IkReal gconst25=((-1.0)*r01*x11714);
IkReal gconst26=(r00*x11714);
IkReal x11716=((1.0)*(r02*r02));
CheckValue<IkReal> x11720=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x11716))),-1);
if(!x11720.valid){
continue;
}
IkReal x11717=x11720.value;
IkReal x11718=((1.0)*x11717);
IkReal x11719=((((-1.0)*x11716))+(((-2.0)*x11717*(r00*r00)*(r01*r01)))+(((-1.0)*x11718*(r00*r00*r00*r00)))+(((-1.0)*x11718*(r01*r01*r01*r01))));
j8eval[0]=x11719;
j8eval[1]=IKsign(x11719);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x11721=(cj5*sj6);
IkReal x11722=(cj6*sj5);
IkReal x11723=(gconst26*r00);
IkReal x11724=((1.0)*gconst25*r01);
CheckValue<IkReal> x11725=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x11723*x11723)))+(((-1.0)*gconst25*r01*x11724))+(((-1.0)*(r02*r02)))+(((2.0)*gconst25*r01*x11723)))),-1);
if(!x11725.valid){
continue;
}
CheckValue<IkReal> x11726 = IKatan2WithCheck(IkReal(((((-1.0)*x11721*x11724))+((x11721*x11723))+(((-1.0)*x11722*x11724))+((x11722*x11723)))),IkReal((((r02*x11721))+((r02*x11722)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11726.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11725.value)))+(x11726.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x11727=IKcos(j8);
IkReal x11728=IKsin(j8);
IkReal x11729=((1.0)*gconst26);
IkReal x11730=((1.0)*cj6);
IkReal x11731=(gconst25*x11727);
IkReal x11732=(gconst25*x11728);
IkReal x11733=((1.0)*x11727);
evalcond[0]=((((-1.0)*r20*x11727*x11729))+((r21*x11731))+((r22*x11728)));
evalcond[1]=(((r01*x11731))+((r02*x11728))+(((-1.0)*r00*x11727*x11729)));
evalcond[2]=((1.0)+((r12*x11728))+((r11*x11731))+(((-1.0)*r10*x11727*x11729)));
evalcond[3]=((((-1.0)*r10*x11728*x11729))+((r11*x11732))+(((-1.0)*r12*x11733)));
evalcond[4]=(((sj5*sj6))+(((-1.0)*r22*x11733))+(((-1.0)*r20*x11728*x11729))+((r21*x11732))+(((-1.0)*cj5*x11730)));
evalcond[5]=((((-1.0)*cj5*sj6))+((r01*x11732))+(((-1.0)*sj5*x11730))+(((-1.0)*r00*x11728*x11729))+(((-1.0)*r02*x11733)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x11734=(gconst25*r11);
IkReal x11735=(gconst26*r10);
CheckValue<IkReal> x11736=IKPowWithIntegerCheck(IKsign(((((2.0)*x11734*x11735))+(((-1.0)*(r12*r12)))+(((-1.0)*(x11734*x11734)))+(((-1.0)*(x11735*x11735))))),-1);
if(!x11736.valid){
continue;
}
CheckValue<IkReal> x11737 = IKatan2WithCheck(IkReal(r12),IkReal((x11734+(((-1.0)*x11735)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11737.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11736.value)))+(x11737.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x11738=IKcos(j8);
IkReal x11739=IKsin(j8);
IkReal x11740=((1.0)*gconst26);
IkReal x11741=((1.0)*cj6);
IkReal x11742=(gconst25*x11738);
IkReal x11743=(gconst25*x11739);
IkReal x11744=((1.0)*x11738);
evalcond[0]=((((-1.0)*r20*x11738*x11740))+((r21*x11742))+((r22*x11739)));
evalcond[1]=(((r01*x11742))+(((-1.0)*r00*x11738*x11740))+((r02*x11739)));
evalcond[2]=((1.0)+(((-1.0)*r10*x11738*x11740))+((r12*x11739))+((r11*x11742)));
evalcond[3]=((((-1.0)*r10*x11739*x11740))+(((-1.0)*r12*x11744))+((r11*x11743)));
evalcond[4]=((((-1.0)*r20*x11739*x11740))+((sj5*sj6))+(((-1.0)*r22*x11744))+((r21*x11743))+(((-1.0)*cj5*x11741)));
evalcond[5]=((((-1.0)*cj5*sj6))+((r01*x11743))+(((-1.0)*r00*x11739*x11740))+(((-1.0)*sj5*x11741))+(((-1.0)*r02*x11744)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x11745=((1.0)*gconst26);
CheckValue<IkReal> x11746 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x11745))+((gconst25*r01)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11746.valid){
continue;
}
CheckValue<IkReal> x11747=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11745))+(((-1.0)*gconst25*r20)))),-1);
if(!x11747.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x11746.value)+(((1.5707963267949)*(x11747.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x11748=IKcos(j8);
IkReal x11749=IKsin(j8);
IkReal x11750=((1.0)*gconst26);
IkReal x11751=((1.0)*cj6);
IkReal x11752=(gconst25*x11748);
IkReal x11753=(gconst25*x11749);
IkReal x11754=((1.0)*x11748);
evalcond[0]=((((-1.0)*r20*x11748*x11750))+((r21*x11752))+((r22*x11749)));
evalcond[1]=((((-1.0)*r00*x11748*x11750))+((r02*x11749))+((r01*x11752)));
evalcond[2]=((1.0)+((r11*x11752))+(((-1.0)*r10*x11748*x11750))+((r12*x11749)));
evalcond[3]=((((-1.0)*r12*x11754))+((r11*x11753))+(((-1.0)*r10*x11749*x11750)));
evalcond[4]=(((sj5*sj6))+(((-1.0)*r22*x11754))+(((-1.0)*cj5*x11751))+((r21*x11753))+(((-1.0)*r20*x11749*x11750)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*r00*x11749*x11750))+(((-1.0)*sj5*x11751))+(((-1.0)*r02*x11754))+((r01*x11753)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
CheckValue<IkReal> x11757 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11757.valid){
continue;
}
IkReal x11755=((-1.0)*(x11757.value));
IkReal x11756=x11621;
sj4=0;
cj4=1.0;
j4=0;
sj9=gconst25;
cj9=gconst26;
j9=x11755;
sj7=0;
cj7=1.0;
j7=0;
IkReal gconst24=x11755;
IkReal gconst25=((-1.0)*r01*x11756);
IkReal gconst26=(r00*x11756);
j8eval[0]=1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[4];
CheckValue<IkReal> x11760 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11760.valid){
continue;
}
IkReal x11758=((-1.0)*(x11760.value));
IkReal x11759=x11621;
sj4=0;
cj4=1.0;
j4=0;
sj9=gconst25;
cj9=gconst26;
j9=x11758;
sj7=0;
cj7=1.0;
j7=0;
IkReal gconst24=x11758;
IkReal gconst25=((-1.0)*r01*x11759);
IkReal gconst26=(r00*x11759);
IkReal x11761=((1.0)+(((-1.0)*(r02*r02))));
CheckValue<IkReal> x11765=IKPowWithIntegerCheck(x11761,-1);
if(!x11765.valid){
continue;
}
IkReal x11762=x11765.value;
IkReal x11763=((1.0)*x11762);
IkReal x11764=((((-1.0)*x11763*(r00*r00)*(r10*r10)))+(((-1.0)*x11763*(r01*r01)*(r11*r11)))+(((-2.0)*r00*r01*r10*r11*x11762))+(((-1.0)*(r12*r12))));
j8eval[0]=x11764;
j8eval[1]=IKsign(x11764);
j8eval[2]=r12;
j8eval[3]=x11761;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
CheckValue<IkReal> x11768 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11768.valid){
continue;
}
IkReal x11766=((-1.0)*(x11768.value));
IkReal x11767=x11621;
sj4=0;
cj4=1.0;
j4=0;
sj9=gconst25;
cj9=gconst26;
j9=x11766;
sj7=0;
cj7=1.0;
j7=0;
IkReal gconst24=x11766;
IkReal gconst25=((-1.0)*r01*x11767);
IkReal gconst26=(r00*x11767);
IkReal x11769=r02*r02;
IkReal x11770=(cj5*cj6*r12);
IkReal x11771=(r12*sj5*sj6);
CheckValue<IkReal> x11775=IKPowWithIntegerCheck(((-1.0)+x11769),-1);
if(!x11775.valid){
continue;
}
IkReal x11772=x11775.value;
if((((1.0)+(((-1.0)*x11769)))) < -0.00001)
continue;
IkReal x11773=IKsqrt(((1.0)+(((-1.0)*x11769))));
IkReal x11774=(r02*x11772*x11773);
j8eval[0]=((IKabs(((((-1.0)*x11770*x11774))+((x11771*x11774)))))+(IKabs((x11770+(((-1.0)*x11771))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x11776=(gconst25*r11);
IkReal x11777=(cj5*cj6);
IkReal x11778=(sj5*sj6);
IkReal x11779=(gconst26*r10);
CheckValue<IkReal> x11780 = IKatan2WithCheck(IkReal((((r12*x11777))+(((-1.0)*r12*x11778)))),IkReal((((x11776*x11777))+(((-1.0)*x11777*x11779))+((x11778*x11779))+(((-1.0)*x11776*x11778)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11780.valid){
continue;
}
CheckValue<IkReal> x11781=IKPowWithIntegerCheck(IKsign((((gconst26*r21))+((gconst25*r20)))),-1);
if(!x11781.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x11780.value)+(((1.5707963267949)*(x11781.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x11782=IKcos(j8);
IkReal x11783=IKsin(j8);
IkReal x11784=((1.0)*sj5);
IkReal x11785=(gconst25*x11782);
IkReal x11786=(gconst26*x11783);
IkReal x11787=((1.0)*gconst26*x11782);
IkReal x11788=((1.0)*gconst25*x11783);
evalcond[0]=(((r21*x11785))+(((-1.0)*r20*x11787))+((r22*x11783)));
evalcond[1]=(((r02*x11783))+(((-1.0)*r00*x11787))+((r01*x11785)));
evalcond[2]=(((r12*x11782))+(((-1.0)*r11*x11788))+((r10*x11786)));
evalcond[3]=((1.0)+((r11*x11785))+((r12*x11783))+(((-1.0)*r10*x11787)));
evalcond[4]=(((r02*x11782))+(((-1.0)*sj6*x11784))+((cj5*cj6))+(((-1.0)*r01*x11788))+((r00*x11786)));
evalcond[5]=((((-1.0)*cj5*sj6))+((r20*x11786))+(((-1.0)*r21*x11788))+((r22*x11782))+(((-1.0)*cj6*x11784)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x11789=(gconst25*r11);
IkReal x11790=(gconst26*r10);
CheckValue<IkReal> x11791=IKPowWithIntegerCheck(IKsign(((((2.0)*x11789*x11790))+(((-1.0)*(x11790*x11790)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x11789*x11789))))),-1);
if(!x11791.valid){
continue;
}
CheckValue<IkReal> x11792 = IKatan2WithCheck(IkReal(r12),IkReal((x11789+(((-1.0)*x11790)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11792.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11791.value)))+(x11792.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x11793=IKcos(j8);
IkReal x11794=IKsin(j8);
IkReal x11795=((1.0)*sj5);
IkReal x11796=(gconst25*x11793);
IkReal x11797=(gconst26*x11794);
IkReal x11798=((1.0)*gconst26*x11793);
IkReal x11799=((1.0)*gconst25*x11794);
evalcond[0]=((((-1.0)*r20*x11798))+((r22*x11794))+((r21*x11796)));
evalcond[1]=(((r02*x11794))+(((-1.0)*r00*x11798))+((r01*x11796)));
evalcond[2]=(((r12*x11793))+((r10*x11797))+(((-1.0)*r11*x11799)));
evalcond[3]=((1.0)+((r12*x11794))+((r11*x11796))+(((-1.0)*r10*x11798)));
evalcond[4]=(((r02*x11793))+(((-1.0)*r01*x11799))+((cj5*cj6))+(((-1.0)*sj6*x11795))+((r00*x11797)));
evalcond[5]=((((-1.0)*cj5*sj6))+((r20*x11797))+(((-1.0)*cj6*x11795))+((r22*x11793))+(((-1.0)*r21*x11799)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x11800=((1.0)*gconst26);
CheckValue<IkReal> x11801 = IKatan2WithCheck(IkReal((((gconst25*r01))+(((-1.0)*r00*x11800)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11801.valid){
continue;
}
CheckValue<IkReal> x11802=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11800))+(((-1.0)*gconst25*r20)))),-1);
if(!x11802.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x11801.value)+(((1.5707963267949)*(x11802.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x11803=IKcos(j8);
IkReal x11804=IKsin(j8);
IkReal x11805=((1.0)*sj5);
IkReal x11806=(gconst25*x11803);
IkReal x11807=(gconst26*x11804);
IkReal x11808=((1.0)*gconst26*x11803);
IkReal x11809=((1.0)*gconst25*x11804);
evalcond[0]=(((r21*x11806))+((r22*x11804))+(((-1.0)*r20*x11808)));
evalcond[1]=(((r02*x11804))+((r01*x11806))+(((-1.0)*r00*x11808)));
evalcond[2]=((((-1.0)*r11*x11809))+((r10*x11807))+((r12*x11803)));
evalcond[3]=((1.0)+(((-1.0)*r10*x11808))+((r11*x11806))+((r12*x11804)));
evalcond[4]=(((r00*x11807))+(((-1.0)*sj6*x11805))+((r02*x11803))+((cj5*cj6))+(((-1.0)*r01*x11809)));
evalcond[5]=((((-1.0)*cj5*sj6))+((r22*x11803))+(((-1.0)*r21*x11809))+((r20*x11807))+(((-1.0)*cj6*x11805)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
CheckValue<IkReal> x11812 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11812.valid){
continue;
}
IkReal x11810=((-1.0)*(x11812.value));
IkReal x11811=x11621;
sj4=0;
cj4=1.0;
j4=0;
sj9=gconst25;
cj9=gconst26;
j9=x11810;
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
IkReal gconst24=x11810;
IkReal gconst25=((-1.0)*r01*x11811);
IkReal gconst26=(r00*x11811);
j8eval[0]=1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[4];
CheckValue<IkReal> x11815 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11815.valid){
continue;
}
IkReal x11813=((-1.0)*(x11815.value));
IkReal x11814=x11621;
sj4=0;
cj4=1.0;
j4=0;
sj9=gconst25;
cj9=gconst26;
j9=x11813;
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
IkReal gconst24=x11813;
IkReal gconst25=((-1.0)*r01*x11814);
IkReal gconst26=(r00*x11814);
IkReal x11816=((1.0)+(((-1.0)*(r02*r02))));
CheckValue<IkReal> x11820=IKPowWithIntegerCheck(x11816,-1);
if(!x11820.valid){
continue;
}
IkReal x11817=x11820.value;
IkReal x11818=((1.0)*x11817);
IkReal x11819=((((-2.0)*r00*r01*r10*r11*x11817))+(((-1.0)*x11818*(r00*r00)*(r10*r10)))+(((-1.0)*x11818*(r01*r01)*(r11*r11)))+(((-1.0)*(r12*r12))));
j8eval[0]=x11819;
j8eval[1]=IKsign(x11819);
j8eval[2]=r12;
j8eval[3]=x11816;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
CheckValue<IkReal> x11823 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11823.valid){
continue;
}
IkReal x11821=((-1.0)*(x11823.value));
IkReal x11822=x11621;
sj4=0;
cj4=1.0;
j4=0;
sj9=gconst25;
cj9=gconst26;
j9=x11821;
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
IkReal gconst24=x11821;
IkReal gconst25=((-1.0)*r01*x11822);
IkReal gconst26=(r00*x11822);
IkReal x11824=((1.0)+(((-1.0)*(r02*r02))));
IkReal x11825=(cj5*r22*sj6);
IkReal x11826=(cj6*r22*sj5);
CheckValue<IkReal> x11832=IKPowWithIntegerCheck(x11824,-1);
if(!x11832.valid){
continue;
}
IkReal x11827=x11832.value;
IkReal x11828=((1.0)*x11827);
IkReal x11829=x11621;
IkReal x11830=(r02*x11829);
IkReal x11831=((((-1.0)*x11828*(r01*r01)*(r21*r21)))+(((-1.0)*(r22*r22)))+(((-1.0)*x11828*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x11827)));
j8eval[0]=x11831;
j8eval[1]=((IKabs((x11826+x11825)))+(IKabs((((x11825*x11830))+((x11826*x11830))))));
j8eval[2]=IKsign(x11831);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x11833=(gconst25*r21);
IkReal x11834=(cj6*sj5);
IkReal x11835=(gconst26*r20);
IkReal x11836=(cj5*sj6);
CheckValue<IkReal> x11837 = IKatan2WithCheck(IkReal(((((-1.0)*x11833*x11834))+(((-1.0)*x11833*x11836))+((x11835*x11836))+((x11834*x11835)))),IkReal((((r22*x11834))+((r22*x11836)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11837.valid){
continue;
}
CheckValue<IkReal> x11838=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x11833*x11833)))+(((-1.0)*(x11835*x11835)))+(((2.0)*x11833*x11835))+(((-1.0)*(r22*r22))))),-1);
if(!x11838.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x11837.value)+(((1.5707963267949)*(x11838.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x11839=IKcos(j8);
IkReal x11840=IKsin(j8);
IkReal x11841=((1.0)*gconst26);
IkReal x11842=((1.0)*sj5);
IkReal x11843=(gconst25*x11839);
IkReal x11844=(gconst25*x11840);
IkReal x11845=((1.0)*x11839);
evalcond[0]=(((r21*x11843))+((r22*x11840))+(((-1.0)*r20*x11839*x11841)));
evalcond[1]=(((r01*x11843))+(((-1.0)*r00*x11839*x11841))+((r02*x11840)));
evalcond[2]=((1.0)+(((-1.0)*r10*x11839*x11841))+((r11*x11843))+((r12*x11840)));
evalcond[3]=((((-1.0)*r10*x11840*x11841))+((r11*x11844))+(((-1.0)*r12*x11845)));
evalcond[4]=((((-1.0)*r02*x11845))+(((-1.0)*sj6*x11842))+(((-1.0)*r00*x11840*x11841))+((cj5*cj6))+((r01*x11844)));
evalcond[5]=((((-1.0)*cj5*sj6))+((r21*x11844))+(((-1.0)*r20*x11840*x11841))+(((-1.0)*cj6*x11842))+(((-1.0)*r22*x11845)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x11846=(gconst25*r11);
IkReal x11847=(gconst26*r10);
CheckValue<IkReal> x11848 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x11847))+x11846)),IKFAST_ATAN2_MAGTHRESH);
if(!x11848.valid){
continue;
}
CheckValue<IkReal> x11849=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x11847*x11847)))+(((-1.0)*(x11846*x11846)))+(((-1.0)*(r12*r12)))+(((2.0)*x11846*x11847)))),-1);
if(!x11849.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x11848.value)+(((1.5707963267949)*(x11849.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x11850=IKcos(j8);
IkReal x11851=IKsin(j8);
IkReal x11852=((1.0)*gconst26);
IkReal x11853=((1.0)*sj5);
IkReal x11854=(gconst25*x11850);
IkReal x11855=(gconst25*x11851);
IkReal x11856=((1.0)*x11850);
evalcond[0]=(((r21*x11854))+((r22*x11851))+(((-1.0)*r20*x11850*x11852)));
evalcond[1]=(((r01*x11854))+(((-1.0)*r00*x11850*x11852))+((r02*x11851)));
evalcond[2]=((1.0)+(((-1.0)*r10*x11850*x11852))+((r11*x11854))+((r12*x11851)));
evalcond[3]=((((-1.0)*r10*x11851*x11852))+((r11*x11855))+(((-1.0)*r12*x11856)));
evalcond[4]=((((-1.0)*r02*x11856))+(((-1.0)*sj6*x11853))+((r01*x11855))+((cj5*cj6))+(((-1.0)*r00*x11851*x11852)));
evalcond[5]=(((r21*x11855))+(((-1.0)*cj5*sj6))+(((-1.0)*cj6*x11853))+(((-1.0)*r20*x11851*x11852))+(((-1.0)*r22*x11856)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x11857=((1.0)*gconst26);
CheckValue<IkReal> x11858 = IKatan2WithCheck(IkReal((((gconst25*r01))+(((-1.0)*r00*x11857)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11858.valid){
continue;
}
CheckValue<IkReal> x11859=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11857))+(((-1.0)*gconst25*r20)))),-1);
if(!x11859.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x11858.value)+(((1.5707963267949)*(x11859.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x11860=IKcos(j8);
IkReal x11861=IKsin(j8);
IkReal x11862=((1.0)*gconst26);
IkReal x11863=((1.0)*sj5);
IkReal x11864=(gconst25*x11860);
IkReal x11865=(gconst25*x11861);
IkReal x11866=((1.0)*x11860);
evalcond[0]=((((-1.0)*r20*x11860*x11862))+((r22*x11861))+((r21*x11864)));
evalcond[1]=(((r02*x11861))+((r01*x11864))+(((-1.0)*r00*x11860*x11862)));
evalcond[2]=((1.0)+(((-1.0)*r10*x11860*x11862))+((r12*x11861))+((r11*x11864)));
evalcond[3]=((((-1.0)*r10*x11861*x11862))+((r11*x11865))+(((-1.0)*r12*x11866)));
evalcond[4]=((((-1.0)*r00*x11861*x11862))+((r01*x11865))+(((-1.0)*sj6*x11863))+((cj5*cj6))+(((-1.0)*r02*x11866)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*r22*x11866))+(((-1.0)*cj6*x11863))+(((-1.0)*r20*x11861*x11862))+((r21*x11865)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[2];
IkReal x11867=((-1.0)*r01);
CheckValue<IkReal> x11869 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11869.valid){
continue;
}
IkReal x11868=((-1.0)*(x11869.value));
sj4=0;
cj4=1.0;
j4=0;
sj9=gconst25;
cj9=gconst26;
j9=x11868;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*pz*r00);
rxp1_0=(pz*r11);
rxp1_1=(pz*x11867);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal gconst24=x11868;
IkReal gconst25=x11867;
IkReal gconst26=r00;
IkReal x11870=(r01*r11);
IkReal x11871=(r00*r10);
j8eval[0]=(((sj7*x11871))+((sj7*x11870)));
j8eval[1]=((((-1.0)*x11871))+(((-1.0)*x11870)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x11872=((-1.0)*r01);
CheckValue<IkReal> x11874 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11874.valid){
continue;
}
IkReal x11873=((-1.0)*(x11874.value));
sj4=0;
cj4=1.0;
j4=0;
sj9=gconst25;
cj9=gconst26;
j9=x11873;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*pz*r00);
rxp1_0=(pz*r11);
rxp1_1=(pz*x11872);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal gconst24=x11873;
IkReal gconst25=x11872;
IkReal gconst26=r00;
IkReal x11875=(r01*r11);
IkReal x11876=(r00*r10);
j8eval[0]=(((cj7*x11876))+((cj7*x11875)));
j8eval[1]=((((-1.0)*x11875))+(((-1.0)*x11876)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
IkReal x11877=((-1.0)*r01);
CheckValue<IkReal> x11879 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x11879.valid){
continue;
}
IkReal x11878=((-1.0)*(x11879.value));
sj4=0;
cj4=1.0;
j4=0;
sj9=gconst25;
cj9=gconst26;
j9=x11878;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*pz*r00);
rxp1_0=(pz*r11);
rxp1_1=(pz*x11877);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal gconst24=x11878;
IkReal gconst25=x11877;
IkReal gconst26=r00;
j8eval[0]=(((cj7*r01*r11))+((cj7*r00*r10)));
j8eval[1]=cj7;
j8eval[2]=r22;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x11880=((1.0)*gconst25);
CheckValue<IkReal> x11881=IKPowWithIntegerCheck(((((-1.0)*cj7*r11*x11880))+((cj7*gconst26*r10))),-1);
if(!x11881.valid){
continue;
}
CheckValue<IkReal> x11882=IKPowWithIntegerCheck(cj7,-1);
if(!x11882.valid){
continue;
}
CheckValue<IkReal> x11883=IKPowWithIntegerCheck(r22,-1);
if(!x11883.valid){
continue;
}
if( IKabs(((x11881.value)*(((((-1.0)*gconst26*r11*sj7))+(((-1.0)*r10*sj7*x11880)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11882.value)*(x11883.value)*((((cj6*sj5))+((cj5*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11881.value)*(((((-1.0)*gconst26*r11*sj7))+(((-1.0)*r10*sj7*x11880))))))+IKsqr(((x11882.value)*(x11883.value)*((((cj6*sj5))+((cj5*sj6))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((x11881.value)*(((((-1.0)*gconst26*r11*sj7))+(((-1.0)*r10*sj7*x11880))))), ((x11882.value)*(x11883.value)*((((cj6*sj5))+((cj5*sj6))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x11884=IKcos(j8);
IkReal x11885=IKsin(j8);
IkReal x11886=(gconst25*sj7);
IkReal x11887=((1.0)*cj6);
IkReal x11888=((1.0)*cj7);
IkReal x11889=(gconst26*r11);
IkReal x11890=(sj5*sj6);
IkReal x11891=(gconst26*r01);
IkReal x11892=((1.0)*cj5*sj6);
IkReal x11893=(sj5*x11887);
IkReal x11894=(gconst25*x11884);
IkReal x11895=(gconst26*x11885);
IkReal x11896=((1.0)*x11885);
IkReal x11897=(gconst25*x11885);
IkReal x11898=(r22*x11884);
IkReal x11899=((1.0)*gconst26*x11884);
IkReal x11900=(x11892+x11893);
evalcond[0]=(r22*x11885);
evalcond[1]=(((r01*x11894))+(((-1.0)*r00*x11899)));
evalcond[2]=((((-1.0)*cj5*x11887))+((sj7*x11898))+x11890);
evalcond[3]=((1.0)+(((-1.0)*r10*x11899))+((r11*x11894)));
evalcond[4]=(((cj7*x11898))+(((-1.0)*x11900)));
evalcond[5]=((((-1.0)*r11*x11888*x11897))+((cj7*r10*x11895))+((r10*x11886))+((sj7*x11889)));
evalcond[6]=(((r10*sj7*x11895))+(((-1.0)*r11*x11886*x11896))+(((-1.0)*x11888*x11889))+(((-1.0)*gconst25*r10*x11888)));
evalcond[7]=((((-1.0)*x11890))+((r00*x11886))+((sj7*x11891))+((cj5*cj6))+((cj7*r00*x11895))+(((-1.0)*r01*x11888*x11897)));
evalcond[8]=((((-1.0)*r01*x11886*x11896))+(((-1.0)*gconst25*r00*x11888))+((r00*sj7*x11895))+(((-1.0)*x11888*x11891))+(((-1.0)*x11900)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x11901=(gconst25*r11);
IkReal x11902=(gconst26*r10);
IkReal x11903=((1.0)*sj7);
CheckValue<IkReal> x11904=IKPowWithIntegerCheck(((((-1.0)*cj7*x11901))+((cj7*x11902))),-1);
if(!x11904.valid){
continue;
}
CheckValue<IkReal> x11905=IKPowWithIntegerCheck((x11901+(((-1.0)*x11902))),-1);
if(!x11905.valid){
continue;
}
if( IKabs(((x11904.value)*(((((-1.0)*gconst26*r11*x11903))+(((-1.0)*gconst25*r10*x11903)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x11905.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11904.value)*(((((-1.0)*gconst26*r11*x11903))+(((-1.0)*gconst25*r10*x11903))))))+IKsqr(((-1.0)*(x11905.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((x11904.value)*(((((-1.0)*gconst26*r11*x11903))+(((-1.0)*gconst25*r10*x11903))))), ((-1.0)*(x11905.value)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x11906=IKcos(j8);
IkReal x11907=IKsin(j8);
IkReal x11908=(gconst25*sj7);
IkReal x11909=((1.0)*cj6);
IkReal x11910=((1.0)*cj7);
IkReal x11911=(gconst26*r11);
IkReal x11912=(sj5*sj6);
IkReal x11913=(gconst26*r01);
IkReal x11914=((1.0)*cj5*sj6);
IkReal x11915=(sj5*x11909);
IkReal x11916=(gconst25*x11906);
IkReal x11917=(gconst26*x11907);
IkReal x11918=((1.0)*x11907);
IkReal x11919=(gconst25*x11907);
IkReal x11920=(r22*x11906);
IkReal x11921=((1.0)*gconst26*x11906);
IkReal x11922=(x11915+x11914);
evalcond[0]=(r22*x11907);
evalcond[1]=(((r01*x11916))+(((-1.0)*r00*x11921)));
evalcond[2]=(x11912+((sj7*x11920))+(((-1.0)*cj5*x11909)));
evalcond[3]=((1.0)+((r11*x11916))+(((-1.0)*r10*x11921)));
evalcond[4]=((((-1.0)*x11922))+((cj7*x11920)));
evalcond[5]=((((-1.0)*r11*x11910*x11919))+((cj7*r10*x11917))+((sj7*x11911))+((r10*x11908)));
evalcond[6]=((((-1.0)*gconst25*r10*x11910))+(((-1.0)*r11*x11908*x11918))+((r10*sj7*x11917))+(((-1.0)*x11910*x11911)));
evalcond[7]=((((-1.0)*x11912))+((r00*x11908))+((cj7*r00*x11917))+((sj7*x11913))+(((-1.0)*r01*x11910*x11919))+((cj5*cj6)));
evalcond[8]=((((-1.0)*x11922))+(((-1.0)*gconst25*r00*x11910))+(((-1.0)*r01*x11908*x11918))+(((-1.0)*x11910*x11913))+((r00*sj7*x11917)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x11923=(gconst26*r10);
IkReal x11924=(gconst25*r11);
CheckValue<IkReal> x11925=IKPowWithIntegerCheck((((sj7*x11923))+(((-1.0)*sj7*x11924))),-1);
if(!x11925.valid){
continue;
}
CheckValue<IkReal> x11926=IKPowWithIntegerCheck((x11924+(((-1.0)*x11923))),-1);
if(!x11926.valid){
continue;
}
if( IKabs(((x11925.value)*((((cj7*gconst25*r10))+((cj7*gconst26*r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x11926.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11925.value)*((((cj7*gconst25*r10))+((cj7*gconst26*r11))))))+IKsqr(((-1.0)*(x11926.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((x11925.value)*((((cj7*gconst25*r10))+((cj7*gconst26*r11))))), ((-1.0)*(x11926.value)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x11927=IKcos(j8);
IkReal x11928=IKsin(j8);
IkReal x11929=(gconst25*sj7);
IkReal x11930=((1.0)*cj6);
IkReal x11931=((1.0)*cj7);
IkReal x11932=(gconst26*r11);
IkReal x11933=(sj5*sj6);
IkReal x11934=(gconst26*r01);
IkReal x11935=((1.0)*cj5*sj6);
IkReal x11936=(sj5*x11930);
IkReal x11937=(gconst25*x11927);
IkReal x11938=(gconst26*x11928);
IkReal x11939=((1.0)*x11928);
IkReal x11940=(gconst25*x11928);
IkReal x11941=(r22*x11927);
IkReal x11942=((1.0)*gconst26*x11927);
IkReal x11943=(x11935+x11936);
evalcond[0]=(r22*x11928);
evalcond[1]=((((-1.0)*r00*x11942))+((r01*x11937)));
evalcond[2]=(x11933+(((-1.0)*cj5*x11930))+((sj7*x11941)));
evalcond[3]=((1.0)+((r11*x11937))+(((-1.0)*r10*x11942)));
evalcond[4]=((((-1.0)*x11943))+((cj7*x11941)));
evalcond[5]=(((r10*x11929))+((cj7*r10*x11938))+((sj7*x11932))+(((-1.0)*r11*x11931*x11940)));
evalcond[6]=((((-1.0)*gconst25*r10*x11931))+(((-1.0)*x11931*x11932))+(((-1.0)*r11*x11929*x11939))+((r10*sj7*x11938)));
evalcond[7]=(((cj7*r00*x11938))+(((-1.0)*r01*x11931*x11940))+((cj5*cj6))+((sj7*x11934))+(((-1.0)*x11933))+((r00*x11929)));
evalcond[8]=((((-1.0)*x11943))+(((-1.0)*x11931*x11934))+(((-1.0)*gconst25*r00*x11931))+((r00*sj7*x11938))+(((-1.0)*r01*x11929*x11939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x11944=gconst25*gconst25;
IkReal x11945=gconst26*gconst26;
IkReal x11946=(r21*sj7);
IkReal x11947=(gconst25*gconst26);
IkReal x11948=(cj7*r11);
IkReal x11949=((1.0)*sj7);
IkReal x11950=(r10*r20);
CheckValue<IkReal> x11951=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj7*r10*r21*x11947))+((cj7*x11945*x11950))+((r21*x11944*x11948))+((cj7*r12*r22))+(((-1.0)*r20*x11947*x11948)))),-1);
if(!x11951.valid){
continue;
}
CheckValue<IkReal> x11952 = IKatan2WithCheck(IkReal((((r11*x11946*x11947))+((r10*x11944*x11946))+(((-1.0)*x11947*x11949*x11950))+(((-1.0)*r11*r20*x11945*x11949)))),IkReal(((((-1.0)*gconst26*r11*r22*x11949))+(((-1.0)*gconst25*r10*r22*x11949)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11952.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11951.value)))+(x11952.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x11953=IKcos(j8);
IkReal x11954=IKsin(j8);
IkReal x11955=(gconst26*r20);
IkReal x11956=(gconst25*sj7);
IkReal x11957=((1.0)*sj5);
IkReal x11958=((1.0)*cj7);
IkReal x11959=(gconst26*r00);
IkReal x11960=(gconst26*r11);
IkReal x11961=(cj5*cj6);
IkReal x11962=((1.0)*gconst25);
IkReal x11963=(gconst26*r01);
IkReal x11964=(gconst26*r10);
IkReal x11965=(gconst26*r21);
IkReal x11966=((1.0)*cj5*sj6);
IkReal x11967=(cj6*x11957);
IkReal x11968=(sj7*x11954);
IkReal x11969=(sj7*x11953);
IkReal x11970=((1.0)*x11953);
IkReal x11971=(gconst25*x11953);
IkReal x11972=(cj7*x11953);
IkReal x11973=(gconst25*x11954);
IkReal x11974=(cj7*x11954);
IkReal x11975=(x11966+x11967);
evalcond[0]=((((-1.0)*x11955*x11970))+((r22*x11954))+((r21*x11971)));
evalcond[1]=(((r01*x11971))+(((-1.0)*x11959*x11970))+((r02*x11954)));
evalcond[2]=((1.0)+((r12*x11954))+((r11*x11971))+(((-1.0)*x11964*x11970)));
evalcond[3]=(((r12*x11972))+((r10*x11956))+((sj7*x11960))+(((-1.0)*r11*x11958*x11973))+((x11964*x11974)));
evalcond[4]=((((-1.0)*x11958*x11960))+(((-1.0)*r11*x11954*x11956))+((r12*x11969))+((x11964*x11968))+(((-1.0)*gconst25*r10*x11958)));
evalcond[5]=(x11961+(((-1.0)*r01*x11958*x11973))+(((-1.0)*sj6*x11957))+((x11959*x11974))+((r02*x11972))+((sj7*x11963))+((r00*x11956)));
evalcond[6]=(((r20*x11956))+(((-1.0)*x11975))+((x11955*x11974))+((sj7*x11965))+(((-1.0)*r21*x11958*x11973))+((r22*x11972)));
evalcond[7]=((((-1.0)*x11961))+(((-1.0)*r21*x11954*x11956))+(((-1.0)*x11958*x11965))+((sj5*sj6))+((x11955*x11968))+(((-1.0)*gconst25*r20*x11958))+((r22*x11969)));
evalcond[8]=((((-1.0)*x11958*x11963))+((x11959*x11968))+((r02*x11969))+(((-1.0)*r01*x11954*x11956))+(((-1.0)*x11975))+(((-1.0)*gconst25*r00*x11958)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x11976=gconst25*gconst25;
IkReal x11977=gconst26*gconst26;
IkReal x11978=(r20*sj7);
IkReal x11979=(cj7*r21);
IkReal x11980=(r21*sj7);
IkReal x11981=((1.0)*r10);
IkReal x11982=(cj7*r11);
IkReal x11983=(cj7*gconst25*r10);
IkReal x11984=((1.0)*gconst25*gconst26*r11);
CheckValue<IkReal> x11985=IKPowWithIntegerCheck(IKsign((((r11*x11976*x11980))+(((-1.0)*x11978*x11984))+((r12*r22*sj7))+(((-1.0)*gconst25*gconst26*x11980*x11981))+((r10*x11977*x11978)))),-1);
if(!x11985.valid){
continue;
}
CheckValue<IkReal> x11986 = IKatan2WithCheck(IkReal(((((-1.0)*x11979*x11984))+((r20*x11977*x11982))+(((-1.0)*x11976*x11979*x11981))+((gconst26*r20*x11983)))),IkReal((((gconst26*r22*x11982))+((r22*x11983)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11986.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11985.value)))+(x11986.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x11987=IKcos(j8);
IkReal x11988=IKsin(j8);
IkReal x11989=(gconst26*r20);
IkReal x11990=(gconst25*sj7);
IkReal x11991=((1.0)*sj5);
IkReal x11992=((1.0)*cj7);
IkReal x11993=(gconst26*r00);
IkReal x11994=(gconst26*r11);
IkReal x11995=(cj5*cj6);
IkReal x11996=((1.0)*gconst25);
IkReal x11997=(gconst26*r01);
IkReal x11998=(gconst26*r10);
IkReal x11999=(gconst26*r21);
IkReal x12000=((1.0)*cj5*sj6);
IkReal x12001=(cj6*x11991);
IkReal x12002=(sj7*x11988);
IkReal x12003=(sj7*x11987);
IkReal x12004=((1.0)*x11987);
IkReal x12005=(gconst25*x11987);
IkReal x12006=(cj7*x11987);
IkReal x12007=(gconst25*x11988);
IkReal x12008=(cj7*x11988);
IkReal x12009=(x12000+x12001);
evalcond[0]=((((-1.0)*x11989*x12004))+((r22*x11988))+((r21*x12005)));
evalcond[1]=(((r02*x11988))+((r01*x12005))+(((-1.0)*x11993*x12004)));
evalcond[2]=((1.0)+(((-1.0)*x11998*x12004))+((r12*x11988))+((r11*x12005)));
evalcond[3]=(((sj7*x11994))+((x11998*x12008))+((r12*x12006))+(((-1.0)*r11*x11992*x12007))+((r10*x11990)));
evalcond[4]=((((-1.0)*r11*x11988*x11990))+(((-1.0)*x11992*x11994))+((x11998*x12002))+(((-1.0)*gconst25*r10*x11992))+((r12*x12003)));
evalcond[5]=(x11995+((sj7*x11997))+(((-1.0)*sj6*x11991))+(((-1.0)*r01*x11992*x12007))+((r00*x11990))+((x11993*x12008))+((r02*x12006)));
evalcond[6]=(((r20*x11990))+((sj7*x11999))+(((-1.0)*x12009))+((r22*x12006))+((x11989*x12008))+(((-1.0)*r21*x11992*x12007)));
evalcond[7]=((((-1.0)*x11992*x11999))+((sj5*sj6))+(((-1.0)*r21*x11988*x11990))+((r22*x12003))+(((-1.0)*x11995))+((x11989*x12002))+(((-1.0)*gconst25*r20*x11992)));
evalcond[8]=((((-1.0)*x11992*x11997))+(((-1.0)*gconst25*r00*x11992))+(((-1.0)*x12009))+(((-1.0)*r01*x11988*x11990))+((x11993*x12002))+((r02*x12003)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x12010=((1.0)*gconst26);
CheckValue<IkReal> x12011 = IKatan2WithCheck(IkReal((((gconst25*r01))+(((-1.0)*r00*x12010)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12011.valid){
continue;
}
CheckValue<IkReal> x12012=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12010))+(((-1.0)*gconst25*r20)))),-1);
if(!x12012.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x12011.value)+(((1.5707963267949)*(x12012.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x12013=IKcos(j8);
IkReal x12014=IKsin(j8);
IkReal x12015=(gconst26*r20);
IkReal x12016=(gconst25*sj7);
IkReal x12017=((1.0)*sj5);
IkReal x12018=((1.0)*cj7);
IkReal x12019=(gconst26*r00);
IkReal x12020=(gconst26*r11);
IkReal x12021=(cj5*cj6);
IkReal x12022=((1.0)*gconst25);
IkReal x12023=(gconst26*r01);
IkReal x12024=(gconst26*r10);
IkReal x12025=(gconst26*r21);
IkReal x12026=((1.0)*cj5*sj6);
IkReal x12027=(cj6*x12017);
IkReal x12028=(sj7*x12014);
IkReal x12029=(sj7*x12013);
IkReal x12030=((1.0)*x12013);
IkReal x12031=(gconst25*x12013);
IkReal x12032=(cj7*x12013);
IkReal x12033=(gconst25*x12014);
IkReal x12034=(cj7*x12014);
IkReal x12035=(x12026+x12027);
evalcond[0]=((((-1.0)*x12015*x12030))+((r22*x12014))+((r21*x12031)));
evalcond[1]=((((-1.0)*x12019*x12030))+((r01*x12031))+((r02*x12014)));
evalcond[2]=((1.0)+((r12*x12014))+(((-1.0)*x12024*x12030))+((r11*x12031)));
evalcond[3]=(((r10*x12016))+((sj7*x12020))+(((-1.0)*r11*x12018*x12033))+((x12024*x12034))+((r12*x12032)));
evalcond[4]=(((r12*x12029))+(((-1.0)*r11*x12014*x12016))+((x12024*x12028))+(((-1.0)*gconst25*r10*x12018))+(((-1.0)*x12018*x12020)));
evalcond[5]=(((x12019*x12034))+(((-1.0)*sj6*x12017))+((sj7*x12023))+x12021+(((-1.0)*r01*x12018*x12033))+((r00*x12016))+((r02*x12032)));
evalcond[6]=((((-1.0)*x12035))+((x12015*x12034))+((sj7*x12025))+((r22*x12032))+((r20*x12016))+(((-1.0)*r21*x12018*x12033)));
evalcond[7]=((((-1.0)*x12021))+((sj5*sj6))+(((-1.0)*r21*x12014*x12016))+(((-1.0)*gconst25*r20*x12018))+((x12015*x12028))+((r22*x12029))+(((-1.0)*x12018*x12025)));
evalcond[8]=(((x12019*x12028))+(((-1.0)*x12035))+(((-1.0)*r01*x12014*x12016))+((r02*x12029))+(((-1.0)*gconst25*r00*x12018))+(((-1.0)*x12018*x12023)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12037 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x12037)==0){
continue;
}
IkReal x12036=pow(x12037,-0.5);
CheckValue<IkReal> x12038 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x12038.valid){
continue;
}
IkReal gconst27=((3.14159265358979)+(((-1.0)*(x12038.value))));
IkReal gconst28=((1.0)*r01*x12036);
IkReal gconst29=((-1.0)*r00*x12036);
CheckValue<IkReal> x12039 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x12039.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x12039.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[4];
CheckValue<IkReal> x12042 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x12042.valid){
continue;
}
IkReal x12040=((1.0)*(x12042.value));
IkReal x12041=x12036;
sj4=0;
cj4=1.0;
j4=0;
sj9=gconst28;
cj9=gconst29;
j9=((3.14159265)+(((-1.0)*x12040)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x12040)));
IkReal gconst28=((1.0)*r01*x12041);
IkReal gconst29=((-1.0)*r00*x12041);
j8eval[0]=0;
j8eval[1]=0;
j8eval[2]=r22;
j8eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
CheckValue<IkReal> x12045 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x12045.valid){
continue;
}
IkReal x12043=((1.0)*(x12045.value));
IkReal x12044=x12036;
sj4=0;
cj4=1.0;
j4=0;
sj9=gconst28;
cj9=gconst29;
j9=((3.14159265)+(((-1.0)*x12043)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x12043)));
IkReal gconst28=((1.0)*r01*x12044);
IkReal gconst29=((-1.0)*r00*x12044);
j8eval[0]=1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x12046=gconst28*gconst28;
IkReal x12047=gconst29*gconst29;
IkReal x12048=(r11*sj7);
IkReal x12049=(cj7*r10);
IkReal x12050=(gconst28*gconst29);
IkReal x12051=(r10*sj7);
IkReal x12052=((1.0)*r20);
IkReal x12053=((1.0)*r22);
IkReal x12054=(cj7*r11);
IkReal x12055=(r20*x12047);
IkReal x12056=(r21*x12046);
CheckValue<IkReal> x12057=IKPowWithIntegerCheck(IKsign((((cj7*r12*r22))+(((-1.0)*x12050*x12052*x12054))+(((-1.0)*r21*x12049*x12050))+((x12049*x12055))+((x12054*x12056)))),-1);
if(!x12057.valid){
continue;
}
CheckValue<IkReal> x12058 = IKatan2WithCheck(IkReal(((((-1.0)*x12047*x12048*x12052))+((r21*x12048*x12050))+(((-1.0)*x12050*x12051*x12052))+((x12051*x12056)))),IkReal(((((-1.0)*gconst28*x12051*x12053))+(((-1.0)*gconst29*x12048*x12053)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12058.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12057.value)))+(x12058.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x12059=IKcos(j8);
IkReal x12060=IKsin(j8);
IkReal x12061=((1.0)*cj7);
IkReal x12062=(gconst29*sj7);
IkReal x12063=((1.0)*sj7);
IkReal x12064=((1.0)*sj5);
IkReal x12065=(gconst28*r00);
IkReal x12066=(cj7*gconst29);
IkReal x12067=(cj5*cj6);
IkReal x12068=(gconst28*r10);
IkReal x12069=(gconst28*r20);
IkReal x12070=((1.0)*cj5*sj6);
IkReal x12071=(cj6*x12064);
IkReal x12072=(gconst28*x12060);
IkReal x12073=(r10*x12060);
IkReal x12074=(gconst28*x12059);
IkReal x12075=(r20*x12060);
IkReal x12076=(cj7*x12059);
IkReal x12077=(sj7*x12059);
IkReal x12078=(r00*x12060);
IkReal x12079=((1.0)*gconst29*x12059);
IkReal x12080=(x12071+x12070);
evalcond[0]=(((r22*x12060))+(((-1.0)*r20*x12079))+((r21*x12074)));
evalcond[1]=(((r02*x12060))+(((-1.0)*r00*x12079))+((r01*x12074)));
evalcond[2]=((1.0)+((r11*x12074))+((r12*x12060))+(((-1.0)*r10*x12079)));
evalcond[3]=(((x12066*x12073))+(((-1.0)*r11*x12061*x12072))+((sj7*x12068))+((r11*x12062))+((r12*x12076)));
evalcond[4]=((((-1.0)*x12061*x12068))+(((-1.0)*gconst29*r11*x12061))+((x12062*x12073))+(((-1.0)*r11*x12063*x12072))+((r12*x12077)));
evalcond[5]=(((r01*x12062))+((x12066*x12078))+(((-1.0)*sj6*x12064))+((sj7*x12065))+x12067+((r02*x12076))+(((-1.0)*r01*x12061*x12072)));
evalcond[6]=(((r21*x12062))+(((-1.0)*x12080))+((x12066*x12075))+((r22*x12076))+((sj7*x12069))+(((-1.0)*r21*x12061*x12072)));
evalcond[7]=((((-1.0)*x12061*x12069))+(((-1.0)*x12067))+((sj5*sj6))+(((-1.0)*gconst29*r21*x12061))+((x12062*x12075))+((r22*x12077))+(((-1.0)*r21*x12063*x12072)));
evalcond[8]=((((-1.0)*x12061*x12065))+(((-1.0)*gconst29*r01*x12061))+(((-1.0)*x12080))+((x12062*x12078))+(((-1.0)*r01*x12063*x12072))+((r02*x12077)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x12081=((1.0)*gconst29);
CheckValue<IkReal> x12082 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x12081))+((gconst28*r01)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12082.valid){
continue;
}
CheckValue<IkReal> x12083=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r20))+(((-1.0)*r21*x12081)))),-1);
if(!x12083.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x12082.value)+(((1.5707963267949)*(x12083.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x12084=IKcos(j8);
IkReal x12085=IKsin(j8);
IkReal x12086=((1.0)*cj7);
IkReal x12087=(gconst29*sj7);
IkReal x12088=((1.0)*sj7);
IkReal x12089=((1.0)*sj5);
IkReal x12090=(gconst28*r00);
IkReal x12091=(cj7*gconst29);
IkReal x12092=(cj5*cj6);
IkReal x12093=(gconst28*r10);
IkReal x12094=(gconst28*r20);
IkReal x12095=((1.0)*cj5*sj6);
IkReal x12096=(cj6*x12089);
IkReal x12097=(gconst28*x12085);
IkReal x12098=(r10*x12085);
IkReal x12099=(gconst28*x12084);
IkReal x12100=(r20*x12085);
IkReal x12101=(cj7*x12084);
IkReal x12102=(sj7*x12084);
IkReal x12103=(r00*x12085);
IkReal x12104=((1.0)*gconst29*x12084);
IkReal x12105=(x12096+x12095);
evalcond[0]=((((-1.0)*r20*x12104))+((r22*x12085))+((r21*x12099)));
evalcond[1]=(((r01*x12099))+((r02*x12085))+(((-1.0)*r00*x12104)));
evalcond[2]=((1.0)+((r11*x12099))+(((-1.0)*r10*x12104))+((r12*x12085)));
evalcond[3]=((((-1.0)*r11*x12086*x12097))+((sj7*x12093))+((r12*x12101))+((r11*x12087))+((x12091*x12098)));
evalcond[4]=((((-1.0)*r11*x12088*x12097))+(((-1.0)*x12086*x12093))+(((-1.0)*gconst29*r11*x12086))+((x12087*x12098))+((r12*x12102)));
evalcond[5]=((((-1.0)*sj6*x12089))+((r02*x12101))+((r01*x12087))+(((-1.0)*r01*x12086*x12097))+x12092+((x12091*x12103))+((sj7*x12090)));
evalcond[6]=(((x12091*x12100))+((sj7*x12094))+(((-1.0)*x12105))+((r21*x12087))+(((-1.0)*r21*x12086*x12097))+((r22*x12101)));
evalcond[7]=((((-1.0)*x12086*x12094))+(((-1.0)*x12092))+((sj5*sj6))+(((-1.0)*r21*x12088*x12097))+((x12087*x12100))+(((-1.0)*gconst29*r21*x12086))+((r22*x12102)));
evalcond[8]=((((-1.0)*x12086*x12090))+((r02*x12102))+(((-1.0)*r01*x12088*x12097))+(((-1.0)*x12105))+(((-1.0)*gconst29*r01*x12086))+((x12087*x12103)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x12106 = IKatan2WithCheck(IkReal(((((-1.0)*gconst29*r20))+((gconst28*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12106.valid){
continue;
}
CheckValue<IkReal> x12107=IKPowWithIntegerCheck(IKsign((((gconst29*r01))+((gconst28*r00)))),-1);
if(!x12107.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x12106.value)+(((1.5707963267949)*(x12107.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x12108=IKcos(j8);
IkReal x12109=IKsin(j8);
IkReal x12110=((1.0)*cj7);
IkReal x12111=(gconst29*sj7);
IkReal x12112=((1.0)*sj7);
IkReal x12113=((1.0)*sj5);
IkReal x12114=(gconst28*r00);
IkReal x12115=(cj7*gconst29);
IkReal x12116=(cj5*cj6);
IkReal x12117=(gconst28*r10);
IkReal x12118=(gconst28*r20);
IkReal x12119=((1.0)*cj5*sj6);
IkReal x12120=(cj6*x12113);
IkReal x12121=(gconst28*x12109);
IkReal x12122=(r10*x12109);
IkReal x12123=(gconst28*x12108);
IkReal x12124=(r20*x12109);
IkReal x12125=(cj7*x12108);
IkReal x12126=(sj7*x12108);
IkReal x12127=(r00*x12109);
IkReal x12128=((1.0)*gconst29*x12108);
IkReal x12129=(x12120+x12119);
evalcond[0]=((((-1.0)*r20*x12128))+((r21*x12123))+((r22*x12109)));
evalcond[1]=(((r02*x12109))+((r01*x12123))+(((-1.0)*r00*x12128)));
evalcond[2]=((1.0)+((r12*x12109))+(((-1.0)*r10*x12128))+((r11*x12123)));
evalcond[3]=(((x12115*x12122))+((r12*x12125))+(((-1.0)*r11*x12110*x12121))+((sj7*x12117))+((r11*x12111)));
evalcond[4]=(((r12*x12126))+(((-1.0)*r11*x12112*x12121))+((x12111*x12122))+(((-1.0)*gconst29*r11*x12110))+(((-1.0)*x12110*x12117)));
evalcond[5]=(((x12115*x12127))+((r01*x12111))+(((-1.0)*r01*x12110*x12121))+x12116+(((-1.0)*sj6*x12113))+((r02*x12125))+((sj7*x12114)));
evalcond[6]=(((x12115*x12124))+(((-1.0)*r21*x12110*x12121))+(((-1.0)*x12129))+((r22*x12125))+((sj7*x12118))+((r21*x12111)));
evalcond[7]=((((-1.0)*x12116))+(((-1.0)*r21*x12112*x12121))+((sj5*sj6))+((x12111*x12124))+((r22*x12126))+(((-1.0)*x12110*x12118))+(((-1.0)*gconst29*r21*x12110)));
evalcond[8]=((((-1.0)*x12129))+((x12111*x12127))+(((-1.0)*x12110*x12114))+(((-1.0)*r01*x12112*x12121))+((r02*x12126))+(((-1.0)*gconst29*r01*x12110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[2];
IkReal x12130=((-1.0)*px);
sj4=0;
cj4=1.0;
j4=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12130);
rxp1_1=(px*r21);
rxp1_2=(r11*x12130);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x12131=(cj9*r10);
IkReal x12132=(r11*sj9);
j8eval[0]=((((-1.0)*sj7*x12132))+((sj7*x12131)));
j8eval[1]=(x12132+(((-1.0)*x12131)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x12133=((-1.0)*px);
sj4=0;
cj4=1.0;
j4=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12133);
rxp1_1=(px*r21);
rxp1_2=(r11*x12133);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x12134=(cj9*r10);
IkReal x12135=(r11*sj9);
j8eval[0]=((((-1.0)*cj7*x12135))+((cj7*x12134)));
j8eval[1]=(x12135+(((-1.0)*x12134)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
IkReal x12136=((-1.0)*px);
sj4=0;
cj4=1.0;
j4=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12136);
rxp1_1=(px*r21);
rxp1_2=(r11*x12136);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j8eval[0]=((((-1.0)*cj7*r11*sj9))+((cj7*cj9*r10)));
j8eval[1]=r02;
j8eval[2]=sj7;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[2];
IkReal x12137=((-1.0)*px);
sj4=0;
cj4=1.0;
j4=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12137);
rxp1_1=(px*r21);
rxp1_2=(r11*x12137);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj7=0;
cj7=1.0;
j7=0;
j8eval[0]=(((cj9*r20))+(((-1.0)*r21*sj9)));
j8eval[1]=r02;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x12138=((-1.0)*px);
sj4=0;
cj4=1.0;
j4=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12138);
rxp1_1=(px*r21);
rxp1_2=(r11*x12138);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj7=0;
cj7=1.0;
j7=0;
j8eval[0]=(((cj9*r20))+(((-1.0)*r21*sj9)));
j8eval[1]=(((r11*sj9))+(((-1.0)*cj9*r10)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x12139=IKPowWithIntegerCheck((((cj9*r20))+(((-1.0)*r21*sj9))),-1);
if(!x12139.valid){
continue;
}
CheckValue<IkReal> x12140=IKPowWithIntegerCheck((((r11*sj9))+(((-1.0)*cj9*r10))),-1);
if(!x12140.valid){
continue;
}
if( IKabs(((x12139.value)*((((cj6*sj5))+((cj5*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x12140.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12139.value)*((((cj6*sj5))+((cj5*sj6))))))+IKsqr(((-1.0)*(x12140.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((x12139.value)*((((cj6*sj5))+((cj5*sj6))))), ((-1.0)*(x12140.value)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x12141=IKcos(j8);
IkReal x12142=IKsin(j8);
IkReal x12143=(cj9*r10);
IkReal x12144=((1.0)*sj6);
IkReal x12145=(cj9*r20);
IkReal x12146=((1.0)*x12141);
IkReal x12147=(sj9*x12141);
IkReal x12148=((1.0)*sj9*x12142);
evalcond[0]=(r02*x12142);
evalcond[1]=(((r02*x12141))+(((-1.0)*sj5*x12144))+((cj5*cj6)));
evalcond[2]=((((-1.0)*x12145*x12146))+((r21*x12147)));
evalcond[3]=((((-1.0)*r11*x12148))+((x12142*x12143)));
evalcond[4]=((1.0)+(((-1.0)*x12143*x12146))+((r11*x12147)));
evalcond[5]=((((-1.0)*cj5*x12144))+((x12142*x12145))+(((-1.0)*r21*x12148))+(((-1.0)*cj6*sj5)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x12149=IKPowWithIntegerCheck((((cj9*r20))+(((-1.0)*r21*sj9))),-1);
if(!x12149.valid){
continue;
}
CheckValue<IkReal> x12150=IKPowWithIntegerCheck(r02,-1);
if(!x12150.valid){
continue;
}
if( IKabs(((x12149.value)*((((cj6*sj5))+((cj5*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12150.value)*((((sj5*sj6))+(((-1.0)*cj5*cj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12149.value)*((((cj6*sj5))+((cj5*sj6))))))+IKsqr(((x12150.value)*((((sj5*sj6))+(((-1.0)*cj5*cj6))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((x12149.value)*((((cj6*sj5))+((cj5*sj6))))), ((x12150.value)*((((sj5*sj6))+(((-1.0)*cj5*cj6))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x12151=IKcos(j8);
IkReal x12152=IKsin(j8);
IkReal x12153=(cj9*r10);
IkReal x12154=((1.0)*sj6);
IkReal x12155=(cj9*r20);
IkReal x12156=((1.0)*x12151);
IkReal x12157=(sj9*x12151);
IkReal x12158=((1.0)*sj9*x12152);
evalcond[0]=(r02*x12152);
evalcond[1]=(((r02*x12151))+(((-1.0)*sj5*x12154))+((cj5*cj6)));
evalcond[2]=(((r21*x12157))+(((-1.0)*x12155*x12156)));
evalcond[3]=((((-1.0)*r11*x12158))+((x12152*x12153)));
evalcond[4]=((1.0)+(((-1.0)*x12153*x12156))+((r11*x12157)));
evalcond[5]=((((-1.0)*cj5*x12154))+(((-1.0)*r21*x12158))+((x12152*x12155))+(((-1.0)*cj6*sj5)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[2];
IkReal x12159=((-1.0)*px);
sj4=0;
cj4=1.0;
j4=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12159);
rxp1_1=(px*r21);
rxp1_2=(r11*x12159);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
IkReal x12160=((1.0)*cj9);
j8eval[0]=(((r21*sj9))+(((-1.0)*r20*x12160)));
j8eval[1]=(((r11*sj9))+(((-1.0)*r10*x12160)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x12161=((-1.0)*px);
sj4=0;
cj4=1.0;
j4=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12161);
rxp1_1=(px*r21);
rxp1_2=(r11*x12161);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
j8eval[0]=(((r21*sj9))+(((-1.0)*cj9*r20)));
j8eval[1]=r02;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x12162=IKPowWithIntegerCheck((((r21*sj9))+(((-1.0)*cj9*r20))),-1);
if(!x12162.valid){
continue;
}
CheckValue<IkReal> x12163=IKPowWithIntegerCheck(r02,-1);
if(!x12163.valid){
continue;
}
if( IKabs(((x12162.value)*((((cj6*sj5))+((cj5*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12163.value)*((((cj5*cj6))+(((-1.0)*sj5*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12162.value)*((((cj6*sj5))+((cj5*sj6))))))+IKsqr(((x12163.value)*((((cj5*cj6))+(((-1.0)*sj5*sj6))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((x12162.value)*((((cj6*sj5))+((cj5*sj6))))), ((x12163.value)*((((cj5*cj6))+(((-1.0)*sj5*sj6))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x12164=IKcos(j8);
IkReal x12165=IKsin(j8);
IkReal x12166=(r11*sj9);
IkReal x12167=(r21*sj9);
IkReal x12168=((1.0)*sj6);
IkReal x12169=((1.0)*x12164);
IkReal x12170=((1.0)*cj9*x12165);
evalcond[0]=(r02*x12165);
evalcond[1]=(((x12164*x12167))+(((-1.0)*cj9*r20*x12169)));
evalcond[2]=((((-1.0)*sj5*x12168))+((cj5*cj6))+(((-1.0)*r02*x12169)));
evalcond[3]=((((-1.0)*r10*x12170))+((x12165*x12166)));
evalcond[4]=((1.0)+((x12164*x12166))+(((-1.0)*cj9*r10*x12169)));
evalcond[5]=((((-1.0)*cj5*x12168))+((x12165*x12167))+(((-1.0)*r20*x12170))+(((-1.0)*cj6*sj5)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x12171=((1.0)*cj9);
CheckValue<IkReal> x12172=IKPowWithIntegerCheck((((r21*sj9))+(((-1.0)*r20*x12171))),-1);
if(!x12172.valid){
continue;
}
CheckValue<IkReal> x12173=IKPowWithIntegerCheck(((((-1.0)*r10*x12171))+((r11*sj9))),-1);
if(!x12173.valid){
continue;
}
if( IKabs(((x12172.value)*((((cj6*sj5))+((cj5*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x12173.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12172.value)*((((cj6*sj5))+((cj5*sj6))))))+IKsqr(((-1.0)*(x12173.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((x12172.value)*((((cj6*sj5))+((cj5*sj6))))), ((-1.0)*(x12173.value)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x12174=IKcos(j8);
IkReal x12175=IKsin(j8);
IkReal x12176=(r11*sj9);
IkReal x12177=(r21*sj9);
IkReal x12178=((1.0)*sj6);
IkReal x12179=((1.0)*x12174);
IkReal x12180=((1.0)*cj9*x12175);
evalcond[0]=(r02*x12175);
evalcond[1]=(((x12174*x12177))+(((-1.0)*cj9*r20*x12179)));
evalcond[2]=((((-1.0)*sj5*x12178))+((cj5*cj6))+(((-1.0)*r02*x12179)));
evalcond[3]=(((x12175*x12176))+(((-1.0)*r10*x12180)));
evalcond[4]=((1.0)+((x12174*x12176))+(((-1.0)*cj9*r10*x12179)));
evalcond[5]=((((-1.0)*cj5*x12178))+((x12175*x12177))+(((-1.0)*cj6*sj5))+(((-1.0)*r20*x12180)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x12181=((1.0)*r11);
CheckValue<IkReal> x12182=IKPowWithIntegerCheck(((((-1.0)*cj7*sj9*x12181))+((cj7*cj9*r10))),-1);
if(!x12182.valid){
continue;
}
CheckValue<IkReal> x12183=IKPowWithIntegerCheck(r02,-1);
if(!x12183.valid){
continue;
}
CheckValue<IkReal> x12184=IKPowWithIntegerCheck(sj7,-1);
if(!x12184.valid){
continue;
}
if( IKabs(((x12182.value)*(((((-1.0)*cj9*sj7*x12181))+(((-1.0)*r10*sj7*sj9)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12183.value)*(x12184.value)*((((cj6*sj5))+((cj5*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12182.value)*(((((-1.0)*cj9*sj7*x12181))+(((-1.0)*r10*sj7*sj9))))))+IKsqr(((x12183.value)*(x12184.value)*((((cj6*sj5))+((cj5*sj6))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((x12182.value)*(((((-1.0)*cj9*sj7*x12181))+(((-1.0)*r10*sj7*sj9))))), ((x12183.value)*(x12184.value)*((((cj6*sj5))+((cj5*sj6))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x12185=IKcos(j8);
IkReal x12186=IKsin(j8);
IkReal x12187=((1.0)*cj7);
IkReal x12188=(cj9*r21);
IkReal x12189=((1.0)*sj5);
IkReal x12190=(r20*sj7);
IkReal x12191=((1.0)*sj7);
IkReal x12192=(cj5*cj6);
IkReal x12193=(cj9*r11);
IkReal x12194=(r10*sj9);
IkReal x12195=((1.0)*cj5*sj6);
IkReal x12196=(cj6*x12189);
IkReal x12197=(r02*x12185);
IkReal x12198=(cj9*x12186);
IkReal x12199=(sj9*x12185);
IkReal x12200=(r11*sj9*x12186);
IkReal x12201=((1.0)*cj9*x12185);
IkReal x12202=(r21*sj9*x12186);
IkReal x12203=(x12196+x12195);
evalcond[0]=(r02*x12186);
evalcond[1]=(((r21*x12199))+(((-1.0)*r20*x12201)));
evalcond[2]=((((-1.0)*sj6*x12189))+x12192+((cj7*x12197)));
evalcond[3]=((1.0)+((r11*x12199))+(((-1.0)*r10*x12201)));
evalcond[4]=(((sj7*x12197))+(((-1.0)*x12203)));
evalcond[5]=((((-1.0)*x12187*x12200))+((sj7*x12194))+((sj7*x12193))+((cj7*r10*x12198)));
evalcond[6]=((((-1.0)*x12187*x12193))+(((-1.0)*x12187*x12194))+((r10*sj7*x12198))+(((-1.0)*x12191*x12200)));
evalcond[7]=(((cj7*r20*x12198))+(((-1.0)*x12187*x12202))+((sj9*x12190))+((sj7*x12188))+(((-1.0)*x12203)));
evalcond[8]=(((sj5*sj6))+((x12190*x12198))+(((-1.0)*x12192))+(((-1.0)*x12187*x12188))+(((-1.0)*x12191*x12202))+(((-1.0)*r20*sj9*x12187)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x12204=((1.0)*r11);
IkReal x12205=(cj9*r10);
CheckValue<IkReal> x12206=IKPowWithIntegerCheck(((((-1.0)*cj7*sj9*x12204))+((cj7*x12205))),-1);
if(!x12206.valid){
continue;
}
CheckValue<IkReal> x12207=IKPowWithIntegerCheck(((((-1.0)*x12205))+((r11*sj9))),-1);
if(!x12207.valid){
continue;
}
if( IKabs(((x12206.value)*(((((-1.0)*cj9*sj7*x12204))+(((-1.0)*r10*sj7*sj9)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x12207.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12206.value)*(((((-1.0)*cj9*sj7*x12204))+(((-1.0)*r10*sj7*sj9))))))+IKsqr(((-1.0)*(x12207.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((x12206.value)*(((((-1.0)*cj9*sj7*x12204))+(((-1.0)*r10*sj7*sj9))))), ((-1.0)*(x12207.value)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x12208=IKcos(j8);
IkReal x12209=IKsin(j8);
IkReal x12210=((1.0)*cj7);
IkReal x12211=(cj9*r21);
IkReal x12212=((1.0)*sj5);
IkReal x12213=(r20*sj7);
IkReal x12214=((1.0)*sj7);
IkReal x12215=(cj5*cj6);
IkReal x12216=(cj9*r11);
IkReal x12217=(r10*sj9);
IkReal x12218=((1.0)*cj5*sj6);
IkReal x12219=(cj6*x12212);
IkReal x12220=(r02*x12208);
IkReal x12221=(cj9*x12209);
IkReal x12222=(sj9*x12208);
IkReal x12223=(r11*sj9*x12209);
IkReal x12224=((1.0)*cj9*x12208);
IkReal x12225=(r21*sj9*x12209);
IkReal x12226=(x12219+x12218);
evalcond[0]=(r02*x12209);
evalcond[1]=(((r21*x12222))+(((-1.0)*r20*x12224)));
evalcond[2]=((((-1.0)*sj6*x12212))+((cj7*x12220))+x12215);
evalcond[3]=((1.0)+((r11*x12222))+(((-1.0)*r10*x12224)));
evalcond[4]=((((-1.0)*x12226))+((sj7*x12220)));
evalcond[5]=(((cj7*r10*x12221))+(((-1.0)*x12210*x12223))+((sj7*x12216))+((sj7*x12217)));
evalcond[6]=(((r10*sj7*x12221))+(((-1.0)*x12214*x12223))+(((-1.0)*x12210*x12217))+(((-1.0)*x12210*x12216)));
evalcond[7]=((((-1.0)*x12226))+(((-1.0)*x12210*x12225))+((cj7*r20*x12221))+((sj9*x12213))+((sj7*x12211)));
evalcond[8]=(((x12213*x12221))+((sj5*sj6))+(((-1.0)*x12214*x12225))+(((-1.0)*x12210*x12211))+(((-1.0)*x12215))+(((-1.0)*r20*sj9*x12210)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x12227=(cj9*r10);
IkReal x12228=(r11*sj9);
CheckValue<IkReal> x12229=IKPowWithIntegerCheck((((sj7*x12227))+(((-1.0)*sj7*x12228))),-1);
if(!x12229.valid){
continue;
}
CheckValue<IkReal> x12230=IKPowWithIntegerCheck((x12228+(((-1.0)*x12227))),-1);
if(!x12230.valid){
continue;
}
if( IKabs(((x12229.value)*((((cj7*r10*sj9))+((cj7*cj9*r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x12230.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12229.value)*((((cj7*r10*sj9))+((cj7*cj9*r11))))))+IKsqr(((-1.0)*(x12230.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((x12229.value)*((((cj7*r10*sj9))+((cj7*cj9*r11))))), ((-1.0)*(x12230.value)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x12231=IKcos(j8);
IkReal x12232=IKsin(j8);
IkReal x12233=((1.0)*cj7);
IkReal x12234=(cj9*r21);
IkReal x12235=((1.0)*sj5);
IkReal x12236=(r20*sj7);
IkReal x12237=((1.0)*sj7);
IkReal x12238=(cj5*cj6);
IkReal x12239=(cj9*r11);
IkReal x12240=(r10*sj9);
IkReal x12241=((1.0)*cj5*sj6);
IkReal x12242=(cj6*x12235);
IkReal x12243=(r02*x12231);
IkReal x12244=(cj9*x12232);
IkReal x12245=(sj9*x12231);
IkReal x12246=(r11*sj9*x12232);
IkReal x12247=((1.0)*cj9*x12231);
IkReal x12248=(r21*sj9*x12232);
IkReal x12249=(x12242+x12241);
evalcond[0]=(r02*x12232);
evalcond[1]=((((-1.0)*r20*x12247))+((r21*x12245)));
evalcond[2]=(x12238+((cj7*x12243))+(((-1.0)*sj6*x12235)));
evalcond[3]=((1.0)+(((-1.0)*r10*x12247))+((r11*x12245)));
evalcond[4]=(((sj7*x12243))+(((-1.0)*x12249)));
evalcond[5]=(((sj7*x12240))+(((-1.0)*x12233*x12246))+((sj7*x12239))+((cj7*r10*x12244)));
evalcond[6]=((((-1.0)*x12233*x12240))+((r10*sj7*x12244))+(((-1.0)*x12237*x12246))+(((-1.0)*x12233*x12239)));
evalcond[7]=((((-1.0)*x12233*x12248))+((sj7*x12234))+(((-1.0)*x12249))+((sj9*x12236))+((cj7*r20*x12244)));
evalcond[8]=(((sj5*sj6))+(((-1.0)*x12238))+((x12236*x12244))+(((-1.0)*r20*sj9*x12233))+(((-1.0)*x12237*x12248))+(((-1.0)*x12233*x12234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x12250=cj9*cj9;
IkReal x12251=((1.0)*sj7);
IkReal x12252=(r10*sj9);
IkReal x12253=(r11*r21);
IkReal x12254=(cj9*sj9);
IkReal x12255=(cj7*r20);
IkReal x12256=(r11*x12250);
IkReal x12257=(r10*x12250);
IkReal x12258=((1.0)*cj7*r21);
CheckValue<IkReal> x12259 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x12251*x12257))+((sj7*x12253*x12254))+(((-1.0)*r20*x12251*x12256))+((r10*r21*sj7))+(((-1.0)*cj9*r20*x12251*x12252)))),IkReal(((((-1.0)*cj9*r11*r22*x12251))+(((-1.0)*r22*x12251*x12252)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12259.valid){
continue;
}
CheckValue<IkReal> x12260=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x12254*x12255))+(((-1.0)*cj9*x12252*x12258))+((cj7*r12*r22))+((x12255*x12257))+(((-1.0)*cj7*x12250*x12253))+((cj7*x12253)))),-1);
if(!x12260.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x12259.value)+(((1.5707963267949)*(x12260.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x12261=IKcos(j8);
IkReal x12262=IKsin(j8);
IkReal x12263=(cj9*r00);
IkReal x12264=((1.0)*sj9);
IkReal x12265=(cj9*r21);
IkReal x12266=((1.0)*cj7);
IkReal x12267=((1.0)*sj5);
IkReal x12268=(cj9*r20);
IkReal x12269=(cj9*sj7);
IkReal x12270=(cj5*cj6);
IkReal x12271=(sj7*sj9);
IkReal x12272=(cj9*r10);
IkReal x12273=((1.0)*cj5*sj6);
IkReal x12274=(cj6*x12267);
IkReal x12275=((1.0)*x12261);
IkReal x12276=(cj7*x12262);
IkReal x12277=(sj7*x12262);
IkReal x12278=(cj7*x12261);
IkReal x12279=(sj7*x12261);
IkReal x12280=(sj9*x12261);
IkReal x12281=(x12273+x12274);
evalcond[0]=((((-1.0)*x12268*x12275))+((r22*x12262))+((r21*x12280)));
evalcond[1]=(((r01*x12280))+(((-1.0)*x12263*x12275))+((r02*x12262)));
evalcond[2]=((1.0)+(((-1.0)*x12272*x12275))+((r12*x12262))+((r11*x12280)));
evalcond[3]=(((r11*x12269))+((x12272*x12276))+(((-1.0)*r11*x12264*x12276))+((r10*x12271))+((r12*x12278)));
evalcond[4]=((((-1.0)*cj9*r11*x12266))+(((-1.0)*cj7*r10*x12264))+((r10*x12262*x12269))+(((-1.0)*r11*x12264*x12277))+((r12*x12279)));
evalcond[5]=((((-1.0)*r01*x12264*x12276))+x12270+((r01*x12269))+((r02*x12278))+(((-1.0)*sj6*x12267))+((x12263*x12276))+((r00*x12271)));
evalcond[6]=(((x12268*x12276))+((r20*x12271))+((sj7*x12265))+((r22*x12278))+(((-1.0)*r21*x12264*x12276))+(((-1.0)*x12281)));
evalcond[7]=((((-1.0)*x12270))+(((-1.0)*cj7*r20*x12264))+((x12268*x12277))+((sj5*sj6))+((r22*x12279))+(((-1.0)*x12265*x12266))+(((-1.0)*r21*x12264*x12277)));
evalcond[8]=((((-1.0)*r01*x12264*x12277))+(((-1.0)*cj9*r01*x12266))+((r02*x12279))+(((-1.0)*cj7*r00*x12264))+((x12263*x12277))+(((-1.0)*x12281)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x12282=((1.0)*cj9);
CheckValue<IkReal> x12283 = IKatan2WithCheck(IkReal((((r01*sj9))+(((-1.0)*r00*x12282)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12283.valid){
continue;
}
CheckValue<IkReal> x12284=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12282))+(((-1.0)*r20*sj9)))),-1);
if(!x12284.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x12283.value)+(((1.5707963267949)*(x12284.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x12285=IKcos(j8);
IkReal x12286=IKsin(j8);
IkReal x12287=(cj9*r00);
IkReal x12288=((1.0)*sj9);
IkReal x12289=(cj9*r21);
IkReal x12290=((1.0)*cj7);
IkReal x12291=((1.0)*sj5);
IkReal x12292=(cj9*r20);
IkReal x12293=(cj9*sj7);
IkReal x12294=(cj5*cj6);
IkReal x12295=(sj7*sj9);
IkReal x12296=(cj9*r10);
IkReal x12297=((1.0)*cj5*sj6);
IkReal x12298=(cj6*x12291);
IkReal x12299=((1.0)*x12285);
IkReal x12300=(cj7*x12286);
IkReal x12301=(sj7*x12286);
IkReal x12302=(cj7*x12285);
IkReal x12303=(sj7*x12285);
IkReal x12304=(sj9*x12285);
IkReal x12305=(x12298+x12297);
evalcond[0]=((((-1.0)*x12292*x12299))+((r22*x12286))+((r21*x12304)));
evalcond[1]=(((r02*x12286))+(((-1.0)*x12287*x12299))+((r01*x12304)));
evalcond[2]=((1.0)+((r11*x12304))+(((-1.0)*x12296*x12299))+((r12*x12286)));
evalcond[3]=(((r10*x12295))+(((-1.0)*r11*x12288*x12300))+((r11*x12293))+((r12*x12302))+((x12296*x12300)));
evalcond[4]=((((-1.0)*cj7*r10*x12288))+(((-1.0)*r11*x12288*x12301))+((r12*x12303))+((r10*x12286*x12293))+(((-1.0)*cj9*r11*x12290)));
evalcond[5]=(((r01*x12293))+(((-1.0)*r01*x12288*x12300))+((r00*x12295))+x12294+((x12287*x12300))+(((-1.0)*sj6*x12291))+((r02*x12302)));
evalcond[6]=(((sj7*x12289))+((r20*x12295))+(((-1.0)*r21*x12288*x12300))+((x12292*x12300))+(((-1.0)*x12305))+((r22*x12302)));
evalcond[7]=(((sj5*sj6))+(((-1.0)*r21*x12288*x12301))+((x12292*x12301))+(((-1.0)*x12294))+((r22*x12303))+(((-1.0)*x12289*x12290))+(((-1.0)*cj7*r20*x12288)));
evalcond[8]=((((-1.0)*r01*x12288*x12301))+(((-1.0)*cj9*r01*x12290))+((x12287*x12301))+(((-1.0)*x12305))+(((-1.0)*cj7*r00*x12288))+((r02*x12303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x12306=IKPowWithIntegerCheck(IKsign((((r00*sj9))+((cj9*r01)))),-1);
if(!x12306.valid){
continue;
}
CheckValue<IkReal> x12307 = IKatan2WithCheck(IkReal((((r21*sj9))+(((-1.0)*cj9*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12307.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12306.value)))+(x12307.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x12308=IKcos(j8);
IkReal x12309=IKsin(j8);
IkReal x12310=(cj9*r00);
IkReal x12311=((1.0)*sj9);
IkReal x12312=(cj9*r21);
IkReal x12313=((1.0)*cj7);
IkReal x12314=((1.0)*sj5);
IkReal x12315=(cj9*r20);
IkReal x12316=(cj9*sj7);
IkReal x12317=(cj5*cj6);
IkReal x12318=(sj7*sj9);
IkReal x12319=(cj9*r10);
IkReal x12320=((1.0)*cj5*sj6);
IkReal x12321=(cj6*x12314);
IkReal x12322=((1.0)*x12308);
IkReal x12323=(cj7*x12309);
IkReal x12324=(sj7*x12309);
IkReal x12325=(cj7*x12308);
IkReal x12326=(sj7*x12308);
IkReal x12327=(sj9*x12308);
IkReal x12328=(x12321+x12320);
evalcond[0]=(((r21*x12327))+(((-1.0)*x12315*x12322))+((r22*x12309)));
evalcond[1]=(((r01*x12327))+(((-1.0)*x12310*x12322))+((r02*x12309)));
evalcond[2]=((1.0)+(((-1.0)*x12319*x12322))+((r12*x12309))+((r11*x12327)));
evalcond[3]=(((r10*x12318))+((r11*x12316))+(((-1.0)*r11*x12311*x12323))+((x12319*x12323))+((r12*x12325)));
evalcond[4]=((((-1.0)*cj9*r11*x12313))+((r10*x12309*x12316))+(((-1.0)*r11*x12311*x12324))+(((-1.0)*cj7*r10*x12311))+((r12*x12326)));
evalcond[5]=(x12317+(((-1.0)*r01*x12311*x12323))+((x12310*x12323))+((r00*x12318))+((r01*x12316))+((r02*x12325))+(((-1.0)*sj6*x12314)));
evalcond[6]=(((x12315*x12323))+(((-1.0)*r21*x12311*x12323))+(((-1.0)*x12328))+((sj7*x12312))+((r22*x12325))+((r20*x12318)));
evalcond[7]=(((sj5*sj6))+((x12315*x12324))+(((-1.0)*x12317))+(((-1.0)*r21*x12311*x12324))+(((-1.0)*x12312*x12313))+((r22*x12326))+(((-1.0)*cj7*r20*x12311)));
evalcond[8]=((((-1.0)*cj9*r01*x12313))+(((-1.0)*r01*x12311*x12324))+(((-1.0)*x12328))+((x12310*x12324))+(((-1.0)*cj7*r00*x12311))+((r02*x12326)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x12329=(((cj9*r21))+((r20*sj9)));
j8eval[0]=x12329;
j8eval[1]=((IKabs(r02))+(IKabs((((r01*sj9))+(((-1.0)*cj9*r00))))));
j8eval[2]=IKsign(x12329);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x12330=((1.0)*cj9);
IkReal x12331=((((-1.0)*r00*sj9))+(((-1.0)*r01*x12330)));
j8eval[0]=x12331;
j8eval[1]=((IKabs(r22))+(IKabs((((r21*sj9))+(((-1.0)*r20*x12330))))));
j8eval[2]=IKsign(x12331);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x12332=cj9*cj9;
IkReal x12333=(cj7*r11);
IkReal x12334=(cj7*r10);
IkReal x12335=((1.0)*cj9*sj9);
IkReal x12336=(((r20*x12332*x12334))+(((-1.0)*r20*x12333*x12335))+((r21*x12333))+(((-1.0)*r21*x12334*x12335))+((cj7*r12*r22))+(((-1.0)*r21*x12332*x12333)));
j8eval[0]=x12336;
j8eval[1]=IKsign(x12336);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
IkReal x12337=(((cj9*r21))+((r20*sj9)));
j8eval[0]=x12337;
j8eval[1]=((IKabs(r02))+(IKabs((((r01*sj9))+(((-1.0)*cj9*r00))))));
j8eval[2]=IKsign(x12337);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
IkReal x12338=((1.0)*cj9);
IkReal x12339=((((-1.0)*r00*sj9))+(((-1.0)*r01*x12338)));
j8eval[0]=x12339;
j8eval[1]=((IKabs((((r21*sj9))+(((-1.0)*r20*x12338)))))+(IKabs(r22)));
j8eval[2]=IKsign(x12339);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
IkReal x12340=cj9*cj9;
IkReal x12341=r11*r11;
IkReal x12342=(r11*sj9);
IkReal x12343=(cj9*r10);
IkReal x12344=((r12*r12)+((x12340*(r10*r10)))+x12341+(((-1.0)*x12340*x12341))+(((-2.0)*x12342*x12343)));
j8eval[0]=x12344;
j8eval[1]=IKsign(x12344);
j8eval[2]=((IKabs(r12))+(IKabs((x12342+(((-1.0)*x12343))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[2];
IkReal x12345=((-1.0)*px);
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12345);
rxp1_1=(px*r21);
rxp1_2=(r11*x12345);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j8eval[0]=(((cj9*r20))+(((-1.0)*r21*sj9)));
j8eval[1]=(((r11*sj9))+(((-1.0)*cj9*r10)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x12346=((-1.0)*px);
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12346);
rxp1_1=(px*r21);
rxp1_2=(r11*x12346);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j8eval[0]=(((cj9*r20))+(((-1.0)*r21*sj9)));
j8eval[1]=r02;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x12347=((1.0)*sj6);
CheckValue<IkReal> x12348=IKPowWithIntegerCheck((((cj9*r20))+(((-1.0)*r21*sj9))),-1);
if(!x12348.valid){
continue;
}
CheckValue<IkReal> x12349=IKPowWithIntegerCheck(r02,-1);
if(!x12349.valid){
continue;
}
if( IKabs(((x12348.value)*((((cj5*cj6))+(((-1.0)*sj5*x12347)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12349.value)*(((((-1.0)*cj5*x12347))+(((-1.0)*cj6*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12348.value)*((((cj5*cj6))+(((-1.0)*sj5*x12347))))))+IKsqr(((x12349.value)*(((((-1.0)*cj5*x12347))+(((-1.0)*cj6*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((x12348.value)*((((cj5*cj6))+(((-1.0)*sj5*x12347))))), ((x12349.value)*(((((-1.0)*cj5*x12347))+(((-1.0)*cj6*sj5))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x12350=IKcos(j8);
IkReal x12351=IKsin(j8);
IkReal x12352=(cj9*r10);
IkReal x12353=(cj9*r20);
IkReal x12354=((1.0)*x12350);
IkReal x12355=(sj9*x12350);
IkReal x12356=((1.0)*sj9*x12351);
evalcond[0]=(r02*x12351);
evalcond[1]=(((cj6*sj5))+((cj5*sj6))+((r02*x12350)));
evalcond[2]=((((-1.0)*x12353*x12354))+((r21*x12355)));
evalcond[3]=(((x12351*x12352))+(((-1.0)*r11*x12356)));
evalcond[4]=((-1.0)+(((-1.0)*x12352*x12354))+((r11*x12355)));
evalcond[5]=(((sj5*sj6))+((x12351*x12353))+(((-1.0)*r21*x12356))+(((-1.0)*cj5*cj6)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x12357=IKPowWithIntegerCheck((((cj9*r20))+(((-1.0)*r21*sj9))),-1);
if(!x12357.valid){
continue;
}
CheckValue<IkReal> x12358=IKPowWithIntegerCheck((((r11*sj9))+(((-1.0)*cj9*r10))),-1);
if(!x12358.valid){
continue;
}
if( IKabs(((x12357.value)*((((cj5*cj6))+(((-1.0)*sj5*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x12358.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12357.value)*((((cj5*cj6))+(((-1.0)*sj5*sj6))))))+IKsqr(x12358.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((x12357.value)*((((cj5*cj6))+(((-1.0)*sj5*sj6))))), x12358.value);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x12359=IKcos(j8);
IkReal x12360=IKsin(j8);
IkReal x12361=(cj9*r10);
IkReal x12362=(cj9*r20);
IkReal x12363=((1.0)*x12359);
IkReal x12364=(sj9*x12359);
IkReal x12365=((1.0)*sj9*x12360);
evalcond[0]=(r02*x12360);
evalcond[1]=(((cj6*sj5))+((cj5*sj6))+((r02*x12359)));
evalcond[2]=(((r21*x12364))+(((-1.0)*x12362*x12363)));
evalcond[3]=((((-1.0)*r11*x12365))+((x12360*x12361)));
evalcond[4]=((-1.0)+((r11*x12364))+(((-1.0)*x12361*x12363)));
evalcond[5]=(((sj5*sj6))+(((-1.0)*r21*x12365))+(((-1.0)*cj5*cj6))+((x12360*x12362)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[2];
IkReal x12366=((-1.0)*pz);
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12366);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12366);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j8eval[0]=((((-1.0)*r01*sj9))+((cj9*r00)));
j8eval[1]=(((r11*sj9))+(((-1.0)*cj9*r10)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x12367=((-1.0)*pz);
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12367);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12367);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j8eval[0]=((((-1.0)*r01*sj9))+((cj9*r00)));
j8eval[1]=r22;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x12368=((1.0)*sj6);
CheckValue<IkReal> x12369=IKPowWithIntegerCheck(((((-1.0)*r01*sj9))+((cj9*r00))),-1);
if(!x12369.valid){
continue;
}
CheckValue<IkReal> x12370=IKPowWithIntegerCheck(r22,-1);
if(!x12370.valid){
continue;
}
if( IKabs(((x12369.value)*(((((-1.0)*cj5*x12368))+(((-1.0)*cj6*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12370.value)*(((((-1.0)*sj5*x12368))+((cj5*cj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12369.value)*(((((-1.0)*cj5*x12368))+(((-1.0)*cj6*sj5))))))+IKsqr(((x12370.value)*(((((-1.0)*sj5*x12368))+((cj5*cj6))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((x12369.value)*(((((-1.0)*cj5*x12368))+(((-1.0)*cj6*sj5))))), ((x12370.value)*(((((-1.0)*sj5*x12368))+((cj5*cj6))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x12371=IKcos(j8);
IkReal x12372=IKsin(j8);
IkReal x12373=(cj9*r00);
IkReal x12374=(cj9*r10);
IkReal x12375=((1.0)*x12371);
IkReal x12376=(sj9*x12371);
IkReal x12377=((1.0)*sj9*x12372);
evalcond[0]=(r22*x12372);
evalcond[1]=(((sj5*sj6))+((r22*x12371))+(((-1.0)*cj5*cj6)));
evalcond[2]=((((-1.0)*x12373*x12375))+((r01*x12376)));
evalcond[3]=((((-1.0)*r11*x12377))+((x12372*x12374)));
evalcond[4]=((-1.0)+((r11*x12376))+(((-1.0)*x12374*x12375)));
evalcond[5]=((((-1.0)*r01*x12377))+((cj6*sj5))+((cj5*sj6))+((x12372*x12373)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x12378=IKPowWithIntegerCheck(((((-1.0)*r01*sj9))+((cj9*r00))),-1);
if(!x12378.valid){
continue;
}
CheckValue<IkReal> x12379=IKPowWithIntegerCheck((((r11*sj9))+(((-1.0)*cj9*r10))),-1);
if(!x12379.valid){
continue;
}
if( IKabs(((x12378.value)*(((((-1.0)*cj5*sj6))+(((-1.0)*cj6*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x12379.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12378.value)*(((((-1.0)*cj5*sj6))+(((-1.0)*cj6*sj5))))))+IKsqr(x12379.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((x12378.value)*(((((-1.0)*cj5*sj6))+(((-1.0)*cj6*sj5))))), x12379.value);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x12380=IKcos(j8);
IkReal x12381=IKsin(j8);
IkReal x12382=(cj9*r00);
IkReal x12383=(cj9*r10);
IkReal x12384=((1.0)*x12380);
IkReal x12385=(sj9*x12380);
IkReal x12386=((1.0)*sj9*x12381);
evalcond[0]=(r22*x12381);
evalcond[1]=(((sj5*sj6))+(((-1.0)*cj5*cj6))+((r22*x12380)));
evalcond[2]=((((-1.0)*x12382*x12384))+((r01*x12385)));
evalcond[3]=((((-1.0)*r11*x12386))+((x12381*x12383)));
evalcond[4]=((-1.0)+((r11*x12385))+(((-1.0)*x12383*x12384)));
evalcond[5]=(((x12381*x12382))+((cj6*sj5))+((cj5*sj6))+(((-1.0)*r01*x12386)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x12387=cj9*cj9;
IkReal x12388=r11*r11;
IkReal x12389=(r11*sj9);
IkReal x12390=(cj9*r10);
CheckValue<IkReal> x12391=IKPowWithIntegerCheck(IKsign(((r12*r12)+x12388+(((-2.0)*x12389*x12390))+((x12387*(r10*r10)))+(((-1.0)*x12387*x12388)))),-1);
if(!x12391.valid){
continue;
}
CheckValue<IkReal> x12392 = IKatan2WithCheck(IkReal(r12),IkReal((x12389+(((-1.0)*x12390)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12392.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12391.value)))+(x12392.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x12393=IKcos(j8);
IkReal x12394=IKsin(j8);
IkReal x12395=(cj9*r00);
IkReal x12396=((1.0)*x12393);
IkReal x12397=(cj9*x12394);
IkReal x12398=(sj9*x12393);
IkReal x12399=((1.0)*sj9*x12394);
evalcond[0]=(((r22*x12394))+(((-1.0)*cj9*r20*x12396))+((r21*x12398)));
evalcond[1]=(((r02*x12394))+((r01*x12398))+(((-1.0)*x12395*x12396)));
evalcond[2]=((((-1.0)*r11*x12399))+((r10*x12397))+((r12*x12393)));
evalcond[3]=((-1.0)+((r11*x12398))+(((-1.0)*cj9*r10*x12396))+((r12*x12394)));
evalcond[4]=(((r02*x12393))+((cj6*sj5))+((cj5*sj6))+(((-1.0)*r01*x12399))+((x12394*x12395)));
evalcond[5]=((((-1.0)*r21*x12399))+((r22*x12393))+((sj5*sj6))+((r20*x12397))+(((-1.0)*cj5*cj6)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x12400=((1.0)*cj9);
CheckValue<IkReal> x12401=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj9))+(((-1.0)*r01*x12400)))),-1);
if(!x12401.valid){
continue;
}
CheckValue<IkReal> x12402 = IKatan2WithCheck(IkReal((((r21*sj9))+(((-1.0)*r20*x12400)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12402.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12401.value)))+(x12402.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x12403=IKcos(j8);
IkReal x12404=IKsin(j8);
IkReal x12405=(cj9*r00);
IkReal x12406=((1.0)*x12403);
IkReal x12407=(cj9*x12404);
IkReal x12408=(sj9*x12403);
IkReal x12409=((1.0)*sj9*x12404);
evalcond[0]=((((-1.0)*cj9*r20*x12406))+((r22*x12404))+((r21*x12408)));
evalcond[1]=(((r02*x12404))+(((-1.0)*x12405*x12406))+((r01*x12408)));
evalcond[2]=((((-1.0)*r11*x12409))+((r10*x12407))+((r12*x12403)));
evalcond[3]=((-1.0)+(((-1.0)*cj9*r10*x12406))+((r11*x12408))+((r12*x12404)));
evalcond[4]=(((r02*x12403))+((cj6*sj5))+((cj5*sj6))+(((-1.0)*r01*x12409))+((x12404*x12405)));
evalcond[5]=(((r22*x12403))+((sj5*sj6))+((r20*x12407))+(((-1.0)*cj5*cj6))+(((-1.0)*r21*x12409)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x12410 = IKatan2WithCheck(IkReal((((r01*sj9))+(((-1.0)*cj9*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12410.valid){
continue;
}
CheckValue<IkReal> x12411=IKPowWithIntegerCheck(IKsign((((cj9*r21))+((r20*sj9)))),-1);
if(!x12411.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x12410.value)+(((1.5707963267949)*(x12411.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x12412=IKcos(j8);
IkReal x12413=IKsin(j8);
IkReal x12414=(cj9*r00);
IkReal x12415=((1.0)*x12412);
IkReal x12416=(cj9*x12413);
IkReal x12417=(sj9*x12412);
IkReal x12418=((1.0)*sj9*x12413);
evalcond[0]=(((r21*x12417))+((r22*x12413))+(((-1.0)*cj9*r20*x12415)));
evalcond[1]=(((r01*x12417))+((r02*x12413))+(((-1.0)*x12414*x12415)));
evalcond[2]=(((r10*x12416))+((r12*x12412))+(((-1.0)*r11*x12418)));
evalcond[3]=((-1.0)+(((-1.0)*cj9*r10*x12415))+((r11*x12417))+((r12*x12413)));
evalcond[4]=((((-1.0)*r01*x12418))+((cj6*sj5))+((cj5*sj6))+((r02*x12412))+((x12413*x12414)));
evalcond[5]=(((sj5*sj6))+((r20*x12416))+(((-1.0)*r21*x12418))+((r22*x12412))+(((-1.0)*cj5*cj6)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
IkReal x12419=(((cj9*r21))+((r20*sj9)));
j8eval[0]=x12419;
j8eval[1]=((IKabs(r02))+(IKabs((((r01*sj9))+(((-1.0)*cj9*r00))))));
j8eval[2]=IKsign(x12419);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
IkReal x12420=((1.0)*cj9);
IkReal x12421=((((-1.0)*r01*x12420))+(((-1.0)*r00*sj9)));
j8eval[0]=x12421;
j8eval[1]=((IKabs(((((-1.0)*r20*x12420))+((r21*sj9)))))+(IKabs(r22)));
j8eval[2]=IKsign(x12421);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
IkReal x12422=cj9*cj9;
IkReal x12423=r11*r11;
IkReal x12424=(r11*sj9);
IkReal x12425=(cj9*r10);
IkReal x12426=((((-2.0)*x12424*x12425))+(((-1.0)*x12422*x12423))+(r12*r12)+((x12422*(r10*r10)))+x12423);
j8eval[0]=x12426;
j8eval[1]=IKsign(x12426);
j8eval[2]=((IKabs(((((-1.0)*x12425))+x12424)))+(IKabs(r12)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[2];
IkReal x12427=((-1.0)*px);
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12427);
rxp1_1=(px*r21);
rxp1_2=(r11*x12427);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x12428=((1.0)*cj9);
j8eval[0]=((((-1.0)*r20*x12428))+((r21*sj9)));
j8eval[1]=((((-1.0)*r10*x12428))+((r11*sj9)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x12429=((-1.0)*px);
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12429);
rxp1_1=(px*r21);
rxp1_2=(r11*x12429);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j8eval[0]=(((r21*sj9))+(((-1.0)*cj9*r20)));
j8eval[1]=r02;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x12430=IKPowWithIntegerCheck((((r21*sj9))+(((-1.0)*cj9*r20))),-1);
if(!x12430.valid){
continue;
}
CheckValue<IkReal> x12431=IKPowWithIntegerCheck(r02,-1);
if(!x12431.valid){
continue;
}
if( IKabs(((x12430.value)*((((cj5*cj6))+(((-1.0)*sj5*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12431.value)*((((cj6*sj5))+((cj5*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12430.value)*((((cj5*cj6))+(((-1.0)*sj5*sj6))))))+IKsqr(((x12431.value)*((((cj6*sj5))+((cj5*sj6))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((x12430.value)*((((cj5*cj6))+(((-1.0)*sj5*sj6))))), ((x12431.value)*((((cj6*sj5))+((cj5*sj6))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x12432=IKcos(j8);
IkReal x12433=IKsin(j8);
IkReal x12434=(r11*sj9);
IkReal x12435=(r21*sj9);
IkReal x12436=((1.0)*x12432);
IkReal x12437=((1.0)*cj9*x12433);
evalcond[0]=(r02*x12433);
evalcond[1]=(((cj6*sj5))+((cj5*sj6))+(((-1.0)*r02*x12436)));
evalcond[2]=(((x12432*x12435))+(((-1.0)*cj9*r20*x12436)));
evalcond[3]=((((-1.0)*r10*x12437))+((x12433*x12434)));
evalcond[4]=((-1.0)+(((-1.0)*cj9*r10*x12436))+((x12432*x12434)));
evalcond[5]=(((sj5*sj6))+((x12433*x12435))+(((-1.0)*cj5*cj6))+(((-1.0)*r20*x12437)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x12438=((1.0)*cj9);
CheckValue<IkReal> x12439=IKPowWithIntegerCheck((((r21*sj9))+(((-1.0)*r20*x12438))),-1);
if(!x12439.valid){
continue;
}
CheckValue<IkReal> x12440=IKPowWithIntegerCheck(((((-1.0)*r10*x12438))+((r11*sj9))),-1);
if(!x12440.valid){
continue;
}
if( IKabs(((x12439.value)*((((cj5*cj6))+(((-1.0)*sj5*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x12440.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12439.value)*((((cj5*cj6))+(((-1.0)*sj5*sj6))))))+IKsqr(x12440.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((x12439.value)*((((cj5*cj6))+(((-1.0)*sj5*sj6))))), x12440.value);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x12441=IKcos(j8);
IkReal x12442=IKsin(j8);
IkReal x12443=(r11*sj9);
IkReal x12444=(r21*sj9);
IkReal x12445=((1.0)*x12441);
IkReal x12446=((1.0)*cj9*x12442);
evalcond[0]=(r02*x12442);
evalcond[1]=((((-1.0)*r02*x12445))+((cj6*sj5))+((cj5*sj6)));
evalcond[2]=((((-1.0)*cj9*r20*x12445))+((x12441*x12444)));
evalcond[3]=((((-1.0)*r10*x12446))+((x12442*x12443)));
evalcond[4]=((-1.0)+((x12441*x12443))+(((-1.0)*cj9*r10*x12445)));
evalcond[5]=((((-1.0)*r20*x12446))+((sj5*sj6))+(((-1.0)*cj5*cj6))+((x12442*x12444)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[2];
IkReal x12447=((-1.0)*pz);
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12447);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12447);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x12448=((1.0)*cj9);
j8eval[0]=(((r01*sj9))+(((-1.0)*r00*x12448)));
j8eval[1]=((((-1.0)*r10*x12448))+((r11*sj9)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x12449=((-1.0)*pz);
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12449);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12449);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j8eval[0]=(((r01*sj9))+(((-1.0)*cj9*r00)));
j8eval[1]=r22;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x12450=((1.0)*cj5);
CheckValue<IkReal> x12451=IKPowWithIntegerCheck((((r01*sj9))+(((-1.0)*cj9*r00))),-1);
if(!x12451.valid){
continue;
}
CheckValue<IkReal> x12452=IKPowWithIntegerCheck(r22,-1);
if(!x12452.valid){
continue;
}
if( IKabs(((x12451.value)*(((((-1.0)*sj6*x12450))+(((-1.0)*cj6*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12452.value)*((((sj5*sj6))+(((-1.0)*cj6*x12450)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12451.value)*(((((-1.0)*sj6*x12450))+(((-1.0)*cj6*sj5))))))+IKsqr(((x12452.value)*((((sj5*sj6))+(((-1.0)*cj6*x12450))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((x12451.value)*(((((-1.0)*sj6*x12450))+(((-1.0)*cj6*sj5))))), ((x12452.value)*((((sj5*sj6))+(((-1.0)*cj6*x12450))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x12453=IKcos(j8);
IkReal x12454=IKsin(j8);
IkReal x12455=(cj9*r00);
IkReal x12456=(cj9*r10);
IkReal x12457=((1.0)*x12453);
IkReal x12458=(sj9*x12453);
IkReal x12459=(sj9*x12454);
IkReal x12460=((1.0)*x12454);
evalcond[0]=(r22*x12454);
evalcond[1]=(((r01*x12458))+(((-1.0)*x12455*x12457)));
evalcond[2]=((((-1.0)*r22*x12457))+((sj5*sj6))+(((-1.0)*cj5*cj6)));
evalcond[3]=(((r11*x12459))+(((-1.0)*x12456*x12460)));
evalcond[4]=((-1.0)+((r11*x12458))+(((-1.0)*x12456*x12457)));
evalcond[5]=(((cj6*sj5))+((cj5*sj6))+(((-1.0)*x12455*x12460))+((r01*x12459)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x12461=((1.0)*cj9);
CheckValue<IkReal> x12462=IKPowWithIntegerCheck((((r01*sj9))+(((-1.0)*r00*x12461))),-1);
if(!x12462.valid){
continue;
}
CheckValue<IkReal> x12463=IKPowWithIntegerCheck((((r11*sj9))+(((-1.0)*r10*x12461))),-1);
if(!x12463.valid){
continue;
}
if( IKabs(((x12462.value)*(((((-1.0)*cj5*sj6))+(((-1.0)*cj6*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x12463.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12462.value)*(((((-1.0)*cj5*sj6))+(((-1.0)*cj6*sj5))))))+IKsqr(x12463.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((x12462.value)*(((((-1.0)*cj5*sj6))+(((-1.0)*cj6*sj5))))), x12463.value);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x12464=IKcos(j8);
IkReal x12465=IKsin(j8);
IkReal x12466=(cj9*r00);
IkReal x12467=(cj9*r10);
IkReal x12468=((1.0)*x12464);
IkReal x12469=(sj9*x12464);
IkReal x12470=(sj9*x12465);
IkReal x12471=((1.0)*x12465);
evalcond[0]=(r22*x12465);
evalcond[1]=(((r01*x12469))+(((-1.0)*x12466*x12468)));
evalcond[2]=((((-1.0)*r22*x12468))+((sj5*sj6))+(((-1.0)*cj5*cj6)));
evalcond[3]=(((r11*x12470))+(((-1.0)*x12467*x12471)));
evalcond[4]=((-1.0)+(((-1.0)*x12467*x12468))+((r11*x12469)));
evalcond[5]=(((cj6*sj5))+((r01*x12470))+((cj5*sj6))+(((-1.0)*x12466*x12471)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x12472=cj9*cj9;
IkReal x12473=r11*r11;
IkReal x12474=(r11*sj9);
IkReal x12475=(cj9*r10);
CheckValue<IkReal> x12476 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x12475))+x12474)),IKFAST_ATAN2_MAGTHRESH);
if(!x12476.valid){
continue;
}
CheckValue<IkReal> x12477=IKPowWithIntegerCheck(IKsign((((x12472*(r10*r10)))+(r12*r12)+(((-1.0)*x12472*x12473))+x12473+(((-2.0)*x12474*x12475)))),-1);
if(!x12477.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x12476.value)+(((1.5707963267949)*(x12477.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x12478=IKcos(j8);
IkReal x12479=IKsin(j8);
IkReal x12480=((1.0)*x12478);
IkReal x12481=(sj9*x12478);
IkReal x12482=(sj9*x12479);
IkReal x12483=(cj9*x12480);
IkReal x12484=((1.0)*cj9*x12479);
evalcond[0]=(((r22*x12479))+(((-1.0)*r20*x12483))+((r21*x12481)));
evalcond[1]=((((-1.0)*r00*x12483))+((r01*x12481))+((r02*x12479)));
evalcond[2]=((-1.0)+(((-1.0)*r10*x12483))+((r12*x12479))+((r11*x12481)));
evalcond[3]=((((-1.0)*r10*x12484))+(((-1.0)*r12*x12480))+((r11*x12482)));
evalcond[4]=(((cj6*sj5))+(((-1.0)*r00*x12484))+((cj5*sj6))+(((-1.0)*r02*x12480))+((r01*x12482)));
evalcond[5]=(((sj5*sj6))+(((-1.0)*r22*x12480))+(((-1.0)*cj5*cj6))+(((-1.0)*r20*x12484))+((r21*x12482)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x12485=((1.0)*cj9);
CheckValue<IkReal> x12486=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj9))+(((-1.0)*r01*x12485)))),-1);
if(!x12486.valid){
continue;
}
CheckValue<IkReal> x12487 = IKatan2WithCheck(IkReal((((r21*sj9))+(((-1.0)*r20*x12485)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12487.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12486.value)))+(x12487.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x12488=IKcos(j8);
IkReal x12489=IKsin(j8);
IkReal x12490=((1.0)*x12488);
IkReal x12491=(sj9*x12488);
IkReal x12492=(sj9*x12489);
IkReal x12493=(cj9*x12490);
IkReal x12494=((1.0)*cj9*x12489);
evalcond[0]=(((r22*x12489))+((r21*x12491))+(((-1.0)*r20*x12493)));
evalcond[1]=(((r01*x12491))+((r02*x12489))+(((-1.0)*r00*x12493)));
evalcond[2]=((-1.0)+(((-1.0)*r10*x12493))+((r12*x12489))+((r11*x12491)));
evalcond[3]=((((-1.0)*r10*x12494))+(((-1.0)*r12*x12490))+((r11*x12492)));
evalcond[4]=(((r01*x12492))+((cj6*sj5))+(((-1.0)*r02*x12490))+((cj5*sj6))+(((-1.0)*r00*x12494)));
evalcond[5]=(((sj5*sj6))+((r21*x12492))+(((-1.0)*r20*x12494))+(((-1.0)*cj5*cj6))+(((-1.0)*r22*x12490)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x12495 = IKatan2WithCheck(IkReal((((r01*sj9))+(((-1.0)*cj9*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12495.valid){
continue;
}
CheckValue<IkReal> x12496=IKPowWithIntegerCheck(IKsign((((cj9*r21))+((r20*sj9)))),-1);
if(!x12496.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x12495.value)+(((1.5707963267949)*(x12496.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x12497=IKcos(j8);
IkReal x12498=IKsin(j8);
IkReal x12499=((1.0)*x12497);
IkReal x12500=(sj9*x12497);
IkReal x12501=(sj9*x12498);
IkReal x12502=(cj9*x12499);
IkReal x12503=((1.0)*cj9*x12498);
evalcond[0]=(((r21*x12500))+(((-1.0)*r20*x12502))+((r22*x12498)));
evalcond[1]=((((-1.0)*r00*x12502))+((r01*x12500))+((r02*x12498)));
evalcond[2]=((-1.0)+((r11*x12500))+(((-1.0)*r10*x12502))+((r12*x12498)));
evalcond[3]=(((r11*x12501))+(((-1.0)*r10*x12503))+(((-1.0)*r12*x12499)));
evalcond[4]=(((cj6*sj5))+(((-1.0)*r02*x12499))+(((-1.0)*r00*x12503))+((r01*x12501))+((cj5*sj6)));
evalcond[5]=(((sj5*sj6))+((r21*x12501))+(((-1.0)*r20*x12503))+(((-1.0)*cj5*cj6))+(((-1.0)*r22*x12499)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12504=((-1.0)*r00);
IkReal x12506 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x12506)==0){
continue;
}
IkReal x12505=pow(x12506,-0.5);
CheckValue<IkReal> x12507 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x12504),IKFAST_ATAN2_MAGTHRESH);
if(!x12507.valid){
continue;
}
IkReal gconst30=((-1.0)*(x12507.value));
IkReal gconst31=(r01*x12505);
IkReal gconst32=(x12504*x12505);
CheckValue<IkReal> x12508 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12508.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x12508.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x12509=((-1.0)*r00);
IkReal x12510=x12505;
CheckValue<IkReal> x12512 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x12509),IKFAST_ATAN2_MAGTHRESH);
if(!x12512.valid){
continue;
}
IkReal x12511=((-1.0)*(x12512.value));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj9=gconst31;
cj9=gconst32;
j9=x12511;
IkReal gconst30=x12511;
IkReal gconst31=(r01*x12510);
IkReal gconst32=(x12509*x12510);
j8eval[0]=1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
IkReal x12513=((-1.0)*r00);
IkReal x12514=x12505;
CheckValue<IkReal> x12516 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x12513),IKFAST_ATAN2_MAGTHRESH);
if(!x12516.valid){
continue;
}
IkReal x12515=((-1.0)*(x12516.value));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj9=gconst31;
cj9=gconst32;
j9=x12515;
IkReal gconst30=x12515;
IkReal gconst31=(r01*x12514);
IkReal gconst32=(x12513*x12514);
CheckValue<IkReal> x12524=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x12524.valid){
continue;
}
IkReal x12517=x12524.value;
IkReal x12518=(sj7*x12517);
IkReal x12519=(r21*x12518);
IkReal x12520=(r10*x12518);
IkReal x12521=(r11*x12518);
IkReal x12522=(r20*x12518);
IkReal x12523=(r00*r01*x12518);
j8eval[0]=IKsign((((r00*r01*r10*x12519))+((r11*x12519*(r01*r01)))+((r00*r01*r20*x12521))+((r12*r22*sj7))+((r20*x12520*(r00*r00)))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
IkReal x12525=((-1.0)*r00);
IkReal x12526=x12505;
CheckValue<IkReal> x12528 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x12525),IKFAST_ATAN2_MAGTHRESH);
if(!x12528.valid){
continue;
}
IkReal x12527=((-1.0)*(x12528.value));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj9=gconst31;
cj9=gconst32;
j9=x12527;
IkReal gconst30=x12527;
IkReal gconst31=(r01*x12526);
IkReal gconst32=(x12525*x12526);
CheckValue<IkReal> x12536=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x12536.valid){
continue;
}
IkReal x12529=x12536.value;
IkReal x12530=(cj7*x12529);
IkReal x12531=(r20*x12530);
IkReal x12532=(r11*x12530);
IkReal x12533=(r10*x12530);
IkReal x12534=(r21*x12530);
IkReal x12535=(r00*r01*x12530);
j8eval[0]=IKsign((((r00*r01*r11*x12531))+((cj7*r12*r22))+((r21*x12532*(r01*r01)))+((r00*r01*r21*x12533))+((r10*x12531*(r00*r00)))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x12537=((-1.0)*r00);
IkReal x12538=x12505;
CheckValue<IkReal> x12540 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x12537),IKFAST_ATAN2_MAGTHRESH);
if(!x12540.valid){
continue;
}
IkReal x12539=((-1.0)*(x12540.value));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj9=gconst31;
cj9=gconst32;
j9=x12539;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
IkReal gconst30=x12539;
IkReal gconst31=(r01*x12538);
IkReal gconst32=(x12537*x12538);
j8eval[0]=1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x12541=((-1.0)*r00);
IkReal x12542=x12505;
CheckValue<IkReal> x12544 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x12541),IKFAST_ATAN2_MAGTHRESH);
if(!x12544.valid){
continue;
}
IkReal x12543=((-1.0)*(x12544.value));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj9=gconst31;
cj9=gconst32;
j9=x12543;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
IkReal gconst30=x12543;
IkReal gconst31=(r01*x12542);
IkReal gconst32=(x12541*x12542);
j8eval[0]=r12;
j8eval[1]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
IkReal x12545=((-1.0)*r00);
IkReal x12546=x12505;
CheckValue<IkReal> x12548 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x12545),IKFAST_ATAN2_MAGTHRESH);
if(!x12548.valid){
continue;
}
IkReal x12547=((-1.0)*(x12548.value));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj9=gconst31;
cj9=gconst32;
j9=x12547;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
IkReal gconst30=x12547;
IkReal gconst31=(r01*x12546);
IkReal gconst32=(x12545*x12546);
IkReal x12549=(cj5*r12*sj6);
IkReal x12550=(cj6*r12*sj5);
IkReal x12551=x12505;
IkReal x12552=(r02*x12551);
j8eval[0]=((IKabs((x12549+x12550)))+(IKabs((((x12550*x12552))+((x12549*x12552))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x12553=(cj5*sj6);
IkReal x12554=(gconst31*r11);
IkReal x12555=(cj6*sj5);
IkReal x12556=((1.0)*gconst32*r10);
CheckValue<IkReal> x12557 = IKatan2WithCheck(IkReal((((r12*x12555))+((r12*x12553)))),IkReal((((x12553*x12554))+(((-1.0)*x12555*x12556))+((x12554*x12555))+(((-1.0)*x12553*x12556)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12557.valid){
continue;
}
CheckValue<IkReal> x12558=IKPowWithIntegerCheck(IKsign((((gconst31*r20))+((gconst32*r21)))),-1);
if(!x12558.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x12557.value)+(((1.5707963267949)*(x12558.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x12559=IKcos(j8);
IkReal x12560=IKsin(j8);
IkReal x12561=(gconst32*r20);
IkReal x12562=(gconst32*r10);
IkReal x12563=(gconst32*r00);
IkReal x12564=((1.0)*x12559);
IkReal x12565=(gconst31*x12559);
IkReal x12566=((1.0)*gconst31*x12560);
evalcond[0]=((((-1.0)*x12561*x12564))+((r21*x12565))+((r22*x12560)));
evalcond[1]=((((-1.0)*x12563*x12564))+((r01*x12565))+((r02*x12560)));
evalcond[2]=((((-1.0)*r11*x12566))+((r12*x12559))+((x12560*x12562)));
evalcond[3]=((-1.0)+((r11*x12565))+((r12*x12560))+(((-1.0)*x12562*x12564)));
evalcond[4]=(((cj6*sj5))+(((-1.0)*r01*x12566))+((cj5*sj6))+((x12560*x12563))+((r02*x12559)));
evalcond[5]=(((sj5*sj6))+((x12560*x12561))+((r22*x12559))+(((-1.0)*cj5*cj6))+(((-1.0)*r21*x12566)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x12567=(gconst31*r11);
IkReal x12568=(gconst32*r10);
CheckValue<IkReal> x12569 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x12568))+x12567)),IKFAST_ATAN2_MAGTHRESH);
if(!x12569.valid){
continue;
}
CheckValue<IkReal> x12570=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x12568*x12568)+(x12567*x12567)+(((-2.0)*x12567*x12568)))),-1);
if(!x12570.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x12569.value)+(((1.5707963267949)*(x12570.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x12571=IKcos(j8);
IkReal x12572=IKsin(j8);
IkReal x12573=(gconst32*r20);
IkReal x12574=(gconst32*r10);
IkReal x12575=(gconst32*r00);
IkReal x12576=((1.0)*x12571);
IkReal x12577=(gconst31*x12571);
IkReal x12578=((1.0)*gconst31*x12572);
evalcond[0]=(((r22*x12572))+((r21*x12577))+(((-1.0)*x12573*x12576)));
evalcond[1]=(((r02*x12572))+(((-1.0)*x12575*x12576))+((r01*x12577)));
evalcond[2]=((((-1.0)*r11*x12578))+((x12572*x12574))+((r12*x12571)));
evalcond[3]=((-1.0)+(((-1.0)*x12574*x12576))+((r12*x12572))+((r11*x12577)));
evalcond[4]=(((cj6*sj5))+((r02*x12571))+((cj5*sj6))+((x12572*x12575))+(((-1.0)*r01*x12578)));
evalcond[5]=(((r22*x12571))+(((-1.0)*r21*x12578))+((sj5*sj6))+((x12572*x12573))+(((-1.0)*cj5*cj6)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x12579=IKPowWithIntegerCheck(IKsign((((gconst31*r20))+((gconst32*r21)))),-1);
if(!x12579.valid){
continue;
}
CheckValue<IkReal> x12580 = IKatan2WithCheck(IkReal(((((-1.0)*gconst32*r00))+((gconst31*r01)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12580.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12579.value)))+(x12580.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x12581=IKcos(j8);
IkReal x12582=IKsin(j8);
IkReal x12583=(gconst32*r20);
IkReal x12584=(gconst32*r10);
IkReal x12585=(gconst32*r00);
IkReal x12586=((1.0)*x12581);
IkReal x12587=(gconst31*x12581);
IkReal x12588=((1.0)*gconst31*x12582);
evalcond[0]=(((r21*x12587))+((r22*x12582))+(((-1.0)*x12583*x12586)));
evalcond[1]=(((r01*x12587))+(((-1.0)*x12585*x12586))+((r02*x12582)));
evalcond[2]=(((r12*x12581))+(((-1.0)*r11*x12588))+((x12582*x12584)));
evalcond[3]=((-1.0)+((r12*x12582))+(((-1.0)*x12584*x12586))+((r11*x12587)));
evalcond[4]=((((-1.0)*r01*x12588))+((cj6*sj5))+((cj5*sj6))+((r02*x12581))+((x12582*x12585)));
evalcond[5]=(((sj5*sj6))+(((-1.0)*r21*x12588))+((r22*x12581))+((x12582*x12583))+(((-1.0)*cj5*cj6)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x12589=((-1.0)*r00);
IkReal x12590=x12505;
CheckValue<IkReal> x12592 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x12589),IKFAST_ATAN2_MAGTHRESH);
if(!x12592.valid){
continue;
}
IkReal x12591=((-1.0)*(x12592.value));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj9=gconst31;
cj9=gconst32;
j9=x12591;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
IkReal gconst30=x12591;
IkReal gconst31=(r01*x12590);
IkReal gconst32=(x12589*x12590);
j8eval[0]=1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x12593=((-1.0)*r00);
IkReal x12594=x12505;
CheckValue<IkReal> x12596 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x12593),IKFAST_ATAN2_MAGTHRESH);
if(!x12596.valid){
continue;
}
IkReal x12595=((-1.0)*(x12596.value));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj9=gconst31;
cj9=gconst32;
j9=x12595;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
IkReal gconst30=x12595;
IkReal gconst31=(r01*x12594);
IkReal gconst32=(x12593*x12594);
j8eval[0]=r12;
j8eval[1]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
IkReal x12597=((-1.0)*r00);
IkReal x12598=x12505;
CheckValue<IkReal> x12600 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x12597),IKFAST_ATAN2_MAGTHRESH);
if(!x12600.valid){
continue;
}
IkReal x12599=((-1.0)*(x12600.value));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj9=gconst31;
cj9=gconst32;
j9=x12599;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
IkReal gconst30=x12599;
IkReal gconst31=(r01*x12598);
IkReal gconst32=(x12597*x12598);
IkReal x12601=r02*r02;
IkReal x12602=((1.0)+(((-1.0)*x12601)));
IkReal x12603=(cj5*cj6*r22);
IkReal x12604=(r22*sj5*sj6);
CheckValue<IkReal> x12611=IKPowWithIntegerCheck(x12602,-1);
if(!x12611.valid){
continue;
}
IkReal x12605=x12611.value;
CheckValue<IkReal> x12612=IKPowWithIntegerCheck(((-1.0)+x12601),-1);
if(!x12612.valid){
continue;
}
IkReal x12606=x12612.value;
IkReal x12607=((1.0)*x12605);
if((x12602) < -0.00001)
continue;
IkReal x12608=IKsqrt(x12602);
IkReal x12609=(r02*x12606*x12608);
IkReal x12610=((((-1.0)*x12607*(r00*r00)*(r20*r20)))+(((-1.0)*x12607*(r01*r01)*(r21*r21)))+(((-1.0)*(r22*r22)))+(((-2.0)*r00*r01*r20*r21*x12605)));
j8eval[0]=x12610;
j8eval[1]=IKsign(x12610);
j8eval[2]=((IKabs(((((-1.0)*x12604))+x12603)))+(IKabs((((x12604*x12609))+(((-1.0)*x12603*x12609))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x12613=(cj5*cj6);
IkReal x12614=(gconst31*r21);
IkReal x12615=(gconst32*r20);
IkReal x12616=((1.0)*sj5*sj6);
CheckValue<IkReal> x12617 = IKatan2WithCheck(IkReal((((sj5*sj6*x12614))+(((-1.0)*x12615*x12616))+((x12613*x12615))+(((-1.0)*x12613*x12614)))),IkReal(((((-1.0)*r22*x12616))+((r22*x12613)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12617.valid){
continue;
}
CheckValue<IkReal> x12618=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x12614*x12614)))+(((-1.0)*(x12615*x12615)))+(((2.0)*x12614*x12615))+(((-1.0)*(r22*r22))))),-1);
if(!x12618.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x12617.value)+(((1.5707963267949)*(x12618.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x12619=IKcos(j8);
IkReal x12620=IKsin(j8);
IkReal x12621=(gconst31*r21);
IkReal x12622=((1.0)*gconst32);
IkReal x12623=((1.0)*x12619);
IkReal x12624=(gconst31*x12619);
IkReal x12625=(gconst31*x12620);
evalcond[0]=((((-1.0)*r20*x12619*x12622))+((r22*x12620))+((x12619*x12621)));
evalcond[1]=(((r02*x12620))+(((-1.0)*r00*x12619*x12622))+((r01*x12624)));
evalcond[2]=((-1.0)+(((-1.0)*r10*x12619*x12622))+((r12*x12620))+((r11*x12624)));
evalcond[3]=((((-1.0)*r10*x12620*x12622))+(((-1.0)*r12*x12623))+((r11*x12625)));
evalcond[4]=((((-1.0)*r02*x12623))+((cj6*sj5))+((cj5*sj6))+(((-1.0)*r00*x12620*x12622))+((r01*x12625)));
evalcond[5]=((((-1.0)*r22*x12623))+((sj5*sj6))+((x12620*x12621))+(((-1.0)*r20*x12620*x12622))+(((-1.0)*cj5*cj6)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x12626=(gconst31*r11);
IkReal x12627=(gconst32*r10);
CheckValue<IkReal> x12628=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x12626*x12627))+(x12626*x12626)+(x12627*x12627))),-1);
if(!x12628.valid){
continue;
}
CheckValue<IkReal> x12629 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x12627))+x12626)),IKFAST_ATAN2_MAGTHRESH);
if(!x12629.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12628.value)))+(x12629.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x12630=IKcos(j8);
IkReal x12631=IKsin(j8);
IkReal x12632=(gconst31*r21);
IkReal x12633=((1.0)*gconst32);
IkReal x12634=((1.0)*x12630);
IkReal x12635=(gconst31*x12630);
IkReal x12636=(gconst31*x12631);
evalcond[0]=(((x12630*x12632))+((r22*x12631))+(((-1.0)*r20*x12630*x12633)));
evalcond[1]=((((-1.0)*r00*x12630*x12633))+((r01*x12635))+((r02*x12631)));
evalcond[2]=((-1.0)+((r11*x12635))+((r12*x12631))+(((-1.0)*r10*x12630*x12633)));
evalcond[3]=(((r11*x12636))+(((-1.0)*r10*x12631*x12633))+(((-1.0)*r12*x12634)));
evalcond[4]=(((cj6*sj5))+(((-1.0)*r00*x12631*x12633))+((cj5*sj6))+((r01*x12636))+(((-1.0)*r02*x12634)));
evalcond[5]=(((sj5*sj6))+(((-1.0)*r22*x12634))+(((-1.0)*r20*x12631*x12633))+(((-1.0)*cj5*cj6))+((x12631*x12632)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x12637=IKPowWithIntegerCheck(IKsign((((gconst31*r20))+((gconst32*r21)))),-1);
if(!x12637.valid){
continue;
}
CheckValue<IkReal> x12638 = IKatan2WithCheck(IkReal(((((-1.0)*gconst32*r00))+((gconst31*r01)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12638.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12637.value)))+(x12638.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x12639=IKcos(j8);
IkReal x12640=IKsin(j8);
IkReal x12641=(gconst31*r21);
IkReal x12642=((1.0)*gconst32);
IkReal x12643=((1.0)*x12639);
IkReal x12644=(gconst31*x12639);
IkReal x12645=(gconst31*x12640);
evalcond[0]=(((x12639*x12641))+((r22*x12640))+(((-1.0)*r20*x12639*x12642)));
evalcond[1]=((((-1.0)*r00*x12639*x12642))+((r01*x12644))+((r02*x12640)));
evalcond[2]=((-1.0)+((r12*x12640))+(((-1.0)*r10*x12639*x12642))+((r11*x12644)));
evalcond[3]=((((-1.0)*r10*x12640*x12642))+(((-1.0)*r12*x12643))+((r11*x12645)));
evalcond[4]=((((-1.0)*r02*x12643))+((cj6*sj5))+((cj5*sj6))+(((-1.0)*r00*x12640*x12642))+((r01*x12645)));
evalcond[5]=(((sj5*sj6))+(((-1.0)*r22*x12643))+(((-1.0)*r20*x12640*x12642))+(((-1.0)*cj5*cj6))+((x12640*x12641)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x12646=((-1.0)*r00);
IkReal x12647=x12505;
CheckValue<IkReal> x12649 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x12646),IKFAST_ATAN2_MAGTHRESH);
if(!x12649.valid){
continue;
}
IkReal x12648=((-1.0)*(x12649.value));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj9=gconst31;
cj9=gconst32;
j9=x12648;
sj7=0;
cj7=1.0;
j7=0;
IkReal gconst30=x12648;
IkReal gconst31=(r01*x12647);
IkReal gconst32=(x12646*x12647);
j8eval[0]=1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x12650=((-1.0)*r00);
IkReal x12651=x12505;
CheckValue<IkReal> x12653 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x12650),IKFAST_ATAN2_MAGTHRESH);
if(!x12653.valid){
continue;
}
IkReal x12652=((-1.0)*(x12653.value));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj9=gconst31;
cj9=gconst32;
j9=x12652;
sj7=0;
cj7=1.0;
j7=0;
IkReal gconst30=x12652;
IkReal gconst31=(r01*x12651);
IkReal gconst32=(x12650*x12651);
j8eval[0]=r12;
j8eval[1]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
IkReal x12654=((-1.0)*r00);
IkReal x12655=x12505;
CheckValue<IkReal> x12657 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x12654),IKFAST_ATAN2_MAGTHRESH);
if(!x12657.valid){
continue;
}
IkReal x12656=((-1.0)*(x12657.value));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj9=gconst31;
cj9=gconst32;
j9=x12656;
sj7=0;
cj7=1.0;
j7=0;
IkReal gconst30=x12656;
IkReal gconst31=(r01*x12655);
IkReal gconst32=(x12654*x12655);
IkReal x12658=r02*r02;
IkReal x12659=(r12*sj5*sj6);
CheckValue<IkReal> x12664=IKPowWithIntegerCheck(((-1.0)+x12658),-1);
if(!x12664.valid){
continue;
}
IkReal x12660=x12664.value;
IkReal x12661=((1.0)*cj5*cj6*r12);
if((((1.0)+(((-1.0)*x12658)))) < -0.00001)
continue;
IkReal x12662=IKsqrt(((1.0)+(((-1.0)*x12658))));
IkReal x12663=(r02*x12660*x12662);
j8eval[0]=((IKabs(((((-1.0)*x12661))+x12659)))+(IKabs(((((-1.0)*x12661*x12663))+((x12659*x12663))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x12665=(gconst31*r11);
IkReal x12666=(gconst32*r10);
IkReal x12667=(sj5*sj6);
IkReal x12668=((1.0)*cj5*cj6);
CheckValue<IkReal> x12669 = IKatan2WithCheck(IkReal((((r12*x12667))+(((-1.0)*r12*x12668)))),IkReal((((cj5*cj6*x12666))+(((-1.0)*x12665*x12668))+(((-1.0)*x12666*x12667))+((x12665*x12667)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12669.valid){
continue;
}
CheckValue<IkReal> x12670=IKPowWithIntegerCheck(IKsign((((gconst31*r20))+((gconst32*r21)))),-1);
if(!x12670.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x12669.value)+(((1.5707963267949)*(x12670.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x12671=IKcos(j8);
IkReal x12672=IKsin(j8);
IkReal x12673=((1.0)*cj6);
IkReal x12674=(gconst31*r21);
IkReal x12675=(gconst32*r20);
IkReal x12676=(gconst32*r10);
IkReal x12677=(gconst31*r11);
IkReal x12678=(gconst32*r00);
IkReal x12679=(gconst31*r01);
IkReal x12680=((1.0)*x12672);
IkReal x12681=((1.0)*x12671);
evalcond[0]=((((-1.0)*x12675*x12681))+((r22*x12672))+((x12671*x12674)));
evalcond[1]=(((r02*x12672))+(((-1.0)*x12678*x12681))+((x12671*x12679)));
evalcond[2]=(((r12*x12671))+(((-1.0)*x12677*x12680))+((x12672*x12676)));
evalcond[3]=((-1.0)+(((-1.0)*x12676*x12681))+((r12*x12672))+((x12671*x12677)));
evalcond[4]=(((sj5*sj6))+((r02*x12671))+(((-1.0)*cj5*x12673))+((x12672*x12678))+(((-1.0)*x12679*x12680)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*x12674*x12680))+((r22*x12671))+(((-1.0)*sj5*x12673))+((x12672*x12675)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x12682=(gconst31*r11);
IkReal x12683=(gconst32*r10);
CheckValue<IkReal> x12684 = IKatan2WithCheck(IkReal(r12),IkReal((x12682+(((-1.0)*x12683)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12684.valid){
continue;
}
CheckValue<IkReal> x12685=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x12682*x12683))+(x12682*x12682)+(x12683*x12683))),-1);
if(!x12685.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x12684.value)+(((1.5707963267949)*(x12685.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x12686=IKcos(j8);
IkReal x12687=IKsin(j8);
IkReal x12688=((1.0)*cj6);
IkReal x12689=(gconst31*r21);
IkReal x12690=(gconst32*r20);
IkReal x12691=(gconst32*r10);
IkReal x12692=(gconst31*r11);
IkReal x12693=(gconst32*r00);
IkReal x12694=(gconst31*r01);
IkReal x12695=((1.0)*x12687);
IkReal x12696=((1.0)*x12686);
evalcond[0]=(((x12686*x12689))+((r22*x12687))+(((-1.0)*x12690*x12696)));
evalcond[1]=(((r02*x12687))+(((-1.0)*x12693*x12696))+((x12686*x12694)));
evalcond[2]=((((-1.0)*x12692*x12695))+((r12*x12686))+((x12687*x12691)));
evalcond[3]=((-1.0)+((r12*x12687))+(((-1.0)*x12691*x12696))+((x12686*x12692)));
evalcond[4]=(((sj5*sj6))+((x12687*x12693))+((r02*x12686))+(((-1.0)*x12694*x12695))+(((-1.0)*cj5*x12688)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*x12689*x12695))+((x12687*x12690))+((r22*x12686))+(((-1.0)*sj5*x12688)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x12697=IKPowWithIntegerCheck(IKsign((((gconst31*r20))+((gconst32*r21)))),-1);
if(!x12697.valid){
continue;
}
CheckValue<IkReal> x12698 = IKatan2WithCheck(IkReal(((((-1.0)*gconst32*r00))+((gconst31*r01)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12698.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12697.value)))+(x12698.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x12699=IKcos(j8);
IkReal x12700=IKsin(j8);
IkReal x12701=((1.0)*cj6);
IkReal x12702=(gconst31*r21);
IkReal x12703=(gconst32*r20);
IkReal x12704=(gconst32*r10);
IkReal x12705=(gconst31*r11);
IkReal x12706=(gconst32*r00);
IkReal x12707=(gconst31*r01);
IkReal x12708=((1.0)*x12700);
IkReal x12709=((1.0)*x12699);
evalcond[0]=(((x12699*x12702))+((r22*x12700))+(((-1.0)*x12703*x12709)));
evalcond[1]=(((x12699*x12707))+(((-1.0)*x12706*x12709))+((r02*x12700)));
evalcond[2]=(((x12700*x12704))+(((-1.0)*x12705*x12708))+((r12*x12699)));
evalcond[3]=((-1.0)+((x12699*x12705))+((r12*x12700))+(((-1.0)*x12704*x12709)));
evalcond[4]=((((-1.0)*x12707*x12708))+((x12700*x12706))+((r02*x12699))+((sj5*sj6))+(((-1.0)*cj5*x12701)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*x12702*x12708))+((x12700*x12703))+(((-1.0)*sj5*x12701))+((r22*x12699)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x12710=((-1.0)*r00);
IkReal x12711=x12505;
CheckValue<IkReal> x12713 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x12710),IKFAST_ATAN2_MAGTHRESH);
if(!x12713.valid){
continue;
}
IkReal x12712=((-1.0)*(x12713.value));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj9=gconst31;
cj9=gconst32;
j9=x12712;
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
IkReal gconst30=x12712;
IkReal gconst31=(r01*x12711);
IkReal gconst32=(x12710*x12711);
j8eval[0]=1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x12714=((-1.0)*r00);
IkReal x12715=x12505;
CheckValue<IkReal> x12717 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x12714),IKFAST_ATAN2_MAGTHRESH);
if(!x12717.valid){
continue;
}
IkReal x12716=((-1.0)*(x12717.value));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj9=gconst31;
cj9=gconst32;
j9=x12716;
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
IkReal gconst30=x12716;
IkReal gconst31=(r01*x12715);
IkReal gconst32=(x12714*x12715);
j8eval[0]=r12;
j8eval[1]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
IkReal x12718=((-1.0)*r00);
IkReal x12719=x12505;
CheckValue<IkReal> x12721 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x12718),IKFAST_ATAN2_MAGTHRESH);
if(!x12721.valid){
continue;
}
IkReal x12720=((-1.0)*(x12721.value));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj9=gconst31;
cj9=gconst32;
j9=x12720;
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
IkReal gconst30=x12720;
IkReal gconst31=(r01*x12719);
IkReal gconst32=(x12718*x12719);
IkReal x12722=r02*r02;
IkReal x12723=((1.0)+(((-1.0)*x12722)));
IkReal x12724=(cj6*r22*sj5);
IkReal x12725=(cj5*r22*sj6);
CheckValue<IkReal> x12732=IKPowWithIntegerCheck(x12723,-1);
if(!x12732.valid){
continue;
}
IkReal x12726=x12732.value;
CheckValue<IkReal> x12733=IKPowWithIntegerCheck(((-1.0)+x12722),-1);
if(!x12733.valid){
continue;
}
IkReal x12727=x12733.value;
IkReal x12728=((1.0)*x12726);
if((x12723) < -0.00001)
continue;
IkReal x12729=IKsqrt(x12723);
IkReal x12730=((1.0)*r02*x12727*x12729);
IkReal x12731=((((-1.0)*(r22*r22)))+(((-1.0)*x12728*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x12726))+(((-1.0)*x12728*(r01*r01)*(r21*r21))));
j8eval[0]=x12731;
j8eval[1]=((IKabs(((((-1.0)*x12724*x12730))+(((-1.0)*x12725*x12730)))))+(IKabs((x12725+x12724))));
j8eval[2]=IKsign(x12731);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x12734=(cj5*sj6);
IkReal x12735=(gconst31*r21);
IkReal x12736=(gconst32*r20);
IkReal x12737=(cj6*sj5);
CheckValue<IkReal> x12738=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x12736*x12736)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x12735*x12735)))+(((2.0)*x12735*x12736)))),-1);
if(!x12738.valid){
continue;
}
CheckValue<IkReal> x12739 = IKatan2WithCheck(IkReal((((x12734*x12736))+(((-1.0)*x12735*x12737))+((x12736*x12737))+(((-1.0)*x12734*x12735)))),IkReal((((r22*x12737))+((r22*x12734)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12739.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12738.value)))+(x12739.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x12740=IKcos(j8);
IkReal x12741=IKsin(j8);
IkReal x12742=(gconst31*r21);
IkReal x12743=((1.0)*cj6);
IkReal x12744=((1.0)*gconst32);
IkReal x12745=((1.0)*x12740);
IkReal x12746=(gconst31*x12740);
IkReal x12747=(gconst31*x12741);
evalcond[0]=(((r22*x12741))+(((-1.0)*r20*x12740*x12744))+((x12740*x12742)));
evalcond[1]=(((r02*x12741))+(((-1.0)*r00*x12740*x12744))+((r01*x12746)));
evalcond[2]=((-1.0)+((r11*x12746))+(((-1.0)*r10*x12740*x12744))+((r12*x12741)));
evalcond[3]=(((r11*x12747))+(((-1.0)*r10*x12741*x12744))+(((-1.0)*r12*x12745)));
evalcond[4]=(((sj5*sj6))+(((-1.0)*r02*x12745))+(((-1.0)*cj5*x12743))+(((-1.0)*r00*x12741*x12744))+((r01*x12747)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*sj5*x12743))+(((-1.0)*r22*x12745))+(((-1.0)*r20*x12741*x12744))+((x12741*x12742)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x12748=(gconst31*r11);
IkReal x12749=(gconst32*r10);
CheckValue<IkReal> x12750 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x12749))+x12748)),IKFAST_ATAN2_MAGTHRESH);
if(!x12750.valid){
continue;
}
CheckValue<IkReal> x12751=IKPowWithIntegerCheck(IKsign(((((-2.0)*x12748*x12749))+(r12*r12)+(x12748*x12748)+(x12749*x12749))),-1);
if(!x12751.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x12750.value)+(((1.5707963267949)*(x12751.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x12752=IKcos(j8);
IkReal x12753=IKsin(j8);
IkReal x12754=(gconst31*r21);
IkReal x12755=((1.0)*cj6);
IkReal x12756=((1.0)*gconst32);
IkReal x12757=((1.0)*x12752);
IkReal x12758=(gconst31*x12752);
IkReal x12759=(gconst31*x12753);
evalcond[0]=(((r22*x12753))+((x12752*x12754))+(((-1.0)*r20*x12752*x12756)));
evalcond[1]=((((-1.0)*r00*x12752*x12756))+((r02*x12753))+((r01*x12758)));
evalcond[2]=((-1.0)+((r11*x12758))+(((-1.0)*r10*x12752*x12756))+((r12*x12753)));
evalcond[3]=(((r11*x12759))+(((-1.0)*r12*x12757))+(((-1.0)*r10*x12753*x12756)));
evalcond[4]=((((-1.0)*r02*x12757))+((sj5*sj6))+(((-1.0)*cj5*x12755))+(((-1.0)*r00*x12753*x12756))+((r01*x12759)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*sj5*x12755))+(((-1.0)*r22*x12757))+((x12753*x12754))+(((-1.0)*r20*x12753*x12756)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x12760=IKPowWithIntegerCheck(IKsign((((gconst31*r20))+((gconst32*r21)))),-1);
if(!x12760.valid){
continue;
}
CheckValue<IkReal> x12761 = IKatan2WithCheck(IkReal(((((-1.0)*gconst32*r00))+((gconst31*r01)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12761.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12760.value)))+(x12761.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x12762=IKcos(j8);
IkReal x12763=IKsin(j8);
IkReal x12764=(gconst31*r21);
IkReal x12765=((1.0)*cj6);
IkReal x12766=((1.0)*gconst32);
IkReal x12767=((1.0)*x12762);
IkReal x12768=(gconst31*x12762);
IkReal x12769=(gconst31*x12763);
evalcond[0]=(((x12762*x12764))+((r22*x12763))+(((-1.0)*r20*x12762*x12766)));
evalcond[1]=(((r02*x12763))+(((-1.0)*r00*x12762*x12766))+((r01*x12768)));
evalcond[2]=((-1.0)+((r12*x12763))+(((-1.0)*r10*x12762*x12766))+((r11*x12768)));
evalcond[3]=((((-1.0)*r12*x12767))+(((-1.0)*r10*x12763*x12766))+((r11*x12769)));
evalcond[4]=((((-1.0)*cj5*x12765))+(((-1.0)*r00*x12763*x12766))+((sj5*sj6))+(((-1.0)*r02*x12767))+((r01*x12769)));
evalcond[5]=((((-1.0)*cj5*sj6))+((x12763*x12764))+(((-1.0)*r22*x12767))+(((-1.0)*r20*x12763*x12766))+(((-1.0)*sj5*x12765)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[2];
IkReal x12770=((-1.0)*r00);
IkReal x12771=((-1.0)*r01);
CheckValue<IkReal> x12773 = IKatan2WithCheck(IkReal(x12771),IkReal(x12770),IKFAST_ATAN2_MAGTHRESH);
if(!x12773.valid){
continue;
}
IkReal x12772=((-1.0)*(x12773.value));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj9=gconst31;
cj9=gconst32;
j9=x12772;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(pz*x12770);
rxp1_0=(pz*r11);
rxp1_1=(pz*x12771);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal gconst30=x12772;
IkReal gconst31=r01;
IkReal gconst32=x12770;
IkReal x12774=(r01*r11);
IkReal x12775=((1.0)*sj7);
IkReal x12776=(r00*r10);
j8eval[0]=((((-1.0)*x12774*x12775))+(((-1.0)*x12775*x12776)));
j8eval[1]=(x12776+x12774);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x12777=((-1.0)*r00);
IkReal x12778=((-1.0)*r01);
CheckValue<IkReal> x12780 = IKatan2WithCheck(IkReal(x12778),IkReal(x12777),IKFAST_ATAN2_MAGTHRESH);
if(!x12780.valid){
continue;
}
IkReal x12779=((-1.0)*(x12780.value));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj9=gconst31;
cj9=gconst32;
j9=x12779;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(pz*x12777);
rxp1_0=(pz*r11);
rxp1_1=(pz*x12778);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal gconst30=x12779;
IkReal gconst31=r01;
IkReal gconst32=x12777;
IkReal x12781=((1.0)*cj7);
IkReal x12782=(r00*r10);
IkReal x12783=(r01*r11);
j8eval[0]=((((-1.0)*x12781*x12782))+(((-1.0)*x12781*x12783)));
j8eval[1]=(x12783+x12782);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
IkReal x12784=((-1.0)*r00);
IkReal x12785=((-1.0)*r01);
CheckValue<IkReal> x12787 = IKatan2WithCheck(IkReal(x12785),IkReal(x12784),IKFAST_ATAN2_MAGTHRESH);
if(!x12787.valid){
continue;
}
IkReal x12786=((-1.0)*(x12787.value));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj9=gconst31;
cj9=gconst32;
j9=x12786;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(pz*x12784);
rxp1_0=(pz*r11);
rxp1_1=(pz*x12785);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal gconst30=x12786;
IkReal gconst31=r01;
IkReal gconst32=x12784;
IkReal x12788=((1.0)*cj7);
j8eval[0]=((((-1.0)*r00*r10*x12788))+(((-1.0)*r01*r11*x12788)));
j8eval[1]=cj7;
j8eval[2]=r22;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x12789=((1.0)*sj7);
CheckValue<IkReal> x12790=IKPowWithIntegerCheck((((cj7*gconst32*r10))+(((-1.0)*cj7*gconst31*r11))),-1);
if(!x12790.valid){
continue;
}
CheckValue<IkReal> x12791=IKPowWithIntegerCheck(cj7,-1);
if(!x12791.valid){
continue;
}
CheckValue<IkReal> x12792=IKPowWithIntegerCheck(r22,-1);
if(!x12792.valid){
continue;
}
if( IKabs(((x12790.value)*(((((-1.0)*gconst31*r10*x12789))+(((-1.0)*gconst32*r11*x12789)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12791.value)*(x12792.value)*((((cj6*sj5))+((cj5*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12790.value)*(((((-1.0)*gconst31*r10*x12789))+(((-1.0)*gconst32*r11*x12789))))))+IKsqr(((x12791.value)*(x12792.value)*((((cj6*sj5))+((cj5*sj6))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((x12790.value)*(((((-1.0)*gconst31*r10*x12789))+(((-1.0)*gconst32*r11*x12789))))), ((x12791.value)*(x12792.value)*((((cj6*sj5))+((cj5*sj6))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x12793=IKcos(j8);
IkReal x12794=IKsin(j8);
IkReal x12795=(sj5*sj6);
IkReal x12796=((1.0)*cj7);
IkReal x12797=(gconst32*r11);
IkReal x12798=(gconst31*r00);
IkReal x12799=((1.0)*cj6);
IkReal x12800=(gconst32*r10);
IkReal x12801=((1.0)*gconst31);
IkReal x12802=(gconst32*r01);
IkReal x12803=(gconst31*r01);
IkReal x12804=(gconst31*r11);
IkReal x12805=(gconst31*r10);
IkReal x12806=(cj5*sj6);
IkReal x12807=(gconst32*r00);
IkReal x12808=(cj5*x12799);
IkReal x12809=((1.0)*x12793);
IkReal x12810=(cj7*x12794);
IkReal x12811=(sj7*x12794);
IkReal x12812=(r22*x12793);
evalcond[0]=(r22*x12794);
evalcond[1]=(((x12793*x12803))+(((-1.0)*x12807*x12809)));
evalcond[2]=((((-1.0)*x12808))+((sj7*x12812))+x12795);
evalcond[3]=((-1.0)+(((-1.0)*x12800*x12809))+((x12793*x12804)));
evalcond[4]=(((cj7*x12812))+(((-1.0)*sj5*x12799))+(((-1.0)*x12806)));
evalcond[5]=(((sj7*x12805))+(((-1.0)*x12794*x12796*x12804))+((x12800*x12810))+((sj7*x12797)));
evalcond[6]=((((-1.0)*x12796*x12805))+((x12800*x12811))+(((-1.0)*x12796*x12797))+(((-1.0)*r11*x12801*x12811)));
evalcond[7]=(((x12807*x12810))+(((-1.0)*x12808))+((sj7*x12802))+(((-1.0)*x12794*x12796*x12803))+x12795+((sj7*x12798)));
evalcond[8]=(((x12807*x12811))+x12806+(((-1.0)*x12796*x12802))+((cj6*sj5))+(((-1.0)*r01*x12801*x12811))+(((-1.0)*x12796*x12798)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x12813=(gconst31*r11);
IkReal x12814=((1.0)*r10);
CheckValue<IkReal> x12815=IKPowWithIntegerCheck(((((-1.0)*cj7*x12813))+((cj7*gconst32*r10))),-1);
if(!x12815.valid){
continue;
}
CheckValue<IkReal> x12816=IKPowWithIntegerCheck((x12813+(((-1.0)*gconst32*x12814))),-1);
if(!x12816.valid){
continue;
}
if( IKabs(((x12815.value)*(((((-1.0)*gconst32*r11*sj7))+(((-1.0)*gconst31*sj7*x12814)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x12816.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12815.value)*(((((-1.0)*gconst32*r11*sj7))+(((-1.0)*gconst31*sj7*x12814))))))+IKsqr(x12816.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((x12815.value)*(((((-1.0)*gconst32*r11*sj7))+(((-1.0)*gconst31*sj7*x12814))))), x12816.value);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x12817=IKcos(j8);
IkReal x12818=IKsin(j8);
IkReal x12819=(sj5*sj6);
IkReal x12820=((1.0)*cj7);
IkReal x12821=(gconst32*r11);
IkReal x12822=(gconst31*r00);
IkReal x12823=((1.0)*cj6);
IkReal x12824=(gconst32*r10);
IkReal x12825=((1.0)*gconst31);
IkReal x12826=(gconst32*r01);
IkReal x12827=(gconst31*r01);
IkReal x12828=(gconst31*r11);
IkReal x12829=(gconst31*r10);
IkReal x12830=(cj5*sj6);
IkReal x12831=(gconst32*r00);
IkReal x12832=(cj5*x12823);
IkReal x12833=((1.0)*x12817);
IkReal x12834=(cj7*x12818);
IkReal x12835=(sj7*x12818);
IkReal x12836=(r22*x12817);
evalcond[0]=(r22*x12818);
evalcond[1]=(((x12817*x12827))+(((-1.0)*x12831*x12833)));
evalcond[2]=(x12819+(((-1.0)*x12832))+((sj7*x12836)));
evalcond[3]=((-1.0)+(((-1.0)*x12824*x12833))+((x12817*x12828)));
evalcond[4]=(((cj7*x12836))+(((-1.0)*sj5*x12823))+(((-1.0)*x12830)));
evalcond[5]=(((x12824*x12834))+((sj7*x12829))+((sj7*x12821))+(((-1.0)*x12818*x12820*x12828)));
evalcond[6]=(((x12824*x12835))+(((-1.0)*r11*x12825*x12835))+(((-1.0)*x12820*x12829))+(((-1.0)*x12820*x12821)));
evalcond[7]=(x12819+((sj7*x12826))+((sj7*x12822))+(((-1.0)*x12832))+((x12831*x12834))+(((-1.0)*x12818*x12820*x12827)));
evalcond[8]=(x12830+((cj6*sj5))+((x12831*x12835))+(((-1.0)*r01*x12825*x12835))+(((-1.0)*x12820*x12826))+(((-1.0)*x12820*x12822)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x12837=(gconst31*r11);
IkReal x12838=(gconst32*r10);
CheckValue<IkReal> x12839=IKPowWithIntegerCheck(((((-1.0)*sj7*x12837))+((sj7*x12838))),-1);
if(!x12839.valid){
continue;
}
CheckValue<IkReal> x12840=IKPowWithIntegerCheck((x12837+(((-1.0)*x12838))),-1);
if(!x12840.valid){
continue;
}
if( IKabs(((x12839.value)*((((cj7*gconst32*r11))+((cj7*gconst31*r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x12840.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12839.value)*((((cj7*gconst32*r11))+((cj7*gconst31*r10))))))+IKsqr(x12840.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((x12839.value)*((((cj7*gconst32*r11))+((cj7*gconst31*r10))))), x12840.value);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x12841=IKcos(j8);
IkReal x12842=IKsin(j8);
IkReal x12843=(sj5*sj6);
IkReal x12844=((1.0)*cj7);
IkReal x12845=(gconst32*r11);
IkReal x12846=(gconst31*r00);
IkReal x12847=((1.0)*cj6);
IkReal x12848=(gconst32*r10);
IkReal x12849=((1.0)*gconst31);
IkReal x12850=(gconst32*r01);
IkReal x12851=(gconst31*r01);
IkReal x12852=(gconst31*r11);
IkReal x12853=(gconst31*r10);
IkReal x12854=(cj5*sj6);
IkReal x12855=(gconst32*r00);
IkReal x12856=(cj5*x12847);
IkReal x12857=((1.0)*x12841);
IkReal x12858=(cj7*x12842);
IkReal x12859=(sj7*x12842);
IkReal x12860=(r22*x12841);
evalcond[0]=(r22*x12842);
evalcond[1]=(((x12841*x12851))+(((-1.0)*x12855*x12857)));
evalcond[2]=(x12843+(((-1.0)*x12856))+((sj7*x12860)));
evalcond[3]=((-1.0)+((x12841*x12852))+(((-1.0)*x12848*x12857)));
evalcond[4]=((((-1.0)*x12854))+((cj7*x12860))+(((-1.0)*sj5*x12847)));
evalcond[5]=(((sj7*x12853))+((sj7*x12845))+((x12848*x12858))+(((-1.0)*x12842*x12844*x12852)));
evalcond[6]=((((-1.0)*r11*x12849*x12859))+(((-1.0)*x12844*x12853))+(((-1.0)*x12844*x12845))+((x12848*x12859)));
evalcond[7]=(((x12855*x12858))+x12843+((sj7*x12850))+((sj7*x12846))+(((-1.0)*x12856))+(((-1.0)*x12842*x12844*x12851)));
evalcond[8]=((((-1.0)*r01*x12849*x12859))+((x12855*x12859))+x12854+((cj6*sj5))+(((-1.0)*x12844*x12850))+(((-1.0)*x12844*x12846)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x12861=gconst31*gconst31;
IkReal x12862=gconst32*gconst32;
IkReal x12863=((1.0)*sj7);
IkReal x12864=(gconst31*r10);
IkReal x12865=(gconst32*r11);
IkReal x12866=(r21*sj7);
IkReal x12867=(cj7*r21);
IkReal x12868=(r20*x12862);
CheckValue<IkReal> x12869=IKPowWithIntegerCheck(IKsign((((r11*x12861*x12867))+((cj7*r10*x12868))+((cj7*r12*r22))+(((-1.0)*cj7*gconst31*r20*x12865))+(((-1.0)*gconst32*x12864*x12867)))),-1);
if(!x12869.valid){
continue;
}
CheckValue<IkReal> x12870 = IKatan2WithCheck(IkReal(((((-1.0)*gconst32*r20*x12863*x12864))+((gconst31*x12865*x12866))+(((-1.0)*r11*x12863*x12868))+((r10*x12861*x12866)))),IkReal(((((-1.0)*r22*x12863*x12864))+(((-1.0)*r22*x12863*x12865)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12870.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12869.value)))+(x12870.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x12871=IKcos(j8);
IkReal x12872=IKsin(j8);
IkReal x12873=(sj5*sj6);
IkReal x12874=((1.0)*cj7);
IkReal x12875=(gconst32*r11);
IkReal x12876=(gconst31*r20);
IkReal x12877=(gconst31*r00);
IkReal x12878=((1.0)*cj6);
IkReal x12879=(gconst31*r21);
IkReal x12880=(gconst32*r10);
IkReal x12881=(gconst32*r21);
IkReal x12882=((1.0)*gconst31);
IkReal x12883=(gconst32*r20);
IkReal x12884=(gconst32*r01);
IkReal x12885=(gconst31*r01);
IkReal x12886=(gconst31*r11);
IkReal x12887=(gconst31*r10);
IkReal x12888=(cj5*sj6);
IkReal x12889=(gconst32*r00);
IkReal x12890=(cj5*x12878);
IkReal x12891=(r02*x12871);
IkReal x12892=((1.0)*x12871);
IkReal x12893=(cj7*x12872);
IkReal x12894=(sj7*x12872);
IkReal x12895=(r12*x12871);
IkReal x12896=(r22*x12871);
evalcond[0]=(((x12871*x12879))+((r22*x12872))+(((-1.0)*x12883*x12892)));
evalcond[1]=((((-1.0)*x12889*x12892))+((r02*x12872))+((x12871*x12885)));
evalcond[2]=((-1.0)+((r12*x12872))+((x12871*x12886))+(((-1.0)*x12880*x12892)));
evalcond[3]=(((sj7*x12875))+((sj7*x12887))+(((-1.0)*x12872*x12874*x12886))+((cj7*x12895))+((x12880*x12893)));
evalcond[4]=((((-1.0)*x12874*x12887))+((sj7*x12895))+(((-1.0)*x12874*x12875))+(((-1.0)*r11*x12882*x12894))+((x12880*x12894)));
evalcond[5]=(x12873+((sj7*x12877))+((sj7*x12884))+(((-1.0)*x12872*x12874*x12885))+((cj7*x12891))+((x12889*x12893))+(((-1.0)*x12890)));
evalcond[6]=((((-1.0)*x12888))+((sj7*x12876))+((sj7*x12881))+((x12883*x12893))+((cj7*x12896))+(((-1.0)*x12872*x12874*x12879))+(((-1.0)*sj5*x12878)));
evalcond[7]=(x12888+((cj6*sj5))+(((-1.0)*x12874*x12884))+((sj7*x12891))+((x12889*x12894))+(((-1.0)*x12874*x12877))+(((-1.0)*r01*x12882*x12894)));
evalcond[8]=(x12873+(((-1.0)*x12874*x12881))+((x12883*x12894))+(((-1.0)*x12879*x12894))+((sj7*x12896))+(((-1.0)*x12890))+(((-1.0)*x12874*x12876)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x12897=gconst32*gconst32;
IkReal x12898=gconst31*gconst31;
IkReal x12899=(cj7*r22);
IkReal x12900=(gconst32*r11);
IkReal x12901=(cj7*r10);
IkReal x12902=(gconst31*r10);
IkReal x12903=(gconst31*r20);
IkReal x12904=((1.0)*sj7);
IkReal x12905=(r21*x12898);
IkReal x12906=(r20*x12897);
CheckValue<IkReal> x12907=IKPowWithIntegerCheck(IKsign((((r11*sj7*x12905))+(((-1.0)*gconst32*r21*x12902*x12904))+((r12*r22*sj7))+((r10*sj7*x12906))+(((-1.0)*x12900*x12903*x12904)))),-1);
if(!x12907.valid){
continue;
}
CheckValue<IkReal> x12908 = IKatan2WithCheck(IkReal((((cj7*r11*x12906))+((gconst32*x12901*x12903))+(((-1.0)*cj7*gconst31*r21*x12900))+(((-1.0)*x12901*x12905)))),IkReal((((x12899*x12900))+((x12899*x12902)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12908.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12907.value)))+(x12908.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x12909=IKcos(j8);
IkReal x12910=IKsin(j8);
IkReal x12911=(sj5*sj6);
IkReal x12912=((1.0)*cj7);
IkReal x12913=(gconst32*r11);
IkReal x12914=(gconst31*r20);
IkReal x12915=(gconst31*r00);
IkReal x12916=((1.0)*cj6);
IkReal x12917=(gconst31*r21);
IkReal x12918=(gconst32*r10);
IkReal x12919=(gconst32*r21);
IkReal x12920=((1.0)*gconst31);
IkReal x12921=(gconst32*r20);
IkReal x12922=(gconst32*r01);
IkReal x12923=(gconst31*r01);
IkReal x12924=(gconst31*r11);
IkReal x12925=(gconst31*r10);
IkReal x12926=(cj5*sj6);
IkReal x12927=(gconst32*r00);
IkReal x12928=(cj5*x12916);
IkReal x12929=(r02*x12909);
IkReal x12930=((1.0)*x12909);
IkReal x12931=(cj7*x12910);
IkReal x12932=(sj7*x12910);
IkReal x12933=(r12*x12909);
IkReal x12934=(r22*x12909);
evalcond[0]=(((x12909*x12917))+(((-1.0)*x12921*x12930))+((r22*x12910)));
evalcond[1]=((((-1.0)*x12927*x12930))+((r02*x12910))+((x12909*x12923)));
evalcond[2]=((-1.0)+((r12*x12910))+((x12909*x12924))+(((-1.0)*x12918*x12930)));
evalcond[3]=(((sj7*x12913))+((sj7*x12925))+((x12918*x12931))+((cj7*x12933))+(((-1.0)*x12910*x12912*x12924)));
evalcond[4]=(((sj7*x12933))+((x12918*x12932))+(((-1.0)*r11*x12920*x12932))+(((-1.0)*x12912*x12913))+(((-1.0)*x12912*x12925)));
evalcond[5]=(x12911+((sj7*x12915))+((sj7*x12922))+(((-1.0)*x12910*x12912*x12923))+((x12927*x12931))+((cj7*x12929))+(((-1.0)*x12928)));
evalcond[6]=(((sj7*x12914))+((sj7*x12919))+((x12921*x12931))+(((-1.0)*x12926))+(((-1.0)*sj5*x12916))+((cj7*x12934))+(((-1.0)*x12910*x12912*x12917)));
evalcond[7]=(x12926+(((-1.0)*r01*x12920*x12932))+((cj6*sj5))+((sj7*x12929))+((x12927*x12932))+(((-1.0)*x12912*x12915))+(((-1.0)*x12912*x12922)));
evalcond[8]=(x12911+((x12921*x12932))+((sj7*x12934))+(((-1.0)*x12917*x12932))+(((-1.0)*x12912*x12914))+(((-1.0)*x12912*x12919))+(((-1.0)*x12928)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x12935=IKPowWithIntegerCheck(IKsign((((gconst31*r20))+((gconst32*r21)))),-1);
if(!x12935.valid){
continue;
}
CheckValue<IkReal> x12936 = IKatan2WithCheck(IkReal(((((-1.0)*gconst32*r00))+((gconst31*r01)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12936.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12935.value)))+(x12936.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x12937=IKcos(j8);
IkReal x12938=IKsin(j8);
IkReal x12939=(sj5*sj6);
IkReal x12940=((1.0)*cj7);
IkReal x12941=(gconst32*r11);
IkReal x12942=(gconst31*r20);
IkReal x12943=(gconst31*r00);
IkReal x12944=((1.0)*cj6);
IkReal x12945=(gconst31*r21);
IkReal x12946=(gconst32*r10);
IkReal x12947=(gconst32*r21);
IkReal x12948=((1.0)*gconst31);
IkReal x12949=(gconst32*r20);
IkReal x12950=(gconst32*r01);
IkReal x12951=(gconst31*r01);
IkReal x12952=(gconst31*r11);
IkReal x12953=(gconst31*r10);
IkReal x12954=(cj5*sj6);
IkReal x12955=(gconst32*r00);
IkReal x12956=(cj5*x12944);
IkReal x12957=(r02*x12937);
IkReal x12958=((1.0)*x12937);
IkReal x12959=(cj7*x12938);
IkReal x12960=(sj7*x12938);
IkReal x12961=(r12*x12937);
IkReal x12962=(r22*x12937);
evalcond[0]=(((x12937*x12945))+((r22*x12938))+(((-1.0)*x12949*x12958)));
evalcond[1]=((((-1.0)*x12955*x12958))+((r02*x12938))+((x12937*x12951)));
evalcond[2]=((-1.0)+((r12*x12938))+((x12937*x12952))+(((-1.0)*x12946*x12958)));
evalcond[3]=(((x12946*x12959))+(((-1.0)*x12938*x12940*x12952))+((sj7*x12941))+((sj7*x12953))+((cj7*x12961)));
evalcond[4]=((((-1.0)*x12940*x12953))+((x12946*x12960))+(((-1.0)*r11*x12948*x12960))+(((-1.0)*x12940*x12941))+((sj7*x12961)));
evalcond[5]=(x12939+((cj7*x12957))+(((-1.0)*x12956))+((x12955*x12959))+(((-1.0)*x12938*x12940*x12951))+((sj7*x12943))+((sj7*x12950)));
evalcond[6]=(((x12949*x12959))+(((-1.0)*x12954))+(((-1.0)*sj5*x12944))+((sj7*x12947))+((sj7*x12942))+(((-1.0)*x12938*x12940*x12945))+((cj7*x12962)));
evalcond[7]=(x12954+(((-1.0)*x12940*x12950))+((x12955*x12960))+((cj6*sj5))+(((-1.0)*r01*x12948*x12960))+((sj7*x12957))+(((-1.0)*x12940*x12943)));
evalcond[8]=(x12939+((x12949*x12960))+(((-1.0)*x12956))+(((-1.0)*x12945*x12960))+(((-1.0)*x12940*x12942))+(((-1.0)*x12940*x12947))+((sj7*x12962)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12963=((-1.0)*r01);
IkReal x12965 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x12965)==0){
continue;
}
IkReal x12964=pow(x12965,-0.5);
CheckValue<IkReal> x12966 = IKatan2WithCheck(IkReal(x12963),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12966.valid){
continue;
}
IkReal gconst33=((3.14159265358979)+(((-1.0)*(x12966.value))));
IkReal gconst34=(x12963*x12964);
IkReal gconst35=((1.0)*r00*x12964);
CheckValue<IkReal> x12967 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12967.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x12967.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x12968=((-1.0)*r01);
CheckValue<IkReal> x12971 = IKatan2WithCheck(IkReal(x12968),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12971.valid){
continue;
}
IkReal x12969=((1.0)*(x12971.value));
IkReal x12970=x12964;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj9=gconst34;
cj9=gconst35;
j9=((3.14159265)+(((-1.0)*x12969)));
IkReal gconst33=((3.14159265358979)+(((-1.0)*x12969)));
IkReal gconst34=(x12968*x12970);
IkReal gconst35=((1.0)*r00*x12970);
j8eval[0]=1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[4];
IkReal x12972=((-1.0)*r01);
CheckValue<IkReal> x12975 = IKatan2WithCheck(IkReal(x12972),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12975.valid){
continue;
}
IkReal x12973=((1.0)*(x12975.value));
IkReal x12974=x12964;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj9=gconst34;
cj9=gconst35;
j9=((3.14159265)+(((-1.0)*x12973)));
IkReal gconst33=((3.14159265358979)+(((-1.0)*x12973)));
IkReal gconst34=(x12972*x12974);
IkReal gconst35=((1.0)*r00*x12974);
j8eval[0]=0;
j8eval[1]=r22;
j8eval[2]=((1.0)+(((-1.0)*(r02*r02))));
j8eval[3]=0;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  )
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x12976=gconst34*gconst34;
IkReal x12977=gconst35*gconst35;
IkReal x12978=(cj7*r11);
IkReal x12979=(r10*sj7);
IkReal x12980=(r11*sj7);
IkReal x12981=(cj7*r10);
IkReal x12982=((1.0)*r22);
IkReal x12983=(r21*x12976);
IkReal x12984=(r20*x12977);
IkReal x12985=(gconst34*gconst35*r21);
IkReal x12986=((1.0)*gconst34*gconst35*r20);
CheckValue<IkReal> x12987 = IKatan2WithCheck(IkReal(((((-1.0)*x12980*x12984))+((x12979*x12983))+((x12980*x12985))+(((-1.0)*x12979*x12986)))),IkReal(((((-1.0)*gconst35*x12980*x12982))+(((-1.0)*gconst34*x12979*x12982)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12987.valid){
continue;
}
CheckValue<IkReal> x12988=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12981*x12985))+((cj7*r12*r22))+((x12978*x12983))+(((-1.0)*x12978*x12986))+((x12981*x12984)))),-1);
if(!x12988.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x12987.value)+(((1.5707963267949)*(x12988.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x12989=IKcos(j8);
IkReal x12990=IKsin(j8);
IkReal x12991=(sj5*sj6);
IkReal x12992=((1.0)*cj7);
IkReal x12993=(gconst35*r21);
IkReal x12994=(gconst34*r10);
IkReal x12995=(gconst35*r01);
IkReal x12996=((1.0)*cj6);
IkReal x12997=(gconst35*sj7);
IkReal x12998=(gconst34*r00);
IkReal x12999=(cj5*sj6);
IkReal x13000=(gconst34*r20);
IkReal x13001=((1.0)*sj7);
IkReal x13002=(gconst35*r00);
IkReal x13003=(cj7*gconst35);
IkReal x13004=(cj5*x12996);
IkReal x13005=(sj7*x12989);
IkReal x13006=(gconst34*x12989);
IkReal x13007=(cj7*x12989);
IkReal x13008=(gconst34*x12990);
IkReal x13009=(r10*x12990);
IkReal x13010=(r20*x12990);
IkReal x13011=((1.0)*x12989);
evalcond[0]=(((r22*x12990))+(((-1.0)*gconst35*r20*x13011))+((r21*x13006)));
evalcond[1]=((((-1.0)*x13002*x13011))+((r02*x12990))+((r01*x13006)));
evalcond[2]=((-1.0)+(((-1.0)*gconst35*r10*x13011))+((r12*x12990))+((r11*x13006)));
evalcond[3]=(((x13003*x13009))+((r12*x13007))+((r11*x12997))+((sj7*x12994))+(((-1.0)*r11*x12992*x13008)));
evalcond[4]=((((-1.0)*gconst35*r11*x12992))+(((-1.0)*x12992*x12994))+((r12*x13005))+(((-1.0)*r11*x13001*x13008))+((x12997*x13009)));
evalcond[5]=(x12991+(((-1.0)*x13004))+(((-1.0)*r01*x12992*x13008))+((r02*x13007))+((cj7*x12990*x13002))+((sj7*x12998))+((sj7*x12995)));
evalcond[6]=((((-1.0)*sj5*x12996))+((sj7*x13000))+(((-1.0)*r21*x12992*x13008))+((x13003*x13010))+((r22*x13007))+((sj7*x12993))+(((-1.0)*x12999)));
evalcond[7]=(x12999+(((-1.0)*r01*x13001*x13008))+((cj6*sj5))+((r00*x12990*x12997))+(((-1.0)*x12992*x12995))+(((-1.0)*x12992*x12998))+((r02*x13005)));
evalcond[8]=(x12991+(((-1.0)*x13004))+(((-1.0)*x12992*x12993))+(((-1.0)*r21*x13001*x13008))+(((-1.0)*x12992*x13000))+((x12997*x13010))+((r22*x13005)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x13012=((1.0)*gconst35);
CheckValue<IkReal> x13013=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst34*r00))+(((-1.0)*r01*x13012)))),-1);
if(!x13013.valid){
continue;
}
CheckValue<IkReal> x13014 = IKatan2WithCheck(IkReal((((gconst34*r21))+(((-1.0)*r20*x13012)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13014.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13013.value)))+(x13014.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x13015=IKcos(j8);
IkReal x13016=IKsin(j8);
IkReal x13017=(sj5*sj6);
IkReal x13018=((1.0)*cj7);
IkReal x13019=(gconst35*r21);
IkReal x13020=(gconst34*r10);
IkReal x13021=(gconst35*r01);
IkReal x13022=((1.0)*cj6);
IkReal x13023=(gconst35*sj7);
IkReal x13024=(gconst34*r00);
IkReal x13025=(cj5*sj6);
IkReal x13026=(gconst34*r20);
IkReal x13027=((1.0)*sj7);
IkReal x13028=(gconst35*r00);
IkReal x13029=(cj7*gconst35);
IkReal x13030=(cj5*x13022);
IkReal x13031=(sj7*x13015);
IkReal x13032=(gconst34*x13015);
IkReal x13033=(cj7*x13015);
IkReal x13034=(gconst34*x13016);
IkReal x13035=(r10*x13016);
IkReal x13036=(r20*x13016);
IkReal x13037=((1.0)*x13015);
evalcond[0]=(((r22*x13016))+((r21*x13032))+(((-1.0)*gconst35*r20*x13037)));
evalcond[1]=((((-1.0)*x13028*x13037))+((r02*x13016))+((r01*x13032)));
evalcond[2]=((-1.0)+((r11*x13032))+(((-1.0)*gconst35*r10*x13037))+((r12*x13016)));
evalcond[3]=(((sj7*x13020))+((r12*x13033))+((x13029*x13035))+((r11*x13023))+(((-1.0)*r11*x13018*x13034)));
evalcond[4]=(((x13023*x13035))+(((-1.0)*x13018*x13020))+((r12*x13031))+(((-1.0)*r11*x13027*x13034))+(((-1.0)*gconst35*r11*x13018)));
evalcond[5]=(((cj7*x13016*x13028))+((sj7*x13024))+((sj7*x13021))+(((-1.0)*r01*x13018*x13034))+x13017+(((-1.0)*x13030))+((r02*x13033)));
evalcond[6]=(((sj7*x13019))+((r22*x13033))+((sj7*x13026))+((x13029*x13036))+(((-1.0)*sj5*x13022))+(((-1.0)*x13025))+(((-1.0)*r21*x13018*x13034)));
evalcond[7]=(((r00*x13016*x13023))+(((-1.0)*x13018*x13024))+(((-1.0)*x13018*x13021))+((cj6*sj5))+x13025+((r02*x13031))+(((-1.0)*r01*x13027*x13034)));
evalcond[8]=(((x13023*x13036))+(((-1.0)*x13018*x13026))+((r22*x13031))+(((-1.0)*r21*x13027*x13034))+x13017+(((-1.0)*x13030))+(((-1.0)*x13018*x13019)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x13038 = IKatan2WithCheck(IkReal(((((-1.0)*gconst35*r00))+((gconst34*r01)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x13038.valid){
continue;
}
CheckValue<IkReal> x13039=IKPowWithIntegerCheck(IKsign((((gconst34*r20))+((gconst35*r21)))),-1);
if(!x13039.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x13038.value)+(((1.5707963267949)*(x13039.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x13040=IKcos(j8);
IkReal x13041=IKsin(j8);
IkReal x13042=(sj5*sj6);
IkReal x13043=((1.0)*cj7);
IkReal x13044=(gconst35*r21);
IkReal x13045=(gconst34*r10);
IkReal x13046=(gconst35*r01);
IkReal x13047=((1.0)*cj6);
IkReal x13048=(gconst35*sj7);
IkReal x13049=(gconst34*r00);
IkReal x13050=(cj5*sj6);
IkReal x13051=(gconst34*r20);
IkReal x13052=((1.0)*sj7);
IkReal x13053=(gconst35*r00);
IkReal x13054=(cj7*gconst35);
IkReal x13055=(cj5*x13047);
IkReal x13056=(sj7*x13040);
IkReal x13057=(gconst34*x13040);
IkReal x13058=(cj7*x13040);
IkReal x13059=(gconst34*x13041);
IkReal x13060=(r10*x13041);
IkReal x13061=(r20*x13041);
IkReal x13062=((1.0)*x13040);
evalcond[0]=(((r21*x13057))+((r22*x13041))+(((-1.0)*gconst35*r20*x13062)));
evalcond[1]=(((r02*x13041))+((r01*x13057))+(((-1.0)*x13053*x13062)));
evalcond[2]=((-1.0)+(((-1.0)*gconst35*r10*x13062))+((r12*x13041))+((r11*x13057)));
evalcond[3]=(((r12*x13058))+((r11*x13048))+(((-1.0)*r11*x13043*x13059))+((x13054*x13060))+((sj7*x13045)));
evalcond[4]=(((x13048*x13060))+((r12*x13056))+(((-1.0)*gconst35*r11*x13043))+(((-1.0)*r11*x13052*x13059))+(((-1.0)*x13043*x13045)));
evalcond[5]=(((r02*x13058))+((cj7*x13041*x13053))+((sj7*x13046))+((sj7*x13049))+x13042+(((-1.0)*r01*x13043*x13059))+(((-1.0)*x13055)));
evalcond[6]=((((-1.0)*x13050))+(((-1.0)*r21*x13043*x13059))+((x13054*x13061))+((sj7*x13051))+((r22*x13058))+((sj7*x13044))+(((-1.0)*sj5*x13047)));
evalcond[7]=(((cj6*sj5))+((r02*x13056))+(((-1.0)*r01*x13052*x13059))+x13050+(((-1.0)*x13043*x13046))+(((-1.0)*x13043*x13049))+((r00*x13041*x13048)));
evalcond[8]=(((x13048*x13061))+(((-1.0)*r21*x13052*x13059))+((r22*x13056))+(((-1.0)*x13043*x13051))+x13042+(((-1.0)*x13043*x13044))+(((-1.0)*x13055)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13064 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x13064)==0){
continue;
}
IkReal x13063=pow(x13064,-0.5);
CheckValue<IkReal> x13065 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13065.valid){
continue;
}
IkReal gconst36=((-1.0)*(x13065.value));
IkReal gconst37=((-1.0)*r21*x13063);
IkReal gconst38=(r20*x13063);
CheckValue<IkReal> x13066 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13066.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13066.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
CheckValue<IkReal> x13069 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13069.valid){
continue;
}
IkReal x13067=((-1.0)*(x13069.value));
IkReal x13068=x13063;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj9=gconst37;
cj9=gconst38;
j9=x13067;
IkReal gconst36=x13067;
IkReal gconst37=((-1.0)*r21*x13068);
IkReal gconst38=(r20*x13068);
j8eval[0]=1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
CheckValue<IkReal> x13072 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13072.valid){
continue;
}
IkReal x13070=((-1.0)*(x13072.value));
IkReal x13071=x13063;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj9=gconst37;
cj9=gconst38;
j9=x13070;
IkReal gconst36=x13070;
IkReal gconst37=((-1.0)*r21*x13071);
IkReal gconst38=(r20*x13071);
CheckValue<IkReal> x13080=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x13080.valid){
continue;
}
IkReal x13073=x13080.value;
IkReal x13074=(sj7*x13073);
IkReal x13075=(r11*x13074);
IkReal x13076=(r00*x13074);
IkReal x13077=(r01*x13074);
IkReal x13078=(r10*x13074);
IkReal x13079=(r20*r21*x13074);
j8eval[0]=IKsign((((r02*r12*sj7))+((r01*x13075*(r21*r21)))+((r10*x13076*(r20*r20)))+((r00*r20*r21*x13075))+((r10*r20*r21*x13077))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
CheckValue<IkReal> x13083 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13083.valid){
continue;
}
IkReal x13081=((-1.0)*(x13083.value));
IkReal x13082=x13063;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj9=gconst37;
cj9=gconst38;
j9=x13081;
IkReal gconst36=x13081;
IkReal gconst37=((-1.0)*r21*x13082);
IkReal gconst38=(r20*x13082);
CheckValue<IkReal> x13091=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x13091.valid){
continue;
}
IkReal x13084=x13091.value;
IkReal x13085=(cj7*x13084);
IkReal x13086=(r10*x13085);
IkReal x13087=(r00*x13085);
IkReal x13088=(r01*x13085);
IkReal x13089=(r11*x13085);
IkReal x13090=(r20*r21*x13085);
j8eval[0]=IKsign((((r01*r20*r21*x13086))+((r11*x13088*(r21*r21)))+((r11*r20*r21*x13087))+((r00*x13086*(r20*r20)))+((cj7*r02*r12))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
CheckValue<IkReal> x13094 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13094.valid){
continue;
}
IkReal x13092=((-1.0)*(x13094.value));
IkReal x13093=x13063;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj9=gconst37;
cj9=gconst38;
j9=x13092;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
IkReal gconst36=x13092;
IkReal gconst37=((-1.0)*r21*x13093);
IkReal gconst38=(r20*x13093);
j8eval[0]=1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
CheckValue<IkReal> x13097 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13097.valid){
continue;
}
IkReal x13095=((-1.0)*(x13097.value));
IkReal x13096=x13063;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj9=gconst37;
cj9=gconst38;
j9=x13095;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
IkReal gconst36=x13095;
IkReal gconst37=((-1.0)*r21*x13096);
IkReal gconst38=(r20*x13096);
j8eval[0]=r12;
j8eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
CheckValue<IkReal> x13100 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13100.valid){
continue;
}
IkReal x13098=((-1.0)*(x13100.value));
IkReal x13099=x13063;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj9=gconst37;
cj9=gconst38;
j9=x13098;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
IkReal gconst36=x13098;
IkReal gconst37=((-1.0)*r21*x13099);
IkReal gconst38=(r20*x13099);
IkReal x13101=r22*r22;
CheckValue<IkReal> x13104=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x13101))),-1);
if(!x13104.valid){
continue;
}
IkReal x13102=x13104.value;
IkReal x13103=(((x13102*(r21*r21*r21*r21)))+(((2.0)*x13102*(r20*r20)*(r21*r21)))+((x13102*(r20*r20*r20*r20)))+x13101);
j8eval[0]=x13103;
j8eval[1]=IKsign(x13103);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x13105=(cj5*cj6);
IkReal x13106=(gconst37*r21);
IkReal x13107=(gconst38*r20);
IkReal x13108=((1.0)*sj5*sj6);
CheckValue<IkReal> x13109=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x13106*x13106)+(x13107*x13107)+(((-2.0)*x13106*x13107)))),-1);
if(!x13109.valid){
continue;
}
CheckValue<IkReal> x13110 = IKatan2WithCheck(IkReal(((((-1.0)*x13107*x13108))+((x13105*x13107))+(((-1.0)*x13105*x13106))+((sj5*sj6*x13106)))),IkReal((((r22*x13105))+(((-1.0)*r22*x13108)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13110.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13109.value)))+(x13110.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x13111=IKcos(j8);
IkReal x13112=IKsin(j8);
IkReal x13113=(gconst37*x13111);
IkReal x13114=(gconst38*x13112);
IkReal x13115=((1.0)*gconst37*x13112);
IkReal x13116=((1.0)*gconst38*x13111);
evalcond[0]=(((r22*x13112))+((r21*x13113))+(((-1.0)*r20*x13116)));
evalcond[1]=(((r02*x13112))+(((-1.0)*r00*x13116))+((r01*x13113)));
evalcond[2]=(((r12*x13111))+(((-1.0)*r11*x13115))+((r10*x13114)));
evalcond[3]=((-1.0)+((r12*x13112))+(((-1.0)*r10*x13116))+((r11*x13113)));
evalcond[4]=(((cj6*sj5))+((r02*x13111))+((cj5*sj6))+(((-1.0)*r01*x13115))+((r00*x13114)));
evalcond[5]=(((r22*x13111))+((sj5*sj6))+((r20*x13114))+(((-1.0)*cj5*cj6))+(((-1.0)*r21*x13115)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x13117=(gconst38*r10);
IkReal x13118=(gconst37*r11);
CheckValue<IkReal> x13119=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x13118*x13118)+(x13117*x13117)+(((-2.0)*x13117*x13118)))),-1);
if(!x13119.valid){
continue;
}
CheckValue<IkReal> x13120 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x13117))+x13118)),IKFAST_ATAN2_MAGTHRESH);
if(!x13120.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13119.value)))+(x13120.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x13121=IKcos(j8);
IkReal x13122=IKsin(j8);
IkReal x13123=(gconst37*x13121);
IkReal x13124=(gconst38*x13122);
IkReal x13125=((1.0)*gconst37*x13122);
IkReal x13126=((1.0)*gconst38*x13121);
evalcond[0]=((((-1.0)*r20*x13126))+((r22*x13122))+((r21*x13123)));
evalcond[1]=((((-1.0)*r00*x13126))+((r01*x13123))+((r02*x13122)));
evalcond[2]=(((r10*x13124))+((r12*x13121))+(((-1.0)*r11*x13125)));
evalcond[3]=((-1.0)+((r11*x13123))+((r12*x13122))+(((-1.0)*r10*x13126)));
evalcond[4]=((((-1.0)*r01*x13125))+((cj6*sj5))+((r00*x13124))+((cj5*sj6))+((r02*x13121)));
evalcond[5]=(((r20*x13124))+((sj5*sj6))+(((-1.0)*r21*x13125))+((r22*x13121))+(((-1.0)*cj5*cj6)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x13127=((1.0)*gconst38);
CheckValue<IkReal> x13128=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13127))+(((-1.0)*gconst37*r00)))),-1);
if(!x13128.valid){
continue;
}
CheckValue<IkReal> x13129 = IKatan2WithCheck(IkReal((((gconst37*r21))+(((-1.0)*r20*x13127)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13129.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13128.value)))+(x13129.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x13130=IKcos(j8);
IkReal x13131=IKsin(j8);
IkReal x13132=(gconst37*x13130);
IkReal x13133=(gconst38*x13131);
IkReal x13134=((1.0)*gconst37*x13131);
IkReal x13135=((1.0)*gconst38*x13130);
evalcond[0]=((((-1.0)*r20*x13135))+((r21*x13132))+((r22*x13131)));
evalcond[1]=(((r01*x13132))+((r02*x13131))+(((-1.0)*r00*x13135)));
evalcond[2]=(((r10*x13133))+((r12*x13130))+(((-1.0)*r11*x13134)));
evalcond[3]=((-1.0)+((r12*x13131))+(((-1.0)*r10*x13135))+((r11*x13132)));
evalcond[4]=(((cj6*sj5))+((r00*x13133))+((cj5*sj6))+((r02*x13130))+(((-1.0)*r01*x13134)));
evalcond[5]=((((-1.0)*r21*x13134))+((sj5*sj6))+((r20*x13133))+(((-1.0)*cj5*cj6))+((r22*x13130)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
CheckValue<IkReal> x13138 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13138.valid){
continue;
}
IkReal x13136=((-1.0)*(x13138.value));
IkReal x13137=x13063;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj9=gconst37;
cj9=gconst38;
j9=x13136;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
IkReal gconst36=x13136;
IkReal gconst37=((-1.0)*r21*x13137);
IkReal gconst38=(r20*x13137);
j8eval[0]=1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
CheckValue<IkReal> x13141 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13141.valid){
continue;
}
IkReal x13139=((-1.0)*(x13141.value));
IkReal x13140=x13063;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj9=gconst37;
cj9=gconst38;
j9=x13139;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
IkReal gconst36=x13139;
IkReal gconst37=((-1.0)*r21*x13140);
IkReal gconst38=(r20*x13140);
j8eval[0]=r12;
j8eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
CheckValue<IkReal> x13144 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13144.valid){
continue;
}
IkReal x13142=((-1.0)*(x13144.value));
IkReal x13143=x13063;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj9=gconst37;
cj9=gconst38;
j9=x13142;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
IkReal gconst36=x13142;
IkReal gconst37=((-1.0)*r21*x13143);
IkReal gconst38=(r20*x13143);
IkReal x13145=((1.0)*(r22*r22));
CheckValue<IkReal> x13149=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x13145))),-1);
if(!x13149.valid){
continue;
}
IkReal x13146=x13149.value;
IkReal x13147=((1.0)*x13146);
IkReal x13148=((((-1.0)*x13147*(r21*r21*r21*r21)))+(((-2.0)*x13146*(r20*r20)*(r21*r21)))+(((-1.0)*x13145))+(((-1.0)*x13147*(r20*r20*r20*r20))));
j8eval[0]=x13148;
j8eval[1]=IKsign(x13148);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x13150=(cj5*cj6);
IkReal x13151=(gconst37*r21);
IkReal x13152=(gconst38*r20);
IkReal x13153=((1.0)*sj5*sj6);
CheckValue<IkReal> x13154 = IKatan2WithCheck(IkReal((((x13150*x13152))+(((-1.0)*x13150*x13151))+(((-1.0)*x13152*x13153))+((sj5*sj6*x13151)))),IkReal(((((-1.0)*r22*x13153))+((r22*x13150)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13154.valid){
continue;
}
CheckValue<IkReal> x13155=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x13151*x13151)))+(((-1.0)*(x13152*x13152)))+(((-1.0)*(r22*r22)))+(((2.0)*x13151*x13152)))),-1);
if(!x13155.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x13154.value)+(((1.5707963267949)*(x13155.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x13156=IKcos(j8);
IkReal x13157=IKsin(j8);
IkReal x13158=(gconst37*r21);
IkReal x13159=(gconst38*r20);
IkReal x13160=(gconst38*r00);
IkReal x13161=(gconst38*r10);
IkReal x13162=(gconst37*x13156);
IkReal x13163=((1.0)*x13156);
IkReal x13164=((1.0)*x13157);
IkReal x13165=(gconst37*x13157);
evalcond[0]=(((x13156*x13158))+((r22*x13157))+(((-1.0)*x13159*x13163)));
evalcond[1]=(((r02*x13157))+(((-1.0)*x13160*x13163))+((r01*x13162)));
evalcond[2]=((-1.0)+(((-1.0)*x13161*x13163))+((r11*x13162))+((r12*x13157)));
evalcond[3]=((((-1.0)*r12*x13163))+(((-1.0)*x13161*x13164))+((r11*x13165)));
evalcond[4]=(((cj6*sj5))+(((-1.0)*x13160*x13164))+((r01*x13165))+((cj5*sj6))+(((-1.0)*r02*x13163)));
evalcond[5]=(((sj5*sj6))+((x13157*x13158))+(((-1.0)*r22*x13163))+(((-1.0)*cj5*cj6))+(((-1.0)*x13159*x13164)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x13166=(gconst38*r10);
IkReal x13167=(gconst37*r11);
CheckValue<IkReal> x13168 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x13166))+x13167)),IKFAST_ATAN2_MAGTHRESH);
if(!x13168.valid){
continue;
}
CheckValue<IkReal> x13169=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x13166*x13167))+(x13167*x13167)+(x13166*x13166))),-1);
if(!x13169.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x13168.value)+(((1.5707963267949)*(x13169.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x13170=IKcos(j8);
IkReal x13171=IKsin(j8);
IkReal x13172=(gconst37*r21);
IkReal x13173=(gconst38*r20);
IkReal x13174=(gconst38*r00);
IkReal x13175=(gconst38*r10);
IkReal x13176=(gconst37*x13170);
IkReal x13177=((1.0)*x13170);
IkReal x13178=((1.0)*x13171);
IkReal x13179=(gconst37*x13171);
evalcond[0]=((((-1.0)*x13173*x13177))+((r22*x13171))+((x13170*x13172)));
evalcond[1]=(((r01*x13176))+((r02*x13171))+(((-1.0)*x13174*x13177)));
evalcond[2]=((-1.0)+((r12*x13171))+(((-1.0)*x13175*x13177))+((r11*x13176)));
evalcond[3]=((((-1.0)*r12*x13177))+(((-1.0)*x13175*x13178))+((r11*x13179)));
evalcond[4]=(((r01*x13179))+((cj6*sj5))+((cj5*sj6))+(((-1.0)*r02*x13177))+(((-1.0)*x13174*x13178)));
evalcond[5]=((((-1.0)*x13173*x13178))+((sj5*sj6))+((x13171*x13172))+(((-1.0)*r22*x13177))+(((-1.0)*cj5*cj6)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x13180=((1.0)*gconst38);
CheckValue<IkReal> x13181 = IKatan2WithCheck(IkReal((((gconst37*r21))+(((-1.0)*r20*x13180)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13181.valid){
continue;
}
CheckValue<IkReal> x13182=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13180))+(((-1.0)*gconst37*r00)))),-1);
if(!x13182.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x13181.value)+(((1.5707963267949)*(x13182.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x13183=IKcos(j8);
IkReal x13184=IKsin(j8);
IkReal x13185=(gconst37*r21);
IkReal x13186=(gconst38*r20);
IkReal x13187=(gconst38*r00);
IkReal x13188=(gconst38*r10);
IkReal x13189=(gconst37*x13183);
IkReal x13190=((1.0)*x13183);
IkReal x13191=((1.0)*x13184);
IkReal x13192=(gconst37*x13184);
evalcond[0]=(((x13183*x13185))+((r22*x13184))+(((-1.0)*x13186*x13190)));
evalcond[1]=(((r02*x13184))+((r01*x13189))+(((-1.0)*x13187*x13190)));
evalcond[2]=((-1.0)+((r12*x13184))+((r11*x13189))+(((-1.0)*x13188*x13190)));
evalcond[3]=((((-1.0)*r12*x13190))+((r11*x13192))+(((-1.0)*x13188*x13191)));
evalcond[4]=(((cj6*sj5))+(((-1.0)*r02*x13190))+((cj5*sj6))+((r01*x13192))+(((-1.0)*x13187*x13191)));
evalcond[5]=(((sj5*sj6))+(((-1.0)*r22*x13190))+((x13184*x13185))+(((-1.0)*cj5*cj6))+(((-1.0)*x13186*x13191)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
CheckValue<IkReal> x13195 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13195.valid){
continue;
}
IkReal x13193=((-1.0)*(x13195.value));
IkReal x13194=x13063;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj9=gconst37;
cj9=gconst38;
j9=x13193;
sj7=0;
cj7=1.0;
j7=0;
IkReal gconst36=x13193;
IkReal gconst37=((-1.0)*r21*x13194);
IkReal gconst38=(r20*x13194);
j8eval[0]=1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
CheckValue<IkReal> x13198 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13198.valid){
continue;
}
IkReal x13196=((-1.0)*(x13198.value));
IkReal x13197=x13063;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj9=gconst37;
cj9=gconst38;
j9=x13196;
sj7=0;
cj7=1.0;
j7=0;
IkReal gconst36=x13196;
IkReal gconst37=((-1.0)*r21*x13197);
IkReal gconst38=(r20*x13197);
j8eval[0]=r12;
j8eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
CheckValue<IkReal> x13201 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13201.valid){
continue;
}
IkReal x13199=((-1.0)*(x13201.value));
IkReal x13200=x13063;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj9=gconst37;
cj9=gconst38;
j9=x13199;
sj7=0;
cj7=1.0;
j7=0;
IkReal gconst36=x13199;
IkReal gconst37=((-1.0)*r21*x13200);
IkReal gconst38=(r20*x13200);
IkReal x13202=r22*r22;
CheckValue<IkReal> x13205=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x13202))),-1);
if(!x13205.valid){
continue;
}
IkReal x13203=x13205.value;
IkReal x13204=(((x13203*(r21*r21*r21*r21)))+((x13203*(r20*r20*r20*r20)))+(((2.0)*x13203*(r20*r20)*(r21*r21)))+x13202);
j8eval[0]=x13204;
j8eval[1]=IKsign(x13204);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x13206=(cj6*sj5);
IkReal x13207=(gconst37*r21);
IkReal x13208=(gconst38*r20);
IkReal x13209=(cj5*sj6);
CheckValue<IkReal> x13210=IKPowWithIntegerCheck(IKsign(((x13207*x13207)+(r22*r22)+(x13208*x13208)+(((-2.0)*x13207*x13208)))),-1);
if(!x13210.valid){
continue;
}
CheckValue<IkReal> x13211 = IKatan2WithCheck(IkReal(((((-1.0)*x13206*x13207))+(((-1.0)*x13207*x13209))+((x13208*x13209))+((x13206*x13208)))),IkReal((((r22*x13209))+((r22*x13206)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13211.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13210.value)))+(x13211.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x13212=IKcos(j8);
IkReal x13213=IKsin(j8);
IkReal x13214=((1.0)*cj6);
IkReal x13215=(gconst37*x13212);
IkReal x13216=(gconst38*x13213);
IkReal x13217=((1.0)*gconst37*x13213);
IkReal x13218=((1.0)*gconst38*x13212);
evalcond[0]=(((r21*x13215))+(((-1.0)*r20*x13218))+((r22*x13213)));
evalcond[1]=(((r01*x13215))+((r02*x13213))+(((-1.0)*r00*x13218)));
evalcond[2]=(((r12*x13212))+((r10*x13216))+(((-1.0)*r11*x13217)));
evalcond[3]=((-1.0)+((r12*x13213))+((r11*x13215))+(((-1.0)*r10*x13218)));
evalcond[4]=(((r00*x13216))+((sj5*sj6))+((r02*x13212))+(((-1.0)*cj5*x13214))+(((-1.0)*r01*x13217)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*sj5*x13214))+((r20*x13216))+((r22*x13212))+(((-1.0)*r21*x13217)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x13219=(gconst38*r10);
IkReal x13220=(gconst37*r11);
CheckValue<IkReal> x13221 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x13219))+x13220)),IKFAST_ATAN2_MAGTHRESH);
if(!x13221.valid){
continue;
}
CheckValue<IkReal> x13222=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x13219*x13220))+(x13220*x13220)+(x13219*x13219))),-1);
if(!x13222.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x13221.value)+(((1.5707963267949)*(x13222.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x13223=IKcos(j8);
IkReal x13224=IKsin(j8);
IkReal x13225=((1.0)*cj6);
IkReal x13226=(gconst37*x13223);
IkReal x13227=(gconst38*x13224);
IkReal x13228=((1.0)*gconst37*x13224);
IkReal x13229=((1.0)*gconst38*x13223);
evalcond[0]=(((r21*x13226))+((r22*x13224))+(((-1.0)*r20*x13229)));
evalcond[1]=((((-1.0)*r00*x13229))+((r02*x13224))+((r01*x13226)));
evalcond[2]=(((r10*x13227))+(((-1.0)*r11*x13228))+((r12*x13223)));
evalcond[3]=((-1.0)+((r11*x13226))+(((-1.0)*r10*x13229))+((r12*x13224)));
evalcond[4]=(((r02*x13223))+(((-1.0)*r01*x13228))+(((-1.0)*cj5*x13225))+((sj5*sj6))+((r00*x13227)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*r21*x13228))+((r22*x13223))+(((-1.0)*sj5*x13225))+((r20*x13227)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x13230=((1.0)*gconst38);
CheckValue<IkReal> x13231=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13230))+(((-1.0)*gconst37*r00)))),-1);
if(!x13231.valid){
continue;
}
CheckValue<IkReal> x13232 = IKatan2WithCheck(IkReal((((gconst37*r21))+(((-1.0)*r20*x13230)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13232.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13231.value)))+(x13232.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x13233=IKcos(j8);
IkReal x13234=IKsin(j8);
IkReal x13235=((1.0)*cj6);
IkReal x13236=(gconst37*x13233);
IkReal x13237=(gconst38*x13234);
IkReal x13238=((1.0)*gconst37*x13234);
IkReal x13239=((1.0)*gconst38*x13233);
evalcond[0]=(((r22*x13234))+((r21*x13236))+(((-1.0)*r20*x13239)));
evalcond[1]=(((r01*x13236))+(((-1.0)*r00*x13239))+((r02*x13234)));
evalcond[2]=(((r10*x13237))+(((-1.0)*r11*x13238))+((r12*x13233)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x13239))+((r11*x13236))+((r12*x13234)));
evalcond[4]=((((-1.0)*cj5*x13235))+((sj5*sj6))+((r02*x13233))+(((-1.0)*r01*x13238))+((r00*x13237)));
evalcond[5]=((((-1.0)*cj5*sj6))+((r20*x13237))+(((-1.0)*sj5*x13235))+((r22*x13233))+(((-1.0)*r21*x13238)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
CheckValue<IkReal> x13242 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13242.valid){
continue;
}
IkReal x13240=((-1.0)*(x13242.value));
IkReal x13241=x13063;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj9=gconst37;
cj9=gconst38;
j9=x13240;
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
IkReal gconst36=x13240;
IkReal gconst37=((-1.0)*r21*x13241);
IkReal gconst38=(r20*x13241);
j8eval[0]=1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
CheckValue<IkReal> x13245 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13245.valid){
continue;
}
IkReal x13243=((-1.0)*(x13245.value));
IkReal x13244=x13063;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj9=gconst37;
cj9=gconst38;
j9=x13243;
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
IkReal gconst36=x13243;
IkReal gconst37=((-1.0)*r21*x13244);
IkReal gconst38=(r20*x13244);
j8eval[0]=r12;
j8eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
CheckValue<IkReal> x13248 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13248.valid){
continue;
}
IkReal x13246=((-1.0)*(x13248.value));
IkReal x13247=x13063;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj9=gconst37;
cj9=gconst38;
j9=x13246;
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
IkReal gconst36=x13246;
IkReal gconst37=((-1.0)*r21*x13247);
IkReal gconst38=(r20*x13247);
IkReal x13249=((1.0)*(r22*r22));
CheckValue<IkReal> x13253=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x13249))),-1);
if(!x13253.valid){
continue;
}
IkReal x13250=x13253.value;
IkReal x13251=((1.0)*x13250);
IkReal x13252=((((-2.0)*x13250*(r20*r20)*(r21*r21)))+(((-1.0)*x13251*(r20*r20*r20*r20)))+(((-1.0)*x13251*(r21*r21*r21*r21)))+(((-1.0)*x13249)));
j8eval[0]=x13252;
j8eval[1]=IKsign(x13252);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x13254=(gconst38*r20);
IkReal x13255=(cj6*sj5);
IkReal x13256=(cj5*sj6);
IkReal x13257=(gconst37*r21);
CheckValue<IkReal> x13258=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x13257*x13257)))+(((-1.0)*(r22*r22)))+(((2.0)*x13254*x13257))+(((-1.0)*(x13254*x13254))))),-1);
if(!x13258.valid){
continue;
}
CheckValue<IkReal> x13259 = IKatan2WithCheck(IkReal(((((-1.0)*x13256*x13257))+(((-1.0)*x13255*x13257))+((x13254*x13256))+((x13254*x13255)))),IkReal((((r22*x13256))+((r22*x13255)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13259.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13258.value)))+(x13259.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x13260=IKcos(j8);
IkReal x13261=IKsin(j8);
IkReal x13262=((1.0)*cj5);
IkReal x13263=(gconst37*r21);
IkReal x13264=(gconst38*r20);
IkReal x13265=(gconst38*r00);
IkReal x13266=(gconst38*r10);
IkReal x13267=(gconst37*x13260);
IkReal x13268=((1.0)*x13260);
IkReal x13269=((1.0)*x13261);
IkReal x13270=(gconst37*x13261);
evalcond[0]=(((x13260*x13263))+(((-1.0)*x13264*x13268))+((r22*x13261)));
evalcond[1]=((((-1.0)*x13265*x13268))+((r01*x13267))+((r02*x13261)));
evalcond[2]=((-1.0)+((r11*x13267))+(((-1.0)*x13266*x13268))+((r12*x13261)));
evalcond[3]=(((r11*x13270))+(((-1.0)*x13266*x13269))+(((-1.0)*r12*x13268)));
evalcond[4]=((((-1.0)*x13265*x13269))+((sj5*sj6))+((r01*x13270))+(((-1.0)*cj6*x13262))+(((-1.0)*r02*x13268)));
evalcond[5]=((((-1.0)*r22*x13268))+(((-1.0)*sj6*x13262))+(((-1.0)*x13264*x13269))+((x13261*x13263))+(((-1.0)*cj6*sj5)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x13271=(gconst38*r10);
IkReal x13272=(gconst37*r11);
CheckValue<IkReal> x13273 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*x13271))+x13272)),IKFAST_ATAN2_MAGTHRESH);
if(!x13273.valid){
continue;
}
CheckValue<IkReal> x13274=IKPowWithIntegerCheck(IKsign(((x13271*x13271)+(r12*r12)+(((-2.0)*x13271*x13272))+(x13272*x13272))),-1);
if(!x13274.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x13273.value)+(((1.5707963267949)*(x13274.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x13275=IKcos(j8);
IkReal x13276=IKsin(j8);
IkReal x13277=((1.0)*cj5);
IkReal x13278=(gconst37*r21);
IkReal x13279=(gconst38*r20);
IkReal x13280=(gconst38*r00);
IkReal x13281=(gconst38*r10);
IkReal x13282=(gconst37*x13275);
IkReal x13283=((1.0)*x13275);
IkReal x13284=((1.0)*x13276);
IkReal x13285=(gconst37*x13276);
evalcond[0]=(((x13275*x13278))+((r22*x13276))+(((-1.0)*x13279*x13283)));
evalcond[1]=((((-1.0)*x13280*x13283))+((r02*x13276))+((r01*x13282)));
evalcond[2]=((-1.0)+((r12*x13276))+((r11*x13282))+(((-1.0)*x13281*x13283)));
evalcond[3]=(((r11*x13285))+(((-1.0)*x13281*x13284))+(((-1.0)*r12*x13283)));
evalcond[4]=((((-1.0)*x13280*x13284))+((sj5*sj6))+(((-1.0)*r02*x13283))+(((-1.0)*cj6*x13277))+((r01*x13285)));
evalcond[5]=((((-1.0)*r22*x13283))+(((-1.0)*sj6*x13277))+(((-1.0)*x13279*x13284))+(((-1.0)*cj6*sj5))+((x13276*x13278)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x13286=((1.0)*gconst38);
CheckValue<IkReal> x13287=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13286))+(((-1.0)*gconst37*r00)))),-1);
if(!x13287.valid){
continue;
}
CheckValue<IkReal> x13288 = IKatan2WithCheck(IkReal((((gconst37*r21))+(((-1.0)*r20*x13286)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13288.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13287.value)))+(x13288.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x13289=IKcos(j8);
IkReal x13290=IKsin(j8);
IkReal x13291=((1.0)*cj5);
IkReal x13292=(gconst37*r21);
IkReal x13293=(gconst38*r20);
IkReal x13294=(gconst38*r00);
IkReal x13295=(gconst38*r10);
IkReal x13296=(gconst37*x13289);
IkReal x13297=((1.0)*x13289);
IkReal x13298=((1.0)*x13290);
IkReal x13299=(gconst37*x13290);
evalcond[0]=((((-1.0)*x13293*x13297))+((r22*x13290))+((x13289*x13292)));
evalcond[1]=((((-1.0)*x13294*x13297))+((r02*x13290))+((r01*x13296)));
evalcond[2]=((-1.0)+(((-1.0)*x13295*x13297))+((r11*x13296))+((r12*x13290)));
evalcond[3]=((((-1.0)*x13295*x13298))+((r11*x13299))+(((-1.0)*r12*x13297)));
evalcond[4]=((((-1.0)*x13294*x13298))+((sj5*sj6))+(((-1.0)*cj6*x13291))+(((-1.0)*r02*x13297))+((r01*x13299)));
evalcond[5]=((((-1.0)*x13293*x13298))+((x13290*x13292))+(((-1.0)*r22*x13297))+(((-1.0)*cj6*sj5))+(((-1.0)*sj6*x13291)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[2];
IkReal x13300=((-1.0)*px);
CheckValue<IkReal> x13302 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13302.valid){
continue;
}
IkReal x13301=((-1.0)*(x13302.value));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj9=gconst37;
cj9=gconst38;
j9=x13301;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13300);
rxp1_1=(px*r21);
rxp1_2=(r11*x13300);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst36=x13301;
IkReal gconst37=((-1.0)*r21);
IkReal gconst38=r20;
IkReal x13303=(r11*r21);
IkReal x13304=(r10*r20);
j8eval[0]=(((cj7*x13304))+((cj7*x13303)));
j8eval[1]=((((-1.0)*x13303))+(((-1.0)*x13304)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
IkReal x13305=((-1.0)*px);
CheckValue<IkReal> x13307 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13307.valid){
continue;
}
IkReal x13306=((-1.0)*(x13307.value));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj9=gconst37;
cj9=gconst38;
j9=x13306;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13305);
rxp1_1=(px*r21);
rxp1_2=(r11*x13305);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst36=x13306;
IkReal gconst37=((-1.0)*r21);
IkReal gconst38=r20;
j8eval[0]=(((r11*r21*sj7))+((r10*r20*sj7)));
j8eval[1]=r02;
j8eval[2]=sj7;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
IkReal x13308=((-1.0)*px);
CheckValue<IkReal> x13310 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13310.valid){
continue;
}
IkReal x13309=((-1.0)*(x13310.value));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj9=gconst37;
cj9=gconst38;
j9=x13309;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13308);
rxp1_1=(px*r21);
rxp1_2=(r11*x13308);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst36=x13309;
IkReal gconst37=((-1.0)*r21);
IkReal gconst38=r20;
j8eval[0]=(((cj7*r10*r20))+((cj7*r11*r21)));
j8eval[1]=cj7;
j8eval[2]=r02;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x13311=((1.0)*r11);
CheckValue<IkReal> x13312=IKPowWithIntegerCheck((((cj7*gconst38*r10))+(((-1.0)*cj7*gconst37*x13311))),-1);
if(!x13312.valid){
continue;
}
CheckValue<IkReal> x13313=IKPowWithIntegerCheck(cj7,-1);
if(!x13313.valid){
continue;
}
CheckValue<IkReal> x13314=IKPowWithIntegerCheck(r02,-1);
if(!x13314.valid){
continue;
}
if( IKabs(((x13312.value)*(((((-1.0)*gconst37*r10*sj7))+(((-1.0)*gconst38*sj7*x13311)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13313.value)*(x13314.value)*((((cj5*cj6))+(((-1.0)*sj5*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13312.value)*(((((-1.0)*gconst37*r10*sj7))+(((-1.0)*gconst38*sj7*x13311))))))+IKsqr(((x13313.value)*(x13314.value)*((((cj5*cj6))+(((-1.0)*sj5*sj6))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((x13312.value)*(((((-1.0)*gconst37*r10*sj7))+(((-1.0)*gconst38*sj7*x13311))))), ((x13313.value)*(x13314.value)*((((cj5*cj6))+(((-1.0)*sj5*sj6))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x13315=IKcos(j8);
IkReal x13316=IKsin(j8);
IkReal x13317=(sj5*sj6);
IkReal x13318=(gconst37*r21);
IkReal x13319=((1.0)*cj6);
IkReal x13320=(gconst38*r21);
IkReal x13321=((1.0)*cj7);
IkReal x13322=(r20*sj7);
IkReal x13323=(r10*sj7);
IkReal x13324=((1.0)*sj7);
IkReal x13325=(gconst38*r11);
IkReal x13326=(cj5*sj6);
IkReal x13327=(cj5*x13319);
IkReal x13328=(r02*x13315);
IkReal x13329=(gconst37*x13321);
IkReal x13330=(gconst38*x13316);
IkReal x13331=(r11*x13316);
IkReal x13332=((1.0)*gconst38*x13315);
evalcond[0]=(r02*x13316);
evalcond[1]=(((cj6*sj5))+((sj7*x13328))+x13326);
evalcond[2]=((((-1.0)*r20*x13332))+((x13315*x13318)));
evalcond[3]=((((-1.0)*x13327))+((cj7*x13328))+x13317);
evalcond[4]=((-1.0)+((gconst37*r11*x13315))+(((-1.0)*r10*x13332)));
evalcond[5]=(((gconst37*x13323))+((sj7*x13325))+(((-1.0)*x13329*x13331))+((cj7*r10*x13330)));
evalcond[6]=((((-1.0)*x13321*x13325))+(((-1.0)*r10*x13329))+(((-1.0)*gconst37*x13324*x13331))+((x13323*x13330)));
evalcond[7]=(((cj7*r20*x13330))+(((-1.0)*x13316*x13318*x13321))+((gconst37*x13322))+(((-1.0)*x13326))+((sj7*x13320))+(((-1.0)*sj5*x13319)));
evalcond[8]=((((-1.0)*x13316*x13318*x13324))+(((-1.0)*x13320*x13321))+(((-1.0)*r20*x13329))+(((-1.0)*x13327))+((x13322*x13330))+x13317);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x13333=IKPowWithIntegerCheck(((((-1.0)*gconst37*r11*sj7))+((gconst38*r10*sj7))),-1);
if(!x13333.valid){
continue;
}
CheckValue<IkReal> x13334=IKPowWithIntegerCheck(r02,-1);
if(!x13334.valid){
continue;
}
CheckValue<IkReal> x13335=IKPowWithIntegerCheck(sj7,-1);
if(!x13335.valid){
continue;
}
if( IKabs(((x13333.value)*((((cj7*gconst38*r11))+((cj7*gconst37*r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13334.value)*(x13335.value)*(((((-1.0)*cj5*sj6))+(((-1.0)*cj6*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13333.value)*((((cj7*gconst38*r11))+((cj7*gconst37*r10))))))+IKsqr(((x13334.value)*(x13335.value)*(((((-1.0)*cj5*sj6))+(((-1.0)*cj6*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((x13333.value)*((((cj7*gconst38*r11))+((cj7*gconst37*r10))))), ((x13334.value)*(x13335.value)*(((((-1.0)*cj5*sj6))+(((-1.0)*cj6*sj5))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x13336=IKcos(j8);
IkReal x13337=IKsin(j8);
IkReal x13338=(sj5*sj6);
IkReal x13339=(gconst37*r21);
IkReal x13340=((1.0)*cj6);
IkReal x13341=(gconst38*r21);
IkReal x13342=((1.0)*cj7);
IkReal x13343=(r20*sj7);
IkReal x13344=(r10*sj7);
IkReal x13345=((1.0)*sj7);
IkReal x13346=(gconst38*r11);
IkReal x13347=(cj5*sj6);
IkReal x13348=(cj5*x13340);
IkReal x13349=(r02*x13336);
IkReal x13350=(gconst37*x13342);
IkReal x13351=(gconst38*x13337);
IkReal x13352=(r11*x13337);
IkReal x13353=((1.0)*gconst38*x13336);
evalcond[0]=(r02*x13337);
evalcond[1]=(((cj6*sj5))+((sj7*x13349))+x13347);
evalcond[2]=(((x13336*x13339))+(((-1.0)*r20*x13353)));
evalcond[3]=((((-1.0)*x13348))+((cj7*x13349))+x13338);
evalcond[4]=((-1.0)+((gconst37*r11*x13336))+(((-1.0)*r10*x13353)));
evalcond[5]=(((cj7*r10*x13351))+((sj7*x13346))+(((-1.0)*x13350*x13352))+((gconst37*x13344)));
evalcond[6]=((((-1.0)*gconst37*x13345*x13352))+(((-1.0)*x13342*x13346))+((x13344*x13351))+(((-1.0)*r10*x13350)));
evalcond[7]=((((-1.0)*x13337*x13339*x13342))+(((-1.0)*sj5*x13340))+(((-1.0)*x13347))+((sj7*x13341))+((gconst37*x13343))+((cj7*r20*x13351)));
evalcond[8]=(((x13343*x13351))+(((-1.0)*x13337*x13339*x13345))+(((-1.0)*x13348))+(((-1.0)*x13341*x13342))+(((-1.0)*r20*x13350))+x13338);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x13354=((1.0)*r11);
IkReal x13355=(gconst38*r10);
CheckValue<IkReal> x13356=IKPowWithIntegerCheck(((((-1.0)*cj7*gconst37*x13354))+((cj7*x13355))),-1);
if(!x13356.valid){
continue;
}
CheckValue<IkReal> x13357=IKPowWithIntegerCheck(((((-1.0)*x13355))+((gconst37*r11))),-1);
if(!x13357.valid){
continue;
}
if( IKabs(((x13356.value)*(((((-1.0)*gconst38*sj7*x13354))+(((-1.0)*gconst37*r10*sj7)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x13357.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13356.value)*(((((-1.0)*gconst38*sj7*x13354))+(((-1.0)*gconst37*r10*sj7))))))+IKsqr(x13357.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((x13356.value)*(((((-1.0)*gconst38*sj7*x13354))+(((-1.0)*gconst37*r10*sj7))))), x13357.value);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x13358=IKcos(j8);
IkReal x13359=IKsin(j8);
IkReal x13360=(sj5*sj6);
IkReal x13361=(gconst37*r21);
IkReal x13362=((1.0)*cj6);
IkReal x13363=(gconst38*r21);
IkReal x13364=((1.0)*cj7);
IkReal x13365=(r20*sj7);
IkReal x13366=(r10*sj7);
IkReal x13367=((1.0)*sj7);
IkReal x13368=(gconst38*r11);
IkReal x13369=(cj5*sj6);
IkReal x13370=(cj5*x13362);
IkReal x13371=(r02*x13358);
IkReal x13372=(gconst37*x13364);
IkReal x13373=(gconst38*x13359);
IkReal x13374=(r11*x13359);
IkReal x13375=((1.0)*gconst38*x13358);
evalcond[0]=(r02*x13359);
evalcond[1]=(((sj7*x13371))+((cj6*sj5))+x13369);
evalcond[2]=((((-1.0)*r20*x13375))+((x13358*x13361)));
evalcond[3]=((((-1.0)*x13370))+((cj7*x13371))+x13360);
evalcond[4]=((-1.0)+(((-1.0)*r10*x13375))+((gconst37*r11*x13358)));
evalcond[5]=((((-1.0)*x13372*x13374))+((sj7*x13368))+((gconst37*x13366))+((cj7*r10*x13373)));
evalcond[6]=((((-1.0)*r10*x13372))+(((-1.0)*gconst37*x13367*x13374))+((x13366*x13373))+(((-1.0)*x13364*x13368)));
evalcond[7]=((((-1.0)*x13369))+((sj7*x13363))+((gconst37*x13365))+(((-1.0)*x13359*x13361*x13364))+(((-1.0)*sj5*x13362))+((cj7*r20*x13373)));
evalcond[8]=((((-1.0)*x13363*x13364))+(((-1.0)*r20*x13372))+((x13365*x13373))+(((-1.0)*x13359*x13361*x13367))+(((-1.0)*x13370))+x13360);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x13376=gconst37*gconst37;
IkReal x13377=gconst38*gconst38;
IkReal x13378=((1.0)*sj7);
IkReal x13379=(gconst37*r10);
IkReal x13380=(r01*sj7);
IkReal x13381=(gconst38*r00);
IkReal x13382=(gconst38*r11);
IkReal x13383=(cj7*r01);
IkReal x13384=(r00*x13377);
CheckValue<IkReal> x13385=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj7*gconst37*r11*x13381))+(((-1.0)*gconst38*x13379*x13383))+((cj7*r10*x13384))+((cj7*r02*r12))+((r11*x13376*x13383)))),-1);
if(!x13385.valid){
continue;
}
CheckValue<IkReal> x13386 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x13378*x13384))+((gconst37*x13380*x13382))+((r10*x13376*x13380))+(((-1.0)*x13378*x13379*x13381)))),IkReal(((((-1.0)*r02*x13378*x13379))+(((-1.0)*r02*x13378*x13382)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13386.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13385.value)))+(x13386.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x13387=IKcos(j8);
IkReal x13388=IKsin(j8);
IkReal x13389=(sj5*sj6);
IkReal x13390=((1.0)*cj7);
IkReal x13391=(gconst38*r21);
IkReal x13392=(gconst37*r20);
IkReal x13393=((1.0)*cj6);
IkReal x13394=(gconst37*r00);
IkReal x13395=(gconst37*r10);
IkReal x13396=(gconst38*r01);
IkReal x13397=((1.0)*sj7);
IkReal x13398=(gconst38*r11);
IkReal x13399=(cj5*sj6);
IkReal x13400=(cj5*x13393);
IkReal x13401=(gconst37*x13388);
IkReal x13402=(sj7*x13387);
IkReal x13403=(gconst37*x13387);
IkReal x13404=(cj7*x13387);
IkReal x13405=(gconst38*sj7*x13388);
IkReal x13406=(cj7*gconst38*x13388);
IkReal x13407=((1.0)*gconst38*x13387);
evalcond[0]=(((r21*x13403))+((r22*x13388))+(((-1.0)*r20*x13407)));
evalcond[1]=(((r01*x13403))+(((-1.0)*r00*x13407))+((r02*x13388)));
evalcond[2]=((-1.0)+((r12*x13388))+((r11*x13403))+(((-1.0)*r10*x13407)));
evalcond[3]=(((sj7*x13398))+((sj7*x13395))+((r10*x13406))+((r12*x13404))+(((-1.0)*r11*x13390*x13401)));
evalcond[4]=(((r10*x13405))+((r12*x13402))+(((-1.0)*r11*x13397*x13401))+(((-1.0)*x13390*x13398))+(((-1.0)*x13390*x13395)));
evalcond[5]=(((sj7*x13396))+((sj7*x13394))+((r00*x13406))+(((-1.0)*r01*x13390*x13401))+(((-1.0)*x13400))+((r02*x13404))+x13389);
evalcond[6]=(((sj7*x13392))+((sj7*x13391))+(((-1.0)*sj5*x13393))+(((-1.0)*x13399))+(((-1.0)*r21*x13390*x13401))+((r22*x13404))+((r20*x13406)));
evalcond[7]=(((cj6*sj5))+((r00*x13405))+(((-1.0)*r01*x13397*x13401))+(((-1.0)*x13390*x13396))+(((-1.0)*x13390*x13394))+((r02*x13402))+x13399);
evalcond[8]=((((-1.0)*x13400))+(((-1.0)*r21*x13397*x13401))+(((-1.0)*x13390*x13392))+(((-1.0)*x13390*x13391))+((r22*x13402))+((r20*x13405))+x13389);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x13408=gconst38*gconst38;
IkReal x13409=gconst37*gconst37;
IkReal x13410=(r10*sj7);
IkReal x13411=(gconst38*r11);
IkReal x13412=(cj7*r02);
IkReal x13413=(gconst37*gconst38);
IkReal x13414=((1.0)*cj7*r01);
IkReal x13415=(r00*x13408);
CheckValue<IkReal> x13416=IKPowWithIntegerCheck(IKsign((((r02*r12*sj7))+((x13410*x13415))+(((-1.0)*gconst37*r00*sj7*x13411))+(((-1.0)*r01*x13410*x13413))+((r01*r11*sj7*x13409)))),-1);
if(!x13416.valid){
continue;
}
CheckValue<IkReal> x13417 = IKatan2WithCheck(IkReal(((((-1.0)*gconst37*x13411*x13414))+((cj7*r00*r10*x13413))+((cj7*r11*x13415))+(((-1.0)*r10*x13409*x13414)))),IkReal((((gconst37*r10*x13412))+((x13411*x13412)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13417.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13416.value)))+(x13417.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x13418=IKcos(j8);
IkReal x13419=IKsin(j8);
IkReal x13420=(sj5*sj6);
IkReal x13421=((1.0)*cj7);
IkReal x13422=(gconst38*r21);
IkReal x13423=(gconst37*r20);
IkReal x13424=((1.0)*cj6);
IkReal x13425=(gconst37*r00);
IkReal x13426=(gconst37*r10);
IkReal x13427=(gconst38*r01);
IkReal x13428=((1.0)*sj7);
IkReal x13429=(gconst38*r11);
IkReal x13430=(cj5*sj6);
IkReal x13431=(cj5*x13424);
IkReal x13432=(gconst37*x13419);
IkReal x13433=(sj7*x13418);
IkReal x13434=(gconst37*x13418);
IkReal x13435=(cj7*x13418);
IkReal x13436=(gconst38*sj7*x13419);
IkReal x13437=(cj7*gconst38*x13419);
IkReal x13438=((1.0)*gconst38*x13418);
evalcond[0]=(((r22*x13419))+(((-1.0)*r20*x13438))+((r21*x13434)));
evalcond[1]=(((r01*x13434))+((r02*x13419))+(((-1.0)*r00*x13438)));
evalcond[2]=((-1.0)+((r11*x13434))+((r12*x13419))+(((-1.0)*r10*x13438)));
evalcond[3]=((((-1.0)*r11*x13421*x13432))+((r12*x13435))+((sj7*x13429))+((sj7*x13426))+((r10*x13437)));
evalcond[4]=((((-1.0)*x13421*x13429))+(((-1.0)*x13421*x13426))+((r12*x13433))+(((-1.0)*r11*x13428*x13432))+((r10*x13436)));
evalcond[5]=(x13420+(((-1.0)*x13431))+((r02*x13435))+((r00*x13437))+(((-1.0)*r01*x13421*x13432))+((sj7*x13427))+((sj7*x13425)));
evalcond[6]=((((-1.0)*r21*x13421*x13432))+((r22*x13435))+(((-1.0)*x13430))+(((-1.0)*sj5*x13424))+((r20*x13437))+((sj7*x13423))+((sj7*x13422)));
evalcond[7]=(x13430+((cj6*sj5))+(((-1.0)*x13421*x13425))+(((-1.0)*x13421*x13427))+((r02*x13433))+(((-1.0)*r01*x13428*x13432))+((r00*x13436)));
evalcond[8]=(x13420+(((-1.0)*x13421*x13423))+(((-1.0)*x13421*x13422))+((r22*x13433))+(((-1.0)*x13431))+((r20*x13436))+(((-1.0)*r21*x13428*x13432)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x13439=((1.0)*gconst38);
CheckValue<IkReal> x13440=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst37*r00))+(((-1.0)*r01*x13439)))),-1);
if(!x13440.valid){
continue;
}
CheckValue<IkReal> x13441 = IKatan2WithCheck(IkReal((((gconst37*r21))+(((-1.0)*r20*x13439)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13441.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13440.value)))+(x13441.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x13442=IKcos(j8);
IkReal x13443=IKsin(j8);
IkReal x13444=(sj5*sj6);
IkReal x13445=((1.0)*cj7);
IkReal x13446=(gconst38*r21);
IkReal x13447=(gconst37*r20);
IkReal x13448=((1.0)*cj6);
IkReal x13449=(gconst37*r00);
IkReal x13450=(gconst37*r10);
IkReal x13451=(gconst38*r01);
IkReal x13452=((1.0)*sj7);
IkReal x13453=(gconst38*r11);
IkReal x13454=(cj5*sj6);
IkReal x13455=(cj5*x13448);
IkReal x13456=(gconst37*x13443);
IkReal x13457=(sj7*x13442);
IkReal x13458=(gconst37*x13442);
IkReal x13459=(cj7*x13442);
IkReal x13460=(gconst38*sj7*x13443);
IkReal x13461=(cj7*gconst38*x13443);
IkReal x13462=((1.0)*gconst38*x13442);
evalcond[0]=(((r22*x13443))+((r21*x13458))+(((-1.0)*r20*x13462)));
evalcond[1]=(((r02*x13443))+(((-1.0)*r00*x13462))+((r01*x13458)));
evalcond[2]=((-1.0)+(((-1.0)*r10*x13462))+((r11*x13458))+((r12*x13443)));
evalcond[3]=(((r10*x13461))+((r12*x13459))+(((-1.0)*r11*x13445*x13456))+((sj7*x13450))+((sj7*x13453)));
evalcond[4]=(((r10*x13460))+((r12*x13457))+(((-1.0)*x13445*x13450))+(((-1.0)*x13445*x13453))+(((-1.0)*r11*x13452*x13456)));
evalcond[5]=(x13444+((sj7*x13449))+(((-1.0)*r01*x13445*x13456))+(((-1.0)*x13455))+((sj7*x13451))+((r02*x13459))+((r00*x13461)));
evalcond[6]=(((r20*x13461))+((sj7*x13447))+((sj7*x13446))+(((-1.0)*x13454))+((r22*x13459))+(((-1.0)*r21*x13445*x13456))+(((-1.0)*sj5*x13448)));
evalcond[7]=(x13454+((cj6*sj5))+(((-1.0)*r01*x13452*x13456))+(((-1.0)*x13445*x13451))+((r02*x13457))+(((-1.0)*x13445*x13449))+((r00*x13460)));
evalcond[8]=(x13444+((r20*x13460))+(((-1.0)*x13455))+(((-1.0)*r21*x13452*x13456))+((r22*x13457))+(((-1.0)*x13445*x13447))+(((-1.0)*x13445*x13446)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13464 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x13464)==0){
continue;
}
IkReal x13463=pow(x13464,-0.5);
CheckValue<IkReal> x13465 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13465.valid){
continue;
}
IkReal gconst39=((3.14159265358979)+(((-1.0)*(x13465.value))));
IkReal gconst40=((1.0)*r21*x13463);
IkReal gconst41=((-1.0)*r20*x13463);
CheckValue<IkReal> x13466 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13466.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13466.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[4];
CheckValue<IkReal> x13469 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13469.valid){
continue;
}
IkReal x13467=((1.0)*(x13469.value));
IkReal x13468=x13463;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj9=gconst40;
cj9=gconst41;
j9=((3.14159265)+(((-1.0)*x13467)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x13467)));
IkReal gconst40=((1.0)*r21*x13468);
IkReal gconst41=((-1.0)*r20*x13468);
j8eval[0]=0;
j8eval[1]=r02;
j8eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j8eval[3]=0;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
CheckValue<IkReal> x13472 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13472.valid){
continue;
}
IkReal x13470=((1.0)*(x13472.value));
IkReal x13471=x13463;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj9=gconst40;
cj9=gconst41;
j9=((3.14159265)+(((-1.0)*x13470)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x13470)));
IkReal gconst40=((1.0)*r21*x13471);
IkReal gconst41=((-1.0)*r20*x13471);
j8eval[0]=1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
CheckValue<IkReal> x13475 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13475.valid){
continue;
}
IkReal x13473=((1.0)*(x13475.value));
IkReal x13474=x13463;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
sj9=gconst40;
cj9=gconst41;
j9=((3.14159265)+(((-1.0)*x13473)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x13473)));
IkReal gconst40=((1.0)*r21*x13474);
IkReal gconst41=((-1.0)*r20*x13474);
j8eval[0]=r02;
j8eval[1]=sj7;
j8eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x13476=gconst40*gconst40;
IkReal x13477=gconst41*gconst41;
IkReal x13478=(r11*sj7);
IkReal x13479=(cj7*r10);
IkReal x13480=((1.0)*gconst40);
IkReal x13481=(r10*sj7);
IkReal x13482=(cj7*r11);
IkReal x13483=(gconst41*r20);
IkReal x13484=(gconst40*gconst41*r21);
IkReal x13485=(r20*x13477);
IkReal x13486=(r21*x13476);
CheckValue<IkReal> x13487=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst41*r21*x13479*x13480))+(((-1.0)*x13480*x13482*x13483))+((x13482*x13486))+((cj7*r12*r22))+((x13479*x13485)))),-1);
if(!x13487.valid){
continue;
}
CheckValue<IkReal> x13488 = IKatan2WithCheck(IkReal((((x13478*x13484))+(((-1.0)*x13478*x13485))+(((-1.0)*x13480*x13481*x13483))+((x13481*x13486)))),IkReal(((((-1.0)*r22*x13480*x13481))+(((-1.0)*gconst41*r22*x13478)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13488.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13487.value)))+(x13488.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x13489=IKcos(j8);
IkReal x13490=IKsin(j8);
IkReal x13491=(sj5*sj6);
IkReal x13492=(r20*sj7);
IkReal x13493=(cj7*r00);
IkReal x13494=(cj7*r10);
IkReal x13495=(gconst41*sj7);
IkReal x13496=((1.0)*cj6);
IkReal x13497=(cj7*r20);
IkReal x13498=((1.0)*gconst40);
IkReal x13499=((1.0)*sj7);
IkReal x13500=(r10*sj7);
IkReal x13501=(r00*sj7);
IkReal x13502=(cj5*sj6);
IkReal x13503=(cj5*x13496);
IkReal x13504=(gconst41*x13490);
IkReal x13505=(sj7*x13489);
IkReal x13506=((1.0)*cj7*r01);
IkReal x13507=(gconst40*x13490);
IkReal x13508=((1.0)*cj7*r11);
IkReal x13509=(gconst40*x13489);
IkReal x13510=(cj7*x13489);
IkReal x13511=((1.0)*cj7*r21);
IkReal x13512=((1.0)*gconst41*x13489);
evalcond[0]=(((r22*x13490))+(((-1.0)*r20*x13512))+((r21*x13509)));
evalcond[1]=(((r02*x13490))+(((-1.0)*r00*x13512))+((r01*x13509)));
evalcond[2]=((-1.0)+(((-1.0)*r10*x13512))+((r11*x13509))+((r12*x13490)));
evalcond[3]=(((x13494*x13504))+((r12*x13510))+((r11*x13495))+((gconst40*x13500))+(((-1.0)*cj7*r11*x13490*x13498)));
evalcond[4]=((((-1.0)*x13494*x13498))+(((-1.0)*r11*sj7*x13490*x13498))+((r10*x13490*x13495))+(((-1.0)*gconst41*x13508))+((r12*x13505)));
evalcond[5]=(x13491+((r02*x13510))+((x13493*x13504))+(((-1.0)*x13503))+((r01*x13495))+(((-1.0)*cj7*r01*x13490*x13498))+((gconst40*x13501)));
evalcond[6]=((((-1.0)*sj5*x13496))+((gconst40*x13492))+((r22*x13510))+(((-1.0)*x13502))+(((-1.0)*cj7*r21*x13490*x13498))+((x13497*x13504))+((r21*x13495)));
evalcond[7]=(x13502+((r02*x13505))+((cj6*sj5))+(((-1.0)*r01*sj7*x13490*x13498))+(((-1.0)*x13493*x13498))+(((-1.0)*gconst41*x13506))+((r00*x13490*x13495)));
evalcond[8]=(x13491+((x13492*x13504))+(((-1.0)*x13497*x13498))+((r22*x13505))+(((-1.0)*gconst41*x13511))+(((-1.0)*x13503))+(((-1.0)*r21*sj7*x13490*x13498)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x13513=((1.0)*gconst41);
CheckValue<IkReal> x13514=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst40*r00))+(((-1.0)*r01*x13513)))),-1);
if(!x13514.valid){
continue;
}
CheckValue<IkReal> x13515 = IKatan2WithCheck(IkReal((((gconst40*r21))+(((-1.0)*r20*x13513)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13515.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13514.value)))+(x13515.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x13516=IKcos(j8);
IkReal x13517=IKsin(j8);
IkReal x13518=(sj5*sj6);
IkReal x13519=(r20*sj7);
IkReal x13520=(cj7*r00);
IkReal x13521=(cj7*r10);
IkReal x13522=(gconst41*sj7);
IkReal x13523=((1.0)*cj6);
IkReal x13524=(cj7*r20);
IkReal x13525=((1.0)*gconst40);
IkReal x13526=((1.0)*sj7);
IkReal x13527=(r10*sj7);
IkReal x13528=(r00*sj7);
IkReal x13529=(cj5*sj6);
IkReal x13530=(cj5*x13523);
IkReal x13531=(gconst41*x13517);
IkReal x13532=(sj7*x13516);
IkReal x13533=((1.0)*cj7*r01);
IkReal x13534=(gconst40*x13517);
IkReal x13535=((1.0)*cj7*r11);
IkReal x13536=(gconst40*x13516);
IkReal x13537=(cj7*x13516);
IkReal x13538=((1.0)*cj7*r21);
IkReal x13539=((1.0)*gconst41*x13516);
evalcond[0]=((((-1.0)*r20*x13539))+((r22*x13517))+((r21*x13536)));
evalcond[1]=(((r02*x13517))+(((-1.0)*r00*x13539))+((r01*x13536)));
evalcond[2]=((-1.0)+(((-1.0)*r10*x13539))+((r12*x13517))+((r11*x13536)));
evalcond[3]=((((-1.0)*cj7*r11*x13517*x13525))+((r12*x13537))+((r11*x13522))+((gconst40*x13527))+((x13521*x13531)));
evalcond[4]=((((-1.0)*x13521*x13525))+(((-1.0)*gconst41*x13535))+(((-1.0)*r11*sj7*x13517*x13525))+((r10*x13517*x13522))+((r12*x13532)));
evalcond[5]=(((r01*x13522))+((x13520*x13531))+x13518+(((-1.0)*cj7*r01*x13517*x13525))+((r02*x13537))+(((-1.0)*x13530))+((gconst40*x13528)));
evalcond[6]=(((r21*x13522))+(((-1.0)*cj7*r21*x13517*x13525))+(((-1.0)*sj5*x13523))+(((-1.0)*x13529))+((x13524*x13531))+((r22*x13537))+((gconst40*x13519)));
evalcond[7]=(((r00*x13517*x13522))+x13529+((cj6*sj5))+((r02*x13532))+(((-1.0)*x13520*x13525))+(((-1.0)*gconst41*x13533))+(((-1.0)*r01*sj7*x13517*x13525)));
evalcond[8]=(x13518+((x13519*x13531))+(((-1.0)*r21*sj7*x13517*x13525))+(((-1.0)*gconst41*x13538))+((r22*x13532))+(((-1.0)*x13530))+(((-1.0)*x13524*x13525)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x13540=IKPowWithIntegerCheck(IKsign((((gconst41*r21))+((gconst40*r20)))),-1);
if(!x13540.valid){
continue;
}
CheckValue<IkReal> x13541 = IKatan2WithCheck(IkReal(((((-1.0)*gconst41*r00))+((gconst40*r01)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x13541.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13540.value)))+(x13541.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x13542=IKcos(j8);
IkReal x13543=IKsin(j8);
IkReal x13544=(sj5*sj6);
IkReal x13545=(r20*sj7);
IkReal x13546=(cj7*r00);
IkReal x13547=(cj7*r10);
IkReal x13548=(gconst41*sj7);
IkReal x13549=((1.0)*cj6);
IkReal x13550=(cj7*r20);
IkReal x13551=((1.0)*gconst40);
IkReal x13552=((1.0)*sj7);
IkReal x13553=(r10*sj7);
IkReal x13554=(r00*sj7);
IkReal x13555=(cj5*sj6);
IkReal x13556=(cj5*x13549);
IkReal x13557=(gconst41*x13543);
IkReal x13558=(sj7*x13542);
IkReal x13559=((1.0)*cj7*r01);
IkReal x13560=(gconst40*x13543);
IkReal x13561=((1.0)*cj7*r11);
IkReal x13562=(gconst40*x13542);
IkReal x13563=(cj7*x13542);
IkReal x13564=((1.0)*cj7*r21);
IkReal x13565=((1.0)*gconst41*x13542);
evalcond[0]=(((r22*x13543))+((r21*x13562))+(((-1.0)*r20*x13565)));
evalcond[1]=(((r01*x13562))+(((-1.0)*r00*x13565))+((r02*x13543)));
evalcond[2]=((-1.0)+((r12*x13543))+(((-1.0)*r10*x13565))+((r11*x13562)));
evalcond[3]=(((r11*x13548))+((gconst40*x13553))+((r12*x13563))+((x13547*x13557))+(((-1.0)*cj7*r11*x13543*x13551)));
evalcond[4]=(((r10*x13543*x13548))+(((-1.0)*x13547*x13551))+((r12*x13558))+(((-1.0)*r11*sj7*x13543*x13551))+(((-1.0)*gconst41*x13561)));
evalcond[5]=(x13544+((r01*x13548))+(((-1.0)*x13556))+((gconst40*x13554))+((r02*x13563))+(((-1.0)*cj7*r01*x13543*x13551))+((x13546*x13557)));
evalcond[6]=(((r21*x13548))+(((-1.0)*cj7*r21*x13543*x13551))+((x13550*x13557))+((gconst40*x13545))+(((-1.0)*sj5*x13549))+((r22*x13563))+(((-1.0)*x13555)));
evalcond[7]=((((-1.0)*gconst41*x13559))+x13555+((cj6*sj5))+(((-1.0)*r01*sj7*x13543*x13551))+((r00*x13543*x13548))+(((-1.0)*x13546*x13551))+((r02*x13558)));
evalcond[8]=((((-1.0)*r21*sj7*x13543*x13551))+x13544+((r22*x13558))+(((-1.0)*x13556))+(((-1.0)*x13550*x13551))+((x13545*x13557))+(((-1.0)*gconst41*x13564)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[2];
IkReal x13566=((-1.0)*pz);
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13566);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13566);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13567=(cj9*r10);
IkReal x13568=(r11*sj9);
j8eval[0]=((((-1.0)*sj7*x13568))+((sj7*x13567)));
j8eval[1]=(x13568+(((-1.0)*x13567)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x13569=((-1.0)*pz);
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13569);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13569);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13570=(cj9*r10);
IkReal x13571=(r11*sj9);
j8eval[0]=(((cj7*x13570))+(((-1.0)*cj7*x13571)));
j8eval[1]=(x13571+(((-1.0)*x13570)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
IkReal x13572=((-1.0)*pz);
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13572);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13572);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j8eval[0]=((((-1.0)*cj7*r11*sj9))+((cj7*cj9*r10)));
j8eval[1]=cj7;
j8eval[2]=r22;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x13573=((1.0)*r11);
CheckValue<IkReal> x13574=IKPowWithIntegerCheck(((((-1.0)*cj7*sj9*x13573))+((cj7*cj9*r10))),-1);
if(!x13574.valid){
continue;
}
CheckValue<IkReal> x13575=IKPowWithIntegerCheck(cj7,-1);
if(!x13575.valid){
continue;
}
CheckValue<IkReal> x13576=IKPowWithIntegerCheck(r22,-1);
if(!x13576.valid){
continue;
}
if( IKabs(((x13574.value)*(((((-1.0)*r10*sj7*sj9))+(((-1.0)*cj9*sj7*x13573)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13575.value)*(x13576.value)*((((cj6*sj5))+((cj5*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13574.value)*(((((-1.0)*r10*sj7*sj9))+(((-1.0)*cj9*sj7*x13573))))))+IKsqr(((x13575.value)*(x13576.value)*((((cj6*sj5))+((cj5*sj6))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((x13574.value)*(((((-1.0)*r10*sj7*sj9))+(((-1.0)*cj9*sj7*x13573))))), ((x13575.value)*(x13576.value)*((((cj6*sj5))+((cj5*sj6))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x13577=IKcos(j8);
IkReal x13578=IKsin(j8);
IkReal x13579=(sj5*sj6);
IkReal x13580=(cj9*r00);
IkReal x13581=((1.0)*sj9);
IkReal x13582=((1.0)*cj6);
IkReal x13583=(cj9*sj7);
IkReal x13584=(sj7*sj9);
IkReal x13585=(cj9*r10);
IkReal x13586=(cj5*sj6);
IkReal x13587=(cj5*x13582);
IkReal x13588=((1.0)*x13577);
IkReal x13589=(cj7*x13578);
IkReal x13590=(sj7*x13578);
IkReal x13591=(sj9*x13577);
IkReal x13592=(r22*x13577);
IkReal x13593=((1.0)*cj7*cj9);
evalcond[0]=(r22*x13578);
evalcond[1]=(((r01*x13591))+(((-1.0)*x13580*x13588)));
evalcond[2]=(x13579+((sj7*x13592))+(((-1.0)*x13587)));
evalcond[3]=((-1.0)+((r11*x13591))+(((-1.0)*x13585*x13588)));
evalcond[4]=((((-1.0)*x13586))+(((-1.0)*sj5*x13582))+((cj7*x13592)));
evalcond[5]=(((r10*x13584))+(((-1.0)*r11*x13581*x13589))+((x13585*x13589))+((r11*x13583)));
evalcond[6]=((((-1.0)*cj7*r10*x13581))+(((-1.0)*r11*x13593))+((r10*x13578*x13583))+(((-1.0)*r11*x13581*x13590)));
evalcond[7]=(x13579+((r00*x13584))+((x13580*x13589))+((r01*x13583))+(((-1.0)*x13587))+(((-1.0)*r01*x13581*x13589)));
evalcond[8]=(x13586+((cj6*sj5))+(((-1.0)*r01*x13593))+((x13580*x13590))+(((-1.0)*cj7*r00*x13581))+(((-1.0)*r01*x13581*x13590)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x13594=((1.0)*r11);
IkReal x13595=(cj9*r10);
CheckValue<IkReal> x13596=IKPowWithIntegerCheck(((((-1.0)*cj7*sj9*x13594))+((cj7*x13595))),-1);
if(!x13596.valid){
continue;
}
CheckValue<IkReal> x13597=IKPowWithIntegerCheck(((((-1.0)*x13595))+((r11*sj9))),-1);
if(!x13597.valid){
continue;
}
if( IKabs(((x13596.value)*(((((-1.0)*r10*sj7*sj9))+(((-1.0)*cj9*sj7*x13594)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x13597.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13596.value)*(((((-1.0)*r10*sj7*sj9))+(((-1.0)*cj9*sj7*x13594))))))+IKsqr(x13597.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((x13596.value)*(((((-1.0)*r10*sj7*sj9))+(((-1.0)*cj9*sj7*x13594))))), x13597.value);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x13598=IKcos(j8);
IkReal x13599=IKsin(j8);
IkReal x13600=(sj5*sj6);
IkReal x13601=(cj9*r00);
IkReal x13602=((1.0)*sj9);
IkReal x13603=((1.0)*cj6);
IkReal x13604=(cj9*sj7);
IkReal x13605=(sj7*sj9);
IkReal x13606=(cj9*r10);
IkReal x13607=(cj5*sj6);
IkReal x13608=(cj5*x13603);
IkReal x13609=((1.0)*x13598);
IkReal x13610=(cj7*x13599);
IkReal x13611=(sj7*x13599);
IkReal x13612=(sj9*x13598);
IkReal x13613=(r22*x13598);
IkReal x13614=((1.0)*cj7*cj9);
evalcond[0]=(r22*x13599);
evalcond[1]=(((r01*x13612))+(((-1.0)*x13601*x13609)));
evalcond[2]=(x13600+(((-1.0)*x13608))+((sj7*x13613)));
evalcond[3]=((-1.0)+(((-1.0)*x13606*x13609))+((r11*x13612)));
evalcond[4]=((((-1.0)*x13607))+((cj7*x13613))+(((-1.0)*sj5*x13603)));
evalcond[5]=(((r11*x13604))+((r10*x13605))+((x13606*x13610))+(((-1.0)*r11*x13602*x13610)));
evalcond[6]=(((r10*x13599*x13604))+(((-1.0)*cj7*r10*x13602))+(((-1.0)*r11*x13602*x13611))+(((-1.0)*r11*x13614)));
evalcond[7]=(x13600+(((-1.0)*r01*x13602*x13610))+(((-1.0)*x13608))+((x13601*x13610))+((r00*x13605))+((r01*x13604)));
evalcond[8]=(x13607+((cj6*sj5))+(((-1.0)*r01*x13602*x13611))+((x13601*x13611))+(((-1.0)*r01*x13614))+(((-1.0)*cj7*r00*x13602)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x13615=(cj9*r10);
IkReal x13616=(r11*sj9);
CheckValue<IkReal> x13617=IKPowWithIntegerCheck(((((-1.0)*sj7*x13616))+((sj7*x13615))),-1);
if(!x13617.valid){
continue;
}
CheckValue<IkReal> x13618=IKPowWithIntegerCheck((x13616+(((-1.0)*x13615))),-1);
if(!x13618.valid){
continue;
}
if( IKabs(((x13617.value)*((((cj7*r10*sj9))+((cj7*cj9*r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x13618.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13617.value)*((((cj7*r10*sj9))+((cj7*cj9*r11))))))+IKsqr(x13618.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((x13617.value)*((((cj7*r10*sj9))+((cj7*cj9*r11))))), x13618.value);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x13619=IKcos(j8);
IkReal x13620=IKsin(j8);
IkReal x13621=(sj5*sj6);
IkReal x13622=(cj9*r00);
IkReal x13623=((1.0)*sj9);
IkReal x13624=((1.0)*cj6);
IkReal x13625=(cj9*sj7);
IkReal x13626=(sj7*sj9);
IkReal x13627=(cj9*r10);
IkReal x13628=(cj5*sj6);
IkReal x13629=(cj5*x13624);
IkReal x13630=((1.0)*x13619);
IkReal x13631=(cj7*x13620);
IkReal x13632=(sj7*x13620);
IkReal x13633=(sj9*x13619);
IkReal x13634=(r22*x13619);
IkReal x13635=((1.0)*cj7*cj9);
evalcond[0]=(r22*x13620);
evalcond[1]=((((-1.0)*x13622*x13630))+((r01*x13633)));
evalcond[2]=(x13621+((sj7*x13634))+(((-1.0)*x13629)));
evalcond[3]=((-1.0)+((r11*x13633))+(((-1.0)*x13627*x13630)));
evalcond[4]=(((cj7*x13634))+(((-1.0)*sj5*x13624))+(((-1.0)*x13628)));
evalcond[5]=(((r10*x13626))+((r11*x13625))+(((-1.0)*r11*x13623*x13631))+((x13627*x13631)));
evalcond[6]=((((-1.0)*cj7*r10*x13623))+((r10*x13620*x13625))+(((-1.0)*r11*x13635))+(((-1.0)*r11*x13623*x13632)));
evalcond[7]=((((-1.0)*r01*x13623*x13631))+x13621+((x13622*x13631))+(((-1.0)*x13629))+((r01*x13625))+((r00*x13626)));
evalcond[8]=((((-1.0)*r01*x13623*x13632))+x13628+((cj6*sj5))+(((-1.0)*r01*x13635))+((x13622*x13632))+(((-1.0)*cj7*r00*x13623)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x13636=cj9*cj9;
IkReal x13637=((1.0)*sj7);
IkReal x13638=(r10*sj9);
IkReal x13639=(r11*r21);
IkReal x13640=(cj9*sj9);
IkReal x13641=(cj7*r20);
IkReal x13642=(r11*x13636);
IkReal x13643=(r10*x13636);
IkReal x13644=((1.0)*cj7*r21);
CheckValue<IkReal> x13645=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj9*x13638*x13644))+(((-1.0)*cj7*x13636*x13639))+((cj7*x13639))+((cj7*r12*r22))+(((-1.0)*r11*x13640*x13641))+((x13641*x13643)))),-1);
if(!x13645.valid){
continue;
}
CheckValue<IkReal> x13646 = IKatan2WithCheck(IkReal(((((-1.0)*cj9*r20*x13637*x13638))+(((-1.0)*r20*x13637*x13642))+((sj7*x13639*x13640))+((r10*r21*sj7))+(((-1.0)*r21*x13637*x13643)))),IkReal(((((-1.0)*r22*x13637*x13638))+(((-1.0)*cj9*r11*r22*x13637)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13646.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13645.value)))+(x13646.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x13647=IKcos(j8);
IkReal x13648=IKsin(j8);
IkReal x13649=(sj5*sj6);
IkReal x13650=(cj9*r00);
IkReal x13651=((1.0)*sj9);
IkReal x13652=(cj9*r21);
IkReal x13653=((1.0)*cj7);
IkReal x13654=((1.0)*cj6);
IkReal x13655=(cj9*r20);
IkReal x13656=(cj9*sj7);
IkReal x13657=(sj7*sj9);
IkReal x13658=(cj9*r10);
IkReal x13659=(cj5*sj6);
IkReal x13660=(cj5*x13654);
IkReal x13661=((1.0)*x13647);
IkReal x13662=(cj7*x13648);
IkReal x13663=(sj7*x13648);
IkReal x13664=(cj7*x13647);
IkReal x13665=(sj7*x13647);
IkReal x13666=(sj9*x13647);
evalcond[0]=(((r22*x13648))+(((-1.0)*x13655*x13661))+((r21*x13666)));
evalcond[1]=(((r02*x13648))+(((-1.0)*x13650*x13661))+((r01*x13666)));
evalcond[2]=((-1.0)+((r11*x13666))+((r12*x13648))+(((-1.0)*x13658*x13661)));
evalcond[3]=(((r12*x13664))+((r10*x13657))+(((-1.0)*r11*x13651*x13662))+((r11*x13656))+((x13658*x13662)));
evalcond[4]=(((r10*x13648*x13656))+(((-1.0)*cj7*r10*x13651))+((r12*x13665))+(((-1.0)*r11*x13651*x13663))+(((-1.0)*cj9*r11*x13653)));
evalcond[5]=(x13649+((r00*x13657))+((r01*x13656))+(((-1.0)*r01*x13651*x13662))+((r02*x13664))+((x13650*x13662))+(((-1.0)*x13660)));
evalcond[6]=(((sj7*x13652))+((r20*x13657))+((x13655*x13662))+(((-1.0)*x13659))+(((-1.0)*r21*x13651*x13662))+((r22*x13664))+(((-1.0)*sj5*x13654)));
evalcond[7]=(x13659+((cj6*sj5))+(((-1.0)*cj9*r01*x13653))+(((-1.0)*r01*x13651*x13663))+((r02*x13665))+((x13650*x13663))+(((-1.0)*cj7*r00*x13651)));
evalcond[8]=(x13649+((x13655*x13663))+(((-1.0)*r21*x13651*x13663))+((r22*x13665))+(((-1.0)*cj7*r20*x13651))+(((-1.0)*x13660))+(((-1.0)*x13652*x13653)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x13667=((1.0)*cj9);
CheckValue<IkReal> x13668=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj9))+(((-1.0)*r01*x13667)))),-1);
if(!x13668.valid){
continue;
}
CheckValue<IkReal> x13669 = IKatan2WithCheck(IkReal((((r21*sj9))+(((-1.0)*r20*x13667)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13669.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13668.value)))+(x13669.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x13670=IKcos(j8);
IkReal x13671=IKsin(j8);
IkReal x13672=(sj5*sj6);
IkReal x13673=(cj9*r00);
IkReal x13674=((1.0)*sj9);
IkReal x13675=(cj9*r21);
IkReal x13676=((1.0)*cj7);
IkReal x13677=((1.0)*cj6);
IkReal x13678=(cj9*r20);
IkReal x13679=(cj9*sj7);
IkReal x13680=(sj7*sj9);
IkReal x13681=(cj9*r10);
IkReal x13682=(cj5*sj6);
IkReal x13683=(cj5*x13677);
IkReal x13684=((1.0)*x13670);
IkReal x13685=(cj7*x13671);
IkReal x13686=(sj7*x13671);
IkReal x13687=(cj7*x13670);
IkReal x13688=(sj7*x13670);
IkReal x13689=(sj9*x13670);
evalcond[0]=((((-1.0)*x13678*x13684))+((r22*x13671))+((r21*x13689)));
evalcond[1]=(((r02*x13671))+(((-1.0)*x13673*x13684))+((r01*x13689)));
evalcond[2]=((-1.0)+((r12*x13671))+((r11*x13689))+(((-1.0)*x13681*x13684)));
evalcond[3]=(((r12*x13687))+(((-1.0)*r11*x13674*x13685))+((r11*x13679))+((x13681*x13685))+((r10*x13680)));
evalcond[4]=((((-1.0)*cj7*r10*x13674))+(((-1.0)*cj9*r11*x13676))+((r12*x13688))+(((-1.0)*r11*x13674*x13686))+((r10*x13671*x13679)));
evalcond[5]=(((x13673*x13685))+(((-1.0)*r01*x13674*x13685))+x13672+((r02*x13687))+((r01*x13679))+((r00*x13680))+(((-1.0)*x13683)));
evalcond[6]=((((-1.0)*sj5*x13677))+((r22*x13687))+(((-1.0)*x13682))+((sj7*x13675))+((r20*x13680))+(((-1.0)*r21*x13674*x13685))+((x13678*x13685)));
evalcond[7]=(((x13673*x13686))+(((-1.0)*r01*x13674*x13686))+x13682+((cj6*sj5))+((r02*x13688))+(((-1.0)*cj9*r01*x13676))+(((-1.0)*cj7*r00*x13674)));
evalcond[8]=(x13672+((r22*x13688))+(((-1.0)*x13675*x13676))+(((-1.0)*x13683))+(((-1.0)*r21*x13674*x13686))+(((-1.0)*cj7*r20*x13674))+((x13678*x13686)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x13690 = IKatan2WithCheck(IkReal((((r01*sj9))+(((-1.0)*cj9*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x13690.valid){
continue;
}
CheckValue<IkReal> x13691=IKPowWithIntegerCheck(IKsign((((cj9*r21))+((r20*sj9)))),-1);
if(!x13691.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x13690.value)+(((1.5707963267949)*(x13691.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x13692=IKcos(j8);
IkReal x13693=IKsin(j8);
IkReal x13694=(sj5*sj6);
IkReal x13695=(cj9*r00);
IkReal x13696=((1.0)*sj9);
IkReal x13697=(cj9*r21);
IkReal x13698=((1.0)*cj7);
IkReal x13699=((1.0)*cj6);
IkReal x13700=(cj9*r20);
IkReal x13701=(cj9*sj7);
IkReal x13702=(sj7*sj9);
IkReal x13703=(cj9*r10);
IkReal x13704=(cj5*sj6);
IkReal x13705=(cj5*x13699);
IkReal x13706=((1.0)*x13692);
IkReal x13707=(cj7*x13693);
IkReal x13708=(sj7*x13693);
IkReal x13709=(cj7*x13692);
IkReal x13710=(sj7*x13692);
IkReal x13711=(sj9*x13692);
evalcond[0]=(((r21*x13711))+(((-1.0)*x13700*x13706))+((r22*x13693)));
evalcond[1]=(((r01*x13711))+(((-1.0)*x13695*x13706))+((r02*x13693)));
evalcond[2]=((-1.0)+(((-1.0)*x13703*x13706))+((r12*x13693))+((r11*x13711)));
evalcond[3]=(((r12*x13709))+((r10*x13702))+(((-1.0)*r11*x13696*x13707))+((r11*x13701))+((x13703*x13707)));
evalcond[4]=(((r12*x13710))+(((-1.0)*cj7*r10*x13696))+(((-1.0)*cj9*r11*x13698))+(((-1.0)*r11*x13696*x13708))+((r10*x13693*x13701)));
evalcond[5]=(x13694+((x13695*x13707))+((r00*x13702))+((r01*x13701))+(((-1.0)*r01*x13696*x13707))+((r02*x13709))+(((-1.0)*x13705)));
evalcond[6]=(((sj7*x13697))+(((-1.0)*r21*x13696*x13707))+((x13700*x13707))+((r20*x13702))+(((-1.0)*x13704))+(((-1.0)*sj5*x13699))+((r22*x13709)));
evalcond[7]=(((cj6*sj5))+x13704+(((-1.0)*cj7*r00*x13696))+((x13695*x13708))+(((-1.0)*cj9*r01*x13698))+(((-1.0)*r01*x13696*x13708))+((r02*x13710)));
evalcond[8]=((((-1.0)*cj7*r20*x13696))+x13694+(((-1.0)*r21*x13696*x13708))+((x13700*x13708))+((r22*x13710))+(((-1.0)*x13697*x13698))+(((-1.0)*x13705)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13713 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13713)==0){
continue;
}
IkReal x13712=pow(x13713,-0.5);
CheckValue<IkReal> x13714 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13714.valid){
continue;
}
IkReal gconst12=((-1.0)*(x13714.value));
IkReal gconst13=((-1.0)*r01*x13712);
IkReal gconst14=(r00*x13712);
CheckValue<IkReal> x13715 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13715.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13715.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
CheckValue<IkReal> x13718 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13718.valid){
continue;
}
IkReal x13716=((-1.0)*(x13718.value));
IkReal x13717=x13712;
sj9=gconst13;
cj9=gconst14;
j9=x13716;
IkReal gconst12=x13716;
IkReal gconst13=((-1.0)*r01*x13717);
IkReal gconst14=(r00*x13717);
j8eval[0]=r22;
j8eval[1]=sj4;
j8eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x13719=((1.0)*sj4);
IkReal x13720=((1.0)*gconst14);
CheckValue<IkReal> x13721 = IKatan2WithCheck(IkReal(((((-1.0)*gconst14*r10*x13719))+(((-1.0)*cj4*r00*x13720))+((cj4*gconst13*r01))+((gconst13*r11*sj4)))),IkReal(((((-1.0)*cj4*r02))+(((-1.0)*r12*x13719)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13721.valid){
continue;
}
CheckValue<IkReal> x13722=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r20))+(((-1.0)*r21*x13720)))),-1);
if(!x13722.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x13721.value)+(((1.5707963267949)*(x13722.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x13723=IKcos(j8);
IkReal x13724=IKsin(j8);
IkReal x13725=(gconst13*r00);
IkReal x13726=(gconst14*sj7);
IkReal x13727=((1.0)*cj6);
IkReal x13728=((1.0)*sj4);
IkReal x13729=((1.0)*cj7);
IkReal x13730=(gconst13*r10);
IkReal x13731=(sj5*sj6);
IkReal x13732=(cj5*cj6);
IkReal x13733=((1.0)*sj7);
IkReal x13734=(cj5*sj6);
IkReal x13735=(gconst13*r20);
IkReal x13736=(r10*x13724);
IkReal x13737=(r02*x13723);
IkReal x13738=((1.0)*cj4*sj6);
IkReal x13739=(gconst13*x13723);
IkReal x13740=(cj7*x13723);
IkReal x13741=(gconst13*x13724);
IkReal x13742=(sj7*x13723);
IkReal x13743=(cj7*gconst14*x13724);
IkReal x13744=((1.0)*gconst14*x13723);
IkReal x13745=((1.0)*r01*x13741);
evalcond[0]=((((-1.0)*r20*x13744))+((r22*x13724))+((r21*x13739)));
evalcond[1]=(cj4+((r12*x13724))+(((-1.0)*r10*x13744))+((r11*x13739)));
evalcond[2]=((((-1.0)*r00*x13744))+((r02*x13724))+(((-1.0)*x13728))+((r01*x13739)));
evalcond[3]=(((r20*x13743))+((r21*x13726))+(((-1.0)*sj5*x13727))+(((-1.0)*r21*x13729*x13741))+((r22*x13740))+((sj7*x13735))+(((-1.0)*x13734)));
evalcond[4]=(x13731+((r20*x13724*x13726))+(((-1.0)*gconst14*r21*x13729))+(((-1.0)*x13729*x13735))+((r22*x13742))+(((-1.0)*cj5*x13727))+(((-1.0)*r21*x13733*x13741)));
evalcond[5]=(((cj7*x13737))+((r01*x13726))+(((-1.0)*cj4*x13731))+(((-1.0)*r01*x13729*x13741))+((cj4*x13732))+((sj7*x13725))+((r00*x13743)));
evalcond[6]=(((cj7*gconst14*x13736))+(((-1.0)*x13728*x13731))+(((-1.0)*r11*x13729*x13741))+((r11*x13726))+((sj7*x13730))+((r12*x13740))+((sj4*x13732)));
evalcond[7]=((((-1.0)*x13725*x13729))+(((-1.0)*cj4*sj5*x13727))+(((-1.0)*r01*x13733*x13741))+(((-1.0)*cj4*x13734))+(((-1.0)*gconst14*r01*x13729))+((sj7*x13737))+((r00*x13724*x13726)));
evalcond[8]=((((-1.0)*gconst14*r11*x13729))+(((-1.0)*r11*x13733*x13741))+(((-1.0)*sj4*sj5*x13727))+(((-1.0)*x13728*x13734))+(((-1.0)*x13729*x13730))+((x13726*x13736))+((r12*x13742)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x13746 = IKatan2WithCheck(IkReal(((((-1.0)*gconst14*r20*sj4))+((gconst13*r21*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x13746.valid){
continue;
}
CheckValue<IkReal> x13747=IKPowWithIntegerCheck(IKsign((((gconst14*r11))+((gconst13*r10)))),-1);
if(!x13747.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x13746.value)+(((1.5707963267949)*(x13747.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x13748=IKcos(j8);
IkReal x13749=IKsin(j8);
IkReal x13750=(gconst13*r00);
IkReal x13751=(gconst14*sj7);
IkReal x13752=((1.0)*cj6);
IkReal x13753=((1.0)*sj4);
IkReal x13754=((1.0)*cj7);
IkReal x13755=(gconst13*r10);
IkReal x13756=(sj5*sj6);
IkReal x13757=(cj5*cj6);
IkReal x13758=((1.0)*sj7);
IkReal x13759=(cj5*sj6);
IkReal x13760=(gconst13*r20);
IkReal x13761=(r10*x13749);
IkReal x13762=(r02*x13748);
IkReal x13763=((1.0)*cj4*sj6);
IkReal x13764=(gconst13*x13748);
IkReal x13765=(cj7*x13748);
IkReal x13766=(gconst13*x13749);
IkReal x13767=(sj7*x13748);
IkReal x13768=(cj7*gconst14*x13749);
IkReal x13769=((1.0)*gconst14*x13748);
IkReal x13770=((1.0)*r01*x13766);
evalcond[0]=((((-1.0)*r20*x13769))+((r22*x13749))+((r21*x13764)));
evalcond[1]=(((r11*x13764))+cj4+(((-1.0)*r10*x13769))+((r12*x13749)));
evalcond[2]=((((-1.0)*r00*x13769))+((r01*x13764))+(((-1.0)*x13753))+((r02*x13749)));
evalcond[3]=(((r21*x13751))+((sj7*x13760))+(((-1.0)*x13759))+(((-1.0)*sj5*x13752))+((r20*x13768))+(((-1.0)*r21*x13754*x13766))+((r22*x13765)));
evalcond[4]=((((-1.0)*r21*x13758*x13766))+(((-1.0)*cj5*x13752))+x13756+(((-1.0)*x13754*x13760))+(((-1.0)*gconst14*r21*x13754))+((r22*x13767))+((r20*x13749*x13751)));
evalcond[5]=((((-1.0)*cj4*x13756))+((r00*x13768))+((cj4*x13757))+((sj7*x13750))+((cj7*x13762))+((r01*x13751))+(((-1.0)*r01*x13754*x13766)));
evalcond[6]=(((r11*x13751))+(((-1.0)*r11*x13754*x13766))+((cj7*gconst14*x13761))+(((-1.0)*x13753*x13756))+((sj7*x13755))+((r12*x13765))+((sj4*x13757)));
evalcond[7]=(((sj7*x13762))+(((-1.0)*cj4*sj5*x13752))+(((-1.0)*r01*x13758*x13766))+(((-1.0)*x13750*x13754))+(((-1.0)*cj4*x13759))+((r00*x13749*x13751))+(((-1.0)*gconst14*r01*x13754)));
evalcond[8]=((((-1.0)*gconst14*r11*x13754))+(((-1.0)*x13754*x13755))+(((-1.0)*sj4*sj5*x13752))+(((-1.0)*x13753*x13759))+((x13751*x13761))+((r12*x13767))+(((-1.0)*r11*x13758*x13766)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13772 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13772)==0){
continue;
}
IkReal x13771=pow(x13772,-0.5);
CheckValue<IkReal> x13773 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13773.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x13773.value))));
IkReal gconst16=((1.0)*r01*x13771);
IkReal gconst17=((-1.0)*r00*x13771);
CheckValue<IkReal> x13774 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13774.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13774.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[5];
CheckValue<IkReal> x13777 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13777.valid){
continue;
}
IkReal x13775=((1.0)*(x13777.value));
IkReal x13776=x13771;
sj9=gconst16;
cj9=gconst17;
j9=((3.14159265)+(((-1.0)*x13775)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13775)));
IkReal gconst16=((1.0)*r01*x13776);
IkReal gconst17=((-1.0)*r00*x13776);
j8eval[0]=0;
j8eval[1]=cj4;
j8eval[2]=r22;
j8eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j8eval[4]=0;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  || IKabs(j8eval[4]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
CheckValue<IkReal> x13780 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13780.valid){
continue;
}
IkReal x13778=((1.0)*(x13780.value));
IkReal x13779=x13771;
sj9=gconst16;
cj9=gconst17;
j9=((3.14159265)+(((-1.0)*x13778)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13778)));
IkReal gconst16=((1.0)*r01*x13779);
IkReal gconst17=((-1.0)*r00*x13779);
j8eval[0]=r22;
j8eval[1]=sj4;
j8eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
CheckValue<IkReal> x13783 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13783.valid){
continue;
}
IkReal x13781=((1.0)*(x13783.value));
IkReal x13782=x13771;
sj9=gconst16;
cj9=gconst17;
j9=((3.14159265)+(((-1.0)*x13781)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13781)));
IkReal gconst16=((1.0)*r01*x13782);
IkReal gconst17=((-1.0)*r00*x13782);
IkReal x13784=r02*r02;
IkReal x13785=(r12*sj4);
IkReal x13786=x13771;
IkReal x13787=(cj4*x13786);
j8eval[0]=((IKabs((((x13784*x13787))+(((-1.0)*x13787))+((r02*x13785*x13786)))))+(IKabs(((((-1.0)*cj4*r02))+(((-1.0)*x13785))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
CheckValue<IkReal> x13790 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13790.valid){
continue;
}
IkReal x13788=((1.0)*(x13790.value));
IkReal x13789=x13771;
sj9=gconst16;
cj9=gconst17;
j9=((3.14159265)+(((-1.0)*x13788)));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13788)));
IkReal gconst16=((1.0)*r01*x13789);
IkReal gconst17=((-1.0)*r00*x13789);
j8eval[0]=1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[4];
CheckValue<IkReal> x13793 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13793.valid){
continue;
}
IkReal x13791=((1.0)*(x13793.value));
IkReal x13792=x13771;
sj9=gconst16;
cj9=gconst17;
j9=((3.14159265)+(((-1.0)*x13791)));
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13791)));
IkReal gconst16=((1.0)*r01*x13792);
IkReal gconst17=((-1.0)*r00*x13792);
j8eval[0]=0;
j8eval[1]=0;
j8eval[2]=r22;
j8eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  )
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x13794=gconst16*gconst16;
IkReal x13795=gconst17*gconst17;
IkReal x13796=(r10*r21);
IkReal x13797=(r10*r20);
IkReal x13798=((1.0)*r22);
IkReal x13799=(gconst16*sj7);
IkReal x13800=((1.0)*r11*r20);
IkReal x13801=(cj7*gconst16*gconst17);
IkReal x13802=(gconst17*r11*sj7);
CheckValue<IkReal> x13803=IKPowWithIntegerCheck(IKsign((((cj7*x13795*x13797))+((cj7*r12*r22))+(((-1.0)*x13800*x13801))+((cj7*r11*r21*x13794))+(((-1.0)*x13796*x13801)))),-1);
if(!x13803.valid){
continue;
}
CheckValue<IkReal> x13804 = IKatan2WithCheck(IkReal((((gconst17*r11*r21*x13799))+(((-1.0)*sj7*x13795*x13800))+((sj7*x13794*x13796))+(((-1.0)*gconst17*x13797*x13799)))),IkReal(((((-1.0)*x13798*x13802))+(((-1.0)*r10*x13798*x13799)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13804.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13803.value)))+(x13804.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x13805=IKcos(j8);
IkReal x13806=IKsin(j8);
IkReal x13807=(sj5*sj6);
IkReal x13808=((1.0)*cj5);
IkReal x13809=((1.0)*gconst17);
IkReal x13810=(cj6*sj5);
IkReal x13811=(gconst17*r20);
IkReal x13812=(cj7*r11);
IkReal x13813=((1.0)*gconst16);
IkReal x13814=(gconst17*r10);
IkReal x13815=(gconst17*sj7);
IkReal x13816=(gconst16*sj7);
IkReal x13817=(gconst17*r00);
IkReal x13818=(cj6*x13808);
IkReal x13819=(sj7*x13805);
IkReal x13820=(gconst16*x13805);
IkReal x13821=(sj7*x13806);
IkReal x13822=(r21*x13813);
IkReal x13823=(cj7*x13806);
IkReal x13824=(cj7*x13805);
evalcond[0]=(((r21*x13820))+((r22*x13806))+(((-1.0)*r20*x13805*x13809)));
evalcond[1]=(((r01*x13820))+(((-1.0)*r00*x13805*x13809))+((r02*x13806)));
evalcond[2]=((-1.0)+((r12*x13806))+((r11*x13820))+(((-1.0)*r10*x13805*x13809)));
evalcond[3]=(((r11*x13815))+((r10*x13816))+((r12*x13824))+((x13814*x13823))+(((-1.0)*x13806*x13812*x13813)));
evalcond[4]=(((r12*x13819))+((x13814*x13821))+(((-1.0)*x13809*x13812))+(((-1.0)*cj7*r10*x13813))+(((-1.0)*r11*x13813*x13821)));
evalcond[5]=((((-1.0)*x13818))+((x13817*x13823))+x13807+((r00*x13816))+((r01*x13815))+(((-1.0)*r01*x13813*x13823))+((r02*x13824)));
evalcond[6]=(((x13811*x13823))+((r21*x13815))+(((-1.0)*x13810))+(((-1.0)*sj6*x13808))+((r22*x13824))+((r20*x13816))+(((-1.0)*x13822*x13823)));
evalcond[7]=(x13810+(((-1.0)*cj7*r00*x13813))+((cj5*sj6))+((r00*x13806*x13815))+(((-1.0)*cj7*r01*x13809))+(((-1.0)*r01*x13813*x13821))+((r02*x13819)));
evalcond[8]=(((x13811*x13821))+(((-1.0)*x13818))+x13807+((r22*x13819))+(((-1.0)*cj7*r21*x13809))+(((-1.0)*x13821*x13822))+(((-1.0)*cj7*r20*x13813)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x13825=((1.0)*gconst17);
CheckValue<IkReal> x13826 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x13825))+((gconst16*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13826.valid){
continue;
}
CheckValue<IkReal> x13827=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r00))+(((-1.0)*r01*x13825)))),-1);
if(!x13827.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x13826.value)+(((1.5707963267949)*(x13827.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x13828=IKcos(j8);
IkReal x13829=IKsin(j8);
IkReal x13830=(sj5*sj6);
IkReal x13831=((1.0)*cj5);
IkReal x13832=((1.0)*gconst17);
IkReal x13833=(cj6*sj5);
IkReal x13834=(gconst17*r20);
IkReal x13835=(cj7*r11);
IkReal x13836=((1.0)*gconst16);
IkReal x13837=(gconst17*r10);
IkReal x13838=(gconst17*sj7);
IkReal x13839=(gconst16*sj7);
IkReal x13840=(gconst17*r00);
IkReal x13841=(cj6*x13831);
IkReal x13842=(sj7*x13828);
IkReal x13843=(gconst16*x13828);
IkReal x13844=(sj7*x13829);
IkReal x13845=(r21*x13836);
IkReal x13846=(cj7*x13829);
IkReal x13847=(cj7*x13828);
evalcond[0]=(((r21*x13843))+((r22*x13829))+(((-1.0)*r20*x13828*x13832)));
evalcond[1]=((((-1.0)*r00*x13828*x13832))+((r02*x13829))+((r01*x13843)));
evalcond[2]=((-1.0)+((r12*x13829))+((r11*x13843))+(((-1.0)*r10*x13828*x13832)));
evalcond[3]=(((x13837*x13846))+((r12*x13847))+((r11*x13838))+((r10*x13839))+(((-1.0)*x13829*x13835*x13836)));
evalcond[4]=(((x13837*x13844))+(((-1.0)*cj7*r10*x13836))+((r12*x13842))+(((-1.0)*r11*x13836*x13844))+(((-1.0)*x13832*x13835)));
evalcond[5]=((((-1.0)*x13841))+((r01*x13838))+((x13840*x13846))+x13830+((r02*x13847))+(((-1.0)*r01*x13836*x13846))+((r00*x13839)));
evalcond[6]=(((x13834*x13846))+((r21*x13838))+((r22*x13847))+(((-1.0)*sj6*x13831))+(((-1.0)*x13845*x13846))+((r20*x13839))+(((-1.0)*x13833)));
evalcond[7]=((((-1.0)*cj7*r00*x13836))+x13833+((cj5*sj6))+(((-1.0)*cj7*r01*x13832))+((r02*x13842))+(((-1.0)*r01*x13836*x13844))+((r00*x13829*x13838)));
evalcond[8]=((((-1.0)*x13841))+(((-1.0)*cj7*r21*x13832))+(((-1.0)*x13844*x13845))+((x13834*x13844))+x13830+((r22*x13842))+(((-1.0)*cj7*r20*x13836)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x13848 = IKatan2WithCheck(IkReal(((((-1.0)*gconst17*r00))+((gconst16*r01)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x13848.valid){
continue;
}
CheckValue<IkReal> x13849=IKPowWithIntegerCheck(IKsign((((gconst17*r21))+((gconst16*r20)))),-1);
if(!x13849.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x13848.value)+(((1.5707963267949)*(x13849.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x13850=IKcos(j8);
IkReal x13851=IKsin(j8);
IkReal x13852=(sj5*sj6);
IkReal x13853=((1.0)*cj5);
IkReal x13854=((1.0)*gconst17);
IkReal x13855=(cj6*sj5);
IkReal x13856=(gconst17*r20);
IkReal x13857=(cj7*r11);
IkReal x13858=((1.0)*gconst16);
IkReal x13859=(gconst17*r10);
IkReal x13860=(gconst17*sj7);
IkReal x13861=(gconst16*sj7);
IkReal x13862=(gconst17*r00);
IkReal x13863=(cj6*x13853);
IkReal x13864=(sj7*x13850);
IkReal x13865=(gconst16*x13850);
IkReal x13866=(sj7*x13851);
IkReal x13867=(r21*x13858);
IkReal x13868=(cj7*x13851);
IkReal x13869=(cj7*x13850);
evalcond[0]=(((r22*x13851))+(((-1.0)*r20*x13850*x13854))+((r21*x13865)));
evalcond[1]=(((r01*x13865))+((r02*x13851))+(((-1.0)*r00*x13850*x13854)));
evalcond[2]=((-1.0)+((r11*x13865))+((r12*x13851))+(((-1.0)*r10*x13850*x13854)));
evalcond[3]=(((r11*x13860))+((r12*x13869))+((r10*x13861))+(((-1.0)*x13851*x13857*x13858))+((x13859*x13868)));
evalcond[4]=((((-1.0)*cj7*r10*x13858))+((r12*x13864))+(((-1.0)*r11*x13858*x13866))+((x13859*x13866))+(((-1.0)*x13854*x13857)));
evalcond[5]=((((-1.0)*r01*x13858*x13868))+((r01*x13860))+((r00*x13861))+x13852+((x13862*x13868))+((r02*x13869))+(((-1.0)*x13863)));
evalcond[6]=((((-1.0)*x13855))+((r22*x13869))+(((-1.0)*sj6*x13853))+(((-1.0)*x13867*x13868))+((r21*x13860))+((r20*x13861))+((x13856*x13868)));
evalcond[7]=((((-1.0)*cj7*r00*x13858))+(((-1.0)*r01*x13858*x13866))+x13855+((cj5*sj6))+((r02*x13864))+((r00*x13851*x13860))+(((-1.0)*cj7*r01*x13854)));
evalcond[8]=(((r22*x13864))+x13852+((x13856*x13866))+(((-1.0)*x13866*x13867))+(((-1.0)*cj7*r20*x13858))+(((-1.0)*x13863))+(((-1.0)*cj7*r21*x13854)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
IkReal x13870=(gconst17*r20);
IkReal x13871=(gconst16*r21);
op[0]=(x13870+(((-1.0)*x13871)));
op[1]=((2.0)*r22);
op[2]=(x13871+(((-1.0)*x13870)));
polyroots2(op,zeror,numroots);
IkReal j8array[2], cj8array[2], sj8array[2], tempj8array[1];
int numsolutions = 0;
for(int ij8 = 0; ij8 < numroots; ++ij8)
{
IkReal htj8 = zeror[ij8];
tempj8array[0]=((2.0)*(atan(htj8)));
for(int kj8 = 0; kj8 < 1; ++kj8)
{
j8array[numsolutions] = tempj8array[kj8];
if( j8array[numsolutions] > IKPI )
{
    j8array[numsolutions]-=IK2PI;
}
else if( j8array[numsolutions] < -IKPI )
{
    j8array[numsolutions]+=IK2PI;
}
sj8array[numsolutions] = IKsin(j8array[numsolutions]);
cj8array[numsolutions] = IKcos(j8array[numsolutions]);
numsolutions++;
}
}
bool j8valid[2]={true,true};
_nj8 = 2;
for(int ij8 = 0; ij8 < numsolutions; ++ij8)
    {
if( !j8valid[ij8] )
{
    continue;
}
    j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
htj8 = IKtan(j8/2);

_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < numsolutions; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
IkReal x13872=(gconst17*r20);
IkReal x13873=(gconst16*r21);
op[0]=(x13872+(((-1.0)*x13873)));
op[1]=((2.0)*r22);
op[2]=(x13873+(((-1.0)*x13872)));
polyroots2(op,zeror,numroots);
IkReal j8array[2], cj8array[2], sj8array[2], tempj8array[1];
int numsolutions = 0;
for(int ij8 = 0; ij8 < numroots; ++ij8)
{
IkReal htj8 = zeror[ij8];
tempj8array[0]=((2.0)*(atan(htj8)));
for(int kj8 = 0; kj8 < 1; ++kj8)
{
j8array[numsolutions] = tempj8array[kj8];
if( j8array[numsolutions] > IKPI )
{
    j8array[numsolutions]-=IK2PI;
}
else if( j8array[numsolutions] < -IKPI )
{
    j8array[numsolutions]+=IK2PI;
}
sj8array[numsolutions] = IKsin(j8array[numsolutions]);
cj8array[numsolutions] = IKcos(j8array[numsolutions]);
numsolutions++;
}
}
bool j8valid[2]={true,true};
_nj8 = 2;
for(int ij8 = 0; ij8 < numsolutions; ++ij8)
    {
if( !j8valid[ij8] )
{
    continue;
}
    j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
htj8 = IKtan(j8/2);

_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < numsolutions; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
CheckValue<IkReal> x13876 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13876.valid){
continue;
}
IkReal x13874=((1.0)*(x13876.value));
IkReal x13875=x13771;
sj9=gconst16;
cj9=gconst17;
j9=((3.14159265)+(((-1.0)*x13874)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x13874)));
IkReal gconst16=((1.0)*r01*x13875);
IkReal gconst17=((-1.0)*r00*x13875);
IkReal x13877=r02*r02;
IkReal x13878=(r12*sj4);
IkReal x13879=x13771;
IkReal x13880=(cj4*x13879);
j8eval[0]=((IKabs(((((-1.0)*x13880))+((r02*x13878*x13879))+((x13877*x13880)))))+(IKabs(((((-1.0)*cj4*r02))+(((-1.0)*x13878))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x13881=(gconst16*r20);
IkReal x13882=((1.0)*sj7);
IkReal x13883=(cj7*gconst17);
IkReal x13884=(cj7*r21);
IkReal x13885=(r12*sj7);
IkReal x13886=(gconst17*r21);
IkReal x13887=((1.0)*r20);
IkReal x13888=(cj5*sj6);
IkReal x13889=((1.0)*r12);
IkReal x13890=(cj6*sj5);
CheckValue<IkReal> x13891=IKPowWithIntegerCheck((((r20*x13883))+(((-1.0)*gconst16*x13884))),-1);
if(!x13891.valid){
continue;
}
CheckValue<IkReal> x13892=IKPowWithIntegerCheck((((r11*x13881*x13883))+((gconst16*r10*r21*x13883))+(((-1.0)*gconst17*r10*x13883*x13887))+(((-1.0)*r11*x13884*(gconst16*gconst16)))),-1);
if(!x13892.valid){
continue;
}
if( IKabs(((x13891.value)*((x13888+x13890+(((-1.0)*x13882*x13886))+(((-1.0)*x13881*x13882)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13892.value)*(((((-1.0)*x13889*x13890))+((x13881*x13885))+(((-1.0)*x13888*x13889))+((cj4*gconst16*x13884))+((x13885*x13886))+(((-1.0)*cj4*x13883*x13887)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13891.value)*((x13888+x13890+(((-1.0)*x13882*x13886))+(((-1.0)*x13881*x13882))))))+IKsqr(((x13892.value)*(((((-1.0)*x13889*x13890))+((x13881*x13885))+(((-1.0)*x13888*x13889))+((cj4*gconst16*x13884))+((x13885*x13886))+(((-1.0)*cj4*x13883*x13887))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((x13891.value)*((x13888+x13890+(((-1.0)*x13882*x13886))+(((-1.0)*x13881*x13882))))), ((x13892.value)*(((((-1.0)*x13889*x13890))+((x13881*x13885))+(((-1.0)*x13888*x13889))+((cj4*gconst16*x13884))+((x13885*x13886))+(((-1.0)*cj4*x13883*x13887))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x13893=IKcos(j8);
IkReal x13894=IKsin(j8);
IkReal x13895=((1.0)*gconst17);
IkReal x13896=((1.0)*cj6);
IkReal x13897=((1.0)*sj4);
IkReal x13898=(gconst16*r21);
IkReal x13899=(sj5*sj6);
IkReal x13900=(cj7*r10);
IkReal x13901=((1.0)*gconst16);
IkReal x13902=(gconst17*sj7);
IkReal x13903=(gconst16*r01);
IkReal x13904=(cj5*cj6);
IkReal x13905=(r10*sj7);
IkReal x13906=(gconst16*sj7);
IkReal x13907=(cj7*r00);
IkReal x13908=(cj7*r20);
IkReal x13909=(gconst16*r11);
IkReal x13910=((1.0)*cj5*sj6);
IkReal x13911=(sj7*x13893);
IkReal x13912=(cj7*x13893);
IkReal x13913=(gconst17*x13894);
IkReal x13914=((1.0)*sj7*x13894);
IkReal x13915=(cj7*x13894*x13901);
evalcond[0]=((((-1.0)*r20*x13893*x13895))+((x13893*x13898)));
evalcond[1]=(cj4+(((-1.0)*r10*x13893*x13895))+((x13893*x13909))+((r12*x13894)));
evalcond[2]=(((r02*x13894))+(((-1.0)*r00*x13893*x13895))+((x13893*x13903))+(((-1.0)*x13897)));
evalcond[3]=(((r20*x13906))+((r21*x13902))+(((-1.0)*cj7*x13894*x13898))+((x13908*x13913))+(((-1.0)*x13910))+(((-1.0)*sj5*x13896)));
evalcond[4]=((((-1.0)*x13901*x13908))+x13899+(((-1.0)*x13898*x13914))+(((-1.0)*cj5*x13896))+((r20*x13894*x13902))+(((-1.0)*cj7*r21*x13895)));
evalcond[5]=((((-1.0)*cj4*x13899))+((cj4*x13904))+((r02*x13912))+(((-1.0)*r01*x13915))+((r01*x13902))+((r00*x13906))+((x13907*x13913)));
evalcond[6]=(((sj4*x13904))+((gconst16*x13905))+(((-1.0)*r11*x13915))+((x13900*x13913))+((r12*x13912))+((r11*x13902))+(((-1.0)*x13897*x13899)));
evalcond[7]=((((-1.0)*x13901*x13907))+(((-1.0)*cj4*sj5*x13896))+((r02*x13911))+(((-1.0)*cj4*x13910))+((r00*x13894*x13902))+(((-1.0)*r01*sj7*x13894*x13901))+(((-1.0)*cj7*r01*x13895)));
evalcond[8]=((((-1.0)*cj7*r11*x13895))+(((-1.0)*sj4*sj5*x13896))+((r12*x13911))+(((-1.0)*r11*sj7*x13894*x13901))+((r10*x13894*x13902))+(((-1.0)*cj5*sj6*x13897))+(((-1.0)*x13900*x13901)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x13916=((1.0)*gconst17);
CheckValue<IkReal> x13917 = IKatan2WithCheck(IkReal(((((-1.0)*r10*sj4*x13916))+((gconst16*r11*sj4))+(((-1.0)*cj4*r00*x13916))+((cj4*gconst16*r01)))),IkReal(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13917.valid){
continue;
}
CheckValue<IkReal> x13918=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*r21*x13916)))),-1);
if(!x13918.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x13917.value)+(((1.5707963267949)*(x13918.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x13919=IKcos(j8);
IkReal x13920=IKsin(j8);
IkReal x13921=((1.0)*gconst17);
IkReal x13922=((1.0)*cj6);
IkReal x13923=((1.0)*sj4);
IkReal x13924=(gconst16*r21);
IkReal x13925=(sj5*sj6);
IkReal x13926=(cj7*r10);
IkReal x13927=((1.0)*gconst16);
IkReal x13928=(gconst17*sj7);
IkReal x13929=(gconst16*r01);
IkReal x13930=(cj5*cj6);
IkReal x13931=(r10*sj7);
IkReal x13932=(gconst16*sj7);
IkReal x13933=(cj7*r00);
IkReal x13934=(cj7*r20);
IkReal x13935=(gconst16*r11);
IkReal x13936=((1.0)*cj5*sj6);
IkReal x13937=(sj7*x13919);
IkReal x13938=(cj7*x13919);
IkReal x13939=(gconst17*x13920);
IkReal x13940=((1.0)*sj7*x13920);
IkReal x13941=(cj7*x13920*x13927);
evalcond[0]=((((-1.0)*r20*x13919*x13921))+((x13919*x13924)));
evalcond[1]=(((x13919*x13935))+cj4+(((-1.0)*r10*x13919*x13921))+((r12*x13920)));
evalcond[2]=((((-1.0)*r00*x13919*x13921))+(((-1.0)*x13923))+((r02*x13920))+((x13919*x13929)));
evalcond[3]=(((x13934*x13939))+((r20*x13932))+((r21*x13928))+(((-1.0)*sj5*x13922))+(((-1.0)*x13936))+(((-1.0)*cj7*x13920*x13924)));
evalcond[4]=((((-1.0)*x13924*x13940))+(((-1.0)*x13927*x13934))+x13925+(((-1.0)*cj5*x13922))+((r20*x13920*x13928))+(((-1.0)*cj7*r21*x13921)));
evalcond[5]=(((r00*x13932))+((x13933*x13939))+(((-1.0)*r01*x13941))+((r01*x13928))+(((-1.0)*cj4*x13925))+((cj4*x13930))+((r02*x13938)));
evalcond[6]=(((gconst16*x13931))+(((-1.0)*r11*x13941))+((x13926*x13939))+(((-1.0)*x13923*x13925))+((sj4*x13930))+((r11*x13928))+((r12*x13938)));
evalcond[7]=((((-1.0)*cj4*x13936))+((r00*x13920*x13928))+(((-1.0)*x13927*x13933))+(((-1.0)*cj7*r01*x13921))+(((-1.0)*cj4*sj5*x13922))+(((-1.0)*r01*sj7*x13920*x13927))+((r02*x13937)));
evalcond[8]=((((-1.0)*r11*sj7*x13920*x13927))+(((-1.0)*sj4*sj5*x13922))+(((-1.0)*x13926*x13927))+(((-1.0)*cj5*sj6*x13923))+((r10*x13920*x13928))+(((-1.0)*cj7*r11*x13921))+((r12*x13937)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x13942=((1.0)*gconst17);
CheckValue<IkReal> x13943=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*r21*x13942)))),-1);
if(!x13943.valid){
continue;
}
CheckValue<IkReal> x13944 = IKatan2WithCheck(IkReal((((gconst16*r11*sj4))+(((-1.0)*cj4*r00*x13942))+(((-1.0)*r10*sj4*x13942))+((cj4*gconst16*r01)))),IkReal(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13944.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13943.value)))+(x13944.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x13945=IKcos(j8);
IkReal x13946=IKsin(j8);
IkReal x13947=((1.0)*gconst17);
IkReal x13948=((1.0)*cj6);
IkReal x13949=((1.0)*sj4);
IkReal x13950=(gconst16*r21);
IkReal x13951=(sj5*sj6);
IkReal x13952=(cj7*r10);
IkReal x13953=((1.0)*gconst16);
IkReal x13954=(cj5*cj6);
IkReal x13955=(gconst17*sj7);
IkReal x13956=(gconst16*r01);
IkReal x13957=(r10*sj7);
IkReal x13958=(gconst16*sj7);
IkReal x13959=(cj7*r00);
IkReal x13960=(cj7*r20);
IkReal x13961=(gconst16*r11);
IkReal x13962=((1.0)*cj5*sj6);
IkReal x13963=(sj7*x13945);
IkReal x13964=(cj7*x13945);
IkReal x13965=(gconst17*x13946);
IkReal x13966=((1.0)*sj7*x13946);
IkReal x13967=(cj7*x13946*x13953);
evalcond[0]=((((-1.0)*r20*x13945*x13947))+((x13945*x13950))+((r22*x13946)));
evalcond[1]=(cj4+((x13945*x13961))+((r12*x13946))+(((-1.0)*r10*x13945*x13947)));
evalcond[2]=((((-1.0)*r00*x13945*x13947))+(((-1.0)*x13949))+((x13945*x13956))+((r02*x13946)));
evalcond[3]=((((-1.0)*sj5*x13948))+(((-1.0)*cj7*x13946*x13950))+((r21*x13955))+((x13960*x13965))+(((-1.0)*x13962))+((r22*x13964))+((r20*x13958)));
evalcond[4]=((((-1.0)*x13953*x13960))+(((-1.0)*x13950*x13966))+x13951+(((-1.0)*cj5*x13948))+(((-1.0)*cj7*r21*x13947))+((r20*x13946*x13955))+((r22*x13963)));
evalcond[5]=(((r02*x13964))+((x13959*x13965))+((r01*x13955))+((r00*x13958))+((cj4*x13954))+(((-1.0)*r01*x13967))+(((-1.0)*cj4*x13951)));
evalcond[6]=(((r11*x13955))+(((-1.0)*x13949*x13951))+(((-1.0)*r11*x13967))+((x13952*x13965))+((sj4*x13954))+((r12*x13964))+((gconst16*x13957)));
evalcond[7]=(((r02*x13963))+(((-1.0)*cj4*x13962))+(((-1.0)*r01*sj7*x13946*x13953))+(((-1.0)*cj7*r01*x13947))+(((-1.0)*cj4*sj5*x13948))+((r00*x13946*x13955))+(((-1.0)*x13953*x13959)));
evalcond[8]=((((-1.0)*x13952*x13953))+(((-1.0)*r11*sj7*x13946*x13953))+(((-1.0)*sj4*sj5*x13948))+((r10*x13946*x13955))+(((-1.0)*cj5*sj6*x13949))+((r12*x13963))+(((-1.0)*cj7*r11*x13947)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x13968 = IKatan2WithCheck(IkReal(((((-1.0)*gconst17*r20*sj4))+((gconst16*r21*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x13968.valid){
continue;
}
CheckValue<IkReal> x13969=IKPowWithIntegerCheck(IKsign((((gconst17*r11))+((gconst16*r10)))),-1);
if(!x13969.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x13968.value)+(((1.5707963267949)*(x13969.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x13970=IKcos(j8);
IkReal x13971=IKsin(j8);
IkReal x13972=((1.0)*gconst17);
IkReal x13973=((1.0)*cj6);
IkReal x13974=((1.0)*sj4);
IkReal x13975=(gconst16*r21);
IkReal x13976=(sj5*sj6);
IkReal x13977=(cj7*r10);
IkReal x13978=((1.0)*gconst16);
IkReal x13979=(cj5*cj6);
IkReal x13980=(gconst17*sj7);
IkReal x13981=(gconst16*r01);
IkReal x13982=(r10*sj7);
IkReal x13983=(gconst16*sj7);
IkReal x13984=(cj7*r00);
IkReal x13985=(cj7*r20);
IkReal x13986=(gconst16*r11);
IkReal x13987=((1.0)*cj5*sj6);
IkReal x13988=(sj7*x13970);
IkReal x13989=(cj7*x13970);
IkReal x13990=(gconst17*x13971);
IkReal x13991=((1.0)*sj7*x13971);
IkReal x13992=(cj7*x13971*x13978);
evalcond[0]=((((-1.0)*r20*x13970*x13972))+((x13970*x13975))+((r22*x13971)));
evalcond[1]=(((x13970*x13986))+cj4+(((-1.0)*r10*x13970*x13972))+((r12*x13971)));
evalcond[2]=(((r02*x13971))+((x13970*x13981))+(((-1.0)*r00*x13970*x13972))+(((-1.0)*x13974)));
evalcond[3]=((((-1.0)*cj7*x13971*x13975))+((r20*x13983))+((r21*x13980))+(((-1.0)*sj5*x13973))+((r22*x13989))+(((-1.0)*x13987))+((x13985*x13990)));
evalcond[4]=((((-1.0)*cj5*x13973))+(((-1.0)*x13978*x13985))+x13976+((r22*x13988))+(((-1.0)*x13975*x13991))+(((-1.0)*cj7*r21*x13972))+((r20*x13971*x13980)));
evalcond[5]=(((cj4*x13979))+((r00*x13983))+((r01*x13980))+(((-1.0)*r01*x13992))+(((-1.0)*cj4*x13976))+((r02*x13989))+((x13984*x13990)));
evalcond[6]=(((gconst16*x13982))+((r12*x13989))+((r11*x13980))+(((-1.0)*r11*x13992))+((x13977*x13990))+(((-1.0)*x13974*x13976))+((sj4*x13979)));
evalcond[7]=((((-1.0)*r01*sj7*x13971*x13978))+(((-1.0)*x13978*x13984))+(((-1.0)*cj7*r01*x13972))+((r00*x13971*x13980))+((r02*x13988))+(((-1.0)*cj4*sj5*x13973))+(((-1.0)*cj4*x13987)));
evalcond[8]=(((r12*x13988))+(((-1.0)*sj4*sj5*x13973))+(((-1.0)*x13977*x13978))+(((-1.0)*cj5*sj6*x13974))+(((-1.0)*cj7*r11*x13972))+(((-1.0)*r11*sj7*x13971*x13978))+((r10*x13971*x13980)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x13993=IKPowWithIntegerCheck(IKsign((((gconst17*r01))+((gconst16*r00)))),-1);
if(!x13993.valid){
continue;
}
CheckValue<IkReal> x13994 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*gconst17*r20))+((cj4*gconst16*r21)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13994.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13993.value)))+(x13994.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x13995=IKcos(j8);
IkReal x13996=IKsin(j8);
IkReal x13997=((1.0)*gconst17);
IkReal x13998=((1.0)*cj6);
IkReal x13999=((1.0)*sj4);
IkReal x14000=(gconst16*r21);
IkReal x14001=(sj5*sj6);
IkReal x14002=(cj7*r10);
IkReal x14003=((1.0)*gconst16);
IkReal x14004=(cj5*cj6);
IkReal x14005=(gconst17*sj7);
IkReal x14006=(gconst16*r01);
IkReal x14007=(r10*sj7);
IkReal x14008=(gconst16*sj7);
IkReal x14009=(cj7*r00);
IkReal x14010=(cj7*r20);
IkReal x14011=(gconst16*r11);
IkReal x14012=((1.0)*cj5*sj6);
IkReal x14013=(sj7*x13995);
IkReal x14014=(cj7*x13995);
IkReal x14015=(gconst17*x13996);
IkReal x14016=((1.0)*sj7*x13996);
IkReal x14017=(cj7*x13996*x14003);
evalcond[0]=(((x13995*x14000))+(((-1.0)*r20*x13995*x13997))+((r22*x13996)));
evalcond[1]=(((x13995*x14011))+cj4+(((-1.0)*r10*x13995*x13997))+((r12*x13996)));
evalcond[2]=(((x13995*x14006))+((r02*x13996))+(((-1.0)*x13999))+(((-1.0)*r00*x13995*x13997)));
evalcond[3]=((((-1.0)*x14012))+((r21*x14005))+((r22*x14014))+((r20*x14008))+(((-1.0)*sj5*x13998))+((x14010*x14015))+(((-1.0)*cj7*x13996*x14000)));
evalcond[4]=((((-1.0)*x14000*x14016))+((r22*x14013))+(((-1.0)*cj7*r21*x13997))+(((-1.0)*cj5*x13998))+(((-1.0)*x14003*x14010))+x14001+((r20*x13996*x14005)));
evalcond[5]=((((-1.0)*r01*x14017))+((r02*x14014))+((cj4*x14004))+((r01*x14005))+((r00*x14008))+((x14009*x14015))+(((-1.0)*cj4*x14001)));
evalcond[6]=(((sj4*x14004))+((x14002*x14015))+((gconst16*x14007))+(((-1.0)*x13999*x14001))+((r11*x14005))+((r12*x14014))+(((-1.0)*r11*x14017)));
evalcond[7]=(((r02*x14013))+(((-1.0)*x14003*x14009))+(((-1.0)*cj7*r01*x13997))+(((-1.0)*r01*sj7*x13996*x14003))+(((-1.0)*cj4*sj5*x13998))+((r00*x13996*x14005))+(((-1.0)*cj4*x14012)));
evalcond[8]=((((-1.0)*cj7*r11*x13997))+(((-1.0)*sj4*sj5*x13998))+((r10*x13996*x14005))+(((-1.0)*x14002*x14003))+((r12*x14013))+(((-1.0)*cj5*sj6*x13999))+(((-1.0)*r11*sj7*x13996*x14003)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal x14018=(((r10*sj9))+((cj9*r11)));
j8eval[0]=x14018;
j8eval[1]=((IKabs(r22))+(IKabs((((r21*sj9))+(((-1.0)*cj9*r20))))));
j8eval[2]=IKsign(x14018);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal x14019=((1.0)*cj9);
IkReal x14020=((((-1.0)*r21*x14019))+(((-1.0)*r20*sj9)));
j8eval[0]=x14020;
j8eval[1]=((IKabs(r12))+(IKabs((((r11*sj9))+(((-1.0)*r10*x14019))))));
j8eval[2]=IKsign(x14020);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal x14021=cj9*cj9;
IkReal x14022=(cj7*r01);
IkReal x14023=(cj7*r00);
IkReal x14024=((1.0)*cj9*sj9);
IkReal x14025=((((-1.0)*r20*x14022*x14024))+((r20*x14021*x14023))+((r21*x14022))+((cj7*r02*r22))+(((-1.0)*r21*x14021*x14022))+(((-1.0)*r21*x14023*x14024)));
j8eval[0]=x14025;
j8eval[1]=IKsign(x14025);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
IkReal x14026=(((r10*sj9))+((cj9*r11)));
j8eval[0]=x14026;
j8eval[1]=((IKabs(r22))+(IKabs((((r21*sj9))+(((-1.0)*cj9*r20))))));
j8eval[2]=IKsign(x14026);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
IkReal x14027=((1.0)*cj9);
IkReal x14028=((((-1.0)*r21*x14027))+(((-1.0)*r20*sj9)));
j8eval[0]=x14028;
j8eval[1]=((IKabs(r12))+(IKabs((((r11*sj9))+(((-1.0)*r10*x14027))))));
j8eval[2]=IKsign(x14028);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
IkReal x14029=cj9*cj9;
IkReal x14030=r01*r01;
IkReal x14031=(cj9*r00);
IkReal x14032=(r01*sj9);
IkReal x14033=(((x14029*(r00*r00)))+(((-1.0)*x14029*x14030))+(r02*r02)+x14030+(((-2.0)*x14031*x14032)));
j8eval[0]=x14033;
j8eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x14031))+x14032))));
j8eval[2]=IKsign(x14033);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x14034=cj9*cj9;
IkReal x14035=r01*r01;
IkReal x14036=(cj9*r00);
IkReal x14037=(r01*sj9);
CheckValue<IkReal> x14038 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x14036))+x14037)),IKFAST_ATAN2_MAGTHRESH);
if(!x14038.valid){
continue;
}
CheckValue<IkReal> x14039=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14034*x14035))+(((-2.0)*x14036*x14037))+(r02*r02)+x14035+((x14034*(r00*r00))))),-1);
if(!x14039.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x14038.value)+(((1.5707963267949)*(x14039.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x14040=IKcos(j8);
IkReal x14041=IKsin(j8);
IkReal x14042=(cj9*r00);
IkReal x14043=((1.0)*cj6);
IkReal x14044=((1.0)*x14040);
IkReal x14045=(cj9*x14041);
IkReal x14046=(sj9*x14040);
IkReal x14047=((1.0)*sj9*x14041);
evalcond[0]=(((r22*x14041))+(((-1.0)*cj9*r20*x14044))+((r21*x14046)));
evalcond[1]=(((r11*x14046))+(((-1.0)*cj9*r10*x14044))+((r12*x14041)));
evalcond[2]=((((-1.0)*r01*x14047))+((x14041*x14042))+((r02*x14040)));
evalcond[3]=((-1.0)+(((-1.0)*x14042*x14044))+((r01*x14046))+((r02*x14041)));
evalcond[4]=(((r22*x14040))+((sj5*sj6))+(((-1.0)*r21*x14047))+(((-1.0)*cj5*x14043))+((r20*x14045)));
evalcond[5]=((((-1.0)*cj5*sj6))+((r10*x14045))+(((-1.0)*r11*x14047))+(((-1.0)*sj5*x14043))+((r12*x14040)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x14048=((1.0)*cj9);
CheckValue<IkReal> x14049 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x14048))+((r11*sj9)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x14049.valid){
continue;
}
CheckValue<IkReal> x14050=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14048))+(((-1.0)*r20*sj9)))),-1);
if(!x14050.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x14049.value)+(((1.5707963267949)*(x14050.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x14051=IKcos(j8);
IkReal x14052=IKsin(j8);
IkReal x14053=(cj9*r00);
IkReal x14054=((1.0)*cj6);
IkReal x14055=((1.0)*x14051);
IkReal x14056=(cj9*x14052);
IkReal x14057=(sj9*x14051);
IkReal x14058=((1.0)*sj9*x14052);
evalcond[0]=((((-1.0)*cj9*r20*x14055))+((r22*x14052))+((r21*x14057)));
evalcond[1]=(((r11*x14057))+(((-1.0)*cj9*r10*x14055))+((r12*x14052)));
evalcond[2]=(((r02*x14051))+((x14052*x14053))+(((-1.0)*r01*x14058)));
evalcond[3]=((-1.0)+(((-1.0)*x14053*x14055))+((r02*x14052))+((r01*x14057)));
evalcond[4]=(((r20*x14056))+(((-1.0)*r21*x14058))+((sj5*sj6))+(((-1.0)*cj5*x14054))+((r22*x14051)));
evalcond[5]=((((-1.0)*cj5*sj6))+((r12*x14051))+((r10*x14056))+(((-1.0)*sj5*x14054))+(((-1.0)*r11*x14058)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x14059=IKPowWithIntegerCheck(IKsign((((r10*sj9))+((cj9*r11)))),-1);
if(!x14059.valid){
continue;
}
CheckValue<IkReal> x14060 = IKatan2WithCheck(IkReal((((r21*sj9))+(((-1.0)*cj9*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x14060.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14059.value)))+(x14060.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x14061=IKcos(j8);
IkReal x14062=IKsin(j8);
IkReal x14063=(cj9*r00);
IkReal x14064=((1.0)*cj6);
IkReal x14065=((1.0)*x14061);
IkReal x14066=(cj9*x14062);
IkReal x14067=(sj9*x14061);
IkReal x14068=((1.0)*sj9*x14062);
evalcond[0]=(((r22*x14062))+((r21*x14067))+(((-1.0)*cj9*r20*x14065)));
evalcond[1]=((((-1.0)*cj9*r10*x14065))+((r11*x14067))+((r12*x14062)));
evalcond[2]=(((r02*x14061))+(((-1.0)*r01*x14068))+((x14062*x14063)));
evalcond[3]=((-1.0)+((r02*x14062))+((r01*x14067))+(((-1.0)*x14063*x14065)));
evalcond[4]=((((-1.0)*cj5*x14064))+((sj5*sj6))+((r22*x14061))+((r20*x14066))+(((-1.0)*r21*x14068)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*sj5*x14064))+(((-1.0)*r11*x14068))+((r10*x14066))+((r12*x14061)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
IkReal x14069=(((r10*sj9))+((cj9*r11)));
j8eval[0]=x14069;
j8eval[1]=((IKabs(r22))+(IKabs((((r21*sj9))+(((-1.0)*cj9*r20))))));
j8eval[2]=IKsign(x14069);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
IkReal x14070=((1.0)*cj9);
IkReal x14071=((((-1.0)*r21*x14070))+(((-1.0)*r20*sj9)));
j8eval[0]=x14071;
j8eval[1]=((IKabs(r12))+(IKabs((((r11*sj9))+(((-1.0)*r10*x14070))))));
j8eval[2]=IKsign(x14071);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
IkReal x14072=cj9*cj9;
IkReal x14073=r01*r01;
IkReal x14074=(cj9*r00);
IkReal x14075=(r01*sj9);
IkReal x14076=((((-1.0)*x14072*x14073))+(((-2.0)*x14074*x14075))+((x14072*(r00*r00)))+(r02*r02)+x14073);
j8eval[0]=x14076;
j8eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x14074))+x14075))));
j8eval[2]=IKsign(x14076);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x14077=cj9*cj9;
IkReal x14078=r01*r01;
IkReal x14079=(cj9*r00);
IkReal x14080=(r01*sj9);
CheckValue<IkReal> x14081=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14077*x14078))+(((-2.0)*x14079*x14080))+(r02*r02)+x14078+((x14077*(r00*r00))))),-1);
if(!x14081.valid){
continue;
}
CheckValue<IkReal> x14082 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x14079))+x14080)),IKFAST_ATAN2_MAGTHRESH);
if(!x14082.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14081.value)))+(x14082.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x14083=IKcos(j8);
IkReal x14084=IKsin(j8);
IkReal x14085=((1.0)*cj6);
IkReal x14086=((1.0)*x14083);
IkReal x14087=(sj9*x14083);
IkReal x14088=(sj9*x14084);
IkReal x14089=(cj9*x14086);
IkReal x14090=((1.0)*cj9*x14084);
evalcond[0]=(((r22*x14084))+((r21*x14087))+(((-1.0)*r20*x14089)));
evalcond[1]=(((r11*x14087))+((r12*x14084))+(((-1.0)*r10*x14089)));
evalcond[2]=((-1.0)+((r01*x14087))+((r02*x14084))+(((-1.0)*r00*x14089)));
evalcond[3]=(((r01*x14088))+(((-1.0)*r02*x14086))+(((-1.0)*r00*x14090)));
evalcond[4]=((((-1.0)*r22*x14086))+((sj5*sj6))+((r21*x14088))+(((-1.0)*cj5*x14085))+(((-1.0)*r20*x14090)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*r12*x14086))+(((-1.0)*sj5*x14085))+((r11*x14088))+(((-1.0)*r10*x14090)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x14091=((1.0)*cj9);
CheckValue<IkReal> x14092=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14091))+(((-1.0)*r20*sj9)))),-1);
if(!x14092.valid){
continue;
}
CheckValue<IkReal> x14093 = IKatan2WithCheck(IkReal((((r11*sj9))+(((-1.0)*r10*x14091)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x14093.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14092.value)))+(x14093.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x14094=IKcos(j8);
IkReal x14095=IKsin(j8);
IkReal x14096=((1.0)*cj6);
IkReal x14097=((1.0)*x14094);
IkReal x14098=(sj9*x14094);
IkReal x14099=(sj9*x14095);
IkReal x14100=(cj9*x14097);
IkReal x14101=((1.0)*cj9*x14095);
evalcond[0]=((((-1.0)*r20*x14100))+((r21*x14098))+((r22*x14095)));
evalcond[1]=((((-1.0)*r10*x14100))+((r12*x14095))+((r11*x14098)));
evalcond[2]=((-1.0)+(((-1.0)*r00*x14100))+((r02*x14095))+((r01*x14098)));
evalcond[3]=((((-1.0)*r00*x14101))+(((-1.0)*r02*x14097))+((r01*x14099)));
evalcond[4]=((((-1.0)*cj5*x14096))+(((-1.0)*r20*x14101))+((sj5*sj6))+(((-1.0)*r22*x14097))+((r21*x14099)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*r10*x14101))+(((-1.0)*sj5*x14096))+(((-1.0)*r12*x14097))+((r11*x14099)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x14102=IKPowWithIntegerCheck(IKsign((((r10*sj9))+((cj9*r11)))),-1);
if(!x14102.valid){
continue;
}
CheckValue<IkReal> x14103 = IKatan2WithCheck(IkReal((((r21*sj9))+(((-1.0)*cj9*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x14103.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14102.value)))+(x14103.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x14104=IKcos(j8);
IkReal x14105=IKsin(j8);
IkReal x14106=((1.0)*cj6);
IkReal x14107=((1.0)*x14104);
IkReal x14108=(sj9*x14104);
IkReal x14109=(sj9*x14105);
IkReal x14110=(cj9*x14107);
IkReal x14111=((1.0)*cj9*x14105);
evalcond[0]=((((-1.0)*r20*x14110))+((r22*x14105))+((r21*x14108)));
evalcond[1]=(((r12*x14105))+(((-1.0)*r10*x14110))+((r11*x14108)));
evalcond[2]=((-1.0)+((r02*x14105))+(((-1.0)*r00*x14110))+((r01*x14108)));
evalcond[3]=((((-1.0)*r00*x14111))+((r01*x14109))+(((-1.0)*r02*x14107)));
evalcond[4]=((((-1.0)*r20*x14111))+((sj5*sj6))+(((-1.0)*r22*x14107))+(((-1.0)*cj5*x14106))+((r21*x14109)));
evalcond[5]=((((-1.0)*cj5*sj6))+(((-1.0)*r12*x14107))+(((-1.0)*sj5*x14106))+(((-1.0)*r10*x14111))+((r11*x14109)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[2];
IkReal x14112=((-1.0)*py);
sj4=1.0;
cj4=0;
j4=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14112);
rxp0_2=(py*r00);
rxp1_0=(r21*x14112);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x14113=(cj9*r00);
IkReal x14114=(r01*sj9);
j8eval[0]=(((sj7*x14113))+(((-1.0)*sj7*x14114)));
j8eval[1]=((((-1.0)*x14113))+x14114);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x14115=((-1.0)*py);
sj4=1.0;
cj4=0;
j4=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14115);
rxp0_2=(py*r00);
rxp1_0=(r21*x14115);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x14116=(cj9*r00);
IkReal x14117=(r01*sj9);
j8eval[0]=((((-1.0)*cj7*x14117))+((cj7*x14116)));
j8eval[1]=((((-1.0)*x14116))+x14117);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
IkReal x14118=((-1.0)*py);
sj4=1.0;
cj4=0;
j4=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14118);
rxp0_2=(py*r00);
rxp1_0=(r21*x14118);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j8eval[0]=((((-1.0)*cj7*r01*sj9))+((cj7*cj9*r00)));
j8eval[1]=r12;
j8eval[2]=sj7;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x14119=((1.0)*sj7);
CheckValue<IkReal> x14120=IKPowWithIntegerCheck(((((-1.0)*cj7*r01*sj9))+((cj7*cj9*r00))),-1);
if(!x14120.valid){
continue;
}
CheckValue<IkReal> x14121=IKPowWithIntegerCheck(r12,-1);
if(!x14121.valid){
continue;
}
CheckValue<IkReal> x14122=IKPowWithIntegerCheck(sj7,-1);
if(!x14122.valid){
continue;
}
if( IKabs(((x14120.value)*(((((-1.0)*cj9*r01*x14119))+(((-1.0)*r00*sj9*x14119)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14121.value)*(x14122.value)*((((cj6*sj5))+((cj5*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14120.value)*(((((-1.0)*cj9*r01*x14119))+(((-1.0)*r00*sj9*x14119))))))+IKsqr(((x14121.value)*(x14122.value)*((((cj6*sj5))+((cj5*sj6))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((x14120.value)*(((((-1.0)*cj9*r01*x14119))+(((-1.0)*r00*sj9*x14119))))), ((x14121.value)*(x14122.value)*((((cj6*sj5))+((cj5*sj6))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x14123=IKcos(j8);
IkReal x14124=IKsin(j8);
IkReal x14125=(cj9*r00);
IkReal x14126=((1.0)*sj9);
IkReal x14127=(cj9*r21);
IkReal x14128=((1.0)*cj7);
IkReal x14129=((1.0)*sj5);
IkReal x14130=(cj9*r20);
IkReal x14131=(sj7*sj9);
IkReal x14132=(cj5*cj6);
IkReal x14133=(cj9*r01);
IkReal x14134=((1.0)*cj5*sj6);
IkReal x14135=(cj6*x14129);
IkReal x14136=((1.0)*x14123);
IkReal x14137=(cj7*x14124);
IkReal x14138=(sj7*x14124);
IkReal x14139=(r12*x14123);
IkReal x14140=(sj9*x14123);
IkReal x14141=(x14134+x14135);
evalcond[0]=(r12*x14124);
evalcond[1]=(((r21*x14140))+(((-1.0)*x14130*x14136)));
evalcond[2]=((((-1.0)*sj6*x14129))+((cj7*x14139))+x14132);
evalcond[3]=((-1.0)+((r01*x14140))+(((-1.0)*x14125*x14136)));
evalcond[4]=((((-1.0)*x14141))+((sj7*x14139)));
evalcond[5]=((((-1.0)*r01*x14126*x14137))+((x14125*x14137))+((r00*x14131))+((sj7*x14133)));
evalcond[6]=((((-1.0)*r01*x14126*x14138))+(((-1.0)*cj7*r00*x14126))+((x14125*x14138))+(((-1.0)*x14128*x14133)));
evalcond[7]=((((-1.0)*r21*x14126*x14137))+((r20*x14131))+((sj7*x14127))+(((-1.0)*x14141))+((x14130*x14137)));
evalcond[8]=((((-1.0)*r21*x14126*x14138))+(((-1.0)*x14132))+((sj5*sj6))+(((-1.0)*cj7*r20*x14126))+(((-1.0)*x14127*x14128))+((x14130*x14138)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x14142=(cj9*r00);
IkReal x14143=((1.0)*sj7);
IkReal x14144=(r01*sj9);
CheckValue<IkReal> x14145=IKPowWithIntegerCheck((((cj7*x14142))+(((-1.0)*cj7*x14144))),-1);
if(!x14145.valid){
continue;
}
CheckValue<IkReal> x14146=IKPowWithIntegerCheck((x14144+(((-1.0)*x14142))),-1);
if(!x14146.valid){
continue;
}
if( IKabs(((x14145.value)*(((((-1.0)*r00*sj9*x14143))+(((-1.0)*cj9*r01*x14143)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x14146.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14145.value)*(((((-1.0)*r00*sj9*x14143))+(((-1.0)*cj9*r01*x14143))))))+IKsqr(x14146.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((x14145.value)*(((((-1.0)*r00*sj9*x14143))+(((-1.0)*cj9*r01*x14143))))), x14146.value);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x14147=IKcos(j8);
IkReal x14148=IKsin(j8);
IkReal x14149=(cj9*r00);
IkReal x14150=((1.0)*sj9);
IkReal x14151=(cj9*r21);
IkReal x14152=((1.0)*cj7);
IkReal x14153=((1.0)*sj5);
IkReal x14154=(cj9*r20);
IkReal x14155=(sj7*sj9);
IkReal x14156=(cj5*cj6);
IkReal x14157=(cj9*r01);
IkReal x14158=((1.0)*cj5*sj6);
IkReal x14159=(cj6*x14153);
IkReal x14160=((1.0)*x14147);
IkReal x14161=(cj7*x14148);
IkReal x14162=(sj7*x14148);
IkReal x14163=(r12*x14147);
IkReal x14164=(sj9*x14147);
IkReal x14165=(x14158+x14159);
evalcond[0]=(r12*x14148);
evalcond[1]=((((-1.0)*x14154*x14160))+((r21*x14164)));
evalcond[2]=((((-1.0)*sj6*x14153))+((cj7*x14163))+x14156);
evalcond[3]=((-1.0)+(((-1.0)*x14149*x14160))+((r01*x14164)));
evalcond[4]=(((sj7*x14163))+(((-1.0)*x14165)));
evalcond[5]=(((sj7*x14157))+((x14149*x14161))+((r00*x14155))+(((-1.0)*r01*x14150*x14161)));
evalcond[6]=(((x14149*x14162))+(((-1.0)*x14152*x14157))+(((-1.0)*r01*x14150*x14162))+(((-1.0)*cj7*r00*x14150)));
evalcond[7]=((((-1.0)*r21*x14150*x14161))+((sj7*x14151))+((x14154*x14161))+(((-1.0)*x14165))+((r20*x14155)));
evalcond[8]=((((-1.0)*x14151*x14152))+(((-1.0)*cj7*r20*x14150))+(((-1.0)*r21*x14150*x14162))+((sj5*sj6))+((x14154*x14162))+(((-1.0)*x14156)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x14166=(cj9*r00);
IkReal x14167=(r01*sj9);
CheckValue<IkReal> x14168=IKPowWithIntegerCheck((((sj7*x14166))+(((-1.0)*sj7*x14167))),-1);
if(!x14168.valid){
continue;
}
CheckValue<IkReal> x14169=IKPowWithIntegerCheck((x14167+(((-1.0)*x14166))),-1);
if(!x14169.valid){
continue;
}
if( IKabs(((x14168.value)*((((cj7*r00*sj9))+((cj7*cj9*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x14169.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14168.value)*((((cj7*r00*sj9))+((cj7*cj9*r01))))))+IKsqr(x14169.value)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((x14168.value)*((((cj7*r00*sj9))+((cj7*cj9*r01))))), x14169.value);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x14170=IKcos(j8);
IkReal x14171=IKsin(j8);
IkReal x14172=(cj9*r00);
IkReal x14173=((1.0)*sj9);
IkReal x14174=(cj9*r21);
IkReal x14175=((1.0)*cj7);
IkReal x14176=((1.0)*sj5);
IkReal x14177=(cj9*r20);
IkReal x14178=(sj7*sj9);
IkReal x14179=(cj5*cj6);
IkReal x14180=(cj9*r01);
IkReal x14181=((1.0)*cj5*sj6);
IkReal x14182=(cj6*x14176);
IkReal x14183=((1.0)*x14170);
IkReal x14184=(cj7*x14171);
IkReal x14185=(sj7*x14171);
IkReal x14186=(r12*x14170);
IkReal x14187=(sj9*x14170);
IkReal x14188=(x14182+x14181);
evalcond[0]=(r12*x14171);
evalcond[1]=((((-1.0)*x14177*x14183))+((r21*x14187)));
evalcond[2]=(((cj7*x14186))+(((-1.0)*sj6*x14176))+x14179);
evalcond[3]=((-1.0)+((r01*x14187))+(((-1.0)*x14172*x14183)));
evalcond[4]=(((sj7*x14186))+(((-1.0)*x14188)));
evalcond[5]=(((r00*x14178))+(((-1.0)*r01*x14173*x14184))+((sj7*x14180))+((x14172*x14184)));
evalcond[6]=((((-1.0)*x14175*x14180))+(((-1.0)*cj7*r00*x14173))+(((-1.0)*r01*x14173*x14185))+((x14172*x14185)));
evalcond[7]=(((x14177*x14184))+(((-1.0)*r21*x14173*x14184))+((r20*x14178))+((sj7*x14174))+(((-1.0)*x14188)));
evalcond[8]=(((x14177*x14185))+(((-1.0)*r21*x14173*x14185))+((sj5*sj6))+(((-1.0)*cj7*r20*x14173))+(((-1.0)*x14179))+(((-1.0)*x14174*x14175)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x14189=cj9*cj9;
IkReal x14190=(cj7*r01);
IkReal x14191=(r00*sj7);
IkReal x14192=((1.0)*r21);
IkReal x14193=(cj7*r00);
IkReal x14194=(cj9*sj9);
IkReal x14195=((1.0)*r22);
IkReal x14196=(r01*sj7);
IkReal x14197=(r20*x14189);
IkReal x14198=((1.0)*r20*x14194);
CheckValue<IkReal> x14199 = IKatan2WithCheck(IkReal(((((-1.0)*x14189*x14191*x14192))+((r21*x14191))+(((-1.0)*x14196*x14197))+(((-1.0)*x14191*x14198))+((r21*x14194*x14196)))),IkReal(((((-1.0)*cj9*x14195*x14196))+(((-1.0)*sj9*x14191*x14195)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14199.valid){
continue;
}
CheckValue<IkReal> x14200=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14189*x14190*x14192))+(((-1.0)*x14192*x14193*x14194))+((x14193*x14197))+((cj7*r02*r22))+((r21*x14190))+(((-1.0)*x14190*x14198)))),-1);
if(!x14200.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x14199.value)+(((1.5707963267949)*(x14200.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x14201=IKcos(j8);
IkReal x14202=IKsin(j8);
IkReal x14203=(cj9*r00);
IkReal x14204=((1.0)*sj9);
IkReal x14205=(cj9*r21);
IkReal x14206=((1.0)*cj7);
IkReal x14207=((1.0)*sj5);
IkReal x14208=(cj9*r20);
IkReal x14209=(cj9*sj7);
IkReal x14210=(cj5*cj6);
IkReal x14211=(sj7*sj9);
IkReal x14212=(cj9*r10);
IkReal x14213=((1.0)*cj5*sj6);
IkReal x14214=(cj6*x14207);
IkReal x14215=((1.0)*x14201);
IkReal x14216=(cj7*x14202);
IkReal x14217=(sj7*x14202);
IkReal x14218=(r12*x14201);
IkReal x14219=(sj7*x14201);
IkReal x14220=(sj9*x14201);
IkReal x14221=(cj7*x14201);
IkReal x14222=(x14213+x14214);
evalcond[0]=(((r21*x14220))+(((-1.0)*x14208*x14215))+((r22*x14202)));
evalcond[1]=((((-1.0)*x14212*x14215))+((r11*x14220))+((r12*x14202)));
evalcond[2]=((-1.0)+((r02*x14202))+((r01*x14220))+(((-1.0)*x14203*x14215)));
evalcond[3]=(((r02*x14221))+(((-1.0)*r01*x14204*x14216))+((r00*x14211))+((r01*x14209))+((x14203*x14216)));
evalcond[4]=((((-1.0)*r01*x14204*x14217))+((x14203*x14217))+((r02*x14219))+(((-1.0)*cj9*r01*x14206))+(((-1.0)*cj7*r00*x14204)));
evalcond[5]=(((cj7*x14218))+(((-1.0)*sj6*x14207))+((r10*x14211))+(((-1.0)*r11*x14204*x14216))+((x14212*x14216))+((r11*x14209))+x14210);
evalcond[6]=((((-1.0)*x14222))+((r22*x14221))+((sj7*x14205))+((x14208*x14216))+((r20*x14211))+(((-1.0)*r21*x14204*x14216)));
evalcond[7]=((((-1.0)*cj7*r20*x14204))+((sj5*sj6))+((r22*x14219))+(((-1.0)*x14205*x14206))+(((-1.0)*x14210))+((x14208*x14217))+(((-1.0)*r21*x14204*x14217)));
evalcond[8]=((((-1.0)*x14222))+(((-1.0)*cj9*r11*x14206))+((r10*x14202*x14209))+(((-1.0)*r11*x14204*x14217))+(((-1.0)*cj7*r10*x14204))+((sj7*x14218)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x14223=((1.0)*cj9);
CheckValue<IkReal> x14224 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x14223))+((r11*sj9)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x14224.valid){
continue;
}
CheckValue<IkReal> x14225=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14223))+(((-1.0)*r20*sj9)))),-1);
if(!x14225.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x14224.value)+(((1.5707963267949)*(x14225.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x14226=IKcos(j8);
IkReal x14227=IKsin(j8);
IkReal x14228=(cj9*r00);
IkReal x14229=((1.0)*sj9);
IkReal x14230=(cj9*r21);
IkReal x14231=((1.0)*cj7);
IkReal x14232=((1.0)*sj5);
IkReal x14233=(cj9*r20);
IkReal x14234=(cj9*sj7);
IkReal x14235=(cj5*cj6);
IkReal x14236=(sj7*sj9);
IkReal x14237=(cj9*r10);
IkReal x14238=((1.0)*cj5*sj6);
IkReal x14239=(cj6*x14232);
IkReal x14240=((1.0)*x14226);
IkReal x14241=(cj7*x14227);
IkReal x14242=(sj7*x14227);
IkReal x14243=(r12*x14226);
IkReal x14244=(sj7*x14226);
IkReal x14245=(sj9*x14226);
IkReal x14246=(cj7*x14226);
IkReal x14247=(x14239+x14238);
evalcond[0]=(((r21*x14245))+((r22*x14227))+(((-1.0)*x14233*x14240)));
evalcond[1]=((((-1.0)*x14237*x14240))+((r11*x14245))+((r12*x14227)));
evalcond[2]=((-1.0)+((r02*x14227))+(((-1.0)*x14228*x14240))+((r01*x14245)));
evalcond[3]=(((x14228*x14241))+((r02*x14246))+((r01*x14234))+(((-1.0)*r01*x14229*x14241))+((r00*x14236)));
evalcond[4]=(((x14228*x14242))+((r02*x14244))+(((-1.0)*r01*x14229*x14242))+(((-1.0)*cj7*r00*x14229))+(((-1.0)*cj9*r01*x14231)));
evalcond[5]=((((-1.0)*sj6*x14232))+(((-1.0)*r11*x14229*x14241))+((x14237*x14241))+((r10*x14236))+((cj7*x14243))+x14235+((r11*x14234)));
evalcond[6]=(((r20*x14236))+(((-1.0)*x14247))+((x14233*x14241))+((sj7*x14230))+(((-1.0)*r21*x14229*x14241))+((r22*x14246)));
evalcond[7]=((((-1.0)*cj7*r20*x14229))+((sj5*sj6))+((x14233*x14242))+(((-1.0)*x14235))+(((-1.0)*r21*x14229*x14242))+((r22*x14244))+(((-1.0)*x14230*x14231)));
evalcond[8]=((((-1.0)*r11*x14229*x14242))+(((-1.0)*cj7*r10*x14229))+(((-1.0)*x14247))+((sj7*x14243))+((r10*x14227*x14234))+(((-1.0)*cj9*r11*x14231)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x14248=IKPowWithIntegerCheck(IKsign((((r10*sj9))+((cj9*r11)))),-1);
if(!x14248.valid){
continue;
}
CheckValue<IkReal> x14249 = IKatan2WithCheck(IkReal((((r21*sj9))+(((-1.0)*cj9*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x14249.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14248.value)))+(x14249.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x14250=IKcos(j8);
IkReal x14251=IKsin(j8);
IkReal x14252=(cj9*r00);
IkReal x14253=((1.0)*sj9);
IkReal x14254=(cj9*r21);
IkReal x14255=((1.0)*cj7);
IkReal x14256=((1.0)*sj5);
IkReal x14257=(cj9*r20);
IkReal x14258=(cj9*sj7);
IkReal x14259=(cj5*cj6);
IkReal x14260=(sj7*sj9);
IkReal x14261=(cj9*r10);
IkReal x14262=((1.0)*cj5*sj6);
IkReal x14263=(cj6*x14256);
IkReal x14264=((1.0)*x14250);
IkReal x14265=(cj7*x14251);
IkReal x14266=(sj7*x14251);
IkReal x14267=(r12*x14250);
IkReal x14268=(sj7*x14250);
IkReal x14269=(sj9*x14250);
IkReal x14270=(cj7*x14250);
IkReal x14271=(x14262+x14263);
evalcond[0]=((((-1.0)*x14257*x14264))+((r21*x14269))+((r22*x14251)));
evalcond[1]=((((-1.0)*x14261*x14264))+((r11*x14269))+((r12*x14251)));
evalcond[2]=((-1.0)+(((-1.0)*x14252*x14264))+((r02*x14251))+((r01*x14269)));
evalcond[3]=(((r00*x14260))+((r02*x14270))+(((-1.0)*r01*x14253*x14265))+((x14252*x14265))+((r01*x14258)));
evalcond[4]=((((-1.0)*cj7*r00*x14253))+((r02*x14268))+(((-1.0)*r01*x14253*x14266))+(((-1.0)*cj9*r01*x14255))+((x14252*x14266)));
evalcond[5]=(((cj7*x14267))+((r11*x14258))+(((-1.0)*r11*x14253*x14265))+(((-1.0)*sj6*x14256))+((x14261*x14265))+((r10*x14260))+x14259);
evalcond[6]=((((-1.0)*r21*x14253*x14265))+(((-1.0)*x14271))+((r20*x14260))+((sj7*x14254))+((x14257*x14265))+((r22*x14270)));
evalcond[7]=((((-1.0)*x14254*x14255))+((sj5*sj6))+(((-1.0)*r21*x14253*x14266))+((x14257*x14266))+(((-1.0)*cj7*r20*x14253))+((r22*x14268))+(((-1.0)*x14259)));
evalcond[8]=(((r10*x14251*x14258))+(((-1.0)*x14271))+((sj7*x14267))+(((-1.0)*cj9*r11*x14255))+(((-1.0)*r11*x14253*x14266))+(((-1.0)*cj7*r10*x14253)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal x14272=(((cj9*r21))+((r20*sj9)));
j8eval[0]=x14272;
j8eval[1]=((IKabs(r12))+(IKabs((((r11*sj9))+(((-1.0)*cj9*r10))))));
j8eval[2]=IKsign(x14272);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal x14273=((1.0)*cj9);
IkReal x14274=((((-1.0)*r10*sj9))+(((-1.0)*r11*x14273)));
j8eval[0]=x14274;
j8eval[1]=((IKabs((((r21*sj9))+(((-1.0)*r20*x14273)))))+(IKabs(r22)));
j8eval[2]=IKsign(x14274);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal x14275=cj9*cj9;
IkReal x14276=(cj7*r01);
IkReal x14277=(cj7*r00);
IkReal x14278=((1.0)*cj9*sj9);
IkReal x14279=(((r20*x14275*x14277))+(((-1.0)*r21*x14275*x14276))+((r21*x14276))+(((-1.0)*r20*x14276*x14278))+(((-1.0)*r21*x14277*x14278))+((cj7*r02*r22)));
j8eval[0]=x14279;
j8eval[1]=IKsign(x14279);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
IkReal x14280=(((cj9*r21))+((r20*sj9)));
j8eval[0]=x14280;
j8eval[1]=((IKabs(r12))+(IKabs((((r11*sj9))+(((-1.0)*cj9*r10))))));
j8eval[2]=IKsign(x14280);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
IkReal x14281=((1.0)*cj9);
IkReal x14282=((((-1.0)*r10*sj9))+(((-1.0)*r11*x14281)));
j8eval[0]=x14282;
j8eval[1]=((IKabs((((r21*sj9))+(((-1.0)*r20*x14281)))))+(IKabs(r22)));
j8eval[2]=IKsign(x14282);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj7=1.0;
cj7=0;
j7=1.5707963267949;
IkReal x14283=cj9*cj9;
IkReal x14284=r01*r01;
IkReal x14285=(r01*sj9);
IkReal x14286=(cj9*r00);
IkReal x14287=(((x14283*x14284))+(((-1.0)*(r02*r02)))+(((-1.0)*x14283*(r00*r00)))+(((-1.0)*x14284))+(((2.0)*x14285*x14286)));
j8eval[0]=x14287;
j8eval[1]=IKsign(x14287);
j8eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x14286))+x14285))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x14288=cj9*cj9;
IkReal x14289=r01*r01;
IkReal x14290=(r01*sj9);
IkReal x14291=(cj9*r00);
CheckValue<IkReal> x14292=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x14290*x14291))+(((-1.0)*x14288*(r00*r00)))+(((-1.0)*x14289))+((x14288*x14289)))),-1);
if(!x14292.valid){
continue;
}
CheckValue<IkReal> x14293 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x14291))+x14290)),IKFAST_ATAN2_MAGTHRESH);
if(!x14293.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14292.value)))+(x14293.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x14294=IKcos(j8);
IkReal x14295=IKsin(j8);
IkReal x14296=(cj9*r00);
IkReal x14297=((1.0)*x14294);
IkReal x14298=(cj9*x14295);
IkReal x14299=(sj9*x14294);
IkReal x14300=((1.0)*sj9*x14295);
evalcond[0]=(((r21*x14299))+((r22*x14295))+(((-1.0)*cj9*r20*x14297)));
evalcond[1]=((((-1.0)*cj9*r10*x14297))+((r12*x14295))+((r11*x14299)));
evalcond[2]=(((r02*x14294))+((x14295*x14296))+(((-1.0)*r01*x14300)));
evalcond[3]=((1.0)+((r02*x14295))+((r01*x14299))+(((-1.0)*x14296*x14297)));
evalcond[4]=(((cj6*sj5))+(((-1.0)*r11*x14300))+((r10*x14298))+((cj5*sj6))+((r12*x14294)));
evalcond[5]=(((r20*x14298))+((sj5*sj6))+(((-1.0)*r21*x14300))+((r22*x14294))+(((-1.0)*cj5*cj6)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x14301=((1.0)*cj9);
CheckValue<IkReal> x14302 = IKatan2WithCheck(IkReal((((r21*sj9))+(((-1.0)*r20*x14301)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x14302.valid){
continue;
}
CheckValue<IkReal> x14303=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj9))+(((-1.0)*r11*x14301)))),-1);
if(!x14303.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x14302.value)+(((1.5707963267949)*(x14303.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x14304=IKcos(j8);
IkReal x14305=IKsin(j8);
IkReal x14306=(cj9*r00);
IkReal x14307=((1.0)*x14304);
IkReal x14308=(cj9*x14305);
IkReal x14309=(sj9*x14304);
IkReal x14310=((1.0)*sj9*x14305);
evalcond[0]=((((-1.0)*cj9*r20*x14307))+((r22*x14305))+((r21*x14309)));
evalcond[1]=(((r11*x14309))+(((-1.0)*cj9*r10*x14307))+((r12*x14305)));
evalcond[2]=(((r02*x14304))+(((-1.0)*r01*x14310))+((x14305*x14306)));
evalcond[3]=((1.0)+((r02*x14305))+(((-1.0)*x14306*x14307))+((r01*x14309)));
evalcond[4]=(((cj6*sj5))+((r12*x14304))+((cj5*sj6))+(((-1.0)*r11*x14310))+((r10*x14308)));
evalcond[5]=(((r20*x14308))+((sj5*sj6))+((r22*x14304))+(((-1.0)*r21*x14310))+(((-1.0)*cj5*cj6)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x14311=IKPowWithIntegerCheck(IKsign((((cj9*r21))+((r20*sj9)))),-1);
if(!x14311.valid){
continue;
}
CheckValue<IkReal> x14312 = IKatan2WithCheck(IkReal((((r11*sj9))+(((-1.0)*cj9*r10)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x14312.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14311.value)))+(x14312.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x14313=IKcos(j8);
IkReal x14314=IKsin(j8);
IkReal x14315=(cj9*r00);
IkReal x14316=((1.0)*x14313);
IkReal x14317=(cj9*x14314);
IkReal x14318=(sj9*x14313);
IkReal x14319=((1.0)*sj9*x14314);
evalcond[0]=((((-1.0)*cj9*r20*x14316))+((r21*x14318))+((r22*x14314)));
evalcond[1]=(((r11*x14318))+(((-1.0)*cj9*r10*x14316))+((r12*x14314)));
evalcond[2]=((((-1.0)*r01*x14319))+((x14314*x14315))+((r02*x14313)));
evalcond[3]=((1.0)+(((-1.0)*x14315*x14316))+((r02*x14314))+((r01*x14318)));
evalcond[4]=(((cj6*sj5))+((cj5*sj6))+(((-1.0)*r11*x14319))+((r12*x14313))+((r10*x14317)));
evalcond[5]=(((sj5*sj6))+((r20*x14317))+(((-1.0)*r21*x14319))+(((-1.0)*cj5*cj6))+((r22*x14313)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
IkReal x14320=(((cj9*r21))+((r20*sj9)));
j8eval[0]=x14320;
j8eval[1]=((IKabs(r12))+(IKabs((((r11*sj9))+(((-1.0)*cj9*r10))))));
j8eval[2]=IKsign(x14320);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
IkReal x14321=((1.0)*cj9);
IkReal x14322=((((-1.0)*r10*sj9))+(((-1.0)*r11*x14321)));
j8eval[0]=x14322;
j8eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x14321))+((r21*sj9))))));
j8eval[2]=IKsign(x14322);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
IkReal x14323=cj9*cj9;
IkReal x14324=r01*r01;
IkReal x14325=(r01*sj9);
IkReal x14326=(cj9*r00);
IkReal x14327=((((-1.0)*x14323*(r00*r00)))+(((-1.0)*(r02*r02)))+(((2.0)*x14325*x14326))+((x14323*x14324))+(((-1.0)*x14324)));
j8eval[0]=x14327;
j8eval[1]=IKsign(x14327);
j8eval[2]=((IKabs(r02))+(IKabs((x14325+(((-1.0)*x14326))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x14328=cj9*cj9;
IkReal x14329=r01*r01;
IkReal x14330=(r01*sj9);
IkReal x14331=(cj9*r00);
CheckValue<IkReal> x14332=IKPowWithIntegerCheck(IKsign((((x14328*x14329))+(((-1.0)*(r02*r02)))+(((-1.0)*x14328*(r00*r00)))+(((2.0)*x14330*x14331))+(((-1.0)*x14329)))),-1);
if(!x14332.valid){
continue;
}
CheckValue<IkReal> x14333 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*x14331))+x14330)),IKFAST_ATAN2_MAGTHRESH);
if(!x14333.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14332.value)))+(x14333.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x14334=IKcos(j8);
IkReal x14335=IKsin(j8);
IkReal x14336=((1.0)*x14334);
IkReal x14337=(sj9*x14334);
IkReal x14338=(sj9*x14335);
IkReal x14339=(cj9*x14336);
IkReal x14340=((1.0)*cj9*x14335);
evalcond[0]=((((-1.0)*r20*x14339))+((r22*x14335))+((r21*x14337)));
evalcond[1]=(((r11*x14337))+((r12*x14335))+(((-1.0)*r10*x14339)));
evalcond[2]=((1.0)+((r02*x14335))+((r01*x14337))+(((-1.0)*r00*x14339)));
evalcond[3]=((((-1.0)*r02*x14336))+((r01*x14338))+(((-1.0)*r00*x14340)));
evalcond[4]=(((cj6*sj5))+((r11*x14338))+(((-1.0)*r12*x14336))+((cj5*sj6))+(((-1.0)*r10*x14340)));
evalcond[5]=((((-1.0)*r22*x14336))+((sj5*sj6))+(((-1.0)*r20*x14340))+(((-1.0)*cj5*cj6))+((r21*x14338)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x14341=((1.0)*cj9);
CheckValue<IkReal> x14342 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x14341))+((r21*sj9)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x14342.valid){
continue;
}
CheckValue<IkReal> x14343=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14341))+(((-1.0)*r10*sj9)))),-1);
if(!x14343.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x14342.value)+(((1.5707963267949)*(x14343.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x14344=IKcos(j8);
IkReal x14345=IKsin(j8);
IkReal x14346=((1.0)*x14344);
IkReal x14347=(sj9*x14344);
IkReal x14348=(sj9*x14345);
IkReal x14349=(cj9*x14346);
IkReal x14350=((1.0)*cj9*x14345);
evalcond[0]=(((r21*x14347))+(((-1.0)*r20*x14349))+((r22*x14345)));
evalcond[1]=(((r11*x14347))+((r12*x14345))+(((-1.0)*r10*x14349)));
evalcond[2]=((1.0)+((r01*x14347))+((r02*x14345))+(((-1.0)*r00*x14349)));
evalcond[3]=(((r01*x14348))+(((-1.0)*r00*x14350))+(((-1.0)*r02*x14346)));
evalcond[4]=((((-1.0)*r12*x14346))+((cj6*sj5))+((cj5*sj6))+((r11*x14348))+(((-1.0)*r10*x14350)));
evalcond[5]=(((sj5*sj6))+((r21*x14348))+(((-1.0)*r20*x14350))+(((-1.0)*r22*x14346))+(((-1.0)*cj5*cj6)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x14351=IKPowWithIntegerCheck(IKsign((((cj9*r21))+((r20*sj9)))),-1);
if(!x14351.valid){
continue;
}
CheckValue<IkReal> x14352 = IKatan2WithCheck(IkReal((((r11*sj9))+(((-1.0)*cj9*r10)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x14352.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14351.value)))+(x14352.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x14353=IKcos(j8);
IkReal x14354=IKsin(j8);
IkReal x14355=((1.0)*x14353);
IkReal x14356=(sj9*x14353);
IkReal x14357=(sj9*x14354);
IkReal x14358=(cj9*x14355);
IkReal x14359=((1.0)*cj9*x14354);
evalcond[0]=((((-1.0)*r20*x14358))+((r21*x14356))+((r22*x14354)));
evalcond[1]=(((r12*x14354))+((r11*x14356))+(((-1.0)*r10*x14358)));
evalcond[2]=((1.0)+((r02*x14354))+((r01*x14356))+(((-1.0)*r00*x14358)));
evalcond[3]=((((-1.0)*r02*x14355))+((r01*x14357))+(((-1.0)*r00*x14359)));
evalcond[4]=(((cj6*sj5))+((r11*x14357))+((cj5*sj6))+(((-1.0)*r12*x14355))+(((-1.0)*r10*x14359)));
evalcond[5]=(((sj5*sj6))+(((-1.0)*r22*x14355))+(((-1.0)*r20*x14359))+(((-1.0)*cj5*cj6))+((r21*x14357)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14360=((-1.0)*r10);
IkReal x14362 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x14362)==0){
continue;
}
IkReal x14361=pow(x14362,-0.5);
CheckValue<IkReal> x14363 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x14360),IKFAST_ATAN2_MAGTHRESH);
if(!x14363.valid){
continue;
}
IkReal gconst54=((-1.0)*(x14363.value));
IkReal gconst55=(r11*x14361);
IkReal gconst56=(x14360*x14361);
CheckValue<IkReal> x14364 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x14364.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14364.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x14365=((-1.0)*r10);
IkReal x14366=x14361;
CheckValue<IkReal> x14368 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x14365),IKFAST_ATAN2_MAGTHRESH);
if(!x14368.valid){
continue;
}
IkReal x14367=((-1.0)*(x14368.value));
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj9=gconst55;
cj9=gconst56;
j9=x14367;
IkReal gconst54=x14367;
IkReal gconst55=(r11*x14366);
IkReal gconst56=(x14365*x14366);
j8eval[0]=1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
IkReal x14369=((-1.0)*r10);
IkReal x14370=x14361;
CheckValue<IkReal> x14372 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x14369),IKFAST_ATAN2_MAGTHRESH);
if(!x14372.valid){
continue;
}
IkReal x14371=((-1.0)*(x14372.value));
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj9=gconst55;
cj9=gconst56;
j9=x14371;
IkReal gconst54=x14371;
IkReal gconst55=(r11*x14370);
IkReal gconst56=(x14369*x14370);
CheckValue<IkReal> x14380=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x14380.valid){
continue;
}
IkReal x14373=x14380.value;
IkReal x14374=(sj7*x14373);
IkReal x14375=(r01*x14374);
IkReal x14376=(r20*x14374);
IkReal x14377=(r21*x14374);
IkReal x14378=(r00*x14374);
IkReal x14379=(r10*r11*x14374);
j8eval[0]=IKsign((((r00*x14376*(r10*r10)))+((r21*x14375*(r11*r11)))+((r10*r11*r20*x14375))+((r00*r10*r11*x14377))+((r02*r22*sj7))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
IkReal x14381=((-1.0)*r10);
IkReal x14382=x14361;
CheckValue<IkReal> x14384 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x14381),IKFAST_ATAN2_MAGTHRESH);
if(!x14384.valid){
continue;
}
IkReal x14383=((-1.0)*(x14384.value));
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj9=gconst55;
cj9=gconst56;
j9=x14383;
IkReal gconst54=x14383;
IkReal gconst55=(r11*x14382);
IkReal gconst56=(x14381*x14382);
CheckValue<IkReal> x14392=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x14392.valid){
continue;
}
IkReal x14385=x14392.value;
IkReal x14386=(cj7*x14385);
IkReal x14387=(r21*x14386);
IkReal x14388=(r01*x14386);
IkReal x14389=(r00*x14386);
IkReal x14390=(r20*x14386);
IkReal x14391=(r10*r11*x14386);
j8eval[0]=IKsign((((r10*r11*r20*x14388))+((r01*x14387*(r11*r11)))+((r00*r10*r11*x14387))+((cj7*r02*r22))+((r20*x14389*(r10*r10)))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x14393=gconst55*gconst55;
IkReal x14394=gconst56*gconst56;
IkReal x14395=(r01*r21);
IkReal x14396=(gconst55*sj7);
IkReal x14397=(cj7*r00);
IkReal x14398=((1.0)*r00);
IkReal x14399=(gconst56*r20);
IkReal x14400=((1.0)*gconst55);
IkReal x14401=((1.0)*r01*sj7);
IkReal x14402=(r20*x14394);
CheckValue<IkReal> x14403=IKPowWithIntegerCheck(IKsign((((cj7*x14393*x14395))+((cj7*r02*r22))+(((-1.0)*gconst56*r21*x14397*x14400))+(((-1.0)*cj7*r01*x14399*x14400))+((x14397*x14402)))),-1);
if(!x14403.valid){
continue;
}
CheckValue<IkReal> x14404 = IKatan2WithCheck(IkReal(((((-1.0)*x14401*x14402))+((r00*r21*sj7*x14393))+(((-1.0)*x14396*x14398*x14399))+((gconst56*x14395*x14396)))),IkReal(((((-1.0)*r22*x14396*x14398))+(((-1.0)*gconst56*r22*x14401)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14404.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14403.value)))+(x14404.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x14405=IKcos(j8);
IkReal x14406=IKsin(j8);
IkReal x14407=(sj5*sj6);
IkReal x14408=(gconst55*sj7);
IkReal x14409=((1.0)*cj6);
IkReal x14410=(cj5*sj6);
IkReal x14411=(gconst56*r10);
IkReal x14412=((1.0)*r11);
IkReal x14413=(gconst56*r20);
IkReal x14414=(gconst56*r00);
IkReal x14415=((1.0)*gconst55);
IkReal x14416=(gconst56*sj7);
IkReal x14417=(cj5*x14409);
IkReal x14418=(sj7*x14405);
IkReal x14419=(gconst55*x14405);
IkReal x14420=((1.0)*cj7*gconst56);
IkReal x14421=(cj7*x14405);
IkReal x14422=((1.0)*x14405);
IkReal x14423=(cj7*x14406);
IkReal x14424=((1.0)*x14406);
IkReal x14425=(x14406*x14416);
evalcond[0]=((((-1.0)*x14413*x14422))+((r21*x14419))+((r22*x14406)));
evalcond[1]=(((r12*x14406))+((r11*x14419))+(((-1.0)*x14411*x14422)));
evalcond[2]=((1.0)+((r02*x14406))+((r01*x14419))+(((-1.0)*x14414*x14422)));
evalcond[3]=(((x14414*x14423))+((r00*x14408))+((r01*x14416))+((r02*x14421))+(((-1.0)*r01*x14415*x14423)));
evalcond[4]=(((sj7*x14406*x14414))+((r02*x14418))+(((-1.0)*r01*x14408*x14424))+(((-1.0)*r01*x14420))+(((-1.0)*cj7*r00*x14415)));
evalcond[5]=(((r10*x14408))+(((-1.0)*x14417))+(((-1.0)*gconst55*x14412*x14423))+((r11*x14416))+((x14411*x14423))+((r12*x14421))+x14407);
evalcond[6]=(((r21*x14416))+(((-1.0)*x14410))+(((-1.0)*sj5*x14409))+(((-1.0)*r21*x14415*x14423))+((r22*x14421))+((x14413*x14423))+((r20*x14408)));
evalcond[7]=(((cj6*sj5))+((r12*x14418))+((sj7*x14406*x14411))+(((-1.0)*cj7*r10*x14415))+(((-1.0)*cj7*gconst56*x14412))+x14410+(((-1.0)*x14406*x14408*x14412)));
evalcond[8]=((((-1.0)*x14417))+((sj7*x14406*x14413))+(((-1.0)*cj7*r20*x14415))+((r22*x14418))+(((-1.0)*r21*x14408*x14424))+x14407+(((-1.0)*r21*x14420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x14426=gconst56*gconst56;
IkReal x14427=gconst55*gconst55;
IkReal x14428=(cj7*r20);
IkReal x14429=((1.0)*cj7);
IkReal x14430=(r01*sj7);
IkReal x14431=(gconst56*r01);
IkReal x14432=(cj7*r22);
IkReal x14433=(gconst55*gconst56*r00);
IkReal x14434=(r21*x14427);
CheckValue<IkReal> x14435 = IKatan2WithCheck(IkReal((((x14428*x14433))+((r01*x14426*x14428))+(((-1.0)*r00*x14429*x14434))+(((-1.0)*gconst55*r21*x14429*x14431)))),IkReal((((gconst55*r00*x14432))+((x14431*x14432)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14435.valid){
continue;
}
CheckValue<IkReal> x14436=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*sj7*x14433))+(((-1.0)*gconst55*gconst56*r20*x14430))+((x14430*x14434))+((r00*r20*sj7*x14426))+((r02*r22*sj7)))),-1);
if(!x14436.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x14435.value)+(((1.5707963267949)*(x14436.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x14437=IKcos(j8);
IkReal x14438=IKsin(j8);
IkReal x14439=(sj5*sj6);
IkReal x14440=(gconst55*sj7);
IkReal x14441=((1.0)*cj6);
IkReal x14442=(cj5*sj6);
IkReal x14443=(gconst56*r10);
IkReal x14444=((1.0)*r11);
IkReal x14445=(gconst56*r20);
IkReal x14446=(gconst56*r00);
IkReal x14447=((1.0)*gconst55);
IkReal x14448=(gconst56*sj7);
IkReal x14449=(cj5*x14441);
IkReal x14450=(sj7*x14437);
IkReal x14451=(gconst55*x14437);
IkReal x14452=((1.0)*cj7*gconst56);
IkReal x14453=(cj7*x14437);
IkReal x14454=((1.0)*x14437);
IkReal x14455=(cj7*x14438);
IkReal x14456=((1.0)*x14438);
IkReal x14457=(x14438*x14448);
evalcond[0]=(((r22*x14438))+(((-1.0)*x14445*x14454))+((r21*x14451)));
evalcond[1]=((((-1.0)*x14443*x14454))+((r11*x14451))+((r12*x14438)));
evalcond[2]=((1.0)+(((-1.0)*x14446*x14454))+((r01*x14451))+((r02*x14438)));
evalcond[3]=(((r01*x14448))+((r00*x14440))+((x14446*x14455))+(((-1.0)*r01*x14447*x14455))+((r02*x14453)));
evalcond[4]=((((-1.0)*cj7*r00*x14447))+(((-1.0)*r01*x14440*x14456))+((sj7*x14438*x14446))+(((-1.0)*r01*x14452))+((r02*x14450)));
evalcond[5]=((((-1.0)*x14449))+((r12*x14453))+((r10*x14440))+((r11*x14448))+(((-1.0)*gconst55*x14444*x14455))+x14439+((x14443*x14455)));
evalcond[6]=((((-1.0)*sj5*x14441))+((r20*x14440))+(((-1.0)*r21*x14447*x14455))+(((-1.0)*x14442))+((x14445*x14455))+((r22*x14453))+((r21*x14448)));
evalcond[7]=(((cj6*sj5))+((r12*x14450))+(((-1.0)*cj7*gconst56*x14444))+((sj7*x14438*x14443))+x14442+(((-1.0)*cj7*r10*x14447))+(((-1.0)*x14438*x14440*x14444)));
evalcond[8]=((((-1.0)*r21*x14440*x14456))+(((-1.0)*cj7*r20*x14447))+(((-1.0)*x14449))+((sj7*x14438*x14445))+x14439+((r22*x14450))+(((-1.0)*r21*x14452)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x14458=IKPowWithIntegerCheck(IKsign((((gconst56*r21))+((gconst55*r20)))),-1);
if(!x14458.valid){
continue;
}
CheckValue<IkReal> x14459 = IKatan2WithCheck(IkReal(((((-1.0)*gconst56*r10))+((gconst55*r11)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x14459.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14458.value)))+(x14459.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x14460=IKcos(j8);
IkReal x14461=IKsin(j8);
IkReal x14462=(sj5*sj6);
IkReal x14463=(gconst55*sj7);
IkReal x14464=((1.0)*cj6);
IkReal x14465=(cj5*sj6);
IkReal x14466=(gconst56*r10);
IkReal x14467=((1.0)*r11);
IkReal x14468=(gconst56*r20);
IkReal x14469=(gconst56*r00);
IkReal x14470=((1.0)*gconst55);
IkReal x14471=(gconst56*sj7);
IkReal x14472=(cj5*x14464);
IkReal x14473=(sj7*x14460);
IkReal x14474=(gconst55*x14460);
IkReal x14475=((1.0)*cj7*gconst56);
IkReal x14476=(cj7*x14460);
IkReal x14477=((1.0)*x14460);
IkReal x14478=(cj7*x14461);
IkReal x14479=((1.0)*x14461);
IkReal x14480=(x14461*x14471);
evalcond[0]=(((r21*x14474))+((r22*x14461))+(((-1.0)*x14468*x14477)));
evalcond[1]=(((r11*x14474))+(((-1.0)*x14466*x14477))+((r12*x14461)));
evalcond[2]=((1.0)+((r01*x14474))+((r02*x14461))+(((-1.0)*x14469*x14477)));
evalcond[3]=((((-1.0)*r01*x14470*x14478))+((r00*x14463))+((r01*x14471))+((x14469*x14478))+((r02*x14476)));
evalcond[4]=((((-1.0)*r01*x14475))+((sj7*x14461*x14469))+((r02*x14473))+(((-1.0)*r01*x14463*x14479))+(((-1.0)*cj7*r00*x14470)));
evalcond[5]=((((-1.0)*gconst55*x14467*x14478))+((r10*x14463))+((r11*x14471))+x14462+((r12*x14476))+(((-1.0)*x14472))+((x14466*x14478)));
evalcond[6]=((((-1.0)*sj5*x14464))+((r21*x14471))+((r22*x14476))+(((-1.0)*x14465))+(((-1.0)*r21*x14470*x14478))+((x14468*x14478))+((r20*x14463)));
evalcond[7]=(((cj6*sj5))+(((-1.0)*cj7*r10*x14470))+((sj7*x14461*x14466))+x14465+((r12*x14473))+(((-1.0)*cj7*gconst56*x14467))+(((-1.0)*x14461*x14463*x14467)));
evalcond[8]=(((sj7*x14461*x14468))+(((-1.0)*r21*x14463*x14479))+((r22*x14473))+x14462+(((-1.0)*cj7*r20*x14470))+(((-1.0)*r21*x14475))+(((-1.0)*x14472)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14481=((-1.0)*r11);
IkReal x14483 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x14483)==0){
continue;
}
IkReal x14482=pow(x14483,-0.5);
CheckValue<IkReal> x14484 = IKatan2WithCheck(IkReal(x14481),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x14484.valid){
continue;
}
IkReal gconst57=((3.14159265358979)+(((-1.0)*(x14484.value))));
IkReal gconst58=(x14481*x14482);
IkReal gconst59=((1.0)*r10*x14482);
CheckValue<IkReal> x14485 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x14485.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14485.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x14486=((-1.0)*r11);
CheckValue<IkReal> x14489 = IKatan2WithCheck(IkReal(x14486),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x14489.valid){
continue;
}
IkReal x14487=((1.0)*(x14489.value));
IkReal x14488=x14482;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj9=gconst58;
cj9=gconst59;
j9=((3.14159265)+(((-1.0)*x14487)));
IkReal gconst57=((3.14159265358979)+(((-1.0)*x14487)));
IkReal gconst58=(x14486*x14488);
IkReal gconst59=((1.0)*r10*x14488);
j8eval[0]=1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[4];
IkReal x14490=((-1.0)*r11);
CheckValue<IkReal> x14493 = IKatan2WithCheck(IkReal(x14490),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x14493.valid){
continue;
}
IkReal x14491=((1.0)*(x14493.value));
IkReal x14492=x14482;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj9=gconst58;
cj9=gconst59;
j9=((3.14159265)+(((-1.0)*x14491)));
IkReal gconst57=((3.14159265358979)+(((-1.0)*x14491)));
IkReal gconst58=(x14490*x14492);
IkReal gconst59=((1.0)*r10*x14492);
j8eval[0]=0;
j8eval[1]=0;
j8eval[2]=r22;
j8eval[3]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  )
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x14494=gconst58*gconst58;
IkReal x14495=gconst59*gconst59;
IkReal x14496=(r01*sj7);
IkReal x14497=(gconst58*gconst59);
IkReal x14498=((1.0)*r20);
IkReal x14499=((1.0)*r22);
IkReal x14500=(cj7*r01);
IkReal x14501=(r00*sj7);
IkReal x14502=(cj7*r00);
IkReal x14503=(r21*x14494);
CheckValue<IkReal> x14504=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14497*x14498*x14500))+(((-1.0)*r21*x14497*x14502))+((x14500*x14503))+((cj7*r02*r22))+((r20*x14495*x14502)))),-1);
if(!x14504.valid){
continue;
}
CheckValue<IkReal> x14505 = IKatan2WithCheck(IkReal(((((-1.0)*x14497*x14498*x14501))+((x14501*x14503))+((r21*x14496*x14497))+(((-1.0)*x14495*x14496*x14498)))),IkReal(((((-1.0)*gconst59*x14496*x14499))+(((-1.0)*gconst58*x14499*x14501)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14505.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14504.value)))+(x14505.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x14506=IKcos(j8);
IkReal x14507=IKsin(j8);
IkReal x14508=(sj5*sj6);
IkReal x14509=(gconst58*r11);
IkReal x14510=((1.0)*cj6);
IkReal x14511=(gconst59*r00);
IkReal x14512=(gconst58*r21);
IkReal x14513=(gconst59*r20);
IkReal x14514=(gconst59*sj7);
IkReal x14515=(gconst58*sj7);
IkReal x14516=((1.0)*cj7);
IkReal x14517=(gconst58*r01);
IkReal x14518=(gconst59*r10);
IkReal x14519=(cj5*sj6);
IkReal x14520=(cj5*x14510);
IkReal x14521=(sj7*x14506);
IkReal x14522=((1.0)*x14506);
IkReal x14523=((1.0)*x14507);
IkReal x14524=(cj7*x14507);
IkReal x14525=(cj7*x14506);
IkReal x14526=(sj7*x14507);
evalcond[0]=(((r22*x14507))+(((-1.0)*x14513*x14522))+((x14506*x14512)));
evalcond[1]=(((x14506*x14509))+(((-1.0)*x14518*x14522))+((r12*x14507)));
evalcond[2]=((1.0)+((r02*x14507))+(((-1.0)*x14511*x14522))+((x14506*x14517)));
evalcond[3]=(((r00*x14515))+((r01*x14514))+(((-1.0)*x14507*x14516*x14517))+((x14511*x14524))+((r02*x14525)));
evalcond[4]=((((-1.0)*gconst59*r01*x14516))+(((-1.0)*r01*x14515*x14523))+(((-1.0)*gconst58*r00*x14516))+((x14511*x14526))+((r02*x14521)));
evalcond[5]=((((-1.0)*x14507*x14509*x14516))+((r11*x14514))+((x14518*x14524))+((r12*x14525))+(((-1.0)*x14520))+x14508+((r10*x14515)));
evalcond[6]=(((r22*x14525))+(((-1.0)*x14507*x14512*x14516))+((r20*x14515))+((x14513*x14524))+((r21*x14514))+(((-1.0)*x14519))+(((-1.0)*sj5*x14510)));
evalcond[7]=(((cj6*sj5))+((r10*x14507*x14514))+((r12*x14521))+x14519+(((-1.0)*gconst58*r10*x14516))+(((-1.0)*sj7*x14509*x14523))+(((-1.0)*gconst59*r11*x14516)));
evalcond[8]=(((r22*x14521))+(((-1.0)*x14520))+x14508+((x14513*x14526))+(((-1.0)*gconst59*r21*x14516))+(((-1.0)*gconst58*r20*x14516))+(((-1.0)*sj7*x14512*x14523)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x14527=((1.0)*gconst59);
CheckValue<IkReal> x14528=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst58*r10))+(((-1.0)*r11*x14527)))),-1);
if(!x14528.valid){
continue;
}
CheckValue<IkReal> x14529 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x14527))+((gconst58*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x14529.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14528.value)))+(x14529.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x14530=IKcos(j8);
IkReal x14531=IKsin(j8);
IkReal x14532=(sj5*sj6);
IkReal x14533=(gconst58*r11);
IkReal x14534=((1.0)*cj6);
IkReal x14535=(gconst59*r00);
IkReal x14536=(gconst58*r21);
IkReal x14537=(gconst59*r20);
IkReal x14538=(gconst59*sj7);
IkReal x14539=(gconst58*sj7);
IkReal x14540=((1.0)*cj7);
IkReal x14541=(gconst58*r01);
IkReal x14542=(gconst59*r10);
IkReal x14543=(cj5*sj6);
IkReal x14544=(cj5*x14534);
IkReal x14545=(sj7*x14530);
IkReal x14546=((1.0)*x14530);
IkReal x14547=((1.0)*x14531);
IkReal x14548=(cj7*x14531);
IkReal x14549=(cj7*x14530);
IkReal x14550=(sj7*x14531);
evalcond[0]=(((r22*x14531))+((x14530*x14536))+(((-1.0)*x14537*x14546)));
evalcond[1]=(((r12*x14531))+(((-1.0)*x14542*x14546))+((x14530*x14533)));
evalcond[2]=((1.0)+(((-1.0)*x14535*x14546))+((r02*x14531))+((x14530*x14541)));
evalcond[3]=(((r02*x14549))+((r00*x14539))+((r01*x14538))+((x14535*x14548))+(((-1.0)*x14531*x14540*x14541)));
evalcond[4]=((((-1.0)*gconst58*r00*x14540))+(((-1.0)*r01*x14539*x14547))+((r02*x14545))+((x14535*x14550))+(((-1.0)*gconst59*r01*x14540)));
evalcond[5]=(((r12*x14549))+((r11*x14538))+((x14542*x14548))+x14532+(((-1.0)*x14531*x14533*x14540))+(((-1.0)*x14544))+((r10*x14539)));
evalcond[6]=((((-1.0)*x14531*x14536*x14540))+(((-1.0)*sj5*x14534))+(((-1.0)*x14543))+((r21*x14538))+((r22*x14549))+((r20*x14539))+((x14537*x14548)));
evalcond[7]=(((r12*x14545))+((r10*x14531*x14538))+((cj6*sj5))+(((-1.0)*gconst58*r10*x14540))+(((-1.0)*gconst59*r11*x14540))+x14543+(((-1.0)*sj7*x14533*x14547)));
evalcond[8]=((((-1.0)*gconst58*r20*x14540))+((x14537*x14550))+(((-1.0)*gconst59*r21*x14540))+((r22*x14545))+x14532+(((-1.0)*sj7*x14536*x14547))+(((-1.0)*x14544)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x14551=IKPowWithIntegerCheck(IKsign((((gconst59*r21))+((gconst58*r20)))),-1);
if(!x14551.valid){
continue;
}
CheckValue<IkReal> x14552 = IKatan2WithCheck(IkReal((((gconst58*r11))+(((-1.0)*gconst59*r10)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x14552.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14551.value)))+(x14552.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x14553=IKcos(j8);
IkReal x14554=IKsin(j8);
IkReal x14555=(sj5*sj6);
IkReal x14556=(gconst58*r11);
IkReal x14557=((1.0)*cj6);
IkReal x14558=(gconst59*r00);
IkReal x14559=(gconst58*r21);
IkReal x14560=(gconst59*r20);
IkReal x14561=(gconst59*sj7);
IkReal x14562=(gconst58*sj7);
IkReal x14563=((1.0)*cj7);
IkReal x14564=(gconst58*r01);
IkReal x14565=(gconst59*r10);
IkReal x14566=(cj5*sj6);
IkReal x14567=(cj5*x14557);
IkReal x14568=(sj7*x14553);
IkReal x14569=((1.0)*x14553);
IkReal x14570=((1.0)*x14554);
IkReal x14571=(cj7*x14554);
IkReal x14572=(cj7*x14553);
IkReal x14573=(sj7*x14554);
evalcond[0]=((((-1.0)*x14560*x14569))+((x14553*x14559))+((r22*x14554)));
evalcond[1]=((((-1.0)*x14565*x14569))+((r12*x14554))+((x14553*x14556)));
evalcond[2]=((1.0)+((r02*x14554))+(((-1.0)*x14558*x14569))+((x14553*x14564)));
evalcond[3]=(((r01*x14561))+((r02*x14572))+((x14558*x14571))+(((-1.0)*x14554*x14563*x14564))+((r00*x14562)));
evalcond[4]=((((-1.0)*r01*x14562*x14570))+(((-1.0)*gconst59*r01*x14563))+((r02*x14568))+(((-1.0)*gconst58*r00*x14563))+((x14558*x14573)));
evalcond[5]=((((-1.0)*x14554*x14556*x14563))+(((-1.0)*x14567))+x14555+((r11*x14561))+((r10*x14562))+((r12*x14572))+((x14565*x14571)));
evalcond[6]=(((r21*x14561))+((x14560*x14571))+((r20*x14562))+(((-1.0)*x14554*x14559*x14563))+(((-1.0)*sj5*x14557))+(((-1.0)*x14566))+((r22*x14572)));
evalcond[7]=(((r10*x14554*x14561))+((cj6*sj5))+(((-1.0)*gconst58*r10*x14563))+x14566+(((-1.0)*sj7*x14556*x14570))+(((-1.0)*gconst59*r11*x14563))+((r12*x14568)));
evalcond[8]=(((x14560*x14573))+(((-1.0)*gconst58*r20*x14563))+(((-1.0)*x14567))+x14555+(((-1.0)*sj7*x14559*x14570))+((r22*x14568))+(((-1.0)*gconst59*r21*x14563)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14575 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14575)==0){
continue;
}
IkReal x14574=pow(x14575,-0.5);
CheckValue<IkReal> x14576 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14576.valid){
continue;
}
IkReal gconst60=((-1.0)*(x14576.value));
IkReal gconst61=((-1.0)*r21*x14574);
IkReal gconst62=(r20*x14574);
CheckValue<IkReal> x14577 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14577.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14577.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
CheckValue<IkReal> x14580 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14580.valid){
continue;
}
IkReal x14578=((-1.0)*(x14580.value));
IkReal x14579=x14574;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj9=gconst61;
cj9=gconst62;
j9=x14578;
IkReal gconst60=x14578;
IkReal gconst61=((-1.0)*r21*x14579);
IkReal gconst62=(r20*x14579);
j8eval[0]=1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
CheckValue<IkReal> x14583 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14583.valid){
continue;
}
IkReal x14581=((-1.0)*(x14583.value));
IkReal x14582=x14574;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj9=gconst61;
cj9=gconst62;
j9=x14581;
IkReal gconst60=x14581;
IkReal gconst61=((-1.0)*r21*x14582);
IkReal gconst62=(r20*x14582);
CheckValue<IkReal> x14591=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x14591.valid){
continue;
}
IkReal x14584=x14591.value;
IkReal x14585=(sj7*x14584);
IkReal x14586=(r11*x14585);
IkReal x14587=(r00*x14585);
IkReal x14588=(r01*x14585);
IkReal x14589=(r10*x14585);
IkReal x14590=(r20*r21*x14585);
j8eval[0]=IKsign((((r02*r12*sj7))+((r01*x14586*(r21*r21)))+((r00*r20*r21*x14586))+((r10*x14587*(r20*r20)))+((r10*r20*r21*x14588))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
CheckValue<IkReal> x14594 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14594.valid){
continue;
}
IkReal x14592=((-1.0)*(x14594.value));
IkReal x14593=x14574;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj9=gconst61;
cj9=gconst62;
j9=x14592;
IkReal gconst60=x14592;
IkReal gconst61=((-1.0)*r21*x14593);
IkReal gconst62=(r20*x14593);
CheckValue<IkReal> x14602=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x14602.valid){
continue;
}
IkReal x14595=x14602.value;
IkReal x14596=(cj7*x14595);
IkReal x14597=(r10*x14596);
IkReal x14598=(r00*x14596);
IkReal x14599=(r01*x14596);
IkReal x14600=(r11*x14596);
IkReal x14601=(r20*r21*x14596);
j8eval[0]=IKsign((((r11*x14599*(r21*r21)))+((r00*x14597*(r20*r20)))+((r11*r20*r21*x14598))+((cj7*r02*r12))+((r01*r20*r21*x14597))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x14603=gconst61*gconst61;
IkReal x14604=gconst62*gconst62;
IkReal x14605=((1.0)*r10);
IkReal x14606=(r11*sj7);
IkReal x14607=(gconst61*r00);
IkReal x14608=(cj7*r11);
IkReal x14609=(gconst61*gconst62*r01);
IkReal x14610=((1.0)*r12*sj7);
CheckValue<IkReal> x14611 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj7*x14604*x14605))+((x14606*x14609))+((r00*x14603*x14606))+(((-1.0)*gconst62*sj7*x14605*x14607)))),IkReal(((((-1.0)*gconst62*r01*x14610))+(((-1.0)*x14607*x14610)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14611.valid){
continue;
}
CheckValue<IkReal> x14612=IKPowWithIntegerCheck(IKsign((((r01*x14603*x14608))+(((-1.0)*gconst62*x14607*x14608))+(((-1.0)*cj7*x14605*x14609))+((cj7*r02*r12))+((cj7*r00*r10*x14604)))),-1);
if(!x14612.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x14611.value)+(((1.5707963267949)*(x14612.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x14613=IKcos(j8);
IkReal x14614=IKsin(j8);
IkReal x14615=(sj5*sj6);
IkReal x14616=(gconst61*sj7);
IkReal x14617=(cj7*gconst62);
IkReal x14618=((1.0)*cj6);
IkReal x14619=(gconst62*sj7);
IkReal x14620=(gconst61*r01);
IkReal x14621=(gconst61*r11);
IkReal x14622=(cj5*sj6);
IkReal x14623=(gconst61*r21);
IkReal x14624=(cj5*x14618);
IkReal x14625=((1.0)*x14614);
IkReal x14626=(r10*x14614);
IkReal x14627=(sj7*x14613);
IkReal x14628=((1.0)*cj7*gconst61);
IkReal x14629=(cj7*x14613);
IkReal x14630=(r00*x14614);
IkReal x14631=(r20*x14614);
IkReal x14632=((1.0)*gconst62*x14613);
evalcond[0]=((((-1.0)*r20*x14632))+((r22*x14614))+((x14613*x14623)));
evalcond[1]=(((x14613*x14621))+((r12*x14614))+(((-1.0)*r10*x14632)));
evalcond[2]=((1.0)+((r02*x14614))+(((-1.0)*r00*x14632))+((x14613*x14620)));
evalcond[3]=((((-1.0)*cj7*x14620*x14625))+((x14617*x14630))+((r02*x14629))+((r01*x14619))+((r00*x14616)));
evalcond[4]=(((x14619*x14630))+(((-1.0)*r00*x14628))+(((-1.0)*r01*x14617))+((r02*x14627))+(((-1.0)*r01*x14616*x14625)));
evalcond[5]=((((-1.0)*cj7*x14621*x14625))+((r10*x14616))+(((-1.0)*x14624))+((x14617*x14626))+((r12*x14629))+x14615+((r11*x14619)));
evalcond[6]=((((-1.0)*sj5*x14618))+((x14617*x14631))+((r21*x14619))+(((-1.0)*cj7*x14623*x14625))+(((-1.0)*x14622))+((r22*x14629))+((r20*x14616)));
evalcond[7]=((((-1.0)*r10*x14628))+((cj6*sj5))+((x14619*x14626))+((r12*x14627))+x14622+(((-1.0)*r11*x14617))+(((-1.0)*r11*x14616*x14625)));
evalcond[8]=(((x14619*x14631))+(((-1.0)*r21*x14616*x14625))+(((-1.0)*x14624))+(((-1.0)*r20*x14628))+(((-1.0)*r21*x14617))+x14615+((r22*x14627)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x14633=gconst62*gconst62;
IkReal x14634=gconst61*gconst61;
IkReal x14635=(r10*sj7);
IkReal x14636=(cj7*r12);
IkReal x14637=(gconst61*r00);
IkReal x14638=(cj7*r11);
IkReal x14639=(cj7*r10);
IkReal x14640=(r11*sj7);
IkReal x14641=((1.0)*gconst61*gconst62*r01);
CheckValue<IkReal> x14642=IKPowWithIntegerCheck(IKsign((((r02*r12*sj7))+(((-1.0)*x14635*x14641))+(((-1.0)*gconst62*x14637*x14640))+((r00*x14633*x14635))+((r01*x14634*x14640)))),-1);
if(!x14642.valid){
continue;
}
CheckValue<IkReal> x14643 = IKatan2WithCheck(IkReal((((gconst62*x14637*x14639))+(((-1.0)*r00*x14634*x14638))+((r01*x14633*x14639))+(((-1.0)*x14638*x14641)))),IkReal((((gconst62*r01*x14636))+((x14636*x14637)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14643.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14642.value)))+(x14643.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x14644=IKcos(j8);
IkReal x14645=IKsin(j8);
IkReal x14646=(sj5*sj6);
IkReal x14647=(gconst61*sj7);
IkReal x14648=(cj7*gconst62);
IkReal x14649=((1.0)*cj6);
IkReal x14650=(gconst62*sj7);
IkReal x14651=(gconst61*r01);
IkReal x14652=(gconst61*r11);
IkReal x14653=(cj5*sj6);
IkReal x14654=(gconst61*r21);
IkReal x14655=(cj5*x14649);
IkReal x14656=((1.0)*x14645);
IkReal x14657=(r10*x14645);
IkReal x14658=(sj7*x14644);
IkReal x14659=((1.0)*cj7*gconst61);
IkReal x14660=(cj7*x14644);
IkReal x14661=(r00*x14645);
IkReal x14662=(r20*x14645);
IkReal x14663=((1.0)*gconst62*x14644);
evalcond[0]=(((r22*x14645))+((x14644*x14654))+(((-1.0)*r20*x14663)));
evalcond[1]=(((r12*x14645))+(((-1.0)*r10*x14663))+((x14644*x14652)));
evalcond[2]=((1.0)+(((-1.0)*r00*x14663))+((r02*x14645))+((x14644*x14651)));
evalcond[3]=(((x14648*x14661))+((r02*x14660))+((r01*x14650))+((r00*x14647))+(((-1.0)*cj7*x14651*x14656)));
evalcond[4]=(((x14650*x14661))+(((-1.0)*r01*x14647*x14656))+(((-1.0)*r01*x14648))+(((-1.0)*r00*x14659))+((r02*x14658)));
evalcond[5]=((((-1.0)*cj7*x14652*x14656))+((r10*x14647))+x14646+(((-1.0)*x14655))+((r12*x14660))+((x14648*x14657))+((r11*x14650)));
evalcond[6]=(((x14648*x14662))+(((-1.0)*sj5*x14649))+(((-1.0)*x14653))+((r22*x14660))+((r21*x14650))+(((-1.0)*cj7*x14654*x14656))+((r20*x14647)));
evalcond[7]=((((-1.0)*r11*x14648))+((cj6*sj5))+((r12*x14658))+(((-1.0)*r11*x14647*x14656))+(((-1.0)*r10*x14659))+x14653+((x14650*x14657)));
evalcond[8]=((((-1.0)*r21*x14648))+((x14650*x14662))+((r22*x14658))+(((-1.0)*r21*x14647*x14656))+x14646+(((-1.0)*r20*x14659))+(((-1.0)*x14655)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x14664=((1.0)*gconst62);
CheckValue<IkReal> x14665 = IKatan2WithCheck(IkReal((((gconst61*r21))+(((-1.0)*r20*x14664)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x14665.valid){
continue;
}
CheckValue<IkReal> x14666=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst61*r10))+(((-1.0)*r11*x14664)))),-1);
if(!x14666.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x14665.value)+(((1.5707963267949)*(x14666.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x14667=IKcos(j8);
IkReal x14668=IKsin(j8);
IkReal x14669=(sj5*sj6);
IkReal x14670=(gconst61*sj7);
IkReal x14671=(cj7*gconst62);
IkReal x14672=((1.0)*cj6);
IkReal x14673=(gconst62*sj7);
IkReal x14674=(gconst61*r01);
IkReal x14675=(gconst61*r11);
IkReal x14676=(cj5*sj6);
IkReal x14677=(gconst61*r21);
IkReal x14678=(cj5*x14672);
IkReal x14679=((1.0)*x14668);
IkReal x14680=(r10*x14668);
IkReal x14681=(sj7*x14667);
IkReal x14682=((1.0)*cj7*gconst61);
IkReal x14683=(cj7*x14667);
IkReal x14684=(r00*x14668);
IkReal x14685=(r20*x14668);
IkReal x14686=((1.0)*gconst62*x14667);
evalcond[0]=((((-1.0)*r20*x14686))+((x14667*x14677))+((r22*x14668)));
evalcond[1]=(((x14667*x14675))+((r12*x14668))+(((-1.0)*r10*x14686)));
evalcond[2]=((1.0)+(((-1.0)*r00*x14686))+((r02*x14668))+((x14667*x14674)));
evalcond[3]=(((r00*x14670))+(((-1.0)*cj7*x14674*x14679))+((r01*x14673))+((r02*x14683))+((x14671*x14684)));
evalcond[4]=((((-1.0)*r00*x14682))+((x14673*x14684))+(((-1.0)*r01*x14671))+((r02*x14681))+(((-1.0)*r01*x14670*x14679)));
evalcond[5]=(((r10*x14670))+(((-1.0)*x14678))+(((-1.0)*cj7*x14675*x14679))+((r12*x14683))+x14669+((r11*x14673))+((x14671*x14680)));
evalcond[6]=(((r20*x14670))+(((-1.0)*cj7*x14677*x14679))+(((-1.0)*sj5*x14672))+((r21*x14673))+(((-1.0)*x14676))+((x14671*x14685))+((r22*x14683)));
evalcond[7]=(((cj6*sj5))+((x14673*x14680))+((r12*x14681))+x14676+(((-1.0)*r11*x14670*x14679))+(((-1.0)*r11*x14671))+(((-1.0)*r10*x14682)));
evalcond[8]=((((-1.0)*r21*x14670*x14679))+(((-1.0)*x14678))+((x14673*x14685))+(((-1.0)*r21*x14671))+(((-1.0)*r20*x14682))+x14669+((r22*x14681)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14688 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14688)==0){
continue;
}
IkReal x14687=pow(x14688,-0.5);
CheckValue<IkReal> x14689 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14689.valid){
continue;
}
IkReal gconst63=((3.14159265358979)+(((-1.0)*(x14689.value))));
IkReal gconst64=((1.0)*r21*x14687);
IkReal gconst65=((-1.0)*r20*x14687);
CheckValue<IkReal> x14690 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14690.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14690.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[4];
CheckValue<IkReal> x14693 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14693.valid){
continue;
}
IkReal x14691=((1.0)*(x14693.value));
IkReal x14692=x14687;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj9=gconst64;
cj9=gconst65;
j9=((3.14159265)+(((-1.0)*x14691)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x14691)));
IkReal gconst64=((1.0)*r21*x14692);
IkReal gconst65=((-1.0)*r20*x14692);
j8eval[0]=0;
j8eval[1]=r12;
j8eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j8eval[3]=0;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
CheckValue<IkReal> x14696 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14696.valid){
continue;
}
IkReal x14694=((1.0)*(x14696.value));
IkReal x14695=x14687;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj9=gconst64;
cj9=gconst65;
j9=((3.14159265)+(((-1.0)*x14694)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x14694)));
IkReal gconst64=((1.0)*r21*x14695);
IkReal gconst65=((-1.0)*r20*x14695);
j8eval[0]=1.0;
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
CheckValue<IkReal> x14699 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14699.valid){
continue;
}
IkReal x14697=((1.0)*(x14699.value));
IkReal x14698=x14687;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
sj9=gconst64;
cj9=gconst65;
j9=((3.14159265)+(((-1.0)*x14697)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x14697)));
IkReal gconst64=((1.0)*r21*x14698);
IkReal gconst65=((-1.0)*r20*x14698);
j8eval[0]=r12;
j8eval[1]=sj7;
j8eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x14700=gconst64*gconst64;
IkReal x14701=gconst65*gconst65;
IkReal x14702=((1.0)*r20);
IkReal x14703=(r21*sj7);
IkReal x14704=(gconst65*sj7);
IkReal x14705=((1.0)*r22);
IkReal x14706=(gconst64*r00);
IkReal x14707=(cj7*r21);
IkReal x14708=(gconst64*gconst65*r01);
CheckValue<IkReal> x14709 = IKatan2WithCheck(IkReal(((((-1.0)*x14702*x14704*x14706))+((r00*x14700*x14703))+(((-1.0)*r01*sj7*x14701*x14702))+((x14703*x14708)))),IkReal(((((-1.0)*r01*x14704*x14705))+(((-1.0)*sj7*x14705*x14706)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14709.valid){
continue;
}
CheckValue<IkReal> x14710=IKPowWithIntegerCheck(IKsign((((cj7*r00*r20*x14701))+(((-1.0)*cj7*x14702*x14708))+((r01*x14700*x14707))+((cj7*r02*r22))+(((-1.0)*gconst65*x14706*x14707)))),-1);
if(!x14710.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x14709.value)+(((1.5707963267949)*(x14710.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x14711=IKcos(j8);
IkReal x14712=IKsin(j8);
IkReal x14713=(sj5*sj6);
IkReal x14714=((1.0)*cj7);
IkReal x14715=(gconst65*r11);
IkReal x14716=(gconst64*r00);
IkReal x14717=(gconst65*r00);
IkReal x14718=((1.0)*cj6);
IkReal x14719=((1.0)*gconst64);
IkReal x14720=(gconst65*r10);
IkReal x14721=(gconst65*r01);
IkReal x14722=(gconst64*r20);
IkReal x14723=(gconst65*r20);
IkReal x14724=(gconst64*r10);
IkReal x14725=(gconst65*r21);
IkReal x14726=(cj5*sj6);
IkReal x14727=(cj5*x14718);
IkReal x14728=(sj7*x14711);
IkReal x14729=((1.0)*x14711);
IkReal x14730=(sj7*x14712);
IkReal x14731=(gconst64*x14711);
IkReal x14732=(cj7*x14711);
IkReal x14733=(cj7*x14712);
IkReal x14734=(gconst64*x14712);
evalcond[0]=((((-1.0)*x14723*x14729))+((r22*x14712))+((r21*x14731)));
evalcond[1]=(((r12*x14712))+((r11*x14731))+(((-1.0)*x14720*x14729)));
evalcond[2]=((1.0)+((r01*x14731))+((r02*x14712))+(((-1.0)*x14717*x14729)));
evalcond[3]=(((r02*x14732))+((sj7*x14716))+(((-1.0)*r01*x14714*x14734))+((x14717*x14733))+((sj7*x14721)));
evalcond[4]=((((-1.0)*r01*x14719*x14730))+((r02*x14728))+(((-1.0)*x14714*x14716))+((x14717*x14730))+(((-1.0)*x14714*x14721)));
evalcond[5]=((((-1.0)*r11*x14714*x14734))+((x14720*x14733))+((sj7*x14715))+x14713+(((-1.0)*x14727))+((r12*x14732))+((sj7*x14724)));
evalcond[6]=((((-1.0)*x14726))+((x14723*x14733))+((r22*x14732))+(((-1.0)*r21*x14714*x14734))+((sj7*x14722))+((sj7*x14725))+(((-1.0)*sj5*x14718)));
evalcond[7]=(((cj6*sj5))+((x14720*x14730))+(((-1.0)*x14714*x14715))+x14726+(((-1.0)*r11*x14719*x14730))+(((-1.0)*x14714*x14724))+((r12*x14728)));
evalcond[8]=(((x14723*x14730))+((r22*x14728))+(((-1.0)*r21*x14719*x14730))+x14713+(((-1.0)*x14727))+(((-1.0)*x14714*x14722))+(((-1.0)*x14714*x14725)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x14735=((1.0)*gconst65);
CheckValue<IkReal> x14736=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14735))+(((-1.0)*gconst64*r10)))),-1);
if(!x14736.valid){
continue;
}
CheckValue<IkReal> x14737 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x14735))+((gconst64*r21)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x14737.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14736.value)))+(x14737.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x14738=IKcos(j8);
IkReal x14739=IKsin(j8);
IkReal x14740=(sj5*sj6);
IkReal x14741=((1.0)*cj7);
IkReal x14742=(gconst65*r11);
IkReal x14743=(gconst64*r00);
IkReal x14744=(gconst65*r00);
IkReal x14745=((1.0)*cj6);
IkReal x14746=((1.0)*gconst64);
IkReal x14747=(gconst65*r10);
IkReal x14748=(gconst65*r01);
IkReal x14749=(gconst64*r20);
IkReal x14750=(gconst65*r20);
IkReal x14751=(gconst64*r10);
IkReal x14752=(gconst65*r21);
IkReal x14753=(cj5*sj6);
IkReal x14754=(cj5*x14745);
IkReal x14755=(sj7*x14738);
IkReal x14756=((1.0)*x14738);
IkReal x14757=(sj7*x14739);
IkReal x14758=(gconst64*x14738);
IkReal x14759=(cj7*x14738);
IkReal x14760=(cj7*x14739);
IkReal x14761=(gconst64*x14739);
evalcond[0]=(((r22*x14739))+(((-1.0)*x14750*x14756))+((r21*x14758)));
evalcond[1]=((((-1.0)*x14747*x14756))+((r12*x14739))+((r11*x14758)));
evalcond[2]=((1.0)+((r02*x14739))+(((-1.0)*x14744*x14756))+((r01*x14758)));
evalcond[3]=(((x14744*x14760))+((r02*x14759))+((sj7*x14743))+((sj7*x14748))+(((-1.0)*r01*x14741*x14761)));
evalcond[4]=((((-1.0)*r01*x14746*x14757))+((r02*x14755))+((x14744*x14757))+(((-1.0)*x14741*x14743))+(((-1.0)*x14741*x14748)));
evalcond[5]=(((sj7*x14751))+((x14747*x14760))+(((-1.0)*r11*x14741*x14761))+((sj7*x14742))+x14740+((r12*x14759))+(((-1.0)*x14754)));
evalcond[6]=(((sj7*x14752))+(((-1.0)*r21*x14741*x14761))+((x14750*x14760))+((sj7*x14749))+(((-1.0)*sj5*x14745))+((r22*x14759))+(((-1.0)*x14753)));
evalcond[7]=((((-1.0)*x14741*x14751))+((cj6*sj5))+((x14747*x14757))+(((-1.0)*x14741*x14742))+x14753+((r12*x14755))+(((-1.0)*r11*x14746*x14757)));
evalcond[8]=((((-1.0)*x14741*x14752))+(((-1.0)*x14741*x14749))+((r22*x14755))+x14740+(((-1.0)*r21*x14746*x14757))+(((-1.0)*x14754))+((x14750*x14757)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x14762 = IKatan2WithCheck(IkReal((((gconst64*r11))+(((-1.0)*gconst65*r10)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x14762.valid){
continue;
}
CheckValue<IkReal> x14763=IKPowWithIntegerCheck(IKsign((((gconst64*r20))+((gconst65*r21)))),-1);
if(!x14763.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x14762.value)+(((1.5707963267949)*(x14763.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x14764=IKcos(j8);
IkReal x14765=IKsin(j8);
IkReal x14766=(sj5*sj6);
IkReal x14767=((1.0)*cj7);
IkReal x14768=(gconst65*r11);
IkReal x14769=(gconst64*r00);
IkReal x14770=(gconst65*r00);
IkReal x14771=((1.0)*cj6);
IkReal x14772=((1.0)*gconst64);
IkReal x14773=(gconst65*r10);
IkReal x14774=(gconst65*r01);
IkReal x14775=(gconst64*r20);
IkReal x14776=(gconst65*r20);
IkReal x14777=(gconst64*r10);
IkReal x14778=(gconst65*r21);
IkReal x14779=(cj5*sj6);
IkReal x14780=(cj5*x14771);
IkReal x14781=(sj7*x14764);
IkReal x14782=((1.0)*x14764);
IkReal x14783=(sj7*x14765);
IkReal x14784=(gconst64*x14764);
IkReal x14785=(cj7*x14764);
IkReal x14786=(cj7*x14765);
IkReal x14787=(gconst64*x14765);
evalcond[0]=((((-1.0)*x14776*x14782))+((r21*x14784))+((r22*x14765)));
evalcond[1]=((((-1.0)*x14773*x14782))+((r12*x14765))+((r11*x14784)));
evalcond[2]=((1.0)+((r01*x14784))+(((-1.0)*x14770*x14782))+((r02*x14765)));
evalcond[3]=(((x14770*x14786))+(((-1.0)*r01*x14767*x14787))+((sj7*x14774))+((r02*x14785))+((sj7*x14769)));
evalcond[4]=(((x14770*x14783))+(((-1.0)*r01*x14772*x14783))+(((-1.0)*x14767*x14774))+((r02*x14781))+(((-1.0)*x14767*x14769)));
evalcond[5]=((((-1.0)*r11*x14767*x14787))+((r12*x14785))+((sj7*x14777))+x14766+((sj7*x14768))+((x14773*x14786))+(((-1.0)*x14780)));
evalcond[6]=((((-1.0)*x14779))+((sj7*x14778))+((sj7*x14775))+(((-1.0)*sj5*x14771))+(((-1.0)*r21*x14767*x14787))+((r22*x14785))+((x14776*x14786)));
evalcond[7]=(((cj6*sj5))+((r12*x14781))+(((-1.0)*r11*x14772*x14783))+(((-1.0)*x14767*x14777))+x14779+(((-1.0)*x14767*x14768))+((x14773*x14783)));
evalcond[8]=((((-1.0)*x14767*x14775))+(((-1.0)*x14767*x14778))+x14766+(((-1.0)*r21*x14772*x14783))+((r22*x14781))+((x14776*x14783))+(((-1.0)*x14780)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[2];
IkReal x14788=((-1.0)*pz);
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14788);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14788);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14789=(cj9*r00);
IkReal x14790=(r01*sj9);
j8eval[0]=((((-1.0)*sj7*x14790))+((sj7*x14789)));
j8eval[1]=((((-1.0)*x14789))+x14790);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x14791=((-1.0)*pz);
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14791);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14791);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14792=(cj9*r00);
IkReal x14793=(r01*sj9);
j8eval[0]=(((cj7*x14792))+(((-1.0)*cj7*x14793)));
j8eval[1]=((((-1.0)*x14792))+x14793);
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
IkReal x14794=((-1.0)*pz);
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14794);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14794);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j8eval[0]=((((-1.0)*cj7*r01*sj9))+((cj7*cj9*r00)));
j8eval[1]=cj7;
j8eval[2]=r22;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x14795=((1.0)*sj7);
CheckValue<IkReal> x14796=IKPowWithIntegerCheck(((((-1.0)*cj7*r01*sj9))+((cj7*cj9*r00))),-1);
if(!x14796.valid){
continue;
}
CheckValue<IkReal> x14797=IKPowWithIntegerCheck(cj7,-1);
if(!x14797.valid){
continue;
}
CheckValue<IkReal> x14798=IKPowWithIntegerCheck(r22,-1);
if(!x14798.valid){
continue;
}
if( IKabs(((x14796.value)*(((((-1.0)*cj9*r01*x14795))+(((-1.0)*r00*sj9*x14795)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14797.value)*(x14798.value)*((((cj6*sj5))+((cj5*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14796.value)*(((((-1.0)*cj9*r01*x14795))+(((-1.0)*r00*sj9*x14795))))))+IKsqr(((x14797.value)*(x14798.value)*((((cj6*sj5))+((cj5*sj6))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((x14796.value)*(((((-1.0)*cj9*r01*x14795))+(((-1.0)*r00*sj9*x14795))))), ((x14797.value)*(x14798.value)*((((cj6*sj5))+((cj5*sj6))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x14799=IKcos(j8);
IkReal x14800=IKsin(j8);
IkReal x14801=(sj5*sj6);
IkReal x14802=(cj9*r00);
IkReal x14803=((1.0)*sj9);
IkReal x14804=((1.0)*cj6);
IkReal x14805=(cj9*sj7);
IkReal x14806=(sj7*sj9);
IkReal x14807=(cj9*r10);
IkReal x14808=(cj5*sj6);
IkReal x14809=(cj5*x14804);
IkReal x14810=((1.0)*x14799);
IkReal x14811=(cj7*x14800);
IkReal x14812=(sj7*x14800);
IkReal x14813=(sj9*x14799);
IkReal x14814=(r22*x14799);
IkReal x14815=((1.0)*cj7*cj9);
evalcond[0]=(r22*x14800);
evalcond[1]=((((-1.0)*x14807*x14810))+((r11*x14813)));
evalcond[2]=(x14801+(((-1.0)*x14809))+((sj7*x14814)));
evalcond[3]=((1.0)+(((-1.0)*x14802*x14810))+((r01*x14813)));
evalcond[4]=((((-1.0)*sj5*x14804))+((cj7*x14814))+(((-1.0)*x14808)));
evalcond[5]=(((x14802*x14811))+((r01*x14805))+((r00*x14806))+(((-1.0)*r01*x14803*x14811)));
evalcond[6]=(((x14802*x14812))+(((-1.0)*r01*x14815))+(((-1.0)*r01*x14803*x14812))+(((-1.0)*cj7*r00*x14803)));
evalcond[7]=((((-1.0)*r11*x14803*x14811))+x14801+(((-1.0)*x14809))+((r10*x14806))+((x14807*x14811))+((r11*x14805)));
evalcond[8]=(((cj6*sj5))+(((-1.0)*r11*x14803*x14812))+((r10*x14800*x14805))+x14808+(((-1.0)*cj7*r10*x14803))+(((-1.0)*r11*x14815)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x14816=(cj9*r00);
IkReal x14817=((1.0)*sj7);
IkReal x14818=(r01*sj9);
CheckValue<IkReal> x14819=IKPowWithIntegerCheck((((cj7*x14816))+(((-1.0)*cj7*x14818))),-1);
if(!x14819.valid){
continue;
}
CheckValue<IkReal> x14820=IKPowWithIntegerCheck((x14818+(((-1.0)*x14816))),-1);
if(!x14820.valid){
continue;
}
if( IKabs(((x14819.value)*(((((-1.0)*r00*sj9*x14817))+(((-1.0)*cj9*r01*x14817)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x14820.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14819.value)*(((((-1.0)*r00*sj9*x14817))+(((-1.0)*cj9*r01*x14817))))))+IKsqr(((-1.0)*(x14820.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((x14819.value)*(((((-1.0)*r00*sj9*x14817))+(((-1.0)*cj9*r01*x14817))))), ((-1.0)*(x14820.value)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x14821=IKcos(j8);
IkReal x14822=IKsin(j8);
IkReal x14823=(sj5*sj6);
IkReal x14824=(cj9*r00);
IkReal x14825=((1.0)*sj9);
IkReal x14826=((1.0)*cj6);
IkReal x14827=(cj9*sj7);
IkReal x14828=(sj7*sj9);
IkReal x14829=(cj9*r10);
IkReal x14830=(cj5*sj6);
IkReal x14831=(cj5*x14826);
IkReal x14832=((1.0)*x14821);
IkReal x14833=(cj7*x14822);
IkReal x14834=(sj7*x14822);
IkReal x14835=(sj9*x14821);
IkReal x14836=(r22*x14821);
IkReal x14837=((1.0)*cj7*cj9);
evalcond[0]=(r22*x14822);
evalcond[1]=((((-1.0)*x14829*x14832))+((r11*x14835)));
evalcond[2]=(x14823+(((-1.0)*x14831))+((sj7*x14836)));
evalcond[3]=((1.0)+(((-1.0)*x14824*x14832))+((r01*x14835)));
evalcond[4]=((((-1.0)*x14830))+((cj7*x14836))+(((-1.0)*sj5*x14826)));
evalcond[5]=(((r01*x14827))+((r00*x14828))+(((-1.0)*r01*x14825*x14833))+((x14824*x14833)));
evalcond[6]=((((-1.0)*r01*x14825*x14834))+((x14824*x14834))+(((-1.0)*r01*x14837))+(((-1.0)*cj7*r00*x14825)));
evalcond[7]=(((r10*x14828))+(((-1.0)*r11*x14825*x14833))+x14823+(((-1.0)*x14831))+((x14829*x14833))+((r11*x14827)));
evalcond[8]=(((cj6*sj5))+(((-1.0)*r11*x14837))+(((-1.0)*r11*x14825*x14834))+x14830+(((-1.0)*cj7*r10*x14825))+((r10*x14822*x14827)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x14838=(cj9*r00);
IkReal x14839=(r01*sj9);
CheckValue<IkReal> x14840=IKPowWithIntegerCheck(((((-1.0)*sj7*x14839))+((sj7*x14838))),-1);
if(!x14840.valid){
continue;
}
CheckValue<IkReal> x14841=IKPowWithIntegerCheck(((((-1.0)*x14838))+x14839),-1);
if(!x14841.valid){
continue;
}
if( IKabs(((x14840.value)*((((cj7*r00*sj9))+((cj7*cj9*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(x14841.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14840.value)*((((cj7*r00*sj9))+((cj7*cj9*r01))))))+IKsqr(((-1.0)*(x14841.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((x14840.value)*((((cj7*r00*sj9))+((cj7*cj9*r01))))), ((-1.0)*(x14841.value)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x14842=IKcos(j8);
IkReal x14843=IKsin(j8);
IkReal x14844=(sj5*sj6);
IkReal x14845=(cj9*r00);
IkReal x14846=((1.0)*sj9);
IkReal x14847=((1.0)*cj6);
IkReal x14848=(cj9*sj7);
IkReal x14849=(sj7*sj9);
IkReal x14850=(cj9*r10);
IkReal x14851=(cj5*sj6);
IkReal x14852=(cj5*x14847);
IkReal x14853=((1.0)*x14842);
IkReal x14854=(cj7*x14843);
IkReal x14855=(sj7*x14843);
IkReal x14856=(sj9*x14842);
IkReal x14857=(r22*x14842);
IkReal x14858=((1.0)*cj7*cj9);
evalcond[0]=(r22*x14843);
evalcond[1]=(((r11*x14856))+(((-1.0)*x14850*x14853)));
evalcond[2]=(((sj7*x14857))+x14844+(((-1.0)*x14852)));
evalcond[3]=((1.0)+(((-1.0)*x14845*x14853))+((r01*x14856)));
evalcond[4]=((((-1.0)*sj5*x14847))+((cj7*x14857))+(((-1.0)*x14851)));
evalcond[5]=(((x14845*x14854))+(((-1.0)*r01*x14846*x14854))+((r01*x14848))+((r00*x14849)));
evalcond[6]=(((x14845*x14855))+(((-1.0)*r01*x14858))+(((-1.0)*cj7*r00*x14846))+(((-1.0)*r01*x14846*x14855)));
evalcond[7]=(x14844+(((-1.0)*r11*x14846*x14854))+((x14850*x14854))+((r11*x14848))+((r10*x14849))+(((-1.0)*x14852)));
evalcond[8]=(((cj6*sj5))+x14851+(((-1.0)*r11*x14846*x14855))+((r10*x14843*x14848))+(((-1.0)*cj7*r10*x14846))+(((-1.0)*r11*x14858)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x14859=cj9*cj9;
IkReal x14860=(cj7*r01);
IkReal x14861=(r00*sj7);
IkReal x14862=((1.0)*r21);
IkReal x14863=(cj7*r00);
IkReal x14864=(cj9*sj9);
IkReal x14865=((1.0)*r22);
IkReal x14866=(r01*sj7);
IkReal x14867=(r20*x14859);
IkReal x14868=((1.0)*r20*x14864);
CheckValue<IkReal> x14869 = IKatan2WithCheck(IkReal(((((-1.0)*x14861*x14868))+(((-1.0)*x14866*x14867))+((r21*x14864*x14866))+((r21*x14861))+(((-1.0)*x14859*x14861*x14862)))),IkReal(((((-1.0)*cj9*x14865*x14866))+(((-1.0)*sj9*x14861*x14865)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14869.valid){
continue;
}
CheckValue<IkReal> x14870=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14862*x14863*x14864))+(((-1.0)*x14859*x14860*x14862))+((cj7*r02*r22))+((x14863*x14867))+((r21*x14860))+(((-1.0)*x14860*x14868)))),-1);
if(!x14870.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x14869.value)+(((1.5707963267949)*(x14870.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x14871=IKcos(j8);
IkReal x14872=IKsin(j8);
IkReal x14873=(sj5*sj6);
IkReal x14874=(cj9*r00);
IkReal x14875=((1.0)*sj9);
IkReal x14876=(cj9*r21);
IkReal x14877=((1.0)*cj7);
IkReal x14878=((1.0)*cj6);
IkReal x14879=(cj9*r20);
IkReal x14880=(cj9*sj7);
IkReal x14881=(sj7*sj9);
IkReal x14882=(cj9*r10);
IkReal x14883=(cj5*sj6);
IkReal x14884=(cj5*x14878);
IkReal x14885=((1.0)*x14871);
IkReal x14886=(cj7*x14872);
IkReal x14887=(sj7*x14872);
IkReal x14888=(r12*x14871);
IkReal x14889=(sj7*x14871);
IkReal x14890=(sj9*x14871);
IkReal x14891=(cj7*x14871);
evalcond[0]=((((-1.0)*x14879*x14885))+((r22*x14872))+((r21*x14890)));
evalcond[1]=(((r12*x14872))+((r11*x14890))+(((-1.0)*x14882*x14885)));
evalcond[2]=((1.0)+((r01*x14890))+(((-1.0)*x14874*x14885))+((r02*x14872)));
evalcond[3]=(((r02*x14891))+(((-1.0)*r01*x14875*x14886))+((r00*x14881))+((x14874*x14886))+((r01*x14880)));
evalcond[4]=((((-1.0)*cj7*r00*x14875))+(((-1.0)*r01*x14875*x14887))+((x14874*x14887))+(((-1.0)*cj9*r01*x14877))+((r02*x14889)));
evalcond[5]=((((-1.0)*r11*x14875*x14886))+((cj7*x14888))+((r11*x14880))+((r10*x14881))+x14873+(((-1.0)*x14884))+((x14882*x14886)));
evalcond[6]=((((-1.0)*sj5*x14878))+((x14879*x14886))+((sj7*x14876))+((r22*x14891))+((r20*x14881))+(((-1.0)*r21*x14875*x14886))+(((-1.0)*x14883)));
evalcond[7]=((((-1.0)*r11*x14875*x14887))+((cj6*sj5))+((sj7*x14888))+x14883+(((-1.0)*cj9*r11*x14877))+((r10*x14872*x14880))+(((-1.0)*cj7*r10*x14875)));
evalcond[8]=(((x14879*x14887))+(((-1.0)*cj7*r20*x14875))+((r22*x14889))+x14873+(((-1.0)*x14884))+(((-1.0)*r21*x14875*x14887))+(((-1.0)*x14876*x14877)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x14892=((1.0)*cj9);
CheckValue<IkReal> x14893 = IKatan2WithCheck(IkReal((((r21*sj9))+(((-1.0)*r20*x14892)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x14893.valid){
continue;
}
CheckValue<IkReal> x14894=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj9))+(((-1.0)*r11*x14892)))),-1);
if(!x14894.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x14893.value)+(((1.5707963267949)*(x14894.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x14895=IKcos(j8);
IkReal x14896=IKsin(j8);
IkReal x14897=(sj5*sj6);
IkReal x14898=(cj9*r00);
IkReal x14899=((1.0)*sj9);
IkReal x14900=(cj9*r21);
IkReal x14901=((1.0)*cj7);
IkReal x14902=((1.0)*cj6);
IkReal x14903=(cj9*r20);
IkReal x14904=(cj9*sj7);
IkReal x14905=(sj7*sj9);
IkReal x14906=(cj9*r10);
IkReal x14907=(cj5*sj6);
IkReal x14908=(cj5*x14902);
IkReal x14909=((1.0)*x14895);
IkReal x14910=(cj7*x14896);
IkReal x14911=(sj7*x14896);
IkReal x14912=(r12*x14895);
IkReal x14913=(sj7*x14895);
IkReal x14914=(sj9*x14895);
IkReal x14915=(cj7*x14895);
evalcond[0]=(((r21*x14914))+(((-1.0)*x14903*x14909))+((r22*x14896)));
evalcond[1]=(((r12*x14896))+(((-1.0)*x14906*x14909))+((r11*x14914)));
evalcond[2]=((1.0)+((r02*x14896))+((r01*x14914))+(((-1.0)*x14898*x14909)));
evalcond[3]=(((r00*x14905))+((r01*x14904))+((r02*x14915))+((x14898*x14910))+(((-1.0)*r01*x14899*x14910)));
evalcond[4]=((((-1.0)*cj7*r00*x14899))+((r02*x14913))+(((-1.0)*cj9*r01*x14901))+((x14898*x14911))+(((-1.0)*r01*x14899*x14911)));
evalcond[5]=(((x14906*x14910))+((r11*x14904))+(((-1.0)*x14908))+x14897+(((-1.0)*r11*x14899*x14910))+((cj7*x14912))+((r10*x14905)));
evalcond[6]=(((r22*x14915))+(((-1.0)*sj5*x14902))+((sj7*x14900))+(((-1.0)*x14907))+(((-1.0)*r21*x14899*x14910))+((x14903*x14910))+((r20*x14905)));
evalcond[7]=(((cj6*sj5))+x14907+((sj7*x14912))+(((-1.0)*cj9*r11*x14901))+(((-1.0)*r11*x14899*x14911))+((r10*x14896*x14904))+(((-1.0)*cj7*r10*x14899)));
evalcond[8]=(((r22*x14913))+(((-1.0)*x14908))+x14897+(((-1.0)*r21*x14899*x14911))+((x14903*x14911))+(((-1.0)*x14900*x14901))+(((-1.0)*cj7*r20*x14899)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x14916=IKPowWithIntegerCheck(IKsign((((cj9*r21))+((r20*sj9)))),-1);
if(!x14916.valid){
continue;
}
CheckValue<IkReal> x14917 = IKatan2WithCheck(IkReal((((r11*sj9))+(((-1.0)*cj9*r10)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x14917.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14916.value)))+(x14917.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x14918=IKcos(j8);
IkReal x14919=IKsin(j8);
IkReal x14920=(sj5*sj6);
IkReal x14921=(cj9*r00);
IkReal x14922=((1.0)*sj9);
IkReal x14923=(cj9*r21);
IkReal x14924=((1.0)*cj7);
IkReal x14925=((1.0)*cj6);
IkReal x14926=(cj9*r20);
IkReal x14927=(cj9*sj7);
IkReal x14928=(sj7*sj9);
IkReal x14929=(cj9*r10);
IkReal x14930=(cj5*sj6);
IkReal x14931=(cj5*x14925);
IkReal x14932=((1.0)*x14918);
IkReal x14933=(cj7*x14919);
IkReal x14934=(sj7*x14919);
IkReal x14935=(r12*x14918);
IkReal x14936=(sj7*x14918);
IkReal x14937=(sj9*x14918);
IkReal x14938=(cj7*x14918);
evalcond[0]=(((r22*x14919))+((r21*x14937))+(((-1.0)*x14926*x14932)));
evalcond[1]=(((r12*x14919))+((r11*x14937))+(((-1.0)*x14929*x14932)));
evalcond[2]=((1.0)+((r02*x14919))+((r01*x14937))+(((-1.0)*x14921*x14932)));
evalcond[3]=(((x14921*x14933))+((r01*x14927))+((r00*x14928))+(((-1.0)*r01*x14922*x14933))+((r02*x14938)));
evalcond[4]=(((x14921*x14934))+(((-1.0)*cj7*r00*x14922))+(((-1.0)*r01*x14922*x14934))+((r02*x14936))+(((-1.0)*cj9*r01*x14924)));
evalcond[5]=(((cj7*x14935))+x14920+(((-1.0)*r11*x14922*x14933))+((r10*x14928))+((x14929*x14933))+(((-1.0)*x14931))+((r11*x14927)));
evalcond[6]=((((-1.0)*x14930))+((r22*x14938))+(((-1.0)*sj5*x14925))+((x14926*x14933))+((sj7*x14923))+(((-1.0)*r21*x14922*x14933))+((r20*x14928)));
evalcond[7]=((((-1.0)*cj9*r11*x14924))+((cj6*sj5))+x14930+(((-1.0)*r11*x14922*x14934))+((r10*x14919*x14927))+(((-1.0)*cj7*r10*x14922))+((sj7*x14935)));
evalcond[8]=((((-1.0)*x14923*x14924))+x14920+(((-1.0)*x14931))+(((-1.0)*cj7*r20*x14922))+((r22*x14936))+((x14926*x14934))+(((-1.0)*r21*x14922*x14934)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[2];
IkReal x14939=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14939);
rxp1_1=(px*r21);
rxp1_2=(r11*x14939);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j8eval[0]=r02;
j8eval[1]=(((r11*sj9))+(((-1.0)*cj9*r10)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x14940=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14940);
rxp1_1=(px*r21);
rxp1_2=(r11*x14940);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j8eval[0]=(((cj7*cj9*r20))+(((-1.0)*cj7*r21*sj9)));
j8eval[1]=(((r11*sj9))+(((-1.0)*cj9*r10)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x14941=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14941);
rxp1_1=(px*r21);
rxp1_2=(r11*x14941);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j8eval[0]=r02;
j8eval[1]=sj7;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x14942=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14942);
rxp1_1=(px*r21);
rxp1_2=(r11*x14942);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj7=0;
cj7=1.0;
j7=0;
j8eval[0]=(((cj9*r20))+(((-1.0)*r21*sj9)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x14944=IKPowWithIntegerCheck((((cj9*r20))+(((-1.0)*r21*sj9))),-1);
if(!x14944.valid){
continue;
}
IkReal x14943=x14944.value;
sj8array[0]=(((cj6*sj5*x14943))+((cj5*sj6*x14943)));
if( sj8array[0] >= -1-IKFAST_SINCOS_THRESH && sj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKasin(sj8array[0]);
    cj8array[0] = IKcos(j8array[0]);
    sj8array[1] = sj8array[0];
    j8array[1] = j8array[0] > 0 ? (IKPI-j8array[0]) : (-IKPI-j8array[0]);
    cj8array[1] = -cj8array[0];
}
else if( isnan(sj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[3];
IkReal x14945=IKcos(j8);
IkReal x14946=(sj9*x14945);
IkReal x14947=((1.0)*cj9*x14945);
evalcond[0]=(r02*x14945);
evalcond[1]=((((-1.0)*r20*x14947))+((r21*x14946)));
evalcond[2]=(((r11*x14946))+(((-1.0)*r10*x14947)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x14948=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14948);
rxp1_1=(px*r21);
rxp1_2=(r11*x14948);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj7=0;
cj7=-1.0;
j7=3.14159265358979;
j8eval[0]=(((r21*sj9))+(((-1.0)*cj9*r20)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x14950=IKPowWithIntegerCheck((((r21*sj9))+(((-1.0)*cj9*r20))),-1);
if(!x14950.valid){
continue;
}
IkReal x14949=x14950.value;
sj8array[0]=(((cj6*sj5*x14949))+((cj5*sj6*x14949)));
if( sj8array[0] >= -1-IKFAST_SINCOS_THRESH && sj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKasin(sj8array[0]);
    cj8array[0] = IKcos(j8array[0]);
    sj8array[1] = sj8array[0];
    j8array[1] = j8array[0] > 0 ? (IKPI-j8array[0]) : (-IKPI-j8array[0]);
    cj8array[1] = -cj8array[0];
}
else if( isnan(sj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[3];
IkReal x14951=IKcos(j8);
IkReal x14952=(sj9*x14951);
IkReal x14953=((1.0)*cj9*x14951);
evalcond[0]=((-1.0)*r02*x14951);
evalcond[1]=((((-1.0)*r20*x14953))+((r21*x14952)));
evalcond[2]=((((-1.0)*r10*x14953))+((r11*x14952)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x14954=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14954);
rxp1_1=(px*r21);
rxp1_2=(r11*x14954);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj7=1.0;
cj7=0;
j7=1.5707963267949;
j8eval[0]=(((cj9*r20))+(((-1.0)*r21*sj9)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x14956=IKPowWithIntegerCheck((((cj9*r20))+(((-1.0)*r21*sj9))),-1);
if(!x14956.valid){
continue;
}
IkReal x14955=x14956.value;
sj8array[0]=((((-1.0)*sj5*sj6*x14955))+((cj5*cj6*x14955)));
if( sj8array[0] >= -1-IKFAST_SINCOS_THRESH && sj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKasin(sj8array[0]);
    cj8array[0] = IKcos(j8array[0]);
    sj8array[1] = sj8array[0];
    j8array[1] = j8array[0] > 0 ? (IKPI-j8array[0]) : (-IKPI-j8array[0]);
    cj8array[1] = -cj8array[0];
}
else if( isnan(sj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[3];
IkReal x14957=IKcos(j8);
IkReal x14958=(sj9*x14957);
IkReal x14959=((1.0)*cj9*x14957);
evalcond[0]=(r02*x14957);
evalcond[1]=((((-1.0)*r20*x14959))+((r21*x14958)));
evalcond[2]=((((-1.0)*r10*x14959))+((r11*x14958)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
IkReal x14960=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14960);
rxp1_1=(px*r21);
rxp1_2=(r11*x14960);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj7=-1.0;
cj7=0;
j7=-1.5707963267949;
j8eval[0]=(((r21*sj9))+(((-1.0)*cj9*r20)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x14962=IKPowWithIntegerCheck((((r21*sj9))+(((-1.0)*cj9*r20))),-1);
if(!x14962.valid){
continue;
}
IkReal x14961=x14962.value;
sj8array[0]=(((cj5*cj6*x14961))+(((-1.0)*sj5*sj6*x14961)));
if( sj8array[0] >= -1-IKFAST_SINCOS_THRESH && sj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKasin(sj8array[0]);
    cj8array[0] = IKcos(j8array[0]);
    sj8array[1] = sj8array[0];
    j8array[1] = j8array[0] > 0 ? (IKPI-j8array[0]) : (-IKPI-j8array[0]);
    cj8array[1] = -cj8array[0];
}
else if( isnan(sj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[3];
IkReal x14963=IKcos(j8);
IkReal x14964=(sj9*x14963);
IkReal x14965=((1.0)*cj9*x14963);
evalcond[0]=((-1.0)*r02*x14963);
evalcond[1]=((((-1.0)*r20*x14965))+((r21*x14964)));
evalcond[2]=((((-1.0)*r10*x14965))+((r11*x14964)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x14966 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x14966.valid){
continue;
}
IkReal gconst66=((-1.0)*(x14966.value));
IkReal gconst67=r10;
IkReal gconst68=r11;
CheckValue<IkReal> x14967 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x14967.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14967.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[2];
IkReal x14968=((-1.0)*r10);
CheckValue<IkReal> x14970 = IKatan2WithCheck(IkReal(x14968),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x14970.valid){
continue;
}
IkReal x14969=((-1.0)*(x14970.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x14968);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj9=gconst67;
cj9=gconst68;
j9=x14969;
IkReal gconst66=x14969;
IkReal gconst67=r10;
IkReal gconst68=r11;
j8eval[0]=r02;
j8eval[1]=sj7;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x14971=((-1.0)*r10);
CheckValue<IkReal> x14973 = IKatan2WithCheck(IkReal(x14971),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x14973.valid){
continue;
}
IkReal x14972=((-1.0)*(x14973.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x14971);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj9=gconst67;
cj9=gconst68;
j9=x14972;
IkReal gconst66=x14972;
IkReal gconst67=r10;
IkReal gconst68=r11;
j8eval[0]=r02;
j8eval[1]=cj7;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
IkReal x14974=((-1.0)*r10);
CheckValue<IkReal> x14976 = IKatan2WithCheck(IkReal(x14974),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x14976.valid){
continue;
}
IkReal x14975=((-1.0)*(x14976.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x14974);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj9=gconst67;
cj9=gconst68;
j9=x14975;
IkReal gconst66=x14975;
IkReal gconst67=r10;
IkReal gconst68=r11;
j8eval[0]=((((-1.0)*r10*r21*sj7))+((r11*r20*sj7)));
j8eval[1]=cj7;
j8eval[2]=r02;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x14977=(cj5*cj6);
IkReal x14978=(sj5*sj6);
CheckValue<IkReal> x14979=IKPowWithIntegerCheck((((gconst68*r20*sj7))+(((-1.0)*gconst67*r21*sj7))),-1);
if(!x14979.valid){
continue;
}
CheckValue<IkReal> x14980=IKPowWithIntegerCheck(cj7,-1);
if(!x14980.valid){
continue;
}
CheckValue<IkReal> x14981=IKPowWithIntegerCheck(r02,-1);
if(!x14981.valid){
continue;
}
if( IKabs(((x14979.value)*((((cj7*gconst67*r20))+((cj7*gconst68*r21))+(((-1.0)*x14978))+x14977)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14980.value)*(x14981.value)*(((((-1.0)*cj4*x14977))+((cj4*x14978)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14979.value)*((((cj7*gconst67*r20))+((cj7*gconst68*r21))+(((-1.0)*x14978))+x14977))))+IKsqr(((x14980.value)*(x14981.value)*(((((-1.0)*cj4*x14977))+((cj4*x14978))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((x14979.value)*((((cj7*gconst67*r20))+((cj7*gconst68*r21))+(((-1.0)*x14978))+x14977))), ((x14980.value)*(x14981.value)*(((((-1.0)*cj4*x14977))+((cj4*x14978))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x14982=IKcos(j8);
IkReal x14983=IKsin(j8);
IkReal x14984=(gconst68*sj7);
IkReal x14985=(gconst68*r10);
IkReal x14986=((1.0)*cj6);
IkReal x14987=((1.0)*sj4);
IkReal x14988=(gconst67*r10);
IkReal x14989=(sj5*sj6);
IkReal x14990=(gconst67*r21);
IkReal x14991=((1.0)*cj7);
IkReal x14992=(gconst68*r20);
IkReal x14993=(gconst67*sj7);
IkReal x14994=(cj5*cj6);
IkReal x14995=(gconst67*r11);
IkReal x14996=((1.0)*cj5*sj6);
IkReal x14997=(r02*x14982);
IkReal x14998=((1.0)*x14982);
IkReal x14999=(cj7*x14983);
IkReal x15000=((1.0)*x14983);
evalcond[0]=((((-1.0)*x14987))+((r02*x14983)));
evalcond[1]=((((-1.0)*x14992*x14998))+((x14982*x14990)));
evalcond[2]=(cj4+(((-1.0)*x14985*x14998))+((x14982*x14995)));
evalcond[3]=(((cj7*x14997))+(((-1.0)*cj4*x14989))+((cj4*x14994)));
evalcond[4]=((((-1.0)*cj4*sj5*x14986))+((sj7*x14997))+(((-1.0)*cj4*x14996)));
evalcond[5]=((((-1.0)*x14983*x14990*x14991))+(((-1.0)*x14996))+((r20*x14993))+(((-1.0)*sj5*x14986))+((r21*x14984))+((x14992*x14999)));
evalcond[6]=(((r20*x14983*x14984))+(((-1.0)*sj7*x14990*x15000))+x14989+(((-1.0)*gconst68*r21*x14991))+(((-1.0)*cj5*x14986))+(((-1.0)*gconst67*r20*x14991)));
evalcond[7]=(((x14985*x14999))+(((-1.0)*x14983*x14991*x14995))+((r11*x14984))+(((-1.0)*x14987*x14989))+((sj7*x14988))+((sj4*x14994)));
evalcond[8]=((((-1.0)*x14988*x14991))+((r10*x14983*x14984))+(((-1.0)*sj4*sj5*x14986))+(((-1.0)*gconst68*r11*x14991))+(((-1.0)*cj5*sj6*x14987))+(((-1.0)*r11*x14993*x15000)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x15002=IKPowWithIntegerCheck(r02,-1);
if(!x15002.valid){
continue;
}
IkReal x15001=x15002.value;
CheckValue<IkReal> x15003=IKPowWithIntegerCheck(cj7,-1);
if(!x15003.valid){
continue;
}
if( IKabs((sj4*x15001)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x15001*(x15003.value)*((((cj4*sj5*sj6))+(((-1.0)*cj4*cj5*cj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj4*x15001))+IKsqr((x15001*(x15003.value)*((((cj4*sj5*sj6))+(((-1.0)*cj4*cj5*cj6))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((sj4*x15001), (x15001*(x15003.value)*((((cj4*sj5*sj6))+(((-1.0)*cj4*cj5*cj6))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x15004=IKcos(j8);
IkReal x15005=IKsin(j8);
IkReal x15006=(gconst68*sj7);
IkReal x15007=(gconst68*r10);
IkReal x15008=((1.0)*cj6);
IkReal x15009=((1.0)*sj4);
IkReal x15010=(gconst67*r10);
IkReal x15011=(sj5*sj6);
IkReal x15012=(gconst67*r21);
IkReal x15013=((1.0)*cj7);
IkReal x15014=(gconst68*r20);
IkReal x15015=(gconst67*sj7);
IkReal x15016=(cj5*cj6);
IkReal x15017=(gconst67*r11);
IkReal x15018=((1.0)*cj5*sj6);
IkReal x15019=(r02*x15004);
IkReal x15020=((1.0)*x15004);
IkReal x15021=(cj7*x15005);
IkReal x15022=((1.0)*x15005);
evalcond[0]=(((r02*x15005))+(((-1.0)*x15009)));
evalcond[1]=(((x15004*x15012))+(((-1.0)*x15014*x15020)));
evalcond[2]=(cj4+((x15004*x15017))+(((-1.0)*x15007*x15020)));
evalcond[3]=((((-1.0)*cj4*x15011))+((cj7*x15019))+((cj4*x15016)));
evalcond[4]=(((sj7*x15019))+(((-1.0)*cj4*sj5*x15008))+(((-1.0)*cj4*x15018)));
evalcond[5]=((((-1.0)*x15018))+(((-1.0)*x15005*x15012*x15013))+((x15014*x15021))+((r20*x15015))+((r21*x15006))+(((-1.0)*sj5*x15008)));
evalcond[6]=((((-1.0)*sj7*x15012*x15022))+x15011+(((-1.0)*gconst68*r21*x15013))+(((-1.0)*cj5*x15008))+((r20*x15005*x15006))+(((-1.0)*gconst67*r20*x15013)));
evalcond[7]=(((sj4*x15016))+(((-1.0)*x15005*x15013*x15017))+((sj7*x15010))+((r11*x15006))+(((-1.0)*x15009*x15011))+((x15007*x15021)));
evalcond[8]=((((-1.0)*x15010*x15013))+(((-1.0)*cj5*sj6*x15009))+(((-1.0)*r11*x15015*x15022))+(((-1.0)*sj4*sj5*x15008))+(((-1.0)*gconst68*r11*x15013))+((r10*x15005*x15006)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x15024=IKPowWithIntegerCheck(r02,-1);
if(!x15024.valid){
continue;
}
IkReal x15023=x15024.value;
CheckValue<IkReal> x15025=IKPowWithIntegerCheck(sj7,-1);
if(!x15025.valid){
continue;
}
if( IKabs((sj4*x15023)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x15023*(x15025.value)*((((cj4*cj5*sj6))+((cj4*cj6*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj4*x15023))+IKsqr((x15023*(x15025.value)*((((cj4*cj5*sj6))+((cj4*cj6*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((sj4*x15023), (x15023*(x15025.value)*((((cj4*cj5*sj6))+((cj4*cj6*sj5))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x15026=IKcos(j8);
IkReal x15027=IKsin(j8);
IkReal x15028=(gconst68*sj7);
IkReal x15029=(gconst68*r10);
IkReal x15030=((1.0)*cj6);
IkReal x15031=((1.0)*sj4);
IkReal x15032=(gconst67*r10);
IkReal x15033=(sj5*sj6);
IkReal x15034=(gconst67*r21);
IkReal x15035=((1.0)*cj7);
IkReal x15036=(gconst68*r20);
IkReal x15037=(gconst67*sj7);
IkReal x15038=(cj5*cj6);
IkReal x15039=(gconst67*r11);
IkReal x15040=((1.0)*cj5*sj6);
IkReal x15041=(r02*x15026);
IkReal x15042=((1.0)*x15026);
IkReal x15043=(cj7*x15027);
IkReal x15044=((1.0)*x15027);
evalcond[0]=((((-1.0)*x15031))+((r02*x15027)));
evalcond[1]=(((x15026*x15034))+(((-1.0)*x15036*x15042)));
evalcond[2]=(cj4+((x15026*x15039))+(((-1.0)*x15029*x15042)));
evalcond[3]=(((cj7*x15041))+(((-1.0)*cj4*x15033))+((cj4*x15038)));
evalcond[4]=((((-1.0)*cj4*x15040))+((sj7*x15041))+(((-1.0)*cj4*sj5*x15030)));
evalcond[5]=((((-1.0)*x15040))+(((-1.0)*sj5*x15030))+((r21*x15028))+((r20*x15037))+(((-1.0)*x15027*x15034*x15035))+((x15036*x15043)));
evalcond[6]=((((-1.0)*sj7*x15034*x15044))+x15033+(((-1.0)*cj5*x15030))+((r20*x15027*x15028))+(((-1.0)*gconst67*r20*x15035))+(((-1.0)*gconst68*r21*x15035)));
evalcond[7]=(((sj7*x15032))+((x15029*x15043))+(((-1.0)*x15031*x15033))+(((-1.0)*x15027*x15035*x15039))+((sj4*x15038))+((r11*x15028)));
evalcond[8]=((((-1.0)*cj5*sj6*x15031))+(((-1.0)*sj4*sj5*x15030))+(((-1.0)*x15032*x15035))+(((-1.0)*gconst68*r11*x15035))+((r10*x15027*x15028))+(((-1.0)*r11*x15037*x15044)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15045=((-1.0)*r10);
CheckValue<IkReal> x15046 = IKatan2WithCheck(IkReal(x15045),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15046.valid){
continue;
}
IkReal gconst69=((3.14159265358979)+(((-1.0)*(x15046.value))));
IkReal gconst70=x15045;
IkReal gconst71=((-1.0)*r11);
CheckValue<IkReal> x15047 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15047.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15047.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[2];
IkReal x15048=((-1.0)*r10);
IkReal x15049=((-1.0)*r11);
CheckValue<IkReal> x15051 = IKatan2WithCheck(IkReal(x15048),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15051.valid){
continue;
}
IkReal x15050=((1.0)*(x15051.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15048);
rxp1_1=(px*r21);
rxp1_2=(px*x15049);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj9=gconst70;
cj9=gconst71;
j9=((3.14159265)+(((-1.0)*x15050)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15050)));
IkReal gconst70=x15048;
IkReal gconst71=x15049;
j8eval[0]=r02;
j8eval[1]=sj7;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x15052=((-1.0)*r10);
IkReal x15053=((-1.0)*r11);
CheckValue<IkReal> x15055 = IKatan2WithCheck(IkReal(x15052),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15055.valid){
continue;
}
IkReal x15054=((1.0)*(x15055.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15052);
rxp1_1=(px*r21);
rxp1_2=(px*x15053);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj9=gconst70;
cj9=gconst71;
j9=((3.14159265)+(((-1.0)*x15054)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15054)));
IkReal gconst70=x15052;
IkReal gconst71=x15053;
j8eval[0]=r02;
j8eval[1]=cj7;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
IkReal x15056=((-1.0)*r10);
IkReal x15057=((-1.0)*r11);
CheckValue<IkReal> x15059 = IKatan2WithCheck(IkReal(x15056),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15059.valid){
continue;
}
IkReal x15058=((1.0)*(x15059.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15056);
rxp1_1=(px*r21);
rxp1_2=(px*x15057);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj9=gconst70;
cj9=gconst71;
j9=((3.14159265)+(((-1.0)*x15058)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15058)));
IkReal gconst70=x15056;
IkReal gconst71=x15057;
IkReal x15060=((1.0)*sj7);
j8eval[0]=(((r10*r21*x15060))+(((-1.0)*r11*r20*x15060)));
j8eval[1]=cj7;
j8eval[2]=r02;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x15061=(cj5*cj6);
IkReal x15062=(sj5*sj6);
CheckValue<IkReal> x15063=IKPowWithIntegerCheck(((((-1.0)*gconst70*r21*sj7))+((gconst71*r20*sj7))),-1);
if(!x15063.valid){
continue;
}
CheckValue<IkReal> x15064=IKPowWithIntegerCheck(cj7,-1);
if(!x15064.valid){
continue;
}
CheckValue<IkReal> x15065=IKPowWithIntegerCheck(r02,-1);
if(!x15065.valid){
continue;
}
if( IKabs(((x15063.value)*((x15061+(((-1.0)*x15062))+((cj7*gconst70*r20))+((cj7*gconst71*r21)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15064.value)*(x15065.value)*((((cj4*x15062))+(((-1.0)*cj4*x15061)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15063.value)*((x15061+(((-1.0)*x15062))+((cj7*gconst70*r20))+((cj7*gconst71*r21))))))+IKsqr(((x15064.value)*(x15065.value)*((((cj4*x15062))+(((-1.0)*cj4*x15061))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((x15063.value)*((x15061+(((-1.0)*x15062))+((cj7*gconst70*r20))+((cj7*gconst71*r21))))), ((x15064.value)*(x15065.value)*((((cj4*x15062))+(((-1.0)*cj4*x15061))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x15066=IKcos(j8);
IkReal x15067=IKsin(j8);
IkReal x15068=((1.0)*gconst71);
IkReal x15069=((1.0)*cj6);
IkReal x15070=((1.0)*sj4);
IkReal x15071=(sj5*sj6);
IkReal x15072=(cj7*r11);
IkReal x15073=(cj7*r10);
IkReal x15074=((1.0)*gconst70);
IkReal x15075=(cj5*cj6);
IkReal x15076=(r10*sj7);
IkReal x15077=(r20*sj7);
IkReal x15078=(gconst71*sj7);
IkReal x15079=(cj7*r20);
IkReal x15080=((1.0)*cj5*sj6);
IkReal x15081=(r02*x15066);
IkReal x15082=(gconst70*x15066);
IkReal x15083=(gconst71*x15067);
IkReal x15084=(r21*x15067*x15074);
evalcond[0]=((((-1.0)*x15070))+((r02*x15067)));
evalcond[1]=((((-1.0)*r20*x15066*x15068))+((r21*x15082)));
evalcond[2]=(cj4+(((-1.0)*r10*x15066*x15068))+((r11*x15082)));
evalcond[3]=(((cj7*x15081))+(((-1.0)*cj4*x15071))+((cj4*x15075)));
evalcond[4]=(((sj7*x15081))+(((-1.0)*cj4*sj5*x15069))+(((-1.0)*cj4*x15080)));
evalcond[5]=((((-1.0)*sj5*x15069))+(((-1.0)*x15080))+((x15079*x15083))+((r21*x15078))+((gconst70*x15077))+(((-1.0)*cj7*x15084)));
evalcond[6]=(x15071+(((-1.0)*cj5*x15069))+(((-1.0)*cj7*r21*x15068))+(((-1.0)*sj7*x15084))+((x15077*x15083))+(((-1.0)*x15074*x15079)));
evalcond[7]=(((sj4*x15075))+((r11*x15078))+(((-1.0)*x15070*x15071))+((gconst70*x15076))+(((-1.0)*x15067*x15072*x15074))+((x15073*x15083)));
evalcond[8]=((((-1.0)*sj4*sj5*x15069))+(((-1.0)*cj5*sj6*x15070))+(((-1.0)*x15073*x15074))+(((-1.0)*x15068*x15072))+(((-1.0)*r11*sj7*x15067*x15074))+((x15076*x15083)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x15086=IKPowWithIntegerCheck(r02,-1);
if(!x15086.valid){
continue;
}
IkReal x15085=x15086.value;
CheckValue<IkReal> x15087=IKPowWithIntegerCheck(cj7,-1);
if(!x15087.valid){
continue;
}
if( IKabs((sj4*x15085)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x15085*(x15087.value)*((((cj4*sj5*sj6))+(((-1.0)*cj4*cj5*cj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj4*x15085))+IKsqr((x15085*(x15087.value)*((((cj4*sj5*sj6))+(((-1.0)*cj4*cj5*cj6))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((sj4*x15085), (x15085*(x15087.value)*((((cj4*sj5*sj6))+(((-1.0)*cj4*cj5*cj6))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x15088=IKcos(j8);
IkReal x15089=IKsin(j8);
IkReal x15090=((1.0)*gconst71);
IkReal x15091=((1.0)*cj6);
IkReal x15092=((1.0)*sj4);
IkReal x15093=(sj5*sj6);
IkReal x15094=(cj7*r11);
IkReal x15095=(cj7*r10);
IkReal x15096=((1.0)*gconst70);
IkReal x15097=(cj5*cj6);
IkReal x15098=(r10*sj7);
IkReal x15099=(r20*sj7);
IkReal x15100=(gconst71*sj7);
IkReal x15101=(cj7*r20);
IkReal x15102=((1.0)*cj5*sj6);
IkReal x15103=(r02*x15088);
IkReal x15104=(gconst70*x15088);
IkReal x15105=(gconst71*x15089);
IkReal x15106=(r21*x15089*x15096);
evalcond[0]=(((r02*x15089))+(((-1.0)*x15092)));
evalcond[1]=(((r21*x15104))+(((-1.0)*r20*x15088*x15090)));
evalcond[2]=((((-1.0)*r10*x15088*x15090))+cj4+((r11*x15104)));
evalcond[3]=(((cj4*x15097))+((cj7*x15103))+(((-1.0)*cj4*x15093)));
evalcond[4]=((((-1.0)*cj4*x15102))+(((-1.0)*cj4*sj5*x15091))+((sj7*x15103)));
evalcond[5]=((((-1.0)*cj7*x15106))+(((-1.0)*sj5*x15091))+((r21*x15100))+((gconst70*x15099))+(((-1.0)*x15102))+((x15101*x15105)));
evalcond[6]=(((x15099*x15105))+x15093+(((-1.0)*cj5*x15091))+(((-1.0)*cj7*r21*x15090))+(((-1.0)*x15096*x15101))+(((-1.0)*sj7*x15106)));
evalcond[7]=(((x15095*x15105))+(((-1.0)*x15089*x15094*x15096))+(((-1.0)*x15092*x15093))+((gconst70*x15098))+((sj4*x15097))+((r11*x15100)));
evalcond[8]=((((-1.0)*cj5*sj6*x15092))+(((-1.0)*sj4*sj5*x15091))+((x15098*x15105))+(((-1.0)*x15095*x15096))+(((-1.0)*x15090*x15094))+(((-1.0)*r11*sj7*x15089*x15096)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x15108=IKPowWithIntegerCheck(r02,-1);
if(!x15108.valid){
continue;
}
IkReal x15107=x15108.value;
CheckValue<IkReal> x15109=IKPowWithIntegerCheck(sj7,-1);
if(!x15109.valid){
continue;
}
if( IKabs((sj4*x15107)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x15107*(x15109.value)*((((cj4*cj5*sj6))+((cj4*cj6*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj4*x15107))+IKsqr((x15107*(x15109.value)*((((cj4*cj5*sj6))+((cj4*cj6*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((sj4*x15107), (x15107*(x15109.value)*((((cj4*cj5*sj6))+((cj4*cj6*sj5))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x15110=IKcos(j8);
IkReal x15111=IKsin(j8);
IkReal x15112=((1.0)*gconst71);
IkReal x15113=((1.0)*cj6);
IkReal x15114=((1.0)*sj4);
IkReal x15115=(sj5*sj6);
IkReal x15116=(cj7*r11);
IkReal x15117=(cj7*r10);
IkReal x15118=((1.0)*gconst70);
IkReal x15119=(cj5*cj6);
IkReal x15120=(r10*sj7);
IkReal x15121=(r20*sj7);
IkReal x15122=(gconst71*sj7);
IkReal x15123=(cj7*r20);
IkReal x15124=((1.0)*cj5*sj6);
IkReal x15125=(r02*x15110);
IkReal x15126=(gconst70*x15110);
IkReal x15127=(gconst71*x15111);
IkReal x15128=(r21*x15111*x15118);
evalcond[0]=((((-1.0)*x15114))+((r02*x15111)));
evalcond[1]=(((r21*x15126))+(((-1.0)*r20*x15110*x15112)));
evalcond[2]=(cj4+(((-1.0)*r10*x15110*x15112))+((r11*x15126)));
evalcond[3]=((((-1.0)*cj4*x15115))+((cj7*x15125))+((cj4*x15119)));
evalcond[4]=((((-1.0)*cj4*sj5*x15113))+(((-1.0)*cj4*x15124))+((sj7*x15125)));
evalcond[5]=((((-1.0)*sj5*x15113))+((r21*x15122))+(((-1.0)*x15124))+((gconst70*x15121))+(((-1.0)*cj7*x15128))+((x15123*x15127)));
evalcond[6]=(((x15121*x15127))+(((-1.0)*cj7*r21*x15112))+(((-1.0)*cj5*x15113))+(((-1.0)*sj7*x15128))+x15115+(((-1.0)*x15118*x15123)));
evalcond[7]=(((sj4*x15119))+((gconst70*x15120))+(((-1.0)*x15114*x15115))+((x15117*x15127))+((r11*x15122))+(((-1.0)*x15111*x15116*x15118)));
evalcond[8]=((((-1.0)*cj5*sj6*x15114))+(((-1.0)*x15117*x15118))+(((-1.0)*sj4*sj5*x15113))+(((-1.0)*r11*sj7*x15111*x15118))+(((-1.0)*x15112*x15116))+((x15120*x15127)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x15130=IKPowWithIntegerCheck(r02,-1);
if(!x15130.valid){
continue;
}
IkReal x15129=x15130.value;
CheckValue<IkReal> x15131=IKPowWithIntegerCheck(sj7,-1);
if(!x15131.valid){
continue;
}
if( IKabs((sj4*x15129)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x15129*(x15131.value)*((((cj4*cj5*sj6))+((cj4*cj6*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj4*x15129))+IKsqr((x15129*(x15131.value)*((((cj4*cj5*sj6))+((cj4*cj6*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((sj4*x15129), (x15129*(x15131.value)*((((cj4*cj5*sj6))+((cj4*cj6*sj5))))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x15132=IKcos(j8);
IkReal x15133=IKsin(j8);
IkReal x15134=((1.0)*cj7);
IkReal x15135=(cj9*sj7);
IkReal x15136=((1.0)*cj6);
IkReal x15137=((1.0)*sj7);
IkReal x15138=(r20*sj9);
IkReal x15139=(sj5*sj6);
IkReal x15140=((1.0)*sj4);
IkReal x15141=(r10*sj9);
IkReal x15142=(cj5*cj6);
IkReal x15143=(cj7*cj9);
IkReal x15144=((1.0)*cj5*sj6);
IkReal x15145=(r02*x15132);
IkReal x15146=(r10*x15133);
IkReal x15147=(sj9*x15132);
IkReal x15148=(r20*x15133);
IkReal x15149=(r11*sj9*x15133);
IkReal x15150=((1.0)*cj9*x15132);
IkReal x15151=(r21*sj9*x15133);
evalcond[0]=((((-1.0)*x15140))+((r02*x15133)));
evalcond[1]=((((-1.0)*r20*x15150))+((r21*x15147)));
evalcond[2]=(cj4+(((-1.0)*r10*x15150))+((r11*x15147)));
evalcond[3]=((((-1.0)*cj4*x15139))+((cj4*x15142))+((cj7*x15145)));
evalcond[4]=((((-1.0)*cj4*sj5*x15136))+((sj7*x15145))+(((-1.0)*cj4*x15144)));
evalcond[5]=((((-1.0)*x15134*x15151))+((r21*x15135))+(((-1.0)*x15144))+((sj7*x15138))+(((-1.0)*sj5*x15136))+((x15143*x15148)));
evalcond[6]=((((-1.0)*x15134*x15138))+(((-1.0)*x15137*x15151))+x15139+(((-1.0)*cj5*x15136))+(((-1.0)*cj9*r21*x15134))+((x15135*x15148)));
evalcond[7]=(((sj4*x15142))+((sj7*x15141))+(((-1.0)*x15134*x15149))+(((-1.0)*x15139*x15140))+((x15143*x15146))+((r11*x15135)));
evalcond[8]=((((-1.0)*cj9*r11*x15134))+(((-1.0)*x15134*x15141))+(((-1.0)*cj5*sj6*x15140))+(((-1.0)*x15137*x15149))+((x15135*x15146))+(((-1.0)*sj4*sj5*x15136)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x15152=((1.0)*sj9);
IkReal x15153=((1.0)*cj9);
CheckValue<IkReal> x15154=IKPowWithIntegerCheck((((cj7*cj9*r20))+(((-1.0)*cj7*r21*x15152))),-1);
if(!x15154.valid){
continue;
}
CheckValue<IkReal> x15155=IKPowWithIntegerCheck(((((-1.0)*r10*x15153))+((r11*sj9))),-1);
if(!x15155.valid){
continue;
}
if( IKabs(((x15154.value)*(((((-1.0)*r21*sj7*x15153))+((cj6*sj5))+((cj5*sj6))+(((-1.0)*r20*sj7*x15152)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj4*(x15155.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15154.value)*(((((-1.0)*r21*sj7*x15153))+((cj6*sj5))+((cj5*sj6))+(((-1.0)*r20*sj7*x15152))))))+IKsqr(((-1.0)*cj4*(x15155.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((x15154.value)*(((((-1.0)*r21*sj7*x15153))+((cj6*sj5))+((cj5*sj6))+(((-1.0)*r20*sj7*x15152))))), ((-1.0)*cj4*(x15155.value)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x15156=IKcos(j8);
IkReal x15157=IKsin(j8);
IkReal x15158=((1.0)*cj7);
IkReal x15159=(cj9*sj7);
IkReal x15160=((1.0)*cj6);
IkReal x15161=((1.0)*sj7);
IkReal x15162=(r20*sj9);
IkReal x15163=(sj5*sj6);
IkReal x15164=((1.0)*sj4);
IkReal x15165=(r10*sj9);
IkReal x15166=(cj5*cj6);
IkReal x15167=(cj7*cj9);
IkReal x15168=((1.0)*cj5*sj6);
IkReal x15169=(r02*x15156);
IkReal x15170=(r10*x15157);
IkReal x15171=(sj9*x15156);
IkReal x15172=(r20*x15157);
IkReal x15173=(r11*sj9*x15157);
IkReal x15174=((1.0)*cj9*x15156);
IkReal x15175=(r21*sj9*x15157);
evalcond[0]=((((-1.0)*x15164))+((r02*x15157)));
evalcond[1]=((((-1.0)*r20*x15174))+((r21*x15171)));
evalcond[2]=(((r11*x15171))+cj4+(((-1.0)*r10*x15174)));
evalcond[3]=(((cj4*x15166))+((cj7*x15169))+(((-1.0)*cj4*x15163)));
evalcond[4]=(((sj7*x15169))+(((-1.0)*cj4*sj5*x15160))+(((-1.0)*cj4*x15168)));
evalcond[5]=(((r21*x15159))+((sj7*x15162))+(((-1.0)*sj5*x15160))+(((-1.0)*x15168))+((x15167*x15172))+(((-1.0)*x15158*x15175)));
evalcond[6]=(((x15159*x15172))+x15163+(((-1.0)*x15161*x15175))+(((-1.0)*cj5*x15160))+(((-1.0)*cj9*r21*x15158))+(((-1.0)*x15158*x15162)));
evalcond[7]=(((sj4*x15166))+((sj7*x15165))+(((-1.0)*x15163*x15164))+((x15167*x15170))+((r11*x15159))+(((-1.0)*x15158*x15173)));
evalcond[8]=((((-1.0)*cj9*r11*x15158))+((x15159*x15170))+(((-1.0)*cj5*sj6*x15164))+(((-1.0)*x15161*x15173))+(((-1.0)*x15158*x15165))+(((-1.0)*sj4*sj5*x15160)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x15176=IKPowWithIntegerCheck(r02,-1);
if(!x15176.valid){
continue;
}
CheckValue<IkReal> x15177=IKPowWithIntegerCheck((((r11*sj9))+(((-1.0)*cj9*r10))),-1);
if(!x15177.valid){
continue;
}
if( IKabs((sj4*(x15176.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj4*(x15177.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj4*(x15176.value)))+IKsqr(((-1.0)*cj4*(x15177.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((sj4*(x15176.value)), ((-1.0)*cj4*(x15177.value)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x15178=IKcos(j8);
IkReal x15179=IKsin(j8);
IkReal x15180=((1.0)*cj7);
IkReal x15181=(cj9*sj7);
IkReal x15182=((1.0)*cj6);
IkReal x15183=((1.0)*sj7);
IkReal x15184=(r20*sj9);
IkReal x15185=(sj5*sj6);
IkReal x15186=((1.0)*sj4);
IkReal x15187=(r10*sj9);
IkReal x15188=(cj5*cj6);
IkReal x15189=(cj7*cj9);
IkReal x15190=((1.0)*cj5*sj6);
IkReal x15191=(r02*x15178);
IkReal x15192=(r10*x15179);
IkReal x15193=(sj9*x15178);
IkReal x15194=(r20*x15179);
IkReal x15195=(r11*sj9*x15179);
IkReal x15196=((1.0)*cj9*x15178);
IkReal x15197=(r21*sj9*x15179);
evalcond[0]=((((-1.0)*x15186))+((r02*x15179)));
evalcond[1]=(((r21*x15193))+(((-1.0)*r20*x15196)));
evalcond[2]=(((r11*x15193))+cj4+(((-1.0)*r10*x15196)));
evalcond[3]=(((cj4*x15188))+((cj7*x15191))+(((-1.0)*cj4*x15185)));
evalcond[4]=((((-1.0)*cj4*sj5*x15182))+(((-1.0)*cj4*x15190))+((sj7*x15191)));
evalcond[5]=((((-1.0)*sj5*x15182))+((sj7*x15184))+((x15189*x15194))+(((-1.0)*x15190))+((r21*x15181))+(((-1.0)*x15180*x15197)));
evalcond[6]=((((-1.0)*cj5*x15182))+(((-1.0)*cj9*r21*x15180))+(((-1.0)*x15183*x15197))+(((-1.0)*x15180*x15184))+x15185+((x15181*x15194)));
evalcond[7]=((((-1.0)*x15185*x15186))+((sj4*x15188))+((sj7*x15187))+((x15189*x15192))+((r11*x15181))+(((-1.0)*x15180*x15195)));
evalcond[8]=((((-1.0)*sj4*sj5*x15182))+(((-1.0)*x15183*x15195))+(((-1.0)*cj5*sj6*x15186))+(((-1.0)*x15180*x15187))+(((-1.0)*cj9*r11*x15180))+((x15181*x15192)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x15198=((1.0)*cj9);
CheckValue<IkReal> x15199 = IKatan2WithCheck(IkReal(((((-1.0)*r10*sj4*x15198))+(((-1.0)*cj4*r00*x15198))+((r11*sj4*sj9))+((cj4*r01*sj9)))),IkReal(((((-1.0)*cj4*r02))+(((-1.0)*r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15199.valid){
continue;
}
CheckValue<IkReal> x15200=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15198))+(((-1.0)*r20*sj9)))),-1);
if(!x15200.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x15199.value)+(((1.5707963267949)*(x15200.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x15201=IKcos(j8);
IkReal x15202=IKsin(j8);
IkReal x15203=(cj9*r00);
IkReal x15204=((1.0)*sj9);
IkReal x15205=(cj9*r10);
IkReal x15206=((1.0)*cj6);
IkReal x15207=((1.0)*sj4);
IkReal x15208=(cj9*r20);
IkReal x15209=(sj7*sj9);
IkReal x15210=(cj9*sj7);
IkReal x15211=(sj5*sj6);
IkReal x15212=(cj5*cj6);
IkReal x15213=((1.0)*cj4);
IkReal x15214=(cj5*sj6);
IkReal x15215=((1.0)*x15201);
IkReal x15216=(cj7*x15202);
IkReal x15217=(sj7*x15202);
IkReal x15218=((1.0)*cj7*cj9);
IkReal x15219=(r12*x15201);
IkReal x15220=(sj7*x15201);
IkReal x15221=(sj9*x15201);
IkReal x15222=(cj7*x15201);
evalcond[0]=((((-1.0)*x15208*x15215))+((r22*x15202))+((r21*x15221)));
evalcond[1]=(cj4+((r12*x15202))+(((-1.0)*x15205*x15215))+((r11*x15221)));
evalcond[2]=((((-1.0)*x15207))+(((-1.0)*x15203*x15215))+((r02*x15202))+((r01*x15221)));
evalcond[3]=(((r20*x15209))+(((-1.0)*sj5*x15206))+((r22*x15222))+(((-1.0)*x15214))+((x15208*x15216))+((r21*x15210))+(((-1.0)*r21*x15204*x15216)));
evalcond[4]=(((r22*x15220))+(((-1.0)*r21*x15218))+x15211+(((-1.0)*cj5*x15206))+((x15208*x15217))+(((-1.0)*r21*x15204*x15217))+(((-1.0)*cj7*r20*x15204)));
evalcond[5]=(((x15203*x15216))+((cj4*x15212))+(((-1.0)*r01*x15204*x15216))+((r02*x15222))+((r00*x15209))+((r01*x15210))+(((-1.0)*x15211*x15213)));
evalcond[6]=(((r10*x15209))+((r11*x15210))+(((-1.0)*r11*x15204*x15216))+((x15205*x15216))+((cj7*x15219))+((sj4*x15212))+(((-1.0)*x15207*x15211)));
evalcond[7]=(((x15203*x15217))+(((-1.0)*r01*x15204*x15217))+((r02*x15220))+(((-1.0)*x15213*x15214))+(((-1.0)*cj7*r00*x15204))+(((-1.0)*r01*x15218))+(((-1.0)*cj4*sj5*x15206)));
evalcond[8]=((((-1.0)*r11*x15204*x15217))+((sj7*x15219))+((x15205*x15217))+(((-1.0)*r11*x15218))+(((-1.0)*sj4*sj5*x15206))+(((-1.0)*x15207*x15214))+(((-1.0)*cj7*r10*x15204)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x15223 = IKatan2WithCheck(IkReal((((r21*sj4*sj9))+(((-1.0)*cj9*r20*sj4)))),IkReal(((-1.0)*r22*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x15223.valid){
continue;
}
CheckValue<IkReal> x15224=IKPowWithIntegerCheck(IKsign((((r10*sj9))+((cj9*r11)))),-1);
if(!x15224.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x15223.value)+(((1.5707963267949)*(x15224.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x15225=IKcos(j8);
IkReal x15226=IKsin(j8);
IkReal x15227=(cj9*r00);
IkReal x15228=((1.0)*sj9);
IkReal x15229=(cj9*r10);
IkReal x15230=((1.0)*cj6);
IkReal x15231=((1.0)*sj4);
IkReal x15232=(cj9*r20);
IkReal x15233=(sj7*sj9);
IkReal x15234=(cj9*sj7);
IkReal x15235=(sj5*sj6);
IkReal x15236=(cj5*cj6);
IkReal x15237=((1.0)*cj4);
IkReal x15238=(cj5*sj6);
IkReal x15239=((1.0)*x15225);
IkReal x15240=(cj7*x15226);
IkReal x15241=(sj7*x15226);
IkReal x15242=((1.0)*cj7*cj9);
IkReal x15243=(r12*x15225);
IkReal x15244=(sj7*x15225);
IkReal x15245=(sj9*x15225);
IkReal x15246=(cj7*x15225);
evalcond[0]=((((-1.0)*x15232*x15239))+((r22*x15226))+((r21*x15245)));
evalcond[1]=(((r12*x15226))+cj4+((r11*x15245))+(((-1.0)*x15229*x15239)));
evalcond[2]=(((r01*x15245))+(((-1.0)*x15231))+((r02*x15226))+(((-1.0)*x15227*x15239)));
evalcond[3]=((((-1.0)*x15238))+(((-1.0)*r21*x15228*x15240))+((r21*x15234))+((r22*x15246))+((x15232*x15240))+(((-1.0)*sj5*x15230))+((r20*x15233)));
evalcond[4]=((((-1.0)*r21*x15228*x15241))+x15235+(((-1.0)*cj5*x15230))+((r22*x15244))+(((-1.0)*r21*x15242))+(((-1.0)*cj7*r20*x15228))+((x15232*x15241)));
evalcond[5]=(((r00*x15233))+((r01*x15234))+((x15227*x15240))+((cj4*x15236))+((r02*x15246))+(((-1.0)*x15235*x15237))+(((-1.0)*r01*x15228*x15240)));
evalcond[6]=((((-1.0)*x15231*x15235))+((x15229*x15240))+((cj7*x15243))+((r10*x15233))+(((-1.0)*r11*x15228*x15240))+((sj4*x15236))+((r11*x15234)));
evalcond[7]=((((-1.0)*r01*x15242))+(((-1.0)*x15237*x15238))+((x15227*x15241))+(((-1.0)*cj4*sj5*x15230))+((r02*x15244))+(((-1.0)*r01*x15228*x15241))+(((-1.0)*cj7*r00*x15228)));
evalcond[8]=((((-1.0)*x15231*x15238))+((x15229*x15241))+(((-1.0)*r11*x15242))+(((-1.0)*r11*x15228*x15241))+((sj7*x15243))+(((-1.0)*sj4*sj5*x15230))+(((-1.0)*cj7*r10*x15228)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x15247=IKPowWithIntegerCheck(IKsign((((r00*sj9))+((cj9*r01)))),-1);
if(!x15247.valid){
continue;
}
CheckValue<IkReal> x15248 = IKatan2WithCheck(IkReal((((cj4*r21*sj9))+(((-1.0)*cj4*cj9*r20)))),IkReal(((-1.0)*cj4*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x15248.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15247.value)))+(x15248.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x15249=IKcos(j8);
IkReal x15250=IKsin(j8);
IkReal x15251=(cj9*r00);
IkReal x15252=((1.0)*sj9);
IkReal x15253=(cj9*r10);
IkReal x15254=((1.0)*cj6);
IkReal x15255=((1.0)*sj4);
IkReal x15256=(cj9*r20);
IkReal x15257=(sj7*sj9);
IkReal x15258=(cj9*sj7);
IkReal x15259=(sj5*sj6);
IkReal x15260=(cj5*cj6);
IkReal x15261=((1.0)*cj4);
IkReal x15262=(cj5*sj6);
IkReal x15263=((1.0)*x15249);
IkReal x15264=(cj7*x15250);
IkReal x15265=(sj7*x15250);
IkReal x15266=((1.0)*cj7*cj9);
IkReal x15267=(r12*x15249);
IkReal x15268=(sj7*x15249);
IkReal x15269=(sj9*x15249);
IkReal x15270=(cj7*x15249);
evalcond[0]=(((r22*x15250))+(((-1.0)*x15256*x15263))+((r21*x15269)));
evalcond[1]=(cj4+(((-1.0)*x15253*x15263))+((r12*x15250))+((r11*x15269)));
evalcond[2]=((((-1.0)*x15255))+(((-1.0)*x15251*x15263))+((r01*x15269))+((r02*x15250)));
evalcond[3]=((((-1.0)*sj5*x15254))+((r22*x15270))+(((-1.0)*r21*x15252*x15264))+((r21*x15258))+((x15256*x15264))+((r20*x15257))+(((-1.0)*x15262)));
evalcond[4]=((((-1.0)*cj5*x15254))+x15259+(((-1.0)*r21*x15252*x15265))+((r22*x15268))+(((-1.0)*cj7*r20*x15252))+(((-1.0)*r21*x15266))+((x15256*x15265)));
evalcond[5]=((((-1.0)*r01*x15252*x15264))+((r00*x15257))+((x15251*x15264))+((r01*x15258))+((cj4*x15260))+(((-1.0)*x15259*x15261))+((r02*x15270)));
evalcond[6]=(((cj7*x15267))+(((-1.0)*x15255*x15259))+((r11*x15258))+((r10*x15257))+(((-1.0)*r11*x15252*x15264))+((sj4*x15260))+((x15253*x15264)));
evalcond[7]=((((-1.0)*r01*x15252*x15265))+((x15251*x15265))+(((-1.0)*cj7*r00*x15252))+(((-1.0)*x15261*x15262))+(((-1.0)*cj4*sj5*x15254))+(((-1.0)*r01*x15266))+((r02*x15268)));
evalcond[8]=((((-1.0)*cj7*r10*x15252))+((sj7*x15267))+(((-1.0)*x15255*x15262))+(((-1.0)*r11*x15252*x15265))+(((-1.0)*sj4*sj5*x15254))+(((-1.0)*r11*x15266))+((x15253*x15265)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x15271=cj9*cj9;
IkReal x15272=r21*r21;
IkReal x15273=r20*r20;
IkReal x15274=(cj5*cj6);
IkReal x15275=(cj7*r20);
IkReal x15276=((1.0)*r21);
IkReal x15277=(sj5*sj6);
IkReal x15278=(cj9*r20);
IkReal x15279=(r21*sj9);
IkReal x15280=(sj7*x15272);
IkReal x15281=(cj7*cj9*sj9);
CheckValue<IkReal> x15282=IKPowWithIntegerCheck(IKsign((((sj7*(r22*r22)))+x15280+(((-2.0)*sj7*x15278*x15279))+((sj7*x15271*x15273))+(((-1.0)*x15271*x15280)))),-1);
if(!x15282.valid){
continue;
}
CheckValue<IkReal> x15283 = IKatan2WithCheck(IkReal((((x15274*x15278))+(((-1.0)*x15277*x15278))+(((-1.0)*x15275*x15276))+((x15277*x15279))+(((2.0)*r21*x15271*x15275))+(((-1.0)*x15272*x15281))+((x15273*x15281))+(((-1.0)*sj9*x15274*x15276)))),IkReal((((r22*x15274))+((cj7*cj9*r21*r22))+(((-1.0)*r22*x15277))+((r22*sj9*x15275)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15283.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15282.value)))+(x15283.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[3];
IkReal x15284=IKcos(j8);
IkReal x15285=IKsin(j8);
IkReal x15286=(r21*sj9);
IkReal x15287=((1.0)*cj7);
IkReal x15288=(r20*sj9);
IkReal x15289=((1.0)*cj5);
IkReal x15290=(cj9*r21);
IkReal x15291=(cj9*r20);
IkReal x15292=(r22*x15284);
IkReal x15293=(sj7*x15285);
evalcond[0]=(((r22*x15285))+(((-1.0)*x15284*x15291))+((x15284*x15286)));
evalcond[1]=((((-1.0)*sj6*x15289))+((sj7*x15290))+(((-1.0)*x15285*x15286*x15287))+((cj7*x15292))+((cj7*x15285*x15291))+((sj7*x15288))+(((-1.0)*cj6*sj5)));
evalcond[2]=((((-1.0)*x15287*x15290))+((sj5*sj6))+(((-1.0)*x15286*x15293))+((sj7*x15292))+(((-1.0)*x15287*x15288))+(((-1.0)*cj6*x15289))+((x15291*x15293)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15294=(cj8*cj9);
IkReal x15295=(cj8*sj9);
if( IKabs(((((-1.0)*r00*x15294))+((r02*sj8))+((r01*x15295)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x15294))+(((-1.0)*r11*x15295))+(((-1.0)*r12*sj8)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x15294))+((r02*sj8))+((r01*x15295))))+IKsqr((((r10*x15294))+(((-1.0)*r11*x15295))+(((-1.0)*r12*sj8))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r00*x15294))+((r02*sj8))+((r01*x15295))), (((r10*x15294))+(((-1.0)*r11*x15295))+(((-1.0)*r12*sj8))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x15296=IKcos(j4);
IkReal x15297=IKsin(j4);
IkReal x15298=(cj6*sj5);
IkReal x15299=(cj8*sj7);
IkReal x15300=(cj8*sj9);
IkReal x15301=(cj9*r11);
IkReal x15302=(cj9*r10);
IkReal x15303=((1.0)*cj8);
IkReal x15304=(sj5*sj6);
IkReal x15305=(cj5*sj6);
IkReal x15306=(sj7*sj8);
IkReal x15307=(cj7*sj8);
IkReal x15308=((0.425)*sj5);
IkReal x15309=(cj5*cj6);
IkReal x15310=((1.0)*sj9);
IkReal x15311=((0.09465)*sj9);
IkReal x15312=(cj9*r01);
IkReal x15313=(sj7*sj9);
IkReal x15314=(cj7*cj8);
IkReal x15315=(cj9*r00);
IkReal x15316=((1.0)*cj7);
IkReal x15317=((1.0)*x15305);
IkReal x15318=((0.39225)*x15297);
IkReal x15319=((1.0)*x15296);
IkReal x15320=(cj7*x15310);
IkReal x15321=((1.0)*x15297);
IkReal x15322=((0.39225)*x15296);
evalcond[0]=(x15296+((r12*sj8))+(((-1.0)*x15302*x15303))+((r11*x15300)));
evalcond[1]=((((-1.0)*x15303*x15315))+((r01*x15300))+((r02*sj8))+(((-1.0)*x15321)));
evalcond[2]=(((x15296*x15308))+(((-0.09465)*x15312))+(((-0.10915)*x15297))+(((-1.0)*px))+(((-1.0)*r00*x15311))+((x15298*x15322))+((x15305*x15322)));
evalcond[3]=(((x15297*x15308))+(((-0.09465)*x15301))+(((-1.0)*py))+((x15298*x15318))+(((0.10915)*x15296))+((x15305*x15318))+(((-1.0)*r10*x15311)));
evalcond[4]=(((sj7*x15312))+((x15296*x15309))+((r00*x15313))+((r02*x15314))+(((-1.0)*r01*x15307*x15310))+((x15307*x15315))+(((-1.0)*x15304*x15319)));
evalcond[5]=((((-1.0)*x15304*x15321))+((r12*x15314))+((x15297*x15309))+((x15302*x15307))+(((-1.0)*r11*x15307*x15310))+((r10*x15313))+((sj7*x15301)));
evalcond[6]=((((-1.0)*r01*x15306*x15310))+(((-1.0)*x15296*x15317))+((x15306*x15315))+(((-1.0)*x15298*x15319))+(((-1.0)*r00*x15320))+(((-1.0)*x15312*x15316))+((r02*x15299)));
evalcond[7]=((((-1.0)*x15297*x15317))+(((-1.0)*x15301*x15316))+((x15302*x15306))+(((-1.0)*x15298*x15321))+((r12*x15299))+(((-1.0)*r11*x15306*x15310))+(((-1.0)*r10*x15320)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x15323=cj9*cj9;
IkReal x15324=r20*r20;
IkReal x15325=r21*r21;
IkReal x15326=(r20*sj7);
IkReal x15327=((2.0)*r21);
IkReal x15328=(cj5*sj6);
IkReal x15329=((1.0)*sj9);
IkReal x15330=(cj9*r20);
IkReal x15331=(cj6*sj5);
IkReal x15332=(cj7*x15325);
IkReal x15333=(cj9*sj7*sj9);
CheckValue<IkReal> x15334=IKPowWithIntegerCheck(IKsign((((cj7*x15323*x15324))+(((-1.0)*x15323*x15332))+(((-1.0)*cj7*sj9*x15327*x15330))+x15332+((cj7*(r22*r22))))),-1);
if(!x15334.valid){
continue;
}
CheckValue<IkReal> x15335 = IKatan2WithCheck(IkReal(((((-1.0)*cj9*sj7*x15324*x15329))+((x15330*x15331))+(((-1.0)*r21*x15328*x15329))+((x15328*x15330))+((x15325*x15333))+((r21*x15326))+(((-1.0)*x15323*x15326*x15327))+(((-1.0)*r21*x15329*x15331)))),IkReal(((((-1.0)*cj9*r21*r22*sj7))+((r22*x15328))+(((-1.0)*r22*x15326*x15329))+((r22*x15331)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15335.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15334.value)))+(x15335.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[3];
IkReal x15336=IKcos(j8);
IkReal x15337=IKsin(j8);
IkReal x15338=(r21*sj9);
IkReal x15339=((1.0)*cj7);
IkReal x15340=(r20*sj9);
IkReal x15341=((1.0)*cj5);
IkReal x15342=(cj9*r21);
IkReal x15343=(cj9*r20);
IkReal x15344=(r22*x15336);
IkReal x15345=(sj7*x15337);
evalcond[0]=(((x15336*x15338))+(((-1.0)*x15336*x15343))+((r22*x15337)));
evalcond[1]=(((sj7*x15340))+((sj7*x15342))+(((-1.0)*x15337*x15338*x15339))+((cj7*x15337*x15343))+((cj7*x15344))+(((-1.0)*cj6*sj5))+(((-1.0)*sj6*x15341)));
evalcond[2]=((((-1.0)*x15338*x15345))+((sj5*sj6))+((sj7*x15344))+(((-1.0)*x15339*x15340))+(((-1.0)*x15339*x15342))+(((-1.0)*cj6*x15341))+((x15343*x15345)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15346=(cj8*cj9);
IkReal x15347=(cj8*sj9);
if( IKabs((((r01*x15347))+((r02*sj8))+(((-1.0)*r00*x15346)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x15346))+(((-1.0)*r11*x15347))+(((-1.0)*r12*sj8)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x15347))+((r02*sj8))+(((-1.0)*r00*x15346))))+IKsqr((((r10*x15346))+(((-1.0)*r11*x15347))+(((-1.0)*r12*sj8))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((r01*x15347))+((r02*sj8))+(((-1.0)*r00*x15346))), (((r10*x15346))+(((-1.0)*r11*x15347))+(((-1.0)*r12*sj8))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x15348=IKcos(j4);
IkReal x15349=IKsin(j4);
IkReal x15350=(cj6*sj5);
IkReal x15351=(cj8*sj7);
IkReal x15352=(cj8*sj9);
IkReal x15353=(cj9*r11);
IkReal x15354=(cj9*r10);
IkReal x15355=((1.0)*cj8);
IkReal x15356=(sj5*sj6);
IkReal x15357=(cj5*sj6);
IkReal x15358=(sj7*sj8);
IkReal x15359=(cj7*sj8);
IkReal x15360=((0.425)*sj5);
IkReal x15361=(cj5*cj6);
IkReal x15362=((1.0)*sj9);
IkReal x15363=((0.09465)*sj9);
IkReal x15364=(cj9*r01);
IkReal x15365=(sj7*sj9);
IkReal x15366=(cj7*cj8);
IkReal x15367=(cj9*r00);
IkReal x15368=((1.0)*cj7);
IkReal x15369=((1.0)*x15357);
IkReal x15370=((0.39225)*x15349);
IkReal x15371=((1.0)*x15348);
IkReal x15372=(cj7*x15362);
IkReal x15373=((1.0)*x15349);
IkReal x15374=((0.39225)*x15348);
evalcond[0]=((((-1.0)*x15354*x15355))+x15348+((r11*x15352))+((r12*sj8)));
evalcond[1]=((((-1.0)*x15355*x15367))+((r02*sj8))+(((-1.0)*x15373))+((r01*x15352)));
evalcond[2]=((((-0.10915)*x15349))+((x15357*x15374))+((x15348*x15360))+(((-1.0)*px))+((x15350*x15374))+(((-1.0)*r00*x15363))+(((-0.09465)*x15364)));
evalcond[3]=(((x15357*x15370))+(((-1.0)*r10*x15363))+((x15349*x15360))+(((-1.0)*py))+(((0.10915)*x15348))+((x15350*x15370))+(((-0.09465)*x15353)));
evalcond[4]=((((-1.0)*x15356*x15371))+((x15348*x15361))+((sj7*x15364))+((x15359*x15367))+(((-1.0)*r01*x15359*x15362))+((r02*x15366))+((r00*x15365)));
evalcond[5]=((((-1.0)*r11*x15359*x15362))+(((-1.0)*x15356*x15373))+((r10*x15365))+((r12*x15366))+((x15349*x15361))+((sj7*x15353))+((x15354*x15359)));
evalcond[6]=((((-1.0)*x15348*x15369))+(((-1.0)*x15364*x15368))+(((-1.0)*r00*x15372))+((r02*x15351))+((x15358*x15367))+(((-1.0)*r01*x15358*x15362))+(((-1.0)*x15350*x15371)));
evalcond[7]=((((-1.0)*r11*x15358*x15362))+(((-1.0)*x15349*x15369))+(((-1.0)*x15353*x15368))+((r12*x15351))+(((-1.0)*r10*x15372))+((x15354*x15358))+(((-1.0)*x15350*x15373)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j4;
vinfos[0].indices[0] = _ij4[0];
vinfos[0].indices[1] = _ij4[1];
vinfos[0].maxsolutions = _nj4;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j5;
vinfos[1].indices[0] = _ij5[0];
vinfos[1].indices[1] = _ij5[1];
vinfos[1].maxsolutions = _nj5;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j6;
vinfos[2].indices[0] = _ij6[0];
vinfos[2].indices[1] = _ij6[1];
vinfos[2].maxsolutions = _nj6;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j7;
vinfos[3].indices[0] = _ij7[0];
vinfos[3].indices[1] = _ij7[1];
vinfos[3].maxsolutions = _nj7;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j8;
vinfos[4].indices[0] = _ij8[0];
vinfos[4].indices[1] = _ij8[1];
vinfos[4].maxsolutions = _nj8;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j9;
vinfos[5].indices[0] = _ij9[0];
vinfos[5].indices[1] = _ij9[1];
vinfos[5].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "48388d1a0dbaab6507f24cce62d27d3c"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
